dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,285,"    SUBARRAY_ENDS_AFTER_ARRAY_END(""subarray ends after array end""),",4,1,0,1,2,0,10,0,0,17,63,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,286,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),",2,0,0,3,6,0,0,0,0,3,87,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,287,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),",2,0,0,3,6,0,0,0,0,3,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,288,"    TOO_SMALL_COST_RELATIVE_TOLERANCE(""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible""),",2,0,0,3,6,0,0,0,0,3,136,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,289,"    TOO_SMALL_INTEGRATION_INTERVAL(""too small integration interval: length = {0}""),",0,0,0,2,4,0,0,0,0,6,79,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,290,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),",2,0,0,3,6,0,0,0,0,3,120,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,291,"    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible""),",0,0,0,3,6,0,0,0,0,9,156,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,292,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),",0,0,0,2,4,0,0,0,0,6,76,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,293,"    TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED(""two or more values required in each category, one has {0}""),",2,0,0,2,4,0,0,0,0,3,101,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,294,"    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(""unable to bracket optimum in line search""),",2,0,0,1,2,0,0,0,0,3,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,295,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),",2,0,0,1,2,0,0,0,0,3,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,296,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),",2,0,0,1,2,0,0,0,0,3,95,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,297,"    UNABLE_TO_ORTHOGONOLIZE_MATRIX(""unable to orthogonalize matrix in {0} iterations""),",2,0,0,2,4,0,0,0,0,3,83,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,298,"    UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN(""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix""),",4,0,0,3,6,0,8,0,0,14,117,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,299,"    UNABLE_TO_SOLVE_SINGULAR_PROBLEM(""unable to solve: singular problem""),",2,1,0,1,2,0,4,0,0,8,70,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,300,"    UNBOUNDED_SOLUTION(""unbounded solution""),",2,0,0,1,2,0,0,0,0,3,41,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,301,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),",2,0,0,20,40,0,0,0,0,3,118,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,302,"    CANNOT_PARSE_AS_TYPE(""string {0} unparseable (from position {1}) as an object of type {2}""), /* keep */",2,0,0,5,10,0,0,0,0,3,103,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,303,"    CANNOT_PARSE(""string {0} unparseable (from position {1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,70,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,304,"    UNPARSEABLE_3D_VECTOR(""unparseable 3D vector: \""{0}\""""),",2,0,0,2,4,0,4,0,0,7,56,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,305,"    UNPARSEABLE_COMPLEX_NUMBER(""unparseable complex number: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,66,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,306,"    UNPARSEABLE_FRACTION_NUMBER(""unparseable fraction number: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,68,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,307,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),",4,0,0,2,4,1,0,2,0,7,60,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,308,"    UNSUPPORTED_EXPANSION_MODE(""unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})""),",2,0,0,8,16,0,0,0,0,3,106,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,309,"    UNSUPPORTED_OPERATION(""unsupported operation""), /* keep */",2,0,0,1,2,0,0,0,0,3,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,310,"    ARITHMETIC_EXCEPTION(""arithmetic exception""), /* keep */",2,0,0,1,2,0,0,0,0,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,311,"    ILLEGAL_STATE(""illegal state""), /* keep */",2,0,0,1,2,0,0,0,0,3,42,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,312,"    USER_EXCEPTION(""exception generated in user code""), /* keep */",2,0,0,1,2,0,8,0,0,11,62,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,313,"    URL_CONTAINS_NO_DATA(""URL {0} contains no data""),",2,0,0,2,4,0,0,0,0,3,49,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,314,"    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(""{0} values have been added before statistic is configured""),",2,0,0,2,4,0,0,0,0,3,103,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,315,"    VECTOR_LENGTH_MISMATCH(""vector length mismatch: got {0} but expected {1}""),",8,1,0,3,6,0,4,0,0,14,75,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,316,"    VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT(""vector must have at least one element""),",2,0,0,1,2,0,0,0,0,3,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,317,"    WEIGHT_AT_LEAST_ONE_NON_ZERO(""weigth array must contain at least one non-zero value""),",4,2,0,1,2,0,6,0,0,14,86,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,318,"    WRONG_BLOCK_LENGTH(""wrong array shape (block length = {0}, expected {1})""),",2,0,0,4,8,0,0,0,0,3,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,319,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),",2,0,0,3,6,0,0,0,0,3,64,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,320,"    NUMBER_OF_POINTS(""number of points ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,54,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,321,"    ZERO_DENOMINATOR(""denominator must be different from 0""),",2,0,0,1,2,0,0,0,0,3,57,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,322,"    ZERO_DENOMINATOR_IN_FRACTION(""zero denominator in fraction {0}/{1}""),",2,0,0,3,6,0,0,0,0,3,69,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,323,"    ZERO_FRACTION_TO_DIVIDE_BY(""the fraction to divide by must not be zero: {0}/{1}""),",6,0,0,3,6,0,0,0,0,9,82,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,324,"    ZERO_NORM(""zero norm""),",2,0,0,1,2,0,0,0,0,3,23,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,325,"    ZERO_NORM_FOR_ROTATION_AXIS(""zero norm for rotation axis""),",0,0,0,1,2,0,0,0,0,3,59,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,326,"    ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR(""zero norm for rotation defining vector""),",2,0,0,1,2,0,0,0,0,3,81,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,327,"    ZERO_NOT_ALLOWED(""zero not allowed here"");",0,0,0,1,2,0,0,0,0,3,42,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,39,public enum LocalizedFormats implements Localizable {,2,0,0,0,1,1,0,2,0,5,53,1,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,58,42,        final List<Object> list = new ArrayList<Object>();,10,1,0,1,2,1,0,8,0,21,50,3,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,58,43,        if (array != null) {,0,0,0,1,3,0,0,0,0,4,20,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,58,44,            for (Object o : array) {,4,0,0,1,3,0,6,2,0,12,24,3,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,58,45,                if (o instanceof Object[]) {,2,0,0,2,5,0,0,2,0,4,28,9,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,58,46,                    for (Object oR : flatten((Object[]) o)) {,4,0,0,4,9,0,2,4,0,10,41,10,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,58,47,                        list.add(oR);,2,0,0,1,2,0,6,0,0,9,13,3,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,58,50,                    list.add(o);,0,0,0,1,2,0,6,0,0,6,12,11,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,58,54,        return list.toArray();,0,0,0,1,2,1,4,0,0,4,22,5,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/VectorialPointValuePair,58,46,"    public VectorialPointValuePair(final double[] point, final double[] value) {",12,1,0,3,7,3,0,0,0,17,76,2,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/VectorialPointValuePair,58,47,        this.point = (point == null) ? null : point.clone();,0,0,0,2,4,0,0,0,0,6,52,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/VectorialPointValuePair,58,48,        this.value = (value == null) ? null : value.clone();,4,1,0,2,4,0,4,0,0,10,52,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/VectorialPointValuePair,58,49,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/VectorialPointValuePair,58,97,        return value;,0,0,0,0,0,1,0,0,0,1,13,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/WeightedObservedPoint,58,57,        return weight;,4,0,0,0,0,1,0,0,0,5,14,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/WeightedObservedPoint,58,64,        return x;,2,0,0,0,0,1,0,0,0,2,9,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/WeightedObservedPoint,58,71,        return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,147,            this.observations = observations.clone();,2,0,0,1,2,0,4,0,0,7,41,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,148,        },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,156,            if (parameters == null) {,0,0,0,1,3,0,0,0,0,4,25,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,157,                parameters = basicGuess(observations);,2,0,0,1,2,0,4,0,0,7,38,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,159,            return parameters.clone();,4,1,0,1,2,1,4,0,0,10,26,1,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,169,"            Arrays.sort(points, createWeightedObservedPointComparator());",0,0,0,2,4,0,8,0,0,8,61,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,170,            double[] params = new double[3];,2,0,0,2,4,0,0,0,0,2,32,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,172,            int maxYIdx = findMaxY(points);,2,0,0,1,2,0,4,0,0,6,31,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,173,            params[0] = points[maxYIdx].getY();,0,0,1,3,6,0,2,0,0,9,35,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,174,            params[1] = points[maxYIdx].getX();,0,0,1,3,6,0,2,0,0,9,35,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,178,                double halfY = params[0] + ((params[1] - params[0]) / 2.0);,12,5,1,5,10,0,0,0,0,24,59,1,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,179,"                double fwhmX1 = interpolateXAtY(points, maxYIdx, -1, halfY);",2,0,0,1,2,0,8,0,0,11,60,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,185,            params[2] = fwhmApprox / (2.0 * Math.sqrt(2.0 * Math.log(2.0)));,2,3,1,4,8,0,8,0,0,16,64,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,187,            return params;,8,0,0,0,0,2,0,0,0,9,14,1,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,197,            int maxYIdx = 0;,0,0,0,0,0,0,0,0,0,0,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,198,            for (int i = 1; i < points.length; i++) {,10,1,0,1,3,0,0,0,0,12,41,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,199,                if (points[i].getY() > points[maxYIdx].getY()) {,0,0,0,5,11,0,0,0,0,16,48,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,200,                    maxYIdx = i;,0,0,0,0,0,0,0,0,0,0,12,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,203,            return maxYIdx;,2,0,0,0,0,1,0,0,0,2,15,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,223,            if (idxStep == 0) {,2,1,1,1,3,0,0,0,0,8,19,1,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,226,"            WeightedObservedPoint[] twoPoints = getInterpolationPointsForY(points, startIdx, idxStep, y);",2,0,0,2,4,0,10,2,0,14,93,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,258,            if (idxStep == 0) {,2,1,0,1,3,0,0,0,0,3,19,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,261,            for (int i = startIdx;,4,0,0,0,1,0,0,0,0,4,22,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,262,                 (idxStep < 0) ? (i + idxStep >= 0) : (i + idxStep < points.length);,14,5,0,3,6,0,0,0,0,19,67,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,264,"                if (isBetween(y, points[i].getY(), points[i + idxStep].getY())) {",4,1,1,6,13,0,8,0,0,19,65,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,263,                 i += idxStep) {,4,0,0,0,2,0,0,0,0,5,15,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,291,            return (value >= boundary1 && value <= boundary2) ||,8,4,0,1,2,1,0,0,0,12,52,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,302,            return new Comparator<WeightedObservedPoint>() {,0,0,0,1,3,1,0,4,0,4,48,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,121,"        return fit(new Gaussian.Parametric(), guess);",0,0,0,2,4,1,0,0,0,7,45,4,0.2,1,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,126,"        return fit(Integer.MAX_VALUE, f, initialGuess);",6,0,0,1,2,1,6,0,0,13,47,0,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,150,        double[] target  = new double[observations.size()];,4,2,0,3,6,0,4,0,0,10,51,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,151,        double[] weights = new double[observations.size()];,2,0,0,3,6,0,4,0,0,6,51,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,152,        int i = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,153,        for (WeightedObservedPoint point : observations) {,0,0,0,1,3,0,0,0,0,4,50,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,154,            target[i]  = point.getY();,0,0,0,2,4,0,0,0,0,6,26,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,155,            weights[i] = point.getWeight();,0,0,1,2,4,0,4,0,0,9,31,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,156,            ++i;,2,0,0,0,0,0,0,0,0,3,4,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,157,        },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,160,        VectorialPointValuePair optimum =,0,0,0,0,0,0,0,0,0,0,33,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,42,public class CurveFitter {,2,0,0,0,1,1,0,0,0,3,26,1,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,177,        public TheoreticalValuesFunction(final ParametricUnivariateRealFunction f) {,0,0,0,1,3,0,0,0,0,4,76,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,178,            this.f = f;,4,0,0,0,0,0,0,0,0,5,11,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,179,        },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,183,            return new MultivariateMatrixFunction() {,0,0,0,1,3,1,0,0,0,5,41,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,200,            final double[] values = new double[observations.size()];,2,0,0,3,6,1,4,0,0,7,56,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,201,            int i = 0;,4,1,0,0,0,0,0,0,0,5,10,1,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,202,            for (WeightedObservedPoint observed : observations) {,4,0,0,1,3,0,0,2,0,6,53,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,203,"                values[i++] = f.value(observed.getX(), point);",2,0,1,3,6,0,10,0,0,16,46,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,204,            },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,206,            return values;,6,3,0,0,0,1,0,0,0,10,14,1,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,169,    private class TheoreticalValuesFunction,2,0,0,0,0,1,0,0,0,3,39,2,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,302,            return new Comparator<WeightedObservedPoint>() {,0,0,0,1,3,1,0,4,0,4,48,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,304,                    if (p1 == null && p2 == null) {,4,3,0,1,3,0,0,0,0,7,31,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,307,                    if (p1 == null) {,2,1,0,1,3,0,0,0,0,3,17,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,310,                    if (p2 == null) {,2,1,0,1,3,0,0,0,0,3,17,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,313,                    if (p1.getX() < p2.getX()) {,0,0,0,3,7,0,0,0,0,10,28,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,316,                    if (p1.getX() > p2.getX()) {,0,1,0,3,7,0,8,0,0,9,28,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,317,                        return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,183,            return new MultivariateMatrixFunction() {,0,0,0,1,3,1,0,2,0,2,41,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,185,                    final double[][] jacobian = new double[observations.size()][];,0,0,0,5,10,0,0,0,0,15,62,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,187,                    int i = 0;,4,1,0,0,0,0,0,0,0,5,10,1,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,188,                    for (WeightedObservedPoint observed : observations) {,4,0,0,1,3,0,0,2,0,6,53,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,189,"                        jacobian[i++] = f.gradient(observed.getX(), point);",2,0,0,3,6,0,0,0,0,2,51,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,190,                    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,192,                    return jacobian;,2,0,0,0,0,1,0,0,0,2,16,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,88,        return checker;,0,0,0,0,0,1,0,0,0,1,15,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,103,            evaluations.incrementCount();,0,0,0,1,2,0,4,0,0,4,29,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,106,        },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,107,        return function.value(point);,0,0,0,1,2,1,6,0,0,6,29,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,114,        if (f == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,117,        if (t == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,120,        if (w == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,123,        if (startPoint == null) {,2,1,0,1,3,0,0,0,0,3,25,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,126,        if (t.length != w.length) {,8,1,0,1,3,0,0,0,0,9,27,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,131,        evaluations.setMaximalCount(maxEval);,0,0,0,1,2,0,6,0,0,6,37,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,132,        evaluations.resetCount();,0,0,0,1,2,0,4,0,0,4,25,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,135,        function = f;,4,0,0,0,0,0,0,0,0,5,13,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,136,        target = t.clone();,4,0,0,1,2,0,8,0,0,14,19,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,137,        weight = w.clone();,2,0,0,1,2,0,4,0,0,7,19,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,138,        start = startPoint.clone();,2,0,0,1,2,0,4,0,0,7,27,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,141,        return doOptimize();,0,0,0,1,2,1,2,0,0,2,20,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,165,        return target;,8,7,0,0,0,1,10,0,0,25,14,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,171,        return weight;,4,1,0,0,0,1,0,0,0,5,14,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,220,"        solvedCols  = FastMath.min(rows, cols);",2,0,0,1,2,0,6,0,0,9,39,0,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,221,        diagR       = new double[cols];,0,0,0,1,2,0,0,0,0,3,31,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,222,        jacNorm     = new double[cols];,2,0,1,1,2,0,0,0,0,5,31,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,223,        beta        = new double[cols];,2,0,1,1,2,0,0,0,0,5,31,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,224,        permutation = new int[cols];,2,0,1,1,2,0,0,0,0,5,28,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,225,        lmDir       = new double[cols];,2,0,1,1,2,0,0,0,0,5,31,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,228,        double   delta   = 0;,2,0,0,0,0,0,0,0,0,2,21,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,229,        double   xNorm   = 0;,0,0,0,0,0,0,0,0,0,0,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,230,        double[] diag    = new double[cols];,2,0,1,2,4,0,0,0,0,4,36,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,231,        double[] oldX    = new double[cols];,0,0,0,2,4,0,0,0,0,6,36,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,232,        double[] oldRes  = new double[rows];,0,0,0,2,4,0,0,0,0,6,36,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,233,        double[] oldObj  = new double[rows];,2,0,1,2,4,0,0,0,0,4,36,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,234,        double[] qtf     = new double[rows];,6,0,1,2,4,0,0,0,0,9,36,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,235,        double[] work1   = new double[cols];,0,0,0,2,4,0,0,0,0,6,36,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,236,        double[] work2   = new double[cols];,2,0,1,2,4,0,0,0,0,4,36,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,237,        double[] work3   = new double[cols];,0,0,0,2,4,0,0,0,0,6,36,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,240,        updateResidualsAndCost();,0,0,0,1,2,0,2,0,0,2,25,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,243,        lmPar = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,244,        boolean firstIteration = true;,2,0,0,0,0,0,0,0,0,3,30,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,245,"        VectorialPointValuePair current = new VectorialPointValuePair(point, objective);",6,0,0,1,2,0,0,4,0,10,80,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,246,        int iter = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,247,        final ConvergenceChecker<VectorialPointValuePair> checker = getConvergenceChecker();,2,0,0,1,2,1,8,4,0,15,84,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,249,            ++iter;,2,0,0,0,0,0,0,0,0,3,7,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,251,            for (int i=0;i<rows;i++) {,10,2,0,1,3,0,0,0,0,13,26,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,252,                qtf[i]=weightedResiduals[i];,0,0,1,2,4,0,0,0,0,9,28,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,256,            VectorialPointValuePair previous = current;,0,0,0,0,0,0,0,0,0,0,43,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,257,            updateJacobian();,4,1,0,1,2,3,0,0,0,8,17,1,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,258,            qrDecomposition();,0,0,0,1,2,0,2,0,0,2,18,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,261,            qTy(qtf);,0,0,0,1,2,0,0,0,0,3,9,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,264,            for (int k = 0; k < solvedCols; ++k) {,8,1,0,1,3,0,0,0,0,10,38,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,265,                int pk = permutation[k];,0,0,0,1,2,0,0,0,0,3,24,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,266,                weightedResidualJacobian[k][pk] = diagR[pk];,2,0,0,3,6,0,0,2,0,4,44,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,269,            if (firstIteration) {,0,0,0,1,3,0,0,0,0,4,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,272,                xNorm = 0;,2,0,0,0,0,0,0,0,0,3,10,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,273,                for (int k = 0; k < cols; ++k) {,8,1,0,1,3,0,0,0,0,10,32,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,274,                    double dk = jacNorm[k];,2,0,1,1,2,0,0,0,0,6,23,11,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,275,                    if (dk == 0) {,2,1,0,1,3,0,0,0,0,3,14,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,278,                    double xk = dk * point[k];,4,1,1,1,2,0,0,0,0,9,26,11,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,279,                    xNorm  += xk * xk;,16,2,0,0,0,0,0,0,0,19,18,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,280,                    diag[k] = dk;,2,0,1,1,2,0,0,0,0,7,13,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,282,                xNorm = FastMath.sqrt(xNorm);,4,2,1,1,2,0,6,0,0,22,29,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,285,                delta = (xNorm == 0) ? initialStepBoundFactor : (initialStepBoundFactor * xNorm);,20,3,1,2,4,0,0,0,0,27,81,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,289,            double maxCosine = 0;,2,0,0,0,0,0,0,0,0,2,21,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,290,            if (cost != 0) {,10,3,0,1,3,0,0,0,0,14,16,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,291,                for (int j = 0; j < solvedCols; ++j) {,8,1,0,1,3,0,0,0,0,10,38,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,292,                    int    pj = permutation[j];,2,0,1,1,2,0,0,0,0,6,27,11,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,293,                    double s  = jacNorm[pj];,2,0,1,1,2,0,0,0,0,6,24,11,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,294,                    if (s != 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,295,                        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,13,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,296,                        for (int i = 0; i <= j; ++i) {,8,1,0,1,3,0,0,0,0,10,30,12,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,297,                            sum += weightedResidualJacobian[i][pj] * qtf[i];,2,1,1,3,6,0,0,0,0,14,48,14,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,299,"                        maxCosine = FastMath.max(maxCosine, FastMath.abs(sum) / (s * cost));",20,7,0,3,6,1,12,0,0,41,68,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,303,            if (maxCosine <= orthoTolerance) {,0,0,0,1,3,0,0,0,0,4,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,311,            for (int j = 0; j < cols; ++j) {,8,1,0,1,3,0,0,0,0,10,32,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,312,"                diag[j] = FastMath.max(diag[j], jacNorm[j]);",4,0,1,4,8,3,4,4,0,28,44,1,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,316,            for (double ratio = 0; ratio < 1.0e-4;) {,0,0,0,1,3,0,0,0,0,4,41,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,319,                for (int j = 0; j < solvedCols; ++j) {,0,0,0,1,3,0,0,0,0,4,38,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,320,                    int pj = permutation[j];,2,0,1,1,2,0,0,0,0,6,24,11,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,321,                    oldX[pj] = point[pj];,0,0,0,2,4,0,0,0,0,6,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,323,                double previousCost = cost;,8,0,0,0,0,0,0,0,0,9,27,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,324,                double[] tmpVec = weightedResiduals;,4,0,0,1,2,0,0,0,0,4,36,9,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,325,                weightedResiduals = oldRes;,4,0,0,0,0,0,0,0,0,5,27,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,326,                oldRes    = tmpVec;,4,0,0,0,0,0,0,0,0,5,19,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,327,                tmpVec    = objective;,28,13,0,0,0,0,0,0,0,42,22,9,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,328,                objective = oldObj;,4,0,1,0,0,0,0,0,0,12,19,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,329,                oldObj    = tmpVec;,6,0,0,0,0,1,0,2,0,10,19,0,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,332,"                determineLMParameter(qtf, delta, diag, work1, work2, work3);",0,0,0,1,2,0,0,0,0,3,60,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,335,                double lmNorm = 0;,6,1,0,0,0,0,0,0,0,8,18,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,336,                for (int j = 0; j < solvedCols; ++j) {,8,1,0,1,3,0,0,0,0,10,38,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,337,                    int pj = permutation[j];,2,0,1,1,2,0,0,0,0,6,24,11,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,338,                    lmDir[pj] = -lmDir[pj];,0,0,1,2,4,0,0,0,0,10,23,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,339,                    point[pj] = oldX[pj] + lmDir[pj];,0,1,1,3,6,0,0,0,0,14,33,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,340,                    double s = diag[pj] * lmDir[pj];,0,0,0,2,4,0,0,0,0,6,32,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,341,                    lmNorm  += s * s;,6,1,0,0,0,0,0,0,0,8,17,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,343,                lmNorm = FastMath.sqrt(lmNorm);,0,0,0,1,2,0,0,0,0,3,31,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,345,                if (firstIteration) {,0,0,0,1,3,0,0,0,0,4,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,346,"                    delta = FastMath.min(delta, lmNorm);",2,0,0,1,2,0,8,0,0,11,36,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,350,                updateResidualsAndCost();,6,1,0,1,2,0,2,0,0,9,25,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,353,                double actRed = -1.0;,6,4,1,0,0,0,0,0,0,28,21,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,354,                if (0.1 * cost < previousCost) {,4,2,0,1,3,0,0,0,0,6,32,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,355,                    double r = cost / previousCost;,6,1,0,0,0,0,4,0,0,11,31,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,356,                    actRed = 1.0 - r * r;,6,2,0,0,0,0,0,0,0,9,21,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,361,                for (int j = 0; j < solvedCols; ++j) {,8,1,0,1,3,0,0,0,0,10,38,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,362,                    int pj = permutation[j];,6,2,0,1,2,0,0,0,0,9,24,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,363,                    double dirJ = lmDir[pj];,2,0,1,1,2,0,0,0,0,6,24,11,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,364,                    work1[j] = 0;,0,0,1,1,2,0,0,0,0,5,13,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,365,                    for (int i = 0; i <= j; ++i) {,10,2,0,1,3,0,0,0,0,13,30,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,366,                        work1[i] += weightedResidualJacobian[i][pj] * dirJ;,8,2,0,3,6,1,0,0,0,11,51,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,369,                double coeff1 = 0;,2,0,0,0,0,0,0,0,0,2,18,9,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,370,                for (int j = 0; j < solvedCols; ++j) {,0,0,0,1,3,0,0,0,0,4,38,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,371,                    coeff1 += work1[j] * work1[j];,2,1,1,2,4,0,0,0,0,12,30,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,373,                double pc2 = previousCost * previousCost;,10,1,0,0,0,0,0,2,0,13,41,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,374,                coeff1 = coeff1 / pc2;,8,1,0,0,0,0,0,2,0,12,22,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,375,                double coeff2 = lmPar * lmNorm * lmNorm / pc2;,10,2,0,0,0,0,0,0,0,12,46,9,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,376,                double preRed = coeff1 + 2 * coeff2;,2,0,1,0,0,0,0,0,0,6,36,13,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,377,                double dirDer = -(coeff1 + coeff2);,6,1,0,1,2,0,0,0,0,8,35,9,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,380,                ratio = (preRed == 0) ? 0 : (actRed / preRed);,12,2,0,2,4,0,0,0,0,17,46,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,383,                if (ratio <= 0.25) {,0,0,0,1,3,0,0,0,0,4,20,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,392,                    delta = 2 * lmNorm;,0,0,0,0,0,0,0,0,0,0,19,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,393,                    lmPar *= 0.5;,4,0,0,0,0,0,0,0,0,5,13,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,397,                if (ratio >= 1.0e-4) {,12,2,0,1,3,0,0,0,0,15,22,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,399,                    firstIteration = false;,2,0,0,0,0,0,0,0,0,4,23,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,400,                    xNorm = 0;,2,0,0,0,0,0,0,0,0,3,10,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,401,                    for (int k = 0; k < cols; ++k) {,0,0,0,1,3,0,0,0,0,4,32,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,402,                        double xK = diag[k] * point[k];,2,1,1,2,4,0,0,0,0,11,31,13,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,403,                        xNorm += xK * xK;,0,0,0,0,0,0,0,0,0,0,17,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,405,                    xNorm = FastMath.sqrt(xNorm);,2,0,0,1,2,0,6,0,0,9,29,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,406,"                    current = new VectorialPointValuePair(point, objective);",6,0,0,1,2,0,0,2,0,9,56,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,409,                    if (checker != null) {,2,1,0,1,3,0,0,0,0,3,22,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,411,"                        if (checker.converged(iter, previous, current)) {",6,0,1,2,5,1,10,0,0,19,49,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,431,                if ((FastMath.abs(actRed) <= costRelativeTolerance &&,4,3,0,1,4,1,12,0,0,20,53,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,440,                if ((FastMath.abs(actRed) <= 2.2204e-16) && (preRed <= 2.2204e-16) && (ratio <= 2.0)) {,4,4,0,5,11,0,6,0,0,14,87,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,443,                } else if (delta <= 2.2204e-16 * xNorm) {,0,0,0,1,4,0,0,0,0,5,41,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,446,                } else if (maxCosine <= 2.2204e-16)  {,6,1,0,1,4,0,0,0,0,8,38,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,450,            },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,451,        },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,481,        for (int j = 0; j < rank; ++j) {,0,0,0,1,3,0,0,0,0,4,32,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,482,            lmDir[permutation[j]] = qy[j];,2,0,1,3,6,0,12,2,0,27,30,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,484,        for (int j = rank; j < cols; ++j) {,0,0,0,1,3,0,0,0,0,4,35,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,487,        for (int k = rank - 1; k >= 0; --k) {,8,2,0,1,3,0,0,0,0,11,37,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,488,            int pk = permutation[k];,2,0,1,1,2,0,0,0,0,6,24,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,489,            double ypk = lmDir[pk] / diagR[pk];,2,1,1,2,4,0,0,0,0,11,35,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,490,            for (int i = 0; i < k; ++i) {,8,1,0,1,3,0,0,0,0,10,29,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,491,                lmDir[permutation[i]] -= ypk * weightedResidualJacobian[i][pk];,2,1,1,4,8,0,0,0,0,16,63,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,493,            lmDir[pk] = ypk;,2,0,1,1,2,0,0,0,0,7,16,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,498,        double dxNorm = 0;,12,2,0,0,0,0,0,0,0,16,18,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,499,        for (int j = 0; j < solvedCols; ++j) {,0,0,0,1,3,0,0,0,0,4,38,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,500,            int pj = permutation[j];,2,0,1,1,2,0,0,0,0,6,24,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,501,            double s = diag[pj] * lmDir[pj];,0,0,0,2,4,0,0,0,0,6,32,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,502,            work1[pj] = s;,2,0,1,1,2,0,0,0,0,7,14,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,503,            dxNorm += s * s;,0,0,0,0,0,0,0,0,0,0,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,505,        dxNorm = FastMath.sqrt(dxNorm);,4,0,0,1,2,0,10,0,0,16,31,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,506,        double fp = dxNorm - delta;,0,0,0,0,0,0,0,0,0,0,27,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,507,        if (fp <= 0.1 * delta) {,4,2,0,1,3,0,0,0,0,6,24,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,508,            lmPar = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,509,            return;,2,0,0,0,0,1,0,0,0,2,7,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,771,        for (int k = 0; k < cols; ++k) {,10,1,0,1,3,1,0,4,0,17,32,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,772,            permutation[k] = k;,2,0,1,1,2,0,0,0,0,8,19,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,773,            double norm2 = 0;,4,0,0,0,0,0,0,0,0,6,17,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,774,            for (int i = 0; i < weightedResidualJacobian.length; ++i) {,10,1,0,1,3,0,0,0,0,12,59,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,775,                double akk = weightedResidualJacobian[i][k];,2,0,1,2,4,0,0,0,0,8,44,9,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,776,                norm2 += akk * akk;,6,1,0,0,0,0,0,0,0,8,19,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,778,            jacNorm[k] = FastMath.sqrt(norm2);,12,1,1,2,4,0,6,0,0,25,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,782,        for (int k = 0; k < cols; ++k) {,8,2,1,1,3,0,8,0,0,28,32,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,785,            int nextColumn = -1;,6,0,0,0,0,0,0,0,0,6,20,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,786,            double ak2 = Double.NEGATIVE_INFINITY;,6,0,0,0,0,0,0,0,0,6,38,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,787,            for (int i = k; i < cols; ++i) {,14,1,1,1,3,0,0,0,0,22,32,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,788,                double norm2 = 0;,2,0,0,0,0,0,0,0,0,2,17,9,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,789,                for (int j = k; j < weightedResidualJacobian.length; ++j) {,0,0,0,1,3,0,0,0,0,4,59,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,790,                    double aki = weightedResidualJacobian[j][permutation[i]];,0,0,0,3,6,0,0,0,0,9,57,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,791,                    norm2 += aki * aki;,0,0,0,0,0,0,0,0,0,0,19,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,793,                if (Double.isInfinite(norm2) || Double.isNaN(norm2)) {,0,1,0,3,7,0,12,0,0,13,54,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,797,                if (norm2 > ak2) {,6,1,0,1,3,0,0,0,0,7,18,1,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,798,                    nextColumn = i;,8,1,1,0,0,0,0,0,0,15,15,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,799,                    ak2        = norm2;,0,0,0,0,0,0,0,0,0,0,19,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,802,            if (ak2 <= qrRankingThreshold) {,8,2,0,1,3,0,0,0,0,10,32,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,806,            int pk                  = permutation[nextColumn];,6,1,0,1,2,0,0,0,0,7,50,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,807,            permutation[nextColumn] = permutation[k];,0,0,0,2,4,0,0,0,0,6,41,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,808,            permutation[k]          = pk;,2,0,1,1,2,0,0,0,0,7,29,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,811,            double akk   = weightedResidualJacobian[k][pk];,0,0,0,2,4,0,0,0,0,6,47,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,812,            double alpha = (akk > 0) ? -FastMath.sqrt(ak2) : FastMath.sqrt(ak2);,10,2,0,3,6,0,14,0,0,30,68,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,813,            double betak = 1.0 / (ak2 - akk * alpha);,0,0,0,1,2,0,0,0,0,3,41,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,814,            beta[pk]     = betak;,4,1,0,1,2,0,0,0,0,5,21,9,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,817,            diagR[pk]        = alpha;,2,0,1,1,2,0,0,0,0,7,25,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,818,            weightedResidualJacobian[k][pk] -= alpha;,2,0,1,2,4,0,0,0,0,9,41,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,821,            for (int dk = cols - 1 - k; dk > 0; --dk) {,10,2,0,1,3,0,0,0,0,13,43,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,822,                double gamma = 0;,2,0,0,0,0,0,0,0,0,2,17,9,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,823,                for (int j = k; j < weightedResidualJacobian.length; ++j) {,12,1,0,1,3,0,0,0,0,14,59,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,824,                    gamma += weightedResidualJacobian[j][pk] * weightedResidualJacobian[j][permutation[k + dk]];,6,2,1,5,10,0,0,0,0,21,92,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,826,                gamma *= betak;,6,0,0,0,0,0,0,0,0,7,15,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,827,                for (int j = k; j < weightedResidualJacobian.length; ++j) {,0,0,0,1,3,0,0,0,0,4,59,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,828,                    weightedResidualJacobian[j][permutation[k + dk]] -= gamma * weightedResidualJacobian[j][pk];,0,0,0,5,10,0,0,0,0,15,92,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,832,        rank = solvedCols;,4,0,0,0,0,0,0,0,0,5,18,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,833,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,841,        for (int k = 0; k < cols; ++k) {,8,1,0,1,3,0,0,0,0,10,32,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,842,            int pk = permutation[k];,10,2,1,1,2,1,0,0,0,17,24,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,843,            double gamma = 0;,2,0,0,0,0,0,0,0,0,2,17,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,844,            for (int i = k; i < rows; ++i) {,14,1,0,1,3,0,0,0,0,17,32,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,845,                gamma += weightedResidualJacobian[i][pk] * y[i];,2,1,1,3,6,0,0,0,0,14,48,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,847,            gamma *= beta[pk];,4,1,1,1,2,0,0,0,0,11,18,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,848,            for (int i = k; i < rows; ++i) {,10,1,0,1,3,0,0,0,0,12,32,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,849,                y[i] -= gamma * weightedResidualJacobian[i][pk];,6,1,1,3,6,0,0,0,0,19,48,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,852,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,102,        ++jacobianEvaluations;,2,0,1,0,0,0,12,0,0,17,22,11,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,103,        weightedResidualJacobian = jF.value(point);,2,0,0,1,2,0,6,0,0,9,43,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,104,        if (weightedResidualJacobian.length != rows) {,12,3,0,1,3,0,0,0,0,16,46,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,108,        final double[] residualsWeights = getWeightRef();,2,0,0,2,4,1,2,0,0,5,49,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,110,        for (int i = 0; i < rows; i++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,111,            final double[] ji = weightedResidualJacobian[i];,0,0,0,2,4,0,0,0,0,6,48,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,112,            double wi = FastMath.sqrt(residualsWeights[i]);,2,0,1,2,4,0,4,0,0,10,47,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,113,            for (int j = 0; j < cols; ++j) {,0,0,0,1,3,0,0,0,0,4,32,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,115,                weightedResidualJacobian[i][j] = -ji[j]*wi;,2,1,1,3,6,0,0,0,0,15,43,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,118,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,128,        objective = computeObjectiveValue(point);,2,0,0,1,2,0,4,0,0,7,41,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,129,        if (objective.length != rows) {,6,2,1,1,3,0,0,0,0,21,31,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,133,        final double[] targetValues = getTargetRef();,2,0,0,2,4,1,2,0,0,5,45,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,134,        final double[] residualsWeights = getWeightRef();,2,0,0,2,4,1,2,0,0,5,49,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,136,        cost = 0;,2,0,0,0,0,0,0,0,0,3,9,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,137,        int index = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,138,        for (int i = 0; i < rows; i++) {,0,0,0,1,3,0,0,0,0,4,32,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,139,            final double residual = targetValues[i] - objective[i];,2,1,1,2,4,1,0,0,0,12,55,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,140,            weightedResiduals[i]= residual*FastMath.sqrt(residualsWeights[i]);,2,1,1,3,6,0,4,0,0,16,66,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,141,            cost += residualsWeights[i] * residual * residual;,14,2,1,1,2,0,0,0,0,22,50,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,142,            index += cols;,4,0,0,0,0,0,0,0,0,5,14,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,144,        cost = FastMath.sqrt(cost);,4,0,0,1,2,0,6,0,0,11,27,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,145,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,237,        jacobianEvaluations = 0;,2,0,0,0,0,0,0,0,0,3,24,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,240,        jF = f.jacobian();,16,3,0,1,2,2,14,0,0,38,18,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,241,        this.residuals = new double[target.length];,6,0,0,1,2,0,0,0,0,7,43,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,244,        point = startPoint.clone();,2,0,0,1,2,0,4,0,0,7,27,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,245,        rows = target.length;,6,0,0,0,0,0,0,0,0,7,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,246,        cols = point.length;,10,1,0,0,0,0,14,0,0,26,20,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,248,        weightedResidualJacobian = new double[rows][cols];,0,0,0,2,4,0,0,0,0,6,50,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,249,        this.weightedResiduals = new double[rows];,2,0,1,1,2,0,0,0,0,5,42,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,251,        cost = Double.POSITIVE_INFINITY;,6,0,0,0,0,0,0,0,0,7,32,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,253,"        return super.optimize(maxEval, f, target, weights, startPoint);",12,0,0,1,2,1,0,0,0,12,63,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,43,public abstract class AbstractLeastSquaresOptimizer,2,0,0,0,0,2,0,0,0,4,51,1,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/AbstractConvergenceChecker,58,73,        return relativeThreshold;,6,1,0,0,0,1,0,0,0,8,25,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/AbstractConvergenceChecker,58,80,        return absoluteThreshold;,2,0,0,0,0,1,0,0,0,2,25,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,76,        final double[] p = previous.getValueRef();,8,1,0,2,4,1,4,0,0,15,42,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,77,        final double[] c = current.getValueRef();,2,0,0,2,4,1,4,0,0,7,41,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,78,        for (int i = 0; i < p.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,79,            final double pi         = p[i];,0,0,0,1,2,0,0,0,0,3,31,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,80,            final double ci         = c[i];,2,0,1,1,2,1,0,0,0,7,31,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,81,            final double difference = FastMath.abs(pi - ci);,6,1,0,1,2,1,4,0,0,12,48,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,82,"            final double size       = FastMath.max(FastMath.abs(pi), FastMath.abs(ci));",2,0,0,3,6,1,16,0,0,19,75,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,83,            if (difference > size * getRelativeThreshold() &&,10,4,0,1,3,0,2,0,0,16,49,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,85,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,34,public class SimpleVectorialValueChecker,0,0,0,0,0,0,0,0,0,0,40,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,58,44,        maximalCount = max;,4,0,0,0,0,0,0,0,0,5,19,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,58,45,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,58,84,        if (++count > maximalCount) {,0,0,0,1,3,0,0,0,0,4,29,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,58,87,    },4,0,0,0,1,0,0,0,0,6,1,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,58,93,        count = 0;,6,0,0,0,0,1,0,2,0,10,10,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,58,94,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,55,    private static final double EXP_INT_TABLE_A[] = new double[1500];,0,0,0,2,4,0,0,0,0,6,65,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,60,    private static final double EXP_INT_TABLE_B[] = new double[1500];,2,0,0,2,4,3,0,0,0,5,65,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,65,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,2,0,0,2,4,3,0,0,0,5,66,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,70,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,2,0,0,2,4,3,0,0,0,5,66,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,73,    private static final double FACT[] = new double[20];,12,1,0,2,4,3,0,0,0,18,52,1,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,76,    private static final double LN_MANT[][] = new double[1024][];,8,1,1,4,8,3,0,0,0,21,61,1,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,85,    private static final double LN_SPLIT_COEF[][] = {,0,0,0,2,5,0,8,0,0,8,49,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,105,    private static final double LN_QUICK_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,118,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,0,10,0,0,13,51,9,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,128,    private static final double SINE_TABLE_A[] = new double[14];,2,0,0,2,4,3,0,0,0,5,60,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,131,    private static final double SINE_TABLE_B[] = new double[14];,0,0,0,2,4,0,0,0,0,6,60,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,134,    private static final double COSINE_TABLE_A[] = new double[14];,6,1,0,2,4,3,0,0,0,10,62,1,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,137,    private static final double COSINE_TABLE_B[] = new double[14];,2,1,0,2,4,1,4,0,0,8,62,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,140,    private static final double TANGENT_TABLE_A[] = new double[14];,2,0,0,2,4,3,0,0,0,5,63,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,143,    private static final double TANGENT_TABLE_B[] = new double[14];,8,1,0,2,4,4,6,0,0,19,63,1,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,146,    private static final long RECIP_2PI[] = new long[] {,0,0,0,2,5,0,0,0,0,7,52,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,167,    private static final long PI_O_4_BITS[] = new long[] {,2,0,0,2,5,3,0,0,0,5,54,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,175,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",2,0,0,2,4,3,0,0,0,5,126,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,178,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0,0,0,1,3,0,0,0,0,4,61,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,208,        FACT[0] = 1.0;,2,0,1,1,2,0,0,0,0,5,14,1,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,209,        for (i = 1; i < FACT.length; i++) {,16,1,0,1,3,0,0,0,0,20,35,1,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,210,            FACT[i] = FACT[i-1] * i;,0,0,0,2,4,0,0,0,0,6,24,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,213,        double tmp[] = new double[2];,0,0,0,2,4,0,0,0,0,6,29,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,214,        double recip[] = new double[2];,0,0,0,2,4,0,0,0,0,6,31,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,217,        for (i = 0; i < 750; i++) {,0,0,0,1,3,0,0,0,0,4,27,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,218,"            expint(i, tmp);",0,0,0,1,2,0,14,0,0,14,15,1,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,219,            EXP_INT_TABLE_A[i+750] = tmp[0];,2,1,1,2,4,0,0,0,0,8,32,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,220,            EXP_INT_TABLE_B[i+750] = tmp[1];,6,2,1,2,4,0,14,0,0,27,32,1,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,222,            if (i != 0) {,6,1,0,1,3,0,0,0,0,7,13,1,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,224,"                splitReciprocal(tmp, recip);",2,1,0,1,2,0,6,0,0,9,28,1,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,225,                EXP_INT_TABLE_A[750-i] = recip[0];,0,0,0,2,4,0,0,0,0,6,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,226,                EXP_INT_TABLE_B[750-i] = recip[1];,0,0,0,2,4,0,0,0,0,6,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,231,        for (i = 0; i < EXP_FRAC_TABLE_A.length; i++) {,0,0,0,1,3,0,0,0,0,4,47,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,232,"            slowexp(i/1024.0, tmp);",0,0,0,1,2,0,0,0,0,3,23,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,233,            EXP_FRAC_TABLE_A[i] = tmp[0];,2,0,0,2,4,0,0,2,0,5,29,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,234,            EXP_FRAC_TABLE_B[i] = tmp[1];,0,0,0,2,4,0,0,0,0,6,29,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,238,        for (i = 0; i < LN_MANT.length; i++) {,0,0,0,1,3,0,0,0,0,4,38,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,239,            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,0,0,0,4,8,0,0,0,0,12,79,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,240,            LN_MANT[i] = slowLog(d);,0,0,0,2,4,0,0,0,0,6,24,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,244,        buildSinCosTables();,0,0,0,1,2,0,0,0,0,3,20,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,245,    },6,1,1,0,1,0,8,0,0,20,1,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,277,        return Math.sqrt(a);,0,0,0,1,2,1,0,0,0,4,20,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,697,"        return exp(x, 0.0, null);",0,0,0,1,2,1,0,0,0,4,25,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,716,        if (x < 0.0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,717,            intVal = (int) -x;,4,0,0,1,2,0,0,4,0,8,18,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,719,            if (intVal > 746) {,14,3,1,1,3,0,4,2,0,25,19,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,727,            if (intVal > 709) {,0,0,0,1,3,0,0,0,0,4,19,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,737,            if (intVal == 709) {,2,1,0,1,3,0,0,0,0,3,20,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,747,            intVal++;,0,0,0,0,0,0,0,0,0,0,9,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,749,            intPartA = EXP_INT_TABLE_A[750-intVal];,0,0,0,1,2,0,0,0,0,3,39,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,750,            intPartB = EXP_INT_TABLE_B[750-intVal];,2,1,0,1,2,0,0,0,0,3,39,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,752,            intVal = -intVal;,0,0,0,0,0,0,0,0,0,0,17,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,754,            intVal = (int) x;,0,0,0,1,2,0,0,0,0,3,17,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,756,            if (intVal > 709) {,2,0,0,1,3,0,6,0,0,9,19,11,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,764,            intPartA = EXP_INT_TABLE_A[750+intVal];,4,1,1,1,2,0,0,0,0,8,39,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,765,            intPartB = EXP_INT_TABLE_B[750+intVal];,6,2,1,1,2,0,4,0,0,17,39,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,772,        final int intFrac = (int) ((x - intVal) * 1024.0);,2,0,0,3,6,0,0,2,0,5,50,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,773,        final double fracPartA = EXP_FRAC_TABLE_A[intFrac];,0,0,0,1,2,0,0,0,0,3,51,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,774,        final double fracPartB = EXP_FRAC_TABLE_B[intFrac];,2,0,1,1,2,1,0,0,0,7,51,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,780,        final double epsilon = x - (intVal + intFrac / 1024.0);,8,3,0,1,2,1,0,0,0,12,55,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,789,        double z = 0.04168701738764507;,2,0,0,0,0,0,0,0,0,2,31,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,790,        z = z * epsilon + 0.1666666505023083;,10,1,0,0,0,0,0,0,0,12,37,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,791,        z = z * epsilon + 0.5000000000042687;,0,0,0,0,0,0,0,0,0,0,37,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,792,        z = z * epsilon + 1.0;,6,2,1,0,0,0,2,0,0,20,22,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,793,        z = z * epsilon + -3.940510424527919E-20;,4,1,0,0,0,0,12,0,0,17,41,9,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,800,        double tempA = intPartA * fracPartA;,2,1,0,0,0,0,0,0,0,3,36,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,801,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,0,0,0,0,0,0,0,0,0,0,82,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,807,        final double tempC = tempB + tempA;,6,1,0,0,0,1,0,0,0,8,35,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,809,        if (extra != 0.0) {,2,0,0,1,3,0,0,0,0,3,19,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,812,            result = tempC*z + tempB + tempA;,10,3,0,0,0,0,0,0,0,14,33,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,815,        if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,821,        return result;,6,1,1,0,0,1,4,0,0,15,14,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,987,        final double xs[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,988,        final double ys[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,989,        final double facts[] = new double[2];,10,2,0,2,4,1,0,0,0,14,37,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,990,        final double as[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,991,"        split(x, xs);",0,0,0,1,2,0,0,0,0,3,13,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,992,        ys[0] = ys[1] = 0.0;,0,0,0,2,4,0,0,0,0,6,20,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,994,        for (int i = 19; i >= 0; i--) {,6,1,0,1,3,0,0,0,0,8,31,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,995,"            splitMult(xs, ys, as);",0,0,0,1,2,0,8,0,0,8,22,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,996,            ys[0] = as[0];,0,0,0,2,4,0,0,0,0,6,14,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,997,            ys[1] = as[1];,0,0,1,2,4,0,0,0,0,5,14,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,999,"            split(FACT[i], as);",0,0,0,2,4,0,0,0,0,6,19,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1000,"            splitReciprocal(as, facts);",0,0,0,1,2,0,6,0,0,6,27,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1002,"            splitAdd(ys, facts, as);",0,0,0,1,2,0,0,0,0,3,24,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1003,            ys[0] = as[0];,0,0,1,2,4,0,0,0,0,5,14,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1004,            ys[1] = as[1];,0,0,0,2,4,0,0,0,0,6,14,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1007,        if (result != null) {,12,3,1,1,3,0,0,0,0,19,21,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1008,            result[0] = ys[0];,0,0,1,2,4,0,0,0,0,5,18,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1009,            result[1] = ys[1];,2,1,1,2,4,0,0,0,0,8,18,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1012,        return ys[0] + ys[1];,14,5,0,2,4,1,0,0,0,19,21,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1021,        if (d < 8e298 && d > -8e298) {,0,0,0,1,3,0,0,0,0,4,30,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1022,            final double a = d * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1023,            split[0] = (d + a) - a;,6,2,1,2,4,0,0,0,0,11,23,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1024,            split[1] = d - split[0];,0,0,0,2,4,0,6,0,0,6,24,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1025,        } else {,4,0,0,0,2,0,2,0,0,6,8,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1030,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1037,        final double c = a[0] + a[1];,18,6,1,2,4,1,6,0,0,37,29,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1038,        final double d = -(c - a[0] - a[1]);,0,0,0,3,6,0,0,0,0,9,36,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1040,        if (c < 8e298 && c > -8e298) {,0,0,0,1,3,0,0,0,0,4,30,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1041,            double z = c * HEX_40000000;,12,3,0,0,0,0,0,0,0,17,28,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1042,            a[0] = (c + z) - z;,0,0,0,2,4,0,0,0,0,6,19,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1043,            a[1] = c - a[0] + d;,4,2,1,2,4,0,4,0,0,15,20,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1044,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1045,            double z = c * 9.31322574615478515625E-10;,2,1,0,0,0,0,0,0,0,3,42,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1046,            a[0] = (c + z - c) * HEX_40000000;,8,3,1,2,4,0,0,0,0,14,34,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1047,            a[1] = c - a[0] + d;,6,2,1,2,4,1,0,0,0,18,20,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1049,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1057,        ans[0] = a[0] * b[0];,0,1,1,3,6,0,0,0,0,8,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1058,        ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];,2,5,1,7,14,0,0,0,0,22,49,1,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1061,        resplit(ans);,2,0,0,1,2,0,4,2,0,8,13,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1062,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1070,        ans[0] = a[0] + b[0];,0,0,0,3,6,0,0,0,0,9,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1071,        ans[1] = a[1] + b[1];,0,0,0,3,6,0,0,0,0,9,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1073,        resplit(ans);,0,0,0,1,2,0,4,0,0,4,13,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1074,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1095,        final double b = 1.0/4194304.0;,6,1,0,0,0,1,8,0,0,17,31,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1096,        final double a = 1.0 - b;,6,1,0,0,0,0,0,0,0,7,25,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1098,        if (in[0] == 0.0) {,10,2,1,2,5,0,0,0,0,15,19,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1103,        result[0] = a / in[0];,2,1,1,2,4,0,0,0,0,8,22,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1104,        result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);,4,7,1,9,18,0,0,0,0,26,60,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1106,        if (result[1] != result[1]) { // can happen if result[1] is NAN,8,2,1,4,9,0,10,0,0,28,63,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1107,            result[1] = 0.0;,0,0,1,1,2,0,0,0,0,3,16,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1111,        resplit(result);,0,0,0,1,2,0,0,0,0,3,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1113,        for (int i = 0; i < 2; i++) {,8,1,0,1,3,0,0,0,0,10,29,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1115,            double err = 1.0 - result[0] * in[0] - result[0] * in[1] -,2,6,1,4,8,0,0,0,0,16,58,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1118,            err = err * (result[0] + result[1]);,4,0,0,3,6,0,0,0,0,4,36,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1120,            result[1] += err;,2,0,1,1,2,0,8,0,0,13,17,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1122,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1130,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1131,        final double ys[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1132,        final double zs[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1135,"        split(a[0], xs);",18,2,1,2,4,0,4,2,0,28,16,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1136,"        split(b[0], ys);",0,0,1,2,4,0,4,0,0,6,16,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1137,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,0,0,0,3,22,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1139,        result[0] = zs[0];,0,0,0,2,4,0,0,0,0,6,18,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1140,        result[1] = zs[1];,0,0,1,2,4,0,0,0,0,5,18,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1143,"        split(b[1], ys);",0,0,1,2,4,0,4,0,0,6,16,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1144,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,0,0,0,1,22,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1146,        double tmp = result[0] + zs[0];,2,1,1,2,4,0,0,0,0,7,31,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1147,        result[1] = result[1] - (tmp - result[0] - zs[0]);,0,0,0,5,10,0,0,0,0,15,50,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1148,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1149,        tmp = result[0] + zs[1];,2,1,1,2,4,0,0,0,0,8,24,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1150,        result[1] = result[1] - (tmp - result[0] - zs[1]);,0,0,0,5,10,0,0,0,0,15,50,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1151,        result[0] = tmp;,6,0,1,1,2,0,0,0,0,9,16,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1154,"        split(a[1], xs);",0,0,0,2,4,0,0,0,0,6,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1155,"        split(b[0], ys);",2,0,1,2,4,0,4,0,0,8,16,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1156,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,8,0,0,8,22,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1158,        tmp = result[0] + zs[0];,2,1,0,2,4,0,0,0,0,3,24,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1159,        result[1] = result[1] - (tmp - result[0] - zs[0]);,0,0,0,5,10,0,0,0,0,15,50,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1160,        result[0] = tmp;,0,0,0,1,2,0,0,0,0,3,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1161,        tmp = result[0] + zs[1];,0,0,0,2,4,0,0,0,0,6,24,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1162,        result[1] = result[1] - (tmp - result[0] - zs[1]);,10,8,1,5,10,0,0,0,0,27,50,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1163,        result[0] = tmp;,0,0,0,1,2,0,0,0,0,3,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1166,"        split(a[1], xs);",4,0,0,2,4,0,0,0,0,4,16,9,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1167,"        split(b[1], ys);",0,0,1,2,4,0,4,0,0,6,16,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1168,"        splitMult(xs, ys, zs);",2,1,0,1,2,0,8,0,0,11,22,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1170,        tmp = result[0] + zs[0];,2,1,1,2,4,0,0,0,0,8,24,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1171,        result[1] = result[1] - (tmp - result[0] - zs[0]);,4,0,0,5,10,0,8,0,0,12,50,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1172,        result[0] = tmp;,6,2,0,1,2,1,10,0,0,19,16,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1173,        tmp = result[0] + zs[1];,0,0,0,2,4,0,0,0,0,6,24,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1174,        result[1] = result[1] - (tmp - result[0] - zs[1]);,0,0,0,5,10,0,0,0,0,15,50,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1175,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1176,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1185,        final double xs[] = new double[2];,0,0,1,2,4,0,4,0,0,8,34,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1186,        final double as[] = new double[2];,2,0,0,2,4,0,0,0,0,3,34,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1187,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1196,        xs[0] = 2.718281828459045;,0,0,1,1,2,0,0,0,0,3,26,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1197,        xs[1] = 1.4456468917292502E-16;,6,1,1,1,2,0,0,0,0,11,31,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1199,"        split(1.0, ys);",0,0,0,1,2,0,4,0,0,4,15,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1201,        while (p > 0) {,10,3,0,1,3,0,0,0,0,13,15,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1202,            if ((p & 1) != 0) {,0,0,0,2,5,0,0,0,0,7,19,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1203,"                quadMult(ys, xs, as);",12,3,0,1,2,1,8,0,0,27,21,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1204,                ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1207,"            quadMult(xs, xs, as);",8,2,0,1,2,0,8,0,0,19,21,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1208,            xs[0] = as[0]; xs[1] = as[1];,0,0,0,4,8,0,0,0,0,12,29,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1210,            p >>= 1;,2,0,0,0,0,0,4,2,0,8,8,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1213,        if (result != null) {,12,2,0,1,3,0,0,0,0,15,21,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1214,            result[0] = ys[0];,0,0,0,2,4,0,0,0,0,6,18,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1215,            result[1] = ys[1];,0,0,0,2,4,0,0,0,0,6,18,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1217,            resplit(result);,0,0,0,1,2,0,0,0,0,3,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1220,        return ys[0] + ys[1];,6,2,1,2,4,1,0,0,0,12,21,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1716,        double x[] = new double[2];,0,0,0,2,4,0,0,0,0,6,27,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1717,        double x2[] = new double[2];,0,0,0,2,4,0,0,0,0,6,28,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1718,        double y[] = new double[2];,2,0,0,2,4,0,0,0,0,2,27,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1719,        double a[] = new double[2];,2,1,0,2,4,0,0,0,0,3,27,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1721,"        split(xi, x);",0,0,0,1,2,0,6,0,0,6,13,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1724,        x[0] += 1.0;,0,0,0,1,2,0,0,0,0,3,12,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1725,        resplit(x);,0,0,0,1,2,0,4,0,0,4,11,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1726,"        splitReciprocal(x, a);",4,0,0,1,2,0,0,0,0,4,22,11,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1727,        x[0] -= 2.0;,0,0,0,1,2,0,0,0,0,3,12,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1728,        resplit(x);,0,0,0,1,2,0,0,0,0,3,11,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1729,"        splitMult(x, a, y);",0,0,0,1,2,0,6,0,0,6,19,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1730,        x[0] = y[0];,0,0,0,2,4,0,0,0,0,6,12,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1731,        x[1] = y[1];,0,0,0,2,4,0,0,0,0,6,12,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1734,"        splitMult(x, x, x2);",0,0,0,1,2,0,8,0,0,8,20,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1740,        y[0] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][0];,10,2,1,3,6,1,0,0,0,18,48,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1741,        y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];,4,1,1,3,6,0,0,0,0,10,48,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1743,        for (int i = LN_SPLIT_COEF.length-2; i >= 0; i--) {,0,0,1,1,3,0,4,0,0,13,51,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1744,"            splitMult(y, x2, a);",0,0,0,1,2,0,8,0,0,8,20,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1745,            y[0] = a[0];,6,0,1,2,4,0,0,0,0,11,12,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1746,            y[1] = a[1];,0,0,0,2,4,0,0,0,0,6,12,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1747,"            splitAdd(y, LN_SPLIT_COEF[i], a);",0,0,0,2,4,0,0,0,0,6,33,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1748,            y[0] = a[0];,0,0,0,2,4,0,0,0,0,6,12,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1749,            y[1] = a[1];,2,1,0,2,4,0,0,0,0,3,12,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1752,"        splitMult(y, x, a);",0,0,0,1,2,0,0,0,0,3,19,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1753,        y[0] = a[0];,0,0,0,2,4,0,0,0,0,6,12,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1754,        y[1] = a[1];,0,0,1,2,4,0,0,0,0,5,12,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1756,        return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1766,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1767,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1768,        final double facts[] = new double[2];,8,2,0,2,4,1,0,0,0,13,37,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1769,        final double as[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1770,"        split(x, xs);",0,0,0,1,2,0,6,0,0,6,13,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1771,        ys[0] = ys[1] = 0.0;,0,0,1,2,4,0,0,0,0,6,20,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1773,        for (int i = 19; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,31,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1774,"            splitMult(xs, ys, as);",0,0,0,1,2,0,0,0,0,3,22,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1775,            ys[0] = as[0]; ys[1] = as[1];,4,1,0,4,8,0,0,0,0,5,29,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1777,            if ( (i & 1) == 0) {,0,0,0,2,5,0,0,0,0,7,20,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1778,                continue;,8,1,0,0,0,0,0,0,0,10,9,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1781,"            split(FACT[i], as);",0,0,0,2,4,0,0,0,0,6,19,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1782,"            splitReciprocal(as, facts);",0,0,0,1,2,0,0,0,0,3,27,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1784,            if ( (i & 2) != 0 ) {,2,0,0,2,5,0,0,0,0,2,21,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1785,                facts[0] = -facts[0];,0,0,1,2,4,0,0,0,0,6,21,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1786,                facts[1] = -facts[1];,0,0,1,2,4,0,0,0,0,6,21,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1789,"            splitAdd(ys, facts, as);",4,0,0,1,2,0,8,0,0,13,24,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1790,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1793,        if (result != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1794,            result[0] = ys[0];,0,0,1,2,4,0,0,0,0,5,18,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1795,            result[1] = ys[1];,0,0,1,2,4,0,0,0,0,5,18,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1798,        return ys[0] + ys[1];,0,0,0,2,4,1,0,0,0,7,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1809,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1810,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1811,        final double facts[] = new double[2];,0,0,0,2,4,0,0,0,0,6,37,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1812,        final double as[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1813,"        split(x, xs);",0,0,0,1,2,0,0,0,0,3,13,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1814,        ys[0] = ys[1] = 0.0;,0,0,0,2,4,0,0,0,0,6,20,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1816,        for (int i = 19; i >= 0; i--) {,6,1,0,1,3,0,0,0,0,8,31,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1817,"            splitMult(xs, ys, as);",2,0,0,1,2,1,12,0,0,15,22,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1818,            ys[0] = as[0]; ys[1] = as[1];,6,1,1,4,8,0,4,0,0,22,29,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1820,            if ( (i & 1) != 0) {,0,0,0,2,5,0,0,0,0,7,20,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1821,                continue;,2,0,0,0,0,0,0,0,0,3,9,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1824,"            split(FACT[i], as);",0,0,0,2,4,0,0,0,0,6,19,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1825,"            splitReciprocal(as, facts);",0,0,0,1,2,0,6,0,0,6,27,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1827,            if ( (i & 2) != 0 ) {,2,2,0,2,5,0,0,0,0,4,21,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1828,                facts[0] = -facts[0];,2,0,1,2,4,0,0,0,0,8,21,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1829,                facts[1] = -facts[1];,4,0,1,2,4,0,0,0,0,11,21,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1832,"            splitAdd(ys, facts, as);",6,1,0,1,2,1,8,0,0,16,24,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1833,            ys[0] = as[0]; ys[1] = as[1];,0,0,0,4,8,0,0,0,0,12,29,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1836,        if (result != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1837,            result[0] = ys[0];,0,0,1,2,4,0,0,0,0,5,18,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1838,            result[1] = ys[1];,0,0,0,2,4,0,0,0,0,6,18,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1841,        return ys[0] + ys[1];,12,3,1,2,4,1,0,0,0,21,21,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1847,        final double result[] = new double[2];,2,0,0,2,4,1,0,0,0,3,38,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1850,        for (int i = 0; i < 7; i++) {,6,1,0,1,3,0,0,0,0,8,29,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1851,            double x = i / 8.0;,4,1,0,0,0,0,0,0,0,5,19,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1853,"            slowSin(x, result);",0,0,0,1,2,0,0,0,0,3,19,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1854,            SINE_TABLE_A[i] = result[0];,2,0,1,2,4,0,0,0,0,11,28,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1855,            SINE_TABLE_B[i] = result[1];,0,0,1,2,4,0,0,0,0,7,28,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1857,"            slowCos(x, result);",0,0,0,1,2,0,0,0,0,3,19,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1858,            COSINE_TABLE_A[i] = result[0];,0,0,0,2,4,0,0,0,0,6,30,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1859,            COSINE_TABLE_B[i] = result[1];,0,0,0,2,4,0,0,0,0,6,30,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1863,        for (int i = 7; i < 14; i++) {,6,1,0,1,3,0,0,0,0,8,30,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1864,            double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,28,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1865,            double ys[] = new double[2];,4,0,0,2,4,0,0,0,0,5,28,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1866,            double as[] = new double[2];,0,0,0,2,4,0,0,0,0,6,28,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1867,            double bs[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1868,            double temps[] = new double[2];,8,1,0,2,4,0,0,0,0,10,31,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1870,            if ( (i & 1) == 0) {,2,2,0,2,5,0,0,0,0,4,20,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1872,                xs[0] = SINE_TABLE_A[i/2];,8,1,0,2,4,0,0,0,0,10,26,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1873,                xs[1] = SINE_TABLE_B[i/2];,2,1,1,2,4,0,0,0,0,8,26,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1874,                ys[0] = COSINE_TABLE_A[i/2];,8,1,1,2,4,0,0,2,0,16,28,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1875,                ys[1] = COSINE_TABLE_B[i/2];,2,1,1,2,4,0,0,0,0,8,28,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1878,"                splitMult(xs, ys, result);",0,0,0,1,2,0,0,0,0,3,26,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1879,                SINE_TABLE_A[i] = result[0] * 2.0;,0,0,0,2,4,0,0,0,0,6,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1880,                SINE_TABLE_B[i] = result[1] * 2.0;,6,2,1,2,4,0,0,0,0,16,34,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1883,"                splitMult(ys, ys, as);",0,0,0,1,2,0,0,0,0,3,22,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1884,"                splitMult(xs, xs, temps);",0,0,0,1,2,0,8,0,0,8,25,9,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1885,                temps[0] = -temps[0];,0,0,0,2,4,0,0,0,0,6,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1886,                temps[1] = -temps[1];,4,2,1,2,4,0,0,0,0,12,21,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1887,"                splitAdd(as, temps, result);",0,0,0,1,2,0,0,0,0,3,28,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1888,                COSINE_TABLE_A[i] = result[0];,0,0,1,2,4,0,0,0,0,7,30,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1889,                COSINE_TABLE_B[i] = result[1];,0,0,1,2,4,0,0,0,0,7,30,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1891,                xs[0] = SINE_TABLE_A[i/2];,2,1,1,2,4,0,0,0,0,8,26,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1892,                xs[1] = SINE_TABLE_B[i/2];,0,0,0,2,4,0,0,0,0,6,26,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1893,                ys[0] = COSINE_TABLE_A[i/2];,2,1,1,2,4,0,0,0,0,8,28,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1894,                ys[1] = COSINE_TABLE_B[i/2];,0,0,0,2,4,0,0,0,0,6,28,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1895,                as[0] = SINE_TABLE_A[i/2+1];,2,2,1,2,4,0,0,0,0,9,28,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1896,                as[1] = SINE_TABLE_B[i/2+1];,0,0,0,2,4,0,0,0,0,6,28,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1897,                bs[0] = COSINE_TABLE_A[i/2+1];,2,2,1,2,4,0,0,0,0,9,30,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1898,                bs[1] = COSINE_TABLE_B[i/2+1];,6,2,1,2,4,0,0,0,0,15,30,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1901,"                splitMult(xs, bs, temps);",0,0,0,1,2,0,0,0,0,3,25,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1902,"                splitMult(ys, as, result);",0,0,0,1,2,0,8,0,0,8,26,9,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1903,"                splitAdd(result, temps, result);",0,0,1,1,2,0,0,0,0,6,32,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1904,                SINE_TABLE_A[i] = result[0];,2,0,1,2,4,0,0,0,0,5,28,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1905,                SINE_TABLE_B[i] = result[1];,6,1,1,2,4,1,0,0,0,15,28,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1908,"                splitMult(ys, bs, result);",0,0,0,1,2,0,8,0,0,8,26,9,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1909,"                splitMult(xs, as, temps);",0,0,0,1,2,0,8,0,0,8,25,9,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1910,                temps[0] = -temps[0];,0,0,1,2,4,0,0,0,0,6,21,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1911,                temps[1] = -temps[1];,0,0,1,2,4,0,0,0,0,10,21,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1912,"                splitAdd(result, temps, result);",0,0,0,1,2,0,0,0,0,3,32,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1913,                COSINE_TABLE_A[i] = result[0];,4,0,0,2,4,0,0,0,0,6,30,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1914,                COSINE_TABLE_B[i] = result[1];,2,0,1,2,4,0,0,0,0,9,30,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1919,        for (int i = 0; i < 14; i++) {,0,0,0,1,3,0,0,0,0,4,30,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1920,            double xs[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1921,            double ys[] = new double[2];,2,0,0,2,4,0,0,0,0,4,28,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1922,            double as[] = new double[2];,4,0,0,2,4,0,0,0,0,4,28,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1924,            as[0] = COSINE_TABLE_A[i];,0,0,0,2,4,0,0,0,0,6,26,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1925,            as[1] = COSINE_TABLE_B[i];,0,0,0,2,4,0,0,0,0,6,26,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1927,"            splitReciprocal(as, ys);",0,0,0,1,2,0,0,0,0,3,24,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1929,            xs[0] = SINE_TABLE_A[i];,8,1,1,2,4,0,8,0,0,28,24,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1930,            xs[1] = SINE_TABLE_B[i];,0,0,1,2,4,0,0,0,0,7,24,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1932,"            splitMult(xs, ys, as);",0,0,0,1,2,0,0,0,0,3,22,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1934,            TANGENT_TABLE_A[i] = as[0];,0,0,1,2,4,0,0,0,0,7,27,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1935,            TANGENT_TABLE_B[i] = as[1];,0,0,0,2,4,0,0,0,0,6,27,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1938,    },10,0,0,0,1,0,0,2,0,13,1,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3380,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,0,0,0,2,4,1,0,0,0,7,61,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3784,        return (a <= b) ? a : b;,8,1,0,1,2,1,0,0,0,9,24,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3827,        if (a > b) {,10,2,0,1,3,0,0,0,0,12,12,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3828,            return b;,4,2,0,0,0,1,10,0,0,17,9,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3895,        if (a > b) {,0,0,0,1,3,0,0,0,0,4,12,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3896,            return a;,8,1,0,0,0,1,0,0,0,11,9,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3898,        if (a < b) {,0,0,0,1,3,0,0,0,0,4,12,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3899,            return b;,0,0,0,0,0,1,0,0,0,1,9,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3902,        if (a != b) {,4,1,0,1,3,0,0,0,0,5,13,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3907,        long bits = Double.doubleToRawLongBits(a);,2,0,0,1,2,0,6,0,0,8,42,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3908,        if (bits == 0x8000000000000000L) {,2,1,0,1,3,0,0,0,0,3,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3911,        return a;,2,0,0,0,0,1,0,0,0,2,9,4,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,197,        return norm * FastMath.exp(-xMinusMean * xMinusMean * i2s2);,8,2,0,1,2,1,4,0,0,15,60,4,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,35,public class Gaussian implements DifferentiableUnivariateRealFunction {,2,0,0,0,1,1,0,2,0,5,71,1,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,114,    public static class Parametric implements ParametricUnivariateRealFunction {,0,0,0,0,1,0,0,0,0,1,76,4,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,128,            validateParameters(param);,0,0,0,1,2,0,4,0,0,4,26,6,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,130,            final double diff = x - param[1];,4,1,1,1,2,1,0,0,0,8,33,5,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,131,            final double i2s2 = 1 / (2 * param[2] * param[2]);,2,2,1,3,6,1,0,0,0,9,50,5,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,132,"            return Gaussian.value(diff, param[0], i2s2);",0,0,0,2,4,1,0,0,0,7,44,4,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,150,            validateParameters(param);,0,0,0,1,2,0,4,0,0,4,26,6,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,152,            final double norm = param[0];,8,2,1,1,2,2,0,0,0,16,29,1,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,153,            final double diff = x - param[1];,6,1,1,1,2,1,0,0,0,15,33,1,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,154,            final double sigma = param[2];,2,0,1,1,2,1,0,0,0,5,30,5,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,155,            final double i2s2 = 1 / (2 * sigma * sigma);,0,0,0,1,2,0,0,0,0,3,44,4,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,157,"            final double n = Gaussian.value(diff, 1, i2s2);",0,0,0,1,2,0,0,0,0,3,47,4,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,158,            final double m = norm * n * 2 * i2s2 * diff;,0,0,0,0,0,0,0,0,0,0,44,4,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,159,            final double s = m * diff / sigma;,8,2,0,0,0,1,0,0,0,11,34,5,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,161,"            return new double[] { n, m, s };",6,0,0,2,4,1,0,0,0,6,32,7,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,176,            if (param == null) {,4,2,0,1,3,0,4,0,0,10,20,1,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,179,            if (param.length != 3) {,12,2,0,1,3,0,0,0,0,16,24,1,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,182,            if (param[2] <= 0) {,16,3,1,2,5,0,0,0,0,23,20,1,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,185,        },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/WeightedObservedPoint,58,47,"    public WeightedObservedPoint(final double weight, final double x, final double y) {",8,0,0,1,3,4,0,0,0,12,83,2,0.16667,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/WeightedObservedPoint,58,48,        this.weight = weight;,4,0,0,0,0,0,0,0,0,5,21,4,0.16667,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/WeightedObservedPoint,58,49,        this.x      = x;,0,0,0,0,0,0,0,0,0,0,16,4,0.16667,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/WeightedObservedPoint,58,50,        this.y      = y;,4,0,0,0,0,0,0,0,0,5,16,4,0.16667,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/WeightedObservedPoint,58,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,67,"        addObservedPoint(1.0, x, y);",0,0,0,1,2,0,6,0,0,6,28,5,0.16667,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,68,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,80,"        observations.add(new WeightedObservedPoint(weight, x, y));",6,0,0,2,4,0,4,2,0,12,58,5,0.16667,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,81,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,140,        public ParameterGuesser(WeightedObservedPoint[] observations) {,4,0,0,2,5,1,0,2,0,7,63,3,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,141,            if (observations == null) {,4,1,0,1,3,0,0,0,0,6,27,4,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,144,            if (observations.length < 3) {,4,1,0,1,3,0,0,0,0,5,30,5,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,68,        super(optimizer);,2,0,0,1,2,0,0,0,0,2,17,4,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,69,    },0,0,0,0,1,0,4,0,0,5,1,4,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,120,        final double[] guess = (new ParameterGuesser(getObservations())).guess();,2,0,0,5,10,1,4,2,0,9,73,4,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,51,    public CurveFitter(final DifferentiableMultivariateVectorialOptimizer optimizer) {,4,0,0,1,3,0,10,0,0,14,82,7,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,52,        this.optimizer = optimizer;,0,0,0,0,0,0,0,0,0,0,27,4,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,53,        observations = new ArrayList<WeightedObservedPoint>();,4,0,0,1,2,0,0,6,0,11,54,2,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,100,        return observations.toArray(new WeightedObservedPoint[observations.size()]);,6,1,0,3,6,2,8,2,0,18,76,3,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,62,        this(new SimpleVectorialValueChecker());,0,0,0,2,4,0,0,0,0,6,40,4,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,63,    },0,0,0,0,1,0,0,0,0,1,1,4,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,67,    protected BaseAbstractVectorialOptimizer(ConvergenceChecker<VectorialPointValuePair> checker) {,4,0,0,1,3,1,0,4,0,9,95,2,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,44,    protected final Incrementor evaluations = new Incrementor();,0,0,0,1,2,0,0,0,0,3,60,4,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,68,        this.checker = checker;,4,0,0,0,0,0,0,0,0,5,23,4,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,69,    },0,0,0,0,1,0,0,0,0,1,1,4,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,152,"        this(100, 1e-10, 1e-10, 1e-10, MathUtils.SAFE_MIN);",24,5,0,1,2,0,0,0,0,31,51,3,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,153,    },0,0,0,0,1,0,0,0,0,1,1,4,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,208,                                       double threshold) {,2,0,0,0,2,0,0,0,0,2,19,3,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,209,        this.initialStepBoundFactor = initialStepBoundFactor;,4,0,0,0,0,0,0,0,0,5,53,4,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,210,        this.costRelativeTolerance = costRelativeTolerance;,0,0,0,0,0,0,0,0,0,0,51,4,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,211,        this.parRelativeTolerance = parRelativeTolerance;,4,0,0,0,0,0,0,0,0,5,49,4,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,212,        this.orthoTolerance = orthoTolerance;,4,0,0,0,0,0,0,0,0,5,37,4,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,213,        this.qrRankingThreshold = threshold;,4,0,0,0,0,0,0,0,0,5,36,4,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,214,    },8,2,1,0,1,0,0,0,0,13,1,3,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,78,    protected AbstractLeastSquaresOptimizer() {},2,0,0,2,4,1,0,0,0,3,44,2,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/AbstractConvergenceChecker,58,52,    public AbstractConvergenceChecker() {,2,0,0,1,3,1,0,0,0,3,37,2,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/AbstractConvergenceChecker,58,53,        this.relativeThreshold = DEFAULT_RELATIVE_THRESHOLD;,4,0,0,0,0,0,0,0,0,5,52,4,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/AbstractConvergenceChecker,58,54,        this.absoluteThreshold = DEFAULT_ABSOLUTE_THRESHOLD;,4,0,0,0,0,0,0,0,0,5,52,4,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/AbstractConvergenceChecker,58,55,    },0,0,0,0,1,0,0,0,0,1,1,4,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,39,    public SimpleVectorialValueChecker() {},2,0,0,2,4,1,0,0,0,3,39,2,0.14286,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,58,28,public class Incrementor {,2,0,0,0,1,1,0,0,0,3,26,1,0.14286,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,174,"        this(decimalDigits, true);",0,0,0,1,2,0,0,0,0,3,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,175,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,188,"    private DfpField(final int decimalDigits, final boolean computeConstants) {",6,0,0,1,3,3,0,0,0,9,75,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,190,        this.radixDigits = (decimalDigits < 13) ? 4 : (decimalDigits + 3) / 4;,4,1,0,2,4,0,0,0,0,5,70,9,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,191,        this.rMode       = RoundingMode.ROUND_HALF_EVEN;,8,0,0,0,0,1,4,0,0,14,48,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,192,        this.ieeeFlags   = 0;,6,1,0,0,0,0,0,0,0,8,21,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,193,"        this.zero        = new Dfp(this, 0);",0,0,0,1,2,0,0,0,0,3,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,194,"        this.one         = new Dfp(this, 1);",2,0,0,1,2,0,0,2,0,5,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,195,"        this.two         = new Dfp(this, 2);",2,0,0,1,2,0,0,0,0,2,36,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,197,        if (computeConstants) {,0,0,0,1,3,0,0,0,0,4,23,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,199,            synchronized (DfpField.class) {,0,0,0,1,3,0,0,0,0,4,31,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,205,                computeStringConstants((decimalDigits < 67) ? 200 : (3 * decimalDigits));,12,3,0,3,6,1,12,0,0,30,73,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,208,"                sqr2           = new Dfp(this, sqr2String);",4,0,0,1,2,0,0,0,0,5,43,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,209,                sqr2Split      = split(sqr2String);,2,1,0,1,2,0,0,0,0,3,35,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,210,"                sqr2Reciprocal = new Dfp(this, sqr2ReciprocalString);",0,0,0,1,2,0,0,0,0,3,53,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,211,"                sqr3           = new Dfp(this, sqr3String);",4,0,0,1,2,0,0,2,0,7,43,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,212,"                sqr3Reciprocal = new Dfp(this, sqr3ReciprocalString);",10,3,0,1,2,0,0,0,0,14,53,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,213,"                pi             = new Dfp(this, piString);",4,0,0,1,2,0,6,0,0,10,41,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,214,                piSplit        = split(piString);,4,0,0,1,2,0,4,2,0,11,33,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,215,"                e              = new Dfp(this, eString);",0,0,0,1,2,0,0,0,0,3,40,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,216,                eSplit         = split(eString);,2,0,0,1,2,0,4,0,0,7,32,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,217,"                ln2            = new Dfp(this, ln2String);",6,0,0,1,2,1,2,0,0,11,42,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,218,                ln2Split       = split(ln2String);,2,1,0,1,2,0,0,0,0,3,34,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,219,"                ln5            = new Dfp(this, ln5String);",6,0,0,1,2,0,6,2,0,15,42,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,220,                ln5Split       = split(ln5String);,2,0,0,1,2,0,4,0,0,7,34,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,221,"                ln10           = new Dfp(this, ln10String);",0,0,0,1,2,0,0,0,0,3,43,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,223,            },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,226,            sqr2           = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,227,            sqr2Split      = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,228,            sqr2Reciprocal = null;,2,0,0,0,0,3,6,0,0,11,22,1,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,229,            sqr3           = null;,2,0,0,0,0,1,0,0,0,3,22,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,230,            sqr3Reciprocal = null;,16,4,0,0,0,4,10,4,0,40,22,1,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,231,            pi             = null;,0,0,0,0,0,0,0,0,0,0,22,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,232,            piSplit        = null;,4,0,0,0,0,0,0,0,0,5,22,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,233,            e              = null;,10,1,0,0,0,1,0,0,0,13,22,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,234,            eSplit         = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,235,            ln2            = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,236,            ln2Split       = null;,0,0,0,0,0,0,0,0,0,0,22,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,237,            ln5            = null;,2,0,0,0,0,0,0,0,0,3,22,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,238,            ln5Split       = null;,4,0,0,0,0,3,0,0,0,8,22,1,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,239,            ln10           = null;,0,0,0,0,0,0,0,0,0,0,22,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,242,    },6,2,0,0,1,1,0,0,0,9,1,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,248,        return radixDigits;,0,0,0,0,0,1,0,0,0,1,19,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,266,        return rMode;,4,0,0,0,0,1,0,0,0,5,13,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,328,        ieeeFlags |= bits & (FLAG_INVALID | FLAG_DIV_ZERO | FLAG_OVERFLOW | FLAG_UNDERFLOW | FLAG_INEXACT);,2,0,0,1,2,3,0,2,0,7,99,1,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,329,    },4,1,0,0,1,0,0,0,0,5,1,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,400,        return zero;,14,3,0,0,0,1,0,0,0,18,12,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,522,      Dfp result[] = new Dfp[2];,0,0,0,2,4,0,0,0,0,6,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,523,      boolean leading = true;,2,0,0,0,0,0,0,0,0,3,23,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,524,      int sp = 0;,0,0,0,0,0,0,0,0,0,0,11,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,525,      int sig = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,527,      char[] buf = new char[a.length()];,2,0,0,3,6,0,4,0,0,6,34,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,529,      for (int i = 0; i < buf.length; i++) {,10,1,0,1,3,0,0,0,0,12,38,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,530,        buf[i] = a.charAt(i);,2,0,0,2,4,0,14,0,0,17,21,13,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,532,        if (buf[i] >= '1' && buf[i] <= '9') {,8,3,1,3,7,0,0,2,0,29,37,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,533,            leading = false;,0,0,0,0,0,0,0,0,0,0,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,536,        if (buf[i] == '.') {,0,0,0,2,5,0,0,0,0,7,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,537,          sig += (400 - sig) % 4;,0,0,0,1,2,0,0,0,0,3,23,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,538,          leading = false;,0,0,0,0,0,0,0,0,0,0,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,541,        if (sig == (radixDigits / 2) * 4) {,0,0,0,2,5,0,0,0,0,7,35,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,542,          sp = i;,0,0,0,0,0,0,0,0,0,0,7,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,543,          break;,0,0,0,0,0,0,0,0,0,0,6,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,546,        if (buf[i] >= '0' && buf[i] <= '9' && !leading) {,0,0,0,3,7,0,0,0,0,10,49,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,547,            sig ++;,4,0,0,0,0,0,0,0,0,5,7,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,551,"      result[0] = new Dfp(this, new String(buf, 0, sp));",4,0,1,3,6,0,0,4,0,11,50,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,553,      for (int i = 0; i < buf.length; i++) {,0,0,0,1,3,0,0,0,0,4,38,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,554,        buf[i] = a.charAt(i);,2,0,1,2,4,0,6,0,0,20,21,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,555,        if (buf[i] >= '0' && buf[i] <= '9' && i < sp) {,0,0,0,3,7,0,0,0,0,10,47,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,556,            buf[i] = '0';,0,0,1,1,2,0,0,0,0,6,13,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,560,"      result[1] = new Dfp(this, new String(buf));",10,0,1,3,6,0,0,4,0,18,43,0,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,562,      return result;,2,0,0,0,0,1,0,0,0,2,14,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,570,        if (sqr2String == null || sqr2String.length() < highPrecisionDecimalDigits - 3) {,8,1,0,2,5,0,0,0,0,11,81,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,573,"            final DfpField highPrecisionField = new DfpField(highPrecisionDecimalDigits, false);",0,0,0,1,2,0,0,0,0,3,84,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,574,"            final Dfp highPrecisionOne        = new Dfp(highPrecisionField, 1);",6,0,0,1,2,1,0,4,0,12,67,0,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,575,"            final Dfp highPrecisionTwo        = new Dfp(highPrecisionField, 2);",6,0,0,1,2,1,4,6,0,18,67,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,576,"            final Dfp highPrecisionThree      = new Dfp(highPrecisionField, 3);",4,0,0,1,2,1,0,4,0,9,67,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,578,            final Dfp highPrecisionSqr2 = highPrecisionTwo.sqrt();,2,0,0,1,2,1,4,2,0,9,54,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,579,            sqr2String           = highPrecisionSqr2.toString();,0,0,0,1,2,0,0,0,0,3,52,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,580,            sqr2ReciprocalString = highPrecisionOne.divide(highPrecisionSqr2).toString();,0,0,0,2,4,0,0,0,0,6,77,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,582,            final Dfp highPrecisionSqr3 = highPrecisionThree.sqrt();,2,0,0,1,2,1,4,2,0,9,56,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,583,            sqr3String           = highPrecisionSqr3.toString();,6,1,1,1,2,0,10,0,0,21,52,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,584,            sqr3ReciprocalString = highPrecisionOne.divide(highPrecisionSqr3).toString();,0,0,0,2,4,0,0,0,0,6,77,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,586,"            piString   = computePi(highPrecisionOne, highPrecisionTwo, highPrecisionThree).toString();",4,1,0,2,4,0,10,0,0,16,90,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,587,"            eString    = computeExp(highPrecisionOne, highPrecisionOne).toString();",0,0,0,2,4,0,0,0,0,6,71,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,588,"            ln2String  = computeLn(highPrecisionTwo, highPrecisionOne, highPrecisionTwo).toString();",0,0,0,2,4,0,6,0,0,6,88,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,589,"            ln5String  = computeLn(new Dfp(highPrecisionField, 5),  highPrecisionOne, highPrecisionTwo).toString();",4,0,0,3,6,0,8,2,0,15,103,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,590,"            ln10String = computeLn(new Dfp(highPrecisionField, 10), highPrecisionOne, highPrecisionTwo).toString();",16,3,1,3,6,0,16,2,0,47,103,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,593,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,603,        Dfp sqrt2   = two.sqrt();,0,0,0,1,2,0,0,0,0,3,25,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,604,        Dfp yk      = sqrt2.subtract(one);,0,0,0,1,2,0,0,0,0,3,34,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,605,        Dfp four    = two.add(two);,0,0,0,1,2,0,0,0,0,3,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,606,        Dfp two2kp3 = two;,0,0,0,0,0,0,0,0,0,0,18,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,607,        Dfp ak      = two.multiply(three.subtract(two.multiply(sqrt2)));,0,0,0,3,6,0,0,0,0,9,64,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,615,        for (int i = 1; i < 20; i++) {,6,1,0,1,3,0,0,0,0,8,30,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,616,            final Dfp ykM1 = yk;,2,0,0,0,0,0,0,0,0,3,20,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,618,            final Dfp y2         = yk.multiply(yk);,2,0,0,1,2,1,6,2,0,11,39,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,619,            final Dfp oneMinusY4 = one.subtract(y2.multiply(y2));,2,0,0,2,4,1,10,2,0,15,53,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,620,            final Dfp s          = oneMinusY4.sqrt().sqrt();,2,0,0,2,4,1,6,2,0,11,48,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,621,            yk = one.subtract(s).divide(one.add(s));,2,0,0,3,6,0,14,0,0,17,40,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,623,            two2kp3 = two2kp3.multiply(four);,2,0,0,1,2,0,6,0,0,9,33,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,625,            final Dfp p = one.add(yk);,0,0,0,1,2,0,0,0,0,3,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,626,            final Dfp p2 = p.multiply(p);,0,0,0,1,2,0,0,0,0,3,29,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,627,            ak = ak.multiply(p2.multiply(p2)).subtract(two2kp3.multiply(yk).multiply(one.add(yk).add(yk.multiply(yk))));,2,0,0,8,16,0,34,0,0,37,108,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,629,            if (yk.equals(ykM1)) {,2,1,0,2,5,0,6,0,0,9,22,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,630,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,634,        return one.divide(ak);,0,0,0,1,2,1,6,0,0,6,22,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,645,        Dfp y  = new Dfp(one);,4,0,0,1,2,0,0,4,0,8,22,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,646,        Dfp py = new Dfp(one);,0,0,0,1,2,0,0,0,0,3,22,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,647,        Dfp f  = new Dfp(one);,4,0,0,1,2,0,0,4,0,8,22,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,648,        Dfp fi = new Dfp(one);,0,0,0,1,2,0,0,0,0,3,22,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,649,        Dfp x  = new Dfp(one);,4,0,0,1,2,0,0,4,0,8,22,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,651,        for (int i = 0; i < 10000; i++) {,6,1,0,1,3,0,0,0,0,8,33,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,652,            x = x.multiply(a);,2,0,0,1,2,0,6,0,0,9,18,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,653,            y = y.add(x.divide(f));,2,0,0,2,4,0,10,0,0,13,23,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,654,            fi = fi.add(one);,8,1,0,1,2,0,8,0,0,19,17,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,655,            f = f.multiply(fi);,2,0,0,1,2,0,6,0,0,9,19,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,656,            if (y.equals(py)) {,6,0,0,2,5,2,8,0,0,16,19,1,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,657,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,659,            py = new Dfp(y);,4,0,0,1,2,0,0,2,0,7,16,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,662,        return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,728,        int den = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,729,"        Dfp x = a.add(new Dfp(a.getField(), -1)).divide(a.add(one));",2,0,0,5,10,0,16,4,0,23,60,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,731,        Dfp y = new Dfp(x);,20,3,0,1,2,0,0,4,0,29,19,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,732,        Dfp num = new Dfp(x);,0,0,0,1,2,0,0,0,0,3,21,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,733,        Dfp py = new Dfp(y);,4,0,0,1,2,0,0,4,0,8,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,734,        for (int i = 0; i < 10000; i++) {,8,1,0,1,3,0,0,0,0,10,33,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,735,            num = num.multiply(x);,2,0,0,1,2,0,6,0,0,9,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,736,            num = num.multiply(x);,2,0,0,1,2,0,6,0,0,9,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,737,            den = den + 2;,18,2,0,0,0,1,0,0,0,25,14,1,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,738,            Dfp t = num.divide(den);,2,0,0,1,2,0,6,2,0,10,24,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,739,            y = y.add(t);,4,1,0,1,2,0,10,0,0,16,13,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,740,            if (y.equals(py)) {,0,0,0,2,5,0,0,0,0,7,19,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,741,                break;,0,0,0,0,0,0,6,0,0,6,6,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,743,            py = new Dfp(y);,8,1,1,1,2,0,6,2,0,21,16,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,746,        return y.multiply(two);,0,0,0,1,2,1,6,0,0,6,23,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,29,    public enum RoundingMode {,2,0,0,0,1,1,0,0,0,3,26,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,32,"        ROUND_DOWN,",4,0,0,0,0,0,0,2,0,6,11,1,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,35,"        ROUND_UP,",2,0,0,0,0,0,0,0,0,2,9,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,38,"        ROUND_HALF_UP,",2,0,0,0,0,0,0,0,0,2,14,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,41,"        ROUND_HALF_DOWN,",0,0,0,0,0,0,0,0,0,0,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,46,"        ROUND_HALF_EVEN,",2,0,0,0,0,0,0,2,0,5,16,1,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,49,"        ROUND_HALF_ODD,",0,0,0,0,0,0,0,0,0,0,15,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,52,"        ROUND_CEIL,",4,0,0,0,0,3,0,0,0,7,11,1,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,55,        ROUND_FLOOR;,2,0,0,0,0,0,0,0,0,2,12,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,202,"        this(field, (long) x);",0,0,0,2,4,0,0,0,0,6,22,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,203,    },4,0,0,0,1,0,0,2,0,7,1,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,209,"    protected Dfp(final DfpField field, long x) {",6,0,0,1,3,2,0,2,0,10,45,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,212,        mant = new int[field.getRadixDigits()];,0,0,0,2,4,0,0,0,0,6,39,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,213,        nans = FINITE;,4,0,0,0,0,0,0,0,0,5,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,214,        this.field = field;,4,0,0,0,0,0,0,0,0,5,19,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,216,        boolean isLongMin = false;,0,0,0,0,0,0,0,0,0,0,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,217,        if (x == Long.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,225,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,226,            sign = -1;,2,0,0,0,0,0,0,0,0,4,10,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,227,            x = -x;,0,0,0,0,0,0,0,0,0,0,7,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,229,            sign = 1;,0,0,0,0,0,0,0,0,0,0,9,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,232,        exp = 0;,0,0,0,0,0,0,6,0,0,6,8,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,233,        while (x != 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,234,"            System.arraycopy(mant, mant.length - exp, mant, mant.length - 1 - exp, exp);",12,2,0,1,2,0,10,0,0,24,76,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,235,            mant[mant.length - 1] = (int) (x % RADIX);,18,3,1,3,6,0,0,0,0,26,42,1,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,236,            x /= RADIX;,4,0,0,0,0,0,0,0,0,5,11,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,237,            exp++;,0,0,0,0,0,0,0,0,0,0,6,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,240,        if (isLongMin) {,0,0,0,1,3,0,0,0,0,4,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,250,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,318,    public Dfp(final Dfp d) {,4,0,0,1,3,2,0,2,0,8,25,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,319,        mant  = d.mant.clone();,8,1,0,1,2,0,12,0,0,23,23,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,320,        sign  = d.sign;,0,0,0,0,0,0,0,0,0,0,15,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,321,        exp   = d.exp;,6,0,0,0,0,0,0,0,0,7,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,322,        nans  = d.nans;,4,0,0,0,0,1,0,2,0,7,15,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,323,        field = d.field;,0,0,0,0,0,0,0,0,0,0,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,324,    },4,0,0,0,1,1,4,0,0,9,1,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,330,"    protected Dfp(final DfpField field, final String s) {",6,0,0,1,3,3,0,4,0,13,53,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,333,        mant = new int[field.getRadixDigits()];,2,0,0,2,4,0,4,0,0,7,39,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,334,        sign = 1;,2,0,0,0,0,0,0,0,0,3,9,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,335,        exp = 0;,6,1,0,0,0,1,0,2,0,11,8,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,336,        nans = FINITE;,10,2,1,0,0,0,0,0,0,16,14,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,337,        this.field = field;,4,0,0,0,0,0,0,0,0,5,19,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,339,        boolean decimalFound = false;,2,0,0,0,0,0,0,0,0,3,29,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,340,        final int rsize = 4;   // size of radix in decimal digits,0,0,0,0,0,0,0,0,0,0,57,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,341,        final int offset = 4;  // Starting offset into Striped,4,0,0,0,0,1,6,0,0,12,54,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,342,        final char[] striped = new char[getRadixDigits() * rsize + offset * 2];,6,3,0,3,6,1,2,0,0,12,71,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,345,        if (s.equals(POS_INFINITY_STRING)) {,0,0,0,2,5,0,6,0,0,6,36,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,351,        if (s.equals(NEG_INFINITY_STRING)) {,0,0,0,2,5,0,0,0,0,7,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,357,        if (s.equals(NAN_STRING)) {,0,0,0,2,5,0,0,0,0,7,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,364,"        int p = s.indexOf(""e"");",2,0,0,1,2,0,4,0,0,7,23,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,365,        if (p == -1) { // try upper case?,2,1,0,1,3,0,0,0,0,4,33,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,366,"            p = s.indexOf(""E"");",2,0,0,1,2,0,4,0,0,8,19,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,370,        int sciexp = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,371,        if (p != -1) {,2,1,0,1,3,0,0,0,0,4,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,393,            fpdecimal = s;,4,0,0,0,0,0,0,0,0,5,14,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,397,"        if (fpdecimal.indexOf(""-"") !=  -1) {",0,1,0,2,5,0,4,0,0,7,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,402,        p = 0;,6,3,0,0,0,0,0,0,0,10,6,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,405,        int decimalPos = 0;,0,0,0,0,0,0,0,0,0,0,19,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,407,            if (fpdecimal.charAt(p) >= '1' && fpdecimal.charAt(p) <= '9') {,0,3,0,3,7,0,12,0,0,17,63,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,408,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,411,            if (decimalFound && fpdecimal.charAt(p) == '0') {,0,0,0,2,5,0,0,0,0,7,49,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,412,                decimalPos--;,0,0,0,0,0,0,0,0,0,0,13,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,415,            if (fpdecimal.charAt(p) == '.') {,2,1,0,2,5,3,6,0,0,13,33,1,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,416,                decimalFound = true;,4,0,1,0,0,0,0,0,0,9,20,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,419,            p++;,2,0,0,0,0,0,0,0,0,3,4,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,421,            if (p == fpdecimal.length()) {,2,1,0,2,5,0,4,0,0,7,30,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,427,        int q = offset;,0,0,0,0,0,0,0,0,0,0,15,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,428,        striped[0] = '0';,2,0,1,1,2,0,0,2,0,8,17,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,429,        striped[1] = '0';,0,0,1,1,2,0,0,0,0,4,17,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,430,        striped[2] = '0';,0,0,1,1,2,0,0,0,0,4,17,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,431,        striped[3] = '0';,0,0,1,1,2,0,0,0,0,4,17,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,432,        int significantDigits=0;,4,0,0,0,0,0,0,0,0,4,24,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,434,            if (p == (fpdecimal.length())) {,4,1,0,3,7,0,4,0,0,9,32,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,435,                break;,2,1,1,0,0,0,0,0,0,10,6,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,439,            if (q == mant.length*rsize+offset+1) {,10,4,0,1,3,0,0,0,0,14,38,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,440,                break;,0,0,0,0,0,0,4,0,0,4,6,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,443,            if (fpdecimal.charAt(p) == '.') {,2,1,0,2,5,0,0,0,0,3,33,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,444,                decimalFound = true;,6,1,0,0,0,0,4,0,0,12,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,445,                decimalPos = significantDigits;,0,0,0,0,0,0,0,2,0,2,31,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,446,                p++;,0,0,0,0,0,0,0,0,0,0,4,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,447,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,450,            if (fpdecimal.charAt(p) < '0' || fpdecimal.charAt(p) > '9') {,0,3,0,3,7,0,12,0,0,17,61,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,455,            striped[q] = fpdecimal.charAt(p);,0,0,1,2,4,0,6,0,0,11,33,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,456,            q++;,2,0,0,0,0,0,0,0,0,3,4,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,457,            p++;,4,0,0,0,0,0,0,0,0,5,4,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,458,            significantDigits++;,2,0,0,0,0,0,0,0,0,3,20,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,463,        if (decimalFound && q != offset) {,6,2,0,1,3,0,0,0,0,8,34,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,465,                q--;,0,0,0,0,0,0,0,0,0,0,4,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,466,                if (q == offset) {,14,2,0,1,3,0,0,0,0,18,18,1,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,469,                if (striped[q] == '0') {,0,1,1,2,5,0,0,0,0,6,24,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,470,                    significantDigits--;,0,0,0,0,0,0,0,0,0,0,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,478,        if (decimalFound && significantDigits == 0) {,4,2,0,1,3,0,0,0,0,6,45,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,483,        if (!decimalFound) {,2,0,0,1,3,0,0,0,0,3,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,488,        q = offset;  // set q to point to first sig digit,0,0,0,0,0,0,0,0,0,0,49,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,489,        p = significantDigits-1+offset;,6,2,0,0,0,0,0,0,0,9,31,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,491,        int trailingZeros = 0;,2,0,0,0,0,0,0,0,0,2,22,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,492,        while (p > q) {,4,1,0,1,3,0,0,0,0,5,15,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,493,            if (striped[p] != '0') {,0,0,0,2,5,0,0,0,0,7,24,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,494,                break;,0,0,0,0,0,0,4,0,0,4,6,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,501,        int i = ((rsize * 100) - decimalPos - sciexp % rsize) % rsize;,18,6,1,2,4,0,0,0,0,27,62,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,502,        q -= i;,4,0,0,0,0,0,0,0,0,5,7,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,503,        decimalPos += i;,4,0,0,0,0,0,0,0,0,5,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,506,        while ((p - q) < (mant.length * rsize)) {,22,5,0,3,7,0,0,0,0,29,41,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,507,            for (i = 0; i < rsize; i++) {,8,1,0,1,3,0,0,0,0,11,29,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,508,                striped[++p] = '0';,0,0,0,1,2,0,0,0,0,3,19,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,514,        for (i = mant.length - 1; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,14,40,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,515,            mant[i] = (striped[q]   - '0') * 1000 +,0,5,1,3,6,0,0,0,0,15,39,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,519,            q += 4;,0,0,0,0,0,0,0,0,0,0,7,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,523,        exp = (decimalPos+sciexp) / rsize;,8,2,0,1,2,0,0,0,0,11,34,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,525,        if (q < striped.length) {,6,1,0,1,3,0,0,0,0,7,25,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,527,            round((striped[q] - '0')*1000);,0,0,0,3,6,0,0,0,0,9,31,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,530,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,594,        if (field.getRadixDigits() != d.field.getRadixDigits()) {,6,2,1,3,7,0,10,0,0,32,57,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,601,        return new Dfp(d);,12,2,0,1,2,2,0,2,0,17,18,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,632,        return field;,2,0,0,0,0,1,0,0,0,2,13,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,639,        return field.getRadixDigits();,0,0,0,1,2,1,4,0,0,4,30,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,646,        return field.getZero();,0,0,0,1,2,1,4,0,0,4,23,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,666,        for (int i = mant.length - 1; i > 0; i--) {,10,2,0,1,3,0,0,0,0,13,43,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,667,            mant[i] = mant[i-1];,2,1,1,2,4,0,0,0,0,10,20,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,669,        mant[0] = 0;,0,0,1,1,2,0,0,0,0,3,12,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,670,        exp--;,0,0,0,0,0,0,0,0,0,0,6,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,671,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,678,        for (int i = 0; i < mant.length - 1; i++) {,0,0,0,1,3,0,0,0,0,4,43,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,679,            mant[i] = mant[i+1];,2,1,1,2,4,0,0,0,0,10,20,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,681,        mant[mant.length - 1] = 0;,0,0,0,1,2,0,0,0,0,3,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,682,        exp++;,2,0,0,0,0,0,0,0,0,3,6,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,683,    },0,0,0,0,1,0,4,0,0,4,1,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,694,        int lostdigit = 0;,0,0,0,0,0,0,0,0,0,0,18,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,695,        boolean inexact = false;,2,0,0,0,0,0,0,0,0,3,24,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,697,        int diff = exp - e;,0,0,0,0,0,0,0,0,0,0,19,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,699,        int adiff = diff;,4,0,0,0,0,0,0,0,0,4,17,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,700,        if (adiff < 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,701,            adiff = -adiff;,4,0,0,0,0,0,0,0,0,6,15,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,704,        if (diff == 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,705,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,708,        if (adiff > (mant.length + 1)) {,6,2,0,2,5,0,0,0,0,8,32,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,710,"            Arrays.fill(mant, 0);",10,0,0,1,2,3,6,0,0,20,21,1,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,711,            exp = e;,4,0,0,0,0,0,0,0,0,5,8,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,713,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,10,0,0,1,2,0,4,0,0,14,46,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,714,"            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",4,0,0,1,2,0,4,0,0,8,54,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,716,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,719,        for (int i = 0; i < adiff; i++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,720,            if (diff < 0) {,4,1,0,1,3,0,0,0,0,6,15,0,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,725,                if (lostdigit != 0) {,8,2,0,1,3,0,0,0,0,11,21,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,726,                    inexact = true;,2,0,0,0,0,0,0,0,0,4,15,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,729,                lostdigit = mant[0];,0,0,0,1,2,0,0,0,0,3,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,731,                shiftRight();,0,0,0,1,2,0,0,0,0,3,13,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,737,        if (inexact) {,8,0,0,1,3,0,0,0,0,9,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,738,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,2,0,0,1,2,3,0,0,0,5,46,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,739,"            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",4,0,0,1,2,0,4,0,0,8,54,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,742,        return lostdigit;,2,0,0,0,0,1,0,0,0,2,17,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,753,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,0,0,0,3,7,0,0,0,0,10,57,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,762,        if (isNaN() || x.isNaN()) {,0,1,1,3,7,0,6,0,0,13,27,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,768,"        return compare(this, x) < 0;",0,1,0,1,2,1,4,0,0,5,28,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,778,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,0,0,0,3,7,0,0,0,0,10,57,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,787,        if (isNaN() || x.isNaN()) {,0,1,0,3,7,0,6,0,0,7,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,793,"        return compare(this, x) > 0;",0,0,0,1,2,1,0,0,0,4,28,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,807,        return (nans == QNAN) || (nans == SNAN);,0,0,0,2,4,1,0,0,0,7,40,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,817,        if (other instanceof Dfp) {,0,0,0,1,3,0,0,0,0,4,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,818,            final Dfp x = (Dfp) other;,8,0,1,1,2,1,4,8,0,26,26,0,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,819,            if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {,4,2,1,5,11,0,12,0,0,29,81,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,823,"            return compare(this, x) == 0;",0,1,0,1,2,1,4,0,0,5,29,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,844,        if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {,0,0,0,5,11,0,0,0,0,16,81,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,848,        return greaterThan(x) || lessThan(x);,0,0,0,2,4,1,0,0,0,7,37,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,859,        if (a.mant[a.mant.length - 1] == 0 && b.mant[b.mant.length - 1] == 0 &&,0,0,0,2,5,0,0,0,0,7,71,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,861,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,864,        if (a.sign != b.sign) {,8,1,0,1,3,0,12,0,0,21,23,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,873,        if (a.nans == INFINITE && b.nans == FINITE) {,0,0,0,1,3,0,0,0,0,4,45,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,877,        if (a.nans == FINITE && b.nans == INFINITE) {,20,4,0,1,3,0,0,0,0,26,45,0,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,881,        if (a.nans == INFINITE && b.nans == INFINITE) {,0,0,0,1,3,0,0,0,0,4,47,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,886,        if (b.mant[b.mant.length-1] != 0 && a.mant[b.mant.length-1] != 0) {,0,0,0,3,7,0,0,0,0,10,67,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,887,            if (a.exp < b.exp) {,10,1,0,1,3,0,0,0,0,12,20,0,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,888,                return -a.sign;,4,0,0,0,0,1,0,0,0,5,15,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,891,            if (a.exp > b.exp) {,8,1,0,1,3,0,0,0,0,9,20,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,892,                return a.sign;,4,0,0,0,0,1,0,0,0,4,14,9,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,897,        for (int i = a.mant.length - 1; i >= 0; i--) {,12,2,0,1,3,0,0,0,0,15,46,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,898,            if (a.mant[i] > b.mant[i]) {,8,1,1,3,7,0,0,0,0,13,28,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,899,                return a.sign;,0,0,0,0,0,1,0,0,0,1,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,902,            if (a.mant[i] < b.mant[i]) {,0,0,0,3,7,0,0,0,0,10,28,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,903,                return -a.sign;,6,0,0,0,0,1,0,0,0,8,15,0,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,907,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1144,        extra = RADIX-extra;,6,1,0,0,0,0,0,0,0,8,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1145,        for (int i = 0; i < mant.length; i++) {,14,1,1,1,3,1,0,0,0,20,39,0,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1146,            mant[i] = RADIX-mant[i]-1;,0,0,0,2,4,0,0,0,0,6,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1149,        int rh = extra / RADIX;,0,0,0,0,0,0,0,0,0,0,23,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1150,        extra = extra - rh * RADIX;,8,2,0,0,0,0,0,0,0,11,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1151,        for (int i = 0; i < mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1152,            final int r = mant[i] + rh;,4,1,1,1,2,1,0,0,0,10,27,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1153,            rh = r / RADIX;,6,1,0,0,0,0,0,0,0,8,15,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1154,            mant[i] = r - rh * RADIX;,14,3,1,1,2,0,0,0,0,24,25,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1157,        return extra;,2,0,0,0,0,1,0,0,0,2,13,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1167,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,6,2,0,3,7,0,6,0,0,14,57,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1175,        if (nans != FINITE || x.nans != FINITE) {,10,3,0,1,3,0,0,0,0,13,41,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1206,        Dfp a = newInstance(this);,0,0,0,1,2,0,0,0,0,3,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1207,        Dfp b = newInstance(x);,2,0,0,1,2,0,4,2,0,8,23,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1210,        Dfp result = newInstance(getZero());,0,0,0,2,4,0,0,0,0,6,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1213,        final byte asign = a.sign;,0,0,0,0,0,0,0,0,0,0,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1214,        final byte bsign = b.sign;,0,0,0,0,0,0,0,0,0,0,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1216,        a.sign = 1;,0,0,0,0,0,0,0,0,0,0,11,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1217,        b.sign = 1;,0,0,0,0,0,0,0,0,0,0,11,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1220,        byte rsign = bsign;,4,0,0,0,0,0,0,0,0,4,19,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1221,"        if (compare(a, b) > 0) {",0,1,0,2,5,0,6,0,0,7,24,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1222,            rsign = asign;,6,1,0,0,0,0,0,0,0,8,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1228,        if (b.mant[mant.length-1] == 0) {,8,2,0,2,5,0,0,0,0,10,33,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1229,            b.exp = a.exp;,10,0,0,0,0,1,2,0,0,14,14,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1232,        if (a.mant[mant.length-1] == 0) {,0,0,0,2,5,0,0,0,0,7,33,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1237,        int aextradigit = 0;,0,0,0,0,0,0,0,0,0,0,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1238,        int bextradigit = 0;,12,2,0,0,0,0,0,0,0,15,20,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1239,        if (a.exp < b.exp) {,8,1,0,1,3,0,0,0,0,9,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1240,            aextradigit = a.align(b.exp);,6,0,0,1,2,0,4,0,0,11,29,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1242,            bextradigit = b.align(a.exp);,10,1,0,1,2,0,14,0,0,27,29,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1246,        if (asign != bsign) {,4,1,0,1,3,0,0,0,0,5,21,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1247,            if (asign == rsign) {,0,0,0,1,3,0,0,0,0,4,21,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1248,                bextradigit = b.complement(bextradigit);,0,0,0,1,2,0,0,0,0,3,40,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1250,                aextradigit = a.complement(aextradigit);,2,0,0,1,2,0,6,0,0,9,40,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1255,        int rh = 0; /* acts as a carry */,2,0,0,0,0,0,0,0,0,2,33,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1256,        for (int i = 0; i < mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1257,            final int r = a.mant[i]+b.mant[i]+rh;,12,2,1,2,4,1,2,0,0,21,37,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1258,            rh = r / RADIX;,8,2,0,0,0,0,2,0,0,13,15,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1259,            result.mant[i] = r - rh * RADIX;,14,3,1,1,2,0,0,0,0,20,32,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1261,        result.exp = a.exp;,8,0,0,0,0,0,6,0,0,15,19,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1262,        result.sign = rsign;,6,0,0,0,0,0,0,0,0,7,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1267,        if (rh != 0 && (asign == bsign)) {,6,3,0,2,5,0,0,0,0,9,34,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1268,            final int lostdigit = result.mant[0];,6,0,0,1,2,1,0,0,0,7,37,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1269,            result.shiftRight();,10,3,0,1,2,0,0,0,0,15,20,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1270,            result.mant[mant.length-1] = rh;,0,0,0,1,2,0,0,0,0,3,32,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1271,            final int excp = result.round(lostdigit);,0,0,0,1,2,0,0,0,0,3,41,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1272,            if (excp != 0) {,10,2,1,1,3,0,6,0,0,30,16,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1273,"                result = dotrap(excp, ADD_TRAP, x, result);",0,0,0,1,2,0,0,0,0,3,43,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1278,        for (int i = 0; i < mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1279,            if (result.mant[mant.length-1] != 0) {,8,2,0,2,5,0,0,0,0,10,38,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1280,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1282,            result.shiftLeft();,0,0,0,1,2,0,4,0,0,4,19,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1283,            if (i == 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1284,                result.mant[0] = aextradigit+bextradigit;,20,1,1,1,2,1,0,0,0,28,41,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1285,                aextradigit = 0;,2,0,0,0,0,0,0,0,0,3,16,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1286,                bextradigit = 0;,0,0,0,0,0,0,0,0,0,0,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1291,        if (result.mant[mant.length-1] == 0) {,8,2,0,2,5,0,0,0,0,10,38,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1292,            result.exp = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1294,            if (asign != bsign) {,4,1,0,1,3,0,0,0,0,5,21,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1296,                result.sign = 1;  // Per IEEE 854-1987 Section 6.3,4,0,0,0,0,0,0,0,0,5,50,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1301,        final int excp = result.round(aextradigit + bextradigit);,10,2,0,1,2,1,4,0,0,17,57,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1302,        if (excp != 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1303,"            result = dotrap(excp, ADD_TRAP, x, result);",2,0,0,1,2,0,10,0,0,13,43,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1306,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1313,        Dfp result = newInstance(this);,0,0,0,1,2,0,0,0,0,3,31,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1314,        result.sign = (byte) - result.sign;,0,0,0,1,2,0,0,0,0,3,35,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1315,        return result;,12,2,1,0,0,1,0,0,0,19,14,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1323,        return add(x.negate());,0,0,0,2,4,1,0,0,0,7,23,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1331,        boolean inc = false;,2,0,0,0,0,0,0,0,0,3,20,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1332,        switch (field.getRoundingMode()) {,0,0,0,2,5,0,0,0,0,7,34,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1350,                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 1);  // round half-even,12,1,1,3,6,0,4,0,0,26,72,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1351,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1367,        if (inc) {,22,9,0,1,3,0,0,0,0,32,10,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1369,            int rh = 1;,8,1,0,0,0,0,0,0,0,10,11,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1370,            for (int i = 0; i < mant.length; i++) {,8,1,0,1,3,0,0,0,0,11,39,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1371,                final int r = mant[i] + rh;,10,2,1,1,2,1,0,0,0,17,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1372,                rh = r / RADIX;,2,0,0,0,0,0,0,0,0,2,15,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1373,                mant[i] = r - rh * RADIX;,0,0,0,1,2,0,0,0,0,3,25,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1376,            if (rh != 0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1383,        if (exp < MIN_EXP) {,4,1,0,1,3,0,0,0,0,5,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1389,        if (exp > MAX_EXP) {,4,1,0,1,3,0,0,0,0,5,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1395,        if (n != 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1397,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,0,0,0,1,2,0,0,0,0,3,46,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1398,            return DfpField.FLAG_INEXACT;,0,0,0,0,0,1,0,0,0,1,29,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1401,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1412,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,0,0,0,3,7,0,0,0,0,10,57,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1419,        Dfp result = newInstance(getZero());,2,0,0,2,4,0,4,2,0,8,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1422,        if (nans != FINITE || x.nans != FINITE) {,0,0,0,1,3,0,0,0,0,4,41,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1459,        int[] product = new int[mant.length*2];  // Big enough to hold even the largest result,0,0,0,2,4,0,0,0,0,6,86,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1461,        for (int i = 0; i < mant.length; i++) {,10,1,0,1,3,0,0,2,0,14,39,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1462,            int rh = 0;  // acts as a carry,2,0,0,0,0,0,6,0,0,8,31,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1463,            for (int j=0; j<mant.length; j++) {,10,1,0,1,3,0,0,0,0,12,35,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1464,                int r = mant[i] * x.mant[j];    // multiply the 2 digits,12,3,1,2,4,1,0,0,0,22,56,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1465,                r = r + product[i+j] + rh;  // add to the product digit with carry in,10,2,1,1,2,0,0,0,0,15,69,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1467,                rh = r / RADIX;,8,1,0,0,0,0,0,0,0,10,15,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1468,                product[i+j] = r - rh * RADIX;,0,0,0,1,2,0,0,0,0,3,30,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1470,            product[i+mant.length] = rh;,8,1,1,1,2,0,6,0,0,18,28,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1474,"        int md = mant.length * 2 - 1;  // default, in case result is zero",20,6,0,0,0,0,0,0,0,27,65,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1475,        for (int i = mant.length * 2 - 1; i >= 0; i--) {,12,3,0,1,3,1,6,4,0,27,48,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1476,            if (product[i] != 0) {,0,1,1,2,5,0,0,0,0,5,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1477,                md = i;,0,0,0,0,0,0,0,0,0,0,7,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1478,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1483,        for (int i = 0; i < mant.length; i++) {,12,2,0,1,3,0,0,0,0,15,39,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1484,            result.mant[mant.length - i - 1] = product[md - i];,14,2,1,2,4,0,0,0,0,19,51,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1488,        result.exp = exp + x.exp + md - 2 * mant.length + 1;,0,0,0,0,0,0,0,0,0,0,52,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1489,        result.sign = (byte)((sign == x.sign)?1:-1);,36,11,1,3,6,0,0,0,0,54,44,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1491,        if (result.mant[mant.length-1] == 0) {,8,2,0,2,5,0,0,0,0,10,38,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1493,            result.exp = 0;,14,1,0,0,0,0,0,0,0,17,15,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1497,        if (md > (mant.length-1)) {,4,1,1,2,5,1,0,0,0,10,27,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1498,            excp = result.round(product[md-mant.length]);,8,1,1,2,4,0,4,0,0,16,45,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1503,        if (excp != 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1504,"            result = dotrap(excp, MULTIPLY_TRAP, x, result);",2,0,0,1,2,0,14,0,0,17,48,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1507,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1584,        int trial=0;    // trial quotient digit,2,0,0,0,0,0,0,0,0,2,39,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1587,        int md=0;       // most sig digit in result,0,0,0,0,0,0,0,0,0,0,43,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1591,        if (field.getRadixDigits() != divisor.field.getRadixDigits()) {,6,2,0,3,7,0,6,0,0,14,63,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1598,        Dfp result = newInstance(getZero());,6,2,0,2,4,0,4,2,0,14,36,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1601,        if (nans != FINITE || divisor.nans != FINITE) {,10,3,0,1,3,0,0,0,0,13,47,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1632,        if (divisor.mant[mant.length-1] == 0) {,10,2,0,2,5,0,0,0,0,14,39,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1641,        dividend = new int[mant.length+1];  // one extra digit needed,6,1,0,1,2,0,0,0,0,8,61,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1642,"        quotient = new int[mant.length+2];  // two extra digits needed 1 for overflow, 1 for rounding",18,4,1,1,2,0,0,0,0,27,93,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1643,        remainder = new int[mant.length+1]; // one extra digit needed,4,0,0,1,2,0,0,0,0,5,61,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1647,        dividend[mant.length] = 0;,4,0,1,1,2,0,0,0,0,7,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1648,        quotient[mant.length] = 0;,6,2,0,1,2,0,6,0,0,14,26,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1649,        quotient[mant.length+1] = 0;,0,0,0,1,2,0,0,0,0,3,28,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1650,        remainder[mant.length] = 0;,4,0,1,1,2,0,0,0,0,7,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1655,        for (int i = 0; i < mant.length; i++) {,18,2,0,1,3,0,0,0,0,22,39,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1656,            dividend[i] = mant[i];,2,0,1,2,4,0,4,0,0,16,22,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1657,            quotient[i] = 0;,0,0,1,1,2,0,0,0,0,5,16,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1658,            remainder[i] = 0;,0,0,0,1,2,0,0,0,0,3,17,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1662,        nsqd = 0;,4,0,0,0,0,0,2,2,0,9,9,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1663,        for (qd = mant.length+1; qd >= 0; qd--) {,0,0,0,1,3,0,0,0,0,4,41,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1667,            final int divMsb = dividend[mant.length]*RADIX+dividend[mant.length-1];,12,3,1,2,4,1,0,0,0,20,71,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1668,            int min = divMsb       / (divisor.mant[mant.length-1]+1);,12,3,0,2,4,0,0,0,0,15,57,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1669,            int max = (divMsb + 1) / divisor.mant[mant.length-1];,12,3,0,2,4,0,0,0,0,15,53,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1671,            trialgood = false;,2,0,0,0,0,0,0,0,0,4,18,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1672,            while (!trialgood) {,2,0,0,1,3,0,0,0,0,3,20,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1674,                trial = (min+max)/2;,10,3,0,1,2,0,0,0,0,14,20,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1677,                int rh = 0;,2,0,0,0,0,0,0,0,0,2,11,9,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1678,                for (int i = 0; i < mant.length + 1; i++) {,0,0,0,1,3,0,0,0,0,4,43,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1679,                    int dm = (i<mant.length)?divisor.mant[i]:0;,0,0,0,2,4,0,0,0,0,6,43,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1680,                    final int r = (dm * trial) + rh;,8,2,0,1,2,1,0,0,0,11,32,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1681,                    rh = r / RADIX;,12,1,0,0,0,0,0,0,0,14,15,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1682,                    remainder[i] = r - rh * RADIX;,0,0,0,1,2,0,0,0,0,3,30,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1686,                rh = 1;  // carry in to aid the subtraction,0,0,0,0,0,0,0,0,0,0,43,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1687,                for (int i = 0; i < mant.length + 1; i++) {,14,2,0,1,3,0,4,2,0,25,43,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1688,                    final int r = ((RADIX-1) - remainder[i]) + dividend[i] + rh;,10,5,1,4,8,1,0,0,0,33,60,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1689,                    rh = r / RADIX;,0,0,0,0,0,0,0,0,0,0,15,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1690,                    remainder[i] = r - rh * RADIX;,0,0,0,1,2,0,0,0,0,3,30,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1694,                if (rh == 0) {,2,1,0,1,3,0,0,0,0,3,14,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1696,                    max = trial-1;,4,1,0,0,0,0,0,0,0,6,14,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1697,                    continue;,2,0,0,0,0,0,0,0,0,2,9,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1701,                minadj = (remainder[mant.length] * RADIX)+remainder[mant.length-1];,0,0,0,3,6,0,0,0,0,9,67,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1702,                minadj = minadj / (divisor.mant[mant.length-1]+1);,0,0,0,2,4,0,0,0,0,6,50,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1704,                if (minadj >= 2) {,8,1,0,1,3,0,0,0,0,11,18,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1705,                    min = trial+minadj;  // update the minimum,0,0,0,0,0,0,0,0,0,0,42,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1706,                    continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1711,                trialgood = false;  // assume false,2,0,0,0,0,0,0,0,0,4,35,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1712,                for (int i = mant.length - 1; i >= 0; i--) {,14,2,0,1,3,0,4,0,0,22,44,0,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1713,                    if (divisor.mant[i] > remainder[i]) {,0,0,0,3,7,0,0,0,0,10,37,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1714,                        trialgood = true;,4,0,0,0,0,0,0,2,0,8,17,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1716,                    if (divisor.mant[i] < remainder[i]) {,4,1,1,3,7,0,0,0,0,11,37,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1717,                        break;,0,0,0,0,0,0,0,0,0,0,6,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1721,                if (remainder[mant.length] != 0) {,4,1,1,2,5,0,0,0,0,7,34,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1722,                    trialgood = false;,2,0,0,0,0,0,0,0,0,4,18,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1725,                if (trialgood == false) {,4,2,0,1,3,0,0,0,0,7,25,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1726,                    min = trial+1;,4,1,0,0,0,0,0,0,0,6,14,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1728,            },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1731,            quotient[qd] = trial;,0,0,0,1,2,0,0,0,0,3,21,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1732,            if (trial != 0 || nsqd != 0) {,4,3,0,1,3,0,0,0,0,7,30,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1733,                nsqd++;,0,0,0,0,0,0,0,0,0,0,7,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1736,            if (field.getRoundingMode() == DfpField.RoundingMode.ROUND_DOWN && nsqd == mant.length) {,0,0,0,2,5,0,0,0,0,7,89,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1741,            if (nsqd > mant.length) {,6,1,0,1,3,0,0,0,0,7,25,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1743,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1747,            dividend[0] = 0;,0,0,1,1,2,0,0,0,0,3,16,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1748,            for (int i = 0; i < mant.length; i++) {,16,2,0,1,3,0,0,0,0,20,39,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1749,                dividend[i + 1] = remainder[i];,0,0,0,2,4,0,0,0,0,6,31,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1754,        md = mant.length;  // default,8,1,0,0,0,0,0,0,0,10,29,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1755,        for (int i = mant.length + 1; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,44,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1756,            if (quotient[i] != 0) {,2,1,1,2,5,0,6,0,0,18,23,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1757,                md = i;,6,0,1,0,0,0,0,0,0,10,7,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1758,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1763,        for (int i=0; i<mant.length; i++) {,0,0,0,1,3,0,0,0,0,4,35,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1764,            result.mant[mant.length-i-1] = quotient[md-i];,14,2,1,2,4,0,0,0,0,19,46,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1768,        result.exp = exp - divisor.exp + md - mant.length;,16,3,0,0,0,0,0,0,0,20,50,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1769,        result.sign = (byte) ((sign == divisor.sign) ? 1 : -1);,14,1,0,3,6,0,0,0,0,17,55,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1771,"        if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero",8,2,0,2,5,0,0,0,0,10,76,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1772,            result.exp = 0;,4,0,0,0,0,0,0,0,0,5,15,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1775,        if (md > (mant.length-1)) {,0,0,0,2,5,0,0,0,0,7,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1776,            excp = result.round(quotient[md-mant.length]);,0,0,0,2,4,0,0,0,0,6,46,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1781,        if (excp != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1782,"            result = dotrap(excp, DIVIDE_TRAP, divisor, result);",10,0,0,1,2,1,16,6,0,34,52,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1785,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1796,        if (nans != FINITE) {,4,1,0,1,3,0,0,0,0,5,21,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1807,        if (divisor == 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1817,        if (divisor < 0 || divisor >= RADIX) {,6,3,0,1,3,0,0,0,0,9,38,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1825,        Dfp result = newInstance(this);,6,0,0,1,2,0,2,2,0,11,31,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1827,        int rl = 0;,2,0,0,0,0,0,0,0,0,2,11,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1828,        for (int i = mant.length-1; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,42,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1829,            final int r = rl*RADIX + result.mant[i];,0,0,0,1,2,0,0,0,0,3,40,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1830,            final int rh = r / divisor;,8,1,0,0,0,2,4,0,0,15,27,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1831,            rl = r - rh * divisor;,14,4,0,0,0,0,0,0,0,20,22,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1832,            result.mant[i] = rh;,6,0,1,1,2,0,4,0,0,14,20,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1835,        if (result.mant[mant.length-1] == 0) {,0,0,0,2,5,0,0,0,0,7,38,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1837,            result.shiftLeft();,0,0,0,1,2,0,4,0,0,4,19,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1838,            final int r = rl * RADIX;        // compute the next digit and put it in,8,2,0,0,0,1,0,0,0,11,72,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1839,            final int rh = r / divisor;,12,1,0,0,0,2,2,0,0,18,27,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1840,            rl = r - rh * divisor;,8,2,0,0,0,0,0,0,0,11,22,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1841,            result.mant[0] = rh;,2,0,0,1,2,0,0,0,0,2,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1844,        final int excp = result.round(rl * RADIX / divisor);  // do the rounding,8,2,0,1,2,1,4,0,0,15,72,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1845,        if (excp != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1846,"            result = dotrap(excp, DIVIDE_TRAP, result, result);",0,0,0,1,2,0,0,0,0,3,51,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1849,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1859,        if (nans == FINITE && mant[mant.length-1] == 0) {,10,4,1,2,5,0,0,0,0,16,49,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1864,        if (nans != FINITE) {,0,0,0,1,3,0,0,0,0,4,21,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1884,        if (sign == -1) {,22,4,1,1,3,0,4,0,0,35,17,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1895,        Dfp x = newInstance(this);,2,0,1,1,2,0,2,2,0,12,26,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1898,        if (x.exp < -1 || x.exp > 1) {,0,0,0,1,3,0,0,0,0,4,30,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1903,        switch (x.mant[mant.length-1] / 2000) {,12,2,0,2,5,0,0,0,0,15,39,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1905,                x.mant[mant.length-1] = x.mant[mant.length-1]/2+1;,0,0,0,2,4,0,0,0,0,6,50,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1906,                break;,2,1,0,0,0,0,4,0,0,7,6,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1914,                x.mant[mant.length-1] = 3000;,0,0,0,1,2,0,0,0,0,3,29,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1917,        Dfp dx = newInstance(x);,10,2,0,1,2,1,4,2,0,19,24,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1922,        Dfp px  = getZero();,2,0,0,1,2,0,2,2,0,6,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1923,        Dfp ppx = getZero();,0,0,0,1,2,0,0,0,0,3,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1924,        while (x.unequal(px)) {,4,0,0,2,5,0,6,0,0,11,23,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1925,            dx = newInstance(x);,2,0,0,1,2,0,4,0,0,7,20,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1926,            dx.sign = -1;,4,0,0,0,0,0,0,0,0,6,13,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1927,            dx = dx.add(this.divide(x));,0,0,0,2,4,0,0,0,0,6,28,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1928,            dx = dx.divide(2);,14,3,0,1,2,1,4,0,0,24,18,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1929,            ppx = px;,10,2,0,0,0,0,0,0,0,14,9,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1930,            px = x;,6,0,0,0,0,0,0,0,0,7,7,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1931,            x = x.add(dx);,2,0,0,1,2,0,6,0,0,9,14,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1933,            if (x.equals(ppx)) {,0,0,0,2,5,0,0,0,0,7,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1940,            if (dx.mant[mant.length-1] == 0) {,8,2,1,2,5,0,4,0,0,23,34,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1941,                break;,2,0,0,0,0,0,0,2,0,4,6,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1945,        return x;,4,1,0,0,0,1,0,0,0,5,9,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1954,        if (nans != FINITE) {,4,1,0,1,3,0,0,0,0,5,21,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1963,        if (exp > mant.length || exp < -1) {,2,0,0,1,3,0,4,4,0,10,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1967,        return dfp2string();,0,0,0,1,2,1,2,0,0,2,20,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2056,        char buffer[] = new char[mant.length*4 + 20];,8,2,0,2,4,0,6,0,0,17,45,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2057,        int p = 1;,2,0,0,0,0,0,0,0,0,2,10,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2059,        int e = exp;,4,0,0,0,0,0,0,0,0,4,12,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2060,        boolean pointInserted = false;,2,0,0,0,0,0,0,0,0,3,30,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2062,        buffer[0] = ' ';,0,0,1,1,2,0,0,0,0,4,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2064,        if (e <= 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2065,            buffer[p++] = '0';,2,0,1,1,2,0,0,0,0,7,18,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2066,            buffer[p++] = '.';,40,13,0,1,2,0,0,0,0,54,18,9,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2067,            pointInserted = true;,0,0,0,0,0,0,0,0,0,0,21,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2070,        while (e < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2078,        for (int i = mant.length - 1; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,44,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2079,            buffer[p++] = (char) ((mant[i] / 1000) + '0');,4,2,1,5,10,1,10,0,0,26,46,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2080,            buffer[p++] = (char) (((mant[i] / 100) % 10) + '0');,2,3,1,6,12,0,0,0,0,14,52,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2081,            buffer[p++] = (char) (((mant[i] / 10) % 10) + '0');,2,3,1,6,12,0,0,0,0,14,51,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2082,            buffer[p++] = (char) (((mant[i]) % 10) + '0');,0,0,0,6,12,0,0,0,0,18,46,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2083,            if (--e == 0) {,6,2,1,1,3,0,0,0,0,17,15,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2084,                buffer[p++] = '.';,2,0,1,1,2,0,0,0,0,7,18,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2085,                pointInserted = true;,0,0,0,0,0,0,0,0,0,0,21,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2089,        while (e > 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2097,        if (!pointInserted) {,4,0,0,1,3,1,2,0,0,8,21,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2103,        q = 1;,4,1,0,0,0,0,0,0,0,6,6,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2104,        while (buffer[q] == '0') {,10,5,1,2,5,0,0,0,0,19,26,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2105,            q++;,0,0,0,0,0,0,0,0,0,0,4,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2107,        if (buffer[q] == '.') {,0,1,1,2,5,0,0,0,0,6,23,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2108,            q--;,2,0,0,0,0,0,0,0,0,3,4,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2112,        while (buffer[p-1] == '0') {,0,0,0,2,5,0,0,0,0,7,28,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2113,            p--;,0,0,0,0,0,0,0,0,0,0,4,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2117,        if (sign < 0) {,4,1,0,1,3,0,8,0,0,14,15,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2121,"        return new String(buffer, q, p - q);",0,0,0,1,2,1,0,0,0,4,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2133,        Dfp def = result;,4,0,0,0,0,0,0,2,0,6,17,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2135,        switch (type) {,2,0,0,1,3,0,0,0,0,2,15,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2184,            default: def = result; break;,0,0,0,0,0,0,0,0,0,0,29,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2187,"        return trap(type, what, oper, def, result);",0,0,0,1,2,1,12,0,0,12,43,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2203,        return def;,2,0,0,0,0,1,0,0,0,2,11,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1000,            switch (rmode) {,6,1,1,1,3,0,0,0,0,12,16,3,0.03571,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,131,    public MersenneTwister(long seed) {,8,2,0,1,3,0,0,0,0,10,35,7,0.03571,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,132,        mt = new int[N];,2,0,1,1,2,0,0,0,0,5,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,133,        setSeed(seed);,2,0,0,1,2,0,4,2,0,8,14,3,0.03571,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,134,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,35,    public BitsStreamGenerator() {,2,0,0,1,3,1,0,0,0,3,30,2,0.03333,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,36,        nextGaussian = Double.NaN;,6,0,0,0,0,0,0,0,0,7,26,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,37,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,94,"    private static final int[] MAG01 = { 0x0, 0x9908b0df };",2,0,0,2,4,3,0,0,0,5,55,2,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,144,        long longMT = seed;,4,0,0,0,0,0,0,0,0,4,19,5,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,145,        mt[0]= (int) longMT;,2,0,1,2,4,0,0,0,0,5,20,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,146,        for (mti = 1; mti < N; ++mti) {,8,1,0,1,3,0,0,0,0,11,31,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,149,            longMT = (1812433253l * (longMT ^ (longMT >> 30)) + mti) & 0xffffffffL;,8,5,0,3,6,0,0,0,0,14,71,6,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,150,            mt[mti]= (int) longMT;,4,0,1,2,4,0,0,0,0,9,22,3,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,152,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,163,        if (seed == null) {,10,3,0,1,3,0,0,0,0,13,19,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,168,        setSeed(19650218);,0,0,0,1,2,0,2,0,0,2,18,5,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,169,        int i = 1;,2,0,0,0,0,0,0,0,0,2,10,5,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,170,        int j = 0;,6,0,0,0,0,0,0,0,0,7,10,3,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,172,"        for (int k = FastMath.max(N, seed.length); k != 0; k--) {",10,1,0,2,5,0,6,0,0,18,57,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,173,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,2,3,1,5,10,0,0,0,0,13,73,7,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,174,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,6,5,1,5,10,0,0,0,0,15,73,7,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,175,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1664525l)) + seed[j] + j; // non linear,10,5,1,5,10,0,0,0,0,19,76,7,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,176,            mt[i]   = (int) (l & 0xffffffffl);,6,2,1,3,6,0,0,0,0,13,34,3,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,177,            i++; j++;,4,0,0,0,0,0,0,0,0,6,9,6,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,178,            if (i >= N) {,0,0,0,1,3,0,0,0,0,4,13,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,179,                mt[0] = mt[N - 1];,0,0,0,2,4,0,0,0,0,6,18,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,180,                i = 1;,2,0,0,0,0,0,0,0,0,3,6,8,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,182,            if (j >= seed.length) {,6,1,0,1,3,0,0,0,0,7,23,6,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,183,                j = 0;,0,0,0,0,0,0,0,0,0,0,6,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,187,        for (int k = N - 1; k != 0; k--) {,0,0,0,1,3,0,0,0,0,4,34,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,188,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,0,0,0,5,10,0,0,0,0,15,73,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,189,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,6,5,1,5,10,0,0,0,0,15,73,7,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,190,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1566083941l)) - i; // non linear,10,5,0,4,8,0,0,0,0,15,69,7,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,191,            mt[i]   = (int) (l & 0xffffffffL);,2,1,1,3,6,0,0,0,0,8,34,6,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,192,            i++;,4,0,1,0,0,1,0,0,0,10,4,5,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,193,            if (i >= N) {,0,0,0,1,3,0,0,0,0,4,13,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,194,                mt[0] = mt[N - 1];,4,1,1,2,4,0,0,0,0,10,18,3,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,195,                i = 1;,2,0,0,0,0,0,0,0,0,3,6,8,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,199,        mt[0] = 0x80000000; // MSB is 1; assuring non-zero initial array,8,0,1,1,2,0,0,2,0,13,64,3,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,201,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,210,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",0,0,0,7,14,0,0,0,0,21,71,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,211,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3464,        return (a <= b) ? b : a;,8,1,0,1,2,1,0,0,0,9,24,5,0.00602,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,35,    private static final double EXP_INT_TABLE_A[] = new double[1500];,2,0,0,2,4,3,0,0,0,5,65,2,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,40,    private static final double EXP_INT_TABLE_B[] = new double[1500];,0,0,0,2,4,0,0,0,0,6,65,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,45,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,0,0,0,2,4,0,0,0,0,6,66,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,50,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,0,0,0,2,4,0,0,0,0,6,66,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,53,    private static final double FACT[] = new double[20];,2,0,0,2,4,3,0,0,0,5,52,2,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,56,    private static final double LN_MANT[][] = new double[1024][];,2,0,0,4,8,3,0,0,0,5,61,2,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,65,    private static final double LN_SPLIT_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,85,    private static final double LN_QUICK_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,98,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,51,2,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,108,    private static final double SINE_TABLE_A[] = new double[14];,10,1,0,2,4,3,0,0,0,15,60,1,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,111,    private static final double SINE_TABLE_B[] = new double[14];,2,0,0,2,4,3,0,0,0,5,60,2,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,114,    private static final double COSINE_TABLE_A[] = new double[14];,0,0,0,2,4,0,0,0,0,6,62,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,117,    private static final double COSINE_TABLE_B[] = new double[14];,6,2,0,2,4,0,2,0,0,10,62,5,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,120,    private static final double TANGENT_TABLE_A[] = new double[14];,0,0,0,2,4,0,0,0,0,6,63,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,123,    private static final double TANGENT_TABLE_B[] = new double[14];,0,0,0,2,4,0,0,0,0,6,63,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,126,    private static long RECIP_2PI[] = new long[] {,0,0,0,2,5,0,0,0,0,7,46,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,147,    private static long PI_O_4_BITS[] = new long[] {,0,0,0,2,5,0,0,0,0,7,48,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,155,"    private static final double EIGHTHES[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",4,1,1,2,4,4,0,0,0,12,127,1,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,158,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0,0,0,1,3,0,0,0,0,4,61,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,169,        FACT[0] = 1.0;,2,0,1,1,2,0,4,0,0,9,14,1,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,170,        for (i = 1; i < 20; i++) {,6,1,0,1,3,0,0,0,0,9,26,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,171,            FACT[i] = FACT[i-1] * i;,0,0,0,2,4,0,0,0,0,6,24,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,174,        double tmp[] = new double[2];,2,0,0,2,4,0,0,0,0,2,29,5,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,175,        double recip[] = new double[2];,6,1,0,2,4,0,0,0,0,7,31,7,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,178,        for (i = 0; i < 750; i++) {,8,1,0,1,3,0,4,0,0,16,27,1,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,179,"            expint(i, tmp);",4,0,0,1,2,0,0,0,0,5,15,12,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,180,            EXP_INT_TABLE_A[i+750] = tmp[0];,12,2,1,2,4,0,0,0,0,20,32,1,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,181,            EXP_INT_TABLE_B[i+750] = tmp[1];,6,1,1,2,4,0,0,0,0,13,32,1,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,183,            if (i != 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,185,"                splitReciprocal(tmp, recip);",2,1,0,1,2,0,6,0,0,9,28,1,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,186,                EXP_INT_TABLE_A[750-i] = recip[0];,8,3,1,2,4,0,0,0,0,17,34,1,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,187,                EXP_INT_TABLE_B[750-i] = recip[1];,2,1,1,2,4,0,0,0,0,8,34,8,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,192,        for (i = 0; i < 1025; i++) {,8,1,0,1,3,0,0,0,0,11,28,1,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,193,"            slowexp(i/1024.0, tmp);",0,0,0,1,2,0,0,0,0,3,23,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,194,            EXP_FRAC_TABLE_A[i] = tmp[0];,0,0,0,2,4,0,0,0,0,6,29,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,195,            EXP_FRAC_TABLE_B[i] = tmp[1];,2,1,1,2,4,0,0,0,0,10,29,1,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,199,        for (i = 0; i < 1024; i++) {,0,0,0,1,3,0,0,0,0,4,28,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,200,            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,0,0,0,4,8,0,0,0,0,12,79,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,201,            LN_MANT[i] = slowLog(d);,0,0,1,2,4,0,4,0,0,9,24,6,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,205,        buildSinCosTables();,2,2,0,1,2,0,2,0,0,6,20,1,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,206,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,911,        final double xs[] = new double[2];,6,1,0,2,4,0,0,0,0,8,34,8,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,912,        final double ys[] = new double[2];,4,0,0,2,4,2,2,0,0,8,34,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,913,        final double facts[] = new double[2];,2,0,0,2,4,1,0,0,0,3,37,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,914,        final double as[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,915,"        split(x, xs);",2,0,0,1,2,0,6,0,0,8,13,1,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,916,        ys[0] = ys[1] = 0.0;,0,0,1,2,4,0,0,0,0,6,20,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,918,        for (int i = 19; i >= 0; i--) {,6,1,0,1,3,0,0,0,0,8,31,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,919,"            splitMult(xs, ys, as);",0,0,0,1,2,0,0,0,0,3,22,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,920,            ys[0] = as[0];,10,1,0,2,4,0,0,0,0,13,14,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,921,            ys[1] = as[1];,2,1,0,2,4,0,0,0,0,3,14,8,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,923,"            split(FACT[i], as);",0,0,1,2,4,0,4,0,0,8,19,7,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,924,"            splitReciprocal(as, facts);",2,1,0,1,2,0,6,0,0,9,27,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,926,"            splitAdd(ys, facts, as);",0,0,0,1,2,0,0,0,0,3,24,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,927,            ys[0] = as[0];,0,0,0,2,4,0,0,0,0,6,14,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,928,            ys[1] = as[1];,0,0,0,2,4,0,0,0,0,6,14,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,931,        if (result != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,932,            result[0] = ys[0];,0,0,0,2,4,0,0,0,0,6,18,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,933,            result[1] = ys[1];,0,0,1,2,4,0,0,0,0,5,18,6,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,936,        return ys[0] + ys[1];,0,1,1,2,4,1,0,0,0,5,21,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,945,        if (d < 8e298 && d > -8e298) {,4,3,0,1,3,0,0,0,0,8,30,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,946,            final double a = d * 1073741824.0;,4,1,0,0,0,1,0,0,0,6,34,6,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,947,            split[0] = (d + a) - a;,4,1,1,2,4,0,0,0,0,8,23,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,948,            split[1] = d - split[0];,0,0,0,2,4,0,0,0,0,6,24,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,949,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,954,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,961,        final double c = a[0] + a[1];,4,1,0,2,4,0,12,0,0,17,29,9,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,962,        final double d = -(c - a[0] - a[1]);,8,1,1,3,6,1,0,0,0,16,36,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,964,        if (c < 8e298 && c > -8e298) {,4,3,0,1,3,0,0,0,0,8,30,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,965,            double z = c * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,28,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,966,            a[0] = (c + z) - z;,6,2,1,2,4,0,0,0,0,11,19,6,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,967,            a[1] = c - a[0] + d;,10,3,1,2,4,0,0,0,0,19,20,6,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,968,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,969,            double z = c * 9.31322574615478515625E-10;,4,1,0,0,0,0,0,0,0,5,42,7,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,970,            a[0] = (c + z - c) * 1073741824.0;,0,0,0,2,4,0,0,0,0,6,34,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,971,            a[1] = c - a[0] + d;,0,0,0,2,4,0,0,0,0,6,20,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,973,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,981,        ans[0] = a[0] * b[0];,4,0,0,3,6,0,0,0,0,4,21,5,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,982,        ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];,0,3,0,7,14,0,12,0,0,15,49,9,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,985,        resplit(ans);,0,0,0,1,2,0,4,0,0,4,13,5,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,986,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,994,        ans[0] = a[0] + b[0];,0,1,1,3,6,0,0,0,0,8,21,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,995,        ans[1] = a[1] + b[1];,0,0,0,3,6,0,0,0,0,9,21,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,997,        resplit(ans);,0,0,0,1,2,0,8,0,0,8,13,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,998,    },6,2,0,0,1,0,2,0,0,10,1,8,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1019,        final double b = 1.0/4194304.0;,2,1,0,0,0,1,0,0,0,4,31,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1020,        final double a = 1.0 - b;,0,0,0,0,0,0,0,0,0,0,25,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1022,        if (in[0] == 0.0) {,4,2,1,2,5,0,0,0,0,13,19,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1027,        result[0] = a / in[0];,4,2,1,2,4,0,0,0,0,11,22,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1028,        result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);,4,7,1,9,18,0,0,0,0,26,60,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1030,        if (result[1] != result[1]) { // can happen if result[1] is NAN,2,1,1,4,9,0,0,0,0,7,63,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1031,            result[1] = 0.0;,0,1,1,1,2,0,4,0,0,8,16,5,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1035,        resplit(result);,0,0,0,1,2,0,4,0,0,4,16,5,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1037,        for (int i = 0; i < 2; i++) {,6,1,0,1,3,0,0,0,0,8,29,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1039,            double err = 1.0 - result[0] * in[0] - result[0] * in[1] -,2,6,1,4,8,0,0,0,0,16,58,7,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1042,            err = err * (result[0] + result[1]);,10,3,1,3,6,0,0,0,0,18,36,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1044,            result[1] += err;,4,0,0,1,2,0,0,0,0,6,17,6,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1046,    },4,0,0,0,1,0,0,0,0,4,1,9,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1054,        final double xs[] = new double[2];,12,2,0,2,4,0,0,0,0,15,34,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1055,        final double ys[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1056,        final double zs[] = new double[2];,8,2,0,2,4,0,0,0,0,11,34,8,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1059,"        split(a[0], xs);",0,0,0,2,4,0,0,0,0,6,16,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1060,"        split(b[0], ys);",0,0,1,2,4,0,4,0,0,6,16,5,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1061,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,0,0,0,3,22,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1063,        result[0] = zs[0];,0,0,0,2,4,0,0,0,0,6,18,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1064,        result[1] = zs[1];,0,0,0,2,4,0,0,0,0,6,18,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1067,"        split(b[1], ys);",0,0,1,2,4,0,4,0,0,6,16,5,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1068,"        splitMult(xs, ys, zs);",6,0,0,1,2,0,8,0,0,14,22,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1070,        double tmp = result[0] + zs[0];,2,0,0,2,4,0,0,0,0,2,31,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1071,        result[1] = result[1] - (tmp - result[0] - zs[0]);,2,2,1,5,10,0,0,0,0,13,50,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1072,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1073,        tmp = result[0] + zs[1];,0,0,0,2,4,0,0,0,0,6,24,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1074,        result[1] = result[1] - (tmp - result[0] - zs[1]);,2,2,1,5,10,0,0,0,0,13,50,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1075,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1078,"        split(a[1], xs);",0,0,0,2,4,0,0,0,0,6,16,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1079,"        split(b[0], ys);",8,2,1,2,4,0,8,0,0,30,16,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1080,"        splitMult(xs, ys, zs);",6,2,0,1,2,0,8,0,0,18,22,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1082,        tmp = result[0] + zs[0];,2,1,1,2,4,0,0,0,0,8,24,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1083,        result[1] = result[1] - (tmp - result[0] - zs[0]);,0,0,0,5,10,0,0,0,0,15,50,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1084,        result[0] = tmp;,4,0,0,1,2,0,0,0,0,5,16,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1085,        tmp = result[0] + zs[1];,2,1,1,2,4,0,0,0,0,8,24,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1086,        result[1] = result[1] - (tmp - result[0] - zs[1]);,2,2,1,5,10,0,0,0,0,13,50,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1087,        result[0] = tmp;,6,4,0,1,2,0,4,0,0,15,16,6,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1090,"        split(a[1], xs);",2,0,1,2,4,0,8,0,0,12,16,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1091,"        split(b[1], ys);",0,0,0,2,4,0,0,0,0,6,16,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1092,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,0,0,0,3,22,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1094,        tmp = result[0] + zs[0];,2,1,1,2,4,0,0,0,0,8,24,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1095,        result[1] = result[1] - (tmp - result[0] - zs[0]);,2,2,1,5,10,0,0,0,0,13,50,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1096,        result[0] = tmp;,4,0,0,1,2,0,0,0,0,5,16,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1097,        tmp = result[0] + zs[1];,0,0,0,2,4,0,0,0,0,6,24,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1098,        result[1] = result[1] - (tmp - result[0] - zs[1]);,2,0,0,5,10,1,2,0,0,5,50,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1099,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1100,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1109,        final double xs[] = new double[2];,6,1,1,2,4,1,0,0,0,11,34,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1110,        final double as[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1111,        final double ys[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1120,        xs[0] = 2.718281828459045;,0,0,0,1,2,0,0,0,0,3,26,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1121,        xs[1] = 1.4456468917292502E-16;,0,0,1,1,2,0,0,0,0,3,31,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1123,"        split(1.0, ys);",0,0,0,1,2,0,0,0,0,3,15,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1125,        while (p > 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1126,            if ((p & 1) != 0) {,0,0,0,2,5,0,0,0,0,7,19,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1127,"                quadMult(ys, xs, as);",0,0,0,1,2,0,8,0,0,8,21,9,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1128,                ys[0] = as[0]; ys[1] = as[1];,0,0,0,4,8,0,0,0,0,12,29,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1131,"            quadMult(xs, xs, as);",6,1,0,1,2,0,8,0,0,16,21,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1132,            xs[0] = as[0]; xs[1] = as[1];,0,0,0,4,8,0,0,0,0,12,29,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1134,            p >>= 1;,4,1,0,0,0,0,0,0,0,6,8,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1137,        if (result != null) {,6,2,0,1,3,0,0,0,0,8,21,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1138,            result[0] = ys[0];,0,0,0,2,4,0,0,0,0,6,18,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1139,            result[1] = ys[1];,0,0,1,2,4,0,0,0,0,3,18,10,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1141,            resplit(result);,0,0,0,1,2,0,0,0,0,3,16,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1144,        return ys[0] + ys[1];,8,0,0,2,4,1,0,0,0,9,21,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1627,        double x[] = new double[2];,0,0,0,2,4,0,0,0,0,6,27,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1628,        double x2[] = new double[2];,0,0,0,2,4,0,0,0,0,6,28,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1629,        double y[] = new double[2];,0,0,0,2,4,0,0,0,0,6,27,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1630,        double a[] = new double[2];,0,0,0,2,4,0,0,0,0,6,27,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1632,"        split(xi, x);",0,0,0,1,2,0,0,0,0,3,13,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1635,        x[0] += 1.0;,8,2,1,1,2,1,0,0,0,16,12,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1636,        resplit(x);,0,0,0,1,2,0,0,0,0,3,11,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1637,"        splitReciprocal(x, a);",6,1,0,1,2,0,0,0,0,8,22,6,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1638,        x[0] -= 2.0;,0,0,1,1,2,0,0,0,0,3,12,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1639,        resplit(x);,0,0,0,1,2,0,4,0,0,4,11,5,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1640,"        splitMult(x, a, y);",8,2,0,1,2,0,8,0,0,19,19,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1641,        x[0] = y[0];,0,0,0,2,4,0,0,0,0,6,12,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1642,        x[1] = y[1];,0,0,0,2,4,0,0,0,0,6,12,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1645,"        splitMult(x, x, x2);",2,0,0,1,2,2,0,0,0,4,20,2,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1651,        y[0] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][0];,0,0,0,3,6,0,0,0,0,9,48,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1652,        y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];,4,0,0,3,6,0,2,0,0,6,48,7,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1654,        for (int i = LN_SPLIT_COEF.length-2; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,51,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1655,"            splitMult(y, x2, a);",0,0,0,1,2,0,8,0,0,8,20,7,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1656,            y[0] = a[0];,0,0,1,2,4,0,0,0,0,5,12,6,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1657,            y[1] = a[1];,0,0,0,2,4,0,0,0,0,6,12,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1658,"            splitAdd(y, LN_SPLIT_COEF[i], a);",0,0,1,2,4,0,6,0,0,10,33,7,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1659,            y[0] = a[0];,0,0,1,2,4,0,4,0,0,9,12,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1660,            y[1] = a[1];,0,0,1,2,4,0,0,0,0,5,12,6,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1663,"        splitMult(y, x, a);",0,0,0,1,2,0,8,0,0,8,19,5,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1664,        y[0] = a[0];,0,0,1,2,4,0,0,0,0,5,12,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1665,        y[1] = a[1];,0,0,1,2,4,0,0,0,0,5,12,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1667,        return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1677,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1678,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1679,        final double facts[] = new double[2];,0,0,0,2,4,0,0,0,0,6,37,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1680,        final double as[] = new double[2];,4,0,0,2,4,1,0,0,0,5,34,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1681,"        split(x, xs);",0,0,0,1,2,0,6,0,0,6,13,5,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1682,        ys[0] = ys[1] = 0.0;,0,0,1,2,4,0,0,0,0,6,20,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1684,        for (int i = 19; i >= 0; i--) {,6,1,0,1,3,0,0,0,0,8,31,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1685,"            splitMult(xs, ys, as);",4,1,1,1,2,0,8,0,0,18,22,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1686,            ys[0] = as[0]; ys[1] = as[1];,4,1,1,4,8,0,0,0,0,15,29,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1688,            if ( (i & 1) == 0) {,6,2,0,2,5,0,0,0,0,8,20,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1689,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1692,"            split(FACT[i], as);",0,0,0,2,4,0,0,0,0,6,19,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1693,"            splitReciprocal(as, facts);",2,0,0,1,2,1,0,0,0,3,27,2,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1695,            if ( (i & 2) != 0 ) {,0,0,0,2,5,0,0,0,0,7,21,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1696,                facts[0] = -facts[0];,0,0,1,2,4,0,0,0,0,6,21,8,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1697,                facts[1] = -facts[1];,0,0,0,2,4,0,0,0,0,6,21,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1700,"            splitAdd(ys, facts, as);",2,0,0,1,2,0,12,0,0,15,24,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1701,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,6,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1704,        if (result != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1705,            result[0] = ys[0];,4,0,0,2,4,0,0,0,0,5,18,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1706,            result[1] = ys[1];,2,0,0,2,4,0,0,0,0,3,18,6,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1709,        return ys[0] + ys[1];,0,0,0,2,4,1,0,0,0,7,21,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1720,        final double xs[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1721,        final double ys[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1722,        final double facts[] = new double[2];,2,0,0,2,4,1,0,0,0,3,37,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1723,        final double as[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1724,"        split(x, xs);",0,0,0,1,2,0,0,0,0,3,13,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1725,        ys[0] = ys[1] = 0.0;,8,1,1,2,4,1,0,0,0,17,20,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1727,        for (int i = 19; i >= 0; i--) {,10,2,0,1,3,1,0,0,0,14,31,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1728,"            splitMult(xs, ys, as);",0,0,0,1,2,0,0,0,0,3,22,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1729,            ys[0] = as[0]; ys[1] = as[1];,2,0,1,4,8,0,0,0,0,12,29,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1731,            if ( (i & 1) != 0) {,0,0,0,2,5,0,0,0,0,7,20,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1732,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1735,"            split(FACT[i], as);",4,3,1,2,4,0,4,0,0,15,19,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1736,"            splitReciprocal(as, facts);",0,0,0,1,2,0,6,0,0,6,27,7,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1738,            if ( (i & 2) != 0 ) {,0,0,0,2,5,0,0,0,0,7,21,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1739,                facts[0] = -facts[0];,6,2,1,2,4,1,0,0,0,19,21,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1740,                facts[1] = -facts[1];,10,4,1,2,4,2,8,2,0,32,21,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1743,"            splitAdd(ys, facts, as);",0,0,0,1,2,0,8,0,0,8,24,7,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1744,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,12,0,0,22,29,6,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1747,        if (result != null) {,4,1,0,1,3,1,0,0,0,6,21,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1748,            result[0] = ys[0];,0,0,1,2,4,0,0,0,0,5,18,6,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1749,            result[1] = ys[1];,4,0,1,2,4,0,0,0,0,7,18,10,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1752,        return ys[0] + ys[1];,2,0,0,2,4,2,0,0,0,3,21,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1758,        final double result[] = new double[2];,2,0,0,2,4,1,0,0,0,3,38,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1761,        for (int i = 0; i < 7; i++) {,6,1,0,1,3,0,0,0,0,8,29,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1762,            double x = i / 8.0;,0,0,0,0,0,0,0,0,0,0,19,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1764,"            slowSin(x, result);",0,0,0,1,2,0,6,0,0,6,19,7,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1765,            SINE_TABLE_A[i] = result[0];,0,0,0,2,4,0,0,0,0,6,28,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1766,            SINE_TABLE_B[i] = result[1];,2,0,1,2,4,0,0,0,0,9,28,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1768,"            slowCos(x, result);",0,0,0,1,2,0,0,0,0,3,19,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1769,            COSINE_TABLE_A[i] = result[0];,22,9,0,2,4,0,0,0,0,32,30,6,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1770,            COSINE_TABLE_B[i] = result[1];,6,0,1,2,4,1,0,0,0,18,30,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1774,        for (int i = 7; i < 14; i++) {,16,3,0,1,3,1,0,0,0,21,30,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1775,            double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,28,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1776,            double ys[] = new double[2];,0,0,0,2,4,0,0,0,0,6,28,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1777,            double as[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1778,            double bs[] = new double[2];,2,0,0,2,4,0,0,0,0,3,28,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1779,            double temps[] = new double[2];,2,0,0,2,4,0,0,0,0,2,31,7,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1781,            if ( (i & 1) == 0) {,2,2,0,2,5,0,0,0,0,4,20,6,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1783,                xs[0] = SINE_TABLE_A[i/2];,0,0,0,2,4,0,0,0,0,6,26,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1784,                xs[1] = SINE_TABLE_B[i/2];,4,1,1,2,4,0,0,0,0,11,26,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1785,                ys[0] = COSINE_TABLE_A[i/2];,6,2,1,2,4,0,4,2,0,19,28,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1786,                ys[1] = COSINE_TABLE_B[i/2];,2,1,1,2,4,0,0,0,0,8,28,8,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1789,"                splitMult(xs, ys, result);",0,0,0,1,2,0,8,0,0,8,26,9,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1790,                SINE_TABLE_A[i] = result[0] * 2.0;,0,0,0,2,4,0,0,0,0,6,34,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1791,                SINE_TABLE_B[i] = result[1] * 2.0;,0,1,1,2,4,0,0,0,0,8,34,8,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1794,"                splitMult(ys, ys, as);",6,1,0,1,2,1,0,0,0,8,22,6,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1795,"                splitMult(xs, xs, temps);",0,0,0,1,2,0,0,0,0,3,25,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1796,                temps[0] = -temps[0];,0,0,1,2,4,0,0,0,0,6,21,8,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1797,                temps[1] = -temps[1];,8,5,0,2,4,0,0,0,0,15,21,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1798,"                splitAdd(as, temps, result);",0,0,0,1,2,0,0,0,0,3,28,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1799,                COSINE_TABLE_A[i] = result[0];,0,0,1,2,4,0,0,0,0,7,30,8,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1800,                COSINE_TABLE_B[i] = result[1];,0,0,1,2,4,0,0,0,0,7,30,8,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1802,                xs[0] = SINE_TABLE_A[i/2];,4,2,0,2,4,0,0,0,0,7,26,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1803,                xs[1] = SINE_TABLE_B[i/2];,0,0,0,2,4,0,0,0,0,6,26,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1804,                ys[0] = COSINE_TABLE_A[i/2];,0,0,0,2,4,0,0,0,0,6,28,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1805,                ys[1] = COSINE_TABLE_B[i/2];,2,1,1,2,4,0,6,0,0,14,28,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1806,                as[0] = SINE_TABLE_A[i/2+1];,4,2,1,2,4,1,0,0,0,16,28,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1807,                as[1] = SINE_TABLE_B[i/2+1];,2,2,1,2,4,0,0,0,0,9,28,8,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1808,                bs[0] = COSINE_TABLE_A[i/2+1];,0,0,0,2,4,0,0,0,0,6,30,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1809,                bs[1] = COSINE_TABLE_B[i/2+1];,0,0,0,2,4,0,0,0,0,6,30,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1812,"                splitMult(xs, bs, temps);",2,0,0,1,2,0,12,0,0,15,25,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1813,"                splitMult(ys, as, result);",0,0,0,1,2,0,8,0,0,8,26,9,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1814,"                splitAdd(result, temps, result);",4,1,0,1,2,0,0,0,0,6,32,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1815,                SINE_TABLE_A[i] = result[0];,0,0,1,2,4,0,0,0,0,7,28,8,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1816,                SINE_TABLE_B[i] = result[1];,0,0,0,2,4,0,0,0,0,6,28,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1819,"                splitMult(ys, bs, result);",0,0,0,1,2,0,0,0,0,3,26,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1820,"                splitMult(xs, as, temps);",0,0,0,1,2,0,0,0,0,3,25,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1821,                temps[0] = -temps[0];,0,0,1,2,4,0,0,0,0,6,21,8,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1822,                temps[1] = -temps[1];,14,3,1,2,4,0,10,0,0,34,21,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1823,"                splitAdd(result, temps, result);",0,0,0,1,2,0,0,0,0,3,32,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1824,                COSINE_TABLE_A[i] = result[0];,0,0,1,2,4,0,0,0,0,7,30,8,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1825,                COSINE_TABLE_B[i] = result[1];,6,2,1,2,4,0,0,0,0,16,30,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1830,        for (int i = 0; i < 14; i++) {,0,0,0,1,3,0,0,0,0,4,30,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1831,            double xs[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1832,            double ys[] = new double[2];,0,0,0,2,4,0,0,0,0,6,28,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1833,            double as[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1835,            as[0] = COSINE_TABLE_A[i];,0,0,0,2,4,0,0,0,0,6,26,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1836,            as[1] = COSINE_TABLE_B[i];,0,0,0,2,4,0,0,0,0,6,26,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1838,"            splitReciprocal(as, ys);",0,0,0,1,2,0,6,0,0,6,24,7,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1840,            xs[0] = SINE_TABLE_A[i];,0,0,0,2,4,0,0,0,0,6,24,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1841,            xs[1] = SINE_TABLE_B[i];,8,0,1,2,4,0,0,0,0,19,24,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1843,"            splitMult(xs, ys, as);",4,0,0,1,2,0,8,0,0,13,22,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1845,            TANGENT_TABLE_A[i] = as[0];,0,0,0,2,4,0,0,0,0,6,27,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1846,            TANGENT_TABLE_B[i] = as[1];,10,1,0,2,4,0,0,0,0,12,27,6,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1849,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00071,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,259,        rMode = mode;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,260,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,281,        return ieeeFlags;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,295,        ieeeFlags = 0;,2,0,0,0,0,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,296,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,310,        ieeeFlags = flags & (FLAG_INVALID | FLAG_DIV_ZERO | FLAG_OVERFLOW | FLAG_UNDERFLOW | FLAG_INEXACT);,14,2,0,1,2,0,0,0,0,17,99,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,311,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,335,        return new Dfp(this);,0,0,0,1,2,1,0,2,0,2,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,343,"        return new Dfp(this, x);",2,0,0,1,2,1,0,2,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,351,"        return new Dfp(this, x);",2,0,0,1,2,1,0,2,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,359,"        return new Dfp(this, x);",0,0,0,1,2,1,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,367,"        return new Dfp(this, x);",0,0,0,1,2,1,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,375,        return new Dfp(d);,0,0,0,1,2,1,0,0,0,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,383,"        return new Dfp(this, s);",2,0,0,1,2,1,0,2,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,393,"        return new Dfp(this, sign, nans);",0,0,0,1,2,1,0,0,0,4,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,407,        return one;,4,1,0,0,0,1,0,2,0,8,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,414,        return two;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,421,        return sqr2;,16,2,0,0,0,1,0,0,0,21,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,428,        return sqr2Split.clone();,0,0,0,1,2,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,435,        return sqr2Reciprocal;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,442,        return sqr3;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,449,        return sqr3Reciprocal;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,456,        return pi;,2,0,0,0,0,1,0,0,0,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,463,        return piSplit.clone();,0,0,0,1,2,1,4,0,0,4,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,470,        return e;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,477,        return eSplit.clone();,0,0,0,1,2,1,4,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,484,        return ln2;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,491,        return ln2Split.clone();,0,0,0,1,2,1,4,0,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,498,        return ln5;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,505,        return ln5Split.clone();,0,0,0,1,2,1,6,0,0,6,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,512,        return ln10;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,26,public class DfpField implements Field<Dfp> {,2,0,1,0,1,1,0,0,0,7,45,8,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,181,    protected Dfp(final DfpField field) {,4,0,0,1,3,2,0,2,0,8,37,2,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,182,        mant = new int[field.getRadixDigits()];,12,3,0,2,4,0,4,0,0,20,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,183,        sign = 1;,2,0,0,0,0,0,0,0,0,3,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,184,        exp = 0;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,185,        nans = FINITE;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,186,        this.field = field;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,187,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,194,"        this(field, (long) x);",4,0,0,2,4,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,195,    },6,1,0,0,1,0,0,0,0,8,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,220,            isLongMin = true;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,221,            ++x;,2,0,0,0,0,0,0,0,0,3,4,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,243,            for (int i = 0; i < mant.length - 1; i++) {,10,2,0,1,3,0,0,0,0,13,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,244,                if (mant[i] != 0) {,0,0,0,2,5,0,0,0,0,7,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,245,                    mant[i]++;,0,0,0,1,2,0,0,0,0,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,246,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,256,"    protected Dfp(final DfpField field, double x) {",0,0,0,1,3,0,0,0,0,4,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,259,        mant = new int[field.getRadixDigits()];,4,1,0,2,4,0,0,0,0,5,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,260,        sign = 1;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,261,        exp = 0;,8,1,0,0,0,0,0,0,0,11,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,262,        nans = FINITE;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,263,        this.field = field;,4,0,0,0,0,0,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,265,        long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,266,        long mantissa = bits & 0x000fffffffffffffL;,0,0,0,0,0,0,0,0,0,0,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,267,        int exponent = (int) ((bits & 0x7ff0000000000000L) >> 52) - 1023;,4,3,0,3,6,0,6,0,0,13,65,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,269,        if (exponent == -1023) {,6,1,0,1,3,1,0,0,0,8,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,271,            if (x == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,272,                return;,2,1,0,0,0,1,0,0,0,3,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,275,            exponent++;,2,0,0,0,0,0,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,278,            while ( (mantissa & 0x0010000000000000L) == 0) {,8,2,0,2,5,0,0,0,0,11,48,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,279,                exponent--;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,280,                mantissa <<= 1;,2,0,0,0,0,0,0,0,0,3,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,282,            mantissa &= 0x000fffffffffffffL;,2,0,0,0,0,0,0,0,0,3,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,285,        if (exponent == 1024) {,0,0,0,1,3,0,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,287,            if (x != x) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,288,                sign = (byte) 1;,0,0,0,1,2,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,289,                nans = QNAN;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,290,            } else if (x < 0) {,0,0,0,1,4,0,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,291,                sign = (byte) -1;,4,0,1,1,2,1,0,0,0,11,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,292,                nans = INFINITE;,10,0,0,0,0,0,0,0,0,12,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,294,                sign = (byte) 1;,0,0,0,1,2,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,295,                nans = INFINITE;,4,0,0,0,0,0,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,297,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,300,"        Dfp xdfp = new Dfp(field, mantissa);",0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,301,"        xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne());  // Divide by 2^52, then add one",4,0,0,4,8,0,10,2,0,17,107,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,302,"        xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent));",4,0,0,3,6,0,14,0,0,20,60,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,304,        if ((bits & 0x8000000000000000L) != 0) {,2,2,0,2,5,0,0,0,0,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,305,            xdfp = xdfp.negate();,0,0,0,1,2,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,308,"        System.arraycopy(xdfp.mant, 0, mant, 0, mant.length);",6,1,0,1,2,0,0,0,0,7,53,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,309,        sign = xdfp.sign;,6,0,0,0,0,0,0,0,0,7,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,310,        exp  = xdfp.exp;,18,3,1,0,0,0,4,2,0,31,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,311,        nans = xdfp.nans;,10,0,0,0,0,0,0,0,0,12,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,313,    },4,1,1,0,1,0,0,0,0,10,1,10,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,346,            sign = (byte) 1;,0,0,0,1,2,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,347,            nans = INFINITE;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,348,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,352,            sign = (byte) -1;,0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,353,            nans = INFINITE;,4,0,0,0,0,0,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,354,            return;,6,1,0,0,0,1,0,0,0,7,7,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,358,            sign = (byte) 1;,2,0,0,1,2,0,0,0,0,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,359,            nans = QNAN;,20,4,0,0,0,0,0,0,0,25,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,360,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,373,"            fpdecimal = s.substring(0, p);",0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,374,            String fpexp = s.substring(p+1);,8,1,0,1,2,0,12,2,0,23,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,375,            boolean negative = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,377,            for (int i=0; i<fpexp.length(); i++),0,0,0,2,4,0,0,0,0,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,379,                if (fpexp.charAt(i) == '-'),4,1,0,2,4,0,6,0,0,13,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,381,                    negative = true;,2,0,0,0,0,0,0,0,0,4,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,382,                    continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,384,                if (fpexp.charAt(i) >= '0' && fpexp.charAt(i) <= '9'),0,3,0,3,6,0,12,0,0,17,53,8,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,385,                    sciexp = sciexp * 10 + fpexp.charAt(i) - '0';,8,1,0,1,2,0,0,2,0,12,45,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,388,            if (negative) {,2,0,0,1,3,1,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,389,                sciexp = -sciexp;,16,6,0,0,0,0,0,0,0,23,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,391,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,398,            sign = -1;,2,0,0,0,0,0,0,0,0,4,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,422,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,451,                p++;,2,0,0,0,0,0,0,0,0,3,4,8,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,452,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,467,                    break;,4,0,0,0,0,0,0,0,0,4,6,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,479,            decimalPos = 0;,4,1,1,0,0,0,0,0,0,10,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,484,            decimalPos = q-offset;,6,1,0,0,0,0,0,0,0,8,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,496,            trailingZeros++;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,497,            p--;,2,0,0,0,0,0,0,0,0,3,4,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,538,"    protected Dfp(final DfpField field, final byte sign, final byte nans) {",4,1,0,1,3,0,0,0,0,6,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,539,        this.field = field;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,540,        this.mant    = new int[field.getRadixDigits()];,2,0,0,2,4,0,4,0,0,7,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,541,        this.sign    = sign;,4,0,0,0,0,0,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,542,        this.exp     = 0;,2,0,0,0,0,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,543,        this.nans    = nans;,10,1,0,0,0,0,0,0,0,13,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,544,    },2,0,0,0,1,3,0,0,0,5,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,551,        return new Dfp(getField());,0,0,0,2,4,1,2,2,0,4,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,559,"        return new Dfp(getField(), x);",4,1,0,2,4,1,2,2,0,9,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,567,"        return new Dfp(getField(), x);",6,2,0,2,4,1,0,0,0,8,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,575,"        return new Dfp(getField(), x);",8,1,0,2,4,1,2,2,0,13,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,583,"        return new Dfp(getField(), x);",6,0,0,2,4,1,2,2,0,10,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,595,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,14,1,1,1,2,0,4,0,0,28,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,596,            final Dfp result = newInstance(getZero());,0,0,0,2,4,0,0,0,0,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,597,            result.nans = QNAN;,6,0,0,0,0,0,0,0,0,7,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,598,"            return dotrap(DfpField.FLAG_INVALID, NEW_INSTANCE_TRAP, d, result);",10,1,0,1,2,1,8,0,0,20,67,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,611,"        return new Dfp(field, s);",22,2,0,1,2,1,0,2,0,28,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,621,"        return field.newDfp(sig, code);",14,4,1,1,2,2,10,0,0,31,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,653,        return field.getOne();,2,0,0,1,2,1,4,0,0,6,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,660,        return field.getTwo();,6,2,0,1,2,1,4,0,0,12,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,733,                shiftLeft();,4,3,0,1,2,0,2,0,0,10,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,754,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,12,2,0,1,2,1,0,0,0,15,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,755,            final Dfp result = newInstance(getZero());,2,0,0,2,4,1,4,2,0,9,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,756,            result.nans = QNAN;,6,0,0,0,0,1,0,4,0,11,19,2,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,757,"            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, x, result);",6,2,0,1,2,0,0,0,0,8,57,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,758,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,763,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,6,1,0,1,2,0,0,0,0,7,46,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,764,"            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, x, newInstance(getZero()));",10,1,0,3,6,0,10,0,0,21,73,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,765,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,779,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,8,0,0,1,2,0,4,0,0,13,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,780,            final Dfp result = newInstance(getZero());,2,0,0,2,4,1,4,2,0,9,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,781,            result.nans = QNAN;,6,0,0,0,0,0,0,0,0,7,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,782,"            dotrap(DfpField.FLAG_INVALID, GREATER_THAN_TRAP, x, result);",4,0,0,1,2,0,8,0,0,12,60,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,783,            return false;,6,2,0,0,0,1,0,0,0,10,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,788,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0,0,0,1,2,0,0,0,0,3,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,789,"            dotrap(DfpField.FLAG_INVALID, GREATER_THAN_TRAP, x, newInstance(getZero()));",8,1,1,3,6,0,10,0,0,23,76,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,790,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,800,        return nans == INFINITE;,6,1,0,0,0,2,2,0,0,10,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,820,                return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,826,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,836,        return 17 + (sign << 8) + (nans << 16) + exp + Arrays.hashCode(mant);,0,0,0,3,6,1,0,0,0,10,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,845,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,865,            if (a.sign == -1) {,4,1,1,1,3,0,0,0,0,8,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,866,                return -1;,0,0,0,0,0,1,0,0,0,1,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,868,                return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,874,            return a.sign;,4,0,0,0,0,1,0,0,0,4,14,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,878,            return -b.sign;,4,0,0,0,0,1,0,0,0,5,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,882,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,917,        return trunc(DfpField.RoundingMode.ROUND_HALF_EVEN);,0,0,0,1,2,1,0,0,0,4,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,925,        return trunc(DfpField.RoundingMode.ROUND_FLOOR);,14,2,0,1,2,1,2,0,0,18,48,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,933,        return trunc(DfpField.RoundingMode.ROUND_CEIL);,0,0,0,1,2,1,0,0,0,4,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,942,        final Dfp result = this.subtract(this.divide(d).rint().multiply(d));,2,0,0,4,8,1,12,2,0,17,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,945,        if (result.mant[mant.length-1] == 0) {,16,4,0,2,5,0,0,0,0,20,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,946,            result.sign = sign;,6,0,0,0,0,0,0,0,0,7,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,949,        return result;,4,0,0,0,0,2,0,0,0,5,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,958,        boolean changed = false;,2,0,0,0,0,0,0,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,960,        if (isNaN()) {,0,0,0,2,5,0,0,0,0,7,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,961,            return newInstance(this);,0,0,0,1,2,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,964,        if (nans == INFINITE) {,4,1,0,1,3,0,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,965,            return newInstance(this);,0,0,0,1,2,1,2,0,0,2,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,968,        if (mant[mant.length-1] == 0) {,0,0,0,2,5,0,0,0,0,7,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,970,            return newInstance(this);,0,0,0,1,2,1,2,0,0,2,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,975,        if (exp < 0) {,6,0,0,1,3,1,0,0,0,7,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,976,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,8,1,0,1,2,0,4,0,0,14,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,977,            Dfp result = newInstance(getZero());,2,0,0,2,4,0,4,2,0,8,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,978,"            result = dotrap(DfpField.FLAG_INEXACT, TRUNC_TRAP, this, result);",16,3,0,1,2,0,6,0,0,28,65,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,979,            return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,986,        if (exp >= mant.length) {,6,1,0,1,3,0,0,0,0,7,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,987,            return newInstance(this);,0,0,0,1,2,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,993,        Dfp result = newInstance(this);,4,0,0,1,2,0,2,2,0,8,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,994,        for (int i = 0; i < mant.length-result.exp; i++) {,0,0,0,1,3,0,0,0,0,4,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,995,            changed |= result.mant[i] != 0;,6,1,1,1,2,0,0,0,0,10,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,996,            result.mant[i] = 0;,6,0,0,1,2,0,0,0,0,6,19,11,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,999,        if (changed) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1000,            switch (rmode) {,2,0,0,1,3,0,4,0,0,6,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1002,                    if (result.sign == -1) {,4,1,0,1,3,0,0,0,0,6,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1004,                        result = result.add(newInstance(-1));,6,0,1,2,4,0,10,4,0,27,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1009,                    if (result.sign == 1) {,6,1,0,1,3,0,0,0,0,8,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1011,                        result = result.add(getOne());,2,0,0,2,4,0,6,0,0,9,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1017,"                    final Dfp half = newInstance(""0.5"");",8,2,0,1,2,1,2,2,0,16,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1018,                    Dfp a = subtract(result);  // difference between this and result,0,0,0,1,2,0,0,0,0,3,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1019,                    a.sign = 1;            // force positive (take abs),8,0,0,1,2,0,0,0,0,11,51,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1020,                    if (a.greaterThan(half)) {,8,1,0,2,5,0,6,0,0,17,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1021,                        a = newInstance(getOne());,4,1,0,2,4,0,4,0,0,10,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1022,                        a.sign = sign;,6,0,0,0,0,0,0,0,0,7,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1023,                        result = result.add(a);,2,0,0,1,2,0,6,0,0,9,23,9,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1027,                    if (a.equals(half) && result.exp > 0 && (result.mant[mant.length-result.exp]&1) != 0) {,16,6,0,4,9,0,6,0,0,28,87,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1028,                        a = newInstance(getOne());,0,0,0,2,4,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1029,                        a.sign = sign;,14,3,0,0,0,1,0,0,0,19,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1030,                        result = result.add(a);,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1035,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);  // signal inexact,4,0,0,1,2,0,4,0,0,8,65,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1036,"            result = dotrap(DfpField.FLAG_INEXACT, TRUNC_TRAP, this, result);",28,9,0,1,2,0,6,0,0,45,65,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1037,            return result;,4,2,0,0,0,1,0,0,0,6,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1040,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1049,        int result = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1051,        rounded = rint();,2,0,0,1,2,0,2,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1053,        if (rounded.greaterThan(newInstance(2147483647))) {,0,0,0,3,7,0,6,0,0,6,51,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1054,            return 2147483647;,6,1,0,0,0,2,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1057,        if (rounded.lessThan(newInstance(-2147483648))) {,0,0,0,3,7,0,6,0,0,6,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1058,            return -2147483648;,0,0,0,0,0,1,0,0,0,1,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1061,        for (int i = mant.length - 1; i >= mant.length - rounded.exp; i--) {,0,0,0,1,3,0,0,0,0,4,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1062,            result = result * RADIX + rounded.mant[i];,0,0,0,1,2,0,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1065,        if (rounded.sign == -1) {,12,3,0,1,3,0,0,0,0,17,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1066,            result = -result;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1069,        return result;,6,3,0,0,0,1,0,0,0,9,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1078,        return exp - 1;,4,1,0,0,0,1,0,0,0,5,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1086,        Dfp d = newInstance(getOne());,2,0,0,2,4,0,4,2,0,8,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1087,        d.exp = e + 1;,8,2,0,0,0,0,6,0,0,16,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1088,        return d;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1095,        if (mant[mant.length-1] > 1000) {,4,2,1,2,5,0,0,0,0,8,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1096,            return exp * 4 - 1;,2,2,0,0,0,1,0,0,0,4,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1098,        if (mant[mant.length-1] > 100) {,4,2,1,2,5,0,0,0,0,8,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1099,            return exp * 4 - 2;,0,0,0,0,0,1,0,0,0,1,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1101,        if (mant[mant.length-1] > 10) {,6,3,1,2,5,0,10,0,0,21,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1102,            return exp * 4 - 3;,0,0,0,0,0,1,0,0,0,1,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1104,        return exp * 4 - 4;,6,2,0,0,0,1,0,0,0,9,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1112,        Dfp d = newInstance(getOne());,22,5,1,2,4,1,4,2,0,40,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1114,        if (e >= 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1115,            d.exp = e / 4 + 1;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1117,            d.exp = (e + 1) / 4;,14,4,0,1,2,0,0,0,0,20,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1120,        switch ((e % 4 + 4) % 4) {,2,3,0,2,5,0,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1122,                break;,6,0,0,0,0,0,0,2,0,9,6,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1124,                d = d.multiply(10);,0,0,0,1,2,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1125,                break;,6,1,0,0,0,0,0,0,0,7,6,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1127,                d = d.multiply(100);,4,0,0,1,2,1,10,0,0,16,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1128,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1130,                d = d.multiply(1000);,2,0,0,1,2,0,4,0,0,7,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1133,        return d;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1168,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,4,0,0,1,2,0,4,0,0,8,46,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1169,            final Dfp result = newInstance(getZero());,0,0,0,2,4,0,0,0,0,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1170,            result.nans = QNAN;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1171,"            return dotrap(DfpField.FLAG_INVALID, ADD_TRAP, x, result);",6,0,0,1,2,1,8,2,0,17,58,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1176,            if (isNaN()) {,2,1,0,2,5,0,2,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1177,                return this;,10,1,0,0,0,1,0,2,0,13,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1180,            if (x.isNaN()) {,0,0,0,2,5,0,0,0,0,7,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1181,                return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1184,            if (nans == INFINITE && x.nans == FINITE) {,12,4,1,1,3,0,0,0,0,19,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1185,                return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1188,            if (x.nans == INFINITE && nans == FINITE) {,10,3,0,1,3,0,0,0,0,13,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1189,                return x;,2,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1192,            if (x.nans == INFINITE && nans == INFINITE && sign == x.sign) {,16,5,0,1,3,0,8,0,0,29,63,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1193,                return x;,2,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1196,            if (x.nans == INFINITE && nans == INFINITE && sign != x.sign) {,0,0,0,1,3,0,0,0,0,4,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1197,                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,4,0,0,1,2,0,0,0,0,4,46,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1198,                Dfp result = newInstance(getZero());,0,0,0,2,4,0,0,0,0,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1199,                result.nans = QNAN;,4,2,0,0,0,0,0,0,0,7,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1200,"                result = dotrap(DfpField.FLAG_INVALID, ADD_TRAP, x, result);",0,0,0,1,2,0,0,0,0,3,60,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1201,                return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1233,            a.exp = b.exp;,8,0,0,0,0,0,0,0,0,9,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1334,                inc = false;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1335,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1338,                inc = n != 0;       // round up if n!=0,14,3,0,0,0,0,0,0,0,19,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1339,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1342,                inc = n >= 5000;  // round half up,4,1,0,0,0,0,0,0,0,6,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1343,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1346,                inc = n > 5000;  // round half down,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1347,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1354,                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 0);  // round half-odd,0,0,0,3,6,0,0,0,0,9,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1355,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1358,                inc = sign == 1 && n != 0;  // round ceil,6,3,0,0,0,0,0,0,0,10,41,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1359,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1363,                inc = sign == -1 && n != 0;  // round floor,6,1,0,0,0,0,0,0,0,8,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1377,                shiftRight();,0,0,0,1,2,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1378,                mant[mant.length-1] = rh;,0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1385,            field.setIEEEFlagsBits(DfpField.FLAG_UNDERFLOW);,4,0,0,1,2,0,4,0,0,8,48,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1386,            return DfpField.FLAG_UNDERFLOW;,4,0,0,0,0,1,0,0,0,4,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1391,            field.setIEEEFlagsBits(DfpField.FLAG_OVERFLOW);,0,0,0,1,2,0,0,0,0,3,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1392,            return DfpField.FLAG_OVERFLOW;,4,0,0,0,0,1,0,0,0,4,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1413,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0,0,0,1,2,0,0,0,0,3,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1414,            final Dfp result = newInstance(getZero());,2,0,0,2,4,1,4,2,0,9,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1415,            result.nans = QNAN;,10,3,0,0,0,0,0,0,0,15,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1416,"            return dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result);",0,0,0,1,2,1,0,0,0,4,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1423,            if (isNaN()) {,0,0,0,2,5,0,0,0,0,7,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1424,                return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1427,            if (x.isNaN()) {,6,1,0,2,5,0,4,0,0,12,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1428,                return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1431,            if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) {,0,0,0,2,5,0,0,0,0,7,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1432,                result = newInstance(this);,8,1,0,1,2,0,2,0,0,13,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1433,                result.sign = (byte) (sign * x.sign);,10,1,0,2,4,0,0,0,0,12,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1434,                return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1437,            if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) {,14,6,1,2,5,0,0,0,0,22,71,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1438,                result = newInstance(x);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1439,                result.sign = (byte) (sign * x.sign);,10,1,0,2,4,0,0,0,0,12,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1440,                return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1443,            if (x.nans == INFINITE && nans == INFINITE) {,0,0,0,1,3,0,0,0,0,4,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1444,                result = newInstance(this);,4,0,0,1,2,0,6,0,0,12,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1445,                result.sign = (byte) (sign * x.sign);,0,0,0,2,4,0,0,0,0,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1446,                return result;,6,4,0,0,0,1,0,0,0,10,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1449,            if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) ||,16,8,1,2,5,0,4,0,0,30,74,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1451,                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0,0,0,1,2,0,0,0,0,3,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1452,                result = newInstance(getZero());,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1453,                result.nans = QNAN;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1454,"                result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result);",6,0,0,1,2,0,8,0,0,15,65,8,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1455,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1500,            excp = result.round(0); // has no effect except to check status,0,0,0,1,2,0,0,0,0,3,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1517,        Dfp result = newInstance(this);,0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1520,        if (nans != FINITE) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1521,            if (isNaN()) {,6,1,0,2,5,0,0,0,0,8,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1522,                return this;,6,1,0,0,0,2,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1525,            if (nans == INFINITE && x != 0) {,6,3,0,1,3,0,0,0,0,9,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1526,                result = newInstance(this);,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1527,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1530,            if (nans == INFINITE && x == 0) {,6,3,0,1,3,0,0,0,0,9,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1531,                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0,0,0,1,2,0,0,0,0,3,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1532,                result = newInstance(getZero());,2,0,0,2,4,0,4,0,0,7,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1533,                result.nans = QNAN;,14,2,0,0,0,0,0,0,0,17,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1534,"                result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result);",0,0,0,3,6,0,0,0,0,9,86,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1535,                return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1540,        if (x < 0 || x >= RADIX) {,8,3,0,1,3,0,0,0,0,11,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1541,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,4,0,0,1,2,0,4,0,0,8,46,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1542,            result = newInstance(getZero());,8,4,0,2,4,0,22,0,0,35,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1543,            result.nans = QNAN;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1544,"            result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result);",6,0,0,1,2,0,8,0,0,15,70,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1545,            return result;,2,0,0,0,0,1,0,0,0,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1548,        int rh = 0;,6,0,0,0,0,0,0,0,0,7,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1549,        for (int i = 0; i < mant.length; i++) {,12,2,0,1,3,0,0,2,0,18,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1550,            final int r = mant[i] * x + rh;,6,2,1,1,2,1,0,0,0,13,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1551,            rh = r / RADIX;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1552,            result.mant[i] = r - rh * RADIX;,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1555,        int lostdigit = 0;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1556,        if (rh != 0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1557,            lostdigit = result.mant[0];,8,0,0,1,2,0,0,0,0,10,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1558,            result.shiftRight();,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1559,            result.mant[mant.length-1] = rh;,10,1,0,1,2,0,0,0,0,12,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1562,"        if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero",4,1,0,2,5,0,0,0,0,5,76,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1563,            result.exp = 0;,6,1,0,0,0,0,0,0,0,8,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1566,        final int excp = result.round(lostdigit);,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1567,        if (excp != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1568,"            result = dotrap(excp, MULTIPLY_TRAP, result, result);",4,0,0,1,2,0,0,0,0,5,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1571,        return result;,26,9,0,0,0,1,0,0,0,37,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1592,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0,0,0,1,2,0,0,0,0,3,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1593,            final Dfp result = newInstance(getZero());,2,0,0,2,4,1,4,2,0,9,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1594,            result.nans = QNAN;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1595,"            return dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, divisor, result);",4,0,0,1,2,1,8,0,0,12,67,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1602,            if (isNaN()) {,0,0,0,2,5,0,0,0,0,7,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1603,                return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1606,            if (divisor.isNaN()) {,0,0,0,2,5,0,0,0,0,7,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1607,                return divisor;,2,0,0,0,0,1,0,0,0,2,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1610,            if (nans == INFINITE && divisor.nans == FINITE) {,0,0,0,1,3,0,0,0,0,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1611,                result = newInstance(this);,2,0,0,1,2,0,2,0,0,5,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1612,                result.sign = (byte) (sign * divisor.sign);,0,0,0,2,4,0,8,0,0,8,43,11,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1613,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1616,            if (divisor.nans == INFINITE && nans == FINITE) {,24,6,0,1,3,0,0,0,0,34,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1617,                result = newInstance(getZero());,2,0,0,2,4,1,6,0,0,9,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1618,                result.sign = (byte) (sign * divisor.sign);,0,0,0,2,4,0,0,0,0,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1619,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1622,            if (divisor.nans == INFINITE && nans == INFINITE) {,12,3,0,1,3,0,6,0,0,24,51,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1623,                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0,0,0,1,2,0,0,0,0,3,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1624,                result = newInstance(getZero());,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1625,                result.nans = QNAN;,6,0,0,0,0,0,0,0,0,7,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1626,"                result = dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, divisor, result);",6,0,0,1,2,0,8,0,0,15,69,8,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1627,                return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1633,            field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);,4,0,0,1,2,0,4,0,0,8,47,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1634,            result = newInstance(getZero());,4,0,0,2,4,0,4,0,0,10,32,0,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1635,            result.sign = (byte) (sign * divisor.sign);,14,1,0,2,4,0,0,0,0,17,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1636,            result.nans = INFINITE;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1637,"            result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, divisor, result);",0,0,0,1,2,0,0,0,0,3,70,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1638,            return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1738,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1778,            excp = result.round(0);,2,0,0,1,2,0,0,0,0,3,23,9,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1797,            if (isNaN()) {,0,0,0,2,5,0,0,0,0,7,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1798,                return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1801,            if (nans == INFINITE) {,14,3,1,1,3,0,0,0,0,23,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1802,                return newInstance(this);,0,0,0,1,2,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1808,            field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);,0,0,0,1,2,0,0,0,0,3,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1809,            Dfp result = newInstance(getZero());,2,0,0,2,4,0,8,2,0,13,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1810,            result.sign = sign;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1811,            result.nans = INFINITE;,28,9,0,0,0,0,0,0,0,39,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1812,"            result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, getZero(), result);",6,0,0,2,4,0,8,0,0,15,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1813,            return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1818,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,4,0,0,1,2,0,4,0,0,8,46,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1819,            Dfp result = newInstance(getZero());,4,1,1,2,4,0,4,2,0,14,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1820,            result.nans = QNAN;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1821,"            result = dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, result, result);",0,0,0,1,2,0,0,0,0,3,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1822,            return result;,4,0,0,0,0,1,0,0,0,4,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1861,            return newInstance(this);,0,0,0,1,2,1,2,0,0,2,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1865,            if (nans == INFINITE && sign == 1) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1867,                return newInstance(this);,0,0,0,1,2,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1870,            if (nans == QNAN) {,4,2,0,1,3,0,8,0,0,14,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1871,                return newInstance(this);,0,0,0,1,2,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1874,            if (nans == SNAN) {,8,1,0,1,3,0,0,0,0,9,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1877,                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,4,0,0,1,2,0,4,0,0,8,46,9,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1878,                result = newInstance(this);,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1879,"                result = dotrap(DfpField.FLAG_INVALID, SQRT_TRAP, null, result);",6,0,0,1,2,0,12,0,0,20,64,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1880,                return result;,4,0,0,0,0,2,6,0,0,11,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1888,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0,0,0,1,2,0,0,0,0,3,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1889,            result = newInstance(this);,2,0,0,1,2,0,2,0,0,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1890,            result.nans = QNAN;,6,0,0,0,0,0,0,0,0,7,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1891,"            result = dotrap(DfpField.FLAG_INVALID, SQRT_TRAP, null, result);",6,0,0,1,2,0,6,0,0,14,64,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1892,            return result;,0,0,0,0,0,1,4,2,0,7,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1899,            x.exp = this.exp / 2;,6,2,0,0,0,0,0,0,0,10,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1908,                x.mant[mant.length-1] = 1500;,0,1,0,1,2,0,4,0,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1909,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1911,                x.mant[mant.length-1] = 2200;,8,1,0,1,2,0,0,0,0,10,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1912,                break;,0,0,0,0,0,0,6,0,0,6,6,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1935,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1956,            if (nans == INFINITE) {,0,0,0,1,3,0,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1957,                return (sign < 0) ? NEG_INFINITY_STRING : POS_INFINITY_STRING;,20,4,1,1,2,3,0,2,0,33,62,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1959,                return NAN_STRING;,2,0,0,0,0,1,0,0,0,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1964,            return dfp2sci();,0,0,0,1,2,1,2,0,0,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1975,        char rawdigits[]    = new char[mant.length * 4];,0,0,0,2,4,0,0,0,0,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1976,        char outputbuffer[] = new char[mant.length * 4 + 20];,0,0,0,2,4,0,0,0,0,6,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1984,        p = 0;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1985,        for (int i = mant.length - 1; i >= 0; i--) {,22,3,0,1,3,0,0,0,0,29,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1986,            rawdigits[p++] = (char) ((mant[i] / 1000) + '0');,2,2,1,5,10,0,0,0,0,13,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1987,            rawdigits[p++] = (char) (((mant[i] / 100) %10) + '0');,2,3,1,6,12,0,0,0,0,14,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1988,            rawdigits[p++] = (char) (((mant[i] / 10) % 10) + '0');,4,4,1,6,12,1,0,0,0,26,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1989,            rawdigits[p++] = (char) (((mant[i]) % 10) + '0');,0,0,0,6,12,0,0,0,0,18,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1993,        for (p = 0; p < rawdigits.length; p++) {,10,1,0,1,3,0,0,0,0,13,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1994,            if (rawdigits[p] != '0') {,0,0,0,2,5,0,0,0,0,7,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1995,                break;,6,2,0,0,0,0,0,0,0,10,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1998,        shf = p;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2001,        q = 0;,6,1,1,0,0,0,0,0,0,11,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2002,        if (sign == -1) {,4,1,1,1,3,0,0,0,0,9,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2003,            outputbuffer[q++] = '-';,8,0,1,1,2,0,0,0,0,14,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2006,        if (p != rawdigits.length) {,0,0,0,1,3,0,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2008,            outputbuffer[q++] = rawdigits[p++];,0,0,0,2,4,0,0,0,0,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2009,            outputbuffer[q++] = '.';,2,0,1,1,2,0,0,0,0,7,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2011,            while (p<rawdigits.length) {,0,0,0,1,3,0,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2012,                outputbuffer[q++] = rawdigits[p++];,4,0,1,2,4,0,0,0,0,11,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2015,            outputbuffer[q++] = '0';,6,0,0,1,2,1,4,0,0,12,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2016,            outputbuffer[q++] = '.';,2,0,1,1,2,0,4,0,0,11,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2017,            outputbuffer[q++] = '0';,6,0,1,1,2,0,0,0,0,12,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2018,            outputbuffer[q++] = 'e';,6,1,0,1,2,0,0,0,0,7,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2019,            outputbuffer[q++] = '0';,4,1,1,1,2,0,0,0,0,10,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2020,"            return new String(outputbuffer, 0, 5);",0,0,0,1,2,1,0,0,0,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2023,        outputbuffer[q++] = 'e';,2,0,1,1,2,0,0,0,0,7,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2027,        e = exp * 4 - shf - 1;,6,3,0,0,0,0,0,0,0,10,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2028,        ae = e;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2029,        if (e < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2030,            ae = -e;,4,0,0,0,0,0,0,0,0,6,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2034,        for (p = 1000000000; p > ae; p /= 10) {,0,0,0,1,3,0,0,0,0,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2038,        if (e < 0) {,4,2,0,1,3,1,0,0,0,7,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2039,            outputbuffer[q++] = '-';,6,1,0,1,2,0,0,0,0,8,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2042,        while (p > 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2043,            outputbuffer[q++] = (char)(ae / p + '0');,0,0,0,3,6,0,0,0,0,9,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2044,            ae = ae % p;,22,6,0,0,0,0,0,0,0,30,12,0,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2045,            p = p / 10;,2,0,0,0,0,0,0,0,0,3,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2048,"        return new String(outputbuffer, 0, q);",12,6,0,1,2,1,0,2,0,20,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2071,            buffer[p++] = '0';,0,0,0,1,2,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2072,            buffer[p++] = '0';,0,0,0,1,2,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2073,            buffer[p++] = '0';,4,0,1,1,2,1,2,0,0,12,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2074,            buffer[p++] = '0';,8,0,1,1,2,1,0,2,0,18,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2075,            e++;,0,0,0,0,0,0,0,0,0,0,4,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2090,            buffer[p++] = '0';,12,2,1,1,2,0,0,0,0,20,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2091,            buffer[p++] = '0';,0,0,0,1,2,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2092,            buffer[p++] = '0';,2,0,1,1,2,0,0,0,0,7,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2093,            buffer[p++] = '0';,6,0,1,1,2,0,4,0,0,15,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2094,            e--;,2,0,0,0,0,0,0,0,0,3,4,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2099,            buffer[p++] = '.';,8,2,0,1,2,1,0,0,0,11,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2118,            buffer[--q] = '-';,2,0,1,1,2,0,0,0,0,7,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2137,                def = newInstance(getZero());,0,0,0,2,4,0,0,0,0,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2138,                def.sign = result.sign;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2139,                def.nans = QNAN;,6,0,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2140,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2143,                if (nans == FINITE && mant[mant.length-1] != 0) {,8,4,1,2,5,0,0,0,0,14,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2145,                    def = newInstance(getZero());,2,0,0,2,4,0,4,0,0,7,29,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2146,                    def.sign = (byte)(sign*oper.sign);,10,1,0,2,4,0,0,0,0,12,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2147,                    def.nans = INFINITE;,8,2,0,0,0,0,0,0,0,11,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2150,                if (nans == FINITE && mant[mant.length-1] == 0) {,14,5,1,2,5,0,0,0,0,22,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2152,                    def = newInstance(getZero());,0,0,0,2,4,0,0,0,0,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2153,                    def.nans = QNAN;,6,2,0,0,0,1,0,0,0,9,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2156,                if (nans == INFINITE || nans == QNAN) {,8,3,0,1,3,0,0,0,0,11,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2157,                    def = newInstance(getZero());,10,1,0,2,4,0,4,0,0,16,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2158,                    def.nans = QNAN;,12,1,0,0,0,0,0,0,0,14,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2161,                if (nans == INFINITE || nans == SNAN) {,10,3,1,1,3,0,0,0,0,20,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2162,                    def = newInstance(getZero());,6,2,1,2,4,0,16,0,0,28,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2163,                    def.nans = QNAN;,6,0,0,0,0,0,0,0,0,7,16,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2168,                if ( (result.exp+mant.length) < MIN_EXP) {,10,2,0,2,5,0,0,0,0,12,42,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2169,                    def = newInstance(getZero());,2,0,0,2,4,0,4,0,0,7,29,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2170,                    def.sign = result.sign;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2172,                    def = newInstance(result);  // gradual underflow,0,0,0,1,2,0,0,0,0,3,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2174,                result.exp = result.exp + ERR_SCALE;,2,1,1,0,0,0,0,0,0,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2175,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2178,                result.exp = result.exp - ERR_SCALE;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2179,                def = newInstance(getZero());,2,0,0,2,4,0,4,0,0,7,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2180,                def.sign = result.sign;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2181,                def.nans = INFINITE;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2182,                break;,2,1,0,0,0,0,0,0,0,3,6,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2210,        return nans;,4,0,1,0,0,2,0,0,0,9,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2220,        Dfp result = x.newInstance(x);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2221,        result.sign = y.sign;,18,1,0,0,0,0,0,0,0,21,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2222,        return result;,4,0,0,0,0,1,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2233,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,4,1,0,3,7,0,6,0,0,11,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2234,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,4,0,0,1,2,0,4,0,0,8,46,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2235,            final Dfp result = newInstance(getZero());,0,0,0,2,4,0,0,0,0,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2236,            result.nans = QNAN;,6,0,0,0,0,0,0,0,0,7,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2237,"            return dotrap(DfpField.FLAG_INVALID, NEXT_AFTER_TRAP, x, result);",4,0,0,1,2,1,8,0,0,12,65,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2241,        boolean up = false;,8,1,0,0,0,0,0,0,0,11,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2242,        if (this.lessThan(x)) {,22,9,0,2,5,0,4,0,0,36,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2243,            up = true;,4,0,0,0,0,0,0,0,0,6,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2246,"        if (compare(this, x) == 0) {",0,0,0,2,5,0,0,0,0,7,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2247,            return newInstance(x);,0,0,0,1,2,1,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2250,        if (lessThan(getZero())) {,0,0,0,3,7,0,0,0,0,10,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2251,            up = !up;,2,0,0,0,0,0,0,0,0,3,9,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2256,        if (up) {,2,0,0,1,3,0,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2257,            inc = newInstance(getOne());,2,0,0,2,4,0,4,0,0,7,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2258,            inc.exp = this.exp-mant.length+1;,10,2,0,0,0,0,0,0,0,13,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2259,            inc.sign = this.sign;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2261,            if (this.equals(getZero())) {,2,0,0,3,7,0,4,0,0,7,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2262,                inc.exp = MIN_EXP-mant.length;,22,2,0,0,0,0,0,0,0,28,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2265,            result = add(inc);,0,0,0,1,2,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2267,            inc = newInstance(getOne());,8,1,0,2,4,0,4,0,0,15,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2268,            inc.exp = this.exp;,6,0,0,0,0,0,0,0,0,7,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2269,            inc.sign = this.sign;,6,0,0,0,0,0,0,0,0,7,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2271,            if (this.equals(inc)) {,0,0,0,2,5,0,0,0,0,7,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2272,                inc.exp = this.exp-mant.length;,10,1,0,0,0,0,0,0,0,12,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2274,                inc.exp = this.exp-mant.length+1;,10,2,0,0,0,0,0,0,0,13,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2277,            if (this.equals(getZero())) {,0,0,0,3,7,0,4,0,0,4,29,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2278,                inc.exp = MIN_EXP-mant.length;,10,1,0,0,0,0,0,0,0,12,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2281,            result = this.subtract(inc);,10,2,0,1,2,0,4,0,0,17,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2284,        if (result.classify() == INFINITE && this.classify() != INFINITE) {,0,0,0,3,7,0,0,0,0,10,67,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2285,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,4,0,0,1,2,0,4,0,0,8,46,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2286,"            result = dotrap(DfpField.FLAG_INEXACT, NEXT_AFTER_TRAP, x, result);",6,0,0,1,2,0,8,0,0,15,67,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2289,        if (result.equals(getZero()) && this.equals(getZero()) == false) {,0,2,0,5,11,0,10,0,0,13,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2290,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,6,0,0,1,2,0,4,0,0,12,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2291,"            result = dotrap(DfpField.FLAG_INEXACT, NEXT_AFTER_TRAP, x, result);",10,0,0,1,2,0,8,0,0,21,67,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2294,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2304,        if (isInfinite()) {,0,0,0,2,5,0,2,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2305,            if (lessThan(getZero())) {,0,0,0,3,7,0,4,0,0,4,26,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2306,                return Double.NEGATIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2308,                return Double.POSITIVE_INFINITY;,20,5,0,0,0,1,0,2,0,28,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2312,        if (isNaN()) {,0,0,0,2,5,0,0,0,0,7,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2313,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2316,        Dfp y = this;,6,1,0,0,0,0,0,0,0,8,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2317,        boolean negate = false;,30,10,0,0,0,0,0,0,0,44,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2318,        if (lessThan(getZero())) {,0,0,0,3,7,0,0,0,0,10,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2319,            y = negate();,2,0,0,1,2,0,2,0,0,5,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2320,            negate = true;,2,0,0,0,0,0,0,0,0,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2325,        int exponent = (int)(y.log10() * 3.32);,0,0,0,3,6,0,0,0,0,9,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2326,        if (exponent < 0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2327,            exponent--;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2330,"        Dfp tempDfp = DfpMath.pow(getTwo(), exponent);",6,2,0,2,4,0,8,2,0,19,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2331,        while (tempDfp.lessThan(y) || tempDfp.equals(y)) {,0,0,0,3,7,0,0,0,0,10,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2332,            tempDfp = tempDfp.multiply(2);,2,0,0,1,2,0,4,0,0,7,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2333,            exponent++;,2,0,0,0,0,0,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2335,        exponent--;,2,0,0,0,0,0,0,0,0,2,11,10,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2339,"        y = y.divide(DfpMath.pow(getTwo(), exponent));",6,0,0,3,6,0,12,0,0,20,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2340,        if (exponent > -1023) {,8,1,0,1,3,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2341,            y = y.subtract(getOne());,0,0,0,2,4,0,0,0,0,6,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2344,        if (exponent < -1074) {,6,5,0,1,3,0,0,0,0,11,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2345,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2348,        if (exponent > 1023) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2349,            return negate ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;,10,0,1,0,0,1,8,0,0,27,68,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2353,        y = y.multiply(newInstance(4503599627370496l)).rint();,0,0,0,3,6,0,0,0,0,9,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2354,        String str = y.toString();,8,1,0,1,2,0,4,2,0,16,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2355,"        str = str.substring(0, str.length()-1);",0,0,0,2,4,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2356,        long mantissa = Long.parseLong(str);,2,0,0,1,2,0,6,0,0,8,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2358,        if (mantissa == 4503599627370496L) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2360,            mantissa = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2361,            exponent++;,10,2,0,0,0,1,0,0,0,14,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2365,        if (exponent <= -1023) {,8,2,0,1,3,1,0,0,0,12,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2366,            exponent--;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2369,        while (exponent < -1023) {,0,0,0,1,3,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2370,            exponent++;,2,0,0,0,0,0,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2371,            mantissa >>>= 1;,6,0,0,0,0,0,0,0,0,7,16,1,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2374,        long bits = mantissa | ((exponent + 1023L) << 52);,14,4,0,2,4,0,0,0,0,20,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2375,        double x = Double.longBitsToDouble(bits);,2,0,0,1,2,0,6,0,0,8,41,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2377,        if (negate) {,2,0,0,1,3,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2378,            x = -x;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2381,        return x;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2390,        double split[] = new double[2];,0,0,0,2,4,0,0,0,0,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2391,        long mask = 0xffffffffc0000000L;,0,0,0,0,0,0,0,0,0,0,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2393,        split[0] = Double.longBitsToDouble(Double.doubleToLongBits(toDouble()) & mask);,2,1,1,4,8,0,10,0,0,16,79,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2394,        split[1] = subtract(newInstance(split[0])).toDouble();,0,0,1,5,10,0,6,0,0,11,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2396,        return split;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,96,public class Dfp implements FieldElement<Dfp> {,2,0,0,0,1,1,0,4,0,7,47,1,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,61,        return next(1) != 0;,6,1,0,1,2,1,2,0,0,10,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,66,        int i = 0;,4,1,0,0,0,0,0,0,0,5,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,67,        final int iEnd = bytes.length - 3;,0,0,1,0,0,0,4,0,0,8,34,13,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,68,        while (i < iEnd) {,6,2,0,1,3,0,4,0,0,12,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,69,            final int random = next(32);,2,0,0,1,2,1,2,0,0,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,70,            bytes[i]     = (byte) (random & 0xff);,2,1,1,3,6,0,0,0,0,8,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,71,            bytes[i + 1] = (byte) ((random >>  8) & 0xff);,4,3,1,4,8,0,0,0,0,10,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,72,            bytes[i + 2] = (byte) ((random >> 16) & 0xff);,4,3,1,4,8,0,0,0,0,10,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,73,            bytes[i + 3] = (byte) ((random >> 24) & 0xff);,12,5,1,4,8,0,0,0,0,22,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,74,            i += 4;,4,0,0,0,0,1,0,0,0,6,7,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,75,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,76,        int random = next(32);,6,1,0,1,2,0,2,0,0,9,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,77,        while (i < bytes.length) {,6,1,0,1,3,0,0,0,0,7,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,78,            bytes[i++] = (byte) (random & 0xff);,4,1,1,3,6,0,0,0,0,9,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,79,            random     = random >> 8;,4,2,0,0,0,0,0,0,0,7,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,81,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,85,        final long high = ((long) next(26)) << 26;,4,1,0,3,6,1,2,0,0,9,42,0,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,86,        final int  low  = next(26);,2,0,0,1,2,1,2,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,87,        return (high | low) * 0x1.0p-52d;,4,2,0,1,2,1,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,92,        return next(23) * 0x1.0p-23f;,0,0,0,1,2,1,0,0,0,4,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,99,        if (Double.isNaN(nextGaussian)) {,0,0,0,2,5,0,6,0,0,6,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,101,            final double x = nextDouble();,2,0,0,1,2,1,2,0,0,5,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,102,            final double y = nextDouble();,2,0,0,1,2,1,2,0,0,5,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,103,            final double alpha = 2 * FastMath.PI * x;,8,1,0,0,0,1,0,0,0,10,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,104,            final double r      = FastMath.sqrt(-2 * FastMath.log(y));,2,1,0,2,4,1,10,0,0,15,58,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,105,            random       = r * FastMath.cos(alpha);,22,4,1,1,2,0,6,0,0,36,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,106,            nextGaussian = r * FastMath.sin(alpha);,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,107,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,109,            random = nextGaussian;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,110,            nextGaussian = Double.NaN;,10,1,0,0,0,0,0,0,0,12,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,113,        return random;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,119,        return next(32);,0,0,0,1,2,1,2,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,125,        if (n < 1) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,126,            throw new NotStrictlyPositiveException(n);,6,2,0,1,2,0,0,2,0,11,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,130,        int mask = n;,4,0,0,0,0,0,0,0,0,4,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,131,        mask |= mask >> 1;,2,1,0,0,0,0,4,0,0,8,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,132,        mask |= mask >> 2;,10,2,0,0,0,0,0,0,0,13,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,133,        mask |= mask >> 4;,4,1,0,0,0,0,0,0,0,6,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,134,        mask |= mask >> 8;,2,0,0,0,0,0,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,135,        mask |= mask >> 16;,4,1,0,0,0,0,0,0,0,6,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,138,            final int random = next(32) & mask;,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,139,            if (random < n) {,6,1,0,1,3,0,0,0,0,8,17,0,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,140,                return random;,2,1,0,0,0,1,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,142,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,148,        final long high  = ((long) next(32)) << 32;,0,0,0,3,6,0,0,0,0,9,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,149,        final long  low  = ((long) next(32)) & 0xffffffffL;,6,2,0,3,6,0,0,0,0,9,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,150,        return high | low;,4,1,0,0,0,1,0,0,0,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,106,    public MersenneTwister() {,2,1,0,1,3,0,4,0,0,7,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,107,        mt = new int[N];,2,0,1,1,2,0,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,108,        setSeed(System.currentTimeMillis());,0,0,0,2,4,0,6,0,0,6,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,109,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,114,    public MersenneTwister(int seed) {,6,0,0,1,3,1,0,0,0,7,34,2,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,115,        mt = new int[N];,6,4,1,1,2,0,0,0,0,13,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,116,        setSeed(seed);,10,4,0,1,2,0,8,0,0,23,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,117,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,123,    public MersenneTwister(int[] seed) {,4,0,0,2,5,1,0,0,0,5,36,2,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,124,        mt = new int[N];,2,0,1,1,2,0,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,125,        setSeed(seed);,0,0,0,1,2,0,4,0,0,4,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,126,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,164,            setSeed(System.currentTimeMillis());,0,0,0,2,4,0,0,0,0,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,165,            return;,10,2,0,0,0,1,0,0,0,14,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,227,        if (mti >= N) { // generate N words at one time,4,1,0,1,3,0,0,0,0,5,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,228,            int mtNext = mt[0];,2,0,1,1,2,0,0,0,0,4,19,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,229,            for (int k = 0; k < N - M; ++k) {,0,0,0,1,3,0,0,0,0,4,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,230,                int mtCurr = mtNext;,4,1,1,0,0,0,0,0,0,8,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,231,                mtNext = mt[k + 1];,4,1,1,1,2,0,0,0,0,8,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,232,                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);,0,0,0,2,4,0,0,0,0,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,233,                mt[k] = mt[k + M] ^ (y >>> 1) ^ MAG01[y & 0x1];,0,0,0,4,8,0,0,0,0,12,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,235,            for (int k = N - M; k < N - 1; ++k) {,12,3,0,1,3,0,0,0,0,16,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,236,                int mtCurr = mtNext;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,237,                mtNext = mt[k + 1];,0,0,0,1,2,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,238,                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);,6,3,0,2,4,0,0,0,0,10,50,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,239,                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];,10,5,1,5,10,0,0,0,0,24,53,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,241,            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);,4,3,1,3,6,0,0,0,0,10,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,242,            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];,8,5,1,4,8,0,0,0,0,20,51,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,244,            mti = 0;,2,0,0,0,0,0,0,0,0,3,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,247,        y = mt[mti++];,0,0,0,1,2,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,250,        y ^=  y >>> 11;,6,3,0,0,0,0,16,0,0,26,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,251,        y ^= (y <<   7) & 0x9d2c5680;,4,2,0,1,2,0,6,0,0,13,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,252,        y ^= (y <<  15) & 0xefc60000;,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,253,        y ^=  y >>> 18;,8,3,0,0,0,0,4,0,0,16,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,255,        return y >>> (32 - bits);,4,2,0,1,2,1,0,0,0,6,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,59,38,"        super(value, 0, false);",2,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,59,39,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,59,48,"        super(specific, value, 0, false);",4,0,0,1,2,0,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,59,49,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,59,52,"        this(null, wrong, min, boundIsAllowed);",10,1,0,1,2,0,4,2,0,18,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,59,53,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,59,67,"        super(specific,",2,0,0,0,1,0,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,59,73,        this.min = min;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,59,74,        this.boundIsAllowed = boundIsAllowed;,14,1,0,0,0,0,0,0,0,18,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,59,75,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,59,81,        return boundIsAllowed;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,59,88,        return min;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,59,50,"        super(specific, general, wrong, arguments);",8,0,0,1,2,0,0,0,0,8,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,59,51,        argument = wrong;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,59,52,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,59,64,"        super(general, wrong, arguments);",0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,59,65,        argument = wrong;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,59,66,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,59,72,        return argument;,0,0,0,0,0,1,0,0,0,1,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,59,44,"        super(null, specific, general, args);",32,8,0,1,2,1,6,0,0,49,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,59,45,    },16,5,0,0,1,0,0,0,0,21,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,59,52,"        this(null, general, args);",6,0,0,1,2,1,6,0,0,13,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,59,53,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,59,65,        super(cause);,10,0,0,1,2,0,0,0,0,12,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,59,66,        this.specific = specific;,10,1,0,0,0,0,0,0,0,13,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,59,67,        this.general = general;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,59,68,        this.arguments = ArgUtils.flatten(arguments);,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,59,69,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,59,77,"        this(cause, null, null);",2,0,0,1,2,0,0,0,0,2,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,59,78,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,59,82,        return specific;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,59,87,        return general;,4,0,0,0,0,1,0,0,0,5,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,59,92,        return arguments.clone();,12,3,0,1,2,1,10,0,0,27,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,59,102,"        return MessageFactory.buildMessage(locale, specific, general, arguments);",0,0,0,1,2,1,12,0,0,12,73,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,59,108,        return getMessage(Locale.US);,4,0,0,1,2,1,2,0,0,6,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,59,114,        return getMessage(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,211,    private FastMath() {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,212,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,219,        return Math.sqrt(a);,0,0,0,1,2,1,6,0,0,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,227,      if (x != x) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,228,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,231,      if (x > 20.0) {,6,3,0,1,3,0,0,0,0,9,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,232,          return exp(x)/2.0;,0,0,0,1,2,1,0,0,0,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,235,      if (x < -20) {,2,1,0,1,3,0,10,0,0,15,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,236,          return exp(-x)/2.0;,0,0,0,1,2,1,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,239,      double hiPrec[] = new double[2];,2,0,0,2,4,0,0,0,0,2,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,240,      if (x < 0.0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,241,          x = -x;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,243,"      exp(x, 0.0, hiPrec);",0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,245,      double ya = hiPrec[0] + hiPrec[1];,2,1,1,2,4,0,0,0,0,7,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,246,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,4,1,1,3,6,0,0,0,0,10,42,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,248,      double temp = ya * 1073741824.0;,4,0,0,0,0,0,0,0,0,4,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,249,      double yaa = ya + temp - temp;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,250,      double yab = ya - yaa;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,253,      double recip = 1.0/ya;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,254,      temp = recip * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,255,      double recipa = recip + temp - temp;,4,0,0,0,0,0,0,0,0,4,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,256,      double recipb = recip - recipa;,8,2,0,0,0,0,0,0,0,10,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,259,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,26,10,0,1,2,0,0,0,0,37,76,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,261,      recipb += -yb * recip * recip;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,264,      temp = ya + recipa;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,265,      yb += -(temp - ya - recipa);,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,266,      ya = temp;,12,4,0,0,0,0,0,0,0,17,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,267,      temp = ya + recipb;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,268,      yb += -(temp - ya - recipb);,8,1,0,1,2,0,0,0,0,11,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,269,      ya = temp;,4,1,0,0,0,0,0,0,0,5,10,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,271,      double result = ya + yb;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,272,      result *= 0.5;,4,1,0,0,0,2,0,0,0,8,14,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,273,      return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,281,      boolean negate = false;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,282,      if (x != x) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,283,          return x;,4,2,0,0,0,2,4,0,0,11,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,286,      if (x > 20.0) {,4,1,0,1,3,0,0,0,0,6,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,287,          return exp(x)/2.0;,0,1,0,1,2,1,4,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,290,      if (x < -20) {,2,1,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,291,          return -exp(-x)/2.0;,0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,294,      if (x == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,295,          return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,298,      if (x < 0.0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,299,          x = -x;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,300,          negate = true;,2,0,0,0,0,0,0,0,0,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,305,      if (x > 0.25) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,306,          double hiPrec[] = new double[2];,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,307,"          exp(x, 0.0, hiPrec);",2,0,0,1,2,0,6,0,0,8,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,309,          double ya = hiPrec[0] + hiPrec[1];,8,2,1,2,4,0,0,0,0,14,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,310,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,6,1,0,3,6,0,0,0,0,8,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,312,          double temp = ya * 1073741824.0;,4,1,0,0,0,0,0,0,0,5,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,313,          double yaa = ya + temp - temp;,12,2,1,0,0,0,4,0,0,25,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,314,          double yab = ya - yaa;,10,1,0,0,0,0,0,0,0,14,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,317,          double recip = 1.0/ya;,20,4,0,0,0,0,0,0,0,26,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,318,          temp = recip * 1073741824.0;,14,2,0,0,0,0,0,0,0,17,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,319,          double recipa = recip + temp - temp;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,320,          double recipb = recip - recipa;,12,2,0,0,0,0,0,0,0,15,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,323,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,26,10,0,1,2,0,0,0,0,38,76,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,325,          recipb += -yb * recip * recip;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,327,          recipa = -recipa;,8,1,0,0,0,0,0,0,0,10,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,328,          recipb = -recipb;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,331,          temp = ya + recipa;,12,4,0,0,0,1,0,0,0,17,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,332,          yb += -(temp - ya - recipa);,8,2,0,1,2,0,4,0,0,16,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,333,          ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,334,          temp = ya + recipb;,6,1,0,0,0,0,0,0,0,8,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,335,          yb += -(temp - ya - recipb);,2,1,0,1,2,0,4,0,0,7,28,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,336,          ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,338,          result = ya + yb;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,339,          result *= 0.5;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,340,      },10,1,0,0,1,0,10,0,0,22,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,342,          double hiPrec[] = new double[2];,6,3,0,2,4,0,0,0,0,9,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,343,"          expm1(x, hiPrec);",8,3,0,1,2,0,0,0,0,12,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,345,          double ya = hiPrec[0] + hiPrec[1];,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,346,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0,0,0,3,6,0,0,0,0,9,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,349,          double denom = 1.0 + ya;,4,1,0,0,0,0,0,0,0,5,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,350,          double denomr = 1.0 / denom;,4,1,0,0,0,0,0,0,0,5,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,351,          double denomb = -(denom - 1.0 - ya) + yb;,8,2,0,1,2,0,0,0,0,11,41,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,352,          double ratio = ya * denomr;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,353,          double temp = ratio * 1073741824.0;,4,1,0,0,0,0,0,0,0,5,35,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,354,          double ra = ratio + temp - temp;,0,0,0,0,0,0,0,0,0,0,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,355,          double rb = ratio - ra;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,357,          temp = denom * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,358,          double za = denom + temp - temp;,8,2,0,0,0,0,0,0,0,10,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,359,          double zb = denom - za;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,361,          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;,22,9,0,1,2,0,0,0,0,32,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,364,          rb += yb*denomr;                        // numerator,2,0,0,0,0,0,6,0,0,8,52,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,365,          rb += -ya * denomb * denomr * denomr;   // denominator,0,0,0,0,0,0,0,0,0,0,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,368,          temp = ya + ra;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,369,          yb += -(temp - ya - ra);,8,1,0,1,2,0,6,0,0,17,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,370,          ya = temp;,10,1,0,0,0,1,0,0,0,13,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,371,          temp = ya + rb;,8,1,0,0,0,0,0,0,0,10,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,372,          yb += -(temp - ya - rb);,8,1,0,1,2,0,0,0,0,11,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,373,          ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,375,          result = ya + yb;,14,4,0,0,0,0,0,0,0,18,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,376,          result *= 0.5;,2,0,0,0,0,0,0,0,0,3,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,379,      if (negate) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,380,          result = -result;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,383,      return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,391,      boolean negate = false;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,393,      if (x != x) {,12,3,1,1,3,1,0,2,0,20,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,394,          return x;,4,0,0,0,0,2,4,2,0,11,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,397,      if (x > 20.0) {,4,0,0,1,3,0,0,0,0,4,15,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,398,          return 1.0;,2,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,401,      if (x < -20) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,402,          return -1.0;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,405,      if (x == 0) {,8,2,0,1,3,0,0,0,0,10,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,406,          return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,409,      if (x < 0.0) {,20,7,0,1,3,0,0,0,0,28,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,410,          x = -x;,22,3,0,0,0,1,0,0,0,30,7,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,411,          negate = true;,10,1,0,0,0,0,0,0,0,15,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,415,      if (x >= 0.5) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,416,          double hiPrec[] = new double[2];,0,0,1,2,4,0,0,0,0,3,32,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,418,"          exp(x*2.0, 0.0, hiPrec);",0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,420,          double ya = hiPrec[0] + hiPrec[1];,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,421,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,4,1,1,3,6,0,0,0,0,10,42,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,424,          double na = -1.0 + ya;,12,3,0,0,0,0,0,0,0,16,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,425,          double nb = -(na + 1.0 - ya);,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,426,          double temp = na + yb;,6,1,0,0,0,0,0,0,0,8,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,427,          nb += -(temp - na - yb);,14,2,0,1,2,0,8,0,0,27,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,428,          na = temp;,18,3,0,0,0,1,0,0,0,24,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,431,          double da = 1.0 + ya;,28,9,0,0,0,0,4,0,0,42,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,432,          double db = -(da - 1.0 - ya);,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,433,          temp = da + yb;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,434,          db += -(temp - da - yb);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,435,          da = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,437,          temp = da * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,438,          double daa = da + temp - temp;,0,0,0,0,0,0,6,0,0,6,30,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,439,          double dab = da - daa;,14,2,0,0,0,1,4,0,0,21,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,442,          double ratio = na/da;,10,2,0,0,0,0,4,0,0,17,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,443,          temp = ratio * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,444,          double ratioa = ratio + temp - temp;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,445,          double ratiob = ratio - ratioa;,10,1,0,0,0,0,0,2,0,13,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,448,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,26,9,0,1,2,0,0,0,0,37,72,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,451,          ratiob += nb / da;,6,1,0,0,0,0,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,453,          ratiob += -db * na / da / da;,2,0,0,0,0,0,0,0,0,2,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,455,          result = ratioa + ratiob;,6,1,0,0,0,0,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,456,      },4,1,1,0,1,0,0,0,0,10,1,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,458,          double hiPrec[] = new double[2];,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,460,"          expm1(x*2.0, hiPrec);",0,0,0,1,2,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,462,          double ya = hiPrec[0] + hiPrec[1];,6,2,0,2,4,1,0,0,0,9,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,463,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0,0,0,3,6,0,0,0,0,9,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,466,          double na = ya;,4,0,0,0,0,0,0,0,0,4,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,467,          double nb = yb;,4,0,0,0,0,0,0,0,0,4,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,470,          double da = 2.0 + ya;,4,1,0,0,0,0,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,471,          double db = -(da - 2.0 - ya);,12,2,0,1,2,0,0,0,0,15,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,472,          double temp = da + yb;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,473,          db += -(temp - da - yb);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,474,          da = temp;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,476,          temp = da * 1073741824.0;,10,2,0,0,0,1,0,0,0,14,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,477,          double daa = da + temp - temp;,8,2,0,0,0,0,0,0,0,10,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,478,          double dab = da - daa;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,481,          double ratio = na/da;,6,1,0,0,0,0,0,0,0,7,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,482,          temp = ratio * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,483,          double ratioa = ratio + temp - temp;,8,2,0,0,0,0,0,0,0,10,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,484,          double ratiob = ratio - ratioa;,12,1,0,0,0,1,0,0,0,14,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,487,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0,0,0,1,2,0,0,0,0,3,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,490,          ratiob += nb / da;,12,2,0,0,0,0,0,0,0,15,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,492,          ratiob += -db * na / da / da;,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,494,          result = ratioa + ratiob;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,497,      if (negate) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,498,          result = -result;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,501,      return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,509,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,0,0,0,2,4,1,0,0,0,7,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,518,        boolean negative = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,519,        if (a < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,520,            negative = true;,2,0,0,0,0,0,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,521,            a = -a;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,525,        if (a > 0.167) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,526,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,0,0,0,2,4,0,0,0,0,6,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,528,            final double a2 = a * a;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,529,            if (a > 0.097) {,8,7,0,1,3,0,0,0,0,15,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,530,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0 - a2 * (1.0 / 15.0 - a2 * (1.0 / 17.0) * 15.0 / 16.0) * 13.0 / 14.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,0,0,0,9,18,0,0,0,0,27,264,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,531,            } else if (a > 0.036) {,10,1,0,1,4,0,0,0,0,12,23,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,532,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,16,25,0,7,14,0,0,0,0,42,196,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,533,            } else if (a > 0.0036) {,0,0,0,1,4,0,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,534,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,0,0,0,5,10,0,0,0,0,15,129,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,536,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0) * 3.0 / 4.0) / 2.0);,6,1,0,3,6,0,0,0,0,8,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,540,        return negative ? -absAsinh : absAsinh;,0,0,0,0,0,1,0,0,0,1,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,550,        boolean negative = false;,2,0,0,0,0,0,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,551,        if (a < 0) {,4,1,0,1,3,0,0,0,0,5,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,552,            negative = true;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,553,            a = -a;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,557,        if (a > 0.15) {,2,0,0,1,3,0,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,558,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,6,4,0,3,6,0,4,0,0,15,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,560,            final double a2 = a * a;,6,1,0,0,0,1,0,0,0,8,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,561,            if (a > 0.087) {,2,1,0,1,3,0,6,0,0,9,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,562,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0 + a2 * (1.0 / 15.0 + a2 * (1.0 / 17.0)))))))));,20,25,0,9,18,0,0,0,0,46,175,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,563,            } else if (a > 0.031) {,0,0,0,1,4,0,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,564,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0)))))));,16,19,0,7,14,0,0,0,0,36,135,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,565,            } else if (a > 0.003) {,2,1,0,1,4,0,0,0,0,3,23,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,566,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0)))));,0,0,0,5,10,0,0,0,0,15,95,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,568,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0)));,0,0,0,3,6,0,0,0,0,9,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,572,        return negative ? -absAtanh : absAtanh;,0,0,0,0,0,1,0,0,0,1,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,582,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : (Double.isNaN(a) ? Double.NaN : 0.0));,8,2,0,5,10,1,6,0,0,17,83,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,590,"        return nextAfter(a, Double.POSITIVE_INFINITY);",6,1,0,1,2,1,4,0,0,11,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,597,        return Math.random();,4,1,1,1,2,1,4,0,0,13,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,621,"        return exp(x, 0.0, null);",6,1,0,1,2,2,10,0,0,19,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,640,        if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,641,            intVal = (int) -x;,0,0,0,1,2,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,643,            if (intVal > 746) {,2,1,0,1,3,0,0,0,0,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,644,                if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,645,                    hiPrec[0] = 0.0;,0,0,1,1,2,0,0,0,0,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,646,                    hiPrec[1] = 0.0;,0,0,1,1,2,0,0,0,0,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,648,                return 0.0;,4,1,0,0,0,1,0,0,0,6,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,651,            if (intVal > 709) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,653,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",4,2,0,1,2,1,6,0,0,13,79,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,654,                if (hiPrec != null) {,6,2,0,1,3,0,0,0,0,8,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,655,                    hiPrec[0] /= 285040095144011776.0;,0,0,1,1,2,0,0,0,0,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,656,                    hiPrec[1] /= 285040095144011776.0;,0,0,1,1,2,0,0,0,0,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,658,                return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,661,            if (intVal == 709) {,2,1,0,1,3,0,0,0,0,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,663,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",4,2,0,1,2,1,6,0,0,13,79,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,664,                if (hiPrec != null) {,4,2,0,1,3,0,0,0,0,6,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,665,                    hiPrec[0] /= 4.455505956692756620;,6,0,1,1,2,0,0,0,0,9,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,666,                    hiPrec[1] /= 4.455505956692756620;,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,668,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,671,            intVal++;,2,0,0,0,0,1,2,0,0,5,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,673,            intPartA = EXP_INT_TABLE_A[750-intVal];,8,3,1,1,2,0,0,0,0,14,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,674,            intPartB = EXP_INT_TABLE_B[750-intVal];,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,676,            intVal = -intVal;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,678,            intVal = (int) x;,0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,680,            if (intVal > 709) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,681,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,682,                    hiPrec[0] = Double.POSITIVE_INFINITY;,4,0,1,1,2,0,0,0,0,7,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,683,                    hiPrec[1] = 0.0;,0,1,1,1,2,0,8,0,0,12,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,685,                return Double.POSITIVE_INFINITY;,8,1,0,0,0,1,0,0,0,9,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,688,            intPartA = EXP_INT_TABLE_A[750+intVal];,4,1,0,1,2,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,689,            intPartB = EXP_INT_TABLE_B[750+intVal];,4,1,1,1,2,0,0,0,0,8,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,696,        final int intFrac = (int) ((x - intVal) * 1024.0);,6,2,0,3,6,1,0,0,0,9,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,697,        final double fracPartA = EXP_FRAC_TABLE_A[intFrac];,0,0,0,1,2,0,0,0,0,3,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,698,        final double fracPartB = EXP_FRAC_TABLE_B[intFrac];,0,0,0,1,2,0,0,0,0,3,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,704,        final double epsilon = x - (intVal + intFrac / 1024.0);,0,0,0,1,2,0,0,0,0,3,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,713,        double z = 0.04168701738764507;,2,0,0,0,0,0,0,0,0,2,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,714,        z = z * epsilon + 0.1666666505023083;,10,4,0,0,0,0,0,0,0,16,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,715,        z = z * epsilon + 0.5000000000042687;,0,0,0,0,0,0,0,0,0,0,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,716,        z = z * epsilon + 1.0;,6,2,0,0,0,0,0,0,0,9,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,717,        z = z * epsilon + -3.940510424527919E-20;,0,0,0,0,0,0,0,0,0,0,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,724,        double tempA = intPartA * fracPartA;,6,1,0,0,0,0,0,0,0,7,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,725,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,0,0,0,0,0,0,0,0,0,0,82,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,731,        final double tempC = tempB + tempA;,10,1,0,0,0,1,0,0,0,12,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,733,        if (extra != 0.0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,734,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,20,7,0,0,0,0,0,0,0,28,63,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,736,            result = tempC*z + tempB + tempA;,10,3,0,0,0,0,0,0,0,14,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,739,        if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,741,            hiPrec[0] = tempA;,0,0,0,1,2,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,742,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,0,0,0,1,2,0,0,0,0,3,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,745,        return result;,6,0,0,0,0,1,0,0,0,8,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,753,"      return expm1(x, null);",0,0,0,1,2,1,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,762,        if (x != x || x == 0.0) { // NaN or zero,6,3,0,1,3,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,763,            return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,766,        if (x <= -1.0 || x >= 1.0) {,0,0,0,1,3,0,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,769,            double hiPrec[] = new double[2];,8,0,0,2,4,0,0,2,0,10,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,770,"            exp(x, 0.0, hiPrec);",0,0,0,1,2,0,6,0,0,6,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,771,            if (x > 0.0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,772,                return -1.0 + hiPrec[0] + hiPrec[1];,0,0,0,2,4,1,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,774,                final double ra = -1.0 + hiPrec[0];,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,775,                double rb = -(ra + 1.0 - hiPrec[0]);,4,2,1,2,4,0,0,0,0,9,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,776,                rb += hiPrec[1];,2,0,1,1,2,0,0,0,0,5,16,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,777,                return ra + rb;,14,7,1,0,0,1,0,0,0,26,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,784,        boolean negative = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,786,        if (x < 0.0) {,4,2,0,1,3,0,0,0,0,6,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,787,            x = -x;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,788,            negative = true;,18,2,0,0,0,1,4,2,0,29,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,792,            int intFrac = (int) (x * 1024.0);,10,2,0,2,4,3,4,0,0,19,33,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,793,            double tempA = EXP_FRAC_TABLE_A[intFrac] - 1.0;,20,4,1,1,2,0,0,0,0,29,47,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,794,            double tempB = EXP_FRAC_TABLE_B[intFrac];,2,0,1,1,2,0,0,0,0,6,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,796,            double temp = tempA + tempB;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,797,            tempB = -(temp - tempA - tempB);,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,798,            tempA = temp;,4,0,0,0,0,0,0,0,0,5,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,800,            temp = tempA * 1073741824.0;,2,0,0,0,0,0,0,0,0,2,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,801,            baseA = tempA + temp - temp;,8,2,0,0,0,0,0,0,0,11,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,802,            baseB = tempB + (tempA - baseA);,8,2,0,1,2,0,0,0,0,11,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,804,            epsilon = x - intFrac/1024.0;,12,3,0,0,0,0,0,0,0,16,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,809,        double zb = 0.008336750013465571;,2,0,0,0,0,0,0,0,0,2,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,810,        zb = zb * epsilon + 0.041666663879186654;,6,2,0,0,0,0,0,0,0,9,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,811,        zb = zb * epsilon + 0.16666666666745392;,8,2,0,0,0,0,0,0,0,11,40,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,812,        zb = zb * epsilon + 0.49999999999999994;,18,4,0,0,0,0,0,0,0,24,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,813,        zb = zb * epsilon;,8,1,0,0,0,1,0,0,0,11,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,814,        zb = zb * epsilon;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,816,        double za = epsilon;,2,0,0,0,0,0,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,817,        double temp = za + zb;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,818,        zb = -(temp - za - zb);,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,819,        za = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,821,        temp = za * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,822,        temp = za + temp - temp;,8,2,0,0,0,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,823,        zb += za - temp;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,824,        za = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,827,        double ya = za * baseA;,10,2,0,0,0,0,12,0,0,24,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,829,        temp = ya + za * baseB;,10,3,1,0,0,0,0,0,0,18,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,830,        double yb = -(temp - ya - za * baseB);,0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,831,        ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,833,        temp = ya + zb * baseA;,16,3,0,0,0,0,0,0,0,21,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,834,        yb += -(temp - ya - zb * baseA);,10,2,0,1,2,0,0,0,0,14,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,835,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,837,        temp = ya + zb * baseB;,10,2,0,0,0,0,0,0,0,13,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,838,        yb += -(temp - ya - zb*baseB);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,839,        ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,843,        temp = ya + baseA;,6,1,0,0,0,0,0,0,0,8,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,844,        yb += -(temp - baseA - ya);,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,845,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,847,        temp = ya + za;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,849,        yb += -(temp - ya - za);,8,1,0,1,2,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,850,        ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,852,        temp = ya + baseB;,10,2,0,0,0,1,6,2,0,22,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,854,        yb += -(temp - ya - baseB);,8,1,0,1,2,0,0,0,0,11,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,855,        ya = temp;,8,0,0,0,0,0,0,0,0,11,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,857,        temp = ya + zb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,859,        yb += -(temp - ya - zb);,8,1,0,1,2,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,860,        ya = temp;,10,1,0,0,0,1,0,0,0,13,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,862,        if (negative) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,864,            double denom = 1.0 + ya;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,865,            double denomr = 1.0 / denom;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,866,            double denomb = -(denom - 1.0 - ya) + yb;,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,867,            double ratio = ya * denomr;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,868,            temp = ratio * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,869,            final double ra = ratio + temp - temp;,8,2,0,0,0,1,0,0,0,11,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,870,            double rb = ratio - ra;,6,1,0,0,0,0,0,0,0,7,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,872,            temp = denom * 1073741824.0;,10,2,0,0,0,1,0,0,0,14,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,873,            za = denom + temp - temp;,18,2,1,0,0,0,0,0,0,25,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,874,            zb = denom - za;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,876,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,22,9,0,1,2,0,0,0,0,32,60,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,887,            rb += yb * denomr;                      // numerator,0,0,0,0,0,0,0,0,0,0,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,888,            rb += -ya * denomb * denomr * denomr;   // denominator,10,1,0,0,0,0,0,0,0,13,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,891,            ya = -ra;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,892,            yb = -rb;,10,1,0,0,0,0,0,0,0,15,9,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,895,        if (hiPrecOut != null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,896,            hiPrecOut[0] = ya;,0,0,0,1,2,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,897,            hiPrecOut[1] = yb;,0,0,0,1,2,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,900,        return ya + yb;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,950,            final double a = d * 9.31322574615478515625E-10;,8,2,0,0,0,1,10,0,0,21,48,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,951,            split[0] = (d + a - d) * 1073741824.0;,0,0,0,2,4,0,0,0,0,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,952,            split[1] = d - split[0];,2,0,0,2,4,0,0,0,0,2,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1023,            in[0] = in[1];,0,0,0,2,4,0,0,0,0,6,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1024,            in[1] = 0.0;,0,0,1,1,2,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1155,"        return log(x, null);",0,0,0,1,2,1,4,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1165,        long bits = Double.doubleToLongBits(x);,10,4,0,1,2,0,6,0,0,22,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1168,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,6,4,0,2,5,0,0,0,0,11,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1169,            if (x != 0.0) {,8,2,0,1,3,0,0,0,0,11,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1170,                if (hiPrec != null) {,12,4,0,1,3,0,6,0,0,23,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1171,                    hiPrec[0] = Double.NaN;,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1174,                return Double.NaN;,8,0,0,0,0,1,0,4,0,12,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1179,        if (x == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1180,            if (hiPrec != null) {,10,3,0,1,3,0,0,0,0,13,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1181,                hiPrec[0] = Double.POSITIVE_INFINITY;,4,0,1,1,2,0,0,0,0,7,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1184,            return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1188,        int exp = (int)(bits >> 52)-1023;,0,0,0,2,4,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1190,        if ((bits & 0x7ff0000000000000L) == 0) {,8,3,0,2,5,0,2,0,0,13,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1192,            if (x == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1194,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1195,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1198,                return Double.NEGATIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1202,            bits <<= 1;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1203,            while ( (bits & 0x0010000000000000L) == 0) {,0,0,0,2,5,0,0,0,0,7,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1204,                exp--;,16,1,0,0,0,0,0,0,0,19,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1205,                bits <<= 1;,2,0,0,0,0,0,6,0,0,9,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1210,        if (exp == -1 || exp == 0) {,4,3,0,1,3,0,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1211,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,0,0,0,1,3,0,0,0,0,4,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1216,                double xa = x - 1.0;,4,1,0,0,0,0,0,0,0,5,20,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1217,                double xb = xa - x + 1.0;,12,3,0,0,0,1,0,0,0,16,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1218,                double tmp = xa * 1073741824.0;,4,1,0,0,0,0,0,0,0,5,31,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1219,                double aa = xa + tmp - tmp;,8,2,0,0,0,0,0,0,0,10,27,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1220,                double ab = xa - aa;,8,1,0,0,0,0,0,0,0,9,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1221,                xa = aa;,4,0,0,0,0,0,6,0,0,11,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1222,                xb = ab;,8,3,1,0,0,0,0,0,0,25,8,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1224,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,0,0,0,2,4,0,6,0,0,6,53,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1225,                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];,0,0,0,2,4,0,0,0,0,6,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1227,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,53,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1229,                    aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1230,                    ab = ya * xb + yb * xa + yb * xb;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1232,                    tmp = aa * 1073741824.0;,2,1,0,0,0,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1233,                    ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1234,                    yb = aa - ya + ab;,18,7,0,0,0,0,0,0,0,27,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1237,                    aa = ya + LN_QUICK_COEF[i][0];,10,1,1,2,4,0,0,2,0,18,30,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1238,                    ab = yb + LN_QUICK_COEF[i][1];,4,1,1,2,4,0,0,0,0,10,30,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1240,                    tmp = aa * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1241,                    ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1242,                    yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1246,                aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1247,                ab = ya * xb + yb * xa + yb * xb;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1249,                tmp = aa * 1073741824.0;,10,2,0,0,0,0,0,0,0,14,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1250,                ya = aa + tmp - tmp;,10,2,0,0,0,0,0,0,0,13,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1251,                yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1253,                return ya + yb;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1258,        double lnm[] = LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,4,2,1,5,10,0,0,0,0,8,66,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1269,        double epsilon = (double)(bits & 0x3ffffffffffL) / (4503599627370496.0 + (bits & 0x000ffc0000000000L));,0,0,0,4,8,0,0,0,0,12,103,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1271,        double lnza = 0.0;,2,0,0,0,0,0,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1272,        double lnzb = 0.0;,2,0,0,0,0,0,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1274,        if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1276,            double tmp = epsilon * 1073741824.0;,20,6,0,0,0,1,2,2,0,32,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1277,            double aa = epsilon + tmp - tmp;,12,3,1,0,0,0,0,0,0,19,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1278,            double ab = epsilon - aa;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1279,            double xa = aa;,4,0,0,0,0,0,0,0,0,4,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1280,            double xb = ab;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1283,            double numer = (double)(bits & 0x3ffffffffffL);,4,0,0,2,4,0,0,0,0,5,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1284,            double denom = 4503599627370496.0 + (bits & 0x000ffc0000000000L);,10,3,0,1,2,2,8,0,0,23,65,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1285,            aa = numer - xa*denom - xb * denom;,12,4,0,0,0,0,0,0,0,17,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1286,            xb += aa / denom;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1289,            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];,0,0,0,2,4,0,0,0,0,6,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1290,            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];,10,0,0,2,4,0,0,2,0,12,57,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1292,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,14,2,0,1,3,0,0,0,0,18,55,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1294,                aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1295,                ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1297,                tmp = aa * 1073741824.0;,10,2,0,0,0,0,0,0,0,14,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1298,                ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1299,                yb = aa - ya + ab;,10,3,0,0,0,0,0,0,0,14,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1302,                aa = ya + LN_HI_PREC_COEF[i][0];,4,1,1,2,4,0,0,0,0,10,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1303,                ab = yb + LN_HI_PREC_COEF[i][1];,4,1,1,2,4,0,0,0,0,10,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1305,                tmp = aa * 1073741824.0;,8,1,0,0,0,0,6,0,0,16,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1306,                ya = aa + tmp - tmp;,10,2,0,0,0,0,0,0,0,13,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1307,                yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1311,            aa = ya * xa;,6,1,0,0,0,0,6,0,0,15,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1312,            ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1320,            lnza = aa + ab;,2,0,0,0,0,0,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1321,            lnzb = -(lnza - aa - ab);,8,1,0,1,2,0,0,0,0,11,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1322,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1325,            lnza = -0.16624882440418567;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1326,            lnza = lnza * epsilon + 0.19999954120254515;,0,0,0,0,0,0,0,0,0,0,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1327,            lnza = lnza * epsilon + -0.2499999997677497;,0,0,0,0,0,0,0,0,0,0,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1328,            lnza = lnza * epsilon + 0.3333333333332802;,6,2,0,0,0,0,0,0,0,9,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1329,            lnza = lnza * epsilon + -0.5;,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1330,            lnza = lnza * epsilon + 1.0;,6,2,0,0,0,0,0,0,0,9,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1331,            lnza = lnza * epsilon;,2,0,0,0,0,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1348,        double a = LN_2_A*exp;,6,1,0,0,0,0,0,0,0,7,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1349,        double b = 0.0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1350,        double c = a+lnm[0];,4,0,0,1,2,0,0,0,0,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1351,        double d = -(c-a-lnm[0]);,0,0,0,2,4,0,0,0,0,6,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1352,        a = c;,4,2,0,0,0,0,0,0,0,7,6,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1353,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1355,        c = a + lnza;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1356,        d = -(c - a - lnza);,8,1,0,1,2,0,0,0,0,11,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1357,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1358,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1360,        c = a + LN_2_B*exp;,8,2,0,0,0,0,0,0,0,11,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1361,        d = -(c - a - LN_2_B*exp);,16,3,0,1,2,0,0,0,0,21,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1362,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1363,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1365,        c = a + lnm[1];,4,1,1,1,2,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1366,        d = -(c - a - lnm[1]);,6,1,1,2,4,0,0,0,0,11,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1367,        a = c;,18,6,1,0,0,1,4,0,0,33,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1368,        b = b + d;,2,0,0,0,0,0,0,0,0,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1370,        c = a + lnzb;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1371,        d = -(c - a - lnzb);,2,0,0,1,2,1,0,0,0,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1372,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1373,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1375,        if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1376,            hiPrec[0] = a;,2,0,1,1,2,0,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1377,            hiPrec[1] = b;,0,0,0,1,2,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1380,        return a + b;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1388,        double xpa = 1.0 + x;,4,1,0,0,0,0,0,0,0,5,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1389,        double xpb = -(xpa - 1.0 - x);,8,1,0,1,2,0,0,0,0,12,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1391,        if (x == -1) {,6,2,0,1,3,0,0,0,0,11,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1392,            return x/0.0;   // -Infinity,2,1,0,0,0,1,0,0,0,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1395,        if (x > 0 && 1/x == 0) { // x = Infinity,4,4,0,1,3,0,0,0,0,8,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1396,            return x;,4,0,0,0,0,1,0,0,0,4,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1399,        if (x>1e-6 || x<-1e-6) {,0,0,0,1,3,0,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1400,            double hiPrec[] = new double[2];,26,9,0,2,4,1,0,0,0,37,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1402,"            log(xpa, hiPrec);",0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1406,            double fx1 = xpb/xpa;,4,1,0,0,0,0,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1408,            double epsilon = 0.5 * fx1 + 1.0;,2,0,0,0,0,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1409,            epsilon = epsilon * fx1;,6,1,0,0,0,0,0,0,0,8,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1411,            return epsilon + hiPrec[1] + hiPrec[0];,2,1,1,2,4,1,0,0,0,7,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1415,        double y = x * 0.333333333333333 - 0.5;,0,0,0,0,0,0,0,0,0,0,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1416,        y = y * x + 1.0;,6,2,0,0,0,0,0,0,0,9,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1417,        y = y * x;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1419,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1427,        final double hiPrec[] = new double[2];,0,0,0,2,4,0,0,0,0,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1429,"        log(x, hiPrec);",0,0,0,1,2,0,6,0,0,6,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1431,        final double tmp = hiPrec[0] * 1073741824.0;,2,1,1,1,2,1,10,0,0,17,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1432,        final double lna = hiPrec[0] + tmp - tmp;,6,2,1,1,2,1,0,0,0,11,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1433,        final double lnb = hiPrec[0] - lna + hiPrec[1];,8,3,1,2,4,1,0,0,0,16,47,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1435,        final double rln10a = 0.4342944622039795;,2,0,0,0,0,1,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1436,        final double rln10b = 1.9699272335463627E-8;,4,1,0,0,0,1,0,0,0,6,44,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1438,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,0,0,0,0,0,1,0,0,0,1,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1449,        final double lns[] = new double[2];,2,0,0,2,4,1,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1451,        if (y == 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1452,            return 1.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1455,        if (x != x) { // X is NaN,0,0,0,1,3,0,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1456,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1460,        if (x == 0) {,4,2,0,1,3,0,8,0,0,14,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1461,            long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1462,            if ((bits & 0x8000000000000000L) != 0) {,0,0,0,2,5,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1464,                long yi = (long) y;,4,0,0,1,2,0,0,0,0,4,19,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1466,                if (y < 0 && y == yi && (yi & 1) == 1) {,8,6,0,2,5,0,0,0,0,14,40,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1467,                    return Double.NEGATIVE_INFINITY;,8,1,0,0,0,1,6,0,0,16,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1470,                if (y < 0 && y == yi && (yi & 1) == 1) {,8,6,0,2,5,0,0,0,0,14,40,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1471,                    return -0.0;,0,0,0,0,0,1,0,0,0,1,12,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1474,                if (y > 0 && y == yi && (yi & 1) == 1) {,0,0,0,2,5,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1475,                    return -0.0;,0,0,0,0,0,1,0,0,0,1,12,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1479,            if (y < 0) {,2,1,0,1,3,0,0,0,0,4,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1480,                return Double.POSITIVE_INFINITY;,2,1,1,0,0,1,0,0,0,12,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1482,            if (y > 0) {,4,1,0,1,3,0,0,0,0,5,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1483,                return 0.0;,6,1,0,0,0,1,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1486,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1489,        if (x == Double.POSITIVE_INFINITY) {,6,2,0,1,3,0,2,0,0,10,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1490,            if (y != y) { // y is NaN,8,1,0,1,3,0,0,0,0,10,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1491,                return y;,2,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1493,            if (y < 0.0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1494,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1496,                return Double.POSITIVE_INFINITY;,6,2,0,0,0,1,0,0,0,9,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1500,        if (y == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1501,            if (x * x == 1.0),4,2,0,1,2,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1502,              return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1504,            if (x * x > 1.0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1505,                return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1507,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1511,        if (x == Double.NEGATIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1512,            if (y != y) { // y is NaN,6,1,0,1,3,0,0,0,0,8,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1513,                return y;,2,0,0,0,0,1,6,0,0,8,9,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1516,            if (y < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1517,                long yi = (long) y;,0,0,0,1,2,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1518,                if (y == yi && (yi & 1) == 1) {,6,4,0,2,5,0,0,0,0,10,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1519,                    return -0.0;,0,0,0,0,0,1,0,0,0,1,12,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1522,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1525,            if (y > 0)  {,8,2,0,1,3,0,0,0,0,11,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1526,                long yi = (long) y;,4,0,0,1,2,0,0,0,0,4,19,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1527,                if (y == yi && (yi & 1) == 1) {,0,0,0,2,5,0,0,0,0,7,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1528,                    return Double.NEGATIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1531,                return Double.POSITIVE_INFINITY;,12,2,0,0,0,1,0,0,0,16,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1535,        if (y == Double.NEGATIVE_INFINITY) {,10,2,1,1,3,0,0,0,0,17,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1537,            if (x * x == 1.0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1538,                return Double.NaN;,0,0,0,0,0,1,4,0,0,4,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1541,            if (x * x < 1.0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1542,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1544,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1549,        if (x < 0) {,8,1,1,1,3,0,0,2,0,15,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1551,            if (y >= 4503599627370496.0 || y <= -4503599627370496.0) {,10,4,0,1,3,0,0,0,0,16,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1552,"                return pow(-x, y);",8,3,0,1,2,1,0,0,0,12,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1555,            if (y == (long) y) {,4,1,0,2,5,0,0,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1557,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",6,2,0,4,8,1,8,0,0,19,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1559,                return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1566,        if (y < 8e298 && y > -8e298) {,4,3,0,1,3,0,0,0,0,8,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1567,            double tmp1 = y * 1073741824.0;,6,1,0,0,0,1,0,0,0,8,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1568,            ya = y + tmp1 - tmp1;,8,2,0,0,0,0,0,0,0,11,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1569,            yb = y - ya;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1570,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1571,            double tmp1 = y * 9.31322574615478515625E-10;,0,0,0,0,0,0,0,0,0,0,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1572,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,14,6,0,0,0,0,0,0,0,20,48,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1573,            ya = (tmp1 + tmp2 - tmp1) * 1073741824.0 * 1073741824.0;,14,4,0,1,2,0,0,0,0,20,56,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1574,            yb = y - ya;,6,1,0,0,0,0,0,0,0,8,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1578,"        log(x, lns);",0,0,0,1,2,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1579,        double lna = lns[0];,2,0,1,1,2,0,0,0,0,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1580,        double lnb = lns[1];,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1583,        double tmp1 = lna * 1073741824.0;,4,1,0,0,0,0,0,0,0,5,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1584,        double tmp2 = lna + tmp1 - tmp1;,8,2,0,0,0,0,0,0,0,10,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1585,        lnb += lna - tmp2;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1586,        lna = tmp2;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1589,        final double aa = lna * ya;,6,1,0,0,0,1,6,0,0,14,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1590,        final double ab = lna * yb + lnb * ya + lnb * yb;,24,6,0,0,0,2,0,0,0,34,49,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1592,        lna = aa+ab;,6,1,0,0,0,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1593,        lnb = -(lna - aa - ab);,8,1,0,1,2,0,4,0,0,15,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1595,        double z = 1.0 / 120.0;,2,1,0,0,0,0,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1596,        z = z * lnb + (1.0 / 24.0);,10,4,1,1,2,0,0,0,0,20,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1597,        z = z * lnb + (1.0 / 6.0);,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1598,        z = z * lnb + 0.5;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1599,        z = z * lnb + 1.0;,2,0,1,0,0,0,0,0,0,7,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1600,        z = z * lnb;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1602,"        final double result = exp(lna, z, null);",2,0,0,1,2,1,14,0,0,18,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1604,        return result;,2,0,0,0,0,1,12,0,0,14,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1859,        double x2 = x*x;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1861,        double p = 2.7553817452272217E-6;,2,0,0,0,0,0,0,0,0,2,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1862,        p = p * x2 + -1.9841269659586505E-4;,8,3,0,0,0,0,0,0,0,13,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1863,        p = p * x2 + 0.008333333333329196;,8,2,0,0,0,1,10,2,0,24,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1864,        p = p * x2 + -0.16666666666666666;,2,1,0,0,0,0,0,0,0,3,34,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1867,        p = p * x2 * x;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1869,        return p;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1879,        double x2 = x*x;,12,3,0,0,0,0,8,2,0,25,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1881,        double p = 2.479773539153719E-5;,0,0,0,0,0,0,0,0,0,0,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1882,        p = p * x2 + -0.0013888888689039883;,6,2,0,0,0,0,0,0,0,10,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1883,        p = p * x2 + 0.041666666666621166;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1884,        p = p * x2 + -0.49999999999999994;,6,2,0,0,0,0,0,0,0,10,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1885,        p *= x2;,4,0,0,0,0,0,0,0,0,5,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1887,        return p;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1898,        int idx = (int) ((xa * 8.0) + 0.5);,2,1,1,3,6,0,8,0,0,24,35,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1899,        final double epsilon = xa - EIGHTHES[idx]; //idx*0.125;,8,3,0,1,2,0,0,0,0,12,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1902,        final double sintA = SINE_TABLE_A[idx];,2,0,1,1,2,1,0,2,0,9,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1903,        final double sintB = SINE_TABLE_B[idx];,2,0,1,1,2,1,6,0,0,13,39,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1904,        final double costA = COSINE_TABLE_A[idx];,2,0,1,1,2,1,0,0,0,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1905,        final double costB = COSINE_TABLE_B[idx];,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1908,        double sinEpsA = epsilon;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1909,        double sinEpsB = polySine(epsilon);,4,0,0,1,2,0,10,0,0,15,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1910,        final double cosEpsA = 1.0;,8,2,1,0,0,1,0,2,0,15,27,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1911,        final double cosEpsB = polyCosine(epsilon);,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1914,        final double temp = sinEpsA * 1073741824.0;,4,1,0,0,0,1,0,0,0,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1915,        double temp2 = (sinEpsA + temp) - temp;,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1916,        sinEpsB +=  sinEpsA - temp2;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1917,        sinEpsA = temp2;,4,0,0,0,0,0,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1943,        double a = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1944,        double b = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1946,        double t = sintA;,4,0,0,0,0,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1947,        double c = a + t;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1948,        double d = -(c - a - t);,12,2,0,1,2,0,0,0,0,16,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1949,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1950,        b = b + d;,6,1,0,0,0,0,6,0,0,15,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1952,        t = costA * sinEpsA;,6,1,0,0,0,0,0,0,0,8,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1953,        c = a + t;,14,4,0,0,0,0,0,0,0,20,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1954,        d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1955,        a = c;,6,0,0,0,0,0,0,0,0,7,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1956,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1958,        b = b + sintA * cosEpsB + costA * sinEpsB;,16,4,0,0,0,0,0,0,0,21,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1973,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,0,0,0,0,0,0,0,0,0,0,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2000,        if (xb != 0.0) {,4,2,0,1,3,0,0,0,0,6,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2001,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,0,0,0,2,5,0,0,0,0,7,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2003,            c = a + t;,10,3,0,0,0,0,2,0,0,16,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2004,            d = -(c - a - t);,16,3,0,1,2,1,0,0,0,22,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2005,            a = c;,20,2,0,0,0,0,0,0,0,25,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2006,            b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2009,        result = a + b;,2,0,0,0,0,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2011,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2022,        final double pi2a = 1.5707963267948966;,0,0,0,0,0,0,0,0,0,0,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2023,        final double pi2b = 6.123233995736766E-17;,0,0,0,0,0,0,0,0,0,0,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2025,        final double a = pi2a - xa;,6,1,0,0,0,1,0,0,0,8,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2026,        double b = -(a - pi2a + xa);,0,0,0,1,2,0,10,0,0,10,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2027,        b += pi2b - xb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2029,"        return sinQ(a, b);",6,1,0,1,2,1,6,0,0,13,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2042,        int idx = (int) ((xa * 8.0) + 0.5);,6,2,0,3,6,1,2,0,0,11,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2043,        final double epsilon = xa - EIGHTHES[idx]; //idx*0.125;,4,1,1,1,2,1,0,0,0,10,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2046,        final double sintA = SINE_TABLE_A[idx];,2,0,1,1,2,1,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2047,        final double sintB = SINE_TABLE_B[idx];,2,0,1,1,2,1,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2048,        final double costA = COSINE_TABLE_A[idx];,0,0,0,1,2,0,6,0,0,6,41,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2049,        final double costB = COSINE_TABLE_B[idx];,6,1,0,1,2,1,0,0,0,9,41,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2052,        double sinEpsA = epsilon;,10,0,0,0,0,1,2,0,0,13,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2053,        double sinEpsB = polySine(epsilon);,2,0,0,1,2,0,4,0,0,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2054,        final double cosEpsA = 1.0;,2,0,0,0,0,1,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2055,        final double cosEpsB = polyCosine(epsilon);,2,0,0,1,2,1,10,0,0,13,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2058,        double temp = sinEpsA * 1073741824.0;,4,1,0,0,0,0,0,0,0,5,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2059,        double temp2 = (sinEpsA + temp) - temp;,2,1,0,1,2,0,0,0,0,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2060,        sinEpsB +=  sinEpsA - temp2;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2061,        sinEpsA = temp2;,12,1,0,0,0,0,0,0,0,14,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2086,        double a = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2087,        double b = 0;,4,0,0,0,0,0,0,0,0,5,13,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2090,        double t = sintA;,4,0,0,0,0,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2091,        double c = a + t;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2092,        double d = -(c - a - t);,8,1,0,1,2,0,0,0,0,10,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2093,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2094,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2096,        t = costA*sinEpsA;,6,1,0,0,0,0,0,0,0,8,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2097,        c = a + t;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2098,        d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2099,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2100,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2102,        b = b + sintA*cosEpsB + costA*sinEpsB;,6,3,0,0,0,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2103,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,28,8,0,0,0,0,0,0,0,38,62,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2105,        double sina = a + b;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2106,        double sinb = -(sina - a - b);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2110,        a = b = c = d = 0.0;,10,0,0,0,0,1,8,0,0,23,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2112,        t = costA*cosEpsA;,12,2,0,0,0,1,6,0,0,22,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2113,        c = a + t;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2114,        d = -(c - a - t);,10,2,0,1,2,0,0,0,0,13,17,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2115,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2116,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2118,        t = -sintA*sinEpsA;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2119,        c = a + t;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2120,        d = -(c - a - t);,0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2121,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2122,        b = b + d;,2,1,0,0,0,0,0,0,0,3,10,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2124,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,16,6,0,0,0,0,0,0,0,23,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2125,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,0,0,0,1,2,0,0,0,0,3,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2127,        double cosa = a + b;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2128,        double cosb = -(cosa - a - b);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2130,        if (cotanFlag) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2132,            tmp = cosa; cosa = sina; sina = tmp;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2133,            tmp = cosb; cosb = sinb; sinb = tmp;,12,0,0,0,0,0,0,0,0,15,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2147,        double est = sina/cosa;,6,1,0,0,0,0,0,0,0,7,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2150,        temp = est * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2151,        double esta = (est + temp) - temp;,8,2,0,1,2,0,0,0,0,10,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2152,        double estb =  est - esta;,6,1,0,0,0,0,0,0,0,7,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2154,        temp = cosa * 1073741824.0;,6,1,0,0,0,0,0,0,0,8,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2155,        double cosaa = (cosa + temp) - temp;,8,2,0,1,2,0,0,0,0,10,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2156,        double cosab =  cosa - cosaa;,2,0,0,0,0,0,0,0,0,2,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2159,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,22,9,0,1,2,0,0,0,0,31,114,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2160,        err += sinb/cosa;                     // Change in est due to sinb,0,0,0,0,0,0,0,0,0,0,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2161,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,10,3,0,0,0,0,0,0,0,15,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2163,        if (xb != 0.0) {,8,2,0,1,3,0,0,0,0,11,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2166,            double xbadj = xb + est*est*xb;,16,3,0,0,0,0,0,0,0,20,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2167,            if (cotanFlag) {,2,0,0,1,3,0,0,0,0,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2168,                xbadj = -xbadj;,4,0,0,0,0,0,0,0,0,6,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2171,            err += xbadj;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2174,        return est+err;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2191,        long inbits = Double.doubleToLongBits(x);,6,0,0,1,2,0,0,2,0,8,41,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2192,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0,0,0,3,6,0,0,0,0,9,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2195,        inbits &= 0x000fffffffffffffL;,2,0,0,0,0,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2196,        inbits |= 0x0010000000000000L;,0,0,0,0,0,0,6,0,0,6,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2199,        exponent++;,2,0,0,0,0,0,0,0,0,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2200,        inbits <<= 11;,2,0,0,0,0,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2206,        int idx = exponent >> 6;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2207,        int shift = exponent - (idx << 6);,6,1,0,1,2,0,0,0,0,8,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2209,        if (shift != 0) {,8,2,0,1,3,1,0,0,0,11,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2210,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,8,3,1,3,6,0,0,0,0,14,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2211,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,0,0,0,2,4,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2212,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,8,5,1,5,10,0,0,0,0,20,70,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2213,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,4,1,1,5,10,0,0,0,0,10,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2215,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,10,2,1,2,4,0,0,0,0,16,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2216,            shpiA = RECIP_2PI[idx];,2,0,1,1,2,0,0,0,0,7,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2217,            shpiB = RECIP_2PI[idx+1];,0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2221,        long a = inbits >>> 32;,0,0,0,0,0,0,0,0,0,1,23,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2222,        long b = inbits & 0xffffffffL;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2224,        long c = shpiA >>> 32;,4,1,0,0,0,0,0,0,0,5,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2225,        long d = shpiA & 0xffffffffL;,6,2,0,0,0,0,0,0,0,8,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2227,        long ac = a * c;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2228,        long bd = b * d;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2229,        long bc = b * c;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2230,        long ad = a * d;,10,1,0,0,0,1,0,0,0,12,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2232,        long prodB = bd + (ad << 32);,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2233,        long prodA = ac + (ad >>> 32);,6,2,0,1,2,0,0,0,0,8,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2235,        boolean bita = (bd & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,6,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2236,        boolean bitb = (ad & 0x80000000L ) != 0;,4,2,0,1,2,0,0,0,0,6,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2237,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,6,2,0,1,2,0,4,0,0,13,52,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2240,        if ( (bita && bitb) ||,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2242,            prodA++;,4,0,0,0,0,0,0,0,0,6,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2245,        bita = (prodB & 0x8000000000000000L) != 0;,12,4,0,1,2,0,0,0,0,18,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2246,        bitb = (bc & 0x80000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2248,        prodB = prodB + (bc << 32);,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2249,        prodA = prodA + (bc >>> 32);,6,2,0,1,2,0,0,0,0,9,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2251,        bitsum = (prodB & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2254,        if ( (bita && bitb) ||,6,1,0,1,3,0,0,0,0,8,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2256,            prodA++;,2,0,0,0,0,0,0,0,0,3,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2260,        c = shpiB >>> 32;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2261,        d = shpiB & 0xffffffffL;,0,0,0,0,0,0,6,0,0,7,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2262,        ac = a * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2263,        bc = b * c;,12,2,0,0,0,0,0,0,0,16,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2264,        ad = a * d;,6,1,0,0,0,0,0,0,0,8,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2267,        ac = ac + ((bc + ad) >>> 32);,10,5,0,2,4,0,6,0,0,22,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2269,        bita = (prodB & 0x8000000000000000L) != 0;,6,1,0,1,2,0,0,0,0,8,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2270,        bitb = (ac & 0x8000000000000000L ) != 0;,0,0,0,1,2,0,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2271,        prodB += ac;,4,0,0,0,0,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2272,        bitsum = (prodB & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2274,        if ( (bita && bitb) ||,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2276,            prodA++;,2,0,0,0,0,0,0,0,0,3,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2280,        c = shpi0 >>> 32;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2281,        d = shpi0 & 0xffffffffL;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2283,        bd = b * d;,8,1,0,0,0,1,0,0,0,11,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2284,        bc = b * c;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2285,        ad = a * d;,8,1,0,0,0,0,0,0,0,10,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2287,        prodA += bd + ((bc + ad) << 32);,10,3,0,2,4,0,6,0,0,21,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2299,        int intPart = (int)(prodA >>> 62);,4,1,0,2,4,0,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2302,        prodA <<= 2;,8,3,0,0,0,0,2,0,0,15,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2303,        prodA |= prodB >>> 62;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2304,        prodB <<= 2;,6,1,0,0,0,0,0,0,0,8,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2307,        a = prodA >>> 32;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2308,        b = prodA & 0xffffffffL;,6,1,0,0,0,0,0,0,0,8,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2310,        c = PI_O_4_BITS[0] >>> 32;,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2311,        d = PI_O_4_BITS[0] & 0xffffffffL;,2,1,1,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2313,        ac = a * c;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2314,        bd = b * d;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2315,        bc = b * c;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2316,        ad = a * d;,8,1,0,0,0,1,8,2,0,21,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2318,        long prod2B = bd + (ad << 32);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2319,        long prod2A = ac + (ad >>> 32);,6,2,0,1,2,0,0,0,0,8,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2321,        bita = (bd & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2322,        bitb = (ad & 0x80000000L ) != 0;,2,2,0,1,2,0,0,0,0,4,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2323,        bitsum = (prod2B & 0x8000000000000000L) != 0;,10,4,0,1,2,0,0,0,0,15,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2326,        if ( (bita && bitb) ||,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2328,            prod2A++;,2,0,0,0,0,0,0,0,0,3,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2331,        bita = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2332,        bitb = (bc & 0x80000000L ) != 0;,6,3,0,1,2,0,0,0,0,9,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2334,        prod2B = prod2B + (bc << 32);,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2335,        prod2A = prod2A + (bc >>> 32);,6,2,0,1,2,0,0,0,0,9,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2337,        bitsum = (prod2B & 0x8000000000000000L) != 0;,10,3,0,1,2,0,0,0,0,15,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2340,        if ( (bita && bitb) ||,8,6,0,1,3,0,0,0,0,14,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2342,            prod2A++;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2346,        c = PI_O_4_BITS[1] >>> 32;,10,3,0,1,2,0,4,0,0,18,26,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2347,        d = PI_O_4_BITS[1] & 0xffffffffL;,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2348,        ac = a * c;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2349,        bc = b * c;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2350,        ad = a * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2353,        ac = ac + ((bc + ad) >>> 32);,0,0,0,2,4,0,0,0,0,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2355,        bita = (prod2B & 0x8000000000000000L) != 0;,20,4,0,1,2,0,0,0,0,26,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2356,        bitb = (ac & 0x8000000000000000L ) != 0;,0,0,0,1,2,0,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2357,        prod2B += ac;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2358,        bitsum = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2360,        if ( (bita && bitb) ||,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2362,            prod2A++;,2,2,0,0,0,0,0,0,0,4,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2366,        a = prodB >>> 32;,4,1,0,0,0,0,0,0,0,6,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2367,        b = prodB & 0xffffffffL;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2368,        c = PI_O_4_BITS[0] >>> 32;,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2369,        d = PI_O_4_BITS[0] & 0xffffffffL;,2,1,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2370,        ac = a * c;,10,2,0,0,0,0,0,0,0,14,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2371,        bc = b * c;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2372,        ad = a * d;,10,1,0,0,0,1,6,2,0,21,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2375,        ac = ac + ((bc + ad) >>> 32);,0,0,0,2,4,0,0,0,0,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2377,        bita = (prod2B & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2378,        bitb = (ac & 0x8000000000000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2379,        prod2B += ac;,4,0,0,0,0,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2380,        bitsum = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2382,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2384,            prod2A++;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2388,        double tmpA = (prod2A >>> 12) / 4503599627370496.0;  // High order 52 bits,4,2,0,1,2,0,0,0,0,6,74,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2389,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / 4503599627370496.0 / 4503599627370496.0; // Low bits,0,0,0,4,8,0,0,0,0,12,114,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2391,        double sumA = tmpA + tmpB;,6,1,0,0,0,0,0,0,0,7,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2392,        double sumB = -(sumA - tmpA - tmpB);,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2395,        result[0] = intPart;,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2396,        result[1] = sumA * 2.0;,4,4,0,1,2,0,0,0,0,8,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2397,        result[2] = sumB * 2.0;,4,1,0,1,2,0,0,0,0,5,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2398,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2406,        boolean negative = false;,10,0,0,0,0,0,0,0,0,13,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2407,        int quadrant = 0;,4,0,0,0,0,0,4,0,0,8,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2409,        double xb = 0.0;,4,0,0,0,0,0,0,0,0,4,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2412,        xa = x;,0,0,1,0,0,0,12,0,0,16,7,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2413,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2414,            negative = true;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2415,            xa = -xa;,6,0,0,0,0,1,2,0,0,11,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2419,        if (xa == 0.0) {,6,1,0,1,3,0,0,0,0,7,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2420,            long bits = Double.doubleToLongBits(x);,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2421,            if (bits < 0) {,4,1,0,1,3,1,2,0,0,8,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2422,                return -0.0;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2424,            return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2427,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2428,            return Double.NaN;,14,1,0,0,0,1,0,0,0,16,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2432,        if (xa > 3294198.0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2436,            double reduceResults[] = new double[3];,0,0,0,2,4,0,6,0,0,6,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2437,"            reducePayneHanek(xa, reduceResults);",2,0,0,1,2,0,0,0,0,2,36,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2438,            quadrant = ((int) reduceResults[0]) & 3;,4,2,0,3,6,0,6,0,0,12,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2439,            xa = reduceResults[1];,2,0,1,1,2,0,0,2,0,8,22,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2440,            xb = reduceResults[2];,0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2441,        } else if (xa > 1.5707963267948966) {,0,0,0,1,4,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2446,            int k = (int)(xa * 0.6366197723675814);,0,0,0,2,4,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2452,                double a = -k * 1.570796251296997;,2,0,0,0,0,0,0,0,0,2,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2453,                remA = xa + a;,6,1,0,0,0,0,0,0,0,8,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2454,                remB = -(remA - xa - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2456,                a = -k * 7.549789948768648E-8;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2457,                double b = remA;,20,4,0,0,0,0,0,0,0,25,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2458,                remA = a + b;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2459,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2461,                a = -k * 6.123233995736766E-17;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2462,                b = remA;,8,1,0,0,0,1,0,0,0,10,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2463,                remA = a + b;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2464,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2466,                if (remA > 0.0),6,1,0,1,2,0,0,0,0,8,15,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2467,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2472,                k--;,0,0,0,0,0,0,0,0,0,0,4,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2473,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2474,            quadrant = k & 3;,4,1,0,0,0,0,0,0,0,6,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2475,            xa = remA;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2476,            xb = remB;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2479,        if (negative) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2480,            quadrant ^= 2;  // Flip bit 1,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2483,        switch (quadrant) {,2,0,0,1,3,0,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2485,"                return sinQ(xa, xb);",2,0,0,1,2,1,6,0,0,9,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2487,"                return cosQ(xa, xb);",8,2,0,1,2,1,0,0,0,12,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2489,"                return -sinQ(xa, xb);",0,0,0,1,2,1,6,0,0,7,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2491,"                return -cosQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2493,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2503,        int quadrant = 0;,10,1,0,0,0,0,0,0,0,12,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2506,        double xa = x;,6,0,0,0,0,0,0,2,0,8,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2507,        if (x < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2508,            xa = -xa;,10,1,0,0,0,1,0,0,0,14,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2511,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,0,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2512,            return Double.NaN;,6,0,0,0,0,1,0,0,0,7,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2516,        double xb = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2517,        if (xa > 3294198.0) {,8,1,0,1,3,3,0,2,0,14,21,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2521,            double reduceResults[] = new double[3];,8,0,0,2,4,0,0,0,0,9,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2522,"            reducePayneHanek(xa, reduceResults);",0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2523,            quadrant = ((int) reduceResults[0]) & 3;,0,0,0,3,6,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2524,            xa = reduceResults[1];,4,0,0,1,2,0,0,0,0,4,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2525,            xb = reduceResults[2];,0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2526,        } else if (xa > 1.5707963267948966) {,4,1,0,1,4,0,0,0,0,6,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2531,            int k = (int)(xa * 0.6366197723675814);,4,1,0,2,4,0,0,0,0,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2537,                double a = -k * 1.570796251296997;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2538,                remA = xa + a;,10,1,0,0,0,0,0,0,0,12,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2539,                remB = -(remA - xa - a);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2541,                a = -k * 7.549789948768648E-8;,4,1,0,0,0,0,0,0,0,7,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2542,                double b = remA;,4,0,0,0,0,0,0,0,0,4,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2543,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2544,                remB += -(remA - b - a);,2,0,1,1,2,0,4,0,0,10,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2546,                a = -k * 6.123233995736766E-17;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2547,                b = remA;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2548,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2549,                remB += -(remA - b - a);,10,1,0,1,2,1,4,2,0,20,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2551,                if (remA > 0.0),4,2,0,1,2,0,0,0,0,6,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2552,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2557,                k--;,6,0,0,0,0,0,0,0,0,7,4,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2558,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2559,            quadrant = k & 3;,4,1,0,0,0,0,0,0,0,6,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2560,            xa = remA;,6,0,0,0,0,0,0,0,0,7,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2561,            xb = remB;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2567,        switch (quadrant) {,2,0,0,1,3,0,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2569,"                return cosQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2571,"                return -sinQ(xa, xb);",4,0,0,1,2,1,6,0,0,11,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2573,"                return -cosQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2575,"                return sinQ(xa, xb);",0,0,0,1,2,1,10,0,0,11,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2577,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2587,        boolean negative = false;,4,0,0,0,0,0,0,0,0,5,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2588,        int quadrant = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2591,        double xa = x;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2592,        if (x < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2593,            negative = true;,6,1,0,0,0,0,0,0,0,8,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2594,            xa = -xa;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2598,        if (xa == 0.0) {,10,1,0,1,3,0,0,4,0,15,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2599,            long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2600,            if (bits < 0) {,2,1,0,1,3,0,0,0,0,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2601,                return -0.0;,4,3,0,0,0,1,8,0,0,16,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2603,            return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2606,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,0,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2607,            return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2611,        double xb = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2612,        if (xa > 3294198.0) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2616,            double reduceResults[] = new double[3];,2,0,0,2,4,0,0,0,0,2,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2617,"            reducePayneHanek(xa, reduceResults);",0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2618,            quadrant = ((int) reduceResults[0]) & 3;,0,0,0,3,6,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2619,            xa = reduceResults[1];,0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2620,            xb = reduceResults[2];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2621,        } else if (xa > 1.5707963267948966) {,2,1,0,1,4,0,0,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2626,            int k = (int)(xa * 0.6366197723675814);,0,0,0,2,4,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2632,                double a = -k * 1.570796251296997;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2633,                remA = xa + a;,6,1,0,0,0,0,0,0,0,8,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2634,                remB = -(remA - xa - a);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2636,                a = -k * 7.549789948768648E-8;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2637,                double b = remA;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2638,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2639,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2641,                a = -k * 6.123233995736766E-17;,2,0,0,0,0,2,0,0,0,4,31,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2642,                b = remA;,4,0,0,0,0,0,0,0,0,5,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2643,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2644,                remB += -(remA - b - a);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2646,                if (remA > 0.0),2,1,0,1,2,0,4,0,0,7,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2647,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2652,                k--;,0,0,0,0,0,0,0,0,0,0,4,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2653,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2654,            quadrant = k & 3;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2655,            xa = remA;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2656,            xb = remB;,4,0,0,0,0,0,6,0,0,11,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2659,        if (xa > 1.5) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2661,            final double pi2a = 1.5707963267948966;,8,2,1,0,0,1,0,0,0,13,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2662,            final double pi2b = 6.123233995736766E-17;,6,1,0,0,0,1,0,0,0,8,42,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2664,            final double a = pi2a - xa;,8,2,0,0,0,1,0,0,0,11,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2665,            double b = -(a - pi2a + xa);,8,2,0,1,2,0,0,0,0,11,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2666,            b += pi2b - xb;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2668,            xa = a + b;,6,1,0,0,0,0,0,0,0,8,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2669,            xb = -(xa - a - b);,8,1,0,1,2,0,0,0,0,11,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2670,            quadrant ^= 1;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2671,            negative ^= true;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2675,        if ((quadrant & 1) == 0) {,2,2,0,2,5,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2676,"            result = tanQ(xa, xb, false);",0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2678,"            result = -tanQ(xa, xb, true);",2,0,0,1,2,0,6,0,0,11,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2681,        if (negative) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2682,            result = -result;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2685,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2694,"        return atan(x, 0.0, false);",0,0,0,1,2,1,4,0,0,5,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2704,        boolean negate = false;,2,0,0,0,0,0,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2707,        if (xa < 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2709,            xa = -xa;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2710,            xb = -xb;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2711,            negate = true;,4,0,0,0,0,0,0,0,0,6,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2714,        if (xa > 1.633123935319537E16) { // Very large input,0,0,0,1,3,0,0,0,0,4,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2715,            return (negate ^ leftPlane) ? (-Math.PI/2.0) : (Math.PI/2.0);,0,0,0,3,6,1,0,0,0,10,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2719,        if (xa < 1.0) {,4,1,0,1,3,1,4,0,0,10,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2720,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,8,4,0,4,8,0,0,0,0,14,65,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2722,            double temp = 1.0/xa;,8,1,0,0,0,0,0,0,0,10,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2723,            idx = (int) (-((-1.7168146928204136 * temp * temp + 8.0) * temp) + 13.07);,10,4,0,4,8,0,0,0,0,17,74,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2725,        double epsA = xa - TANGENT_TABLE_A[idx];,4,1,1,1,2,0,0,0,0,9,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2726,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,6,2,1,2,4,0,0,0,0,13,50,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2727,        epsB += xb - TANGENT_TABLE_B[idx];,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2729,        double temp = epsA + epsB;,0,0,0,0,0,0,0,0,0,0,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2730,        epsB = -(temp - epsA - epsB);,8,1,0,1,2,0,4,0,0,15,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2731,        epsA = temp;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2734,        temp = xa * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2735,        double ya = xa + temp - temp;,8,2,0,0,0,0,0,0,0,10,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2736,        double yb = xb + xa - ya;,14,2,0,0,0,0,0,0,0,17,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2737,        xa = ya;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2738,        xb += yb;,4,0,0,0,0,0,0,0,0,5,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2741,        if (idx == 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2744,            double denom = 1.0 / (1.0 + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,0,0,0,5,10,0,0,0,0,15,87,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2746,            ya = epsA * denom;,6,1,0,0,0,0,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2747,            yb = epsB * denom;,4,1,0,0,0,0,0,0,0,5,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2748,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2749,            double temp2 = xa * TANGENT_TABLE_A[idx];,0,3,0,1,2,0,6,0,0,9,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2750,            double za = 1.0 + temp2;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2751,            double zb = -(za - 1.0 - temp2);,6,1,0,1,2,0,0,0,0,8,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2752,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,0,0,0,2,4,0,0,0,0,6,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2753,            temp = za + temp2;,6,1,0,0,0,0,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2754,            zb += -(temp - za - temp2);,8,1,0,1,2,0,0,0,0,11,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2755,            za = temp;,4,2,0,0,0,0,8,0,0,14,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2757,            zb += xb * TANGENT_TABLE_B[idx];,20,3,1,1,2,2,0,0,0,31,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2758,            ya = epsA / za;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2760,            temp = ya * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2761,            final double yaa = (ya + temp) - temp;,10,3,0,1,2,1,0,0,0,14,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2762,            final double yab = ya - yaa;,8,1,0,0,0,1,0,0,0,10,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2764,            temp = za * 1073741824.0;,6,1,0,0,0,0,0,4,0,12,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2765,            final double zaa = (za + temp) - temp;,12,2,0,1,2,1,0,0,0,16,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2766,            final double zab = za - zaa;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2769,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,0,0,0,1,2,0,0,0,0,3,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2771,            yb += -epsA * zb / za / za;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2772,            yb += epsB / za;,8,1,0,0,0,0,0,0,0,11,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2776,        epsA = ya;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2777,        epsB = yb;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2780,        double epsA2 = epsA*epsA;,6,1,0,0,0,0,0,0,0,7,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2791,        yb = 0.07490822288864472;,2,0,0,0,0,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2792,        yb = yb * epsA2 + -0.09088450866185192;,6,2,0,0,0,0,0,0,0,10,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2793,        yb = yb * epsA2 + 0.11111095942313305;,0,0,0,0,0,0,0,2,0,2,38,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2794,        yb = yb * epsA2 + -0.1428571423679182;,6,2,0,0,0,0,0,0,0,10,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2795,        yb = yb * epsA2 + 0.19999999999923582;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2796,        yb = yb * epsA2 + -0.33333333333333287;,0,0,0,0,0,0,0,0,0,0,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2797,        yb = yb * epsA2 * epsA;,10,1,0,0,0,0,0,2,0,14,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2800,        ya = epsA;,6,1,0,0,0,0,0,0,0,9,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2802,        temp = ya + yb;,6,1,0,0,0,1,6,0,0,14,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2803,        yb = -(temp - ya - yb);,10,2,0,1,2,0,4,0,0,18,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2804,        ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2807,        yb += epsB / (1.0 + epsA * epsA);,18,3,0,1,2,1,0,0,0,23,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2813,        double za = EIGHTHES[idx] + ya;,4,1,1,1,2,0,0,0,0,9,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2814,        double zb = -(za - EIGHTHES[idx] - ya);,6,1,1,2,4,0,0,0,0,12,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2815,        temp = za + yb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2816,        zb += -(temp - za - yb);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2817,        za = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2819,        result = za + zb;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2820,        resultb = -(result - za - zb);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2822,        if (leftPlane) {,2,0,0,1,3,0,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2824,            final double pia = 1.5707963267948966*2.0;,2,1,0,0,0,1,0,0,0,4,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2825,            final double pib = 6.123233995736766E-17*2.0;,2,1,0,0,0,1,0,0,0,4,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2827,            za = pia - result;,6,1,0,0,0,0,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2828,            zb = -(za - pia + result);,10,2,0,1,2,1,8,0,0,23,26,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2829,            zb += pib - resultb;,6,1,0,0,0,0,0,0,0,8,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2831,            result = za + zb;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2832,            resultb = -(result - za - zb);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2836,        if (negate ^ leftPlane) {,4,1,0,1,3,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2837,            result = -result;,10,2,1,0,0,0,0,0,0,19,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2840,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2850,        if (x !=x || y != y) {,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2851,            return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2854,        if (y == 0.0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2855,            double result = x*y;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2856,            double invx = 1.0/x;,24,9,0,0,0,1,0,0,0,34,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2857,            double invy = 1.0/y;,10,2,0,0,0,1,0,0,0,13,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2859,            if (invx == 0.0) { // X is infinite,0,0,0,1,3,0,0,0,0,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2860,                if (x > 0) {,2,1,0,1,3,0,0,0,0,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2861,                    return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2863,                    return Math.PI;,4,0,0,0,0,1,0,0,0,4,15,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2867,            if (result != result) { // y must be infinite,0,0,0,1,3,0,0,0,0,4,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2868,                return x/y;,14,2,0,0,0,1,0,0,0,17,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2871,            if (x < 0.0 || invx < 0.0) {,10,4,0,1,3,0,0,0,0,15,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2872,                if (y < 0.0 || invy < 0.0) {,4,3,0,1,3,0,0,0,0,7,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2873,                    return -Math.PI;,10,1,0,0,0,1,0,0,0,13,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2875,                    return Math.PI;,10,0,0,0,0,1,2,0,0,13,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2878,                return result;,0,1,1,0,0,1,0,0,0,14,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2882,        if (y == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2883,            if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2884,                return Math.PI/4.0;,4,1,0,0,0,1,0,0,0,5,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2887,            if (x == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,4,0,0,12,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2888,                return Math.PI*3.0/4.0;,4,2,0,0,0,1,0,0,0,6,23,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2891,            return Math.PI/2.0;,4,1,0,0,0,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2894,        if (y == Double.NEGATIVE_INFINITY) {,16,4,0,1,3,0,0,0,0,21,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2895,            if (x == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2896,                return -Math.PI/4.0;,0,0,0,0,0,1,0,0,0,1,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2899,            if (x == Double.NEGATIVE_INFINITY) {,8,3,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2900,                return -Math.PI*3.0/4.0;,4,2,0,0,0,1,0,0,0,7,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2903,            return -Math.PI/2.0;,6,1,1,0,0,1,0,0,0,11,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2906,        if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2907,            if (y > 0.0 || 1/y > 0.0) {,0,0,0,1,3,0,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2908,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2911,            if (y < 0.0 || 1/y < 0.0) {,0,1,0,1,3,0,14,0,0,15,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2912,                return -0.0;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2916,        if (x == Double.NEGATIVE_INFINITY),0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2918,            if (y > 0.0 || 1/y > 0.0) {,10,4,0,1,3,0,0,0,0,14,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2919,                return Math.PI;,6,0,1,0,0,2,0,0,0,11,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2922,            if (y < 0.0 || 1/y < 0.0) {,4,4,0,1,3,0,0,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2923,                return -Math.PI;,4,0,0,0,0,1,0,0,0,5,16,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2927,        if (x == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2928,            if (y > 0.0 || 1/y > 0.0) {,0,0,0,1,3,0,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2929,                return Math.PI/2.0;,4,1,0,0,0,1,0,0,0,5,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2932,            if (y < 0.0 || 1/y < 0.0) {,4,4,0,1,3,0,0,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2933,                return -Math.PI/2.0;,0,0,0,0,0,1,0,0,0,1,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2937,        if (x > 8e298 || x < -8e298) { // This would cause split of x to fail,4,3,0,1,3,0,0,0,0,8,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2938,            x *= 9.31322574615478515625E-10;,18,0,0,0,0,0,6,0,0,25,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2939,            y *= 9.31322574615478515625E-10;,2,0,0,0,0,0,0,0,0,3,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2943,        double temp = x * 1073741824.0;,6,1,0,0,0,0,4,0,0,11,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2944,        final double xa = x + temp - temp;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2945,        final double xb = x - xa;,6,1,0,0,0,1,0,0,0,8,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2948,        final double r = y/x;,6,1,0,0,0,1,0,0,0,8,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2949,        temp = r * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2950,        double ra = r + temp - temp;,8,2,0,0,0,0,4,0,0,14,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2951,        double rb = r - ra;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2953,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,0,0,0,1,2,0,0,0,0,3,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2955,        temp = ra + rb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2956,        rb = -(temp - ra - rb);,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2957,        ra = temp;,8,0,0,0,0,1,0,2,0,11,10,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2960,"        double result = atan(ra, rb, x < 0);",4,1,0,1,2,0,6,0,0,11,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2962,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2970,      if (x != x) {,12,2,0,1,3,0,0,0,0,15,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2971,          return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2974,      if (x > 1.0 || x < -1.0) {,0,0,0,1,3,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2975,          return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2978,      if (x == 1.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2979,          return Math.PI/2.0;,14,2,0,0,0,1,0,0,0,17,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2982,      if (x == -1.0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2983,          return -Math.PI/2.0;,4,1,0,0,0,1,0,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2989,      double temp = x * 1073741824.0;,14,3,1,0,0,0,0,0,0,20,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2990,      final double xa = x + temp - temp;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2991,      final double xb = x - xa;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2994,      double ya = xa*xa;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2995,      double yb = xa*xb*2.0 + xb*xb;,10,3,0,0,0,0,0,0,0,13,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2998,      ya = -ya;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2999,      yb = -yb;,2,0,1,0,0,0,0,0,0,7,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3001,      double za = 1.0 + ya;,4,1,0,0,0,0,0,0,0,5,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3002,      double zb = -(za - 1.0 - ya);,6,1,0,1,2,0,0,0,0,8,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3004,      temp = za + yb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3005,      zb += -(temp - za - yb);,14,3,0,1,2,1,4,0,0,24,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3006,      za = temp;,4,1,0,0,0,0,18,0,0,24,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3010,      y = sqrt(za);,8,1,0,1,2,0,4,0,0,16,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3011,      temp = y * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3012,      ya = y + temp - temp;,8,2,0,0,0,0,0,0,0,11,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3013,      yb = y - ya;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3016,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0,0,0,2,4,0,0,0,0,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3019,      double dx = zb / (2.0*y);,10,2,0,1,2,1,6,2,0,21,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3022,      double r = x/y;,10,1,1,0,0,1,4,0,0,18,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3023,      temp = r * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3024,      double ra = r + temp - temp;,8,2,0,0,0,0,0,0,0,10,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3025,      double rb = r - ra;,8,1,0,0,0,0,6,0,0,15,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3027,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,22,9,0,1,2,0,0,0,0,32,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3028,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,18,5,1,0,0,0,2,0,0,33,65,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3030,      temp = ra + rb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3031,      rb = -(temp - ra - rb);,8,1,0,1,2,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3032,      ra = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3034,"      return atan(ra, rb, false);",4,0,0,1,2,2,6,2,0,14,27,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3042,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3043,          return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3046,      if (x > 1.0 || x < -1.0) {,0,0,0,1,3,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3047,          return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3050,      if (x == -1.0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3051,          return Math.PI;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3054,      if (x == 1.0) {,2,0,0,1,3,0,0,2,0,4,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3055,          return 0.0;,4,1,0,0,0,1,6,0,0,11,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3058,      if (x == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3059,          return Math.PI/2.0;,0,0,0,0,0,1,0,0,0,1,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3065,      double temp = x * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3066,      final double xa = x + temp - temp;,16,6,0,0,0,2,4,0,0,28,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3067,      final double xb = x - xa;,6,1,0,0,0,1,0,0,0,8,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3070,      double ya = xa*xa;,8,1,0,0,0,0,0,0,0,9,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3071,      double yb = xa*xb*2.0 + xb*xb;,16,5,1,0,0,0,8,0,0,35,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3074,      ya = -ya;,4,0,0,0,0,0,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3075,      yb = -yb;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3077,      double za = 1.0 + ya;,4,1,0,0,0,0,0,0,0,5,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3078,      double zb = -(za - 1.0 - ya);,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3080,      temp = za + yb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3081,      zb += -(temp - za - yb);,6,0,0,1,2,1,0,2,0,9,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3082,      za = temp;,12,0,0,0,0,1,0,0,0,14,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3085,      double y = sqrt(za);,2,0,0,1,2,0,4,0,0,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3086,      temp = y * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3087,      ya = y + temp - temp;,18,6,0,0,0,0,0,2,0,27,21,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3088,      yb = y - ya;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3091,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,4,0,0,2,4,0,0,0,0,4,47,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3094,      yb += zb / (2.0*y);,0,0,0,1,2,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3095,      y = ya+yb;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3096,      yb = -(y - ya - yb);,0,0,0,1,2,0,4,0,0,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3099,      double r = y/x;,8,1,0,0,0,0,0,0,0,9,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3100,      temp = r * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3101,      double ra = r + temp - temp;,8,2,0,0,0,0,0,0,0,10,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3102,      double rb = r - ra;,6,1,0,0,0,0,0,0,0,7,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3104,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,2,0,0,1,2,0,4,2,0,8,83,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3105,      rb += yb / x;  // Add in effect additional bits of sqrt.,0,0,0,0,0,0,0,0,0,0,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3107,      temp = ra + rb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3108,      rb = -(temp - ra - rb);,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3109,      ra = temp;,12,1,0,0,0,0,0,0,0,15,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3111,"      return atan(ra, rb, x<0);",4,1,0,1,2,1,6,0,0,11,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3120,      long inbits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,41,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3121,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,10,1,0,3,6,0,0,0,0,12,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3122,      boolean subnormal = false;,0,0,0,0,0,0,0,0,0,0,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3124,      if (exponent == -1023) {,0,0,0,1,3,0,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3125,          if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3126,              return x;,2,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3130,          subnormal = true;,6,0,0,0,0,0,2,0,0,10,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3131,          x *= 1.8014398509481984E16;  // 2^54,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3132,          inbits = Double.doubleToLongBits(x);,8,1,0,1,2,0,6,0,0,16,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3133,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,4,3,0,3,6,0,0,0,0,8,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3136,      if (exponent == 1024) {,0,0,0,1,3,0,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3138,          return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3142,      int exp3 = exponent / 3;,6,1,0,0,0,0,0,0,0,7,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3145,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,0,0,0,1,3,0,0,0,0,4,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3149,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,12,2,0,2,4,0,0,0,0,14,98,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3152,      double est = -0.010714690733195933;,2,0,0,0,0,0,0,0,0,3,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3153,      est = est * mant + 0.0875862700108075;,6,2,0,0,0,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3154,      est = est * mant + -0.3058015757857271;,0,0,0,0,0,0,0,0,0,0,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3155,      est = est * mant + 0.7249995199969751;,6,2,0,0,0,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3156,      est = est * mant + 0.5039018405998233;,0,0,0,0,0,0,4,0,0,4,38,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3158,      est *= CBRTTWO[exponent % 3 + 2];,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3163,      final double xs = x / (p2*p2*p2);,10,2,0,1,2,1,0,0,0,13,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3164,      est += (xs - est*est*est) / (3*est*est);,14,4,0,2,4,0,0,0,0,19,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3165,      est += (xs - est*est*est) / (3*est*est);,0,0,0,2,4,0,0,0,0,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3168,      double temp = est * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3169,      double ya = est + temp - temp;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3170,      double yb = est - ya;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3172,      double za = ya * ya;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3173,      double zb = ya * yb * 2.0 + yb * yb;,10,3,0,0,0,0,0,0,0,13,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3174,      temp = za * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3175,      double temp2 = za + temp - temp;,8,2,0,0,0,0,0,0,0,10,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3176,      zb += za - temp2;,6,1,0,0,0,0,0,0,0,8,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3177,      za = temp2;,4,0,0,0,0,0,0,0,0,5,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3179,      zb = za * yb + ya * zb + zb * yb;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3180,      za = za * ya;,6,1,0,0,0,0,0,0,0,8,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3182,      double na = xs - za;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3183,      double nb = -(na - xs + za);,10,2,0,1,2,0,0,0,0,14,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3184,      nb -= zb;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3186,      est += (na+nb)/(3*est*est);,12,4,0,2,4,0,0,0,0,17,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3189,      est *= p2;,4,0,0,0,0,0,0,2,0,7,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3191,      if (subnormal) {,2,0,0,1,3,0,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3192,          est *= 3.814697265625E-6;  // 2^-18,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3195,      return est;,2,1,0,0,0,1,0,0,0,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3205,        final double facta = 0.01745329052209854;,2,0,0,0,0,1,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3206,        final double factb = 1.997844754509471E-9;,0,0,0,0,0,0,0,0,0,0,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3208,        double temp = x * 1073741824.0;,4,1,0,0,0,0,0,0,0,5,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3209,        double xa = x + temp - temp;,8,2,0,0,0,0,0,0,0,10,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3210,        double xb = x - xa;,12,2,0,0,0,1,0,0,0,15,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3212,        return xb * factb + xb * facta + xa * factb + xa * facta;,16,7,0,0,0,1,0,0,0,23,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3222,        final double facta = 57.2957763671875;,2,0,0,0,0,1,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3223,        final double factb = 3.145894820876798E-6;,0,0,0,0,0,0,0,0,0,0,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3225,        double temp = x * 1073741824.0;,4,1,0,0,0,0,0,0,0,5,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3226,        double xa = x + temp - temp;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3227,        double xb = x - xa;,6,1,0,0,0,0,0,0,0,7,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3229,        return xb * factb + xb * facta + xa * factb + xa * facta;,24,7,0,0,0,1,0,0,0,32,57,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3238,        return (x < 0) ? -x : x;,8,2,1,1,2,2,0,2,0,15,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3247,        return (x < 0l) ? -x : x;,6,1,0,1,2,1,0,0,0,8,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3256,        return (x < 0.0f) ? -x : x;,6,1,0,1,2,1,0,2,0,11,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3265,        return (x < 0.0) ? -x : x;,14,1,0,1,2,3,2,0,0,20,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3275,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,0,0,0,3,6,1,0,0,0,10,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3297,        if (Double.isNaN(d) || Double.isInfinite(d)) {,12,7,0,3,7,0,0,0,0,19,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3298,            return d;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3299,        } else if (d == 0) {,2,1,0,1,4,0,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3300,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,14,1,0,1,2,1,0,0,0,16,62,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3306,        long bits     = Double.doubleToLongBits(d);,2,2,0,1,2,0,4,0,0,8,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3307,        long sign     = bits & 0x8000000000000000L;,6,1,0,0,0,0,4,2,0,13,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3308,        long exponent = bits & 0x7ff0000000000000L;,10,1,0,0,0,0,0,0,0,12,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3309,        long mantissa = bits & 0x000fffffffffffffL;,8,2,1,0,0,0,4,0,0,19,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3311,        if (d * (direction - d) >= 0) {,8,3,0,2,5,0,0,0,0,12,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3313,            if (mantissa == 0x000fffffffffffffL) {,0,0,0,1,3,0,0,0,0,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3314,                return Double.longBitsToDouble(sign |,0,0,0,0,1,1,0,0,0,2,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3317,                return Double.longBitsToDouble(sign |,2,1,0,0,1,1,4,0,0,7,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3322,            if (mantissa == 0L) {,2,1,0,1,3,0,0,0,0,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3323,                return Double.longBitsToDouble(sign |,0,0,0,0,1,1,0,0,0,2,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3327,                return Double.longBitsToDouble(sign |,0,0,0,0,1,1,0,0,0,2,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3341,        if (x != x) { // NaN,4,1,0,1,3,0,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3342,            return x;,10,2,1,0,0,2,0,0,0,15,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3345,        if (x >= 4503599627370496.0 || x <= -4503599627370496.0) {,4,3,0,1,3,0,0,0,0,8,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3346,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3349,        y = (long) x;,6,0,0,1,2,0,6,0,0,13,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3350,        if (x < 0 && y != x) {,6,3,0,1,3,0,0,0,0,9,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3351,            y--;,2,0,0,0,0,0,0,0,0,3,4,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3354,        if (y == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3355,            return x*y;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3358,        return (double) y;,0,0,0,1,2,1,0,0,0,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3368,        if (x != x) { // NaN,4,1,0,1,3,0,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3369,            return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3372,        y = floor(x);,2,0,0,1,2,0,4,0,0,7,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3373,        if (y == x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3374,            return y;,4,0,0,0,0,1,0,0,0,4,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3377,        y += 1.0;,2,0,0,0,0,0,0,0,0,3,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3379,        if (y == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3380,            return x*y;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3383,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3391,        double y = floor(x);,12,1,0,1,2,0,4,0,0,18,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3392,        double d = x - y;,6,1,0,0,0,0,0,0,0,7,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3394,        if (d > 0.5) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3395,            return y+1.0;,2,1,0,0,0,1,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3397,        if (d < 0.5) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3398,            return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3402,        long z = (long) y;,4,0,0,1,2,0,0,0,0,4,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3403,        return (z & 1) == 0 ? y : y + 1.0;,12,4,0,1,2,1,6,0,0,22,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3411,        return (long) floor(x + 0.5);,0,0,0,2,4,1,0,0,0,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3419,        return Math.round(x);,0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3428,        return (a <= b) ? a : b;,8,1,0,1,2,1,0,0,0,9,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3437,        return (a <= b) ? a : b;,14,2,0,1,2,2,0,0,0,17,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3446,        return (a <= b) ? a : (Float.isNaN(a + b) ? Float.NaN : b);,16,2,0,3,6,1,4,0,0,22,59,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3455,        return (a <= b) ? a : (Double.isNaN(a + b) ? Double.NaN : b);,0,0,0,3,6,1,4,0,0,4,61,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3473,        return (a <= b) ? b : a;,8,1,0,1,2,1,0,0,0,9,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3482,        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);,16,2,0,3,6,1,4,0,0,22,59,5,0.0,1,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3491,        return (a <= b) ? b : (Double.isNaN(a + b) ? Double.NaN : a);,18,2,0,3,6,2,8,0,0,29,61,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,149,                double scaleFactor = 1d;,0,0,0,0,0,0,0,0,0,0,24,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,150,                double lastScaleFactor = 1d;,2,0,0,0,0,0,8,0,0,11,28,3,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,151,                final int maxPower = 5;,2,0,0,0,0,1,0,0,0,3,23,8,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,152,"                final double scale = FastMath.max(a,b);",2,0,0,1,2,1,12,0,0,15,39,5,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,153,                if (scale <= 0) {  // Can't scale,0,0,0,1,3,0,0,0,0,4,33,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,158,                infinite = true;,0,0,0,0,0,0,0,0,0,0,16,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,159,                for (int i = 0; i < maxPower; i++) {,12,1,0,1,3,0,0,0,0,14,36,3,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,160,                    lastScaleFactor = scaleFactor;,10,1,0,0,0,0,0,0,0,12,30,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,161,                    scaleFactor *= scale;,0,0,0,0,0,0,0,0,0,0,21,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,162,                    if (a != 0.0 && a > b) {,8,0,0,1,3,1,10,0,0,20,24,0,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,169,                    infinite = Double.isInfinite(p2) || Double.isInfinite(q2);,0,0,0,2,4,0,0,0,0,6,58,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,170,                    if (!infinite) {,10,0,0,1,3,0,0,0,0,12,16,3,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,171,                        break;,0,0,0,0,0,0,0,0,0,0,6,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/FastMath,60,644,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,60,648,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.25,0,0
defect4j,math,org/apache/commons/math/special/Gamma,60,169,            ret = 0.0;,2,0,0,0,0,0,0,0,0,2,10,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,60,3491,        return (a <= b) ? b : (Double.isNaN(a + b) ? Double.NaN : a);,0,0,0,3,6,1,0,0,0,10,61,4,0.16667,0,0
defect4j,math,org/apache/commons/math/special/Gamma,60,173,"            ret = 1.0 - regularizedGammaQ(a, x, epsilon, maxIterations);",0,0,0,1,2,0,0,0,0,3,60,4,0.16667,0,0
defect4j,math,org/apache/commons/math/special/Erf,60,53,            ret = -ret;,4,0,0,0,0,0,0,0,0,6,11,6,0.16667,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,60,125,        final double dev = x - mean;,0,0,0,0,0,0,0,0,0,0,28,4,0.14286,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,60,127,        return 0.5 * (1.0 + Erf.erf((dev) /,4,0,0,1,4,1,0,0,0,5,35,10,0.14286,0,0
defect4j,math,org/apache/commons/math/special/Erf,60,51,"        double ret = Gamma.regularizedGammaP(0.5, x * x, 1.0e-15, 10000);",0,0,0,1,2,0,0,0,0,3,65,4,0.14286,0,0
defect4j,math,org/apache/commons/math/special/Erf,60,52,        if (x < 0) {,8,1,0,1,3,0,0,0,0,11,12,0,0.14286,0,0
defect4j,math,org/apache/commons/math/special/Erf,60,55,        return ret;,0,0,0,0,0,1,0,0,0,1,11,4,0.14286,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,47,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.07692,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,129,        double p0 = 1.0;,0,0,0,0,0,0,0,0,0,0,16,4,0.07692,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,130,"        double p1 = getA(0, x);",0,0,0,1,2,0,0,0,0,3,23,4,0.07692,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,131,        double q0 = 0.0;,2,0,0,0,0,0,0,0,0,2,16,5,0.07692,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,132,        double q1 = 1.0;,0,0,0,0,0,0,0,0,0,0,16,4,0.07692,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,133,        double c = p1 / q1;,0,0,0,0,0,0,0,0,0,0,19,4,0.07692,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,134,        int n = 0;,4,0,0,0,0,1,0,4,0,9,10,4,0.07692,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,135,        double relativeError = Double.MAX_VALUE;,4,0,0,0,0,0,0,0,0,5,40,5,0.07692,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,136,        while (n < maxIterations && relativeError > epsilon) {,8,3,0,1,3,0,0,0,0,11,54,4,0.07692,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,137,            ++n;,6,0,0,0,0,0,10,2,0,18,4,3,0.07692,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,138,"            double a = getA(n, x);",6,0,0,1,2,0,6,0,0,13,22,5,0.07692,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,139,"            double b = getB(n, x);",0,0,0,1,2,0,0,0,0,3,22,4,0.07692,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,140,            double p2 = a * p1 + b * p0;,10,3,0,0,0,0,0,0,0,13,28,7,0.07692,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,141,            double q2 = a * q1 + b * q0;,0,0,0,0,0,0,0,0,0,0,28,4,0.07692,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,142,            boolean infinite = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.07692,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,143,            if (Double.isInfinite(p2) || Double.isInfinite(q2)) {,0,1,1,3,7,0,0,0,0,14,53,6,0.07692,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,176,            if (infinite) {,8,4,0,1,3,0,0,0,0,12,15,5,0.07692,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,183,            double r = p2 / q2;,0,0,0,0,0,0,0,0,0,0,19,4,0.07692,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,185,            if (Double.isNaN(r)) {,0,0,0,2,5,0,12,0,0,12,22,3,0.07692,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,190,            relativeError = FastMath.abs(r / c - 1.0);,0,0,0,1,2,0,0,0,0,3,42,4,0.07692,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,193,            c = p2 / q2;,0,0,0,0,0,0,0,0,0,0,12,4,0.07692,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,194,            p0 = p1;,4,1,0,0,0,0,0,0,0,5,8,8,0.07692,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,195,            p1 = p2;,4,0,0,0,0,0,0,0,0,5,8,6,0.07692,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,196,            q0 = q1;,14,1,0,0,0,0,0,0,0,18,8,1,0.07692,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,197,            q1 = q2;,0,0,0,0,0,0,0,0,0,0,8,4,0.07692,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,198,        },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,200,        if (n >= maxIterations) {,10,2,0,1,3,0,0,0,0,13,25,3,0.07692,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,206,        return c;,4,2,1,0,0,1,10,0,0,25,9,3,0.07692,0,0
defect4j,math,org/apache/commons/math/special/Gamma,60,253,            ContinuedFraction cf = new ContinuedFraction() {,2,0,0,1,3,0,0,4,0,6,48,8,0.07692,0,0
defect4j,math,org/apache/commons/math/special/Gamma,60,257,                    return ((2.0 * n) + 1.0) - a + x;,6,4,0,2,4,1,0,0,0,10,33,14,0.07692,0,0
defect4j,math,org/apache/commons/math/special/Gamma,60,262,                    return n * (a - n);,8,2,0,1,2,1,0,0,0,11,19,0,0.07692,0,0
defect4j,math,org/apache/commons/math/special/Gamma,60,243,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,0,0,0,5,11,0,0,0,0,16,68,4,0.07692,0,0
defect4j,math,org/apache/commons/math/special/Gamma,60,245,        } else if (x == 0.0) {,0,0,0,1,4,0,0,0,0,5,22,4,0.07692,0,0
defect4j,math,org/apache/commons/math/special/Gamma,60,247,        } else if (x < a + 1.0) {,0,0,0,1,4,0,0,0,0,5,25,4,0.07692,0,0
defect4j,math,org/apache/commons/math/special/Gamma,60,253,            ContinuedFraction cf = new ContinuedFraction() {,0,0,0,1,3,0,0,0,0,4,48,4,0.07692,0,0
defect4j,math,org/apache/commons/math/special/Gamma,60,266,"            ret = 1.0 / cf.evaluate(x, epsilon, maxIterations);",2,1,0,1,2,0,10,0,0,14,51,8,0.07692,0,0
defect4j,math,org/apache/commons/math/special/Gamma,60,267,            ret = FastMath.exp(-x + (a * FastMath.log(x)) - logGamma(a)) * ret;,12,4,0,4,8,1,20,0,0,40,67,3,0.07692,0,0
defect4j,math,org/apache/commons/math/special/Gamma,60,270,        return ret;,0,0,0,0,0,1,0,0,0,1,11,4,0.07692,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,387,        return new IllegalArgumentException() {,0,0,0,1,3,1,0,2,0,2,39,6,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,316,    private LocalizedFormats(final String sourceFormat) {,4,0,0,1,3,2,0,2,0,8,53,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,317,        this.sourceFormat = sourceFormat;,2,0,1,0,0,0,4,0,0,10,33,3,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,318,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",4,0,0,5,10,3,0,0,0,8,67,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,45,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",4,0,0,4,8,0,8,0,0,13,94,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,46,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",2,0,0,1,2,0,0,0,0,3,41,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,47,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",0,0,0,1,2,0,0,0,0,3,95,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,48,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",0,0,0,1,2,0,0,0,0,3,60,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,49,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",2,0,0,1,2,0,0,0,0,3,54,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,50,"    BANDWIDTH_OUT_OF_INTERVAL(""bandwidth must be in the interval [0,1], but got {0}""),",0,0,0,3,6,0,0,0,0,9,82,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,51,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n,k), got n = {0}, k = {1}""),",2,1,0,4,8,0,6,0,0,9,107,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,52,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n,k), got n = {0}""),",2,0,0,3,6,0,0,0,0,3,92,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,53,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",2,0,0,1,2,0,0,0,0,3,123,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,54,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",12,1,0,1,2,0,0,0,0,16,89,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,55,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",0,0,0,2,4,0,0,0,0,6,108,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",12,3,0,1,2,1,6,0,0,24,100,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,57,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",2,0,0,2,4,0,0,0,0,3,94,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,58,"    CANNOT_CONVERT_OBJECT_TO_FRACTION(""cannot convert given object to a fraction number: {0}""),",0,0,0,2,4,0,0,0,0,6,91,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",0,0,0,3,6,0,0,0,0,9,97,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",4,0,0,2,4,0,0,0,0,7,83,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",0,0,0,2,4,0,0,0,0,6,86,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",2,0,0,2,4,0,0,0,0,3,87,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",0,0,0,1,2,0,0,0,0,3,84,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",2,0,0,1,2,0,6,0,0,9,131,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",2,0,0,1,2,1,0,0,0,3,75,3,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",2,0,1,2,4,1,0,0,0,7,78,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",10,1,1,1,2,1,0,0,0,16,95,3,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",0,0,0,2,4,0,0,0,0,6,74,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",2,0,0,1,2,0,0,0,0,3,55,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",0,0,0,3,6,0,0,0,0,9,79,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",2,0,0,2,4,0,0,0,0,3,115,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,78,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,74,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",8,1,0,2,4,0,2,0,0,13,112,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,75,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",2,1,0,2,4,0,0,0,0,3,86,6,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,76,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",0,0,0,5,10,0,0,0,0,15,290,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",0,0,0,3,6,0,8,0,0,8,263,5,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,78,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",8,4,0,1,2,0,12,0,0,28,52,5,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,79,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",4,0,1,3,6,1,0,0,0,7,109,6,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,80,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",0,0,0,3,6,0,0,0,0,9,81,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,81,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",0,0,0,1,2,0,6,0,0,6,49,5,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,82,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",2,0,0,5,10,0,0,0,0,3,71,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,83,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,84,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",0,0,0,1,2,0,0,0,0,3,54,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,85,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",4,0,0,2,4,1,10,0,0,16,119,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,86,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",0,0,0,1,2,0,0,0,0,3,51,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,87,"    DUPLICATED_ABSCISSA(""Abscissa {0} is duplicated at both indices {1} and {2}""),",0,0,0,4,8,0,0,0,0,12,78,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,88,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",4,0,0,1,2,0,0,0,0,6,88,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,89,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",2,0,0,1,2,0,0,0,0,3,71,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,90,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",2,0,0,1,2,0,0,0,0,3,65,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,91,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",0,0,0,1,2,0,0,0,0,3,77,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,92,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",4,0,1,4,8,0,0,0,0,7,78,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,93,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",2,0,0,3,6,1,2,0,0,5,81,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,94,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",0,0,0,1,2,0,0,0,0,3,53,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,95,"    EVALUATION_FAILED(""evaluation failed for argument = {0}""),",2,0,0,2,4,0,0,0,0,2,58,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,96,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",2,0,0,3,6,0,0,2,0,4,77,13,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,97,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",6,0,0,2,4,0,0,0,0,9,69,3,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,98,"    FAILED_BRACKETING(""number of iterations={0}, maximum iterations={1}, initial={2}, lower bound={3}, upper bound={4}, final a value={5}, final b value={6}, f(a)={7}, f(b)={8}""),",0,0,0,12,24,0,0,0,0,36,175,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,99,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",18,7,1,3,6,0,16,0,0,50,85,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,100,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,79,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,101,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",0,0,0,2,4,0,0,0,0,6,54,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,102,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",0,0,0,2,4,0,0,0,0,6,73,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,103,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",2,0,0,5,10,0,0,0,0,3,85,9,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,104,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",8,1,0,1,2,1,2,2,0,15,62,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,105,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",2,0,0,1,2,0,10,0,0,13,54,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,106,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,3,56,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,107,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",10,1,0,4,8,0,8,0,0,20,56,3,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,108,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",2,0,0,2,4,0,0,0,0,3,76,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,109,"    IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO(""identical abscissas x[{0}] == x[{1}] == {2} cause division by zero""),",0,0,0,6,12,0,0,0,0,18,107,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,110,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",4,0,0,3,6,1,0,2,0,7,95,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,111,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",2,0,0,3,6,0,0,0,0,3,50,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,112,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",0,0,0,5,10,0,0,0,0,15,64,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,113,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",2,0,0,3,6,0,0,0,0,3,79,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,114,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",4,0,0,1,2,3,0,0,0,8,59,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,115,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",0,0,0,3,6,0,0,0,0,9,72,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,116,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {0} after final column {1}""),",0,0,0,3,6,0,0,0,0,9,79,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,117,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {0} after final row {1}""),",0,0,0,3,6,0,8,0,0,8,67,7,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,118,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",0,0,0,4,8,0,0,0,0,12,121,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,119,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",4,0,1,2,4,1,4,0,0,14,103,3,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,120,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,121,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",0,0,0,3,6,0,0,0,0,9,75,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,122,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",2,0,0,3,6,0,0,0,0,3,105,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,123,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",2,0,0,3,6,0,0,0,0,3,83,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,124,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT(""{0} method needs at least one previous point""),",0,0,0,2,4,0,0,0,0,6,101,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,125,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",0,0,0,2,4,0,0,0,0,6,66,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,126,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",0,0,0,4,8,0,0,0,0,12,112,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,127,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),",0,0,0,4,8,0,0,0,0,12,124,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,128,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",2,0,0,3,6,0,6,4,0,12,72,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,129,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",2,0,0,2,4,0,0,0,0,3,71,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,130,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),",0,0,0,4,8,0,0,0,0,12,141,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,131,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",2,0,0,26,52,0,0,0,0,3,165,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,132,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",0,0,0,1,2,0,0,0,0,3,41,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,133,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,2,56,5,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,134,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",18,6,1,4,8,1,0,0,0,30,56,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,135,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),",0,0,0,1,2,0,0,0,0,3,101,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,136,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",2,0,0,1,2,0,0,0,0,3,67,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,137,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",0,0,0,5,10,0,0,0,0,15,111,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,138,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",2,1,0,5,10,0,4,0,0,8,111,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,139,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",2,0,0,1,2,0,0,0,0,3,70,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,140,"    EVALUATIONS(""evaluations""), /* keep */",8,1,0,1,2,0,0,0,0,11,38,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,141,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",0,0,0,3,6,0,0,0,0,9,62,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,142,"    MAX_EVALUATIONS_EXCEEDED(""maximal number of evaluations ({0}) exceeded""),",4,0,0,3,6,0,6,2,0,13,73,3,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,143,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",2,0,0,3,6,0,0,0,0,3,71,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,144,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({0,number,0.00E00}) reached, integration needs {1,number,0.00E00}""),",2,0,0,4,8,0,0,0,0,3,132,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,145,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",2,0,0,3,6,0,8,0,0,11,156,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,146,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",2,0,0,2,4,0,0,0,0,3,43,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,147,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",2,0,0,1,2,0,0,2,0,5,49,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,148,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",2,0,0,2,4,0,0,0,0,3,92,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,149,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",2,0,0,2,4,0,0,0,0,3,55,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,150,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",4,0,0,5,10,1,6,2,0,14,68,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,151,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",2,0,0,3,6,0,0,0,0,3,58,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,152,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,79,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,153,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,73,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,154,"    NEGATIVE_ROBUSTNESS_ITERATIONS(""the number of robustness iterations must be non-negative, but got {0}""),",2,0,0,2,4,0,0,0,0,3,104,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,155,"    START_POSITION(""start position ({0})""), /* keep */",10,0,0,3,6,0,0,0,0,11,50,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,156,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge for value {0}""),",0,0,0,2,4,0,0,0,0,6,101,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,157,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,158,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",8,1,0,2,4,0,2,0,0,13,81,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,159,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,89,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,160,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,89,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,161,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",0,0,0,3,6,0,0,0,0,9,85,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,162,"    NON_SQUARE_MATRIX(""a {0}x{1} matrix was provided instead of a square matrix""),",2,0,0,3,6,0,0,0,0,3,78,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,163,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",2,0,0,1,2,0,0,0,0,3,60,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,164,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",10,2,0,1,2,0,0,0,0,13,41,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,165,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",8,0,0,5,10,0,0,2,0,11,93,3,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,166,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,167,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,88,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,168,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),",4,0,0,5,10,0,0,0,0,6,113,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,169,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",2,0,0,3,6,0,0,0,0,3,97,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,170,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,171,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,88,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,172,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",2,0,0,5,10,0,0,0,0,3,105,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,173,"    NOT_POSITIVE_ALPHA(""alpha must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,174,"    NOT_POSITIVE_BETA(""beta must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,49,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,175,"    NOT_POSITIVE_COLUMNDIMENSION(""invalid column dimension: {0} (must be positive)""),",2,0,0,3,6,3,0,0,0,5,81,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,176,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""),",0,0,0,1,2,0,0,0,0,3,61,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,177,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,178,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",2,0,0,3,6,0,0,0,0,3,66,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,179,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",6,1,0,3,6,0,0,0,0,8,65,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,180,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,53,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,181,"    LENGTH(""length ({0})""), /* keep */",2,1,0,3,6,0,14,0,0,18,34,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,182,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,49,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,183,"    MEAN(""mean ({0})""), /* keep */",4,1,0,3,6,0,0,0,0,6,30,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,184,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",2,0,0,2,4,0,0,0,0,3,72,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,185,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,56,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,186,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",2,0,0,3,6,0,0,0,0,3,65,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,187,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",0,0,0,2,5,0,0,0,0,7,53,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,188,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,69,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,189,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,71,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,190,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,76,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,191,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,192,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,193,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,194,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,77,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,195,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,196,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,197,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",2,1,1,3,6,0,0,0,0,8,63,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,198,"    NOT_POWER_OF_TWO(""{0} is not a power of 2""),",2,0,0,2,4,0,0,0,0,3,44,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,199,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",0,0,0,2,4,0,0,0,0,6,87,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,200,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",2,0,0,2,4,0,0,0,0,3,62,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,201,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,202,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,107,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,203,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",2,0,0,1,2,0,0,0,0,3,79,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,204,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,205,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */",6,0,0,6,12,0,0,0,0,8,107,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,206,"    NOT_SUBTRACTION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not subtraction compatible""),",0,0,0,5,10,0,0,0,0,15,99,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,207,"    NOT_SYMMETRIC_MATRIX(""not symmetric matrix""),",2,0,0,1,2,0,0,0,0,3,45,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,208,"    NO_BIN_SELECTED(""no bin selected""),",2,0,0,1,2,0,0,0,0,3,35,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,209,"    NO_CONVERGENCE_WITH_ANY_START_POINT(""none of the {0} start points lead to convergence""), /* keep */",0,0,0,2,4,0,0,0,0,6,99,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,210,"    NO_DATA(""no data""), /* keep */",2,0,0,1,2,0,0,0,0,3,30,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,211,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",2,0,0,4,8,0,0,0,0,3,82,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,212,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),",0,0,0,1,2,0,0,0,0,3,99,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,213,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",2,0,0,1,2,0,0,0,0,3,45,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,214,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""), /* keep */",2,0,0,1,2,0,0,0,0,3,62,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,215,"    NO_RESULT_AVAILABLE(""no result available""),",2,0,0,1,2,0,0,0,0,3,43,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,216,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",2,0,0,6,12,0,0,0,0,3,75,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,217,"    NULL_NOT_ALLOWED(""null is not allowed""), /* keep */",0,0,0,1,2,0,0,0,0,3,51,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,218,"    COVARIANCE_MATRIX(""covariance matrix""), /* keep */",0,0,0,1,2,0,0,0,0,3,50,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,219,"    DENOMINATOR(""denominator""), /* keep */",4,0,0,1,2,0,0,0,0,5,38,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,220,"    DENOMINATOR_FORMAT(""denominator format""), /* keep */",2,0,0,1,2,0,0,0,0,3,52,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,221,"    FRACTION(""fraction""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,222,"    FUNCTION(""function""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,223,"    IMAGINARY_FORMAT(""imaginary format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,224,"    INPUT_ARRAY(""input array""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,225,"    NUMERATOR(""numerator""), /* keep */",2,0,0,1,2,0,0,0,0,4,34,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,226,"    NUMERATOR_FORMAT(""numerator format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,227,"    OBJECT_TRANSFORMATION(""conversion exception in transformation""), /* keep */",0,0,0,1,2,0,0,0,0,3,75,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,228,"    REAL_FORMAT(""real format""), /* keep */",8,0,0,1,2,1,6,2,0,18,38,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,229,"    WHOLE_FORMAT(""whole format""), /* keep */",2,0,0,1,2,0,0,0,0,3,40,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,230,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,68,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,231,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,69,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,232,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,97,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,233,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,98,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,234,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),",0,0,0,5,10,0,0,0,0,15,127,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,235,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",4,1,1,2,4,0,0,0,0,10,87,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,236,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),",0,0,0,4,8,0,0,0,0,12,150,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,237,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",12,2,0,2,4,0,0,0,0,16,76,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,238,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",0,0,0,2,4,0,0,0,0,6,84,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,239,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),",2,0,0,3,6,0,0,0,0,3,87,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,240,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",2,0,0,4,8,0,0,0,0,3,101,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,241,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",2,0,0,5,10,0,0,0,0,3,150,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,242,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),",0,0,0,6,12,0,0,0,0,18,96,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,243,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */",2,0,0,5,10,0,0,0,0,3,62,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,244,"    OVERFLOW_IN_FRACTION(""overflow in fraction {0}/{1}, cannot negate""),",2,0,0,3,6,0,8,0,0,12,68,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,245,"    OVERFLOW_IN_ADDITION(""overflow in addition: {0} + {1}""),",0,0,0,3,6,0,0,0,0,9,56,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,246,"    OVERFLOW_IN_SUBTRACTION(""overflow in subtraction: {0} - {1}""),",2,0,0,3,6,0,0,0,0,3,62,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,247,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",2,0,1,3,6,0,0,0,0,8,108,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,248,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),",10,2,0,3,6,0,0,0,0,14,99,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,249,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,91,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,250,"    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(""number of polynomial interpolants must match the number of segments ({0} != {1} - 1)""),",2,0,0,4,8,0,0,0,0,3,130,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,251,"    POPULATION_LIMIT_NOT_POSITIVE(""population limit has to be positive""),",10,1,0,1,2,0,0,0,0,13,69,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,252,"    POSITION_SIZE_MISMATCH_INPUT_ARRAY(""position {0} and size {1} don't fit to the size of the input array {2}""),",6,2,0,4,8,0,0,0,0,9,109,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,253,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",6,0,0,4,8,0,0,2,0,9,90,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,254,"    PROPAGATION_DIRECTION_MISMATCH(""propagation direction mismatch""),",0,0,0,1,2,0,0,0,0,3,65,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,255,"    RANDOMKEY_MUTATION_WRONG_CLASS(""RandomKeyMutation works only with RandomKeys, not {0}""),",2,0,0,2,4,0,0,0,0,3,88,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,256,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",2,0,0,1,2,0,0,0,0,3,77,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,257,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),",2,0,0,3,6,0,0,0,0,3,75,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,258,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,72,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,259,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",2,0,0,7,14,0,0,0,0,3,126,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,260,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,98,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,261,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),",4,0,0,5,10,0,0,0,0,6,113,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,262,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",2,0,0,1,2,0,0,0,0,3,66,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,263,"    SIMPLE_MESSAGE(""{0}""),",2,0,0,2,4,0,0,0,0,3,22,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,264,"    SINGULAR_MATRIX(""matrix is singular""),",0,0,0,1,2,0,0,0,0,3,38,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,265,"    SUBARRAY_ENDS_AFTER_ARRAY_END(""subarray ends after array end""),",2,0,0,1,2,0,0,0,0,3,63,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,266,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),",0,0,0,3,6,0,0,0,0,9,87,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,267,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),",2,0,0,3,6,0,0,0,0,3,97,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,268,"    TOO_SMALL_BANDWIDTH(""the bandwidth must be large enough to accomodate at least 2 points. There are {0}  data points, and bandwidth must be at least {1}  but it is only {2}""),",0,0,0,4,8,0,0,0,0,12,174,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,269,"    TOO_SMALL_COST_RELATIVE_TOLERANCE(""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible""),",4,0,0,3,6,0,0,0,0,5,136,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,270,"    TOO_SMALL_INTEGRATION_INTERVAL(""too small integration interval: length = {0}""),",2,0,0,2,4,0,0,0,0,3,79,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,271,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),",2,0,0,3,6,0,0,0,0,3,120,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,272,"    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible""),",2,0,0,3,6,0,0,0,0,3,156,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,273,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),",4,0,0,2,4,0,0,0,0,5,76,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,274,"    TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED(""two or more values required in each category, one has {0}""),",2,0,0,2,4,0,0,0,0,3,101,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,275,"    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(""unable to bracket optimum in line search""),",2,0,0,1,2,0,0,0,0,3,85,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,276,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),",2,0,0,1,2,0,0,0,0,3,97,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,277,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),",2,0,0,1,2,0,0,0,0,3,95,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,278,"    UNABLE_TO_ORTHOGONOLIZE_MATRIX(""unable to orthogonalize matrix in {0} iterations""),",4,3,0,2,4,0,12,0,0,19,83,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,279,"    UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN(""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix""),",0,0,0,3,6,0,0,0,0,9,117,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,280,"    UNABLE_TO_SOLVE_SINGULAR_PROBLEM(""unable to solve: singular problem""),",2,0,0,1,2,0,0,0,0,3,70,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,281,"    UNBOUNDED_SOLUTION(""unbounded solution""),",2,0,0,1,2,0,0,0,0,3,41,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,282,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),",4,1,0,20,40,1,0,0,0,6,118,3,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,283,"    UNPARSEABLE_3D_VECTOR(""unparseable 3D vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,56,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,284,"    UNPARSEABLE_COMPLEX_NUMBER(""unparseable complex number: \""{0}\""""),",10,1,1,2,4,0,0,0,0,17,66,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,285,"    UNPARSEABLE_FRACTION_NUMBER(""unparseable fraction number: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,68,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,286,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),",0,0,0,2,4,0,0,0,0,6,60,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,287,"    UNSUPPORTED_EXPANSION_MODE(""unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})""),",0,0,0,8,16,0,0,0,0,24,106,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,288,"    UNSUPPORTED_OPERATION(""unsupported operation""), /* keep */",0,0,0,1,2,0,0,0,0,3,58,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,289,"    URL_CONTAINS_NO_DATA(""URL {0} contains no data""),",2,0,0,2,4,0,0,0,0,3,49,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,290,"    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(""{0} values have been added before statistic is configured""),",0,0,0,2,4,0,0,0,0,6,103,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,291,"    VECTOR_LENGTH_MISMATCH(""vector length mismatch: got {0} but expected {1}""),",2,0,0,3,6,0,0,0,0,3,75,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,292,"    VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT(""vector must have at least one element""),",0,0,0,1,2,0,0,0,0,3,79,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,293,"    WEIGHT_AT_LEAST_ONE_NON_ZERO(""weigth array must contain at least one non-zero value""),",0,0,0,1,2,0,0,0,0,3,86,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,294,"    WRONG_BLOCK_LENGTH(""wrong array shape (block length = {0}, expected {1})""),",2,0,0,4,8,0,0,0,0,3,75,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,295,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),",2,0,0,3,6,0,0,0,0,3,64,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,296,"    NUMBER_OF_POINTS(""number of points ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,54,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,297,"    ZERO_DENOMINATOR(""denominator must be different from 0""),",0,0,0,1,2,0,0,0,0,3,57,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,298,"    ZERO_DENOMINATOR_IN_FRACTION(""zero denominator in fraction {0}/{1}""),",2,0,0,3,6,0,0,0,0,3,69,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,299,"    ZERO_FRACTION_TO_DIVIDE_BY(""the fraction to divide by must not be zero: {0}/{1}""),",2,0,0,3,6,0,0,0,0,3,82,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,300,"    ZERO_NORM(""zero norm""),",2,0,0,1,2,0,2,0,0,5,23,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,301,"    ZERO_NORM_FOR_ROTATION_AXIS(""zero norm for rotation axis""),",0,0,0,1,2,0,0,0,0,3,59,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,302,"    ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR(""zero norm for rotation defining vector""),",2,0,0,1,2,0,0,0,0,3,81,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,303,"    ZERO_NOT_ALLOWED(""zero not allowed here"");",8,1,0,1,2,0,0,0,0,11,42,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,39,public enum LocalizedFormats implements Localizable {,2,0,0,0,1,1,0,2,0,5,53,1,1.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,387,        return new IllegalArgumentException() {,0,0,0,1,3,1,0,0,0,5,39,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,35,    private static final double EXP_INT_TABLE_A[] = new double[1500];,0,0,0,2,4,0,0,0,0,6,65,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,40,    private static final double EXP_INT_TABLE_B[] = new double[1500];,2,0,0,2,4,3,6,0,0,11,65,1,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,45,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,6,1,0,2,4,0,8,0,0,16,66,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,50,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,4,0,0,2,4,3,0,0,0,8,66,0,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,53,    private static final double FACT[] = new double[20];,2,0,0,2,4,3,0,0,0,5,52,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,56,    private static final double LN_MANT[][] = new double[1024][];,0,0,0,4,8,0,0,0,0,12,61,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,65,    private static final double LN_SPLIT_COEF[][] = {,2,0,0,2,5,0,0,0,0,3,49,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,85,    private static final double LN_QUICK_COEF[][] = {,10,2,1,2,5,3,0,0,0,25,49,1,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,98,    private static final double LN_HI_PREC_COEF[][] = {,2,1,0,2,5,0,0,0,0,3,51,7,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,108,    private static final double SINE_TABLE_A[] = new double[14];,8,1,0,2,4,3,0,0,0,13,60,1,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,111,    private static final double SINE_TABLE_B[] = new double[14];,2,0,0,2,4,3,0,0,0,5,60,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,114,    private static final double COSINE_TABLE_A[] = new double[14];,8,1,1,2,4,3,8,0,0,23,62,1,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,117,    private static final double COSINE_TABLE_B[] = new double[14];,6,1,1,2,4,0,4,0,0,16,62,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,120,    private static final double TANGENT_TABLE_A[] = new double[14];,2,0,0,2,4,3,8,0,0,13,63,1,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,123,    private static final double TANGENT_TABLE_B[] = new double[14];,4,0,0,2,4,6,0,0,0,10,63,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,126,    private static long RECIP_2PI[] = new long[] {,8,2,0,2,5,0,6,0,0,17,46,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,147,    private static long PI_O_4_BITS[] = new long[] {,0,0,0,2,5,0,0,0,0,7,48,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,155,"    private static final double EIGHTHES[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0,0,0,2,4,0,0,0,0,6,127,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,158,"    private static final double CBRTTWO[] = { 0.6299605249474366,",2,0,0,1,3,3,0,0,0,5,61,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,169,        FACT[0] = 1.0;,0,0,1,1,2,0,0,0,0,3,14,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,170,        for (i = 1; i < 20; i++) {,6,1,0,1,3,0,0,0,0,9,26,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,171,            FACT[i] = FACT[i-1] * i;,4,2,1,2,4,0,0,0,0,13,24,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,174,        double tmp[] = new double[2];,2,0,0,2,4,0,0,0,0,2,29,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,175,        double recip[] = new double[2];,6,0,0,2,4,0,0,0,0,6,31,1,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,178,        for (i = 0; i < 750; i++) {,0,0,0,1,3,0,0,0,0,4,27,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,179,"            expint(i, tmp);",0,0,0,1,2,0,0,0,0,3,15,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,180,            EXP_INT_TABLE_A[i+750] = tmp[0];,4,1,1,2,4,3,0,0,0,13,32,1,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,181,            EXP_INT_TABLE_B[i+750] = tmp[1];,0,0,0,2,4,0,0,0,0,6,32,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,183,            if (i != 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,185,"                splitReciprocal(tmp, recip);",0,0,0,1,2,0,0,0,0,3,28,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,186,                EXP_INT_TABLE_A[750-i] = recip[0];,0,0,0,2,4,0,0,0,0,6,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,187,                EXP_INT_TABLE_B[750-i] = recip[1];,2,1,1,2,4,0,0,0,0,8,34,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,192,        for (i = 0; i < 1025; i++) {,0,0,0,1,3,0,0,0,0,4,28,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,193,"            slowexp(i/1024.0, tmp);",12,2,0,1,2,0,4,0,0,19,23,1,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,194,            EXP_FRAC_TABLE_A[i] = tmp[0];,0,0,1,2,4,0,0,0,0,7,29,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,195,            EXP_FRAC_TABLE_B[i] = tmp[1];,10,1,0,2,4,0,0,0,0,12,29,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,199,        for (i = 0; i < 1024; i++) {,6,1,0,1,3,0,0,0,0,9,28,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,200,            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,0,0,0,4,8,0,0,0,0,12,79,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,201,            LN_MANT[i] = slowLog(d);,0,0,0,2,4,0,0,0,0,6,24,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,205,        buildSinCosTables();,2,2,0,1,2,0,0,0,0,4,20,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,206,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,219,        return Math.sqrt(a);,0,0,0,1,2,1,0,0,0,4,20,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,680,        final double xs[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,681,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,682,        final double facts[] = new double[2];,2,0,0,2,4,1,0,0,0,3,37,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,683,        final double as[] = new double[2];,6,0,0,2,4,1,14,0,0,21,34,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,684,"        split(x, xs);",0,0,0,1,2,0,0,0,0,3,13,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,685,        ys[0] = ys[1] = 0.0;,2,1,1,2,4,0,6,0,0,15,20,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,687,        for (int i = 19; i >= 0; i--) {,16,2,0,1,3,0,0,0,0,20,31,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,688,"            splitMult(xs, ys, as);",0,0,1,1,2,0,0,0,0,7,22,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,689,            ys[0] = as[0];,0,0,0,2,4,0,0,0,0,6,14,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,690,            ys[1] = as[1];,0,0,0,2,4,0,0,0,0,6,14,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,692,"            split(FACT[i], as);",0,0,1,2,4,0,4,0,0,8,19,7,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,693,"            splitReciprocal(as, facts);",2,0,1,1,2,0,6,0,0,14,27,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,695,"            splitAdd(ys, facts, as);",4,0,0,1,2,0,0,0,0,5,24,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,696,            ys[0] = as[0];,2,0,0,2,4,0,2,4,0,8,14,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,697,            ys[1] = as[1];,2,1,1,2,4,0,6,0,0,14,14,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,700,        if (result != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,701,            result[0] = ys[0];,0,0,0,2,4,0,0,0,0,6,18,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,702,            result[1] = ys[1];,4,0,0,2,4,0,0,0,0,5,18,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,705,        return ys[0] + ys[1];,2,0,1,2,4,1,0,0,0,5,21,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,714,        if (d < 8e298 && d > -8e298) {,4,3,0,1,3,0,0,0,0,8,30,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,715,            final double a = d * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,716,            split[0] = (d + a) - a;,0,0,0,2,4,0,0,0,0,6,23,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,717,            split[1] = d - split[0];,2,1,1,2,4,0,0,0,0,8,24,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,718,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,723,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,730,        final double c = a[0] + a[1];,0,0,0,2,4,0,0,0,0,6,29,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,731,        final double d = -(c - a[0] - a[1]);,0,0,0,3,6,0,0,0,0,9,36,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,733,        if (c < 8e298 && c > -8e298) {,4,3,0,1,3,0,0,0,0,8,30,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,734,            double z = c * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,28,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,735,            a[0] = (c + z) - z;,0,0,0,2,4,0,0,0,0,6,19,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,736,            a[1] = c - a[0] + d;,4,2,1,2,4,0,0,0,0,20,20,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,737,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,738,            double z = c * 9.31322574615478515625E-10;,0,0,0,0,0,0,0,0,0,0,42,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,739,            a[0] = (c + z - c) * 1073741824.0;,16,5,1,2,4,0,0,0,0,35,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,740,            a[1] = c - a[0] + d;,0,0,0,2,4,0,0,0,0,6,20,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,742,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,750,        ans[0] = a[0] * b[0];,0,1,1,3,6,0,0,0,0,8,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,751,        ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];,0,5,1,7,14,0,0,0,0,20,49,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,754,        resplit(ans);,4,0,0,1,2,0,4,0,0,9,13,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,755,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,763,        ans[0] = a[0] + b[0];,0,0,0,3,6,0,0,0,0,9,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,764,        ans[1] = a[1] + b[1];,2,0,0,3,6,3,0,0,0,5,21,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,766,        resplit(ans);,0,0,0,1,2,0,4,0,0,4,13,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,767,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,788,        final double b = 1.0/4194304.0;,0,0,0,0,0,0,0,0,0,0,31,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,789,        final double a = 1.0 - b;,8,2,1,0,0,2,0,0,0,14,25,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,791,        if (in[0] == 0.0) {,0,1,1,2,5,0,0,0,0,3,19,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,796,        result[0] = a / in[0];,2,1,1,2,4,0,0,0,0,8,22,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,797,        result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);,0,0,0,9,18,0,0,0,0,27,60,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,799,        if (result[1] != result[1]) { // can happen if result[1] is NAN,0,0,0,4,9,0,0,0,0,13,63,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,800,            result[1] = 0.0;,0,0,0,1,2,0,0,0,0,3,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,804,        resplit(result);,4,0,0,1,2,0,0,0,0,5,16,0,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,806,        for (int i = 0; i < 2; i++) {,6,1,0,1,3,0,0,0,0,8,29,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,808,            double err = 1.0 - result[0] * in[0] - result[0] * in[1] -,2,6,1,4,8,0,0,0,0,23,58,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,811,            err = err * (result[0] + result[1]);,4,2,1,3,6,0,0,0,0,11,36,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,813,            result[1] += err;,2,0,1,1,2,0,0,0,0,5,17,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,815,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,823,        final double xs[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,824,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,825,        final double zs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,828,"        split(a[0], xs);",0,0,0,2,4,0,0,0,0,6,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,829,"        split(b[0], ys);",4,1,1,2,4,0,0,0,0,8,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,830,"        splitMult(xs, ys, zs);",4,1,0,1,2,0,8,0,0,13,22,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,832,        result[0] = zs[0];,0,0,0,2,4,0,0,0,0,6,18,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,833,        result[1] = zs[1];,0,0,1,2,4,0,0,0,0,5,18,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,836,"        split(b[1], ys);",8,1,0,2,4,3,0,0,0,14,16,1,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,837,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,0,0,0,3,22,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,839,        double tmp = result[0] + zs[0];,0,0,0,2,4,0,0,0,0,6,31,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,840,        result[1] = result[1] - (tmp - result[0] - zs[0]);,0,0,0,5,10,0,0,0,0,15,50,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,841,        result[0] = tmp;,0,0,0,1,2,0,0,0,0,3,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,842,        tmp = result[0] + zs[1];,8,1,1,2,4,1,0,0,0,17,24,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,843,        result[1] = result[1] - (tmp - result[0] - zs[1]);,0,0,0,5,10,0,0,0,0,15,50,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,844,        result[0] = tmp;,8,1,0,1,2,0,0,0,0,10,16,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,847,"        split(a[1], xs);",0,0,1,2,4,0,4,0,0,6,16,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,848,"        split(b[0], ys);",2,0,1,2,4,0,4,0,0,8,16,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,849,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,8,0,0,8,22,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,851,        tmp = result[0] + zs[0];,20,7,1,2,4,0,0,0,0,33,24,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,852,        result[1] = result[1] - (tmp - result[0] - zs[0]);,4,2,1,5,10,1,4,0,0,20,50,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,853,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,854,        tmp = result[0] + zs[1];,12,2,1,2,4,1,0,0,0,21,24,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,855,        result[1] = result[1] - (tmp - result[0] - zs[1]);,2,2,1,5,10,0,0,0,0,13,50,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,856,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,859,"        split(a[1], xs);",0,0,0,2,4,0,0,0,0,6,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,860,"        split(b[1], ys);",0,0,0,2,4,0,0,0,0,6,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,861,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,8,0,0,8,22,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,863,        tmp = result[0] + zs[0];,4,1,1,2,4,0,10,0,0,24,24,1,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,864,        result[1] = result[1] - (tmp - result[0] - zs[0]);,0,0,0,5,10,0,0,0,0,15,50,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,865,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,866,        tmp = result[0] + zs[1];,0,0,0,2,4,0,0,0,0,6,24,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,867,        result[1] = result[1] - (tmp - result[0] - zs[1]);,2,2,1,5,10,0,0,0,0,13,50,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,868,        result[0] = tmp;,0,0,0,1,2,0,0,0,0,3,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,869,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,878,        final double xs[] = new double[2];,4,1,0,2,4,1,0,0,0,6,34,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,879,        final double as[] = new double[2];,12,1,0,2,4,1,0,0,0,15,34,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,880,        final double ys[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,889,        xs[0] = 2.718281828459045;,2,0,0,1,2,0,4,2,0,8,26,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,890,        xs[1] = 1.4456468917292502E-16;,0,0,1,1,2,0,0,0,0,3,31,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,892,"        split(1.0, ys);",0,0,0,1,2,0,4,0,0,4,15,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,894,        while (p > 0) {,8,2,0,1,3,0,0,0,0,11,15,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,895,            if ((p & 1) != 0) {,2,2,0,2,5,0,0,0,0,4,19,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,896,"                quadMult(ys, xs, as);",10,1,0,1,2,0,8,0,0,20,21,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,897,                ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,900,"            quadMult(xs, xs, as);",0,0,0,1,2,0,0,0,0,3,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,901,            xs[0] = as[0]; xs[1] = as[1];,4,0,1,4,8,1,0,0,0,15,29,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,903,            p >>= 1;,0,0,0,0,0,0,0,0,0,0,8,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,906,        if (result != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,907,            result[0] = ys[0];,8,2,0,2,4,3,6,0,0,19,18,1,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,908,            result[1] = ys[1];,2,0,0,2,4,0,0,0,0,2,18,9,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,910,            resplit(result);,0,0,0,1,2,0,0,0,0,3,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,913,        return ys[0] + ys[1];,0,0,0,2,4,1,0,0,0,7,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1396,        double x[] = new double[2];,4,0,0,2,4,0,0,0,0,5,27,0,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1397,        double x2[] = new double[2];,0,0,0,2,4,0,0,0,0,6,28,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1398,        double y[] = new double[2];,8,2,1,2,4,0,0,0,0,19,27,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1399,        double a[] = new double[2];,2,0,0,2,4,0,0,0,0,2,27,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1401,"        split(xi, x);",0,0,0,1,2,0,0,0,0,3,13,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1404,        x[0] += 1.0;,6,1,0,1,2,0,0,0,0,7,12,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1405,        resplit(x);,4,0,0,1,2,0,0,2,0,6,11,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1406,"        splitReciprocal(x, a);",0,0,0,1,2,0,6,0,0,6,22,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1407,        x[0] -= 2.0;,0,0,0,1,2,0,0,0,0,3,12,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1408,        resplit(x);,0,0,0,1,2,0,4,0,0,4,11,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1409,"        splitMult(x, a, y);",6,1,0,1,2,0,8,0,0,16,19,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1410,        x[0] = y[0];,0,0,0,2,4,0,0,0,0,6,12,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1411,        x[1] = y[1];,2,1,1,2,4,0,0,0,0,8,12,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1414,"        splitMult(x, x, x2);",0,0,0,1,2,0,8,0,0,8,20,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1420,        y[0] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][0];,4,1,1,3,6,0,0,0,0,10,48,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1421,        y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];,4,1,1,3,6,0,0,0,0,10,48,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1423,        for (int i = LN_SPLIT_COEF.length-2; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,51,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1424,"            splitMult(y, x2, a);",0,0,0,1,2,0,16,2,0,18,20,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1425,            y[0] = a[0];,6,0,0,2,4,0,0,0,0,7,12,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1426,            y[1] = a[1];,10,1,0,2,4,0,0,2,0,13,12,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1427,"            splitAdd(y, LN_SPLIT_COEF[i], a);",0,0,1,2,4,0,6,0,0,10,33,7,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1428,            y[0] = a[0];,2,0,0,2,4,1,2,0,0,5,12,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1429,            y[1] = a[1];,8,2,1,2,4,0,0,0,0,16,12,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1432,"        splitMult(y, x, a);",10,1,0,1,2,0,0,2,0,13,19,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1433,        y[0] = a[0];,0,0,0,2,4,0,0,0,0,6,12,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1434,        y[1] = a[1];,2,0,1,2,4,0,4,2,0,13,12,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1436,        return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1446,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1447,        final double ys[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1448,        final double facts[] = new double[2];,2,0,0,2,4,1,0,0,0,3,37,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1449,        final double as[] = new double[2];,0,0,0,2,4,0,0,2,0,2,34,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1450,"        split(x, xs);",0,0,0,1,2,0,0,0,0,3,13,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1451,        ys[0] = ys[1] = 0.0;,0,0,0,2,4,0,0,0,0,6,20,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1453,        for (int i = 19; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,31,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1454,"            splitMult(xs, ys, as);",2,0,0,1,2,0,8,0,0,10,22,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1455,            ys[0] = as[0]; ys[1] = as[1];,6,2,1,4,8,1,0,0,0,19,29,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1457,            if ( (i & 1) == 0) {,2,2,0,2,5,0,0,0,0,4,20,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1458,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1461,"            split(FACT[i], as);",0,0,0,2,4,0,6,0,0,6,19,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1462,"            splitReciprocal(as, facts);",0,0,0,1,2,0,0,0,0,3,27,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1464,            if ( (i & 2) != 0 ) {,2,2,0,2,5,0,0,0,0,4,21,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1465,                facts[0] = -facts[0];,0,0,0,2,4,0,0,0,0,6,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1466,                facts[1] = -facts[1];,0,0,1,2,4,0,0,0,0,6,21,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1469,"            splitAdd(ys, facts, as);",8,1,0,1,2,0,8,0,0,19,24,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1470,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1473,        if (result != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1474,            result[0] = ys[0];,12,3,0,2,4,0,0,0,0,15,18,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1475,            result[1] = ys[1];,0,0,0,2,4,0,0,0,0,6,18,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1478,        return ys[0] + ys[1];,0,1,1,2,4,1,0,0,0,5,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1489,        final double xs[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1490,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1491,        final double facts[] = new double[2];,2,0,0,2,4,1,0,0,0,3,37,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1492,        final double as[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1493,"        split(x, xs);",0,0,0,1,2,0,0,0,0,3,13,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1494,        ys[0] = ys[1] = 0.0;,0,0,1,2,4,0,0,0,0,6,20,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1496,        for (int i = 19; i >= 0; i--) {,4,0,0,1,3,0,0,0,0,6,31,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1497,"            splitMult(xs, ys, as);",8,2,0,1,2,0,0,0,0,11,22,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1498,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1500,            if ( (i & 1) != 0) {,2,2,0,2,5,0,0,0,0,4,20,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1501,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1504,"            split(FACT[i], as);",4,1,1,2,4,0,0,0,0,9,19,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1505,"            splitReciprocal(as, facts);",4,0,0,1,2,0,6,0,0,10,27,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1507,            if ( (i & 2) != 0 ) {,0,0,0,2,5,0,0,0,0,7,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1508,                facts[0] = -facts[0];,4,0,0,2,4,0,0,2,0,6,21,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1509,                facts[1] = -facts[1];,0,0,1,2,4,0,6,0,0,12,21,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1512,"            splitAdd(ys, facts, as);",2,0,0,1,2,3,8,4,0,17,24,1,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1513,            ys[0] = as[0]; ys[1] = as[1];,0,0,0,4,8,0,0,0,0,12,29,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1516,        if (result != null) {,4,2,0,1,3,0,0,0,0,6,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1517,            result[0] = ys[0];,0,0,1,2,4,0,0,0,0,5,18,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1518,            result[1] = ys[1];,0,0,0,2,4,0,0,0,0,6,18,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1521,        return ys[0] + ys[1];,0,0,0,2,4,1,0,0,0,7,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1527,        final double result[] = new double[2];,2,0,0,2,4,1,0,0,0,3,38,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1530,        for (int i = 0; i < 7; i++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1531,            double x = i / 8.0;,6,1,0,0,0,0,0,0,0,7,19,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1533,"            slowSin(x, result);",0,0,0,1,2,0,0,0,0,3,19,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1534,            SINE_TABLE_A[i] = result[0];,0,0,1,2,4,0,0,0,0,7,28,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1535,            SINE_TABLE_B[i] = result[1];,0,0,0,2,4,0,0,0,0,6,28,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1537,"            slowCos(x, result);",2,1,1,1,2,0,0,0,0,10,19,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1538,            COSINE_TABLE_A[i] = result[0];,6,1,0,2,4,1,0,0,0,8,30,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1539,            COSINE_TABLE_B[i] = result[1];,0,0,0,2,4,0,0,0,0,6,30,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1543,        for (int i = 7; i < 14; i++) {,6,1,0,1,3,0,0,0,0,8,30,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1544,            double xs[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1545,            double ys[] = new double[2];,10,1,0,2,4,0,0,0,0,12,28,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1546,            double as[] = new double[2];,0,0,0,2,4,0,0,0,0,6,28,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1547,            double bs[] = new double[2];,8,1,0,2,4,1,0,0,0,10,28,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1548,            double temps[] = new double[2];,2,0,0,2,4,0,0,0,0,2,31,7,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1550,            if ( (i & 1) == 0) {,0,0,0,2,5,0,0,0,0,7,20,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1552,                xs[0] = SINE_TABLE_A[i/2];,2,1,1,2,4,0,0,0,0,8,26,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1553,                xs[1] = SINE_TABLE_B[i/2];,2,1,1,2,4,0,0,0,0,8,26,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1554,                ys[0] = COSINE_TABLE_A[i/2];,14,6,1,2,4,0,0,0,0,26,28,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1555,                ys[1] = COSINE_TABLE_B[i/2];,0,0,0,2,4,0,0,0,0,6,28,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1558,"                splitMult(xs, ys, result);",0,0,0,1,2,0,0,0,0,3,26,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1559,                SINE_TABLE_A[i] = result[0] * 2.0;,0,0,0,2,4,0,0,0,0,6,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1560,                SINE_TABLE_B[i] = result[1] * 2.0;,0,0,0,2,4,0,0,0,0,6,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1563,"                splitMult(ys, ys, as);",0,0,0,1,2,0,0,0,0,3,22,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1564,"                splitMult(xs, xs, temps);",6,2,0,1,2,0,8,0,0,16,25,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1565,                temps[0] = -temps[0];,4,1,0,2,4,0,6,0,0,11,21,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1566,                temps[1] = -temps[1];,0,0,0,2,4,0,0,0,0,6,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1567,"                splitAdd(as, temps, result);",4,1,0,1,2,0,4,0,0,9,28,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1568,                COSINE_TABLE_A[i] = result[0];,4,0,1,2,4,0,0,2,0,14,30,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1569,                COSINE_TABLE_B[i] = result[1];,0,0,1,2,4,0,0,0,0,7,30,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1571,                xs[0] = SINE_TABLE_A[i/2];,2,1,1,2,4,0,0,0,0,8,26,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1572,                xs[1] = SINE_TABLE_B[i/2];,2,1,1,2,4,0,0,0,0,8,26,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1573,                ys[0] = COSINE_TABLE_A[i/2];,0,0,0,2,4,0,0,0,0,6,28,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1574,                ys[1] = COSINE_TABLE_B[i/2];,2,1,1,2,4,0,0,0,0,8,28,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1575,                as[0] = SINE_TABLE_A[i/2+1];,0,0,0,2,4,0,0,0,0,6,28,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1576,                as[1] = SINE_TABLE_B[i/2+1];,0,0,0,2,4,0,0,0,0,6,28,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1577,                bs[0] = COSINE_TABLE_A[i/2+1];,8,3,1,2,4,1,0,0,0,17,30,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1578,                bs[1] = COSINE_TABLE_B[i/2+1];,14,2,0,2,4,0,0,0,0,18,30,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1581,"                splitMult(xs, bs, temps);",0,0,0,1,2,0,0,0,0,3,25,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1582,"                splitMult(ys, as, result);",0,0,0,1,2,0,8,0,0,8,26,9,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1583,"                splitAdd(result, temps, result);",2,0,0,1,2,0,8,2,0,13,32,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1584,                SINE_TABLE_A[i] = result[0];,0,0,0,2,4,0,0,0,0,6,28,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1585,                SINE_TABLE_B[i] = result[1];,0,0,0,2,4,0,0,0,0,6,28,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1588,"                splitMult(ys, bs, result);",0,0,0,1,2,0,8,0,0,8,26,9,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1589,"                splitMult(xs, as, temps);",2,0,0,1,2,0,8,0,0,10,25,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1590,                temps[0] = -temps[0];,0,0,1,2,4,0,0,0,0,6,21,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1591,                temps[1] = -temps[1];,0,0,0,2,4,0,0,0,0,6,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1592,"                splitAdd(result, temps, result);",0,0,0,1,2,0,0,0,0,3,32,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1593,                COSINE_TABLE_A[i] = result[0];,0,0,0,2,4,0,0,0,0,6,30,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1594,                COSINE_TABLE_B[i] = result[1];,0,0,0,2,4,0,0,0,0,6,30,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1599,        for (int i = 0; i < 14; i++) {,6,1,0,1,3,0,0,0,0,8,30,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1600,            double xs[] = new double[2];,8,1,1,2,4,0,0,0,0,11,28,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1601,            double ys[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1602,            double as[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1604,            as[0] = COSINE_TABLE_A[i];,0,0,0,2,4,0,0,0,0,6,26,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1605,            as[1] = COSINE_TABLE_B[i];,0,0,1,2,4,0,0,0,0,7,26,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1607,"            splitReciprocal(as, ys);",6,1,0,1,2,0,6,0,0,13,24,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1609,            xs[0] = SINE_TABLE_A[i];,0,0,1,2,4,0,0,0,0,7,24,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1610,            xs[1] = SINE_TABLE_B[i];,0,0,1,2,4,0,0,0,0,7,24,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1612,"            splitMult(xs, ys, as);",14,3,0,1,2,0,8,0,0,26,22,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1614,            TANGENT_TABLE_A[i] = as[0];,0,0,0,2,4,0,0,0,0,6,27,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1615,            TANGENT_TABLE_B[i] = as[1];,6,1,1,2,4,0,0,0,0,15,27,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1618,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,52,        super();,16,5,0,1,2,0,0,0,0,22,8,10,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,46,    protected final RandomDataImpl randomData = new RandomDataImpl();,2,0,0,1,2,2,0,4,0,8,65,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,53,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,61,40,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,61,41,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,62,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,50,    protected final RandomDataImpl randomData = new RandomDataImpl();,0,0,0,1,2,0,0,0,0,3,65,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,56,    private double solverAbsoluteAccuracy = BrentSolver.DEFAULT_ABSOLUTE_ACCURACY;,12,0,0,0,0,1,0,0,0,14,78,1,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,63,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,65,"        this(mean, sd, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);",6,0,0,1,2,0,0,0,0,6,50,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,66,    },2,0,0,0,1,1,0,0,0,3,1,7,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,78,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,51,    private double mean = 0;,2,0,0,0,0,1,0,0,0,3,24,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,54,    private double standardDeviation = 1;,10,1,0,0,0,0,0,0,0,12,37,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,79,        setMeanInternal(mean);,0,0,0,1,2,0,4,0,0,4,22,5,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,80,        setStandardDeviationInternal(sd);,2,0,0,1,2,0,4,0,0,7,33,3,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,81,        solverAbsoluteAccuracy = inverseCumAccuracy;,4,0,0,0,0,0,0,0,0,5,44,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,82,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,48,    private static final double SQRT2PI = FastMath.sqrt(2 * FastMath.PI);,6,1,0,1,2,3,4,0,0,14,69,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,114,        this.mean = newMean;,4,0,0,0,0,0,0,0,0,5,20,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,115,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,141,        if (sd <= 0.0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,146,        standardDeviation = sd;,4,0,0,0,0,0,0,0,0,5,23,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,147,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,80,"        this(p, DEFAULT_EPSILON, DEFAULT_MAX_ITERATIONS);",6,0,0,1,2,0,0,0,0,6,49,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,81,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,92,"    public PoissonDistributionImpl(double p, double epsilon, int maxIterations) {",8,0,0,1,3,1,0,0,0,9,77,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,65,    private int maxIterations = DEFAULT_MAX_ITERATIONS;,4,0,0,0,0,1,0,0,0,5,51,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,70,    private double epsilon = DEFAULT_EPSILON;,6,1,0,0,0,1,0,0,0,8,41,1,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,93,        if (p <= 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,96,        mean = p;,4,0,0,0,0,1,0,2,0,7,9,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,97,"        normal = new NormalDistributionImpl(p, FastMath.sqrt(p));",4,0,0,2,4,0,6,2,0,13,57,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,98,        this.epsilon = epsilon;,4,0,0,0,0,0,0,0,0,5,23,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,99,        this.maxIterations = maxIterations;,4,0,0,0,0,0,0,0,0,5,35,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,100,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,119,    public RandomDataImpl() {,4,0,0,1,3,0,0,2,0,7,25,0,0.09091,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,111,    private RandomGenerator rand = null;,2,0,0,0,0,1,0,2,0,5,36,2,0.09091,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,114,    private SecureRandom secRand = null;,0,0,0,0,0,0,0,0,0,0,36,4,0.09091,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,120,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,659,"        return new ParseException(null, offset) {",2,0,0,1,3,1,6,2,0,11,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,667,"                return buildMessage(Locale.US, pattern, arguments);",4,0,0,1,2,1,6,0,0,10,51,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,673,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,2,4,1,10,0,0,10,61,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,64,"        this(new DummyLocalizable(pattern), arguments);",4,0,0,2,4,0,0,2,0,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,65,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,75,"    public MathRuntimeException(final Localizable pattern, final Object ... arguments) {",6,0,0,1,3,3,0,4,0,13,84,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,76,        this.pattern   = pattern;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,77,        this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,6,1,0,3,6,0,4,2,0,14,73,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,78,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,88,        super(rootCause);,2,0,0,1,2,0,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,89,        this.pattern   = LocalizedFormats.SIMPLE_MESSAGE;,6,0,0,0,0,0,0,0,0,7,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,90,"        this.arguments = new Object[] { (rootCause == null) ? """" : rootCause.getMessage() };",6,1,0,4,8,0,0,0,0,8,84,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,91,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,106,"        this(rootCause, new DummyLocalizable(pattern), arguments);",18,4,1,2,4,1,4,2,0,33,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,107,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,121,        super(rootCause);,4,1,0,1,2,0,0,0,0,5,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,122,        this.pattern   = pattern;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,123,        this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,4,1,0,3,6,0,4,2,0,12,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,124,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,136,"        return new MessageFormat(pattern.getLocalizedString(locale), locale).format(arguments);",0,0,0,3,6,1,0,0,0,10,87,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,146,        return pattern.getSourceString();,20,9,0,1,2,1,0,0,0,30,33,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,155,        return pattern;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,163,        return arguments.clone();,0,0,0,1,2,1,4,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,173,        if (pattern != null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,174,"            return buildMessage(locale, pattern, arguments);",0,0,0,1,2,1,8,0,0,8,48,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,176,"        return """";",0,0,0,0,0,1,0,0,0,1,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,182,        return getMessage(Locale.US);,4,0,0,1,2,1,12,0,0,16,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,188,        return getMessage(Locale.getDefault());,0,0,0,2,4,1,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,196,        printStackTrace(System.err);,4,0,0,1,2,0,2,0,0,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,197,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,206,        synchronized (out) {,2,0,0,1,3,0,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,207,"            PrintWriter pw = new PrintWriter(out, false);",4,0,0,1,2,0,0,4,0,9,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,208,            printStackTrace(pw);,2,1,0,1,2,0,4,0,0,8,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,210,            pw.flush();,0,0,0,1,2,0,4,0,0,4,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,211,        },10,5,0,0,1,0,6,0,0,21,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,212,    },8,2,0,0,1,0,0,0,0,10,1,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,225,"        return createArithmeticException(new DummyLocalizable(pattern), arguments);",4,2,0,2,4,1,4,2,0,12,75,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,238,        return new ArithmeticException() {,0,0,0,1,3,1,0,2,0,2,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,269,"        return createArrayIndexOutOfBoundsException(new DummyLocalizable(pattern), arguments);",2,0,0,2,4,1,4,2,0,8,86,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,282,        return new ArrayIndexOutOfBoundsException() {,0,0,0,1,3,1,0,0,0,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,313,"        return createEOFException(new DummyLocalizable(pattern), arguments);",2,0,0,2,4,1,4,2,0,8,68,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,326,        return new EOFException() {,0,0,0,1,3,1,0,2,0,2,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,358,        IOException ioe = new IOException(rootCause.getLocalizedMessage());,2,0,0,2,4,0,4,4,0,10,67,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,359,        ioe.initCause(rootCause);,0,0,0,1,2,0,6,0,0,6,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,360,        return ioe;,4,0,0,0,0,2,6,0,0,11,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,374,"        return createIllegalArgumentException(new DummyLocalizable(pattern), arguments);",2,0,0,2,4,1,4,2,0,8,80,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,415,        IllegalArgumentException iae = new IllegalArgumentException(rootCause.getLocalizedMessage());,6,1,0,2,4,0,4,4,0,15,93,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,416,        iae.initCause(rootCause);,0,0,0,1,2,0,6,0,0,6,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,417,        return iae;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,431,"        return createIllegalStateException(new DummyLocalizable(pattern), arguments);",0,0,0,2,4,1,0,0,0,7,77,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,444,        return new IllegalStateException() {,0,0,0,1,3,1,0,2,0,2,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,475,"        return createConcurrentModificationException(new DummyLocalizable(pattern), arguments);",2,0,0,2,4,1,4,2,0,8,87,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,488,        return new ConcurrentModificationException() {,0,0,0,1,3,1,0,0,0,5,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,519,"        return createNoSuchElementException(new DummyLocalizable(pattern), arguments);",2,0,0,2,4,1,4,4,0,10,78,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,532,        return new NoSuchElementException() {,6,1,0,1,3,1,0,0,0,8,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,564,        return new UnsupportedOperationException() {,0,0,0,1,3,1,0,2,0,2,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,595,"        return createNullPointerException(new DummyLocalizable(pattern), arguments);",2,0,0,2,4,1,4,2,0,8,76,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,609,        return new NullPointerException() {,0,0,0,1,3,1,0,2,0,2,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,643,"        return createParseException(offset, new DummyLocalizable(pattern), arguments);",0,0,0,2,4,1,0,0,0,7,78,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,659,"        return new ParseException(null, offset) {",0,0,0,1,3,1,0,0,0,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,685,"        final String argument = ""https://issues.apache.org/jira/browse/MATH"";",2,0,0,0,0,1,0,2,0,6,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,687,        return new RuntimeException(cause) {,12,1,0,1,3,1,6,6,0,28,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,39,public class MathRuntimeException extends RuntimeException {,18,13,0,0,1,1,0,2,0,35,60,1,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,61,45,"        super(LocalizedFormats.MAX_ITERATIONS_EXCEEDED, maxIterations);",6,0,0,1,2,0,4,0,0,10,63,3,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,61,46,        this.maxIterations = maxIterations;,4,0,0,0,0,0,0,0,0,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,61,47,    },4,0,0,0,1,0,0,0,0,5,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,61,60,"        this(maxIterations, new DummyLocalizable(pattern), arguments);",6,0,0,2,4,0,0,2,0,8,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,61,61,    },10,3,0,0,1,0,0,0,0,13,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,61,73,"        super(pattern, arguments);",0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,61,74,        this.maxIterations = maxIterations;,10,1,0,0,0,0,4,2,0,18,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,61,75,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,61,81,        return maxIterations;,2,0,0,0,0,1,0,0,0,2,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,38,        super(LocalizedFormats.CONVERGENCE_FAILED);,10,1,0,1,2,0,0,0,0,11,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,39,    },6,1,0,0,1,0,0,0,0,7,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,51,"        this(new DummyLocalizable(pattern), arguments);",4,0,0,2,4,0,0,2,0,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,52,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,62,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,63,    },4,0,0,0,1,0,4,2,0,10,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,70,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,71,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,84,"        this(cause, new DummyLocalizable(pattern), arguments);",6,0,0,2,4,0,0,2,0,8,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,85,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,96,"        super(cause, pattern, arguments);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,97,    },6,1,0,0,1,0,0,0,0,7,1,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,57,    public MathException() {,2,0,0,1,3,1,0,0,0,3,24,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,58,        this.pattern   = LocalizedFormats.SIMPLE_MESSAGE;,6,0,0,0,0,0,0,0,0,7,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,59,"        this.arguments = new Object[] { """" };",2,0,0,2,4,0,0,2,0,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,60,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,72,"      this(new DummyLocalizable(pattern), arguments);",2,0,0,2,4,0,0,0,0,2,47,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,73,    },4,2,0,0,1,0,0,0,0,6,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,83,"    public MathException(Localizable pattern, Object ... arguments) {",10,1,0,1,3,1,0,4,0,16,65,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,84,      this.pattern   = pattern;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,85,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,0,0,0,3,6,0,0,0,0,9,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,86,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,96,        super(rootCause);,0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,97,        this.pattern   = LocalizedFormats.SIMPLE_MESSAGE;,0,0,0,0,0,0,0,0,0,0,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,98,"        this.arguments = new Object[] { (rootCause == null) ? """" : rootCause.getMessage() };",12,3,0,4,8,0,4,2,0,24,84,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,99,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,114,"        this(rootCause, new DummyLocalizable(pattern), arguments);",16,1,0,2,4,0,0,4,0,22,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,115,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,128,      super(rootCause);,0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,129,      this.pattern   = pattern;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,130,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,4,1,0,3,6,0,4,2,0,12,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,131,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,141,        return pattern.getSourceString();,8,1,0,1,2,1,4,0,0,14,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,150,        return pattern;,4,0,0,0,0,1,0,0,0,6,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,159,        return arguments.clone();,0,0,0,1,2,1,4,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,170,        if (pattern != null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,171,"            return new MessageFormat(pattern.getLocalizedString(locale), locale).format(arguments);",2,0,0,3,6,1,10,2,0,14,87,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,173,"        return """";",0,0,0,0,0,1,0,0,0,1,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,179,        return getMessage(Locale.US);,4,0,0,1,2,1,2,0,0,6,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,185,        return getMessage(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,193,        printStackTrace(System.err);,6,0,0,1,2,0,2,0,0,8,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,194,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,203,        synchronized (out) {,6,0,0,1,3,0,0,2,0,8,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,204,"            PrintWriter pw = new PrintWriter(out, false);",4,0,0,1,2,0,0,4,0,9,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,205,            printStackTrace(pw);,0,0,0,1,2,0,4,0,0,4,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,207,            pw.flush();,0,0,0,1,2,0,0,0,0,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,208,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,209,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,61,61,                                           Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,61,62,        this.specific = specific;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,61,63,        this.general = general;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,61,64,        arguments = ArgUtils.flatten(args);,4,0,0,1,2,3,6,0,0,14,35,1,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,61,65,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,61,72,"        this(null, general, args);",0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,61,73,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,61,83,"        return MessageFactory.buildMessage(locale, specific, general, arguments);",0,0,0,1,2,1,12,0,0,12,73,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,61,89,        return getMessage(Locale.US);,4,0,0,1,2,1,2,0,0,6,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,61,95,        return getMessage(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,61,52,"        this(null, wrong, min, boundIsAllowed);",14,2,0,1,2,0,0,0,0,17,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,61,53,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,61,67,"        super(specific,",0,0,0,0,1,0,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,61,73,        this.min = min;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,61,74,        this.boundIsAllowed = boundIsAllowed;,12,2,0,0,0,1,6,0,0,24,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,61,75,    },2,0,0,0,1,0,0,0,0,2,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,61,81,        return boundIsAllowed;,0,0,0,0,0,1,0,0,0,1,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,61,88,        return min;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,61,50,"        super(specific, general, wrong, arguments);",0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,61,51,        argument = wrong;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,61,52,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,61,64,"        super(general, wrong, arguments);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,61,65,        argument = wrong;,6,2,0,0,0,0,0,0,0,9,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,61,66,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,61,72,        return argument;,4,1,0,0,0,1,0,0,0,5,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,61,32,    private ArgUtils() {},2,0,0,2,4,1,0,0,0,3,21,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,61,42,        final List<Object> list = new ArrayList<Object>();,2,0,0,1,2,1,0,8,0,11,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,61,43,        if (array != null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,61,44,            for (Object o : array) {,4,0,0,1,3,0,0,2,0,6,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,61,45,                if (o instanceof Object[]) {,2,0,0,2,5,0,0,2,0,4,28,9,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,61,46,                    for (Object oR : flatten((Object[]) o)) {,4,0,0,4,9,0,2,4,0,10,41,10,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,61,47,                        list.add(oR);,0,0,0,1,2,0,6,0,0,6,13,13,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,61,50,                    list.add(o);,0,0,0,1,2,0,6,0,0,6,12,11,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,61,54,        return list.toArray();,8,2,0,1,2,1,4,0,0,15,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,322,        return sourceFormat;,2,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,328,            ResourceBundle bundle =,2,0,0,0,0,0,0,2,0,4,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,330,            if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {,4,1,0,5,11,0,12,0,0,17,68,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,332,                return bundle.getString(toString());,0,0,0,2,4,1,6,0,0,6,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,337,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,335,        } catch (MissingResourceException mre) {,0,0,0,1,4,0,0,0,0,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,341,        return sourceFormat;,2,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,61,38,"        super(value, 0, false);",2,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,61,39,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,61,48,"        super(specific, value, 0, false);",4,0,0,1,2,0,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,61,49,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,61,52,"        this(null, wrong, max, boundIsAllowed);",6,0,0,1,2,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,61,53,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,61,66,"        super(specific,",0,0,0,0,1,0,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,61,72,        this.max = max;,6,0,0,0,0,0,0,0,0,7,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,61,73,        this.boundIsAllowed = boundIsAllowed;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,61,74,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,61,80,        return boundIsAllowed;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,61,87,        return max;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,564,        return new UnsupportedOperationException() {,0,0,0,1,3,1,0,0,0,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,572,"                return buildMessage(Locale.US, pattern, arguments);",4,0,0,1,2,1,6,0,0,10,51,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,578,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,2,4,1,0,0,0,7,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,532,        return new NoSuchElementException() {,0,0,0,1,3,1,0,2,0,2,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,540,"                return buildMessage(Locale.US, pattern, arguments);",4,0,0,1,2,1,6,0,0,10,51,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,546,"                return buildMessage(Locale.getDefault(), pattern, arguments);",8,3,0,2,4,2,10,0,0,22,61,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,488,        return new ConcurrentModificationException() {,0,0,0,1,3,1,0,2,0,2,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,496,"                return buildMessage(Locale.US, pattern, arguments);",12,1,0,1,2,1,6,0,0,21,51,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,502,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,2,4,1,10,0,0,10,61,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,444,        return new IllegalStateException() {,0,0,0,1,3,1,0,2,0,2,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,452,"                return buildMessage(Locale.US, pattern, arguments);",0,0,0,1,2,1,0,0,0,4,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,458,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,2,4,1,0,0,0,7,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,395,"                return buildMessage(Locale.US, pattern, arguments);",8,0,0,1,2,1,6,2,0,16,51,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,401,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,2,4,1,10,0,0,10,61,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,326,        return new EOFException() {,0,0,0,1,3,1,0,2,0,2,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,334,"                return buildMessage(Locale.US, pattern, arguments);",4,0,0,1,2,1,6,0,0,10,51,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,340,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,2,4,1,0,0,0,7,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,282,        return new ArrayIndexOutOfBoundsException() {,0,0,0,1,3,1,0,2,0,2,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,290,"                return buildMessage(Locale.US, pattern, arguments);",4,0,0,1,2,1,6,0,0,10,51,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,296,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,2,4,1,0,0,0,7,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,238,        return new ArithmeticException() {,0,0,0,1,3,1,0,2,0,2,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,246,"                return buildMessage(Locale.US, pattern, arguments);",4,0,0,1,2,1,6,0,0,10,51,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,252,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,2,4,1,10,0,0,10,61,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,687,        return new RuntimeException(cause) {,2,0,0,1,3,1,0,2,0,4,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,695,"                return buildMessage(Locale.US, LocalizedFormats.INTERNAL_ERROR, argument);",10,0,0,1,2,1,4,0,0,14,74,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,701,"                return buildMessage(Locale.getDefault(), LocalizedFormats.INTERNAL_ERROR, argument);",10,1,0,2,4,1,8,0,0,19,84,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,609,        return new NullPointerException() {,8,1,0,1,3,1,0,2,0,12,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,617,"                return buildMessage(Locale.US, pattern, arguments);",4,0,0,1,2,1,6,0,0,10,51,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,623,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,2,4,1,10,0,0,10,61,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,211,    private FastMath() {,8,0,0,1,3,0,0,0,0,11,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,212,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,227,        return 0.5 * (FastMath.exp(a) + FastMath.exp(-a));,2,2,0,3,6,1,10,0,0,15,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,236,        boolean negative = false;,2,1,1,0,0,1,0,0,0,7,25,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,237,        if (a < 0) {,4,3,0,1,3,0,0,0,0,7,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,238,            negative = true;,2,0,0,0,0,0,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,239,            a = -a;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,243,        if (a > 0.3) {,2,0,1,1,3,0,6,0,0,13,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,244,            absSinh = 0.5 * (FastMath.exp(a) - FastMath.exp(-a));,20,7,0,3,6,1,10,0,0,41,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,246,            final double a2 = a * a;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,247,            if (a > 0.05) {,2,1,0,1,3,0,0,0,0,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,248,                absSinh = a * (1 + a2 * (1 + a2  * (1 + a2 * (1 + a2 * (1 + a2 / 110) / 72) / 42) / 20) / 6);,0,0,0,5,10,0,0,0,0,15,93,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,250,                absSinh = a * (1 + a2 * (1 + a2  * (1 + a2 / 42) / 20) / 6);,0,0,0,3,6,0,0,0,0,9,60,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,254,        return negative ? -absSinh : absSinh;,0,0,0,0,0,1,0,0,0,1,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,264,        boolean negative = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,265,        if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,266,            negative = true;,0,1,0,0,0,0,8,0,0,9,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,267,            a = -a;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,271,        if (a > 0.074) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,272,            final double twoA = 2 * a;,4,1,0,0,0,1,0,0,0,6,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,273,            absTanh = FastMath.expm1(twoA) / (FastMath.exp(twoA) + 1);,0,0,0,3,6,0,0,0,0,9,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,274,        } else {,8,1,0,0,2,0,0,0,0,10,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,275,            final double a2 = a * a;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,276,            if (a > 0.016) {,2,1,0,1,3,0,0,0,0,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,277,                absTanh = a * (1 - a2 * (1 - a2 * (2 - a2 * (17 - a2 * (62 - a2 * 1382 / 55 ) / 9) / 21) / 5) / 3);,14,16,0,5,10,0,0,0,0,31,99,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,279,                absTanh = a * (1 - a2 * (1 - a2 * (2 - a2 * 17 / 21) / 5) / 3);,8,2,0,3,6,0,0,0,0,11,63,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,283,        return negative ? -absTanh : absTanh;,0,0,0,0,0,1,0,0,0,1,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,292,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,0,0,0,2,4,1,0,0,0,7,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,301,        boolean negative = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,302,        if (a < 0) {,2,1,0,1,3,0,14,0,0,18,12,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,303,            negative = true;,6,1,0,0,0,0,0,0,0,8,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,304,            a = -a;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,308,        if (a > 0.167) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,309,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,0,0,0,2,4,0,0,0,0,6,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,311,            final double a2 = a * a;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,312,            if (a > 0.097) {,2,1,0,1,3,0,0,0,0,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,313,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0 - a2 * (1.0 / 15.0 - a2 * (1.0 / 17.0) * 15.0 / 16.0) * 13.0 / 14.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,22,33,0,9,18,1,0,0,0,57,264,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,314,            } else if (a > 0.036) {,0,0,0,1,4,0,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,315,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,0,0,0,7,14,0,0,0,0,21,196,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,316,            } else if (a > 0.0036) {,0,0,0,1,4,0,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,317,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,12,17,0,5,10,0,0,0,0,30,129,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,319,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0) * 3.0 / 4.0) / 2.0);,10,10,1,3,6,0,0,0,0,25,71,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,323,        return negative ? -absAsinh : absAsinh;,0,0,0,0,0,1,0,0,0,1,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,333,        boolean negative = false;,2,0,0,0,0,0,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,334,        if (a < 0) {,2,0,0,1,3,0,6,0,0,8,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,335,            negative = true;,2,0,0,0,0,1,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,336,            a = -a;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,340,        if (a > 0.15) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,341,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,6,4,0,3,6,0,4,0,0,15,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,343,            final double a2 = a * a;,24,6,1,0,0,1,0,0,0,41,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,344,            if (a > 0.087) {,2,1,0,1,3,0,0,0,0,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,345,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0 + a2 * (1.0 / 15.0 + a2 * (1.0 / 17.0)))))))));,20,25,0,9,18,0,0,0,0,46,175,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,346,            } else if (a > 0.031) {,2,1,0,1,4,0,0,0,0,3,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,347,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0)))))));,18,20,0,7,14,0,0,0,0,39,135,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,348,            } else if (a > 0.003) {,0,0,0,1,4,0,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,349,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0)))));,0,0,0,5,10,0,0,0,0,15,95,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,351,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0)));,2,1,0,3,6,0,0,0,0,3,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,355,        return negative ? -absAtanh : absAtanh;,8,1,0,0,0,1,0,0,0,10,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,365,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : (Double.isNaN(a) ? Double.NaN : 0.0));,8,2,0,5,10,1,6,0,0,17,83,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,373,"        return nextAfter(a, Double.POSITIVE_INFINITY);",0,0,0,1,2,1,0,0,0,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,380,        return Math.random();,2,0,0,1,2,2,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,404,"        return exp(x, 0.0, null);",0,0,0,1,2,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,423,        if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,424,            intVal = (int) -x;,10,1,0,1,2,0,0,0,0,14,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,426,            if (intVal > 746) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,427,                if (hiPrec != null) {,30,7,0,1,3,0,0,0,0,40,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,428,                    hiPrec[0] = 0.0;,8,0,1,1,2,0,4,0,0,16,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,429,                    hiPrec[1] = 0.0;,0,0,1,1,2,0,4,0,0,16,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,431,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,434,            if (intVal > 709) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,436,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",4,2,0,1,2,1,6,0,0,13,79,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,437,                if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,438,                    hiPrec[0] /= 285040095144011776.0;,0,0,1,1,2,0,0,0,0,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,439,                    hiPrec[1] /= 285040095144011776.0;,0,0,1,1,2,0,0,0,0,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,441,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,444,            if (intVal == 709) {,10,8,0,1,3,0,0,0,0,19,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,446,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",6,2,0,1,2,1,18,4,0,31,79,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,447,                if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,448,                    hiPrec[0] /= 4.455505956692756620;,0,0,1,1,2,0,0,0,0,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,449,                    hiPrec[1] /= 4.455505956692756620;,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,451,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,454,            intVal++;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,456,            intPartA = EXP_INT_TABLE_A[750-intVal];,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,457,            intPartB = EXP_INT_TABLE_B[750-intVal];,10,2,1,1,2,0,0,0,0,15,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,459,            intVal = -intVal;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,461,            intVal = (int) x;,2,1,0,1,2,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,463,            if (intVal > 709) {,4,2,0,1,3,0,0,0,0,6,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,464,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,465,                    hiPrec[0] = Double.POSITIVE_INFINITY;,4,0,1,1,2,0,0,0,0,7,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,466,                    hiPrec[1] = 0.0;,8,3,0,1,2,0,8,0,0,20,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,468,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,471,            intPartA = EXP_INT_TABLE_A[750+intVal];,4,1,1,1,2,0,0,0,0,8,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,472,            intPartB = EXP_INT_TABLE_B[750+intVal];,4,1,1,1,2,0,0,0,0,8,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,479,        final int intFrac = (int) ((x - intVal) * 1024.0);,0,0,0,3,6,0,0,0,0,9,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,480,        final double fracPartA = EXP_FRAC_TABLE_A[intFrac];,0,0,0,1,2,0,0,0,0,3,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,481,        final double fracPartB = EXP_FRAC_TABLE_B[intFrac];,0,0,0,1,2,0,0,0,0,3,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,487,        final double epsilon = x - (intVal + intFrac / 1024.0);,0,0,0,1,2,0,0,0,0,3,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,496,        double z = 0.04168701738764507;,4,0,0,0,0,0,0,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,497,        z = z * epsilon + 0.1666666505023083;,0,0,0,0,0,0,0,0,0,0,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,498,        z = z * epsilon + 0.5000000000042687;,2,0,0,0,0,0,0,0,0,2,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,499,        z = z * epsilon + 1.0;,6,2,0,0,0,0,0,0,0,9,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,500,        z = z * epsilon + -3.940510424527919E-20;,0,0,0,0,0,0,0,0,0,0,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,507,        double tempA = intPartA * fracPartA;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,508,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,0,0,0,0,0,0,0,0,0,0,82,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,514,        final double tempC = tempB + tempA;,8,1,0,0,0,0,0,0,0,10,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,516,        if (extra != 0.0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,517,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,20,7,0,0,0,0,0,0,0,28,63,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,519,            result = tempC*z + tempB + tempA;,10,3,0,0,0,0,0,0,0,14,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,522,        if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,524,            hiPrec[0] = tempA;,4,0,1,1,2,0,0,2,0,10,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,525,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,0,0,0,1,2,0,0,0,0,3,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,528,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,536,        if (x != x || x == 0.0) { // NaN or zero,0,0,0,1,3,0,0,0,0,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,537,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,540,        if (x <= -1.0 || x >= 1.0) {,2,1,0,1,3,0,0,0,0,3,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,543,            double hiPrec[] = new double[2];,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,544,"            exp(x, 0.0, hiPrec);",0,0,0,1,2,0,6,0,0,6,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,545,            if (x > 0.0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,546,                return -1.0 + hiPrec[0] + hiPrec[1];,0,1,1,2,4,1,0,0,0,6,36,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,548,                final double ra = -1.0 + hiPrec[0];,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,549,                double rb = -(ra + 1.0 - hiPrec[0]);,0,0,0,2,4,0,0,0,0,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,550,                rb += hiPrec[1];,2,0,1,1,2,0,0,0,0,5,16,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,551,                return ra + rb;,4,1,0,0,0,1,0,0,0,5,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,558,        boolean negative = false;,2,0,0,0,0,0,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,560,        if (x < 0.0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,561,            x = -x;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,562,            negative = true;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,566,            int intFrac = (int) (x * 1024.0);,12,1,1,2,4,0,0,0,0,16,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,567,            double tempA = EXP_FRAC_TABLE_A[intFrac] - 1.0;,2,1,1,1,2,0,0,0,0,7,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,568,            double tempB = EXP_FRAC_TABLE_B[intFrac];,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,570,            double temp = tempA + tempB;,6,1,0,0,0,0,0,0,0,7,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,571,            tempB = -(temp - tempA - tempB);,10,3,1,1,2,0,4,0,0,28,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,572,            tempA = temp;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,574,            temp = tempA * 1073741824.0;,0,0,0,0,0,0,4,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,575,            baseA = tempA + temp - temp;,8,2,0,0,0,0,0,0,0,11,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,576,            baseB = tempB + (tempA - baseA);,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,578,            epsilon = x - intFrac/1024.0;,14,4,0,0,0,0,0,0,0,20,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,583,        double zb = 0.008336750013465571;,8,1,0,0,0,0,4,0,0,14,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,584,        zb = zb * epsilon + 0.041666663879186654;,0,0,0,0,0,0,0,0,0,0,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,585,        zb = zb * epsilon + 0.16666666666745392;,6,2,0,0,0,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,586,        zb = zb * epsilon + 0.49999999999999994;,6,2,0,0,0,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,587,        zb = zb * epsilon;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,588,        zb = zb * epsilon;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,590,        double za = epsilon;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,591,        double temp = za + zb;,6,1,0,0,0,0,6,0,0,13,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,592,        zb = -(temp - za - zb);,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,593,        za = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,595,        temp = za * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,596,        temp = za + temp - temp;,8,2,0,0,0,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,597,        zb += za - temp;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,598,        za = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,601,        double ya = za * baseA;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,603,        temp = ya + za * baseB;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,604,        double yb = -(temp - ya - za * baseB);,18,3,0,1,2,0,0,0,0,24,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,605,        ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,607,        temp = ya + zb * baseA;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,608,        yb += -(temp - ya - zb * baseA);,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,609,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,611,        temp = ya + zb * baseB;,4,0,0,0,0,0,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,612,        yb += -(temp - ya - zb*baseB);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,613,        ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,617,        temp = ya + baseA;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,618,        yb += -(temp - baseA - ya);,2,0,0,1,2,0,0,0,0,2,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,619,        ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,621,        temp = ya + za;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,623,        yb += -(temp - ya - za);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,624,        ya = temp;,14,2,0,0,0,0,0,0,0,19,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,626,        temp = ya + baseB;,6,1,0,0,0,0,0,0,0,8,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,628,        yb += -(temp - ya - baseB);,8,1,0,1,2,0,0,0,0,11,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,629,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,631,        temp = ya + zb;,8,1,0,0,0,0,0,0,0,10,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,633,        yb += -(temp - ya - zb);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,634,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,636,        if (negative) {,2,0,0,1,3,0,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,638,            double denom = 1.0 + ya;,4,1,0,0,0,0,0,0,0,5,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,639,            double denomr = 1.0 / denom;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,640,            double denomb = -(denom - 1.0 - ya) + yb;,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,641,            double ratio = ya * denomr;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,642,            temp = ratio * 1073741824.0;,10,2,0,0,0,1,0,0,0,14,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,643,            final double ra = ratio + temp - temp;,8,2,0,0,0,1,0,0,0,11,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,644,            double rb = ratio - ra;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,646,            temp = denom * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,647,            za = denom + temp - temp;,8,2,0,0,0,0,0,0,0,11,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,648,            zb = denom - za;,12,2,1,0,0,1,0,0,0,21,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,650,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,22,9,0,1,2,0,0,0,0,32,60,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,661,            rb += yb * denomr;                      // numerator,6,1,0,0,0,0,0,0,0,8,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,662,            rb += -ya * denomb * denomr * denomr;   // denominator,10,1,0,0,0,0,0,0,0,13,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,665,            ya = -ra;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,666,            yb = -rb;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,669,        return ya + yb;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,719,            final double a = d * 9.31322574615478515625E-10;,0,0,0,0,0,0,0,0,0,0,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,720,            split[0] = (d + a - d) * 1073741824.0;,6,1,0,2,4,0,0,0,0,8,38,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,721,            split[1] = d - split[0];,0,0,0,2,4,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,792,            in[0] = in[1];,0,0,1,2,4,0,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,793,            in[1] = 0.0;,0,0,0,1,2,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,924,"        return log(x, null);",0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,934,        long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,937,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,6,4,0,2,5,0,0,0,0,10,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,938,            if (x != 0.0) {,2,1,0,1,3,0,6,0,0,9,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,939,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,940,                    hiPrec[0] = Double.NaN;,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,943,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,948,        if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,949,            if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,950,                hiPrec[0] = Double.POSITIVE_INFINITY;,4,0,1,1,2,0,0,0,0,7,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,953,            return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,957,        int exp = (int)(bits >> 52)-1023;,6,1,0,2,4,0,0,0,0,7,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,959,        if ((bits & 0x7ff0000000000000L) == 0) {,4,1,0,2,5,0,0,0,0,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,961,            if (x == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,963,                if (hiPrec != null) {,6,1,0,1,3,1,0,0,0,8,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,964,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,967,                return Double.NEGATIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,971,            bits <<= 1;,2,0,0,0,0,0,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,972,            while ( (bits & 0x0010000000000000L) == 0) {,6,3,0,2,5,0,0,0,0,9,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,973,                exp--;,2,0,0,0,0,0,0,2,0,5,6,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,974,                bits <<= 1;,2,0,0,0,0,0,0,0,0,3,11,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,979,        if (exp == -1 || exp == 0) {,4,3,0,1,3,0,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,980,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,0,0,0,1,3,0,0,0,0,4,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,985,                double xa = x - 1.0;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,986,                double xb = xa - x + 1.0;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,987,                double tmp = xa * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,988,                double aa = xa + tmp - tmp;,28,8,0,0,0,0,0,0,0,39,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,989,                double ab = xa - aa;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,990,                xa = aa;,8,0,0,0,0,0,4,0,0,13,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,991,                xb = ab;,4,1,1,0,0,0,0,0,0,8,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,993,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,6,1,1,2,4,0,0,0,0,9,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,994,                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];,0,0,0,2,4,0,0,0,0,6,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,996,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,53,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,998,                    aa = ya * xa;,0,0,1,0,0,0,10,0,0,14,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,999,                    ab = ya * xb + yb * xa + yb * xb;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1001,                    tmp = aa * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,24,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1002,                    ya = aa + tmp - tmp;,8,2,0,0,0,0,2,0,0,13,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1003,                    yb = aa - ya + ab;,22,7,0,0,0,0,4,0,0,35,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1006,                    aa = ya + LN_QUICK_COEF[i][0];,0,0,0,2,4,0,0,0,0,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1007,                    ab = yb + LN_QUICK_COEF[i][1];,0,0,0,2,4,0,0,0,0,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1009,                    tmp = aa * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,24,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1010,                    ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1011,                    yb = aa - ya + ab;,6,1,0,0,0,0,0,0,0,8,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1015,                aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1016,                ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1018,                tmp = aa * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1019,                ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1020,                yb = aa - ya + ab;,4,2,0,0,0,0,0,0,0,7,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1022,                return ya + yb;,4,1,0,0,0,1,0,0,0,5,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1027,        double lnm[] = LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,0,0,0,5,10,0,0,0,0,15,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1038,        double epsilon = (double)(bits & 0x3ffffffffffL) / (4503599627370496.0 + (bits & 0x000ffc0000000000L));,2,0,0,4,8,3,0,0,0,5,103,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1040,        double lnza = 0.0;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1041,        double lnzb = 0.0;,6,0,0,0,0,0,0,0,0,7,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1043,        if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1045,            double tmp = epsilon * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1046,            double aa = epsilon + tmp - tmp;,8,2,0,0,0,0,0,0,0,10,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1047,            double ab = epsilon - aa;,6,1,0,0,0,0,0,2,0,9,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1048,            double xa = aa;,4,0,0,0,0,0,0,0,0,4,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1049,            double xb = ab;,4,0,0,0,0,0,0,0,0,4,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1052,            double numer = (double)(bits & 0x3ffffffffffL);,8,1,0,2,4,0,0,0,0,10,47,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1053,            double denom = 4503599627370496.0 + (bits & 0x000ffc0000000000L);,0,0,0,1,2,0,0,0,0,3,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1054,            aa = numer - xa*denom - xb * denom;,12,4,0,0,0,0,0,0,0,17,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1055,            xb += aa / denom;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1058,            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];,8,1,1,2,4,1,0,0,0,12,57,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1059,            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];,6,1,1,2,4,0,0,0,0,9,57,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1061,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,8,1,0,1,3,0,0,0,0,10,55,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1063,                aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1064,                ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1066,                tmp = aa * 1073741824.0;,12,2,0,0,0,0,0,2,0,18,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1067,                ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1068,                yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1071,                aa = ya + LN_HI_PREC_COEF[i][0];,6,2,0,2,4,0,0,0,0,8,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1072,                ab = yb + LN_HI_PREC_COEF[i][1];,12,3,0,2,4,0,0,0,0,16,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1074,                tmp = aa * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1075,                ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1076,                yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1080,            aa = ya * xa;,6,1,0,0,0,0,0,0,0,7,13,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1081,            ab = ya * xb + yb * xa + yb * xb;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1089,            lnza = aa + ab;,22,2,0,0,0,0,6,2,0,34,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1090,            lnzb = -(lnza - aa - ab);,0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1091,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1094,            lnza = -0.16624882440418567;,10,2,0,0,0,1,0,0,0,15,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1095,            lnza = lnza * epsilon + 0.19999954120254515;,6,2,0,0,0,0,0,0,0,9,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1096,            lnza = lnza * epsilon + -0.2499999997677497;,6,2,0,0,0,0,4,0,0,14,44,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1097,            lnza = lnza * epsilon + 0.3333333333332802;,6,2,0,0,0,0,0,0,0,9,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1098,            lnza = lnza * epsilon + -0.5;,10,3,0,0,0,0,0,0,0,15,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1099,            lnza = lnza * epsilon + 1.0;,22,5,1,0,0,1,2,0,0,36,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1100,            lnza = lnza * epsilon;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1117,        double a = LN_2_A*exp;,6,1,0,0,0,0,0,0,0,7,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1118,        double b = 0.0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1119,        double c = a+lnm[0];,4,1,1,1,2,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1120,        double d = -(c-a-lnm[0]);,14,3,1,2,4,1,0,0,0,21,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1121,        a = c;,8,1,0,0,0,1,2,0,0,13,6,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1122,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1124,        c = a + lnza;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1125,        d = -(c - a - lnza);,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1126,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1127,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1129,        c = a + LN_2_B*exp;,10,2,0,0,0,0,0,0,0,13,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1130,        d = -(c - a - LN_2_B*exp);,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1131,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1132,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1134,        c = a + lnm[1];,6,2,1,1,2,1,0,0,0,20,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1135,        d = -(c - a - lnm[1]);,20,3,1,2,4,0,0,0,0,31,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1136,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1137,        b = b + d;,8,3,1,0,0,0,0,0,0,14,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1139,        c = a + lnzb;,6,1,0,0,0,0,0,0,0,8,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1140,        d = -(c - a - lnzb);,8,1,0,1,2,0,0,0,0,11,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1141,        a = c;,12,2,0,0,0,0,0,0,0,16,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1142,        b = b + d;,10,2,0,0,0,0,0,0,0,13,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1144,        if (hiPrec != null) {,10,2,0,1,3,0,0,0,0,13,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1145,            hiPrec[0] = a;,2,0,1,1,2,0,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1146,            hiPrec[1] = b;,2,0,1,1,2,0,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1149,        return a + b;,4,1,0,0,0,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1157,        double xpa = 1.0 + x;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1158,        double xpb = -(xpa - 1.0 - x);,8,1,0,1,2,0,0,0,0,11,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1160,        if (x == -1) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1161,            return x/0.0;   // -Infinity,2,1,0,0,0,1,0,0,0,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1164,        if (x > 0 && 1/x == 0) { // x = Infinity,2,0,0,1,3,0,0,0,0,3,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1165,            return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1168,        if (x>1e-6 || x<-1e-6) {,6,4,0,1,3,0,0,0,0,12,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1169,            double hiPrec[] = new double[2];,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1171,"            log(xpa, hiPrec);",0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1175,            double fx1 = xpb/xpa;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1177,            double epsilon = 0.5 * fx1 + 1.0;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1178,            epsilon = epsilon * fx1;,8,2,0,0,0,0,2,0,0,14,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1180,            return epsilon + hiPrec[1] + hiPrec[0];,10,2,1,2,4,2,2,0,0,20,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1184,        double y = x * 0.333333333333333 - 0.5;,10,2,0,0,0,0,0,0,0,14,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1185,        y = y * x + 1.0;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1186,        y = y * x;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1188,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1196,        final double hiPrec[] = new double[2];,0,0,0,2,4,0,0,0,0,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1198,"        log(x, hiPrec);",0,0,0,1,2,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1200,        final double tmp = hiPrec[0] * 1073741824.0;,2,2,1,1,2,1,8,0,0,15,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1201,        final double lna = hiPrec[0] + tmp - tmp;,4,2,0,1,2,0,0,0,0,6,41,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1202,        final double lnb = hiPrec[0] - lna + hiPrec[1];,0,0,0,2,4,0,0,0,0,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1204,        final double rln10a = 0.4342944622039795;,2,0,0,0,0,1,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1205,        final double rln10b = 1.9699272335463627E-8;,14,1,0,0,0,1,0,0,0,18,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1207,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,0,0,0,0,0,1,0,0,0,1,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1218,        final double lns[] = new double[2];,0,0,0,2,4,0,0,0,0,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1220,        if (y == 0.0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1221,            return 1.0;,4,0,0,0,0,1,4,0,0,8,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1224,        if (x != x) { // X is NaN,0,0,0,1,3,0,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1225,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1229,        if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1230,            long bits = Double.doubleToLongBits(x);,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1231,            if ((bits & 0x8000000000000000L) != 0) {,4,2,0,2,5,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1233,                long yi = (long) y;,20,2,0,1,2,0,0,0,0,26,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1235,                if (y < 0 && y == yi && (yi & 1) == 1) {,0,0,0,2,5,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1236,                    return Double.NEGATIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1239,                if (y < 0 && y == yi && (yi & 1) == 1) {,8,6,0,2,5,0,0,0,0,14,40,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1240,                    return -0.0;,2,1,0,0,0,1,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1243,                if (y > 0 && y == yi && (yi & 1) == 1) {,0,0,0,2,5,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1244,                    return -0.0;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1248,            if (y < 0) {,4,2,1,1,3,0,0,0,0,11,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1249,                return Double.POSITIVE_INFINITY;,2,1,0,0,0,1,0,0,0,3,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1251,            if (y > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1252,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1255,            return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1258,        if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,6,0,0,13,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1259,            if (y != y) { // y is NaN,0,0,0,1,3,0,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1260,                return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1262,            if (y < 0.0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1263,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1265,                return Double.POSITIVE_INFINITY;,6,1,0,0,0,1,0,0,0,8,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1269,        if (y == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1270,            if (x * x == 1.0),2,0,0,1,2,0,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1271,              return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1273,            if (x * x > 1.0) {,4,2,0,1,3,0,0,0,0,6,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1274,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1276,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1280,        if (x == Double.NEGATIVE_INFINITY) {,4,0,0,1,3,0,0,0,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1281,            if (y != y) { // y is NaN,4,1,0,1,3,0,12,0,0,17,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1282,                return y;,0,0,0,0,0,1,4,0,0,4,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1285,            if (y < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1286,                long yi = (long) y;,0,0,0,1,2,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1287,                if (y == yi && (yi & 1) == 1) {,2,0,0,2,5,0,0,0,0,2,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1288,                    return -0.0;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1291,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1294,            if (y > 0)  {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1295,                long yi = (long) y;,8,0,0,1,2,0,0,0,0,9,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1296,                if (y == yi && (yi & 1) == 1) {,0,0,0,2,5,0,0,0,0,7,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1297,                    return Double.NEGATIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1300,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1304,        if (y == Double.NEGATIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1306,            if (x * x == 1.0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1307,                return Double.NaN;,6,0,0,0,0,1,0,0,0,7,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1310,            if (x * x < 1.0) {,4,2,0,1,3,0,0,0,0,6,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1311,                return Double.POSITIVE_INFINITY;,6,1,0,0,0,1,0,0,0,7,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1313,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1318,        if (x < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1320,            if (y >= 4503599627370496.0 || y <= -4503599627370496.0) {,0,0,0,1,3,0,0,0,0,4,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1321,"                return pow(-x, y);",4,1,0,1,2,1,0,0,0,6,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1324,            if (y == (long) y) {,10,2,0,2,5,1,0,0,0,13,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1326,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",0,0,0,4,8,1,0,0,0,13,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1328,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1335,        if (y < 8e298 && y > -8e298) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1336,            double tmp1 = y * 1073741824.0;,4,1,0,0,0,0,0,0,0,5,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1337,            ya = y + tmp1 - tmp1;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1338,            yb = y - ya;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1339,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1340,            double tmp1 = y * 9.31322574615478515625E-10;,0,0,0,0,0,0,0,0,0,0,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1341,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,0,0,0,0,0,0,0,0,0,0,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1342,            ya = (tmp1 + tmp2 - tmp1) * 1073741824.0 * 1073741824.0;,0,0,0,1,2,0,0,0,0,3,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1343,            yb = y - ya;,6,1,0,0,0,0,0,0,0,8,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1347,"        log(x, lns);",0,0,0,1,2,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1348,        double lna = lns[0];,6,0,1,1,2,0,0,0,0,8,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1349,        double lnb = lns[1];,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1352,        double tmp1 = lna * 1073741824.0;,4,1,0,0,0,0,0,0,0,5,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1353,        double tmp2 = lna + tmp1 - tmp1;,0,0,0,0,0,0,0,0,0,0,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1354,        lnb += lna - tmp2;,14,2,0,0,0,0,0,0,0,18,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1355,        lna = tmp2;,6,1,0,0,0,0,0,0,0,8,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1358,        final double aa = lna * ya;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1359,        final double ab = lna * yb + lnb * ya + lnb * yb;,0,0,0,0,0,0,0,0,0,0,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1361,        lna = aa+ab;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1362,        lnb = -(lna - aa - ab);,16,2,0,1,2,0,0,0,0,21,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1364,        double z = 1.0 / 120.0;,8,2,0,0,0,0,0,0,0,11,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1365,        z = z * lnb + (1.0 / 24.0);,6,3,0,1,2,0,0,0,0,10,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1366,        z = z * lnb + (1.0 / 6.0);,14,4,0,1,2,0,0,0,0,20,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1367,        z = z * lnb + 0.5;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1368,        z = z * lnb + 1.0;,6,2,0,0,0,0,0,0,0,9,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1369,        z = z * lnb;,6,1,0,0,0,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1371,"        final double result = exp(lna, z, null);",10,3,0,1,2,0,0,0,0,13,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1373,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1628,        double x2 = x*x;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1630,        double p = 2.7553817452272217E-6;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1631,        p = p * x2 + -1.9841269659586505E-4;,6,2,0,0,0,0,0,0,0,10,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1632,        p = p * x2 + 0.008333333333329196;,12,3,0,0,0,0,0,0,0,17,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1633,        p = p * x2 + -0.16666666666666666;,8,2,0,0,0,0,0,0,0,12,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1636,        p = p * x2 * x;,8,1,0,0,0,0,0,0,0,10,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1638,        return p;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1648,        double x2 = x*x;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1650,        double p = 2.479773539153719E-5;,0,0,0,0,0,0,0,0,0,0,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1651,        p = p * x2 + -0.0013888888689039883;,6,2,0,0,0,0,0,0,0,10,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1652,        p = p * x2 + 0.041666666666621166;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1653,        p = p * x2 + -0.49999999999999994;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1654,        p *= x2;,12,2,1,0,0,0,4,0,0,22,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1656,        return p;,16,2,0,0,0,2,0,0,0,21,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1667,        int idx = (int) ((xa * 8.0) + 0.5);,4,2,0,3,6,0,0,0,0,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1668,        final double epsilon = xa - EIGHTHES[idx]; //idx*0.125;,2,0,0,1,2,1,10,2,0,15,55,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1671,        final double sintA = SINE_TABLE_A[idx];,0,0,0,1,2,0,4,0,0,4,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1672,        final double sintB = SINE_TABLE_B[idx];,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1673,        final double costA = COSINE_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1674,        final double costB = COSINE_TABLE_B[idx];,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1677,        double sinEpsA = epsilon;,4,0,0,0,0,0,0,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1678,        double sinEpsB = polySine(epsilon);,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1679,        final double cosEpsA = 1.0;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1680,        final double cosEpsB = polyCosine(epsilon);,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1683,        final double temp = sinEpsA * 1073741824.0;,4,1,0,0,0,1,0,0,0,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1684,        double temp2 = (sinEpsA + temp) - temp;,10,1,1,1,2,0,0,0,0,16,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1685,        sinEpsB +=  sinEpsA - temp2;,18,6,0,0,0,0,0,0,0,25,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1686,        sinEpsA = temp2;,4,0,0,0,0,0,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1712,        double a = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1713,        double b = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1715,        double t = sintA;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1716,        double c = a + t;,6,1,0,0,0,0,0,0,0,7,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1717,        double d = -(c - a - t);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1718,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1719,        b = b + d;,8,1,0,0,0,0,0,0,0,10,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1721,        t = costA * sinEpsA;,6,1,0,0,0,0,0,0,0,8,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1722,        c = a + t;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1723,        d = -(c - a - t);,0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1724,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1725,        b = b + d;,24,4,0,0,0,1,0,0,0,30,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1727,        b = b + sintA * cosEpsB + costA * sinEpsB;,0,0,0,0,0,0,0,0,0,0,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1742,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,18,6,0,0,0,0,0,0,0,25,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1769,        if (xb != 0.0) {,2,0,0,1,3,0,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1770,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,20,8,0,2,5,0,0,0,0,30,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1772,            c = a + t;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1773,            d = -(c - a - t);,0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1774,            a = c;,4,0,0,0,0,0,0,0,0,5,6,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1775,            b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1778,        result = a + b;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1780,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1791,        final double pi2a = 1.5707963267948966;,6,1,0,0,0,0,0,0,0,8,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1792,        final double pi2b = 6.123233995736766E-17;,4,0,0,0,0,1,0,0,0,5,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1794,        final double a = pi2a - xa;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1795,        double b = -(a - pi2a + xa);,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1796,        b += pi2b - xb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1798,"        return sinQ(a, b);",0,0,0,1,2,1,6,0,0,6,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1811,        int idx = (int) ((xa * 8.0) + 0.5);,0,0,0,3,6,0,0,0,0,9,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1812,        final double epsilon = xa - EIGHTHES[idx]; //idx*0.125;,0,0,0,1,2,0,0,0,0,3,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1815,        final double sintA = SINE_TABLE_A[idx];,2,0,0,1,2,0,6,0,0,9,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1816,        final double sintB = SINE_TABLE_B[idx];,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1817,        final double costA = COSINE_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1818,        final double costB = COSINE_TABLE_B[idx];,2,0,1,1,2,1,0,0,0,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1821,        double sinEpsA = epsilon;,12,1,1,0,0,1,0,2,0,18,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1822,        double sinEpsB = polySine(epsilon);,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1823,        final double cosEpsA = 1.0;,2,0,0,0,0,1,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1824,        final double cosEpsB = polyCosine(epsilon);,12,1,0,1,2,1,4,0,0,19,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1827,        double temp = sinEpsA * 1073741824.0;,4,1,0,0,0,0,0,0,0,5,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1828,        double temp2 = (sinEpsA + temp) - temp;,14,4,0,1,2,0,0,0,0,20,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1829,        sinEpsB +=  sinEpsA - temp2;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1830,        sinEpsA = temp2;,8,0,0,0,0,0,0,0,0,10,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1855,        double a = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1856,        double b = 0;,4,0,1,0,0,0,0,0,0,7,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1859,        double t = sintA;,2,0,1,0,0,0,0,0,0,8,17,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1860,        double c = a + t;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1861,        double d = -(c - a - t);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1862,        a = c;,4,1,1,0,0,0,0,0,0,9,6,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1863,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1865,        t = costA*sinEpsA;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1866,        c = a + t;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1867,        d = -(c - a - t);,14,1,0,1,2,0,4,0,0,21,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1868,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1869,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1871,        b = b + sintA*cosEpsB + costA*sinEpsB;,30,7,0,0,0,1,0,0,0,40,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1872,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,24,7,0,0,0,1,0,0,0,33,62,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1874,        double sina = a + b;,10,3,1,0,0,0,0,0,0,21,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1875,        double sinb = -(sina - a - b);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1879,        a = b = c = d = 0.0;,8,0,0,0,0,0,0,0,0,12,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1881,        t = costA*cosEpsA;,10,1,0,0,0,0,0,0,0,12,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1882,        c = a + t;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1883,        d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1884,        a = c;,4,1,1,0,0,1,0,0,0,8,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1885,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1887,        t = -sintA*sinEpsA;,6,1,0,0,0,0,0,0,0,9,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1888,        c = a + t;,14,2,0,0,0,0,0,0,0,18,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1889,        d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1890,        a = c;,2,1,0,0,0,0,0,0,0,3,6,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1891,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1893,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,2,0,0,0,0,1,2,0,0,5,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1894,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,16,6,0,1,2,0,0,0,0,23,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1896,        double cosa = a + b;,14,2,0,0,0,0,0,0,0,18,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1897,        double cosb = -(cosa - a - b);,26,3,0,1,2,0,0,0,0,32,30,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1899,        if (cotanFlag) {,22,9,0,1,3,0,0,0,0,32,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1901,            tmp = cosa; cosa = sina; sina = tmp;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1902,            tmp = cosb; cosb = sinb; sinb = tmp;,12,0,0,0,0,0,0,0,0,15,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1916,        double est = sina/cosa;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1919,        temp = est * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1920,        double esta = (est + temp) - temp;,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1921,        double estb =  est - esta;,0,0,0,0,0,0,0,0,0,0,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1923,        temp = cosa * 1073741824.0;,4,1,0,0,0,0,6,0,0,12,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1924,        double cosaa = (cosa + temp) - temp;,8,2,0,1,2,0,0,0,0,10,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1925,        double cosab =  cosa - cosaa;,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1928,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,28,10,0,1,2,0,0,0,0,39,114,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1929,        err += sinb/cosa;                     // Change in est due to sinb,6,1,0,0,0,0,0,0,0,8,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1930,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,0,0,0,0,0,0,0,0,0,0,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1932,        if (xb != 0.0) {,8,2,0,1,3,0,0,0,0,10,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1935,            double xbadj = xb + est*est*xb;,10,2,0,0,0,0,0,0,0,12,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1936,            if (cotanFlag) {,4,1,0,1,3,1,0,0,0,6,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1937,                xbadj = -xbadj;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1940,            err += xbadj;,16,2,0,0,0,0,0,0,0,19,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1943,        return est+err;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1960,        long inbits = Double.doubleToLongBits(x);,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1961,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0,0,0,3,6,0,0,0,0,9,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1964,        inbits &= 0x000fffffffffffffL;,4,0,0,0,0,1,6,0,0,12,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1965,        inbits |= 0x0010000000000000L;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1968,        exponent++;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1969,        inbits <<= 11;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1975,        int idx = exponent >> 6;,16,5,1,0,0,0,4,0,0,35,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1976,        int shift = exponent - (idx << 6);,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1978,        if (shift != 0) {,8,2,0,1,3,0,0,0,0,11,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1979,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,0,0,0,3,6,0,0,0,0,9,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1980,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,8,1,0,2,4,0,0,0,0,9,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1981,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,8,5,1,5,10,0,0,0,0,20,70,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1982,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,0,0,0,5,10,0,0,0,0,15,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1984,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,6,2,1,2,4,0,0,0,0,11,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1985,            shpiA = RECIP_2PI[idx];,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1986,            shpiB = RECIP_2PI[idx+1];,0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1990,        long a = inbits >>> 32;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1991,        long b = inbits & 0xffffffffL;,4,1,0,0,0,0,0,0,0,5,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1993,        long c = shpiA >>> 32;,4,1,0,0,0,0,0,0,0,5,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1994,        long d = shpiA & 0xffffffffL;,8,1,0,0,0,0,0,0,0,11,29,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1996,        long ac = a * c;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1997,        long bd = b * d;,10,1,0,0,0,0,0,0,0,13,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1998,        long bc = b * c;,8,1,1,0,0,0,0,0,0,11,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1999,        long ad = a * d;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2001,        long prodB = bd + (ad << 32);,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2002,        long prodA = ac + (ad >>> 32);,2,0,1,1,2,0,0,0,0,5,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2004,        boolean bita = (bd & 0x8000000000000000L) != 0;,16,4,0,1,2,0,0,0,0,21,47,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2005,        boolean bitb = (ad & 0x80000000L ) != 0;,8,1,0,1,2,0,0,0,0,10,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2006,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,16,3,0,1,2,0,0,0,0,22,52,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2009,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2011,            prodA++;,6,4,0,0,0,0,0,0,0,11,8,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2014,        bita = (prodB & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2015,        bitb = (bc & 0x80000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2017,        prodB = prodB + (bc << 32);,12,3,0,1,2,0,0,0,0,17,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2018,        prodA = prodA + (bc >>> 32);,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2020,        bitsum = (prodB & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2023,        if ( (bita && bitb) ||,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2025,            prodA++;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2029,        c = shpiB >>> 32;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2030,        d = shpiB & 0xffffffffL;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2031,        ac = a * c;,12,3,0,0,0,0,0,0,0,17,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2032,        bc = b * c;,0,1,1,0,0,0,0,0,0,6,11,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2033,        ad = a * d;,16,5,1,0,0,0,0,0,0,26,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2036,        ac = ac + ((bc + ad) >>> 32);,8,3,0,2,4,0,0,0,0,12,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2038,        bita = (prodB & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2039,        bitb = (ac & 0x8000000000000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2040,        prodB += ac;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2041,        bitsum = (prodB & 0x8000000000000000L) != 0;,10,3,0,1,2,0,0,0,0,14,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2043,        if ( (bita && bitb) ||,6,3,0,1,3,0,0,0,0,10,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2045,            prodA++;,2,0,0,0,0,0,0,0,0,3,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2049,        c = shpi0 >>> 32;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2050,        d = shpi0 & 0xffffffffL;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2052,        bd = b * d;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2053,        bc = b * c;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2054,        ad = a * d;,2,0,0,0,0,0,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2056,        prodA += bd + ((bc + ad) << 32);,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2068,        int intPart = (int)(prodA >>> 62);,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2071,        prodA <<= 2;,16,2,0,0,0,0,0,0,0,22,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2072,        prodA |= prodB >>> 62;,4,1,1,0,0,0,0,0,0,8,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2073,        prodB <<= 2;,8,1,0,0,0,0,0,0,0,11,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2076,        a = prodA >>> 32;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2077,        b = prodA & 0xffffffffL;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2079,        c = PI_O_4_BITS[0] >>> 32;,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2080,        d = PI_O_4_BITS[0] & 0xffffffffL;,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2082,        ac = a * c;,4,1,0,0,0,0,0,0,0,5,11,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2083,        bd = b * d;,10,2,0,0,0,0,0,0,0,14,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2084,        bc = b * c;,12,2,0,0,0,0,0,0,0,16,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2085,        ad = a * d;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2087,        long prod2B = bd + (ad << 32);,6,2,0,1,2,0,0,0,0,8,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2088,        long prod2A = ac + (ad >>> 32);,12,2,0,1,2,0,0,0,0,16,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2090,        bita = (bd & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2091,        bitb = (ad & 0x80000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2092,        bitsum = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2095,        if ( (bita && bitb) ||,10,1,0,1,3,0,0,0,0,12,22,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2097,            prod2A++;,8,2,0,0,0,0,0,0,0,10,9,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2100,        bita = (prod2B & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2101,        bitb = (bc & 0x80000000L ) != 0;,10,3,0,1,2,0,0,0,0,15,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2103,        prod2B = prod2B + (bc << 32);,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2104,        prod2A = prod2A + (bc >>> 32);,2,0,0,1,2,0,0,0,0,3,30,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2106,        bitsum = (prod2B & 0x8000000000000000L) != 0;,18,4,0,1,2,0,0,0,0,24,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2109,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2111,            prod2A++;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2115,        c = PI_O_4_BITS[1] >>> 32;,8,0,0,1,2,1,2,8,0,19,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2116,        d = PI_O_4_BITS[1] & 0xffffffffL;,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2117,        ac = a * c;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2118,        bc = b * c;,2,0,0,0,0,0,0,0,0,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2119,        ad = a * d;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2122,        ac = ac + ((bc + ad) >>> 32);,2,0,0,2,4,1,2,0,0,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2124,        bita = (prod2B & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2125,        bitb = (ac & 0x8000000000000000L ) != 0;,6,3,0,1,2,0,0,0,0,10,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2126,        prod2B += ac;,10,2,0,0,0,0,0,0,0,15,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2127,        bitsum = (prod2B & 0x8000000000000000L) != 0;,6,2,0,1,2,0,0,2,0,11,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2129,        if ( (bita && bitb) ||,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2131,            prod2A++;,6,0,0,0,0,0,0,0,0,8,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2135,        a = prodB >>> 32;,4,1,0,0,0,0,0,0,0,6,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2136,        b = prodB & 0xffffffffL;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2137,        c = PI_O_4_BITS[0] >>> 32;,2,1,1,1,2,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2138,        d = PI_O_4_BITS[0] & 0xffffffffL;,4,1,1,1,2,0,0,0,0,8,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2139,        ac = a * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2140,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2141,        ad = a * d;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2144,        ac = ac + ((bc + ad) >>> 32);,8,3,0,2,4,0,0,0,0,12,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2146,        bita = (prod2B & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2147,        bitb = (ac & 0x8000000000000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2148,        prod2B += ac;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2149,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2151,        if ( (bita && bitb) ||,2,1,1,1,3,0,0,0,0,6,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2153,            prod2A++;,2,0,0,0,0,0,0,0,0,2,9,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2157,        double tmpA = (prod2A >>> 12) / 4503599627370496.0;  // High order 52 bits,0,0,0,1,2,0,0,0,0,3,74,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2158,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / 4503599627370496.0 / 4503599627370496.0; // Low bits,0,0,0,4,8,0,0,0,0,12,114,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2160,        double sumA = tmpA + tmpB;,0,0,0,0,0,0,0,0,0,0,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2161,        double sumB = -(sumA - tmpA - tmpB);,10,2,0,1,2,0,0,0,0,14,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2164,        result[0] = intPart;,2,0,1,1,2,0,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2165,        result[1] = sumA * 2.0;,4,2,1,1,2,0,0,0,0,9,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2166,        result[2] = sumB * 2.0;,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2167,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2175,        boolean negative = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2176,        int quadrant = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2178,        double xb = 0.0;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2181,        xa = x;,10,1,0,0,0,0,0,0,0,13,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2182,        if (x < 0) {,2,0,1,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2183,            negative = true;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2184,            xa = -xa;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2188,        if (xa == 0.0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2189,            long bits = Double.doubleToLongBits(x);,4,0,0,1,2,0,0,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2190,            if (bits < 0) {,8,2,0,1,3,0,0,0,0,10,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2191,                return -0.0;,2,0,0,0,0,1,0,0,0,4,12,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2193,            return 0.0;,4,0,0,0,0,1,0,0,0,5,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2196,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,16,4,0,1,3,0,0,0,0,21,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2197,            return Double.NaN;,10,1,0,0,0,1,0,0,0,11,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2201,        if (xa > 3294198.0) {,4,0,0,1,3,0,0,0,0,4,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2205,            double reduceResults[] = new double[3];,0,0,0,2,4,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2206,"            reducePayneHanek(xa, reduceResults);",0,0,0,1,2,0,6,0,0,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2207,            quadrant = ((int) reduceResults[0]) & 3;,0,0,0,3,6,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2208,            xa = reduceResults[1];,8,2,0,1,2,0,0,0,0,10,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2209,            xb = reduceResults[2];,2,0,1,1,2,0,8,0,0,13,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2210,        } else if (xa > 1.5707963267948966) {,2,1,0,1,4,0,0,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2215,            int k = (int)(xa * 0.6366197723675814);,10,2,0,2,4,0,0,0,0,13,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2221,                double a = -k * 1.570796251296997;,4,1,0,0,0,0,0,0,0,6,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2222,                remA = xa + a;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2223,                remB = -(remA - xa - a);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2225,                a = -k * 7.549789948768648E-8;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2226,                double b = remA;,4,0,0,0,0,0,0,0,0,4,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2227,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2228,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2230,                a = -k * 6.123233995736766E-17;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2231,                b = remA;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2232,                remA = a + b;,6,1,1,0,0,0,0,0,0,14,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2233,                remB += -(remA - b - a);,4,0,0,1,2,0,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2235,                if (remA > 0.0),2,1,0,1,2,0,0,0,0,3,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2236,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2241,                k--;,0,0,0,0,0,0,0,0,0,0,4,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2242,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2243,            quadrant = k & 3;,4,1,0,0,0,0,0,0,0,6,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2244,            xa = remA;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2245,            xb = remB;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2248,        if (negative) {,4,0,0,1,3,0,4,0,0,11,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2249,            quadrant ^= 2;  // Flip bit 1,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2252,        switch (quadrant) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2254,"                return sinQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2256,"                return cosQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2258,"                return -sinQ(xa, xb);",6,1,0,1,2,2,6,0,0,15,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2260,"                return -cosQ(xa, xb);",10,1,0,1,2,1,6,0,0,19,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2262,                return Double.NaN;,22,9,0,0,0,1,0,0,0,32,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2272,        int quadrant = 0;,4,0,0,0,0,0,0,0,0,5,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2275,        double xa = x;,4,0,0,0,0,0,0,0,0,4,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2276,        if (x < 0) {,14,4,0,1,3,0,0,0,0,19,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2277,            xa = -xa;,2,1,0,0,0,0,0,0,0,4,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2280,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,2,0,0,1,3,0,0,0,0,2,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2281,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2285,        double xb = 0;,2,2,0,0,0,0,12,0,0,16,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2286,        if (xa > 3294198.0) {,14,4,0,1,3,0,2,0,0,21,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2290,            double reduceResults[] = new double[3];,4,1,1,2,4,0,0,0,0,10,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2291,"            reducePayneHanek(xa, reduceResults);",0,0,0,1,2,0,6,0,0,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2292,            quadrant = ((int) reduceResults[0]) & 3;,6,2,1,3,6,0,0,0,0,11,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2293,            xa = reduceResults[1];,12,3,1,1,2,0,0,0,0,18,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2294,            xb = reduceResults[2];,6,1,1,1,2,0,0,0,0,11,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2295,        } else if (xa > 1.5707963267948966) {,2,1,0,1,4,0,0,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2300,            int k = (int)(xa * 0.6366197723675814);,0,0,0,2,4,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2306,                double a = -k * 1.570796251296997;,4,1,1,0,0,0,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2307,                remA = xa + a;,20,5,0,0,0,0,0,0,0,27,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2308,                remB = -(remA - xa - a);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2310,                a = -k * 7.549789948768648E-8;,18,5,1,0,0,2,4,0,0,33,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2311,                double b = remA;,12,1,0,0,0,0,0,0,0,15,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2312,                remA = a + b;,12,2,0,0,0,0,0,0,0,15,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2313,                remB += -(remA - b - a);,2,0,1,1,2,0,0,0,0,5,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2315,                a = -k * 6.123233995736766E-17;,12,4,0,0,0,0,8,0,0,27,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2316,                b = remA;,4,0,0,0,0,0,0,0,0,5,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2317,                remA = a + b;,10,2,0,0,0,0,4,0,0,17,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2318,                remB += -(remA - b - a);,12,2,0,1,2,0,0,0,0,16,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2320,                if (remA > 0.0),0,0,0,1,2,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2321,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2326,                k--;,0,0,0,0,0,0,0,0,0,0,4,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2327,            },4,0,0,0,1,1,4,0,0,10,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2328,            quadrant = k & 3;,4,1,0,0,0,0,0,0,0,6,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2329,            xa = remA;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2330,            xb = remB;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2336,        switch (quadrant) {,8,7,0,1,3,0,0,0,0,15,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2338,"                return cosQ(xa, xb);",0,0,0,1,2,1,6,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2340,"                return -sinQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2342,"                return -cosQ(xa, xb);",10,2,0,1,2,1,6,0,0,20,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2344,"                return sinQ(xa, xb);",8,3,0,1,2,1,0,0,0,12,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2346,                return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2356,        boolean negative = false;,12,3,0,0,0,0,0,0,0,17,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2357,        int quadrant = 0;,4,0,0,0,0,0,0,0,0,4,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2360,        double xa = x;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2361,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2362,            negative = true;,8,2,1,0,0,1,0,0,0,14,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2363,            xa = -xa;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2367,        if (xa == 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2368,            long bits = Double.doubleToLongBits(x);,6,1,0,1,2,0,0,0,0,8,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2369,            if (bits < 0) {,4,1,0,1,3,1,0,0,0,6,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2370,                return -0.0;,0,0,0,0,0,1,0,0,0,1,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2372,            return 0.0;,8,4,0,0,0,1,0,0,0,14,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2375,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,0,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2376,            return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2380,        double xb = 0;,4,1,0,0,0,0,0,0,0,6,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2381,        if (xa > 3294198.0) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2385,            double reduceResults[] = new double[3];,0,0,0,2,4,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2386,"            reducePayneHanek(xa, reduceResults);",0,0,0,1,2,0,6,0,0,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2387,            quadrant = ((int) reduceResults[0]) & 3;,2,1,1,3,6,0,0,0,0,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2388,            xa = reduceResults[1];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2389,            xb = reduceResults[2];,4,0,1,1,2,0,0,0,0,7,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2390,        } else if (xa > 1.5707963267948966) {,2,1,0,1,4,0,0,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2395,            int k = (int)(xa * 0.6366197723675814);,4,1,0,2,4,0,0,0,0,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2401,                double a = -k * 1.570796251296997;,4,1,0,0,0,0,0,0,0,6,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2402,                remA = xa + a;,6,1,0,0,0,0,0,0,0,8,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2403,                remB = -(remA - xa - a);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2405,                a = -k * 7.549789948768648E-8;,2,0,0,0,0,0,0,0,0,2,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2406,                double b = remA;,4,0,0,0,0,0,0,0,0,4,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2407,                remA = a + b;,6,2,0,0,0,0,8,0,0,18,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2408,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2410,                a = -k * 6.123233995736766E-17;,6,1,0,0,0,0,0,0,0,9,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2411,                b = remA;,14,6,1,0,0,0,0,0,0,26,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2412,                remA = a + b;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2413,                remB += -(remA - b - a);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2415,                if (remA > 0.0),0,0,0,1,2,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2416,                    break;,6,0,0,0,0,0,0,0,0,7,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2421,                k--;,4,0,0,0,0,0,0,0,0,5,4,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2422,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2423,            quadrant = k & 3;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2424,            xa = remA;,10,1,0,0,0,0,0,0,0,13,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2425,            xb = remB;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2428,        if (xa > 1.5) {,10,3,0,1,3,0,0,0,0,13,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2430,            final double pi2a = 1.5707963267948966;,0,0,0,0,0,0,0,0,0,0,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2431,            final double pi2b = 6.123233995736766E-17;,0,0,0,0,0,0,0,0,0,0,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2433,            final double a = pi2a - xa;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2434,            double b = -(a - pi2a + xa);,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2435,            b += pi2b - xb;,8,1,0,0,0,0,4,0,0,14,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2437,            xa = a + b;,6,1,0,0,0,0,0,0,0,8,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2438,            xb = -(xa - a - b);,8,1,0,1,2,0,0,0,0,11,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2439,            quadrant ^= 1;,4,2,0,0,0,0,0,0,0,6,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2440,            negative ^= true;,8,1,0,0,0,0,0,0,0,11,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2444,        if ((quadrant & 1) == 0) {,2,2,0,2,5,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2445,"            result = tanQ(xa, xb, false);",6,0,0,1,2,0,6,0,0,14,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2447,"            result = -tanQ(xa, xb, true);",4,1,0,1,2,0,6,0,0,15,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2450,        if (negative) {,2,0,0,1,3,0,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2451,            result = -result;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2454,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2463,"        return atan(x, 0.0, false);",6,1,0,1,2,1,4,0,0,13,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2473,        boolean negate = false;,10,4,0,0,0,1,0,0,0,16,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2476,        if (xa < 0) {,6,4,0,1,3,0,4,0,0,14,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2478,            xa = -xa;,12,1,0,0,0,0,0,0,0,16,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2479,            xb = -xb;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2480,            negate = true;,2,0,0,0,0,0,0,0,0,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2483,        if (xa > 1.633123935319537E16) { // Very large input,2,1,0,1,3,0,0,0,0,3,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2484,            return (negate ^ leftPlane) ? (-Math.PI/2.0) : (Math.PI/2.0);,12,3,0,3,6,1,0,0,0,16,61,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2488,        if (xa < 1.0) {,2,1,1,1,3,0,10,0,0,22,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2489,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,8,4,0,4,8,0,0,0,0,14,65,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2491,            double temp = 1.0/xa;,10,2,0,0,0,0,0,0,0,12,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2492,            idx = (int) (-((-1.7168146928204136 * temp * temp + 8.0) * temp) + 13.07);,0,0,0,4,8,0,0,0,0,12,74,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2494,        double epsA = xa - TANGENT_TABLE_A[idx];,4,1,1,1,2,0,0,0,0,9,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2495,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,6,2,1,2,4,0,0,0,0,13,50,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2496,        epsB += xb - TANGENT_TABLE_B[idx];,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2498,        double temp = epsA + epsB;,0,0,0,0,0,0,0,0,0,0,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2499,        epsB = -(temp - epsA - epsB);,8,1,0,1,2,0,0,0,0,11,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2500,        epsA = temp;,4,0,0,0,0,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2503,        temp = xa * 1073741824.0;,2,0,0,0,0,0,0,0,0,2,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2504,        double ya = xa + temp - temp;,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2505,        double yb = xb + xa - ya;,18,4,0,0,0,0,0,0,0,23,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2506,        xa = ya;,6,2,1,0,0,1,0,0,0,11,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2507,        xb += yb;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2510,        if (idx == 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2513,            double denom = 1.0 / (1.0 + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,6,5,1,5,10,0,0,0,0,19,87,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2515,            ya = epsA * denom;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2516,            yb = epsB * denom;,6,1,0,0,0,0,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2517,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2518,            double temp2 = xa * TANGENT_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2519,            double za = 1.0 + temp2;,6,1,0,0,0,0,0,0,0,8,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2520,            double zb = -(za - 1.0 - temp2);,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2521,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,0,0,0,2,4,0,0,0,0,6,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2522,            temp = za + temp2;,6,1,0,0,0,0,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2523,            zb += -(temp - za - temp2);,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2524,            za = temp;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2526,            zb += xb * TANGENT_TABLE_B[idx];,4,1,1,1,2,0,0,0,0,10,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2527,            ya = epsA / za;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2529,            temp = ya * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2530,            final double yaa = (ya + temp) - temp;,14,3,0,1,2,2,0,0,0,19,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2531,            final double yab = ya - yaa;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2533,            temp = za * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2534,            final double zaa = (za + temp) - temp;,8,2,0,1,2,1,0,0,0,11,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2535,            final double zab = za - zaa;,6,1,0,0,0,1,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2538,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,24,9,0,1,2,1,0,0,0,35,65,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2540,            yb += -epsA * zb / za / za;,10,3,0,0,0,0,0,0,0,15,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2541,            yb += epsB / za;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2545,        epsA = ya;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2546,        epsB = yb;,2,0,0,0,0,0,0,0,0,3,10,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2549,        double epsA2 = epsA*epsA;,12,2,0,0,0,1,6,0,0,21,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2560,        yb = 0.07490822288864472;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2561,        yb = yb * epsA2 + -0.09088450866185192;,2,0,0,0,0,0,0,0,0,2,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2562,        yb = yb * epsA2 + 0.11111095942313305;,10,2,0,0,0,0,0,0,0,14,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2563,        yb = yb * epsA2 + -0.1428571423679182;,14,3,0,0,0,0,6,4,0,31,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2564,        yb = yb * epsA2 + 0.19999999999923582;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2565,        yb = yb * epsA2 + -0.33333333333333287;,8,2,0,0,0,0,0,0,0,12,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2566,        yb = yb * epsA2 * epsA;,8,1,0,0,0,0,0,0,0,10,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2569,        ya = epsA;,4,1,0,0,0,0,0,0,0,5,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2571,        temp = ya + yb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2572,        yb = -(temp - ya - yb);,14,2,0,1,2,0,0,0,0,19,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2573,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2576,        yb += epsB / (1.0 + epsA * epsA);,6,1,0,1,2,0,0,0,0,7,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2582,        double za = EIGHTHES[idx] + ya;,0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2583,        double zb = -(za - EIGHTHES[idx] - ya);,6,1,1,2,4,0,0,0,0,12,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2584,        temp = za + yb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2585,        zb += -(temp - za - yb);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2586,        za = temp;,8,1,0,0,0,0,0,0,0,10,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2588,        result = za + zb;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2589,        resultb = -(result - za - zb);,2,1,0,1,2,0,0,2,0,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2591,        if (leftPlane) {,8,1,0,1,3,1,0,0,0,10,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2593,            final double pia = 1.5707963267948966*2.0;,0,0,0,0,0,0,0,0,0,0,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2594,            final double pib = 6.123233995736766E-17*2.0;,0,0,0,0,0,0,0,0,0,0,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2596,            za = pia - result;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2597,            zb = -(za - pia + result);,18,5,0,1,2,0,0,0,0,26,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2598,            zb += pib - resultb;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2600,            result = za + zb;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2601,            resultb = -(result - za - zb);,14,2,0,1,2,0,0,0,0,19,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2605,        if (negate ^ leftPlane) {,4,1,0,1,3,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2606,            result = -result;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2609,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2619,        if (x !=x || y != y) {,12,3,0,1,3,0,0,0,0,17,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2620,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2623,        if (y == 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2624,            double result = x*y;,6,1,0,0,0,0,0,0,0,7,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2625,            double invx = 1.0/x;,10,3,0,0,0,0,6,0,0,21,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2626,            double invy = 1.0/y;,8,5,0,0,0,0,0,0,0,13,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2628,            if (invx == 0.0) { // X is infinite,0,0,0,1,3,0,0,0,0,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2629,                if (x > 0) {,8,3,0,1,3,0,0,0,0,12,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2630,                    return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2632,                    return Math.PI;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2636,            if (result != result) { // y must be infinite,0,0,0,1,3,0,0,0,0,4,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2637,                return x/y;,6,2,1,0,0,2,0,0,0,11,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2640,            if (x < 0.0 || invx < 0.0) {,4,3,0,1,3,0,0,0,0,7,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2641,                if (y < 0.0 || invy < 0.0) {,4,3,0,1,3,0,0,0,0,7,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2642,                    return -Math.PI;,8,2,0,0,0,1,0,0,0,12,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2644,                    return Math.PI;,4,0,0,0,0,1,0,0,0,4,15,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2647,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2651,        if (y == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2652,            if (x == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2653,                return Math.PI/4.0;,0,0,0,0,0,1,0,0,0,1,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2656,            if (x == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2657,                return Math.PI*3.0/4.0;,4,2,0,0,0,1,0,0,0,6,23,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2660,            return Math.PI/2.0;,6,1,0,0,0,1,6,0,0,14,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2663,        if (y == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2664,            if (x == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2665,                return -Math.PI/4.0;,0,0,0,0,0,1,0,0,0,1,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2668,            if (x == Double.NEGATIVE_INFINITY) {,8,1,0,1,3,0,0,0,0,9,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2669,                return -Math.PI*3.0/4.0;,12,4,0,0,0,1,0,0,0,17,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2672,            return -Math.PI/2.0;,4,1,0,0,0,1,0,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2675,        if (x == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2676,            if (y > 0.0 || 1/y > 0.0) {,4,4,0,1,3,0,0,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2677,                return 0.0;,2,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2680,            if (y < 0.0 || 1/y < 0.0) {,0,0,0,1,3,0,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2681,                return -0.0;,6,1,0,0,0,1,4,0,0,14,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2685,        if (x == Double.NEGATIVE_INFINITY),8,1,0,1,2,1,4,0,0,14,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2687,            if (y > 0.0 || 1/y > 0.0) {,6,4,0,1,3,0,0,0,0,10,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2688,                return Math.PI;,2,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2691,            if (y < 0.0 || 1/y < 0.0) {,4,4,0,1,3,0,0,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2692,                return -Math.PI;,4,0,0,0,0,1,0,0,0,5,16,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2696,        if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2697,            if (y > 0.0 || 1/y > 0.0) {,10,8,0,1,3,0,0,0,0,19,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2698,                return Math.PI/2.0;,6,2,0,0,0,1,0,0,0,8,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2701,            if (y < 0.0 || 1/y < 0.0) {,4,4,0,1,3,0,0,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2702,                return -Math.PI/2.0;,4,1,0,0,0,1,6,0,0,12,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2706,        if (x > 8e298 || x < -8e298) { // This would cause split of x to fail,0,0,0,1,3,0,0,0,0,4,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2707,            x *= 9.31322574615478515625E-10;,2,0,0,0,0,0,0,0,0,3,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2708,            y *= 9.31322574615478515625E-10;,8,2,1,0,0,0,0,0,0,12,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2712,        double temp = x * 1073741824.0;,4,1,0,0,0,0,0,0,0,5,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2713,        final double xa = x + temp - temp;,8,2,0,0,0,1,0,0,0,11,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2714,        final double xb = x - xa;,6,1,0,0,0,1,0,0,0,8,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2717,        final double r = y/x;,6,1,0,0,0,1,0,0,0,8,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2718,        temp = r * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2719,        double ra = r + temp - temp;,10,2,0,0,0,1,6,0,0,19,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2720,        double rb = r - ra;,6,1,0,0,0,0,0,0,0,7,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2722,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,22,9,0,1,2,0,0,0,0,32,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2724,        temp = ra + rb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2725,        rb = -(temp - ra - rb);,8,2,0,1,2,0,0,0,0,10,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2726,        ra = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2729,"        double result = atan(ra, rb, x < 0);",4,1,0,1,2,0,6,0,0,11,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2731,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2739,      if (x != x) {,10,3,0,1,3,0,0,0,0,15,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2740,          return Double.NaN;,8,0,1,0,0,1,6,0,0,22,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2743,      if (x > 1.0 || x < -1.0) {,4,3,0,1,3,0,0,0,0,8,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2744,          return Double.NaN;,2,1,1,0,0,1,0,0,0,6,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2747,      if (x == 1.0) {,6,2,1,1,3,0,0,0,0,13,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2748,          return Math.PI/2.0;,10,2,0,0,0,1,0,0,0,13,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2751,      if (x == -1.0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2752,          return -Math.PI/2.0;,0,0,0,0,0,1,0,0,0,1,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2758,      double temp = x * 1073741824.0;,16,2,0,0,0,0,0,0,0,19,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2759,      final double xa = x + temp - temp;,8,2,0,0,0,1,0,0,0,11,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2760,      final double xb = x - xa;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2763,      double ya = xa*xa;,6,1,0,0,0,0,0,0,0,7,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2764,      double yb = xa*xb*2.0 + xb*xb;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2767,      ya = -ya;,4,0,0,0,0,0,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2768,      yb = -yb;,4,0,0,0,0,0,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2770,      double za = 1.0 + ya;,4,1,0,0,0,0,0,0,0,5,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2771,      double zb = -(za - 1.0 - ya);,16,3,1,1,2,0,12,0,0,36,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2773,      temp = za + yb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2774,      zb += -(temp - za - yb);,10,1,0,1,2,0,0,0,0,13,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2775,      za = temp;,10,2,0,0,0,0,0,0,0,14,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2779,      y = sqrt(za);,2,0,0,1,2,0,4,0,0,7,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2780,      temp = y * 1073741824.0;,8,5,0,0,0,0,0,0,0,14,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2781,      ya = y + temp - temp;,18,3,0,0,0,0,0,2,0,26,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2782,      yb = y - ya;,6,1,0,0,0,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2785,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,18,8,0,2,4,0,0,0,0,27,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2788,      double dx = zb / (2.0*y);,18,2,0,1,2,0,0,0,0,23,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2791,      double r = x/y;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2792,      temp = r * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2793,      double ra = r + temp - temp;,6,1,0,0,0,1,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2794,      double rb = r - ra;,0,1,1,0,0,0,0,0,0,14,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2796,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,22,9,0,1,2,0,0,0,0,32,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2797,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,10,3,0,0,0,0,0,0,0,15,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2799,      temp = ra + rb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2800,      rb = -(temp - ra - rb);,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2801,      ra = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2803,"      return atan(ra, rb, false);",2,0,1,1,2,2,6,0,0,12,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2811,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2812,          return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2815,      if (x > 1.0 || x < -1.0) {,4,3,0,1,3,0,0,0,0,8,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2816,          return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2819,      if (x == -1.0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2820,          return Math.PI;,4,0,0,0,0,1,6,0,0,10,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2823,      if (x == 1.0) {,2,0,0,1,3,1,4,0,0,7,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2824,          return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2827,      if (x == 0) {,16,3,0,1,3,0,0,0,0,20,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2828,          return Math.PI/2.0;,0,0,0,0,0,1,0,0,0,1,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2834,      double temp = x * 1073741824.0;,4,1,0,0,0,0,0,0,0,5,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2835,      final double xa = x + temp - temp;,8,2,0,0,0,1,0,0,0,11,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2836,      final double xb = x - xa;,6,1,0,0,0,1,0,0,0,8,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2839,      double ya = xa*xa;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2840,      double yb = xa*xb*2.0 + xb*xb;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2843,      ya = -ya;,4,0,0,0,0,0,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2844,      yb = -yb;,4,0,0,0,0,0,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2846,      double za = 1.0 + ya;,6,1,0,0,0,0,0,0,0,8,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2847,      double zb = -(za - 1.0 - ya);,4,2,0,1,2,0,0,0,0,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2849,      temp = za + yb;,8,1,0,0,0,0,0,0,0,11,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2850,      zb += -(temp - za - yb);,0,0,0,1,2,0,0,2,0,2,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2851,      za = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2854,      double y = sqrt(za);,2,0,0,1,2,0,4,0,0,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2855,      temp = y * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2856,      ya = y + temp - temp;,8,2,0,0,0,0,0,0,0,11,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2857,      yb = y - ya;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2860,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0,0,0,2,4,0,0,0,0,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2863,      yb += zb / (2.0*y);,10,2,0,1,2,0,0,0,0,14,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2864,      y = ya+yb;,2,0,0,0,0,1,6,0,0,9,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2865,      yb = -(y - ya - yb);,8,1,0,1,2,0,0,0,0,11,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2868,      double r = y/x;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2869,      temp = r * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2870,      double ra = r + temp - temp;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2871,      double rb = r - ra;,10,3,0,0,0,0,0,0,0,14,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2873,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,24,9,0,1,2,0,6,0,0,40,83,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2874,      rb += yb / x;  // Add in effect additional bits of sqrt.,0,0,0,0,0,0,0,0,0,0,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2876,      temp = ra + rb;,12,2,0,0,0,0,0,0,0,16,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2877,      rb = -(temp - ra - rb);,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2878,      ra = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2880,"      return atan(ra, rb, x<0);",0,0,0,1,2,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2889,      long inbits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,41,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2890,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,4,3,0,3,6,0,0,0,0,7,53,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2891,      boolean subnormal = false;,2,0,0,0,0,0,0,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2893,      if (exponent == -1023) {,2,1,0,1,3,0,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2894,          if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2895,              return x;,2,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2899,          subnormal = true;,2,0,0,0,0,0,0,0,0,4,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2900,          x *= 1.8014398509481984E16;  // 2^54,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2901,          inbits = Double.doubleToLongBits(x);,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2902,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,4,3,0,3,6,0,0,0,0,8,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2905,      if (exponent == 1024) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2907,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2911,      int exp3 = exponent / 3;,8,2,0,0,0,0,0,0,0,11,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2914,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) | ,0,0,0,1,3,0,0,0,0,4,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2918,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,6,2,0,2,4,1,4,0,0,13,98,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2921,      double est = -0.010714690733195933;,14,4,0,0,0,0,0,0,0,20,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2922,      est = est * mant + 0.0875862700108075;,10,3,0,0,0,0,0,0,0,14,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2923,      est = est * mant + -0.3058015757857271;,6,2,0,0,0,0,0,0,0,10,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2924,      est = est * mant + 0.7249995199969751;,14,5,0,0,0,0,0,0,0,20,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2925,      est = est * mant + 0.5039018405998233;,6,2,0,0,0,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2927,      est *= CBRTTWO[exponent % 3 + 2];,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2932,      final double xs = x / (p2*p2*p2); ,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2933,      est += (xs - est*est*est) / (3*est*est);,14,4,0,2,4,0,0,0,0,19,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2934,      est += (xs - est*est*est) / (3*est*est);,14,4,0,2,4,0,0,0,0,19,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2937,      double temp = est * 1073741824.0;,6,2,1,0,0,1,0,0,0,12,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2938,      double ya = est + temp - temp;,8,3,0,0,0,0,0,0,0,12,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2939,      double yb = est - ya;,14,2,0,0,0,0,0,0,0,18,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2941,      double za = ya * ya;,2,0,0,0,0,0,0,2,0,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2942,      double zb = ya * yb * 2.0 + yb * yb;,10,3,0,0,0,0,0,0,0,14,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2943,      temp = za * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2944,      double temp2 = za + temp - temp;,8,2,0,0,0,0,0,0,0,10,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2945,      zb += (za - temp2);,4,2,0,1,2,0,0,0,0,6,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2946,      za = temp2;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2948,      zb = za * yb + ya * zb + zb * yb;,14,5,0,0,0,0,0,0,0,20,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2949,      za = za * ya;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2951,      double na = xs - za;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2952,      double nb = -(na - xs + za);,8,2,0,1,2,0,0,0,0,11,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2953,      nb -= zb;,4,0,0,0,0,0,0,0,0,5,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2955,      est += (na+nb)/(3*est*est);,10,3,0,2,4,0,0,0,0,14,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2958,      est *= p2;,10,1,0,0,0,0,0,0,0,13,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2960,      if (subnormal) {,4,1,0,1,3,0,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2961,          est *= 3.814697265625E-6;  // 2^-18,2,0,0,0,0,0,0,0,0,3,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2964,      return est;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2974,        final double facta = 0.01745329052209854;,0,0,0,0,0,0,0,0,0,0,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2975,        final double factb = 1.997844754509471E-9;,0,0,0,0,0,0,0,0,0,1,42,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2977,        double temp = x * 1073741824.0;,4,1,0,0,0,0,0,0,0,5,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2978,        double xa = x + temp - temp;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2979,        double xb = x - xa;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2981,        return xb * factb + xb * facta + xa * factb + xa * facta;,16,7,0,0,0,1,0,0,0,23,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2991,        final double facta = 57.2957763671875;,2,0,0,0,0,1,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2992,        final double factb = 3.145894820876798E-6;,4,1,0,0,0,1,0,0,0,6,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2994,        double temp = x * 1073741824.0;,6,2,0,0,0,0,0,0,0,9,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2995,        double xa = x + temp - temp;,8,2,0,0,0,0,0,0,0,10,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2996,        double xb = x - xa;,6,1,0,0,0,0,0,0,0,7,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2998,        return xb * factb + xb * facta + xa * factb + xa * facta;,16,7,0,0,0,1,0,0,0,23,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3007,        return (x < 0) ? -x : x;,6,1,0,1,2,1,0,0,0,8,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3016,        return (x < 0l) ? -x : x;,0,0,0,1,2,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3025,        return (x < 0.0f) ? -x : x;,6,1,0,1,2,1,0,0,0,8,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3034,        return (x < 0.0) ? -x : x;,6,1,0,1,2,1,0,0,0,8,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3044,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,6,1,0,3,6,1,0,0,0,8,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3066,        if (Double.isNaN(d) || Double.isInfinite(d)) {,0,1,0,3,7,0,12,0,0,13,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3067,            return d;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3068,        } else if (d == 0) {,2,1,0,1,4,0,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3069,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,0,0,0,1,2,1,0,0,0,4,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3075,        long bits     = Double.doubleToLongBits(d);,2,0,1,1,2,0,0,0,0,5,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3076,        long sign     = bits & 0x8000000000000000L;,4,1,0,0,0,0,0,0,0,5,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3077,        long exponent = bits & 0x7ff0000000000000L;,0,0,0,0,0,0,0,0,0,0,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3078,        long mantissa = bits & 0x000fffffffffffffL;,0,0,0,0,0,0,0,0,0,0,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3080,        if (d * (direction - d) >= 0) {,0,0,0,2,5,0,0,0,0,7,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3082,            if (mantissa == 0x000fffffffffffffL) {,4,2,0,1,3,0,0,0,0,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3083,                return Double.longBitsToDouble(sign |,2,1,0,0,1,1,4,0,0,7,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3086,                return Double.longBitsToDouble(sign |,10,2,0,0,1,1,0,0,0,13,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3091,            if (mantissa == 0L) {,2,1,0,1,3,0,0,0,0,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3092,                return Double.longBitsToDouble(sign |,6,3,0,0,1,1,4,0,0,13,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3096,                return Double.longBitsToDouble(sign |,8,2,1,0,1,1,4,0,0,18,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3110,        if (x != x) { // NaN,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3111,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3114,        if (x >= 4503599627370496.0 || x <= -4503599627370496.0) {,2,1,0,1,3,0,0,0,0,3,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3115,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3118,        y = (long) x;,14,2,0,1,2,1,0,0,0,19,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3119,        if (x < 0 && y != x) {,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3120,            y--;,2,0,0,0,0,0,0,0,0,3,4,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3123,        if (y == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3124,            return x*y;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3127,        return (double) y;,2,0,0,1,2,1,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3137,        if (x != x) { // NaN,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3138,            return x;,12,1,0,0,0,1,0,0,0,14,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3141,        y = floor(x);,2,0,0,1,2,0,4,0,0,7,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3142,        if (y == x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3143,            return y;,4,0,0,0,0,1,0,0,0,5,9,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3146,        y += 1.0;,2,0,0,0,0,0,0,0,0,3,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3148,        if (y == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3149,            return x*y;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3152,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3160,        double y = floor(x);,8,1,0,1,2,0,4,0,0,15,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3161,        double d = x - y;,6,1,0,0,0,0,0,0,0,7,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3163,        if (d > 0.5) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3164,            return y+1.0;,2,1,0,0,0,1,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3166,        if (d < 0.5) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3167,            return y;,10,3,0,0,0,1,0,0,0,13,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3171,        long z = (long) y;,16,3,0,1,2,0,10,0,0,30,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3172,        return (z & 1) == 0 ? y : y + 1.0;,6,3,0,1,2,1,0,0,0,9,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3180,        return (long) floor(x + 0.5);,2,1,0,2,4,1,2,0,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3188,        return Math.round(x);,4,2,0,1,2,1,6,0,0,12,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3197,        return (a <= b) ? a : b;,8,1,0,1,2,1,0,0,0,9,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3206,        return (a <= b) ? a : b;,18,3,1,1,2,1,4,2,0,31,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3215,        return (a <= b) ? a : (Float.isNaN(a + b) ? Float.NaN : b);,0,0,0,3,6,1,0,0,0,10,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3224,        return (a <= b) ? a : (Double.isNaN(a + b) ? Double.NaN : b);,4,0,0,3,6,1,0,0,0,4,61,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3233,        return (a <= b) ? b : a;,8,1,0,1,2,1,0,0,0,9,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3242,        return (a <= b) ? b : a;,0,0,0,1,2,1,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3251,        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);,24,5,0,3,6,2,12,0,0,42,59,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3260,        return (a <= b) ? b : (Double.isNaN(a + b) ? Double.NaN : a);,16,2,1,3,6,1,8,0,0,30,61,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,71,        return cumulativeProbability((int) FastMath.floor(x));,16,3,0,3,6,2,12,0,0,33,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,90,        if (x0 > x1) {,4,1,0,1,3,0,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,91,            throw MathRuntimeException.createIllegalArgumentException(,2,0,0,0,1,1,4,0,0,7,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,94,        if (FastMath.floor(x0) < x0) {,2,1,0,2,5,0,6,0,0,9,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,95,"            return cumulativeProbability(((int) FastMath.floor(x0)) + 1,",0,1,0,3,7,1,8,0,0,9,60,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,98,"            return cumulativeProbability((int) FastMath.floor(x0),",0,0,0,2,5,1,8,0,0,8,54,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,127,        double fl = FastMath.floor(x);,2,0,0,1,2,0,6,0,0,8,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,128,        if (fl == x) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,129,            return this.probability((int) x);,2,0,0,2,4,1,2,0,0,4,33,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,131,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,147,        if (x0 > x1) {,4,1,0,1,3,0,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,148,            throw MathRuntimeException.createIllegalArgumentException(,6,1,0,0,1,1,4,0,0,12,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,151,        return cumulativeProbability(x1) - cumulativeProbability(x0 - 1);,4,2,0,2,4,1,0,0,0,6,65,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,166,        if (p < 0.0 || p > 1.0) {,4,3,0,1,3,0,0,0,0,7,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,167,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,0,4,0,0,4,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,173,        int x0 = getDomainLowerBound(p);,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,174,        int x1 = getDomainUpperBound(p);,2,0,0,1,2,0,4,0,0,6,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,176,        while (x0 < x1) {,4,1,0,1,3,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,177,            int xm = x0 + (x1 - x0) / 2;,8,3,0,1,2,0,0,0,0,11,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,178,            pm = checkedCumulativeProbability(xm);,2,0,0,1,2,0,4,0,0,7,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,179,            if (pm > p) {,4,1,0,1,3,0,0,0,0,5,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,181,                if (xm == x1) {,4,1,0,1,3,0,0,0,0,5,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,184,                    --x1;,2,0,0,0,0,0,0,0,0,3,5,10,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,187,                    x1 = xm;,4,0,0,0,0,0,0,0,0,5,8,10,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,191,                if (xm == x0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,194,                    ++x0;,2,0,0,0,0,0,0,0,0,3,5,10,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,197,                    x0 = xm;,10,1,0,0,0,0,0,0,0,12,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,200,        },10,1,0,0,1,0,0,0,0,11,1,11,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,203,        pm = checkedCumulativeProbability(x0);,2,0,0,1,2,0,4,0,0,7,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,204,        while (pm > p) {,4,1,0,1,3,0,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,205,            --x0;,0,0,0,0,0,0,0,0,0,0,5,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,206,            pm = checkedCumulativeProbability(x0);,2,0,0,1,2,0,4,0,0,7,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,209,        return x0;,2,0,0,0,0,1,0,0,0,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,219,        randomData.reSeed(seed);,2,0,0,1,2,1,10,2,0,15,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,220,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,232,        return randomData.nextInversionDeviate(this);,0,0,0,1,2,1,4,0,0,4,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,246,        if (sampleSize <= 0) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,247,"            MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_SAMPLE_SIZE, sampleSize);",4,0,0,1,2,0,6,0,0,10,107,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,249,        int[] out = new int[sampleSize];,2,0,1,2,4,0,0,0,0,4,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,250,        for (int i = 0; i < sampleSize; i++) {,8,1,0,1,3,0,6,0,0,16,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,251,            out[i] = sample();,0,0,0,2,4,0,0,0,0,6,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,253,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,267,        double result = Double.NaN;,6,0,0,0,0,0,0,0,0,6,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,269,            result = cumulativeProbability(argument);,2,0,0,1,2,0,4,0,0,7,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,272,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,270,        } catch (MathException ex) {,2,0,0,1,4,0,0,2,0,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,271,"            throw new FunctionEvaluationException(ex, argument, ex.getLocalizablePattern(), ex.getArguments());",4,0,0,3,6,0,8,2,0,14,99,8,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,273,        if (Double.isNaN(result)) {,0,0,0,2,5,0,6,0,0,6,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,274,"            throw new FunctionEvaluationException(argument,",0,0,0,0,1,0,0,0,0,1,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,277,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,61,62,        if (x0 > x1) {,6,1,0,1,3,0,0,0,0,7,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,61,63,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,0,4,0,0,4,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,61,67,        return cumulativeProbability(x1) - cumulativeProbability(x0);,0,0,0,2,4,1,0,0,0,7,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,73,"        throw new MathRuntimeException(new UnsupportedOperationException(),",4,0,0,1,3,0,0,4,0,9,67,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,90,        if (p < 0.0 || p > 1.0) {,4,3,0,1,3,0,0,0,0,7,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,91,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,0,0,0,0,1,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,97,        UnivariateRealFunction rootFindingFunction =,2,0,0,0,0,0,0,2,0,4,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,115,        double lowerBound = getDomainLowerBound(p);,2,0,0,1,2,0,4,0,0,6,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,116,        double upperBound = getDomainUpperBound(p);,2,0,0,1,2,0,4,0,0,6,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,117,        double[] bracket = null;,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,119,            bracket = UnivariateRealSolverUtils.bracket(,4,0,0,0,1,0,4,2,0,12,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,136,        },0,0,0,0,1,0,6,0,0,6,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,122,        }  catch (ConvergenceException ex) {,4,0,0,1,4,0,0,2,0,6,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,128,            if (FastMath.abs(rootFindingFunction.value(lowerBound)) < getSolverAbsoluteAccuracy()) {,0,0,0,4,9,0,6,0,0,6,88,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,129,                return lowerBound;,6,0,0,0,0,1,0,0,0,6,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,131,            if (FastMath.abs(rootFindingFunction.value(upperBound)) < getSolverAbsoluteAccuracy()) {,0,1,0,4,9,0,12,0,0,13,88,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,132,                return upperBound;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,135,            throw new MathException(ex);,2,0,0,1,2,0,0,2,0,4,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,139,"        double root = UnivariateRealSolverUtils.solve(rootFindingFunction,",2,0,0,0,1,0,6,0,0,9,66,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,143,        return root;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,153,        randomData.reSeed(seed);,4,0,0,1,2,0,0,0,0,4,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,154,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,166,        return randomData.nextInversionDeviate(this);,8,2,0,1,2,2,0,0,0,11,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,180,        if (sampleSize <= 0) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,181,"            MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_SAMPLE_SIZE, sampleSize);",0,0,0,1,2,0,0,0,0,3,107,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,183,        double[] out = new double[sampleSize];,4,0,1,2,4,0,0,0,0,7,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,184,        for (int i = 0; i < sampleSize; i++) {,8,1,0,1,3,0,0,0,0,10,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,185,            out[i] = sample();,0,0,1,2,4,0,2,0,0,7,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,187,        return out;,10,1,0,0,0,1,0,0,0,12,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,229,        return solverAbsoluteAccuracy;,2,0,0,0,0,1,0,0,0,2,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,89,"        this(0.0, 1.0);",6,2,0,1,2,0,0,0,0,9,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,90,    },4,0,0,0,1,0,2,0,0,6,1,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,97,        return mean;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,107,        setMeanInternal(mean);,0,0,0,1,2,0,4,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,108,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,122,        return standardDeviation;,8,1,0,0,0,1,0,0,0,9,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,133,        setStandardDeviationInternal(sd);,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,134,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,142,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,0,8,0,0,8,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,157,        return density(x.doubleValue());,0,0,0,2,4,1,0,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,168,        double x0 = x - mean;,16,2,1,0,0,0,0,0,0,23,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,169,        return FastMath.exp(-x0 * x0 / (2 * standardDeviation * standardDeviation)) / (standardDeviation * SQRT2PI);,0,0,0,3,6,1,0,0,0,10,108,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,182,            return 0.5 * (1.0 + Erf.erf((x - mean) /,4,4,0,1,4,1,4,0,0,12,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,184,        } catch (MaxIterationsExceededException ex) {,0,0,0,1,4,0,0,0,0,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,185,            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38,2,0,0,2,5,1,0,0,0,3,65,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,186,                return 0.0d;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,187,            } else if (x > (mean + 20 * standardDeviation)) {,18,8,0,2,6,0,4,0,0,30,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,188,                return 1.0d;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,190,                throw ex;,2,0,0,0,0,0,0,0,0,2,9,10,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,204,        return solverAbsoluteAccuracy;,2,0,0,0,0,1,0,0,0,2,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,224,        if (p == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,225,            return Double.NEGATIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,227,        if (p == 1) {,4,1,1,1,3,1,0,0,0,10,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,228,            return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,230,        return super.inverseCumulativeProbability(p);,8,0,0,1,2,1,0,0,0,9,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,242,"        return randomData.nextGaussian(mean, standardDeviation);",0,0,0,1,2,1,0,0,0,4,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,258,        if (p < .5) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,259,            ret = -Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,8,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,261,            ret = mean;,8,2,1,0,0,0,0,0,0,19,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,264,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,280,        if (p < .5) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,281,            ret = mean;,4,1,0,0,0,0,16,0,0,22,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,283,            ret = Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,7,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,286,        return ret;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,301,        if (p < .5) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,302,            ret = mean - standardDeviation;,10,3,0,0,0,1,0,0,0,15,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,303,        } else if (p > .5) {,0,0,0,1,4,0,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,304,            ret = mean + standardDeviation;,6,1,0,0,0,0,0,0,0,8,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,306,            ret = mean;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,309,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,35,public class NormalDistributionImpl extends AbstractContinuousDistribution,2,0,0,0,0,1,0,2,0,5,74,1,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,98,            new UnivariateRealFunction() {,0,0,0,1,3,0,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,100,                double ret = Double.NaN;,10,1,1,0,0,0,0,0,0,15,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,102,                    ret = cumulativeProbability(x) - p;,4,1,0,1,2,0,4,0,0,10,35,12,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,105,                },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,103,                } catch (MathException ex) {,2,0,0,1,4,0,0,2,0,4,28,12,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,104,"                    throw new FunctionEvaluationException(ex, x, ex.getLocalizablePattern(), ex.getArguments());",4,0,0,3,6,0,8,2,0,14,92,14,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,106,                if (Double.isNaN(ret)) {,0,0,0,2,5,0,6,0,0,6,24,11,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,107,"                    throw new FunctionEvaluationException(x,",2,0,0,0,1,0,0,2,0,4,40,13,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,110,                return ret;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,47,"        super(LocalizedFormats.EVALUATION_FAILED, argument);",10,0,0,1,2,0,0,0,0,11,52,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,48,        this.argument = new double[] { argument };,4,0,0,2,4,0,0,0,0,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,49,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,59,"        super(LocalizedFormats.EVALUATION_FAILED, new ArrayRealVector(argument));",6,0,0,2,4,0,0,2,0,8,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,60,        this.argument = argument.clone();,2,0,0,1,2,0,4,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,61,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,73,"        this(argument, new DummyLocalizable(pattern), arguments);",8,0,0,2,4,0,0,2,0,10,57,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,74,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,86,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,87,        this.argument = new double[] { argument };,4,0,0,2,4,0,0,0,0,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,88,    },12,4,0,0,1,0,4,0,0,21,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,100,"        this(argument, new DummyLocalizable(pattern), arguments);",12,1,0,2,4,1,0,2,0,16,57,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,101,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,113,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,114,        this.argument = argument.clone();,2,0,0,1,2,0,4,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,115,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,125,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,126,        this.argument = new double[] { argument };,6,1,0,2,4,0,0,0,0,7,42,5,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,127,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,137,        super(cause);,2,1,0,1,2,0,0,0,0,4,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,138,        this.argument = argument.clone();,2,0,0,1,2,0,4,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,139,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,153,"        this(cause, argument, new DummyLocalizable(pattern), arguments);",10,1,0,2,4,0,0,2,0,13,64,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,154,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,168,"        super(cause, pattern, arguments);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,169,        this.argument = new double[] { argument };,4,0,0,2,4,0,0,0,0,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,170,    },2,0,0,0,1,0,0,0,0,3,1,12,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,184,"        this(cause, argument, new DummyLocalizable(pattern), arguments);",8,0,0,2,4,0,0,2,0,10,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,185,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,199,"        super(cause, pattern, arguments);",12,1,0,1,2,0,0,0,0,13,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,200,        this.argument = argument.clone();,2,0,0,1,2,0,4,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,201,    },2,0,0,0,1,1,2,0,0,5,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,209,        return argument.clone();,0,0,0,1,2,1,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,94,"            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN, p);",0,0,0,1,2,0,0,0,0,3,105,4,0.0,1,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,110,"        this(p, epsilon, DEFAULT_MAX_ITERATIONS);",6,0,0,1,2,0,0,0,0,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,111,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,121,"        this(p, DEFAULT_EPSILON, maxIterations);",0,0,0,1,2,0,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,122,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,130,        return mean;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,142,        if (x < 0 || x == Integer.MAX_VALUE) {,8,3,0,1,3,0,0,0,0,11,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,143,            ret = 0.0;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,144,        } else if (x == 0) {,2,1,0,1,4,0,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,145,            ret = FastMath.exp(-mean);,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,147,            ret = FastMath.exp(-SaddlePointExpansion.getStirlingError(x) -,8,1,0,1,3,0,10,2,0,23,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,151,        return ret;,12,1,0,0,0,1,0,2,0,16,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,165,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,166,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,168,        if (x == Integer.MAX_VALUE) {,6,1,0,1,3,0,0,0,0,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,169,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,171,"        return Gamma.regularizedGammaQ((double) x + 1, mean, epsilon, maxIterations);",2,1,0,2,4,1,10,0,0,13,77,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,191,        return normal.cumulativeProbability(x + 0.5);,2,1,0,1,2,1,4,0,0,7,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,213,"        return (int) FastMath.min(randomData.nextPoisson(mean), Integer.MAX_VALUE);",4,0,0,3,6,1,10,0,0,14,75,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,226,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,239,        return Integer.MAX_VALUE;,4,0,0,0,0,1,0,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,131,        super();,8,1,0,1,2,0,0,0,0,9,8,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,132,        this.rand = rand;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,133,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,154,        if (len <= 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,155,"            throw new NotStrictlyPositiveException(LocalizedFormats.LENGTH, len);",6,0,0,1,2,0,0,2,0,8,69,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,159,        RandomGenerator ran = getRan();,2,0,0,1,2,0,2,2,0,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,162,        StringBuffer outBuffer = new StringBuffer();,2,0,0,1,2,0,0,4,0,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,165,        byte[] randomBytes = new byte[(len / 2) + 1];,4,2,0,3,6,0,0,0,0,6,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,166,        ran.nextBytes(randomBytes);,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,169,        for (int i = 0; i < randomBytes.length; i++) {,0,0,0,1,3,0,0,0,0,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,170,            Integer c = Integer.valueOf(randomBytes[i]);,0,0,0,2,4,0,0,0,0,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,177,            String hex = Integer.toHexString(c.intValue() + 128);,10,1,0,2,4,0,0,0,0,12,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,180,            if (hex.length() == 1) {,0,1,0,2,5,0,4,0,0,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,181,"                hex = ""0"" + hex;",6,1,0,0,0,0,0,0,0,9,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,183,            outBuffer.append(hex);,0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,185,"        return outBuffer.toString().substring(0, len);",0,0,0,2,4,1,8,0,0,8,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,200,        if (lower >= upper) {,4,1,0,1,3,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,201,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",0,0,0,0,1,0,0,0,0,1,87,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,204,        double r = getRan().nextDouble();,6,4,0,2,4,0,4,0,0,14,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,205,        return (int) ((r * upper) + ((1.0 - r) * lower) + r);,14,5,0,5,10,1,0,0,0,19,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,220,        if (lower >= upper) {,4,1,0,1,3,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,221,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",8,0,0,0,1,1,14,4,0,28,87,1,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,224,        double r = getRan().nextDouble();,2,0,0,2,4,0,4,0,0,6,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,225,        return (long) ((r * upper) + ((1.0 - r) * lower) + r);,10,4,0,5,10,1,0,0,0,14,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,250,        if (len <= 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,251,"            throw new NotStrictlyPositiveException(LocalizedFormats.LENGTH, len);",6,0,0,1,2,0,0,2,0,8,69,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,255,        SecureRandom secRan = getSecRan();,14,1,0,1,2,0,2,2,0,22,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,256,        MessageDigest alg = null;,2,0,0,0,0,0,0,2,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,258,"            alg = MessageDigest.getInstance(""SHA-1"");",2,0,0,1,2,0,4,0,0,8,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,262,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,259,        } catch (NoSuchAlgorithmException ex) {,2,0,0,1,4,0,0,2,0,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,261,            throw MathRuntimeException.createInternalError(ex);,0,0,0,1,2,0,6,0,0,6,51,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,263,        alg.reset();,0,0,0,1,2,0,4,0,0,4,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,266,        int numIter = (len / 40) + 1;,4,2,0,1,2,0,0,0,0,6,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,268,        StringBuffer outBuffer = new StringBuffer();,2,0,0,1,2,0,0,4,0,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,269,        for (int iter = 1; iter < numIter + 1; iter++) {,8,2,0,1,3,0,0,0,0,11,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,270,            byte[] randomBytes = new byte[40];,4,0,0,2,4,0,6,0,0,11,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,271,            secRan.nextBytes(randomBytes);,8,1,0,1,2,0,6,0,0,16,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,272,            alg.update(randomBytes);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,275,            byte hash[] = alg.digest();,2,0,0,2,4,0,4,0,0,6,27,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,278,            for (int i = 0; i < hash.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,279,                Integer c = Integer.valueOf(hash[i]);,0,0,0,2,4,0,0,0,0,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,286,                String hex = Integer.toHexString(c.intValue() + 128);,0,0,0,2,4,0,0,0,0,6,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,289,                if (hex.length() == 1) {,0,1,0,2,5,0,4,0,0,5,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,290,"                    hex = ""0"" + hex;",4,1,0,0,0,0,0,0,0,7,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,292,                outBuffer.append(hex);,0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,295,"        return outBuffer.toString().substring(0, len);",0,0,0,2,4,1,8,0,0,8,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,311,        if (lower >= upper) {,4,1,0,1,3,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,312,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",4,0,0,0,1,0,0,2,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,315,        SecureRandom sec = getSecRan();,14,2,1,1,2,0,10,2,0,38,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,316,        return lower + (int) (sec.nextDouble() * (upper - lower + 1));,0,0,0,4,8,1,0,0,0,13,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,332,        if (lower >= upper) {,4,1,0,1,3,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,333,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",4,0,0,0,1,0,12,2,0,18,87,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,336,        SecureRandom sec = getSecRan();,2,0,0,1,2,0,2,2,0,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,337,        return lower + (long) (sec.nextDouble() * (upper - lower + 1));,0,0,0,4,8,1,0,0,0,13,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,358,        if (mean <= 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,359,"            throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, mean);",2,0,0,1,2,0,0,0,0,3,68,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,362,        final RandomGenerator generator = getRan();,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,364,        final double pivot = 40.0d;,2,0,0,0,0,1,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,365,        if (mean < pivot) {,4,1,0,1,3,0,12,0,0,17,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,366,            double p = FastMath.exp(-mean);,4,0,0,1,2,0,4,0,0,9,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,367,            long n = 0;,2,0,0,0,0,0,0,0,0,2,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,368,            double r = 1.0d;,2,0,0,0,0,0,0,0,0,2,16,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,369,            double rnd = 1.0d;,2,0,0,0,0,0,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,371,            while (n < 1000 * mean) {,4,2,0,1,3,0,0,0,0,6,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,372,                rnd = generator.nextDouble();,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,373,                r = r * rnd;,8,2,0,0,0,0,0,0,0,10,12,11,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,374,                if (r >= p) {,8,1,0,1,3,0,4,0,0,15,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,375,                    n++;,2,0,0,0,0,0,0,0,0,3,4,10,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,377,                    return n;,2,0,0,0,0,1,0,0,0,2,9,10,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,380,            return n;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,382,            final double lambda = FastMath.floor(mean);,2,0,0,1,2,1,6,0,0,9,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,383,            final double lambdaFractional = mean - lambda;,0,0,0,0,0,0,0,0,0,0,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,384,            final double logLambda = FastMath.log(lambda);,2,0,0,1,2,1,6,0,0,9,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,385,            final double logLambdaFactorial = MathUtils.factorialLog((int) lambda);,16,2,0,2,4,0,0,0,0,20,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,386,            final long y2 = lambdaFractional < Double.MIN_VALUE ? 0 : nextPoisson(lambdaFractional);,8,1,0,1,2,1,4,0,0,14,88,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,387,            final double delta = FastMath.sqrt(lambda * FastMath.log(32 * lambda / FastMath.PI + 1));,12,4,0,2,4,2,14,0,0,32,89,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,388,            final double halfDelta = delta / 2;,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,389,            final double twolpd = 2 * lambda + delta;,6,2,0,0,0,1,0,0,0,9,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,390,            final double a1 = FastMath.sqrt(FastMath.PI * twolpd) * FastMath.exp(1 / 8 * lambda);,10,4,0,2,4,1,8,0,0,23,85,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,391,            final double a2 = (twolpd / delta) * FastMath.exp(-delta * (1 + delta) / twolpd);,12,5,0,3,6,1,4,0,0,23,81,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,392,            final double aSum = a1 + a2 + 1;,6,1,0,0,0,1,6,0,0,14,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,393,            final double p1 = a1 / aSum;,6,1,0,0,0,1,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,394,            final double p2 = a2 / aSum;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,395,            final double c1 = 1 / (8 * lambda);,4,2,0,1,2,1,0,0,0,7,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,397,            double x = 0;,2,0,0,0,0,0,0,0,0,2,13,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,398,            double y = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,399,            double v = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,400,            int a = 0;,4,1,0,0,0,0,22,0,0,28,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,401,            double t = 0;,2,0,0,0,0,0,0,0,0,2,13,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,402,            double qr = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,403,            double qa = 0;,2,0,0,0,0,0,0,0,0,2,14,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,405,"                final double u = nextUniform(0.0, 1);",2,0,0,1,2,1,2,0,0,5,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,406,                if (u <= p1) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,407,"                    final double n = nextGaussian(0d, 1d);",0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,408,                    x = n * FastMath.sqrt(lambda + halfDelta) - 0.5d;,10,3,0,1,2,0,4,2,0,20,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,409,                    if (x > delta || x < -lambda) {,2,0,0,1,3,0,0,0,0,3,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,410,                        continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,412,                    y = x < 0 ? FastMath.floor(x) : FastMath.ceil(x);,4,1,0,2,4,0,12,0,0,18,49,10,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,413,                    final double e = nextExponential(1d);,2,0,0,1,2,1,2,0,0,5,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,414,                    v = -e - (n * n / 2) + c1;,10,4,0,1,2,0,0,0,0,16,26,10,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,415,                } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,416,                    if (u > p1 + p2) {,0,0,0,1,3,0,0,0,0,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,417,                        y = lambda;,8,0,0,0,0,0,0,0,0,9,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,418,                        break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,420,                        x = delta + (twolpd / delta) * nextExponential(1d);,8,3,0,2,4,0,2,0,0,14,51,12,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,421,                        y = FastMath.ceil(x);,2,0,0,1,2,0,6,0,0,9,21,12,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,422,                        v = -nextExponential(1d) - delta * (x + 1) / twolpd;,8,4,0,2,4,0,2,0,0,16,52,12,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,425,                a = x < 0 ? 1 : 0;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,426,                t = y * (y + 1) / (2 * lambda);,8,4,0,2,4,0,0,0,0,13,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,427,                if (v < -t && a == 0) {,6,3,0,1,3,0,0,0,0,10,23,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,428,                    y = lambda + y;,10,2,0,0,0,0,0,0,0,13,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,429,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,431,                qr = t * ((2 * y + 1) / (6 * lambda) - 1);,8,6,0,3,6,0,0,0,0,15,42,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,432,                qa = qr - (t * t) / (3 * (lambda + a * (y + 1)));,0,0,0,4,8,0,0,0,0,12,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,433,                if (v < qa) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,434,                    y = lambda + y;,6,1,0,0,0,0,0,0,0,8,15,10,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,435,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,437,                if (v > qr) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,438,                    continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,440,                if (v < y * logLambda - MathUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial) {,0,0,0,4,9,0,0,0,0,13,90,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,441,                    y = lambda + y;,6,1,0,0,0,0,0,0,0,8,15,10,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,442,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,444,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,445,            return y2 + (long) y;,0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,462,        if (sigma <= 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,463,"            throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sigma);",0,0,0,1,2,0,0,0,0,3,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,465,        return sigma * getRan().nextGaussian() + mu;,4,2,0,2,4,1,4,0,0,10,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,483,        if (mean <= 0.0) {,16,3,0,1,3,0,0,0,0,21,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,484,"            throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, mean);",0,0,0,1,2,0,0,0,0,3,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,486,        final RandomGenerator generator = getRan();,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,487,        double unif = generator.nextDouble();,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,488,        while (unif == 0.0d) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,489,            unif = generator.nextDouble();,2,0,0,1,2,0,4,0,0,7,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,491,        return -mean * FastMath.log(unif);,2,1,0,1,2,1,10,2,0,16,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,512,        if (lower >= upper) {,4,1,0,1,3,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,513,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",10,1,0,0,1,0,0,2,0,14,87,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,516,        final RandomGenerator generator = getRan();,2,0,0,1,2,1,2,2,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,519,        double u = generator.nextDouble();,2,0,0,1,2,0,4,0,0,6,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,520,        while (u <= 0.0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,521,            u = generator.nextDouble();,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,524,        return lower + u * (upper - lower);,8,3,0,1,2,1,0,0,0,11,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,539,"        return nextInversionDeviate(new BetaDistributionImpl(alpha, beta));",4,0,0,2,4,1,2,2,0,8,67,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,554,"        return nextInversionDeviate(new BinomialDistributionImpl(numberOfTrials, probabilityOfSuccess));",6,0,0,2,4,2,2,10,0,19,96,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,569,"        return nextInversionDeviate(new CauchyDistributionImpl(median, scale));",4,0,0,2,4,1,2,2,0,8,71,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,583,        return nextInversionDeviate(new ChiSquaredDistributionImpl(df));,6,0,0,2,4,1,2,2,0,12,64,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,598,"        return nextInversionDeviate(new FDistributionImpl(numeratorDf, denominatorDf));",4,0,0,2,4,1,2,2,0,8,79,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,613,"        return nextInversionDeviate(new GammaDistributionImpl(shape, scale));",4,0,0,2,4,1,2,2,0,8,69,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,629,"        return nextInversionDeviate(new HypergeometricDistributionImpl(populationSize, numberOfSuccesses, sampleSize));",6,0,0,2,4,1,2,2,0,10,111,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,644,"        return nextInversionDeviate(new PascalDistributionImpl(r, p));",4,0,0,2,4,1,12,2,0,18,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,658,        return nextInversionDeviate(new TDistributionImpl(df));,2,0,0,2,4,1,2,2,0,6,55,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,673,"        return nextInversionDeviate(new WeibullDistributionImpl(shape, scale));",0,0,0,2,4,1,0,0,0,7,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,688,"        return nextInversionDeviate(new ZipfDistributionImpl(numberOfElements, exponent));",4,0,0,2,4,1,2,2,0,8,82,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,701,        if (rand == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,702,            rand = new JDKRandomGenerator();,2,0,0,1,2,0,0,2,0,5,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,703,            rand.setSeed(System.currentTimeMillis());,2,0,0,2,4,1,12,2,0,17,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,705,        return rand;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,717,        if (secRand == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,718,            secRand = new SecureRandom();,2,0,0,1,2,0,0,2,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,719,            secRand.setSeed(System.currentTimeMillis());,10,5,0,2,4,0,8,0,0,23,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,721,        return secRand;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,734,        if (rand == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,735,            rand = new JDKRandomGenerator();,2,0,0,1,2,0,0,2,0,5,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,737,        rand.setSeed(seed);,0,0,0,1,2,0,6,0,0,6,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,738,    },8,1,0,0,1,0,0,0,0,10,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,748,        if (secRand == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,749,            secRand = new SecureRandom();,2,0,0,1,2,0,0,2,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,751,        secRand.setSeed(System.currentTimeMillis());,0,0,0,2,4,0,8,0,0,8,44,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,752,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,764,        if (secRand == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,765,            secRand = new SecureRandom();,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,767,        secRand.setSeed(seed);,0,0,0,1,2,0,6,0,0,6,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,768,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,775,        if (rand == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,776,            rand = new JDKRandomGenerator();,2,0,0,1,2,0,0,2,0,5,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,778,        rand.setSeed(System.currentTimeMillis());,0,0,0,2,4,0,8,0,0,8,41,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,779,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,803,"        secRand = SecureRandom.getInstance(algorithm, provider);",2,0,0,1,2,0,8,0,0,11,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,804,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,837,        if (k > n) {,6,1,0,1,3,0,0,0,0,7,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,838,"            throw new NumberIsTooLargeException(LocalizedFormats.PERMUTATION_EXCEEDS_N,",4,0,0,0,1,0,0,2,0,6,75,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,841,        if (k == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,842,"            throw new NotStrictlyPositiveException(LocalizedFormats.PERMUTATION_SIZE,",0,0,0,0,1,0,0,0,0,1,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,846,        int[] index = getNatural(n);,2,0,0,2,4,0,4,0,0,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,847,"        shuffle(index, n - k);",4,1,0,1,2,0,4,0,0,9,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,848,        int[] result = new int[k];,2,0,1,2,4,0,0,0,0,4,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,849,        for (int i = 0; i < k; i++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,850,            result[i] = index[n - i - 1];,4,1,1,2,4,0,0,0,0,12,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,853,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,875,        int len = c.size();,2,0,0,1,2,0,4,0,0,6,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,876,        if (k > len) {,10,3,0,1,3,0,10,2,0,27,14,1,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,877,"            throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE,",4,0,0,0,1,0,0,2,0,6,89,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,880,        if (k <= 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,881,"            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, k);",8,0,1,1,2,0,0,2,0,12,78,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,884,        Object[] objects = c.toArray();,2,0,0,2,4,0,4,2,0,8,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,885,"        int[] index = nextPermutation(len, k);",2,0,0,2,4,0,6,0,0,8,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,886,        Object[] result = new Object[k];,8,1,0,2,4,0,0,0,0,11,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,887,        for (int i = 0; i < k; i++) {,8,1,0,1,3,0,0,0,0,10,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,888,            result[i] = objects[index[i]];,0,0,1,3,6,0,0,0,0,11,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,890,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,903,"        return distribution.inverseCumulativeProbability(nextUniform(0, 1));",0,0,0,2,4,1,0,0,0,7,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,917,"        final double target = nextUniform(0, 1);",2,0,0,1,2,1,2,0,0,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,918,        final int glb = distribution.inverseCumulativeProbability(target);,2,0,0,1,2,1,6,0,0,9,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,919,        if (distribution.cumulativeProbability(glb) == 1.0d) { // No mass above,6,1,0,2,5,0,0,0,0,8,71,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,920,            return glb;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,922,            return glb + 1;,2,1,0,0,0,1,0,0,0,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,938,        int target = 0;,2,0,0,0,0,0,10,0,0,12,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,939,        for (int i = list.length - 1; i >= end; i--) {,12,2,0,1,3,0,0,0,0,15,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,940,            if (i == 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,941,                target = 0;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,943,"                target = nextInt(0, i);",0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,945,            int temp = list[target];,2,0,1,1,2,0,0,0,0,6,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,946,            list[target] = list[i];,4,2,0,2,4,0,0,0,0,6,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,947,            list[i] = temp;,2,0,1,1,2,0,0,0,0,7,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,949,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,959,        int[] natural = new int[n];,0,0,0,2,4,0,0,0,0,6,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,960,        for (int i = 0; i < n; i++) {,8,1,0,1,3,0,8,0,0,18,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,961,            natural[i] = i;,2,0,1,1,2,0,0,0,0,7,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,963,        return natural;,4,0,0,0,0,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,35,    private static final double EXP_INT_TABLE_A[] = new double[1500];,2,0,0,2,4,3,0,0,0,5,65,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,40,    private static final double EXP_INT_TABLE_B[] = new double[1500];,6,3,0,2,4,0,4,0,0,14,65,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,45,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,0,0,0,2,4,0,0,0,0,6,66,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,50,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,0,0,0,2,4,0,0,0,0,6,66,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,53,    private static final double FACT[] = new double[20];,2,1,0,2,4,3,12,0,0,18,52,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,56,    private static final double LN_MANT[][] = new double[1024][];,0,0,0,4,8,0,0,0,0,12,61,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,65,    private static final double LN_SPLIT_COEF[][] = {,6,0,0,2,5,0,0,0,0,6,49,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,85,    private static final double LN_QUICK_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,98,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,51,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,108,    private static final double SINE_TABLE_A[] = new double[14];,0,0,0,2,4,0,0,0,0,6,60,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,111,    private static final double SINE_TABLE_B[] = new double[14];,0,0,0,2,4,0,0,0,0,6,60,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,114,    private static final double COSINE_TABLE_A[] = new double[14];,6,5,0,2,4,0,0,0,0,11,62,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,117,    private static final double COSINE_TABLE_B[] = new double[14];,0,0,0,2,4,0,0,0,0,6,62,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,120,    private static final double TANGENT_TABLE_A[] = new double[14];,4,0,0,2,4,3,6,0,0,14,63,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,123,    private static final double TANGENT_TABLE_B[] = new double[14];,0,0,0,2,4,0,0,0,0,6,63,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,126,    private static long RECIP_2PI[] = new long[] {,4,1,1,2,5,0,0,0,0,15,46,0,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,147,    private static long PI_O_4_BITS[] = new long[] {,0,0,0,2,5,0,0,0,0,7,48,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,155,"    private static final double EIGHTHES[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",2,0,0,2,4,3,0,0,0,5,127,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,158,"    private static final double CBRTTWO[] = { 0.6299605249474366,",2,1,0,1,3,0,0,0,0,4,61,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,169,        FACT[0] = 1.0;,0,0,1,1,2,0,0,0,0,3,14,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,170,        for (i = 1; i < 20; i++) {,12,2,0,1,3,0,4,0,0,20,26,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,171,            FACT[i] = FACT[i-1] * i;,4,2,1,2,4,0,0,0,0,13,24,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,174,        double tmp[] = new double[2];,2,0,0,2,4,0,0,0,0,2,29,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,175,        double recip[] = new double[2];,0,0,0,2,4,0,0,0,0,6,31,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,178,        for (i = 0; i < 750; i++) {,4,0,0,1,3,1,0,0,0,5,27,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,179,"            expint(i, tmp);",0,0,0,1,2,0,0,0,0,3,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,180,            EXP_INT_TABLE_A[i+750] = tmp[0];,0,0,0,2,4,0,0,0,0,6,32,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,181,            EXP_INT_TABLE_B[i+750] = tmp[1];,0,0,0,2,4,0,0,0,0,6,32,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,183,            if (i != 0) {,2,1,0,1,3,0,6,0,0,9,13,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,185,"                splitReciprocal(tmp, recip);",0,0,0,1,2,0,0,0,0,3,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,186,                EXP_INT_TABLE_A[750-i] = recip[0];,0,0,0,2,4,0,0,0,0,6,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,187,                EXP_INT_TABLE_B[750-i] = recip[1];,0,0,0,2,4,0,0,0,0,6,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,192,        for (i = 0; i < 1025; i++) {,6,1,0,1,3,0,0,0,0,9,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,193,"            slowexp(i/1024.0, tmp);",0,0,0,1,2,0,0,0,0,3,23,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,194,            EXP_FRAC_TABLE_A[i] = tmp[0];,0,0,0,2,4,0,0,0,0,6,29,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,195,            EXP_FRAC_TABLE_B[i] = tmp[1];,0,0,0,2,4,0,0,0,0,6,29,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,199,        for (i = 0; i < 1024; i++) {,0,0,0,1,3,0,0,0,0,4,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,200,            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,0,0,0,4,8,0,0,0,0,12,79,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,201,            LN_MANT[i] = slowLog(d);,0,0,0,2,4,0,0,0,0,6,24,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,205,        buildSinCosTables();,2,0,0,1,2,1,8,0,0,11,20,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,206,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,219,        return Math.sqrt(a);,0,0,0,1,2,1,0,0,0,4,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,680,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,681,        final double ys[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,682,        final double facts[] = new double[2];,0,0,0,2,4,0,0,0,0,6,37,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,683,        final double as[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,684,"        split(x, xs);",2,0,0,1,2,0,0,0,0,3,13,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,685,        ys[0] = ys[1] = 0.0;,4,0,1,2,4,0,0,0,0,8,20,14,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,687,        for (int i = 19; i >= 0; i--) {,8,1,0,1,3,0,0,0,0,10,31,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,688,"            splitMult(xs, ys, as);",0,0,0,1,2,0,0,0,0,3,22,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,689,            ys[0] = as[0];,0,0,0,2,4,0,0,0,0,6,14,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,690,            ys[1] = as[1];,8,1,0,2,4,1,8,0,0,19,14,0,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,692,"            split(FACT[i], as);",0,0,0,2,4,0,0,0,0,6,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,693,"            splitReciprocal(as, facts);",0,0,0,1,2,0,0,0,0,3,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,695,"            splitAdd(ys, facts, as);",2,0,0,1,2,0,0,0,0,2,24,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,696,            ys[0] = as[0];,4,1,0,2,4,1,0,0,0,6,14,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,697,            ys[1] = as[1];,4,0,0,2,4,0,0,2,0,7,14,0,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,700,        if (result != null) {,10,2,1,1,3,0,0,0,0,15,21,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,701,            result[0] = ys[0];,0,0,0,2,4,0,0,0,0,6,18,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,702,            result[1] = ys[1];,6,2,0,2,4,0,0,0,0,10,18,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,705,        return ys[0] + ys[1];,0,0,0,2,4,1,0,0,0,7,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,714,        if (d < 8e298 && d > -8e298) {,0,0,0,1,3,0,0,0,0,4,30,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,715,            final double a = d * 1073741824.0;,4,1,0,0,0,1,0,0,0,6,34,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,716,            split[0] = (d + a) - a;,0,0,0,2,4,0,0,0,0,6,23,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,717,            split[1] = d - split[0];,0,0,0,2,4,0,0,0,0,6,24,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,718,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,723,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,730,        final double c = a[0] + a[1];,4,1,1,2,4,2,0,0,0,11,29,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,731,        final double d = -(c - a[0] - a[1]);,0,0,0,3,6,0,0,0,0,9,36,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,733,        if (c < 8e298 && c > -8e298) {,0,0,0,1,3,0,0,0,0,4,30,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,734,            double z = c * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,735,            a[0] = (c + z) - z;,0,0,0,2,4,0,0,0,0,6,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,736,            a[1] = c - a[0] + d;,0,0,0,2,4,0,0,0,0,6,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,737,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,738,            double z = c * 9.31322574615478515625E-10;,2,0,0,0,0,0,0,0,0,2,42,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,739,            a[0] = (c + z - c) * 1073741824.0;,8,4,1,2,4,0,0,0,0,15,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,740,            a[1] = c - a[0] + d;,4,2,1,2,4,0,0,0,0,11,20,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,742,    },4,0,0,0,1,0,0,0,0,5,1,0,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,750,        ans[0] = a[0] * b[0];,0,0,0,3,6,0,0,0,0,9,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,751,        ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];,0,0,0,7,14,0,0,0,0,21,49,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,754,        resplit(ans);,0,0,0,1,2,0,0,0,0,3,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,755,    },2,0,0,0,1,0,0,0,0,2,1,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,763,        ans[0] = a[0] + b[0];,2,0,0,3,6,0,4,2,0,8,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,764,        ans[1] = a[1] + b[1];,0,0,0,3,6,0,0,0,0,9,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,766,        resplit(ans);,0,0,0,1,2,0,2,0,0,2,13,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,767,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,788,        final double b = 1.0/4194304.0;,4,1,0,0,0,1,0,0,0,7,31,0,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,789,        final double a = 1.0 - b;,6,1,0,0,0,1,10,0,0,19,25,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,791,        if (in[0] == 0.0) {,0,1,1,2,5,0,0,0,0,8,19,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,796,        result[0] = a / in[0];,2,1,1,2,4,0,0,0,0,8,22,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,797,        result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);,6,7,1,9,18,0,0,0,0,29,60,0,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,799,        if (result[1] != result[1]) { // can happen if result[1] is NAN,2,0,0,4,9,3,0,0,0,5,63,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,800,            result[1] = 0.0;,6,1,0,1,2,1,0,0,0,8,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,804,        resplit(result);,0,0,0,1,2,0,4,0,0,4,16,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,806,        for (int i = 0; i < 2; i++) {,6,1,1,1,3,0,6,0,0,16,29,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,808,            double err = 1.0 - result[0] * in[0] - result[0] * in[1] -,0,0,0,4,8,0,0,0,0,12,58,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,811,            err = err * (result[0] + result[1]);,4,2,1,3,6,0,0,0,0,11,36,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,813,            result[1] += err;,2,0,1,1,2,0,0,0,0,5,17,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,815,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,823,        final double xs[] = new double[2];,4,0,0,2,4,2,0,4,0,10,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,824,        final double ys[] = new double[2];,6,1,0,2,4,2,0,0,0,9,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,825,        final double zs[] = new double[2];,4,1,1,2,4,2,0,0,0,11,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,828,"        split(a[0], xs);",0,0,1,2,4,0,4,0,0,6,16,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,829,"        split(b[0], ys);",0,0,0,2,4,0,0,0,0,6,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,830,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,0,0,0,3,22,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,832,        result[0] = zs[0];,0,0,0,2,4,0,0,0,0,6,18,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,833,        result[1] = zs[1];,4,3,1,2,4,0,0,0,0,12,18,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,836,"        split(b[1], ys);",6,3,1,2,4,0,16,0,0,27,16,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,837,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,8,0,0,8,22,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,839,        double tmp = result[0] + zs[0];,2,1,1,2,4,0,0,0,0,7,31,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,840,        result[1] = result[1] - (tmp - result[0] - zs[0]);,2,2,1,5,10,0,0,0,0,13,50,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,841,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,842,        tmp = result[0] + zs[1];,0,0,0,2,4,0,0,0,0,6,24,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,843,        result[1] = result[1] - (tmp - result[0] - zs[1]);,2,2,1,5,10,0,0,0,0,13,50,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,844,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,847,"        split(a[1], xs);",6,1,0,2,4,0,0,0,0,7,16,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,848,"        split(b[0], ys);",2,0,1,2,4,0,4,0,0,9,16,0,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,849,"        splitMult(xs, ys, zs);",8,2,0,1,2,1,0,0,0,11,22,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,851,        tmp = result[0] + zs[0];,8,0,0,2,4,0,4,0,0,12,24,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,852,        result[1] = result[1] - (tmp - result[0] - zs[0]);,0,0,0,5,10,0,0,0,0,15,50,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,853,        result[0] = tmp;,0,0,0,1,2,0,0,0,0,3,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,854,        tmp = result[0] + zs[1];,0,0,0,2,4,0,0,0,0,6,24,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,855,        result[1] = result[1] - (tmp - result[0] - zs[1]);,2,2,1,5,10,0,0,0,0,13,50,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,856,        result[0] = tmp;,0,0,0,1,2,0,0,0,0,3,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,859,"        split(a[1], xs);",6,2,1,2,4,0,4,0,0,17,16,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,860,"        split(b[1], ys);",0,0,1,2,4,0,4,0,0,6,16,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,861,"        splitMult(xs, ys, zs);",2,0,0,1,2,0,8,2,0,12,22,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,863,        tmp = result[0] + zs[0];,0,0,0,2,4,0,0,0,0,6,24,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,864,        result[1] = result[1] - (tmp - result[0] - zs[0]);,0,0,0,5,10,0,0,0,0,15,50,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,865,        result[0] = tmp;,0,0,0,1,2,0,0,0,0,3,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,866,        tmp = result[0] + zs[1];,4,2,1,2,4,0,0,0,0,11,24,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,867,        result[1] = result[1] - (tmp - result[0] - zs[1]);,2,0,0,5,10,3,0,0,0,5,50,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,868,        result[0] = tmp;,0,0,0,1,2,0,2,0,0,2,16,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,869,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,878,        final double xs[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,879,        final double as[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,880,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,889,        xs[0] = 2.718281828459045;,0,0,1,1,2,0,0,0,0,3,26,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,890,        xs[1] = 1.4456468917292502E-16;,2,1,1,1,2,0,0,0,0,6,31,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,892,"        split(1.0, ys);",2,1,0,1,2,0,0,0,0,3,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,894,        while (p > 0) {,2,1,0,1,3,0,0,0,0,3,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,895,            if ((p & 1) != 0) {,2,2,0,2,5,0,0,0,0,4,19,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,896,"                quadMult(ys, xs, as);",0,0,0,1,2,0,0,0,0,3,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,897,                ys[0] = as[0]; ys[1] = as[1];,0,0,0,4,8,0,0,0,0,12,29,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,900,"            quadMult(xs, xs, as);",0,0,0,1,2,0,0,0,0,3,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,901,            xs[0] = as[0]; xs[1] = as[1];,0,0,0,4,8,0,0,0,0,12,29,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,903,            p >>= 1;,2,0,0,0,0,0,0,0,0,3,8,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,906,        if (result != null) {,10,4,0,1,3,1,0,0,0,15,21,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,907,            result[0] = ys[0];,0,0,1,2,4,0,0,0,0,5,18,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,908,            result[1] = ys[1];,6,0,1,2,4,1,0,0,0,12,18,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,910,            resplit(result);,6,0,0,1,2,0,4,0,0,11,16,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,913,        return ys[0] + ys[1];,0,0,0,2,4,1,0,0,0,7,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1396,        double x[] = new double[2];,0,0,0,2,4,0,0,0,0,6,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1397,        double x2[] = new double[2];,0,0,0,2,4,0,0,0,0,6,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1398,        double y[] = new double[2];,6,0,0,2,4,0,0,0,0,7,27,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1399,        double a[] = new double[2];,2,0,0,2,4,0,0,0,0,2,27,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1401,"        split(xi, x);",0,0,0,1,2,0,6,0,0,6,13,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1404,        x[0] += 1.0;,0,0,0,1,2,0,0,0,0,3,12,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1405,        resplit(x);,0,0,0,1,2,0,10,0,0,10,11,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1406,"        splitReciprocal(x, a);",0,0,0,1,2,0,0,0,0,3,22,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1407,        x[0] -= 2.0;,0,0,0,1,2,0,0,0,0,3,12,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1408,        resplit(x);,0,0,0,1,2,0,4,0,0,4,11,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1409,"        splitMult(x, a, y);",0,0,0,1,2,0,0,0,0,3,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1410,        x[0] = y[0];,0,0,0,2,4,0,0,0,0,6,12,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1411,        x[1] = y[1];,2,0,0,2,4,1,0,0,0,3,12,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1414,"        splitMult(x, x, x2);",2,0,0,1,2,1,10,0,0,13,20,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1420,        y[0] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][0];,2,0,0,3,6,3,0,0,0,5,48,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1421,        y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];,8,1,0,3,6,0,0,0,0,10,48,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1423,        for (int i = LN_SPLIT_COEF.length-2; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,51,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1424,"            splitMult(y, x2, a);",0,0,0,1,2,0,8,0,0,8,20,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1425,            y[0] = a[0];,2,0,1,2,4,3,0,0,0,10,12,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1426,            y[1] = a[1];,0,0,1,2,4,0,0,0,0,5,12,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1427,"            splitAdd(y, LN_SPLIT_COEF[i], a);",0,0,1,2,4,0,6,0,0,10,33,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1428,            y[0] = a[0];,0,0,1,2,4,0,0,0,0,5,12,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1429,            y[1] = a[1];,0,0,1,2,4,0,0,0,0,5,12,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1432,"        splitMult(y, x, a);",0,0,0,1,2,0,0,0,0,3,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1433,        y[0] = a[0];,0,0,0,2,4,0,0,0,0,6,12,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1434,        y[1] = a[1];,0,0,0,2,4,0,0,0,0,6,12,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1436,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1446,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1447,        final double ys[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1448,        final double facts[] = new double[2];,4,0,0,2,4,1,4,0,0,9,37,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1449,        final double as[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1450,"        split(x, xs);",0,0,0,1,2,0,0,0,0,3,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1451,        ys[0] = ys[1] = 0.0;,0,0,0,2,4,0,0,0,0,6,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1453,        for (int i = 19; i >= 0; i--) {,8,1,0,1,3,0,0,0,0,11,31,0,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1454,"            splitMult(xs, ys, as);",0,0,0,1,2,0,10,0,0,10,22,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1455,            ys[0] = as[0]; ys[1] = as[1];,6,0,1,4,8,0,0,0,0,16,29,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1457,            if ( (i & 1) == 0) {,0,0,0,2,5,0,0,0,0,7,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1458,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1461,"            split(FACT[i], as);",0,0,1,2,4,0,4,0,0,8,19,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1462,"            splitReciprocal(as, facts);",0,0,0,1,2,0,6,0,0,6,27,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1464,            if ( (i & 2) != 0 ) {,4,2,0,2,5,1,6,0,0,13,21,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1465,                facts[0] = -facts[0];,2,0,1,2,4,0,4,0,0,13,21,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1466,                facts[1] = -facts[1];,2,0,0,2,4,0,4,2,0,9,21,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1469,"            splitAdd(ys, facts, as);",2,0,0,1,2,0,8,0,0,11,24,0,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1470,            ys[0] = as[0]; ys[1] = as[1];,0,0,0,4,8,0,0,0,0,12,29,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1473,        if (result != null) {,6,1,0,1,3,0,0,2,0,9,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1474,            result[0] = ys[0];,0,0,1,2,4,0,0,0,0,5,18,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1475,            result[1] = ys[1];,6,0,1,2,4,0,6,2,0,20,18,0,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1478,        return ys[0] + ys[1];,0,0,0,2,4,1,0,0,0,7,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1489,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1490,        final double ys[] = new double[2];,20,6,0,2,4,1,0,0,0,28,34,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1491,        final double facts[] = new double[2];,2,0,0,2,4,1,0,0,0,3,37,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1492,        final double as[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1493,"        split(x, xs);",0,0,0,1,2,0,6,0,0,6,13,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1494,        ys[0] = ys[1] = 0.0;,0,0,1,2,4,0,0,0,0,6,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1496,        for (int i = 19; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,31,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1497,"            splitMult(xs, ys, as);",4,0,0,1,2,1,8,2,0,15,22,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1498,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1500,            if ( (i & 1) != 0) {,0,0,0,2,5,0,0,0,0,7,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1501,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1504,"            split(FACT[i], as);",0,0,1,2,4,0,4,0,0,8,19,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1505,"            splitReciprocal(as, facts);",4,2,1,1,2,0,6,0,0,16,27,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1507,            if ( (i & 2) != 0 ) {,0,0,0,2,5,0,0,0,0,7,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1508,                facts[0] = -facts[0];,0,0,1,2,4,0,0,0,0,6,21,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1509,                facts[1] = -facts[1];,2,0,1,2,4,1,4,0,0,13,21,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1512,"            splitAdd(ys, facts, as);",0,0,0,1,2,0,0,0,0,3,24,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1513,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1516,        if (result != null) {,0,0,0,1,3,0,0,0,0,4,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1517,            result[0] = ys[0];,0,0,1,2,4,0,0,0,0,5,18,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1518,            result[1] = ys[1];,4,0,1,2,4,0,0,0,0,10,18,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1521,        return ys[0] + ys[1];,0,1,1,2,4,1,0,0,0,15,21,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1527,        final double result[] = new double[2];,2,0,0,2,4,1,0,0,0,3,38,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1530,        for (int i = 0; i < 7; i++) {,6,1,0,1,3,0,0,0,0,8,29,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1531,            double x = i / 8.0;,4,1,0,0,0,0,0,0,0,5,19,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1533,"            slowSin(x, result);",0,0,0,1,2,0,0,0,0,3,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1534,            SINE_TABLE_A[i] = result[0];,0,0,1,2,4,0,0,0,0,7,28,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1535,            SINE_TABLE_B[i] = result[1];,0,0,0,2,4,0,0,0,0,6,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1537,"            slowCos(x, result);",0,0,0,1,2,0,6,0,0,6,19,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1538,            COSINE_TABLE_A[i] = result[0];,4,2,1,2,4,0,0,0,0,14,30,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1539,            COSINE_TABLE_B[i] = result[1];,0,0,0,2,4,0,0,0,0,6,30,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1543,        for (int i = 7; i < 14; i++) {,6,1,0,1,3,0,0,0,0,8,30,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1544,            double xs[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1545,            double ys[] = new double[2];,0,0,0,2,4,0,0,0,0,6,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1546,            double as[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1547,            double bs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1548,            double temps[] = new double[2];,0,0,0,2,4,0,0,0,0,6,31,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1550,            if ( (i & 1) == 0) {,2,2,0,2,5,0,0,0,0,4,20,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1552,                xs[0] = SINE_TABLE_A[i/2];,2,1,1,2,4,0,4,0,0,14,26,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1553,                xs[1] = SINE_TABLE_B[i/2];,2,1,1,2,4,0,0,0,0,8,26,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1554,                ys[0] = COSINE_TABLE_A[i/2];,14,5,0,2,4,0,0,0,0,20,28,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1555,                ys[1] = COSINE_TABLE_B[i/2];,0,0,0,2,4,0,0,0,0,6,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1558,"                splitMult(xs, ys, result);",0,0,0,1,2,0,0,0,0,3,26,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1559,                SINE_TABLE_A[i] = result[0] * 2.0;,0,1,1,2,4,0,0,0,0,8,34,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1560,                SINE_TABLE_B[i] = result[1] * 2.0;,0,1,1,2,4,0,0,0,0,8,34,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1563,"                splitMult(ys, ys, as);",2,0,0,1,2,0,0,0,0,3,22,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1564,"                splitMult(xs, xs, temps);",2,0,0,1,2,0,8,0,0,11,25,0,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1565,                temps[0] = -temps[0];,0,0,1,2,4,0,0,0,0,6,21,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1566,                temps[1] = -temps[1];,0,0,0,2,4,0,0,0,0,6,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1567,"                splitAdd(as, temps, result);",2,0,1,1,2,1,0,0,0,7,28,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1568,                COSINE_TABLE_A[i] = result[0];,0,0,0,2,4,0,0,0,0,6,30,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1569,                COSINE_TABLE_B[i] = result[1];,10,1,0,2,4,0,0,0,0,12,30,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1571,                xs[0] = SINE_TABLE_A[i/2];,0,0,0,2,4,0,0,0,0,6,26,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1572,                xs[1] = SINE_TABLE_B[i/2];,2,1,1,2,4,0,0,2,0,10,26,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1573,                ys[0] = COSINE_TABLE_A[i/2];,2,1,1,2,4,0,0,0,0,8,28,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1574,                ys[1] = COSINE_TABLE_B[i/2];,0,0,0,2,4,0,0,0,0,6,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1575,                as[0] = SINE_TABLE_A[i/2+1];,0,0,0,2,4,0,0,0,0,6,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1576,                as[1] = SINE_TABLE_B[i/2+1];,0,0,0,2,4,0,0,0,0,6,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1577,                bs[0] = COSINE_TABLE_A[i/2+1];,0,0,0,2,4,0,0,0,0,6,30,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1578,                bs[1] = COSINE_TABLE_B[i/2+1];,4,3,1,2,4,0,0,0,0,16,30,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1581,"                splitMult(xs, bs, temps);",0,0,0,1,2,0,8,0,0,8,25,9,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1582,"                splitMult(ys, as, result);",0,0,0,1,2,0,0,0,0,3,26,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1583,"                splitAdd(result, temps, result);",0,0,0,1,2,0,0,0,0,3,32,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1584,                SINE_TABLE_A[i] = result[0];,0,0,0,2,4,0,0,0,0,6,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1585,                SINE_TABLE_B[i] = result[1];,0,0,0,2,4,0,0,0,0,6,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1588,"                splitMult(ys, bs, result);",0,0,0,1,2,0,0,0,0,3,26,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1589,"                splitMult(xs, as, temps);",2,0,0,1,2,0,8,0,0,10,25,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1590,                temps[0] = -temps[0];,2,0,1,2,4,0,0,0,0,9,21,0,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1591,                temps[1] = -temps[1];,0,0,1,2,4,0,0,0,0,6,21,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1592,"                splitAdd(result, temps, result);",0,0,0,1,2,0,8,0,0,8,32,9,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1593,                COSINE_TABLE_A[i] = result[0];,4,1,1,2,4,0,0,0,0,17,30,0,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1594,                COSINE_TABLE_B[i] = result[1];,0,0,0,2,4,0,0,0,0,6,30,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1599,        for (int i = 0; i < 14; i++) {,0,0,0,1,3,0,0,0,0,4,30,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1600,            double xs[] = new double[2];,0,0,0,2,4,0,14,0,0,14,28,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1601,            double ys[] = new double[2];,4,0,0,2,4,0,0,0,0,5,28,0,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1602,            double as[] = new double[2];,20,3,0,2,4,0,4,0,0,28,28,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1604,            as[0] = COSINE_TABLE_A[i];,4,1,1,2,4,0,0,0,0,17,26,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1605,            as[1] = COSINE_TABLE_B[i];,0,0,0,2,4,0,0,0,0,6,26,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1607,"            splitReciprocal(as, ys);",0,0,0,1,2,0,6,0,0,6,24,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1609,            xs[0] = SINE_TABLE_A[i];,0,0,1,2,4,0,0,0,0,7,24,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1610,            xs[1] = SINE_TABLE_B[i];,4,1,1,2,4,1,2,0,0,16,24,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1612,"            splitMult(xs, ys, as);",2,0,0,1,2,0,20,0,0,22,22,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1614,            TANGENT_TABLE_A[i] = as[0];,0,0,1,2,4,0,0,0,0,7,27,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1615,            TANGENT_TABLE_B[i] = as[1];,0,0,1,2,4,0,0,0,0,7,27,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1618,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3016,        return (x < 0l) ? -x : x;,10,1,0,1,2,1,0,0,0,12,25,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3034,        return (x < 0.0) ? -x : x;,6,1,0,1,2,1,6,0,0,14,26,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3044,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,2,2,0,3,6,1,12,0,0,16,72,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3224,        return (a <= b) ? a : (Double.isNaN(a + b) ? Double.NaN : b);,0,0,0,3,6,1,0,0,0,10,61,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3260,        return (a <= b) ? b : (Double.isNaN(a + b) ? Double.NaN : a);,0,0,0,3,6,1,0,0,0,10,61,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,28,public class Incrementor {,2,0,0,0,1,1,0,0,0,3,26,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,44,        maximalCount = max;,4,0,0,0,0,0,0,0,0,5,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,45,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,53,        return maximalCount;,2,0,0,0,0,1,0,0,0,2,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,62,        return count;,2,0,0,0,0,1,0,0,0,2,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,84,        if (++count > maximalCount) {,0,0,0,1,3,0,0,0,0,4,29,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,87,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,93,        count = 0;,18,0,0,0,0,0,6,0,0,31,10,0,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,94,    },6,1,0,0,1,1,0,0,0,8,1,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,33,public final class MathUtils {,0,0,0,0,1,0,0,0,0,1,30,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,75,    private static final long[] FACTORIALS = new long[] {,2,0,0,2,5,3,0,0,0,5,53,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,417,"        return equals(x, y, 1);",0,0,0,1,2,1,0,0,0,4,23,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,479,        assert maxUlps > 0 && maxUlps < NAN_GAP;,6,3,0,0,0,0,0,0,0,9,40,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,481,        long xInt = Double.doubleToLongBits(x);,0,0,0,1,2,0,0,0,0,3,39,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,482,        long yInt = Double.doubleToLongBits(y);,2,0,0,1,2,0,6,0,0,8,39,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,485,        if (xInt < 0) {,0,0,0,1,3,0,0,0,0,4,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,486,            xInt = SGN_MASK - xInt;,16,2,0,0,0,0,2,0,0,24,23,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,488,        if (yInt < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,489,            yInt = SGN_MASK - yInt;,6,1,0,0,0,0,0,0,0,8,23,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,492,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,8,2,0,1,2,1,4,0,0,15,61,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,494,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,0,0,0,2,4,1,0,0,0,7,55,4,1.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,62,28,public class JDKRandomGenerator extends Random implements RandomGenerator {,0,0,0,0,1,0,0,0,0,1,75,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,191,"        Arrays.sort(optima, new Comparator<UnivariateRealPointValuePair>() {",6,1,0,1,4,1,0,0,0,8,68,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,194,                    if (o1 == null) {,4,1,0,1,3,3,0,4,0,12,17,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,196,                    } else if (o2 == null) {,2,1,0,1,4,0,0,0,0,3,24,11,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,199,                    final double v1 = o1.getValue();,2,0,0,1,2,1,4,0,0,7,32,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,200,                    final double v2 = o2.getValue();,4,0,0,1,2,1,4,0,0,10,32,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,201,                    return (goal == GoalType.MINIMIZE) ?,6,1,0,1,2,1,0,0,0,7,36,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,72,                                             final RandomGenerator generator) {,2,0,0,0,2,1,0,2,0,5,34,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,73,        this.optimizer = optimizer;,4,0,0,0,0,0,0,0,0,5,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,74,        this.starts = starts;,4,0,0,0,0,0,0,0,0,5,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,75,        this.generator = generator;,0,0,0,0,0,0,0,0,0,0,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,76,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,146,"        return optimize(f, goal, min, max, 0);",4,0,0,1,2,1,10,0,0,15,38,3,1.0,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,154,        optima = new UnivariateRealPointValuePair[starts];,2,0,1,1,2,0,0,2,0,7,50,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,155,        totalEvaluations = 0;,2,0,0,0,0,0,0,0,0,3,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,158,        for (int i = 0; i < starts; ++i) {,2,0,0,1,3,0,0,2,0,4,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,160,                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);,12,4,0,3,6,1,4,0,0,21,82,8,1.0,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,161,                final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);,12,4,0,3,6,1,4,0,0,21,82,8,1.0,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,162,"                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2));",0,0,1,4,8,0,24,0,0,29,100,8,1.0,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,167,            },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,169,            final int usedEvaluations = optimizer.getEvaluations();,2,0,0,1,2,1,4,0,0,7,55,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,170,            optimizer.setMaxEvaluations(optimizer.getMaxEvaluations() - usedEvaluations);,2,1,0,2,4,0,8,0,0,11,77,7,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,171,            totalEvaluations += usedEvaluations;,4,0,0,0,0,0,0,0,0,5,36,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,174,        sortPairs(goal);,0,0,0,1,2,0,0,0,0,3,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,176,        if (optima[0] == null) {,0,1,1,2,5,0,0,0,0,3,24,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,182,        return optima[0];,0,0,0,1,2,1,0,0,0,4,17,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,191,"        Arrays.sort(optima, new Comparator<UnivariateRealPointValuePair>() {",2,0,0,1,4,0,6,4,0,13,68,0,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,205,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair,62,45,                                        final double value) {,2,0,0,0,2,1,0,0,0,3,21,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair,62,46,        this.point = point;,0,0,0,0,0,0,0,0,0,0,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair,62,47,        this.value = value;,4,0,0,0,0,0,0,0,0,5,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair,62,48,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair,62,56,        return point;,2,0,0,0,0,1,0,0,0,2,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair,62,65,        return value;,2,0,0,0,0,1,0,0,0,2,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,36,public abstract class AbstractUnivariateRealOptimizer,2,0,0,0,0,2,0,0,0,4,53,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,41,    private final Incrementor evaluations = new Incrementor();,2,0,0,1,2,2,0,4,0,8,58,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,55,        evaluations.setMaximalCount(maxEvaluations);,0,0,0,1,2,0,6,0,0,6,44,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,56,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,60,        return evaluations.getMaximalCount();,0,0,0,1,2,1,4,0,0,4,37,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,65,        return evaluations.getCount();,0,0,0,1,2,1,4,0,0,4,30,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,72,        return goal;,2,0,0,0,0,1,0,0,0,2,12,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,78,        return searchMin;,2,0,0,0,0,1,0,0,0,2,17,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,84,        return searchMax;,2,0,0,0,0,1,0,0,0,2,17,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,90,        return searchStart;,2,0,0,0,0,1,0,0,0,2,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,106,            evaluations.incrementCount();,0,0,0,1,2,0,0,0,0,3,29,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,109,        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,110,        return function.value(point);,2,0,0,1,2,1,6,0,0,8,29,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,120,        if (f == null) {,2,1,0,1,3,0,0,0,0,3,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,123,        if (goalType == null) {,2,1,0,1,3,0,0,0,0,3,23,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,128,        searchMin = min;,4,0,0,0,0,0,0,0,0,5,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,129,        searchMax = max;,4,0,0,0,0,0,0,0,0,5,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,130,        searchStart = startValue;,4,0,0,0,0,0,0,0,0,5,25,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,131,        goal = goalType;,4,0,0,0,0,0,0,0,0,5,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,132,        function = f;,10,2,0,0,0,1,8,0,0,21,13,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,133,        evaluations.resetCount();,0,0,0,1,2,0,4,0,0,4,25,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,136,        return doOptimize();,0,0,0,1,2,1,2,0,0,2,20,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,144,"        return optimize(f, goalType, min, max, min + 0.5 * (max - min));",0,0,0,2,4,1,0,0,0,7,64,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,158,        return checker;,2,0,0,0,0,1,0,0,0,2,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,62,27,public enum GoalType implements Serializable {,4,1,0,0,1,1,0,2,0,8,46,0,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,62,30,"    MAXIMIZE,",2,0,0,0,0,0,0,0,0,2,9,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,62,33,    MINIMIZE,0,0,0,0,0,0,0,0,0,0,8,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,76,                          double abs) {,4,2,1,0,2,0,0,0,0,10,13,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,77,        if (rel < MIN_RELATIVE_TOLERANCE) {,4,1,0,1,3,0,0,0,0,5,35,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,80,        if (abs <= 0) {,4,1,1,1,3,0,0,0,0,8,15,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,83,        relativeThreshold = rel;,4,0,0,0,0,0,6,0,0,11,24,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,84,        absoluteThreshold = abs;,4,0,0,0,0,0,0,0,0,5,24,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,85,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,47,    private static final double GOLDEN_SECTION = 0.5 * (3 - FastMath.sqrt(5));,2,2,0,2,4,3,4,0,0,11,74,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,51,    private static final double MIN_RELATIVE_TOLERANCE = 2 * FastMath.ulp(1d);,2,1,0,1,2,3,4,0,0,10,74,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,90,        final boolean isMinim = getGoalType() == GoalType.MINIMIZE;,6,1,0,1,2,1,2,0,0,10,59,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,91,        final double lo = getMin();,2,0,0,1,2,1,2,0,0,5,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,92,        final double mid = getStartValue();,2,0,0,1,2,1,2,0,0,5,35,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,93,        final double hi = getMax();,4,0,0,1,2,1,2,0,0,7,27,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,96,        final ConvergenceChecker<UnivariateRealPointValuePair> checker,2,0,0,0,0,1,0,4,0,7,62,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,101,        if (lo < hi) {,4,1,0,1,3,0,0,0,0,5,14,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,102,            a = lo;,4,1,1,0,0,0,0,0,0,11,7,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,103,            b = hi;,4,0,0,0,0,0,0,0,0,5,7,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,109,        double x = mid;,4,0,0,0,0,0,0,0,0,4,15,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,110,        double v = x;,4,0,0,0,0,0,0,0,0,4,13,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,111,        double w = x;,4,0,0,0,0,0,0,0,0,4,13,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,112,        double d = 0;,0,0,0,0,0,0,0,0,0,0,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,113,        double e = 0;,12,3,1,0,0,0,0,0,0,18,13,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,114,        double fx = computeObjectiveValue(x);,0,0,0,1,2,0,0,0,0,3,37,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,115,        if (!isMinim) {,2,0,0,1,3,0,0,0,0,3,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,118,        double fv = fx;,4,0,0,0,0,0,0,0,0,4,15,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,119,        double fw = fx;,4,0,0,0,0,0,0,0,0,4,15,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,121,        UnivariateRealPointValuePair previous = null;,2,0,0,0,0,0,0,2,0,4,45,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,122,        UnivariateRealPointValuePair current,2,0,0,0,0,0,0,2,0,4,36,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,125,        int iter = 0;,4,0,0,0,0,0,0,0,0,5,13,0,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,127,            final double m = 0.5 * (a + b);,0,0,0,1,2,0,0,0,0,3,31,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,128,            final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;,6,2,0,1,2,1,6,0,0,15,76,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,129,            final double tol2 = 2 * tol1;,4,1,0,0,0,1,0,0,0,6,29,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,132,            final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);,12,5,0,2,4,1,4,0,0,22,65,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,133,            if (!stop) {,2,0,0,1,3,0,0,0,0,3,12,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,134,                double p = 0;,2,0,0,0,0,0,0,0,0,2,13,9,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,135,                double q = 0;,2,0,0,0,0,0,0,0,0,2,13,9,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,136,                double r = 0;,0,0,0,0,0,0,0,0,0,0,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,137,                double u = 0;,12,2,0,0,0,0,0,0,0,15,13,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,139,                if (FastMath.abs(e) > tol1) { // Fit parabola.,2,1,0,2,5,0,6,0,0,9,46,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,140,                    r = (x - w) * (fx - fv);,10,3,0,2,4,0,0,0,0,14,24,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,141,                    q = (x - v) * (fx - fw);,0,0,0,2,4,0,0,0,0,6,24,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,142,                    p = (x - v) * q - (x - w) * r;,14,5,0,2,4,0,0,0,0,20,30,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,143,                    q = 2 * (q - r);,14,4,0,1,2,0,4,0,0,23,16,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,145,                    if (q > 0) {,2,1,0,1,3,0,0,0,0,3,12,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,146,                        p = -p;,4,0,0,0,0,0,0,0,0,6,7,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,148,                        q = -q;,4,0,0,0,0,0,0,0,0,6,7,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,151,                    r = e;,6,0,0,0,0,0,6,2,0,15,6,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,152,                    e = d;,0,0,0,0,0,0,0,0,0,0,6,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,154,                    if (p > q * (a - x) &&,10,0,0,1,3,0,0,0,0,13,22,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,158,                        d = p / q;,6,1,0,0,0,0,4,0,0,12,10,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,159,                        u = x + d;,6,1,0,0,0,0,0,0,0,8,10,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,162,                        if (u - a < tol2 || b - u < tol2) {,12,5,0,1,3,0,0,0,0,17,35,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,163,                            if (x <= m) {,4,1,0,1,3,0,0,0,0,5,13,14,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,164,                                d = tol1;,4,0,0,0,0,0,0,0,0,5,9,16,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,171,                        if (x < m) {,4,1,0,1,3,0,0,0,0,5,12,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,172,                            e = b - x;,0,0,0,0,0,0,0,0,0,0,10,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,174,                            e = a - x;,6,1,0,0,0,0,0,0,0,8,10,14,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,176,                        d = GOLDEN_SECTION * e;,0,0,0,0,0,0,0,0,0,0,23,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,180,                    if (x < m) {,4,1,0,1,3,0,0,0,0,5,12,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,183,                        e = a - x;,6,1,0,0,0,0,0,0,0,8,10,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,185,                    d = GOLDEN_SECTION * e;,6,1,0,0,0,0,0,0,0,8,23,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,189,                if (FastMath.abs(d) < tol1) {,2,1,0,2,5,0,6,0,0,9,29,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,190,                    if (d >= 0) {,2,1,0,1,3,0,0,0,0,3,13,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,191,                        u = x + tol1;,8,1,0,0,0,1,0,4,0,15,13,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,193,                        u = x - tol1;,6,1,0,0,0,0,0,0,0,8,13,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,196,                    u = x + d;,6,1,0,0,0,0,0,0,0,8,10,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,199,                double fu = computeObjectiveValue(u);,2,0,1,1,2,0,10,0,0,25,37,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,200,                if (!isMinim) {,10,2,0,1,3,0,0,0,0,14,15,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,205,                if (fu <= fx) {,4,1,0,1,3,0,0,0,0,5,15,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,206,                    if (u < x) {,4,1,0,1,3,0,0,0,0,5,12,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,207,                        b = x;,0,0,0,0,0,0,0,0,0,0,6,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,209,                        a = x;,4,0,0,0,0,0,0,0,0,5,6,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,211,                    v = w;,4,0,0,0,0,0,0,0,0,5,6,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,212,                    fv = fw;,4,0,0,0,0,0,0,0,0,5,8,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,213,                    w = x;,0,0,0,0,0,0,0,0,0,0,6,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,214,                    fw = fx;,4,0,0,0,0,0,0,0,0,5,8,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,215,                    x = u;,4,0,0,0,0,0,0,0,0,5,6,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,216,                    fx = fu;,4,0,0,0,0,0,0,0,0,5,8,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,218,                    if (u < x) {,8,1,0,1,3,0,0,0,0,10,12,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,219,                        a = u;,4,0,0,0,0,0,0,0,0,5,6,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,221,                        b = u;,4,0,0,0,0,0,0,0,0,5,6,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,223,                    if (fu <= fw ||,4,2,0,0,1,0,0,0,0,6,15,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,225,                        v = w;,6,0,0,0,0,0,0,0,0,8,6,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,226,                        fv = fw;,4,0,0,0,0,0,0,0,0,5,8,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,227,                        w = u;,2,0,0,0,0,0,0,0,0,3,6,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,228,                        fw = fu;,0,0,0,0,0,0,0,0,0,0,8,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,229,                    } else if (fu <= fv ||,4,3,0,0,2,0,0,0,0,7,22,11,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,232,                        v = u;,0,0,0,0,0,0,0,0,0,0,6,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,233,                        fv = fu;,4,0,0,0,0,0,0,0,0,5,8,13,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,237,                previous = current;,4,0,0,0,0,0,0,0,0,6,19,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,238,"                current = new UnivariateRealPointValuePair(x, isMinim ? fx : -fx);",12,3,1,1,2,0,0,2,0,28,66,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,241,                if (checker != null) {,2,1,0,1,3,0,0,0,0,3,22,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,246,            } else { // Default termination (Brent's criterion).,0,0,0,1,4,0,0,0,0,5,52,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,247,                return current;,2,0,0,0,0,1,0,0,0,2,15,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,249,            ++iter;,2,0,0,0,0,0,0,0,0,3,7,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,250,        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,211,    private FastMath() {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,212,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,227,        return 0.5 * (FastMath.exp(a) + FastMath.exp(-a));,0,0,0,3,6,1,0,0,0,10,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,236,        boolean negative = false;,2,0,0,0,0,0,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,237,        if (a < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,238,            negative = true;,2,0,0,0,0,0,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,239,            a = -a;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,243,        if (a > 0.3) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,244,            absSinh = 0.5 * (FastMath.exp(a) - FastMath.exp(-a));,6,3,0,3,6,0,10,0,0,21,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,246,            final double a2 = a * a;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,247,            if (a > 0.05) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,248,                absSinh = a * (1 + a2 * (1 + a2  * (1 + a2 * (1 + a2 * (1 + a2 / 110) / 72) / 42) / 20) / 6);,0,0,0,5,10,0,0,0,0,15,93,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,250,                absSinh = a * (1 + a2 * (1 + a2  * (1 + a2 / 42) / 20) / 6);,10,9,0,3,6,0,0,0,0,20,60,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,254,        return negative ? -absSinh : absSinh;,0,0,0,0,0,1,0,0,0,1,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,264,        boolean negative = false;,2,0,0,0,0,0,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,265,        if (a < 0) {,6,1,0,1,3,0,4,0,0,14,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,266,            negative = true;,4,0,0,0,0,1,0,4,0,9,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,267,            a = -a;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,271,        if (a > 0.074) {,4,0,0,1,3,0,0,2,0,6,16,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,272,            final double twoA = 2 * a;,0,0,0,0,0,0,0,0,0,0,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,273,            absTanh = FastMath.expm1(twoA) / (FastMath.exp(twoA) + 1);,8,0,0,3,6,1,0,0,0,9,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,274,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,275,            final double a2 = a * a;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,276,            if (a > 0.016) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,277,                absTanh = a * (1 - a2 * (1 - a2 * (2 - a2 * (17 - a2 * (62 - a2 * 1382 / 55 ) / 9) / 21) / 5) / 3);,0,0,0,5,10,0,0,0,0,15,99,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,279,                absTanh = a * (1 - a2 * (1 - a2 * (2 - a2 * 17 / 21) / 5) / 3);,10,10,0,3,6,0,0,0,0,21,63,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,283,        return negative ? -absTanh : absTanh;,8,0,0,0,0,1,0,0,0,10,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,292,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,6,3,0,2,4,1,8,0,0,17,50,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,301,        boolean negative = false;,8,5,1,0,0,1,0,0,0,19,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,302,        if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,303,            negative = true;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,304,            a = -a;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,308,        if (a > 0.167) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,309,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,8,3,0,2,4,0,8,0,0,20,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,311,            final double a2 = a * a;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,312,            if (a > 0.097) {,2,1,0,1,3,0,0,0,0,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,313,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0 - a2 * (1.0 / 15.0 - a2 * (1.0 / 17.0) * 15.0 / 16.0) * 13.0 / 14.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,0,0,0,9,18,0,0,0,0,27,264,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,314,            } else if (a > 0.036) {,2,1,0,1,4,0,0,0,0,3,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,315,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,0,0,0,7,14,0,0,0,0,21,196,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,316,            } else if (a > 0.0036) {,0,0,0,1,4,0,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,317,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,0,0,0,5,10,0,0,0,0,15,129,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,319,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0) * 3.0 / 4.0) / 2.0);,0,0,0,3,6,0,0,0,0,9,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,323,        return negative ? -absAsinh : absAsinh;,0,0,0,0,0,1,0,0,0,1,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,333,        boolean negative = false;,8,1,0,0,0,0,0,0,0,11,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,334,        if (a < 0) {,4,2,1,1,3,0,0,0,0,11,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,335,            negative = true;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,336,            a = -a;,2,0,0,0,0,0,0,0,0,2,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,340,        if (a > 0.15) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,341,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,2,0,0,3,6,0,0,0,0,3,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,343,            final double a2 = a * a;,6,1,0,0,0,1,0,0,0,8,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,344,            if (a > 0.087) {,2,1,0,1,3,0,0,0,0,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,345,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0 + a2 * (1.0 / 15.0 + a2 * (1.0 / 17.0)))))))));,0,0,0,9,18,0,0,0,0,27,175,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,346,            } else if (a > 0.031) {,4,1,0,1,4,0,0,2,0,8,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,347,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0)))))));,0,0,0,7,14,0,0,0,0,21,135,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,348,            } else if (a > 0.003) {,0,0,0,1,4,0,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,349,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0)))));,12,13,0,5,10,0,0,0,0,26,95,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,351,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0)));,18,8,0,3,6,0,0,0,0,28,57,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,355,        return negative ? -absAtanh : absAtanh;,6,0,0,0,0,1,0,0,0,7,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,365,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : (Double.isNaN(a) ? Double.NaN : 0.0));,8,2,0,5,10,1,6,0,0,17,83,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,373,"        return nextAfter(a, Double.POSITIVE_INFINITY);",4,0,0,1,2,1,4,0,0,8,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,380,        return Math.random();,0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,404,"        return exp(x, 0.0, null);",0,0,0,1,2,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,423,        if (x < 0.0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,424,            intVal = (int) -x;,4,0,0,1,2,0,0,0,0,6,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,426,            if (intVal > 746) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,427,                if (hiPrec != null) {,4,1,0,1,3,0,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,428,                    hiPrec[0] = 0.0;,0,0,0,1,2,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,429,                    hiPrec[1] = 0.0;,0,0,1,1,2,0,0,0,0,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,431,                return 0.0;,8,1,0,0,0,1,0,0,0,10,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,434,            if (intVal > 709) {,2,1,0,1,3,0,0,0,0,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,436,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",0,0,0,1,2,0,4,0,0,4,79,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,437,                if (hiPrec != null) {,56,18,0,1,3,0,0,0,0,75,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,438,                    hiPrec[0] /= 285040095144011776.0;,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,439,                    hiPrec[1] /= 285040095144011776.0;,2,0,1,1,2,0,0,0,0,5,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,441,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,444,            if (intVal == 709) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,446,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",0,0,0,1,2,0,0,0,0,3,79,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,447,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,448,                    hiPrec[0] /= 4.455505956692756620;,0,0,1,1,2,0,0,0,0,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,449,                    hiPrec[1] /= 4.455505956692756620;,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,451,                return result;,2,0,0,0,0,2,0,4,0,7,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,454,            intVal++;,2,0,0,0,0,0,0,0,0,3,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,456,            intPartA = EXP_INT_TABLE_A[750-intVal];,4,1,1,1,2,0,0,0,0,12,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,457,            intPartB = EXP_INT_TABLE_B[750-intVal];,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,459,            intVal = -intVal;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,461,            intVal = (int) x;,4,0,0,1,2,0,0,0,0,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,463,            if (intVal > 709) {,12,1,0,1,3,0,0,0,0,13,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,464,                if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,465,                    hiPrec[0] = Double.POSITIVE_INFINITY;,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,466,                    hiPrec[1] = 0.0;,0,0,1,1,2,0,0,0,0,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,468,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,471,            intPartA = EXP_INT_TABLE_A[750+intVal];,4,1,1,1,2,0,0,0,0,9,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,472,            intPartB = EXP_INT_TABLE_B[750+intVal];,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,479,        final int intFrac = (int) ((x - intVal) * 1024.0);,8,2,0,3,6,4,0,0,0,14,50,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,480,        final double fracPartA = EXP_FRAC_TABLE_A[intFrac];,2,0,1,1,2,1,0,0,0,7,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,481,        final double fracPartB = EXP_FRAC_TABLE_B[intFrac];,2,0,1,1,2,1,0,0,0,7,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,487,        final double epsilon = x - (intVal + intFrac / 1024.0);,8,3,0,1,2,1,0,0,0,12,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,496,        double z = 0.04168701738764507;,6,1,0,0,0,0,0,0,0,7,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,497,        z = z * epsilon + 0.1666666505023083;,2,0,1,0,0,0,0,0,0,5,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,498,        z = z * epsilon + 0.5000000000042687;,0,0,0,0,0,0,0,0,0,0,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,499,        z = z * epsilon + 1.0;,12,3,0,0,0,0,0,0,0,17,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,500,        z = z * epsilon + -3.940510424527919E-20;,6,2,0,0,0,0,0,0,0,10,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,507,        double tempA = intPartA * fracPartA;,6,1,0,0,0,0,0,0,0,7,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,508,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,0,0,0,0,0,0,0,0,0,0,82,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,514,        final double tempC = tempB + tempA;,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,516,        if (extra != 0.0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,517,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,0,0,0,0,0,0,0,0,0,0,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,519,            result = tempC*z + tempB + tempA;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,522,        if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,524,            hiPrec[0] = tempA;,2,0,1,1,2,0,0,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,525,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,16,6,1,1,2,0,0,0,0,25,58,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,528,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,536,        if (x != x || x == 0.0) { // NaN or zero,0,0,0,1,3,0,0,0,0,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,537,            return x;,4,3,1,0,0,2,10,2,0,30,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,540,        if (x <= -1.0 || x >= 1.0) {,0,0,0,1,3,0,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,543,            double hiPrec[] = new double[2];,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,544,"            exp(x, 0.0, hiPrec);",0,0,0,1,2,0,6,0,0,6,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,545,            if (x > 0.0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,546,                return -1.0 + hiPrec[0] + hiPrec[1];,16,2,1,2,4,1,0,0,0,24,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,548,                final double ra = -1.0 + hiPrec[0];,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,549,                double rb = -(ra + 1.0 - hiPrec[0]);,6,2,1,2,4,0,0,0,0,11,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,550,                rb += hiPrec[1];,0,0,0,1,2,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,551,                return ra + rb;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,558,        boolean negative = false;,10,3,0,0,0,1,0,0,0,15,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,560,        if (x < 0.0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,561,            x = -x;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,562,            negative = true;,2,0,0,0,0,0,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,566,            int intFrac = (int) (x * 1024.0);,26,10,0,2,4,0,0,0,0,37,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,567,            double tempA = EXP_FRAC_TABLE_A[intFrac] - 1.0;,0,0,0,1,2,0,0,0,0,3,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,568,            double tempB = EXP_FRAC_TABLE_B[intFrac];,2,0,0,1,2,0,0,0,0,3,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,570,            double temp = tempA + tempB;,8,2,0,0,0,0,0,0,0,10,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,571,            tempB = -(temp - tempA - tempB);,12,3,0,1,2,0,8,0,0,25,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,572,            tempA = temp;,0,0,0,0,0,0,2,0,0,2,13,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,574,            temp = tempA * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,575,            baseA = tempA + temp - temp;,12,3,0,0,0,0,0,0,0,17,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,576,            baseB = tempB + (tempA - baseA);,8,2,0,1,2,0,0,0,0,11,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,578,            epsilon = x - intFrac/1024.0;,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,583,        double zb = 0.008336750013465571;,2,0,0,0,0,0,0,0,0,2,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,584,        zb = zb * epsilon + 0.041666663879186654;,6,2,0,0,0,0,0,0,0,9,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,585,        zb = zb * epsilon + 0.16666666666745392;,10,2,0,0,0,0,0,0,0,14,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,586,        zb = zb * epsilon + 0.49999999999999994;,0,0,0,0,0,0,0,0,0,0,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,587,        zb = zb * epsilon;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,588,        zb = zb * epsilon;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,590,        double za = epsilon;,8,1,0,0,0,0,0,0,0,10,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,591,        double temp = za + zb;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,592,        zb = -(temp - za - zb);,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,593,        za = temp;,6,0,0,0,0,0,0,0,0,7,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,595,        temp = za * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,596,        temp = za + temp - temp;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,597,        zb += za - temp;,6,1,0,0,0,0,0,0,0,8,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,598,        za = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,601,        double ya = za * baseA;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,603,        temp = ya + za * baseB;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,604,        double yb = -(temp - ya - za * baseB);,0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,605,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,607,        temp = ya + zb * baseA;,8,2,0,0,0,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,608,        yb += -(temp - ya - zb * baseA);,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,609,        ya = temp;,12,1,0,0,0,0,0,0,0,15,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,611,        temp = ya + zb * baseB;,8,2,0,0,0,0,6,0,0,17,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,612,        yb += -(temp - ya - zb*baseB);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,613,        ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,617,        temp = ya + baseA;,8,1,0,0,0,1,6,2,0,19,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,618,        yb += -(temp - baseA - ya);,8,1,0,1,2,0,0,0,0,11,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,619,        ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,621,        temp = ya + za;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,623,        yb += -(temp - ya - za);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,624,        ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,626,        temp = ya + baseB;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,628,        yb += -(temp - ya - baseB);,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,629,        ya = temp;,8,9,0,0,0,0,0,0,0,18,10,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,631,        temp = ya + zb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,633,        yb += -(temp - ya - zb);,8,1,0,1,2,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,634,        ya = temp;,6,1,1,0,0,0,0,0,0,11,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,636,        if (negative) {,6,1,0,1,3,0,0,0,0,7,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,638,            double denom = 1.0 + ya;,4,1,0,0,0,0,12,0,0,17,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,639,            double denomr = 1.0 / denom;,6,2,0,0,0,0,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,640,            double denomb = -(denom - 1.0 - ya) + yb;,18,3,0,1,2,0,0,0,0,23,41,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,641,            double ratio = ya * denomr;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,642,            temp = ratio * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,643,            final double ra = ratio + temp - temp;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,644,            double rb = ratio - ra;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,646,            temp = denom * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,647,            za = denom + temp - temp;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,648,            zb = denom - za;,6,1,0,0,0,0,0,0,0,8,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,650,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,0,0,0,1,2,0,0,0,0,3,60,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,661,            rb += yb * denomr;                      // numerator,0,0,0,0,0,0,0,0,0,0,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,662,            rb += -ya * denomb * denomr * denomr;   // denominator,10,1,0,0,0,0,0,0,0,13,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,665,            ya = -ra;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,666,            yb = -rb;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,669,        return ya + yb;,2,0,0,0,0,3,0,0,0,4,15,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,719,            final double a = d * 9.31322574615478515625E-10;,0,0,0,0,0,0,0,0,0,0,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,720,            split[0] = (d + a - d) * 1073741824.0;,4,1,0,2,4,0,0,0,0,5,38,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,721,            split[1] = d - split[0];,2,1,1,2,4,0,0,0,0,8,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,792,            in[0] = in[1];,10,1,1,2,4,0,0,0,0,17,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,793,            in[1] = 0.0;,2,0,1,1,2,1,0,0,0,6,12,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,924,"        return log(x, null);",0,0,0,1,2,1,4,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,934,        long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,937,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,0,0,0,2,5,0,0,0,0,7,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,938,            if (x != 0.0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,939,                if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,940,                    hiPrec[0] = Double.NaN;,10,2,1,1,2,0,0,0,0,16,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,943,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,948,        if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,949,            if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,950,                hiPrec[0] = Double.POSITIVE_INFINITY;,4,0,1,1,2,0,0,0,0,7,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,953,            return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,957,        int exp = (int)(bits >> 52)-1023;,4,1,0,2,4,0,0,0,0,5,33,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,959,        if ((bits & 0x7ff0000000000000L) == 0) {,0,0,0,2,5,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,961,            if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,963,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,964,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,967,                return Double.NEGATIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,971,            bits <<= 1;,2,0,0,0,0,0,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,972,            while ( (bits & 0x0010000000000000L) == 0) {,0,0,0,2,5,0,0,0,0,7,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,973,                exp--;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,974,                bits <<= 1;,4,0,0,0,0,0,0,0,0,5,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,979,        if (exp == -1 || exp == 0) {,4,3,0,1,3,0,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,980,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,0,0,0,1,3,0,0,0,0,4,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,985,                double xa = x - 1.0;,14,4,0,0,0,0,0,0,0,20,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,986,                double xb = xa - x + 1.0;,10,3,1,0,0,0,0,0,0,18,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,987,                double tmp = xa * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,988,                double aa = xa + tmp - tmp;,14,2,0,0,0,3,0,0,0,19,27,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,989,                double ab = xa - aa;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,990,                xa = aa;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,991,                xb = ab;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,993,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,8,2,1,2,4,0,0,0,0,12,53,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,994,                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];,6,1,1,2,4,0,0,0,0,9,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,996,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,53,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,998,                    aa = ya * xa;,6,0,0,0,0,0,0,0,0,7,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,999,                    ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1001,                    tmp = aa * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,24,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1002,                    ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1003,                    yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1006,                    aa = ya + LN_QUICK_COEF[i][0];,0,0,0,2,4,0,0,0,0,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1007,                    ab = yb + LN_QUICK_COEF[i][1];,18,3,1,2,4,0,0,0,0,27,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1009,                    tmp = aa * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1010,                    ya = aa + tmp - tmp;,4,1,0,0,0,0,4,2,0,12,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1011,                    yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1015,                aa = ya * xa;,6,1,0,0,0,0,0,0,0,8,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1016,                ab = ya * xb + yb * xa + yb * xb;,16,8,1,0,0,0,0,0,0,33,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1018,                tmp = aa * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1019,                ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1020,                yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1022,                return ya + yb;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1027,        double lnm[] = LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,4,2,1,5,10,0,0,0,0,8,66,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1038,        double epsilon = (double)(bits & 0x3ffffffffffL) / (4503599627370496.0 + (bits & 0x000ffc0000000000L));,6,4,0,4,8,0,0,0,0,10,103,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1040,        double lnza = 0.0;,2,0,0,0,0,0,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1041,        double lnzb = 0.0;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1043,        if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1045,            double tmp = epsilon * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1046,            double aa = epsilon + tmp - tmp;,20,4,0,0,0,0,0,0,0,25,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1047,            double ab = epsilon - aa;,6,1,0,0,0,0,0,0,0,7,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1048,            double xa = aa;,6,0,0,0,0,0,0,0,0,6,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1049,            double xb = ab;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1052,            double numer = (double)(bits & 0x3ffffffffffL);,0,0,0,2,4,0,0,0,0,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1053,            double denom = 4503599627370496.0 + (bits & 0x000ffc0000000000L);,0,0,0,1,2,0,0,0,0,3,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1054,            aa = numer - xa*denom - xb * denom;,12,4,0,0,0,0,0,0,0,17,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1055,            xb += aa / denom;,12,2,0,0,0,0,0,0,0,16,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1058,            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];,8,1,1,2,4,1,6,0,0,18,57,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1059,            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];,16,3,1,2,4,0,0,0,0,23,57,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1061,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1063,                aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1064,                ab = ya * xb + yb * xa + yb * xb;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1066,                tmp = aa * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1067,                ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1068,                yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1071,                aa = ya + LN_HI_PREC_COEF[i][0];,8,2,1,2,4,0,0,0,0,18,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1072,                ab = yb + LN_HI_PREC_COEF[i][1];,4,1,1,2,4,0,0,0,0,10,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1074,                tmp = aa * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1075,                ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1076,                yb = aa - ya + ab;,16,3,0,0,0,0,0,0,0,21,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1080,            aa = ya * xa;,2,0,0,0,0,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1081,            ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1089,            lnza = aa + ab;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1090,            lnzb = -(lnza - aa - ab);,0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1091,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1094,            lnza = -0.16624882440418567;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1095,            lnza = lnza * epsilon + 0.19999954120254515;,6,2,0,0,0,0,0,0,0,9,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1096,            lnza = lnza * epsilon + -0.2499999997677497;,14,3,0,0,0,0,0,0,0,20,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1097,            lnza = lnza * epsilon + 0.3333333333332802;,0,0,0,0,0,0,0,0,0,0,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1098,            lnza = lnza * epsilon + -0.5;,6,2,0,0,0,0,0,0,0,10,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1099,            lnza = lnza * epsilon + 1.0;,6,2,0,0,0,0,0,0,0,9,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1100,            lnza = lnza * epsilon;,6,1,0,0,0,0,0,0,0,8,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1117,        double a = LN_2_A*exp;,6,1,0,0,0,0,0,0,0,7,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1118,        double b = 0.0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1119,        double c = a+lnm[0];,10,2,1,1,2,0,0,0,0,14,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1120,        double d = -(c-a-lnm[0]);,0,0,0,2,4,0,0,0,0,6,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1121,        a = c;,8,1,0,0,0,0,0,0,0,9,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1122,        b = b + d;,10,3,0,0,0,0,0,0,0,14,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1124,        c = a + lnza;,8,1,0,0,0,0,0,0,0,11,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1125,        d = -(c - a - lnza);,8,1,0,1,2,0,0,0,0,11,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1126,        a = c;,6,0,1,0,0,1,0,0,0,10,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1127,        b = b + d;,8,1,1,0,0,0,0,0,0,13,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1129,        c = a + LN_2_B*exp;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1130,        d = -(c - a - LN_2_B*exp);,10,2,0,1,2,0,0,0,0,14,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1131,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1132,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1134,        c = a + lnm[1];,10,2,1,1,2,0,0,0,0,16,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1135,        d = -(c - a - lnm[1]);,8,3,1,2,4,0,0,0,0,15,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1136,        a = c;,6,0,0,0,0,0,0,2,0,9,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1137,        b = b + d;,14,1,0,0,0,0,0,2,0,19,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1139,        c = a + lnzb;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1140,        d = -(c - a - lnzb);,10,2,0,1,2,0,0,0,0,15,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1141,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1142,        b = b + d;,6,0,0,0,0,0,10,0,0,17,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1144,        if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1145,            hiPrec[0] = a;,0,0,0,1,2,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1146,            hiPrec[1] = b;,6,1,1,1,2,0,0,0,0,10,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1149,        return a + b;,4,1,0,0,0,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1157,        double xpa = 1.0 + x;,4,1,0,0,0,0,0,0,0,5,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1158,        double xpb = -(xpa - 1.0 - x);,12,4,0,1,2,0,0,0,0,17,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1160,        if (x == -1) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1161,            return x/0.0;   // -Infinity,2,1,0,0,0,1,0,0,0,4,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1164,        if (x > 0 && 1/x == 0) { // x = Infinity,10,5,0,1,3,0,0,0,0,15,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1165,            return x;,10,6,0,0,0,1,0,0,0,16,9,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1168,        if (x>1e-6 || x<-1e-6) {,6,3,0,1,3,1,0,0,0,11,24,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1169,            double hiPrec[] = new double[2];,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1171,"            log(xpa, hiPrec);",0,0,0,1,2,0,6,0,0,6,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1175,            double fx1 = xpb/xpa;,6,1,0,0,0,0,0,0,0,7,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1177,            double epsilon = 0.5 * fx1 + 1.0;,16,3,0,0,0,0,0,0,0,20,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1178,            epsilon = epsilon * fx1;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1180,            return epsilon + hiPrec[1] + hiPrec[0];,0,0,0,2,4,1,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1184,        double y = x * 0.333333333333333 - 0.5;,4,2,0,0,0,0,0,0,0,6,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1185,        y = y * x + 1.0;,6,2,0,0,0,0,4,0,0,13,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1186,        y = y * x;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1188,        return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1196,        final double hiPrec[] = new double[2];,2,0,0,2,4,1,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1198,"        log(x, hiPrec);",0,0,0,1,2,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1200,        final double tmp = hiPrec[0] * 1073741824.0;,10,2,1,1,2,1,0,0,0,16,44,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1201,        final double lna = hiPrec[0] + tmp - tmp;,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1202,        final double lnb = hiPrec[0] - lna + hiPrec[1];,4,2,1,2,4,1,0,0,0,11,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1204,        final double rln10a = 0.4342944622039795;,4,0,0,0,0,1,0,0,0,5,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1205,        final double rln10b = 1.9699272335463627E-8;,2,0,0,0,0,1,0,0,0,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1207,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,18,7,0,0,0,1,0,0,0,25,65,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1218,        final double lns[] = new double[2];,6,0,0,2,4,1,0,2,0,9,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1220,        if (y == 0.0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1221,            return 1.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1224,        if (x != x) { // X is NaN,4,1,0,1,3,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1225,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1229,        if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1230,            long bits = Double.doubleToLongBits(x);,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1231,            if ((bits & 0x8000000000000000L) != 0) {,8,3,1,2,5,1,0,0,0,15,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1233,                long yi = (long) y;,4,0,0,1,2,0,0,0,0,4,19,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1235,                if (y < 0 && y == yi && (yi & 1) == 1) {,2,1,0,2,5,0,0,0,0,3,40,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1236,                    return Double.NEGATIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1239,                if (y < 0 && y == yi && (yi & 1) == 1) {,10,6,0,2,5,1,0,0,0,17,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1240,                    return -0.0;,0,0,0,0,0,1,0,0,0,1,12,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1243,                if (y > 0 && y == yi && (yi & 1) == 1) {,8,6,0,2,5,0,0,0,0,14,40,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1244,                    return -0.0;,14,2,0,0,0,2,0,0,0,19,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1248,            if (y < 0) {,8,2,0,1,3,0,0,0,0,10,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1249,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1251,            if (y > 0) {,6,1,0,1,3,0,2,0,0,9,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1252,                return 0.0;,2,1,0,0,0,1,0,0,0,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1255,            return Double.NaN;,8,1,0,0,0,1,0,0,0,9,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1258,        if (x == Double.POSITIVE_INFINITY) {,8,1,0,1,3,0,0,0,0,9,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1259,            if (y != y) { // y is NaN,18,4,0,1,3,0,0,0,0,24,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1260,                return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1262,            if (y < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1263,                return 0.0;,4,0,0,0,0,1,0,0,0,5,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1265,                return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,2,0,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1269,        if (y == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1270,            if (x * x == 1.0),0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1271,              return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1273,            if (x * x > 1.0) {,4,2,0,1,3,0,0,0,0,6,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1274,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1276,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1280,        if (x == Double.NEGATIVE_INFINITY) {,24,4,0,1,3,0,0,0,0,29,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1281,            if (y != y) { // y is NaN,0,0,0,1,3,0,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1282,                return y;,2,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1285,            if (y < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1286,                long yi = (long) y;,10,1,0,1,2,0,0,0,0,11,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1287,                if (y == yi && (yi & 1) == 1) {,0,0,0,2,5,0,0,0,0,7,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1288,                    return -0.0;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1291,                return 0.0;,8,1,0,0,0,1,0,0,0,10,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1294,            if (y > 0)  {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1295,                long yi = (long) y;,10,1,0,1,2,0,0,0,0,12,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1296,                if (y == yi && (yi & 1) == 1) {,0,0,0,2,5,0,0,0,0,7,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1297,                    return Double.NEGATIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1300,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1304,        if (y == Double.NEGATIVE_INFINITY) {,8,1,0,1,3,0,0,0,0,10,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1306,            if (x * x == 1.0) {,4,2,0,1,3,0,0,0,0,6,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1307,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1310,            if (x * x < 1.0) {,4,2,0,1,3,0,0,0,0,6,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1311,                return Double.POSITIVE_INFINITY;,6,0,0,0,0,1,0,0,0,6,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1313,                return 0.0;,4,1,1,0,0,1,0,0,0,10,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1318,        if (x < 0) {,6,2,0,1,3,0,0,0,0,9,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1320,            if (y >= 4503599627370496.0 || y <= -4503599627370496.0) {,10,5,0,1,3,0,0,0,0,17,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1321,"                return pow(-x, y);",2,0,0,1,2,1,4,0,0,7,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1324,            if (y == (long) y) {,4,1,0,2,5,0,0,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1326,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",0,0,0,4,8,1,0,0,0,13,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1328,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1335,        if (y < 8e298 && y > -8e298) {,4,3,0,1,3,0,0,0,0,8,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1336,            double tmp1 = y * 1073741824.0;,4,1,0,0,0,0,0,0,0,5,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1337,            ya = y + tmp1 - tmp1;,8,2,0,0,0,0,0,0,0,11,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1338,            yb = y - ya;,6,1,0,0,0,0,0,0,0,8,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1339,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1340,            double tmp1 = y * 9.31322574615478515625E-10;,4,1,0,0,0,0,0,0,0,5,45,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1341,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,4,1,0,0,0,0,0,0,0,5,48,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1342,            ya = (tmp1 + tmp2 - tmp1) * 1073741824.0 * 1073741824.0;,0,0,0,1,2,0,0,0,0,3,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1343,            yb = y - ya;,6,1,0,0,0,0,0,0,0,8,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1347,"        log(x, lns);",0,0,0,1,2,0,6,0,0,6,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1348,        double lna = lns[0];,24,9,1,1,2,0,0,0,0,36,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1349,        double lnb = lns[1];,2,0,1,1,2,0,0,0,0,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1352,        double tmp1 = lna * 1073741824.0;,4,1,0,0,0,0,0,0,0,5,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1353,        double tmp2 = lna + tmp1 - tmp1;,18,5,0,0,0,1,6,0,0,30,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1354,        lnb += lna - tmp2;,12,2,0,0,0,0,0,0,0,15,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1355,        lna = tmp2;,14,2,0,0,0,0,0,0,0,19,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1358,        final double aa = lna * ya;,0,0,1,0,0,0,0,0,0,3,27,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1359,        final double ab = lna * yb + lnb * ya + lnb * yb;,14,5,0,0,0,1,0,0,0,20,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1361,        lna = aa+ab;,6,1,0,0,0,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1362,        lnb = -(lna - aa - ab);,8,1,0,1,2,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1364,        double z = 1.0 / 120.0;,2,1,0,0,0,0,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1365,        z = z * lnb + (1.0 / 24.0);,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1366,        z = z * lnb + (1.0 / 6.0);,10,3,0,1,2,0,0,0,0,15,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1367,        z = z * lnb + 0.5;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1368,        z = z * lnb + 1.0;,6,2,0,0,0,0,0,0,0,9,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1369,        z = z * lnb;,6,1,0,0,0,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1371,"        final double result = exp(lna, z, null);",2,0,0,1,2,1,6,0,0,10,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1373,        return result;,4,0,0,0,0,1,0,0,0,4,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1628,        double x2 = x*x;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1630,        double p = 2.7553817452272217E-6;,2,0,0,0,0,0,0,0,0,2,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1631,        p = p * x2 + -1.9841269659586505E-4;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1632,        p = p * x2 + 0.008333333333329196;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1633,        p = p * x2 + -0.16666666666666666;,12,4,0,0,0,1,4,0,0,24,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1636,        p = p * x2 * x;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1638,        return p;,30,9,0,0,0,1,0,0,0,40,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1648,        double x2 = x*x;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1650,        double p = 2.479773539153719E-5;,2,0,0,0,0,0,0,0,0,2,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1651,        p = p * x2 + -0.0013888888689039883;,6,2,0,0,0,0,0,0,0,10,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1652,        p = p * x2 + 0.041666666666621166;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1653,        p = p * x2 + -0.49999999999999994;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1654,        p *= x2;,10,0,0,0,0,0,6,0,0,18,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1656,        return p;,6,2,0,0,0,1,0,0,0,8,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1667,        int idx = (int) ((xa * 8.0) + 0.5);,4,2,0,3,6,0,0,0,0,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1668,        final double epsilon = xa - EIGHTHES[idx]; //idx*0.125;,18,6,1,1,2,1,12,0,0,41,55,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1671,        final double sintA = SINE_TABLE_A[idx];,2,0,1,1,2,1,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1672,        final double sintB = SINE_TABLE_B[idx];,2,0,1,1,2,1,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1673,        final double costA = COSINE_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1674,        final double costB = COSINE_TABLE_B[idx];,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1677,        double sinEpsA = epsilon;,4,0,0,0,0,0,0,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1678,        double sinEpsB = polySine(epsilon);,2,0,0,1,2,0,4,0,0,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1679,        final double cosEpsA = 1.0;,10,1,1,0,0,1,0,0,0,18,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1680,        final double cosEpsB = polyCosine(epsilon);,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1683,        final double temp = sinEpsA * 1073741824.0;,16,3,0,0,0,1,0,0,0,22,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1684,        double temp2 = (sinEpsA + temp) - temp;,2,0,0,1,2,1,6,0,0,9,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1685,        sinEpsB +=  sinEpsA - temp2;,14,2,0,0,0,0,0,0,0,18,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1686,        sinEpsA = temp2;,6,0,0,0,0,0,0,0,0,7,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1712,        double a = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1713,        double b = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1715,        double t = sintA;,4,0,0,0,0,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1716,        double c = a + t;,4,0,0,0,0,0,0,2,0,6,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1717,        double d = -(c - a - t);,8,1,0,1,2,0,0,0,0,10,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1718,        a = c;,4,1,0,0,0,0,0,2,0,8,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1719,        b = b + d;,8,1,0,0,0,0,0,0,0,11,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1721,        t = costA * sinEpsA;,6,1,0,0,0,0,0,0,0,8,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1722,        c = a + t;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1723,        d = -(c - a - t);,0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1724,        a = c;,4,1,0,0,0,0,0,0,0,5,6,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1725,        b = b + d;,0,0,0,0,0,0,6,0,0,6,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1727,        b = b + sintA * cosEpsB + costA * sinEpsB;,0,0,0,0,0,0,0,0,0,0,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1742,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,8,2,0,0,0,0,0,0,0,11,68,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1769,        if (xb != 0.0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1770,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,10,5,0,2,5,0,0,0,0,16,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1772,            c = a + t;,6,1,0,0,0,0,0,0,0,8,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1773,            d = -(c - a - t);,0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1774,            a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1775,            b = b + d;,10,1,0,0,0,0,0,0,0,13,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1778,        result = a + b;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1780,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1791,        final double pi2a = 1.5707963267948966;,2,0,0,0,0,1,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1792,        final double pi2b = 6.123233995736766E-17;,0,0,0,0,0,0,0,0,0,0,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1794,        final double a = pi2a - xa;,6,1,0,0,0,1,4,0,0,12,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1795,        double b = -(a - pi2a + xa);,16,4,0,1,2,0,0,0,0,21,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1796,        b += pi2b - xb;,10,1,0,0,0,0,0,0,0,12,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1798,"        return sinQ(a, b);",0,0,0,1,2,1,6,0,0,6,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1811,        int idx = (int) ((xa * 8.0) + 0.5);,0,0,0,3,6,0,0,0,0,9,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1812,        final double epsilon = xa - EIGHTHES[idx]; //idx*0.125;,4,1,1,1,2,1,0,0,0,10,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1815,        final double sintA = SINE_TABLE_A[idx];,4,1,1,1,2,1,0,0,0,10,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1816,        final double sintB = SINE_TABLE_B[idx];,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1817,        final double costA = COSINE_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1818,        final double costB = COSINE_TABLE_B[idx];,2,0,1,1,2,1,0,0,0,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1821,        double sinEpsA = epsilon;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1822,        double sinEpsB = polySine(epsilon);,10,2,1,1,2,0,4,0,0,21,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1823,        final double cosEpsA = 1.0;,2,0,0,0,0,1,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1824,        final double cosEpsB = polyCosine(epsilon);,4,0,0,1,2,0,0,0,0,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1827,        double temp = sinEpsA * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1828,        double temp2 = (sinEpsA + temp) - temp;,8,2,0,1,2,0,0,0,0,10,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1829,        sinEpsB +=  sinEpsA - temp2;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1830,        sinEpsA = temp2;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1855,        double a = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1856,        double b = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1859,        double t = sintA;,4,0,0,0,0,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1860,        double c = a + t;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1861,        double d = -(c - a - t);,8,1,0,1,2,0,0,0,0,10,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1862,        a = c;,2,2,0,0,0,0,4,0,0,8,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1863,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1865,        t = costA*sinEpsA;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1866,        c = a + t;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1867,        d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1868,        a = c;,8,0,0,0,0,0,0,0,0,10,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1869,        b = b + d;,12,2,0,0,0,0,0,0,0,16,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1871,        b = b + sintA*cosEpsB + costA*sinEpsB;,12,4,0,0,0,0,0,0,0,17,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1872,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,24,6,0,0,0,1,0,0,0,32,62,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1874,        double sina = a + b;,8,2,0,0,0,0,0,0,0,10,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1875,        double sinb = -(sina - a - b);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1879,        a = b = c = d = 0.0;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1881,        t = costA*cosEpsA;,28,10,0,0,0,0,0,0,0,40,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1882,        c = a + t;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1883,        d = -(c - a - t);,0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1884,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1885,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1887,        t = -sintA*sinEpsA;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1888,        c = a + t;,0,0,0,0,0,0,4,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1889,        d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1890,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1891,        b = b + d;,0,0,1,0,0,0,0,0,0,10,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1893,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,0,0,0,0,0,0,0,0,0,0,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1894,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,18,6,0,1,2,0,0,0,0,25,56,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1896,        double cosa = a + b;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1897,        double cosb = -(cosa - a - b);,8,2,0,1,2,0,0,0,0,11,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1899,        if (cotanFlag) {,2,0,0,1,3,0,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1901,            tmp = cosa; cosa = sina; sina = tmp;,12,0,0,0,0,0,0,0,0,15,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1902,            tmp = cosb; cosb = sinb; sinb = tmp;,12,0,0,0,0,0,0,0,0,15,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1916,        double est = sina/cosa;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1919,        temp = est * 1073741824.0;,4,1,0,0,0,0,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1920,        double esta = (est + temp) - temp;,14,5,0,1,2,0,0,0,0,19,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1921,        double estb =  est - esta;,0,0,0,0,0,0,0,0,0,0,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1923,        temp = cosa * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1924,        double cosaa = (cosa + temp) - temp;,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1925,        double cosab =  cosa - cosaa;,6,1,0,0,0,0,0,0,0,7,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1928,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,22,9,0,1,2,0,0,0,0,31,114,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1929,        err += sinb/cosa;                     // Change in est due to sinb,24,4,0,0,0,1,4,2,0,38,66,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1930,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,10,3,0,0,0,0,0,0,0,15,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1932,        if (xb != 0.0) {,4,0,0,1,3,0,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1935,            double xbadj = xb + est*est*xb;,20,3,0,0,0,0,0,0,0,25,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1936,            if (cotanFlag) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1937,                xbadj = -xbadj;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1940,            err += xbadj;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1943,        return est+err;,10,4,0,0,0,1,10,0,0,24,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1960,        long inbits = Double.doubleToLongBits(x);,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1961,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,16,7,0,3,6,0,0,0,0,23,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1964,        inbits &= 0x000fffffffffffffL;,10,2,0,0,0,0,0,0,0,14,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1965,        inbits |= 0x0010000000000000L;,6,0,0,0,0,0,0,0,0,9,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1968,        exponent++;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1969,        inbits <<= 11;,2,0,0,0,0,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1975,        int idx = exponent >> 6;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1976,        int shift = exponent - (idx << 6);,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1978,        if (shift != 0) {,2,1,0,1,3,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1979,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,0,0,0,3,6,0,0,0,0,9,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1980,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,6,2,1,2,4,1,8,2,0,24,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1981,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,0,1,1,5,10,0,6,0,0,16,70,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1982,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,0,0,0,5,10,0,0,0,0,15,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1984,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,6,2,1,2,4,0,0,0,0,11,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1985,            shpiA = RECIP_2PI[idx];,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1986,            shpiB = RECIP_2PI[idx+1];,0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1990,        long a = inbits >>> 32;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1991,        long b = inbits & 0xffffffffL;,4,0,1,0,0,0,0,0,0,8,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1993,        long c = shpiA >>> 32;,6,1,0,0,0,0,0,0,0,7,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1994,        long d = shpiA & 0xffffffffL;,8,1,0,0,0,0,0,0,0,10,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1996,        long ac = a * c;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1997,        long bd = b * d;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1998,        long bc = b * c;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1999,        long ad = a * d;,4,1,0,0,0,0,8,0,0,14,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2001,        long prodB = bd + (ad << 32);,10,3,0,1,2,0,0,0,0,14,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2002,        long prodA = ac + (ad >>> 32);,6,2,0,1,2,0,0,0,0,8,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2004,        boolean bita = (bd & 0x8000000000000000L) != 0;,10,3,0,1,2,0,0,0,0,14,47,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2005,        boolean bitb = (ad & 0x80000000L ) != 0;,4,2,0,1,2,0,0,0,0,6,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2006,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2009,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2011,            prodA++;,14,2,0,0,0,0,0,0,0,19,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2014,        bita = (prodB & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2015,        bitb = (bc & 0x80000000L ) != 0;,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2017,        prodB = prodB + (bc << 32);,6,2,0,1,2,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2018,        prodA = prodA + (bc >>> 32);,6,2,0,1,2,0,0,0,0,9,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2020,        bitsum = (prodB & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2023,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2025,            prodA++;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2029,        c = shpiB >>> 32;,8,1,0,0,0,0,0,0,0,11,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2030,        d = shpiB & 0xffffffffL;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2031,        ac = a * c;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2032,        bc = b * c;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2033,        ad = a * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2036,        ac = ac + ((bc + ad) >>> 32);,16,6,1,2,4,0,0,0,0,26,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2038,        bita = (prodB & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2039,        bitb = (ac & 0x8000000000000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2040,        prodB += ac;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2041,        bitsum = (prodB & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2043,        if ( (bita && bitb) ||,10,3,0,1,3,0,0,0,0,14,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2045,            prodA++;,4,2,0,0,0,0,0,0,0,7,8,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2049,        c = shpi0 >>> 32;,4,1,0,0,0,0,0,0,0,6,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2050,        d = shpi0 & 0xffffffffL;,8,2,0,0,0,0,2,2,0,17,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2052,        bd = b * d;,4,0,0,0,0,0,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2053,        bc = b * c;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2054,        ad = a * d;,0,0,0,0,0,0,6,0,0,6,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2056,        prodA += bd + ((bc + ad) << 32);,8,3,0,2,4,0,0,0,0,12,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2068,        int intPart = (int)(prodA >>> 62);,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2071,        prodA <<= 2;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2072,        prodA |= prodB >>> 62;,4,1,0,0,0,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2073,        prodB <<= 2;,2,0,0,0,0,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2076,        a = prodA >>> 32;,4,1,0,0,0,0,0,0,0,6,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2077,        b = prodA & 0xffffffffL;,0,0,0,0,0,0,2,0,0,2,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2079,        c = PI_O_4_BITS[0] >>> 32;,2,1,1,1,2,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2080,        d = PI_O_4_BITS[0] & 0xffffffffL;,6,3,1,1,2,0,0,0,0,13,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2082,        ac = a * c;,8,2,0,0,0,0,2,0,0,15,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2083,        bd = b * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2084,        bc = b * c;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2085,        ad = a * d;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2087,        long prod2B = bd + (ad << 32);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2088,        long prod2A = ac + (ad >>> 32);,6,2,0,1,2,0,0,0,0,8,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2090,        bita = (bd & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2091,        bitb = (ad & 0x80000000L ) != 0;,8,3,0,1,2,0,0,0,0,12,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2092,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2095,        if ( (bita && bitb) ||,12,8,0,1,3,0,0,0,0,20,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2097,            prod2A++;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2100,        bita = (prod2B & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2101,        bitb = (bc & 0x80000000L ) != 0;,6,2,0,1,2,1,0,0,0,10,32,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2103,        prod2B = prod2B + (bc << 32);,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2104,        prod2A = prod2A + (bc >>> 32);,2,0,0,1,2,0,0,0,0,2,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2106,        bitsum = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2109,        if ( (bita && bitb) ||,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2111,            prod2A++;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2115,        c = PI_O_4_BITS[1] >>> 32;,2,1,1,1,2,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2116,        d = PI_O_4_BITS[1] & 0xffffffffL;,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2117,        ac = a * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2118,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2119,        ad = a * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2122,        ac = ac + ((bc + ad) >>> 32);,14,6,0,2,4,0,8,0,0,29,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2124,        bita = (prod2B & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2125,        bitb = (ac & 0x8000000000000000L ) != 0;,10,4,1,1,2,0,6,0,0,27,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2126,        prod2B += ac;,6,1,0,0,0,0,0,0,0,8,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2127,        bitsum = (prod2B & 0x8000000000000000L) != 0;,6,3,0,1,2,0,0,0,0,10,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2129,        if ( (bita && bitb) ||,12,3,0,1,3,0,0,0,0,17,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2131,            prod2A++;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2135,        a = prodB >>> 32;,4,1,0,0,0,0,0,0,0,6,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2136,        b = prodB & 0xffffffffL;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2137,        c = PI_O_4_BITS[0] >>> 32;,4,1,1,1,2,0,0,0,0,8,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2138,        d = PI_O_4_BITS[0] & 0xffffffffL;,2,1,1,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2139,        ac = a * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2140,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2141,        ad = a * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2144,        ac = ac + ((bc + ad) >>> 32);,8,3,0,2,4,0,0,0,0,12,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2146,        bita = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2147,        bitb = (ac & 0x8000000000000000L ) != 0;,6,2,0,1,2,0,6,0,0,15,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2148,        prod2B += ac;,4,0,0,0,0,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2149,        bitsum = (prod2B & 0x8000000000000000L) != 0;,4,3,1,1,2,0,14,0,0,26,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2151,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2153,            prod2A++;,6,1,0,0,0,0,0,0,0,9,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2157,        double tmpA = (prod2A >>> 12) / 4503599627370496.0;  // High order 52 bits,6,2,0,1,2,0,0,0,0,9,74,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2158,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / 4503599627370496.0 / 4503599627370496.0; // Low bits,6,5,0,4,8,0,0,0,0,11,114,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2160,        double sumA = tmpA + tmpB;,6,1,0,0,0,0,0,0,0,7,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2161,        double sumB = -(sumA - tmpA - tmpB);,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2164,        result[0] = intPart;,8,0,0,1,2,0,4,0,0,12,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2165,        result[1] = sumA * 2.0;,2,1,1,1,2,0,0,0,0,6,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2166,        result[2] = sumB * 2.0;,2,0,0,1,2,0,0,0,0,3,23,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2167,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2175,        boolean negative = false;,2,0,0,0,0,0,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2176,        int quadrant = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2178,        double xb = 0.0;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2181,        xa = x;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2182,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2183,            negative = true;,2,0,0,0,0,0,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2184,            xa = -xa;,6,0,0,0,0,0,0,0,0,8,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2188,        if (xa == 0.0) {,6,1,0,1,3,0,0,0,0,8,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2189,            long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2190,            if (bits < 0) {,2,1,0,1,3,0,0,0,0,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2191,                return -0.0;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2193,            return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2196,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,0,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2197,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2201,        if (xa > 3294198.0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2205,            double reduceResults[] = new double[3];,2,0,0,2,4,0,6,0,0,8,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2206,"            reducePayneHanek(xa, reduceResults);",0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2207,            quadrant = ((int) reduceResults[0]) & 3;,4,2,1,3,6,0,4,0,0,20,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2208,            xa = reduceResults[1];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2209,            xb = reduceResults[2];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2210,        } else if (xa > 1.5707963267948966) {,0,0,0,1,4,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2215,            int k = (int)(xa * 0.6366197723675814);,10,1,0,2,4,1,0,4,0,16,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2221,                double a = -k * 1.570796251296997;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2222,                remA = xa + a;,6,1,0,0,0,0,0,0,0,8,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2223,                remB = -(remA - xa - a);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2225,                a = -k * 7.549789948768648E-8;,4,1,0,0,0,0,0,0,0,7,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2226,                double b = remA;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2227,                remA = a + b;,14,3,0,0,0,0,0,0,0,19,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2228,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2230,                a = -k * 6.123233995736766E-17;,4,1,0,0,0,0,0,0,0,7,31,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2231,                b = remA;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2232,                remA = a + b;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2233,                remB += -(remA - b - a);,10,2,0,1,2,0,0,0,0,14,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2235,                if (remA > 0.0),0,0,0,1,2,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2236,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2241,                k--;,6,2,0,0,0,0,4,0,0,13,4,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2242,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2243,            quadrant = k & 3;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2244,            xa = remA;,10,1,0,0,0,0,0,0,0,12,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2245,            xb = remB;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2248,        if (negative) {,4,0,0,1,3,0,4,0,0,9,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2249,            quadrant ^= 2;  // Flip bit 1,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2252,        switch (quadrant) {,4,1,0,1,3,0,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2254,"                return sinQ(xa, xb);",12,2,0,1,2,1,0,0,0,16,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2256,"                return cosQ(xa, xb);",0,0,0,1,2,1,6,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2258,"                return -sinQ(xa, xb);",0,0,0,1,2,1,6,0,0,7,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2260,"                return -cosQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2262,                return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2272,        int quadrant = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2275,        double xa = x;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2276,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2277,            xa = -xa;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2280,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,0,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2281,            return Double.NaN;,8,0,0,0,0,1,0,0,0,10,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2285,        double xb = 0;,4,0,0,0,0,0,0,0,0,5,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2286,        if (xa > 3294198.0) {,6,1,0,1,3,0,0,0,0,9,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2290,            double reduceResults[] = new double[3];,0,0,0,2,4,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2291,"            reducePayneHanek(xa, reduceResults);",16,5,0,1,2,0,14,0,0,35,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2292,            quadrant = ((int) reduceResults[0]) & 3;,2,1,1,3,6,0,0,0,0,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2293,            xa = reduceResults[1];,4,1,1,1,2,0,0,0,0,9,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2294,            xb = reduceResults[2];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2295,        } else if (xa > 1.5707963267948966) {,2,1,0,1,4,0,0,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2300,            int k = (int)(xa * 0.6366197723675814);,0,0,0,2,4,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2306,                double a = -k * 1.570796251296997;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2307,                remA = xa + a;,18,2,0,0,0,0,0,0,0,23,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2308,                remB = -(remA - xa - a);,12,4,0,1,2,0,0,0,0,18,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2310,                a = -k * 7.549789948768648E-8;,4,1,0,0,0,0,12,0,0,19,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2311,                double b = remA;,4,0,0,0,0,0,0,0,0,4,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2312,                remA = a + b;,12,6,0,0,0,0,0,0,0,19,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2313,                remB += -(remA - b - a);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2315,                a = -k * 6.123233995736766E-17;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2316,                b = remA;,4,0,0,0,0,0,0,0,0,5,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2317,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2318,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2320,                if (remA > 0.0),0,0,0,1,2,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2321,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
