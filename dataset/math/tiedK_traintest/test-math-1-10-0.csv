dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,other,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,1,53,"        super(LocalizedFormats.FRACTION_CONVERSION_OVERFLOW, value, p, q);",5,0,0,0,2,1,0,0,1,4,66,3,1.33333,0,0
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,1,54,    },0,0,0,0,1,0,0,0,0,1,1,2,1.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,193,        return inverseCumulativeProbability(random.nextDouble());,0,0,0,2,4,1,3,0,1,5,57,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,86,        final int indexRm1 = iRm1[index];,1,0,1,0,2,2,0,0,1,5,33,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,87,        final int indexRm2 = iRm2[index];,1,0,1,0,2,2,0,0,1,5,33,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,89,        final int v0       = v[index];,1,0,1,0,2,2,0,0,1,5,30,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,90,        final int vM1      = v[i1[index]];,1,0,1,0,4,2,0,0,1,5,34,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,91,        final int vM2      = v[i2[index]];,1,0,1,0,4,2,0,0,1,5,34,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,92,        final int vM3      = v[i3[index]];,1,0,1,0,4,2,0,0,1,5,34,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,94,        final int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);,1,3,1,1,8,2,0,0,1,7,71,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,95,        final int z1 = (v0 ^ (v0 << 25))  ^ (vM1 ^ (vM1 >>> 27));,5,5,0,2,8,2,0,0,1,6,57,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,96,        final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));,4,4,0,2,6,2,0,0,1,6,49,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,97,        final int z3 = z1      ^ z2;,3,1,0,0,0,2,0,0,1,4,28,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,98,        int z4 = z0 ^ (z1 ^ (z1 << 9)) ^ (z2 ^ (z2 << 21)) ^ (z3 ^ (z3 >>> 21));,8,7,0,2,12,1,0,0,0,5,72,5,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,100,        v[index]     = z3;,1,0,1,0,2,0,0,0,1,4,18,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,101,        v[indexRm1]  = z4;,1,0,1,0,2,0,0,0,1,4,18,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,102,        v[indexRm2] &= 0x80000000;,0,0,1,0,2,0,0,0,1,3,26,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,103,        index        = indexRm1;,2,0,0,0,0,0,0,0,1,2,24,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,108,        z4 = z4 ^ ((z4 <<  7) & 0xe46e1700);,3,3,0,2,4,0,0,0,1,5,36,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,109,        z4 = z4 ^ ((z4 << 15) & 0x9b868000);,3,3,0,2,4,0,0,0,1,5,36,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,111,        return z4 >>> (32 - bits);,2,2,0,1,2,1,0,0,0,5,26,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,90,        final long high = ((long) next(26)) << 26;,1,1,0,2,6,3,1,0,2,7,42,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,91,        final int  low  = next(26);,1,0,0,1,2,2,1,0,2,6,27,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,92,        return (high | low) * 0x1.0p-52d;,2,2,0,1,2,1,0,0,0,5,33,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,816,        final int len = a.length;,3,0,0,0,0,2,0,0,1,3,25,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,817,        if (len != b.length) {,3,1,0,1,3,1,0,0,0,5,22,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,823,        final double[] prodHigh = new double[len];,1,0,1,0,4,4,0,0,1,5,42,4,0.09091,1,1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,824,        double prodLowSum = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.09091,1,1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,826,        for (int i = 0; i < len; i++) {,4,1,0,1,3,2,0,0,1,6,31,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,827,            final double ai = a[i];,1,0,1,0,2,2,0,0,1,5,23,6,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,828,            final double ca = SPLIT_FACTOR * ai;,3,1,0,0,0,2,0,0,1,4,36,6,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,829,            final double aHigh = ca - (ca - ai);,4,2,0,1,2,2,0,0,1,6,36,6,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,830,            final double aLow = ai - aHigh;,3,1,0,0,0,2,0,0,1,4,31,6,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,832,            final double bi = b[i];,1,0,1,0,2,2,0,0,1,5,23,6,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,833,            final double cb = SPLIT_FACTOR * bi;,3,1,0,0,0,2,0,0,1,4,36,6,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,834,            final double bHigh = cb - (cb - bi);,4,2,0,1,2,2,0,0,1,6,36,6,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,835,            final double bLow = bi - bHigh;,3,1,0,0,0,2,0,0,1,4,31,6,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,836,            prodHigh[i] = ai * bi;,2,1,1,0,2,0,0,0,1,5,22,6,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,837,            final double prodLow = aLow * bLow - (((prodHigh[i] -,3,5,1,0,5,2,0,0,1,6,53,6,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,841,            prodLowSum += prodLow;,2,0,0,0,0,0,0,0,1,2,22,6,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,845,        final double prodHighCur = prodHigh[0];,1,0,1,0,2,2,0,0,1,5,39,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,846,        double prodHighNext = prodHigh[1];,1,0,1,0,2,1,0,0,0,4,34,5,0.09091,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,113,        Line line1 = (Line) getHyperplane();,1,0,0,1,4,0,1,2,1,6,36,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,114,        Line line2 = (Line) subLine.getHyperplane();,1,0,0,1,4,0,2,2,0,5,44,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,117,        Vector2D v2D = line1.intersection(line2);,1,0,0,1,2,0,3,1,0,5,41,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,120,        Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));,1,0,0,2,6,0,5,1,1,6,71,4,0.14286,1,1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,56,"        this(new Line(start, end), buildIntervalSet(start, end));",2,0,0,0,6,2,3,1,2,6,57,4,0.14286,1,1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,57,    },0,0,0,0,1,0,0,0,0,1,1,2,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,113,        Vector3D v1D = line.intersection(subLine.line);,3,0,0,1,2,0,2,1,0,5,47,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,116,        Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));,1,0,0,2,4,0,5,1,0,5,65,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,156,        return distance(p) < 1.0e-10;,0,1,0,1,2,1,2,0,1,6,29,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,164,        final Vector3D d = p.subtract(zero);,1,0,0,1,2,1,3,1,1,7,36,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,165,"        final Vector3D n = new Vector3D(1.0, d, -d.dotProduct(direction), direction);",3,0,0,1,4,2,3,2,3,7,77,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,166,        return n.getNorm();,0,0,0,1,2,1,2,0,0,4,19,5,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,195,        final double cos = direction.dotProduct(line.direction);,3,0,0,1,2,2,2,0,1,6,56,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,196,        final double n = 1 - cos * cos;,3,2,0,0,0,2,0,0,1,4,31,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,197,        if (n < Precision.EPSILON) {,3,1,0,1,3,1,0,0,0,5,28,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,202,        final Vector3D delta0 = line.zero.subtract(zero);,3,0,0,1,2,1,2,1,1,7,49,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,203,        final double a        = delta0.dotProduct(direction);,1,0,0,1,2,2,3,0,1,6,53,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,204,        final double b        = delta0.dotProduct(line.direction);,3,0,0,1,2,2,2,0,1,6,58,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,206,"        return new Vector3D(1, zero, (a - b * cos) / n, direction);",6,3,0,1,4,2,0,1,1,7,59,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,216,        final Vector3D closest = closestPoint(line);,1,0,0,1,2,1,2,1,2,7,44,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,217,        return line.contains(closest) ? closest : null;,1,0,0,1,2,1,3,0,0,5,47,5,0.14286,0,0
defect4j,math,org/apache/commons/math3/complex/Complex,5,304,        if (real == 0.0 && imaginary == 0.0) {,2,3,0,1,3,1,0,0,0,5,38,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,451,                if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) {,4,1,0,2,5,1,0,0,1,6,62,9,21.33333,1,1
defect4j,math,org/apache/commons/math3/util/FastMath,7,3367,        y += 1.0;,1,0,0,0,0,0,0,0,1,2,9,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,7,3369,        if (y == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,7,3373,        return y;,1,0,0,0,0,1,0,0,0,2,9,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,351,"                    handler.handleStep(interpolator, isLastStep);",0,0,0,0,2,0,4,0,0,2,45,9,0.11111,0,0
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,352,                },0,0,0,0,1,0,0,0,0,1,1,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,218,                switch (allowed) {,1,0,0,1,3,1,0,0,0,4,18,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,224,                    return xB;,1,0,0,0,0,1,0,0,0,2,10,9,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,239,                final int p = agingA - MAXIMAL_AGING;,3,1,0,0,0,2,0,0,1,4,37,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,240,                final double weightA = (1 << p) - 1;,2,2,0,1,2,2,0,0,1,6,36,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,241,                final double weightB = p + 1;,2,1,0,0,0,2,0,0,1,4,29,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,242,                targetY = (weightA * yA - weightB * REDUCTION_FACTOR * yB) / (weightA + weightB);,8,5,0,1,4,0,0,0,1,5,81,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,243,            } else if (agingB >= MAXIMAL_AGING) {,2,1,0,1,4,2,0,0,0,5,37,7,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,342,                xA = nextX;,2,0,0,0,0,0,0,0,1,2,11,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,343,                yA = nextY;,2,0,0,0,0,0,0,0,1,2,11,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,344,                absYA = FastMath.abs(yA);,1,0,0,1,2,0,3,0,1,5,25,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,345,                agingA = 0;,1,0,0,0,0,0,0,0,1,2,11,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,346,                ++agingB;,1,0,0,0,0,0,0,0,1,2,9,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,349,                signChangeIndex++;,1,0,0,0,0,0,0,0,1,2,18,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,218,                switch (allowed) {,1,0,0,1,3,1,0,0,0,4,18,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,157,        final double randomValue = random.nextDouble();,1,0,0,1,2,2,2,0,1,6,47,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,158,        double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,160,        for (int i = 0; i < probabilities.length; i++) {,5,1,0,1,3,2,0,0,1,6,48,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,161,            sum += probabilities[i];,1,0,1,0,2,0,0,0,1,4,24,6,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,162,            if (randomValue < sum) {,2,1,0,1,3,1,0,0,0,5,24,6,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,163,                return singletons.get(i);,0,0,0,1,2,1,3,0,0,4,25,9,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,86,        final int indexRm1 = iRm1[index];,1,0,1,0,2,2,0,0,1,5,33,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,87,        final int indexRm2 = iRm2[index];,1,0,1,0,2,2,0,0,1,5,33,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,89,        final int v0       = v[index];,1,0,1,0,2,2,0,0,1,5,30,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,90,        final int vM1      = v[i1[index]];,1,0,1,0,4,2,0,0,1,5,34,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,91,        final int vM2      = v[i2[index]];,1,0,1,0,4,2,0,0,1,5,34,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,92,        final int vM3      = v[i3[index]];,1,0,1,0,4,2,0,0,1,5,34,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,94,        final int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);,1,3,1,1,8,2,0,0,1,7,71,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,95,        final int z1 = (v0 ^ (v0 << 25))  ^ (vM1 ^ (vM1 >>> 27));,5,5,0,2,8,2,0,0,1,6,57,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,96,        final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));,4,4,0,2,6,2,0,0,1,6,49,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,97,        final int z3 = z1      ^ z2;,3,1,0,0,0,2,0,0,1,4,28,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,98,        int z4 = z0 ^ (z1 ^ (z1 << 9)) ^ (z2 ^ (z2 << 21)) ^ (z3 ^ (z3 >>> 21));,8,7,0,2,12,1,0,0,0,5,72,5,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,100,        v[index]     = z3;,1,0,1,0,2,0,0,0,1,4,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,101,        v[indexRm1]  = z4;,1,0,1,0,2,0,0,0,1,4,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,102,        v[indexRm2] &= 0x80000000;,0,0,1,0,2,0,0,0,1,3,26,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,103,        index        = indexRm1;,2,0,0,0,0,0,0,0,1,2,24,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,108,        z4 = z4 ^ ((z4 <<  7) & 0xe46e1700);,3,3,0,2,4,0,0,0,1,5,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,109,        z4 = z4 ^ ((z4 << 15) & 0x9b868000);,3,3,0,2,4,0,0,0,1,5,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,111,        return z4 >>> (32 - bits);,2,2,0,1,2,1,0,0,0,5,26,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,90,        final long high = ((long) next(26)) << 26;,1,1,0,2,6,3,1,0,2,7,42,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,91,        final int  low  = next(26);,1,0,0,1,2,2,1,0,2,6,27,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,92,        return (high | low) * 0x1.0p-52d;,2,2,0,1,2,1,0,0,0,5,33,4,0.5,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,95,        return direction;,1,0,0,0,0,1,0,0,0,2,17,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2477,            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,3,5,1,2,10,2,0,0,1,7,91,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2479,            ya = epsA * denom;,3,1,0,0,0,0,0,0,1,3,18,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2480,            yb = epsB * denom;,3,1,0,0,0,0,0,0,1,3,18,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2481,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1387,        double[] tmp1 = new double[getSize()];,1,0,0,1,6,3,1,0,1,6,38,5,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1388,"        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2",0,0,0,0,2,0,6,0,1,3,54,4,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1389,        double[] tmp2 = new double[getSize()];,1,0,0,1,6,3,1,0,1,6,38,5,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1390,"        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2",0,0,0,0,2,0,6,0,1,3,54,4,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1391,"        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2",0,0,0,0,2,0,4,0,1,3,60,4,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1392,"        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)",0,0,0,1,4,0,3,0,1,4,70,4,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1394,        if (x[xOffset] >= 0) {,0,1,1,1,5,1,0,0,0,5,22,4,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1397,"            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x",0,0,0,0,2,0,5,0,1,3,52,6,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1398,"            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)",0,0,0,1,4,0,5,0,1,4,57,6,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1399,"            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))",0,0,0,2,6,0,3,0,1,4,64,6,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1400,            for (int i = 0; i < tmp2.length; ++i) {,5,1,0,1,3,2,0,0,1,6,39,6,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1401,                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x)),2,2,1,2,8,0,0,0,1,6,64,8,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1420,    },0,0,0,0,1,0,0,0,0,1,1,2,0.5,1,1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,756,        y.compiler.checkCompatibility(x.compiler);,4,0,0,1,2,0,1,0,0,4,42,5,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,757,        final DerivativeStructure result = new DerivativeStructure(y.compiler);,3,0,0,1,2,2,0,2,2,6,71,4,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,758,"        y.compiler.atan2(y.data, 0, x.data, 0, result.data, 0);",8,0,0,0,2,0,1,0,0,3,55,5,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,759,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,178,        final int dim = getDimension();,1,0,0,1,2,2,1,0,2,6,31,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,179,        if (vals.length != dim) {,3,1,0,1,3,1,0,0,0,5,25,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,183,"        return FastMath.pow(2 * FastMath.PI, -dim / 2) *",3,3,0,0,2,1,2,0,1,6,48,4,0.5,1,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,229,        final double[] centered = new double[values.length];,3,0,0,0,4,4,0,0,1,4,52,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,230,        for (int i = 0; i < centered.length; i++) {,5,1,0,1,3,2,0,0,1,6,43,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,231,            centered[i] = values[i] - getMeans()[i];,0,1,1,1,8,0,1,0,2,6,40,6,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,233,        final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered);,1,0,0,1,4,2,3,0,1,6,77,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,234,        double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,235,        for (int i = 0; i < preMultiplied.length; i++) {,5,1,0,1,3,2,0,0,1,6,48,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,236,            sum += preMultiplied[i] * centered[i];,1,1,1,0,4,0,0,0,1,5,38,6,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,238,        return FastMath.exp(-0.5 * sum);,1,1,0,1,2,1,2,0,1,7,32,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,831,"        return exp(x, 0.0, null);",0,0,0,0,2,1,2,0,1,4,25,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,850,        if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,851,            intVal = (int) -x;,2,0,0,1,2,1,0,0,2,5,18,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,853,            if (intVal > 746) {,1,1,0,1,3,1,0,0,0,5,19,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,861,            if (intVal > 709) {,1,1,0,1,3,1,0,0,0,5,19,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,871,            if (intVal == 709) {,1,1,0,1,3,1,0,0,0,5,20,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,881,            intVal++;,1,0,0,0,0,0,0,0,1,2,9,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,883,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,5,1,0,0,2,0,0,0,1,4,71,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,884,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,5,1,0,0,2,0,0,0,1,4,71,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,886,            intVal = -intVal;,2,0,0,0,0,0,0,0,2,2,17,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,888,            intVal = (int) x;,2,0,0,1,2,1,0,0,1,5,17,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,890,            if (intVal > 709) {,1,1,0,1,3,1,0,0,0,5,19,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,898,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,5,1,0,0,2,0,0,0,1,4,71,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,899,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,5,1,0,0,2,0,0,0,1,4,71,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,906,        final int intFrac = (int) ((x - intVal) * 1024.0);,3,2,0,2,6,3,0,0,1,6,50,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,907,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,3,0,1,0,2,2,0,0,1,5,64,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,908,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,3,0,1,0,2,2,0,0,1,5,64,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,914,        final double epsilon = x - (intVal + intFrac / 1024.0);,4,3,0,1,2,2,0,0,1,6,55,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,923,        double z = 0.04168701738764507;,1,0,0,0,0,1,0,0,0,2,31,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,924,        z = z * epsilon + 0.1666666505023083;,3,2,0,0,0,0,0,0,1,3,37,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,925,        z = z * epsilon + 0.5000000000042687;,3,2,0,0,0,0,0,0,1,3,37,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,926,        z = z * epsilon + 1.0;,3,2,0,0,0,0,0,0,1,3,22,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,927,        z = z * epsilon + -3.940510424527919E-20;,3,2,0,0,0,0,0,0,2,3,41,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,934,        double tempA = intPartA * fracPartA;,3,1,0,0,0,1,0,0,0,3,36,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,935,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,7,5,0,0,0,1,0,0,0,3,82,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,941,        final double tempC = tempB + tempA;,3,1,0,0,0,2,0,0,1,4,35,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,943,        if (extra != 0.0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,946,            result = tempC*z + tempB + tempA;,5,3,0,0,0,0,0,0,1,3,33,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,949,        if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,955,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1179,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,3,5,0,1,3,1,0,0,0,5,45,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1246,            double tmp = epsilon * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,36,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1247,            double aa = epsilon + tmp - tmp;,4,2,0,0,0,1,0,0,0,3,32,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1248,            double ab = epsilon - aa;,3,1,0,0,0,1,0,0,0,3,25,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1249,            double xa = aa;,2,0,0,0,0,1,0,0,0,2,15,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1250,            double xb = ab;,2,0,0,0,0,1,0,0,0,2,15,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1253,            final double numer = bits & 0x3ffffffffffL;,2,1,0,0,0,2,0,0,1,4,43,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1254,            final double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,3,2,0,1,2,2,0,0,1,6,65,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1255,            aa = numer - xa*denom - xb * denom;,6,4,0,0,0,0,0,0,1,3,35,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1256,            xb += aa / denom;,3,1,0,0,0,0,0,0,1,3,17,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1259,            final double[] lnCoef_last = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];,3,1,1,0,4,2,0,0,1,6,71,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1260,            double ya = lnCoef_last[0];,1,0,1,0,2,1,0,0,0,4,27,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1261,            double yb = lnCoef_last[1];,1,0,1,0,2,1,0,0,0,4,27,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1263,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,5,2,0,1,3,2,0,0,1,6,55,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1265,                aa = ya * xa;,3,1,0,0,0,0,0,0,1,3,13,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1266,                ab = ya * xb + yb * xa + yb * xb;,7,5,0,0,0,0,0,0,1,3,33,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1268,                tmp = aa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1269,                ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1270,                yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1273,                final double[] lnCoef_i = LN_HI_PREC_COEF[i];,1,0,1,0,4,2,0,0,1,5,45,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1274,                aa = ya + lnCoef_i[0];,2,1,1,0,2,0,0,0,1,5,22,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1275,                ab = yb + lnCoef_i[1];,2,1,1,0,2,0,0,0,1,5,22,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1277,                tmp = aa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1278,                ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1279,                yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1283,            aa = ya * xa;,3,1,0,0,0,0,0,0,1,3,13,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1284,            ab = ya * xb + yb * xa + yb * xb;,7,5,0,0,0,0,0,0,1,3,33,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1292,            lnza = aa + ab;,3,1,0,0,0,0,0,0,1,3,15,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1293,            lnzb = -(lnza - aa - ab);,4,1,0,1,2,0,0,0,2,5,25,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1294,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1348,            hiPrec[0] = a;,1,0,1,0,2,0,0,0,1,4,14,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1349,            hiPrec[1] = b;,1,0,1,0,2,0,0,0,1,4,14,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1443,        final double lns[] = new double[2];,1,0,0,0,4,4,0,0,1,4,35,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1445,        if (y == 0.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1449,        if (x != x) { // X is NaN,2,1,0,1,3,1,0,0,0,5,25,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1454,        if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1479,        if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1490,        if (y == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1502,        if (x == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1526,        if (y == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1540,        if (x < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1557,        if (y < 8e298 && y > -8e298) {,2,3,0,1,3,1,0,0,1,6,30,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1558,            double tmp1 = y * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,31,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1559,            ya = y + tmp1 - tmp1;,4,2,0,0,0,0,0,0,1,3,21,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1560,            yb = y - ya;,3,1,0,0,0,0,0,0,1,3,12,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1561,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1569,"        final double lores = log(x, lns);",1,0,0,0,2,2,3,0,2,5,33,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1570,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0,0,0,2,5,2,3,0,0,4,73,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1574,        double lna = lns[0];,1,0,1,0,2,1,0,0,0,4,20,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1575,        double lnb = lns[1];,1,0,1,0,2,1,0,0,0,4,20,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1578,        double tmp1 = lna * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,33,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1579,        double tmp2 = lna + tmp1 - tmp1;,4,2,0,0,0,1,0,0,0,3,32,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1580,        lnb += lna - tmp2;,3,1,0,0,0,0,0,0,1,3,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1581,        lna = tmp2;,2,0,0,0,0,0,0,0,1,2,11,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1584,        final double aa = lna * ya;,3,1,0,0,0,2,0,0,1,4,27,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1585,        final double ab = lna * yb + lnb * ya + lnb * yb;,7,5,0,0,0,2,0,0,1,4,49,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1587,        lna = aa+ab;,3,1,0,0,0,0,0,0,1,3,12,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1588,        lnb = -(lna - aa - ab);,4,1,0,1,2,0,0,0,2,5,23,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1590,        double z = 1.0 / 120.0;,1,1,0,0,0,1,0,0,0,3,23,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1591,        z = z * lnb + (1.0 / 24.0);,3,3,0,1,2,0,0,0,1,5,27,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1592,        z = z * lnb + (1.0 / 6.0);,3,3,0,1,2,0,0,0,1,5,26,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1593,        z = z * lnb + 0.5;,3,2,0,0,0,0,0,0,1,3,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1594,        z = z * lnb + 1.0;,3,2,0,0,0,0,0,0,1,3,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1595,        z = z * lnb;,3,1,0,0,0,0,0,0,1,3,12,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1597,"        final double result = exp(lna, z, null);",1,0,0,0,2,2,3,0,2,5,40,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1599,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1613,        if (e == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6142,        return EXP_INT_A.clone();,0,0,0,1,2,1,2,0,0,4,25,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6150,        return EXP_INT_B.clone();,0,0,0,1,2,1,2,0,0,4,25,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6158,        return EXP_FRAC_A.clone();,0,0,0,1,2,1,2,0,0,4,26,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6166,        return EXP_FRAC_B.clone();,0,0,0,1,2,1,2,0,0,4,26,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3744,    private static class ExpFracTable {,1,0,0,0,1,3,0,0,2,4,35,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3770,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,1,0,0,1,2,0,2,0,1,5,56,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3771,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,1,0,0,1,2,0,2,0,1,5,56,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3773,        },0,0,0,0,1,0,0,0,0,1,1,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3705,    private static class ExpIntTable {,1,0,0,0,1,3,0,0,2,4,34,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3737,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,1,0,0,1,2,0,2,0,1,5,54,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3738,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,1,0,0,1,2,0,2,0,1,5,54,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3740,        },0,0,0,0,1,0,0,0,0,1,1,2,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,373,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,374,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,375,        if (v.length != nRows) {,3,1,0,1,3,1,0,0,0,5,24,4,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,379,        final double[] out = new double[nCols];,1,0,1,0,4,4,0,0,1,5,39,4,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,380,        for (int col = 0; col < nCols; ++col) {,4,1,0,1,3,2,0,0,1,6,39,4,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,381,            double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,7,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,382,            for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,6,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,383,                sum += data[i][col] * v[i];,1,1,1,0,6,0,0,0,1,5,27,8,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,385,            out[col] = sum;,1,0,1,0,2,0,0,0,1,4,15,6,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,388,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,246,        random.setSeed(seed);,0,0,0,1,2,0,3,0,0,3,21,5,0.42857,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,247,        randomData.reSeed(seed);,0,0,0,1,2,0,3,0,0,3,24,5,0.42857,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,248,    },0,0,0,0,1,0,0,0,0,1,1,2,0.42857,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,63,        super(optimizer);,1,0,0,1,2,1,0,0,1,5,17,3,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,64,        degree = -1; // To avoid compilation error until the instance variable is removed.,1,0,0,0,0,0,0,0,2,2,82,4,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,65,    },0,0,0,0,1,0,0,0,0,1,1,2,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,110,"        return fit(new PolynomialFunction.Parametric(), guess);",2,0,0,1,4,2,2,0,2,6,55,4,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,69,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,70,        MathUtils.checkNotNull(c);,0,0,0,1,2,0,3,0,0,3,26,5,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,71,        int n = c.length;,3,0,0,0,0,1,0,0,0,2,17,5,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,72,        if (n == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,75,        while ((n > 1) && (c[n - 1] == 0)) {,2,4,1,2,9,1,0,0,0,6,36,4,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,78,        this.coefficients = new double[n];,1,0,1,0,2,3,0,0,1,5,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,79,"        System.arraycopy(c, 0, this.coefficients, 0, n);",1,0,0,0,2,1,4,0,0,4,48,5,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,80,    },0,0,0,0,1,0,0,0,0,1,1,2,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,94,"       return evaluate(coefficients, x);",0,0,0,0,2,1,3,0,1,4,33,4,0.2,0,0
defect4j,math,org/apache/commons/math3/fitting/PolynomialFitter,14,37,        super(optimizer);,1,0,0,1,2,1,0,0,1,5,17,3,0.125,0,0
defect4j,math,org/apache/commons/math3/fitting/PolynomialFitter,14,38,    },0,0,0,0,1,0,0,0,0,1,1,2,0.125,0,0
defect4j,math,org/apache/commons/math3/fitting/PolynomialFitter,14,68,"        return fit(new PolynomialFunction.Parametric(), guess);",2,0,0,1,4,2,2,0,2,6,55,4,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,69,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,70,        MathUtils.checkNotNull(c);,0,0,0,1,2,0,3,0,0,3,26,5,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,71,        int n = c.length;,3,0,0,0,0,1,0,0,0,2,17,5,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,72,        if (n == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,75,        while ((n > 1) && (c[n - 1] == 0)) {,2,4,1,2,9,1,0,0,0,6,36,4,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,78,        this.coefficients = new double[n];,1,0,1,0,2,3,0,0,1,5,34,4,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,79,"        System.arraycopy(c, 0, this.coefficients, 0, n);",1,0,0,0,2,1,4,0,0,4,48,5,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,80,    },0,0,0,0,1,0,0,0,0,1,1,2,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,94,"       return evaluate(coefficients, x);",0,0,0,0,2,1,3,0,1,4,33,4,0.125,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1542,"                return pow(-x, y);",1,0,0,0,2,1,2,0,2,5,18,8,1.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,16,384,      if (x != x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.15385,0,0
