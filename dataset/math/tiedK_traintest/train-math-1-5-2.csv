dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,1,53,"        super(LocalizedFormats.FRACTION_CONVERSION_OVERFLOW, value, p, q);",10,0,0,1,2,0,0,0,0,10,66,4,1.33333,0,0
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,1,54,    },0,0,0,0,1,0,0,0,0,1,1,4,1.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,193,        return inverseCumulativeProbability(random.nextDouble());,0,0,1,2,4,1,6,0,0,11,57,3,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,86,        final int indexRm1 = iRm1[index];,0,0,0,1,2,0,0,0,0,3,33,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,90,        final int vM1      = v[i1[index]];,0,0,0,2,4,0,0,0,0,6,34,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,94,        final int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);,2,3,1,4,8,1,0,0,0,14,71,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,95,        final int z1 = (v0 ^ (v0 << 25))  ^ (vM1 ^ (vM1 >>> 27));,4,0,0,4,8,0,4,0,0,8,57,3,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,96,        final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));,0,0,0,3,6,0,0,0,0,9,49,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,97,        final int z3 = z1      ^ z2;,6,1,0,0,0,0,0,0,0,8,28,10,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,98,        int z4 = z0 ^ (z1 ^ (z1 << 9)) ^ (z2 ^ (z2 << 21)) ^ (z3 ^ (z3 >>> 21));,0,0,0,6,12,0,0,0,0,18,72,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,100,        v[index]     = z3;,2,0,1,1,2,0,6,0,0,13,18,3,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,101,        v[indexRm1]  = z4;,2,0,1,1,2,0,0,0,0,7,18,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,102,        v[indexRm2] &= 0x80000000;,0,0,1,1,2,0,0,0,0,5,26,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,103,        index        = indexRm1;,0,0,0,0,0,0,0,0,0,0,24,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,111,        return z4 >>> (32 - bits);,0,0,0,1,2,1,0,0,0,4,26,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,90,        final long high = ((long) next(26)) << 26;,8,4,0,3,6,1,2,0,0,16,42,3,1.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,92,        return (high | low) * 0x1.0p-52d;,6,2,0,1,2,1,0,0,0,9,33,3,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,816,        final int len = a.length;,6,0,0,0,0,1,0,0,0,7,25,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,817,        if (len != b.length) {,2,0,0,1,3,0,0,0,0,2,22,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,826,        for (int i = 0; i < len; i++) {,10,1,0,1,3,0,0,0,0,12,31,3,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,828,            final double ca = SPLIT_FACTOR * ai;,28,5,0,0,0,1,0,0,0,35,36,3,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,832,            final double bi = b[i];,2,0,0,1,2,0,6,2,0,10,23,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,834,            final double bHigh = cb - (cb - bi);,6,1,0,1,2,0,0,0,0,7,36,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,836,            prodHigh[i] = ai * bi;,12,4,0,1,2,1,0,0,0,17,22,3,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,837,            final double prodLow = aLow * bLow - (((prodHigh[i] -,0,0,0,1,5,0,0,0,0,6,53,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,841,            prodLowSum += prodLow;,4,0,0,0,0,0,0,0,0,5,22,6,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,845,        final double prodHighCur = prodHigh[0];,2,0,0,1,2,0,0,0,0,2,39,5,0.09091,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,113,        Line line1 = (Line) getHyperplane();,2,0,0,2,4,0,2,4,0,8,36,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,114,        Line line2 = (Line) subLine.getHyperplane();,10,0,0,2,4,1,6,0,0,18,44,3,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,117,        Vector2D v2D = line1.intersection(line2);,2,0,0,1,2,0,6,2,0,10,41,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,120,        Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));,4,0,0,3,6,0,12,2,0,18,71,3,0.14286,1,1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,113,        Vector3D v1D = line.intersection(subLine.line);,6,0,0,1,2,0,4,2,0,12,47,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,116,        Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));,2,0,0,2,4,0,10,2,0,14,65,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,164,        final Vector3D d = p.subtract(zero);,2,0,0,1,2,1,6,2,0,11,36,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,165,"        final Vector3D n = new Vector3D(1.0, d, -d.dotProduct(direction), direction);",10,0,0,2,4,1,14,4,0,30,77,3,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,195,        final double cos = direction.dotProduct(line.direction);,8,0,0,1,2,1,4,0,0,14,56,0,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,196,        final double n = 1 - cos * cos;,6,2,0,0,0,1,0,0,0,9,31,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,197,        if (n < Precision.EPSILON) {,0,0,0,1,3,0,0,0,0,4,28,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,204,        final double b        = delta0.dotProduct(line.direction);,12,0,1,1,2,1,8,0,0,27,58,3,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,206,"        return new Vector3D(1, zero, (a - b * cos) / n, direction);",12,3,0,2,4,1,0,2,0,17,59,5,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,216,        final Vector3D closest = closestPoint(line);,2,0,0,1,2,1,4,2,0,9,44,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/complex/Complex,5,304,        if (real == 0.0 && imaginary == 0.0) {,4,3,0,1,3,0,0,0,0,7,38,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,451,                if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) {,10,1,0,2,5,0,2,2,0,16,62,3,21.33333,1,1
defect4j,math,org/apache/commons/math3/util/FastMath,7,3367,        y += 1.0;,2,0,0,0,0,0,0,0,0,3,9,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,7,3369,        if (y == 0) {,6,2,0,1,3,0,6,0,0,14,13,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,7,3373,        return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,351,"                    handler.handleStep(interpolator, isLastStep);",2,0,0,1,2,0,12,0,0,14,45,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,218,                switch (allowed) {,2,0,0,1,3,0,0,0,0,2,18,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,239,                final int p = agingA - MAXIMAL_AGING;,6,1,0,0,0,1,0,0,0,8,37,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,240,                final double weightA = (1 << p) - 1;,4,2,0,1,2,1,0,0,0,7,36,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,241,                final double weightB = p + 1;,0,0,0,0,0,0,8,2,0,10,29,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,242,                targetY = (weightA * yA - weightB * REDUCTION_FACTOR * yB) / (weightA + weightB);,38,8,0,2,4,1,0,6,0,56,81,1,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,243,            } else if (agingB >= MAXIMAL_AGING) {,4,1,0,1,4,0,0,0,0,5,37,7,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,342,                xA = nextX;,6,0,0,0,0,0,6,4,0,17,11,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,343,                yA = nextY;,2,0,0,0,0,0,0,0,0,2,11,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,344,                absYA = FastMath.abs(yA);,10,5,0,1,2,0,12,0,0,29,25,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,345,                agingA = 0;,6,0,1,0,0,0,0,0,0,12,11,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,346,                ++agingB;,2,0,0,0,0,2,0,0,0,4,9,1,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,218,                switch (allowed) {,6,0,0,1,3,0,0,0,0,8,18,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,158,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,160,        for (int i = 0; i < probabilities.length; i++) {,10,1,0,1,3,0,0,0,0,12,48,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,163,                return singletons.get(i);,4,1,0,1,2,2,6,0,0,12,25,3,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,87,        final int indexRm2 = iRm2[index];,4,0,0,1,2,0,0,0,0,6,33,8,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,89,        final int v0       = v[index];,2,1,0,1,2,0,0,0,0,3,30,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,90,        final int vM1      = v[i1[index]];,2,0,1,2,4,1,0,0,0,9,34,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,91,        final int vM2      = v[i2[index]];,12,3,0,2,4,1,0,0,0,16,34,3,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,94,        final int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);,2,3,1,4,8,1,0,0,0,14,71,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,95,        final int z1 = (v0 ^ (v0 << 25))  ^ (vM1 ^ (vM1 >>> 27));,16,5,0,4,8,2,0,0,0,23,57,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,96,        final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));,6,0,0,3,6,0,0,0,0,7,49,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,97,        final int z3 = z1      ^ z2;,2,0,0,0,0,2,0,2,0,6,28,2,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,101,        v[indexRm1]  = z4;,8,0,1,1,2,0,2,2,0,19,18,3,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,102,        v[indexRm2] &= 0x80000000;,10,2,0,1,2,0,0,0,0,12,26,5,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,108,        z4 = z4 ^ ((z4 <<  7) & 0xe46e1700);,12,3,0,2,4,0,0,0,0,16,36,1,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,111,        return z4 >>> (32 - bits);,6,2,0,1,2,2,10,0,0,19,26,3,0.5,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,90,        final long high = ((long) next(26)) << 26;,6,1,0,3,6,2,2,4,0,15,42,3,0.5,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,91,        final int  low  = next(26);,2,0,0,1,2,1,2,0,0,5,27,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,92,        return (high | low) * 0x1.0p-52d;,8,2,0,1,2,1,18,0,0,30,33,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2477,            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,0,0,0,5,10,0,0,0,0,15,91,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2480,            yb = epsB * denom;,6,1,0,0,0,0,0,0,0,8,18,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2481,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1387,        double[] tmp1 = new double[getSize()];,2,0,0,3,6,0,2,0,0,4,38,5,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1388,"        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2",0,0,0,1,2,0,12,0,0,12,54,5,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1389,        double[] tmp2 = new double[getSize()];,2,0,0,3,6,0,2,0,0,4,38,5,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1391,"        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2",4,0,1,1,2,2,8,0,0,20,60,1,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1392,"        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)",24,0,0,2,4,1,10,2,0,38,70,1,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1394,        if (x[xOffset] >= 0) {,0,1,1,2,5,0,0,0,0,5,22,4,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1397,"            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x",0,0,0,1,2,0,10,0,0,10,52,7,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1401,                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x)),4,2,1,4,8,0,0,0,0,13,64,8,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,756,        y.compiler.checkCompatibility(x.compiler);,8,0,0,1,2,0,2,0,0,10,42,5,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,179,        if (vals.length != dim) {,12,2,0,1,3,0,0,0,0,15,25,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,229,        final double[] centered = new double[values.length];,6,1,0,2,4,0,18,0,0,26,52,3,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,230,        for (int i = 0; i < centered.length; i++) {,12,1,0,1,3,0,0,0,0,14,43,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,231,            centered[i] = values[i] - getMeans()[i];,0,0,0,4,8,0,0,0,0,12,40,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,233,        final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered);,4,0,0,2,4,2,12,2,0,20,77,3,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,235,        for (int i = 0; i < preMultiplied.length; i++) {,10,1,0,1,3,0,0,0,0,12,48,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,238,        return FastMath.exp(-0.5 * sum);,2,1,0,1,2,1,4,0,0,8,32,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,831,"        return exp(x, 0.0, null);",10,1,0,1,2,1,0,0,0,12,25,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,850,        if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,851,            intVal = (int) -x;,4,0,0,1,2,0,0,0,0,6,18,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,861,            if (intVal > 709) {,4,1,0,1,3,0,0,0,0,5,19,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,871,            if (intVal == 709) {,2,1,0,1,3,0,0,0,0,3,20,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,884,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,2,0,0,1,2,0,6,2,0,10,71,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1250,            double xb = ab;,8,2,0,0,0,0,0,0,0,11,15,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1259,            final double[] lnCoef_last = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];,4,0,1,2,4,0,0,2,0,11,71,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1261,            double yb = lnCoef_last[1];,4,1,0,1,2,0,6,0,0,12,27,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1266,                ab = ya * xb + yb * xa + yb * xb;,4,0,0,0,0,0,0,0,0,5,33,0,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1269,                ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1270,                yb = aa - ya + ab;,6,1,0,0,0,1,0,0,0,8,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1273,                final double[] lnCoef_i = LN_HI_PREC_COEF[i];,2,0,1,2,4,1,0,0,0,7,45,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1278,                ya = aa + tmp - tmp;,6,0,0,0,0,3,0,4,0,13,20,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1293,            lnzb = -(lnza - aa - ab);,8,1,0,1,2,0,12,0,0,23,25,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1294,        } else {,2,0,0,0,2,1,4,0,0,7,8,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1348,            hiPrec[0] = a;,12,4,0,1,2,1,0,0,0,17,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1443,        final double lns[] = new double[2];,2,0,0,2,4,1,0,0,0,3,35,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1445,        if (y == 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1449,        if (x != x) { // X is NaN,2,2,0,1,3,0,6,0,0,10,25,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1454,        if (x == 0) {,2,0,1,1,3,0,0,0,0,5,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1490,        if (y == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1502,        if (x == Double.NEGATIVE_INFINITY) {,6,2,0,1,3,0,0,0,0,8,36,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1526,        if (y == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1540,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1557,        if (y < 8e298 && y > -8e298) {,4,3,0,1,3,0,0,0,0,8,30,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1559,            ya = y + tmp1 - tmp1;,8,2,0,0,0,0,0,0,0,11,21,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1570,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0,0,0,2,5,0,6,0,0,6,73,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1578,        double tmp1 = lna * HEX_40000000;,2,1,0,0,0,0,0,0,0,3,33,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1584,        final double aa = lna * ya;,6,1,0,0,0,1,0,0,0,8,27,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1585,        final double ab = lna * yb + lnb * ya + lnb * yb;,16,5,0,0,0,1,0,0,0,22,49,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1587,        lna = aa+ab;,10,1,0,0,0,0,0,0,0,13,12,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1588,        lnb = -(lna - aa - ab);,8,1,0,1,2,0,0,0,0,11,23,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1590,        double z = 1.0 / 120.0;,2,1,0,0,0,0,0,0,0,3,23,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1591,        z = z * lnb + (1.0 / 24.0);,6,3,0,1,2,0,0,0,0,10,27,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1592,        z = z * lnb + (1.0 / 6.0);,6,3,0,1,2,0,0,0,0,10,26,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1593,        z = z * lnb + 0.5;,2,0,0,0,0,0,4,2,0,8,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1594,        z = z * lnb + 1.0;,6,2,0,0,0,0,0,0,0,9,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1597,"        final double result = exp(lna, z, null);",4,0,0,1,2,0,0,0,0,4,40,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1599,        return result;,6,1,0,0,0,2,0,0,0,8,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6166,        return EXP_FRAC_B.clone();,2,0,0,1,2,1,4,0,0,6,26,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3744,    private static class ExpFracTable {,2,0,0,0,1,2,0,0,0,4,35,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3770,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,8,2,0,1,2,0,4,0,0,15,56,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3705,    private static class ExpIntTable {,2,0,0,0,1,2,0,0,0,4,34,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3737,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,2,0,0,1,2,0,4,0,0,7,54,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3738,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,2,0,0,1,2,0,4,0,0,7,54,7,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,373,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,375,        if (v.length != nRows) {,8,2,1,1,3,1,0,0,0,16,24,3,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,380,        for (int col = 0; col < nCols; ++col) {,8,1,0,1,3,0,0,0,0,10,39,4,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,383,                sum += data[i][col] * v[i];,2,1,1,3,6,0,0,0,0,14,27,8,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,385,            out[col] = sum;,2,0,1,1,2,0,0,0,0,7,15,6,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,246,        random.setSeed(seed);,0,0,0,1,2,0,6,0,0,6,21,5,0.42857,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,63,        super(optimizer);,2,0,0,1,2,0,0,0,0,2,17,4,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,64,        degree = -1; // To avoid compilation error until the instance variable is removed.,2,0,0,0,0,0,0,2,0,4,82,3,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,110,"        return fit(new PolynomialFunction.Parametric(), guess);",0,0,0,2,4,1,0,0,0,7,55,4,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,69,        super();,6,2,0,1,2,0,16,0,0,25,8,3,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,71,        int n = c.length;,10,2,0,0,0,0,12,0,0,24,17,3,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,75,        while ((n > 1) && (c[n - 1] == 0)) {,4,4,1,4,9,0,0,0,0,10,36,4,0.2,0,0
defect4j,math,org/apache/commons/math3/fitting/PolynomialFitter,14,37,        super(optimizer);,2,0,0,1,2,0,0,0,0,2,17,4,0.125,0,0
defect4j,math,org/apache/commons/math3/fitting/PolynomialFitter,14,68,"        return fit(new PolynomialFunction.Parametric(), guess);",10,0,0,2,4,1,4,0,0,14,55,3,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,70,        MathUtils.checkNotNull(c);,4,1,0,1,2,0,0,0,0,5,26,3,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,71,        int n = c.length;,0,0,0,0,0,0,4,0,0,4,17,5,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,72,        if (n == 0) {,10,3,0,1,3,0,6,0,0,20,13,3,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,75,        while ((n > 1) && (c[n - 1] == 0)) {,8,4,1,4,9,0,0,0,0,15,36,3,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,79,"        System.arraycopy(c, 0, this.coefficients, 0, n);",6,0,0,1,2,0,8,0,0,15,48,3,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,80,    },2,0,0,0,1,3,0,4,0,9,1,2,0.125,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1542,"                return pow(-x, y);",4,0,0,1,2,1,4,0,0,10,18,3,1.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,16,384,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.15385,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,16,393,      if (x > 20) {,10,1,0,1,3,2,0,2,0,18,13,2,0.15385,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1510,            if (isNaN()) {,0,0,0,2,5,0,2,0,0,2,14,7,1.0,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1514,            if (x.isNaN()) {,0,0,0,2,5,0,0,0,0,7,16,4,1.0,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1515,                return x;,2,0,0,0,0,1,2,2,0,6,9,7,1.0,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1518,            if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) {,18,6,0,2,5,0,0,0,0,24,73,6,1.0,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1519,                result = newInstance(this);,4,0,0,1,2,0,8,0,0,14,27,5,1.0,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1521,                return result;,4,1,1,0,0,1,0,2,0,9,14,1,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,583,            lambda = 4 + (int) (3. * Math.log(dimension));,4,2,0,3,6,0,6,0,0,13,46,3,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,751,                    negccov = negcovMax;,0,0,0,0,0,0,0,0,0,1,20,8,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,247,    },10,1,1,0,1,1,4,0,0,21,1,1,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,423,                            break generationLoop;,4,0,0,0,0,0,0,0,0,4,21,3,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,995,                    repaired[i] = 1.0;,0,1,0,1,2,0,4,0,0,5,18,6,1.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,97,"        MatrixUtils.checkSubtractionCompatible(this, m);",0,0,0,1,2,0,6,0,0,7,48,3,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,101,"        final RealMatrix out = createMatrix(rowCount, columnCount);",8,1,0,1,2,0,0,0,0,10,59,6,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,102,        for (int row = 0; row < rowCount; ++row) {,0,1,0,1,3,0,20,0,0,21,42,7,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,103,            for (int col = 0; col < columnCount; ++col) {,6,1,0,1,3,0,0,0,0,7,45,3,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,108,        return out;,2,0,0,0,0,1,2,4,0,8,11,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,241,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,1,0,0,0,6,60,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,457,        final int columns = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,41,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,459,        for (int j = 0; j < columns; ++j) {,8,1,0,1,3,0,0,0,0,10,35,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,460,            for (int i = 0; i < rows; ++i) {,24,3,0,1,3,0,0,0,0,30,32,3,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,461,"                visitor.visit(i, j, data[i][j]);",0,0,1,3,6,0,8,0,0,14,32,9,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,464,        return visitor.end();,0,0,0,1,2,1,4,0,0,4,21,5,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,130,        if (data == null ||,4,4,0,0,1,3,4,0,0,15,19,1,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,134,        return (data.length * data[0].length <= 4096) ?,6,2,1,2,4,1,0,0,0,10,47,6,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,523,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0,0,0,3,7,0,0,0,0,10,61,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,528,    },4,0,0,0,1,0,0,0,0,5,1,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,241,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,10,1,0,1,4,1,0,0,0,12,60,3,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,256,                this.endRow = endRow;,4,0,0,0,0,0,0,0,0,5,21,10,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,257,                columnSum   = 0;,20,8,0,0,0,1,0,0,0,29,16,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,263,                columnSum += FastMath.abs(value);,6,0,1,1,2,1,6,0,0,19,33,1,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,268,            },2,0,0,0,1,0,2,0,0,4,1,5,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,272,                return maxColSum;,4,0,0,0,0,1,0,0,0,4,17,3,4.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3508,            return a;,0,0,1,0,0,1,0,0,0,3,9,6,4.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3511,            return b;,2,0,1,0,0,1,0,0,0,11,9,3,4.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3514,        if (a != b) {,4,1,0,1,3,0,0,0,0,5,13,4,4.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3520,        if (bits == 0x8000000000000000L) {,2,0,0,1,3,0,0,0,0,3,34,8,4.0,0,0
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,184,        return false;,6,1,0,0,0,1,4,0,0,11,13,3,1.0,1,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,234,        double previous = val[0];,2,0,1,1,2,0,0,0,0,4,25,5,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,239,        for (index = 1; index < max; index++) {,0,0,0,1,3,0,4,0,0,4,39,5,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,240,            switch (dir) {,8,4,0,1,3,0,0,0,0,13,14,10,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,242,                if (strict) {,2,0,0,1,3,0,0,0,0,2,13,8,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,271,        if (index == max) {,10,2,1,1,3,0,0,0,0,21,19,1,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,273,            return true;,2,0,0,0,0,1,0,0,0,3,12,3,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,295,"        checkOrder(val, dir, strict, true);",0,0,0,1,2,0,8,0,0,9,35,5,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,296,    },2,0,1,0,1,0,0,0,0,5,1,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,306,"        checkOrder(val, OrderDirection.INCREASING, true);",10,3,1,1,2,0,10,0,0,31,49,3,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,141,        return new UnivariateFunction() {,8,3,1,1,3,1,0,2,0,18,33,3,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,141,        return new UnivariateFunction() {,0,0,0,1,3,1,0,2,0,2,33,6,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,144,                double r = f[0].value(x);,2,0,1,2,4,0,4,0,0,8,25,10,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,145,                for (int i = 1; i < f.length; i++) {,14,1,0,1,3,0,0,2,0,19,36,3,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,146,                    r += f[i].value(x);,2,0,1,2,4,0,4,0,0,11,19,11,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,148,                return r;,2,0,0,0,0,1,0,0,0,2,9,9,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,65,        if (x == null ||,2,0,1,0,1,0,4,0,0,8,16,3,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,73,        if (y.length != x.length) {,6,0,0,1,3,0,0,0,0,6,27,2,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,78,        abscissa = MathArrays.copyOf(x);,2,0,0,1,2,0,6,0,0,9,32,4,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,80,    },8,3,0,0,1,0,0,0,0,11,1,10,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,84,"        int index = Arrays.binarySearch(abscissa, x);",4,0,0,1,2,0,8,0,0,13,45,3,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,85,        double fx = 0;,6,1,0,0,0,1,0,0,0,8,14,4,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,89,            fx = ordinate[-index-2];,4,1,1,1,2,0,0,0,0,9,24,6,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,90,        } else if (index >= 0) {,0,0,0,1,4,0,0,0,0,5,24,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,24,532,"         return copyOf(source, source.length);",4,0,0,1,2,1,4,0,0,8,37,5,0.25,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,24,560,         final double[] output = new double[len];,4,0,1,2,4,1,4,0,0,11,40,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,24,562,         return output;,18,3,0,0,0,2,6,2,0,30,14,2,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/function/Sin,24,33,"public class Sin implements UnivariateDifferentiable, DifferentiableUnivariateFunction {",2,0,0,0,1,3,0,0,0,5,88,2,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/function/Sin,24,36,        return FastMath.sin(x);,0,0,0,1,2,1,6,0,0,6,23,5,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,326,                a = FastMath.sqrt(c1 / c2);,6,1,0,1,2,0,4,0,0,12,27,7,0.33333,1,1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,327,                omega = FastMath.sqrt(c2 / c3);,2,1,0,1,2,0,0,0,0,3,31,4,0.33333,1,1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,48,                                Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,1.0,0,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,49,"        getContext().addMessage(pattern, args);",2,1,0,2,4,0,24,0,0,27,39,3,1.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,597,        return multiply(100).doubleValue();,0,0,0,2,4,1,4,0,0,4,35,5,1.0,1,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,138,                Integer minRow = null;,2,0,0,0,0,0,0,2,0,4,22,7,0.33333,1,1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,139,                int minIndex = tableau.getWidth();,4,3,0,1,2,0,0,0,0,7,34,8,0.33333,1,1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,140,                for (Integer row : minRatioPositions) {,6,1,0,1,3,0,0,2,0,9,39,4,0.33333,1,1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,142,                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {,8,4,0,2,5,0,4,0,0,17,58,9,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,143,                        if (row == tableau.getBasicRow(i)) {,2,1,0,2,5,0,6,0,0,9,36,11,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,146,                                minRow = row;,8,0,0,0,0,0,0,0,0,10,13,3,0.33333,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,361,        OpenMapRealVector res = new OpenMapRealVector(this);,2,0,0,1,2,0,0,4,0,6,52,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,363,        while (iter.hasNext()) {,2,0,0,2,5,1,0,0,0,3,24,2,2.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,45,    private static final double[] LANCZOS = {,2,0,0,1,3,3,0,0,0,5,41,2,1.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,154,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,4,3,0,5,11,0,12,0,0,19,68,4,1.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,186,        return ret;,8,1,0,0,0,1,0,0,0,11,11,5,1.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,71,        return x < 0 ? -ret : ret;,4,0,0,0,0,1,0,0,0,6,26,6,1.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,375,        return Math.sqrt(a);,2,0,0,1,2,1,2,0,0,4,20,5,1.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3535,        if (a > b) {,2,0,0,1,3,0,0,0,0,2,12,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,93,"        System.arraycopy(y, 0, z, x.length, y.length);",2,2,0,1,2,0,0,0,0,4,46,6,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,95,        return z;,4,0,0,0,0,1,0,0,0,5,9,3,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,129,"        ensureDataConformance(x, y);",4,1,0,1,2,0,0,0,0,5,28,7,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,132,        final double[] ranks = naturalRanking.rank(z);,6,1,0,2,4,1,0,0,0,8,46,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,134,        double sumRankX = 0;,4,3,0,0,0,0,4,0,0,11,20,3,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,140,        for (int i = 0; i < x.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,141,            sumRankX += ranks[i];,2,0,1,1,2,0,0,0,0,7,21,6,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,148,        final double U1 = sumRankX - (x.length * (x.length + 1)) / 2;,2,1,0,2,4,0,0,0,0,3,61,11,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,155,"        return FastMath.max(U1, U2);",10,2,0,1,2,1,8,0,0,21,28,1,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,173,        final int n1n2prod = n1 * n2;,10,1,0,0,0,1,0,0,0,13,29,3,1.0,1,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,176,        final double EU = n1n2prod / 2.0;,10,5,0,0,0,1,6,0,0,23,33,3,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,179,        final double z = (Umin - EU) / FastMath.sqrt(VarU);,0,0,0,2,4,0,12,0,0,12,51,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,181,"        final NormalDistribution standardNormal = new NormalDistribution(0, 1);",6,0,0,1,2,0,6,0,0,13,71,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,183,        return 2 * standardNormal.cumulativeProbability(z);,18,7,0,1,2,4,6,0,0,35,51,1,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,224,"        final double Umax = mannWhitneyU(x, y);",2,0,0,1,2,1,6,0,0,9,39,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,229,        final double Umin = x.length * y.length - Umax;,14,2,0,0,0,1,0,0,0,18,47,0,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,432,"        public IntDoublePair(double value, int position) {",6,0,0,1,3,1,0,0,0,7,50,3,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,433,            this.value = value;,4,0,0,0,0,0,0,0,0,5,19,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,435,        },0,1,1,0,1,0,2,0,0,8,1,6,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,453,            return value;,2,0,0,0,0,1,0,0,0,2,13,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,461,            return position;,2,0,0,0,0,1,0,0,0,2,16,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,334,        switch (tiesStrategy) {,2,0,0,1,3,0,0,0,0,2,23,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,200,        switch (nanStrategy) {,4,0,0,1,3,0,0,0,0,4,22,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,194,        for (int i = 0; i < data.length; i++) {,14,0,0,1,3,3,0,0,0,18,39,1,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,195,"            ranks[i] = new IntDoublePair(data[i], i);",2,0,1,3,6,1,0,0,0,7,41,8,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,199,        List<Integer> nanPositions = null;,4,0,0,0,0,0,4,4,0,13,34,3,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,211,                nanPositions = getNanPositions(ranks);,2,0,0,1,2,0,4,0,0,7,38,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,218,        Arrays.sort(ranks);,4,1,0,1,2,0,18,2,0,26,19,3,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,222,        double[] out = new double[ranks.length];,2,0,0,2,4,0,0,0,0,2,40,3,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,224,        out[ranks[0].getPosition()] = pos;,4,3,0,3,6,0,0,0,0,7,34,6,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,226,        tiesTrace.add(ranks[0].getPosition());,2,0,0,3,6,1,6,0,0,9,38,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,227,        for (int i = 1; i < ranks.length; i++) {,4,0,0,1,3,0,0,0,0,4,40,3,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,228,"            if (Double.compare(ranks[i].getValue(), ranks[i - 1].getValue()) > 0) {",2,2,1,6,13,0,8,0,0,18,71,6,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,240,            out[ranks[i].getPosition()] = pos;,2,0,1,3,6,0,2,0,0,11,34,6,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,245,        if (nanStrategy == NaNStrategy.FIXED) {,2,0,1,1,3,1,0,0,0,7,39,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,246,"            restoreNaNs(out, nanPositions);",0,0,0,1,2,0,6,0,0,6,31,7,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,248,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,405,        for (int i = 0; i < ranks.length; i++) {,18,4,0,1,3,0,0,0,0,23,40,3,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,406,            if (Double.isNaN(ranks[i].getValue())) {,0,0,1,4,9,0,6,0,0,10,40,7,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,50,    private double solverAbsoluteAccuracy = SOLVER_DEFAULT_ABSOLUTE_ACCURACY;,8,0,0,0,0,1,4,0,0,15,73,0,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,62,    },2,0,0,0,1,0,0,0,0,3,1,5,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,75,        throws NotStrictlyPositiveException {,6,0,0,0,1,1,0,0,0,7,37,1,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,76,        if (sd <= 0) {,2,1,0,1,3,0,0,0,0,3,14,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,80,        this.mean = mean;,4,0,0,0,0,0,0,0,0,5,17,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,81,        standardDeviation = sd;,8,0,0,0,0,2,6,0,0,17,23,3,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,83,    },2,0,0,0,1,0,2,0,0,5,1,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,141,        return 0.5 * (1 + Erf.erf(dev / (standardDeviation * SQRT2)));,16,5,0,3,6,1,4,0,0,27,62,0,1.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2480,            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,6,5,1,5,10,1,0,0,0,20,91,6,1.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2483,            yb = epsB * denom;,4,1,0,0,0,0,0,0,0,5,18,4,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,59,            return GEQ;,2,0,0,0,0,1,0,0,0,2,11,5,1.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,36,    private double elitismRate = 0.9;,2,0,0,0,0,1,0,0,0,3,33,2,2.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,732,        float result = numerator.floatValue() / denominator.floatValue();,2,1,0,2,4,0,8,0,0,11,65,5,0.5,1,1
defect4j,math,org/apache/commons/math/util/FastMath,37,393,          return exp(x)/2.0;,0,1,0,1,2,1,4,0,0,5,18,6,4.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,453,          return exp(x)/2.0;,2,1,0,1,2,1,0,0,0,3,18,7,4.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2413,            initialTrustRegionRadius = minDiff / 3.0;,4,1,0,0,0,0,0,0,0,6,41,6,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,126,            lowerBound = lower.clone();,2,0,0,1,2,0,4,0,0,7,27,6,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,244,    super(interpolator);,2,0,0,1,2,0,0,0,0,2,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,246,    if (interpolator.currentState == null) {,4,1,0,1,3,0,0,0,0,5,40,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,248,      yDotKLast = null;,2,0,0,0,0,0,0,0,0,3,17,6,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,249,      v         = null;,2,2,0,0,0,0,12,0,0,17,17,3,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,250,      vectorsInitialized = false;,2,0,0,0,0,0,0,0,0,4,27,6,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,278,    return new DormandPrince853StepInterpolator(this);,4,1,0,1,2,1,0,0,0,5,50,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,288,"    super.reinitialize(integrator, y, yDotK, forward, primaryMapper, secondaryMappers);",10,6,1,1,2,0,0,0,0,20,83,9,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,290,    final int dimension = currentState.length;,6,0,0,0,0,1,0,0,0,7,42,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,292,    yDotKLast = new double[3][];,2,0,0,2,4,0,0,0,0,3,28,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,293,    for (int k = 0; k < yDotKLast.length; ++k) {,4,1,0,1,3,0,0,0,0,7,44,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,294,      yDotKLast[k] = new double[dimension];,6,1,1,2,4,1,0,0,0,15,37,5,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,302,    vectorsInitialized = false;,10,1,0,0,0,0,0,0,0,14,27,3,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,311,  },12,0,0,0,1,0,0,0,0,12,1,5,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,407,    if (currentState == null) {,2,1,0,1,3,0,0,0,0,3,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,37,        super(max);,2,0,0,1,2,0,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,39,    },2,0,0,0,1,1,6,0,0,9,1,3,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,42,"        this(LocalizedFormats.MAX_COUNT_EXCEEDED, max);",6,0,0,1,2,0,0,0,0,6,47,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,55,        this.max = max;,6,1,0,0,0,0,0,0,0,7,15,5,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,62,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,45,                                     Object ... args) {,8,3,0,0,2,0,0,2,0,13,18,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,46,        context = new ExceptionContext(this);,4,1,0,1,2,0,12,0,0,18,37,3,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,48,    },6,0,0,0,1,0,16,0,0,23,1,1,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,74,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,40,151,            maxCountCallback.trigger(maximalCount);,12,2,0,1,2,0,6,0,0,22,39,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,40,65,                     throw new MaxCountExceededException(max);,4,1,0,1,2,0,0,0,0,6,41,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,394,"        return super.solve(maxEval, f, min, max, startValue);",10,1,0,1,2,1,6,0,0,18,53,3,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,295,        } catch (MaxCountExceededException e) {,12,1,0,1,4,0,0,2,0,16,39,3,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,296,            throw new TooManyEvaluationsException(e.getMax());,6,1,0,2,4,1,4,2,0,14,50,3,1.0,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,370,"        return evaluate(values, weights, 0, values.length);",4,0,0,1,2,1,6,0,0,10,51,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,68,        return (point == null) ? null : point.clone();,2,1,0,2,4,1,4,0,0,7,46,5,0.07143,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,647,    },2,0,0,0,1,1,4,0,0,7,1,4,9.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,209,    if ((initialStepSize < minStep) || (initialStepSize > maxStep)) {,10,3,0,3,7,0,0,0,0,13,65,3,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,214,  },0,0,0,0,1,0,12,0,0,12,1,6,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,51,        this.columns = columnDimension;,4,0,0,0,0,0,0,0,0,5,31,4,0.03333,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,52,        this.entries = new OpenIntToDoubleHashMap(0.0);,4,0,0,1,2,3,0,2,0,10,47,1,0.03333,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,53,    },0,0,0,0,1,0,4,0,0,4,1,5,0.03333,0,0
defect4j,math,org/apache/commons/math/complex/Complex,46,260,            return isZero ? NaN : INF;,18,5,1,0,0,3,2,0,0,35,26,3,2.0,1,0
defect4j,math,org/apache/commons/math/complex/Complex,47,257,            return NaN;,2,0,0,0,0,1,0,0,0,2,11,6,2.0,1,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,39,public class ExceptionContext implements Serializable {,2,0,0,0,1,1,0,2,0,5,55,1,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,45,    private List<Localizable> msgPatterns = new ArrayList<Localizable>();,6,0,0,1,2,1,4,8,0,19,69,1,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,67,        msgArguments.add(ArgUtils.flatten(arguments));,2,0,1,2,4,1,6,0,0,15,46,3,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,355,    private LocalizedFormats(final String sourceFormat) {,4,0,0,1,3,2,0,2,0,8,53,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,356,        this.sourceFormat = sourceFormat;,2,0,0,0,0,0,0,0,0,3,33,6,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,46,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",4,0,0,1,2,3,0,4,0,12,41,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,47,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",14,2,0,1,2,0,0,0,0,20,95,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,48,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",4,0,0,1,2,3,0,4,0,11,60,1,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,49,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",26,2,0,1,2,2,8,4,0,46,54,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,50,"    BANDWIDTH(""bandwidth ({0})""),",2,0,0,3,6,0,0,0,0,3,29,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,51,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",10,0,0,4,8,1,0,0,0,15,108,1,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,55,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",2,0,0,2,4,0,0,0,0,3,108,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,57,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",2,0,0,2,4,0,0,0,0,2,94,5,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,58,"    CANNOT_CONVERT_OBJECT_TO_FRACTION(""cannot convert given object to a fraction number: {0}""),",2,0,0,2,4,0,0,0,0,3,91,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",6,2,0,3,6,0,0,0,0,9,97,6,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",2,0,0,2,4,0,0,0,0,3,83,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",4,1,0,2,4,0,0,0,0,6,87,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",14,5,0,1,2,0,0,0,0,20,131,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",4,1,0,1,2,0,6,0,0,11,55,12,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,78,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",4,2,0,3,6,0,6,0,0,12,46,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,75,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",4,0,0,2,4,3,2,0,0,10,112,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",6,0,0,2,4,0,0,0,0,8,86,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",2,0,1,5,10,0,0,0,0,16,290,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",2,0,0,3,6,0,0,0,0,3,263,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",2,0,1,1,2,1,0,0,0,7,52,8,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,80,"    CROSSING_BOUNDARY_LOOPS(""some outline boundary loops cross each other""),",2,0,0,1,2,1,2,0,0,5,72,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,81,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",2,0,0,3,6,0,0,0,0,3,109,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,82,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",2,0,0,3,6,3,0,0,0,5,81,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,83,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",4,0,0,1,2,0,8,0,0,13,49,5,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,86,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",4,0,0,1,2,0,0,0,0,5,54,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,87,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",10,1,0,2,4,0,0,0,0,13,119,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,88,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",12,4,1,1,2,0,0,0,0,22,51,3,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,89,"    DUPLICATED_ABSCISSA(""Abscissa {0} is duplicated at both indices {1} and {2}""),",6,1,0,4,8,1,4,0,0,12,78,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,91,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",2,0,0,1,2,0,0,0,0,3,88,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,92,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",20,8,0,1,2,1,0,0,0,29,71,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,95,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",8,0,0,4,8,3,4,0,0,16,78,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,96,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",20,0,0,3,6,4,0,6,0,31,81,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,98,"    EVALUATION_FAILED(""evaluation failed for argument = {0}""),",2,0,0,2,4,0,0,0,0,3,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,99,"    EVALUATION(""evaluation""), /* keep */",4,2,0,1,2,0,0,2,0,9,36,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,100,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",6,1,0,3,6,1,0,0,0,8,77,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,101,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",4,1,0,2,4,0,0,0,0,5,69,8,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,102,"    FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),",0,0,0,12,24,0,0,0,0,36,175,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,105,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",2,0,0,2,4,0,0,0,0,3,54,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,106,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,73,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,113,"    IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO(""identical abscissas x[{0}] == x[{1}] == {2} cause division by zero""),",2,0,0,6,12,0,0,0,0,3,107,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,114,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",2,0,0,3,6,0,0,0,0,3,95,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,115,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",6,0,0,3,6,0,10,2,0,19,50,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,116,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,64,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,117,"    INDEX(""index ({0})""), /* keep */",0,0,1,3,6,0,12,0,0,16,32,9,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,118,"    NOT_FINITE_NUMBER(""{0} is not a finite number""), /* keep */",2,0,0,2,4,0,0,0,0,3,59,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,119,"    ARRAY_ELEMENT(""value {0} at index {1}""), /* keep */",0,1,1,3,6,0,0,0,0,8,51,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,120,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",22,2,0,3,6,1,0,0,0,28,79,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,121,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",2,0,0,1,2,0,0,0,0,3,59,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,122,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",2,0,0,3,6,0,8,0,0,11,72,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,124,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {1} after final row {0}""),",2,0,0,3,6,0,0,0,0,3,67,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,125,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",10,1,0,4,8,0,0,0,0,12,121,6,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,127,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,128,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",2,0,0,3,6,0,0,0,0,3,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,130,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",2,0,0,3,6,0,0,0,0,3,105,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,133,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",2,0,0,2,4,0,0,0,0,3,66,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,134,"    INVALID_BINARY_DIGIT(""invalid binary digit: {0}""),",10,0,0,2,4,0,8,0,0,19,50,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,135,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",2,0,0,4,8,0,0,0,0,3,112,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,137,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",2,0,0,3,6,0,0,0,0,3,72,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,138,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",2,0,0,2,4,0,0,0,0,3,71,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,139,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),",2,0,0,4,8,0,0,0,0,3,141,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,140,"    INVALID_REGRESSION_OBSERVATION(""length of regressor array = {0} does not match the number of variables = {1} in the model""),",2,0,0,3,6,0,0,0,0,3,124,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,141,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",2,0,0,26,52,0,0,0,0,3,165,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,142,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",8,0,0,1,2,0,0,0,0,10,41,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,143,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,144,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",2,1,0,4,8,0,0,0,0,3,56,8,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,145,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),",2,0,0,1,2,0,0,0,0,3,101,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,146,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",2,0,0,1,2,0,0,0,0,3,67,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,147,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,111,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,148,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",2,0,0,5,10,0,0,0,0,3,111,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,149,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",2,0,0,1,2,0,0,0,0,3,70,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,150,"    EVALUATIONS(""evaluations""), /* keep */",0,0,0,1,2,0,8,0,0,8,38,5,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,151,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",2,0,0,3,6,0,0,0,0,3,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,152,"    MAX_EVALUATIONS_EXCEEDED(""maximal number of evaluations ({0}) exceeded""),",2,0,0,3,6,0,0,0,0,3,73,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,153,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",2,0,0,3,6,0,0,0,0,3,71,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,154,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({0,number,0.00E00}) reached, integration needs {1,number,0.00E00}""),",4,0,0,4,8,1,6,0,0,12,132,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,155,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",2,0,0,3,6,0,0,0,0,3,156,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,156,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",2,0,0,2,4,0,0,0,0,3,43,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,158,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",2,0,0,2,4,0,0,0,0,3,92,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,162,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,163,"    NUMBER_OF_SUCCESSES(""number of successes ({0})""), /* keep */",8,0,0,3,6,0,0,0,0,8,60,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,164,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,73,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,165,"    NUMBER_OF_INTERPOLATION_POINTS(""number of interpolation points ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,82,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,166,"    NUMBER_OF_TRIALS(""number of trials ({0})""),",2,0,0,3,6,0,0,0,0,3,43,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,167,"    ROBUSTNESS_ITERATIONS(""number of robustness iterations ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,168,"    START_POSITION(""start position ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,50,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,169,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge (in less than {0} iterations) for value {1}""),",2,0,0,4,8,0,0,0,0,3,131,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,172,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",2,0,0,2,4,0,0,0,0,3,81,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,173,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,89,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,174,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",6,1,0,3,6,0,0,0,0,8,89,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,175,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,176,"    NON_SQUARE_MATRIX(""non square ({0}x{1}) matrix""),",2,0,0,4,8,0,0,0,0,3,49,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,178,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",2,0,0,1,2,0,0,0,0,3,41,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,179,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",2,0,0,5,10,0,0,0,0,3,93,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,180,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",2,1,1,6,12,0,4,0,0,11,85,6,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,183,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",2,0,0,3,6,0,0,0,0,3,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,184,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,186,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",2,0,0,5,10,0,0,0,0,3,105,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,187,"    ALPHA(""alpha""), /* keep */",2,0,0,1,2,0,0,0,0,3,26,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,188,"    BETA(""beta""), /* keep */",2,0,0,1,2,0,0,0,0,3,24,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,189,"    NOT_POSITIVE_COLUMNDIMENSION(""invalid column dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,81,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,190,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""),",2,0,0,1,2,0,0,0,0,3,61,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,191,"    NON_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix: diagonal element at ({0},{0}) is larger than {2}""), /* keep */",2,0,0,5,10,0,0,0,0,3,122,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,192,"    NON_POSITIVE_DEFINITE_LINEAR_OPERATOR(""non positive definite linear operator""), /* keep */",2,0,0,1,2,0,0,0,0,3,90,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,193,"    NON_SELF_ADJOINT_LINEAR_OPERATOR(""non self-adjoint linear operator""), /* keep */",10,1,0,1,2,0,0,0,0,13,80,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,194,"    NON_SQUARE_LINEAR_OPERATOR(""non square ({0}x{1}) linear operator""), /* keep */",2,0,0,4,8,0,0,0,0,3,78,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,195,"    DEGREES_OF_FREEDOM(""degrees of freedom ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,196,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",4,0,0,3,6,0,0,0,0,6,77,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,197,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",2,0,0,3,6,0,0,0,0,3,66,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,198,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,65,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,199,"    EXPONENT(""exponent ({0})""), /* keep */",4,0,0,3,6,0,0,0,0,5,38,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,200,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,53,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,201,"    LENGTH(""length ({0})""), /* keep */",4,0,0,3,6,0,0,0,0,7,34,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,202,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,49,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,203,"    MEAN(""mean ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,30,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,204,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",2,0,0,2,4,0,0,0,0,3,72,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,205,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,206,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",2,0,0,3,6,0,0,0,0,3,65,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,210,"    POPULATION_SIZE(""population size ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,211,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,76,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,212,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,213,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,214,"    SCALE(""scale ({0})""), /* keep */",6,0,0,3,6,1,0,2,0,11,32,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,215,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,216,"    SHAPE(""shape ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,218,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,220,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,222,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",8,1,0,2,4,0,0,0,0,11,87,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,223,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",2,0,0,2,4,0,0,0,0,3,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,224,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,226,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",2,0,0,1,2,0,0,0,0,3,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,228,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */",6,0,0,6,12,0,0,0,0,9,107,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,230,"    NOT_SUPPORTED_IN_DIMENSION_N(""method not supported in dimension {0}""),",6,0,0,2,4,0,0,0,0,7,70,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,231,"    NOT_SYMMETRIC_MATRIX(""not symmetric matrix""),",2,0,0,1,2,0,0,0,0,3,45,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,232,"    NON_SYMMETRIC_MATRIX(""non symmetric matrix: the difference between entries at ({0},{1}) and ({1},{0}) is larger than {2}""), /* keep */",4,0,0,8,16,3,0,0,0,8,134,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,233,"    NO_BIN_SELECTED(""no bin selected""),",2,0,0,1,2,0,0,0,0,3,35,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,235,"    NO_DATA(""no data""), /* keep */",6,0,0,1,2,4,8,10,0,29,30,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,236,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",2,0,0,4,8,0,0,0,0,3,82,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,237,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),",2,0,0,1,2,0,0,0,0,3,99,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,238,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",2,0,0,1,2,0,0,0,0,3,45,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,239,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""), /* keep */",8,1,0,1,2,0,0,0,0,11,62,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,240,"    NO_REGRESSORS(""Regression model must include at least one regressor""),",4,0,0,1,2,0,0,2,0,7,70,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,241,"    NO_RESULT_AVAILABLE(""no result available""),",2,0,0,1,2,0,0,0,0,3,43,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,242,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",10,3,1,6,12,0,0,0,0,17,75,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,243,"    NULL_NOT_ALLOWED(""null is not allowed""), /* keep */",12,4,1,1,2,0,6,0,0,29,51,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,244,"    COVARIANCE_MATRIX(""covariance matrix""), /* keep */",2,0,0,1,2,0,0,0,0,3,50,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,245,"    DENOMINATOR(""denominator""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,246,"    DENOMINATOR_FORMAT(""denominator format""), /* keep */",2,0,0,1,2,0,0,0,0,3,52,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,247,"    FRACTION(""fraction""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,248,"    FUNCTION(""function""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,249,"    IMAGINARY_FORMAT(""imaginary format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,250,"    INPUT_ARRAY(""input array""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,253,"    OBJECT_TRANSFORMATION(""conversion exception in transformation""), /* keep */",2,0,0,1,2,0,0,0,0,3,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,254,"    REAL_FORMAT(""real format""), /* keep */",4,0,0,1,2,3,0,0,0,8,38,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,256,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,68,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,257,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",4,0,1,4,8,0,0,0,0,9,69,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,258,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,260,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,127,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,261,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",2,0,0,2,4,0,0,0,0,3,87,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,263,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",2,0,0,2,4,0,0,0,0,3,76,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,264,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",2,0,0,2,4,0,0,0,0,3,84,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,265,"    BOBYQA_BOUND_DIFFERENCE_CONDITION(""the difference between the upper and lower bound must be larger than twice the initial trust region radius ({0})""),",4,0,0,3,6,0,6,0,0,11,150,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,266,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),",2,0,0,3,6,0,0,0,0,3,87,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,267,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",2,0,0,4,8,0,0,0,0,3,101,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,268,"    SIGNIFICANCE_LEVEL(""significance level ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,270,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),",12,2,0,6,12,0,0,0,0,16,96,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,271,"    OUT_OF_RANGE(""out of range""), /* keep */",2,0,0,1,2,0,0,0,0,3,40,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,272,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */",2,0,0,5,10,0,0,0,0,3,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,273,"    OUTLINE_BOUNDARY_LOOP_OPEN(""an outline boundary loop is open""),",6,0,0,1,2,0,8,0,0,15,63,5,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,274,"    OVERFLOW_IN_FRACTION(""overflow in fraction {0}/{1}, cannot negate""),",2,0,0,3,6,0,0,0,0,3,68,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,275,"    OVERFLOW_IN_ADDITION(""overflow in addition: {0} + {1}""),",4,0,0,3,6,1,2,0,0,8,56,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,277,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",2,0,0,3,6,0,0,0,0,3,108,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,278,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),",2,0,0,3,6,0,0,0,0,3,99,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,279,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,91,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,280,"    POLYNOMIAL(""polynomial""), /* keep */",2,0,0,1,2,0,0,0,0,3,36,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,281,"    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(""number of polynomial interpolants must match the number of segments ({0} != {1} - 1)""),",2,0,0,4,8,0,0,0,0,3,130,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,282,"    POPULATION_LIMIT_NOT_POSITIVE(""population limit has to be positive""),",20,3,1,1,2,2,8,2,0,40,69,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,283,"    POSITION_SIZE_MISMATCH_INPUT_ARRAY(""position {0} and size {1} don't fit to the size of the input array {2}""),",2,0,0,4,8,0,0,0,0,3,109,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,284,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",2,0,0,4,8,0,0,0,0,3,90,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,285,"    PROPAGATION_DIRECTION_MISMATCH(""propagation direction mismatch""),",2,0,0,1,2,0,0,0,0,3,65,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,288,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),",2,0,0,3,6,0,0,0,0,3,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,289,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,6,0,0,9,72,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,290,"    ROW_INDEX(""row index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,40,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,291,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",2,0,0,7,14,0,0,0,0,3,126,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,292,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,98,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,293,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,113,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,294,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",8,1,0,1,2,0,0,0,0,10,66,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,295,"    SIMPLE_MESSAGE(""{0}""),",2,0,0,2,4,0,0,0,0,3,22,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,296,"    SINGULAR_MATRIX(""matrix is singular""), /* keep */",2,0,0,1,2,0,0,0,0,3,49,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,297,"    SUBARRAY_ENDS_AFTER_ARRAY_END(""subarray ends after array end""),",2,0,0,1,2,0,0,0,0,3,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,298,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),",4,0,0,3,6,1,0,0,0,6,87,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,299,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),",2,0,0,3,6,0,0,0,0,3,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,300,"    TOO_MUCH_CANCELLATION(""too much cancellation in a denominator""),",2,0,0,1,2,0,0,0,0,3,64,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,301,"    TOO_MANY_REGRESSORS(""too many regressors ({0}) specified, only {1} in the model""),",2,0,0,4,8,0,0,0,0,3,82,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,304,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),",2,0,0,3,6,0,0,0,0,3,120,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,306,"    TRUST_REGION_STEP_FAILED(""trust region step has failed to reduce Q""),",2,0,0,1,2,0,0,0,0,3,69,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,307,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),",4,0,1,2,4,0,0,0,0,8,76,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,308,"    TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED(""two or more values required in each category, one has {0}""),",2,0,0,2,4,0,0,0,0,3,101,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,309,"    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(""unable to bracket optimum in line search""),",2,1,0,1,2,0,0,0,0,3,85,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,310,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),",2,0,0,1,2,0,0,0,0,3,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,311,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),",2,0,0,1,2,0,0,0,0,3,95,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,312,"    UNABLE_TO_ORTHOGONOLIZE_MATRIX(""unable to orthogonalize matrix in {0} iterations""),",2,0,0,2,4,0,0,0,0,3,83,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,313,"    UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN(""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix""),",2,0,0,3,6,0,0,0,0,3,117,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,314,"    UNABLE_TO_SOLVE_SINGULAR_PROBLEM(""unable to solve: singular problem""),",6,0,0,1,2,1,0,0,0,8,70,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,316,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),",2,0,0,20,40,0,0,0,0,2,118,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,317,"    CANNOT_PARSE_AS_TYPE(""string {0} unparseable (from position {1}) as an object of type {2}""), /* keep */",4,0,0,5,10,0,0,0,0,5,103,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,318,"    CANNOT_PARSE(""string {0} unparseable (from position {1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,70,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,319,"    UNPARSEABLE_3D_VECTOR(""unparseable 3D vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,320,"    UNPARSEABLE_COMPLEX_NUMBER(""unparseable complex number: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,66,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,322,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,60,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,323,"    UNSUPPORTED_EXPANSION_MODE(""unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})""),",2,1,0,8,16,0,2,0,0,6,106,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,324,"    UNSUPPORTED_OPERATION(""unsupported operation""), /* keep */",2,0,0,1,2,0,0,0,0,3,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,325,"    ARITHMETIC_EXCEPTION(""arithmetic exception""), /* keep */",2,0,0,1,2,0,0,0,0,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,326,"    ILLEGAL_STATE(""illegal state""), /* keep */",2,0,0,1,2,0,0,0,0,3,42,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,329,"    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(""{0} values have been added before statistic is configured""),",4,0,0,2,4,1,6,4,0,16,103,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,332,"    WEIGHT_AT_LEAST_ONE_NON_ZERO(""weigth array must contain at least one non-zero value""),",2,0,0,1,2,0,0,0,0,3,86,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,333,"    WRONG_BLOCK_LENGTH(""wrong array shape (block length = {0}, expected {1})""),",8,1,0,4,8,0,0,0,0,11,75,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,334,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),",8,3,0,3,6,0,0,0,0,12,64,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,335,"    NUMBER_OF_POINTS(""number of points ({0})""), /* keep */",4,0,0,3,6,0,0,0,0,5,54,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,336,"    ZERO_DENOMINATOR(""denominator must be different from 0""),",2,0,0,1,2,0,0,0,0,3,57,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,338,"    ZERO_FRACTION_TO_DIVIDE_BY(""the fraction to divide by must not be zero: {0}/{1}""),",2,0,0,3,6,0,0,0,0,3,82,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,339,"    ZERO_NORM(""zero norm""),",4,0,0,1,2,0,0,0,0,5,23,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,340,"    ZERO_NORM_FOR_ROTATION_AXIS(""zero norm for rotation axis""),",2,0,0,1,2,0,0,0,0,3,59,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,39,public enum LocalizedFormats implements Localizable {,2,0,0,0,1,1,0,2,0,5,53,1,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,43,        if (array != null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,44,            for (Object o : array) {,4,0,0,1,3,0,0,2,0,6,24,6,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,45,                if (o instanceof Object[]) {,2,0,0,2,5,0,0,2,0,4,28,9,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,46,                    for (Object oR : flatten((Object[]) o)) {,4,0,0,4,9,0,2,4,0,10,41,10,0.25,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,67,    },2,0,0,0,1,0,0,0,0,2,1,9,1.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,369,        OpenMapRealVector res = new OpenMapRealVector(this);,8,0,0,1,2,0,0,4,0,12,52,1,1.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,370,        Iterator iter = res.entries.iterator();,2,0,0,1,2,0,0,0,0,3,39,8,1.0,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,372,            iter.advance();,4,1,1,1,2,0,0,0,0,7,15,9,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,51,43,"        super(DEFAULT_ABSOLUTE_ACCURACY, Method.REGULA_FALSI);",6,0,0,1,2,0,0,0,0,6,54,4,0.125,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,51,44,    },6,2,0,0,1,3,4,0,0,15,1,2,0.125,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,313,"  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {",10,0,0,1,3,1,6,8,0,25,69,2,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,317,  double u2u2 = u2.getNormSq();,2,0,0,1,2,0,4,0,0,6,29,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,318,  double v1v1 = v1.getNormSq();,18,5,0,1,2,0,4,4,0,31,29,3,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,320,  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {,6,2,1,5,11,0,8,0,0,20,63,3,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,325,"  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);",12,1,0,2,4,0,4,2,0,20,50,3,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,328,  double u1u2   = u1.dotProduct(u2);,14,1,0,1,2,0,0,0,0,16,34,3,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,329,  double v1v2   = v1.dotProduct(v2);,2,0,0,1,2,0,6,0,0,8,34,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,332,  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));,14,5,0,3,6,0,4,0,0,23,79,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,337,  Vector3D uRef  = u1;,2,0,0,0,0,3,0,4,0,10,20,2,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,338,  Vector3D vRef  = v1;,4,0,0,0,0,0,0,2,0,6,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,342,  Vector3D u3    = u1.crossProduct(u2);,2,0,0,1,2,0,0,0,0,2,37,3,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,343,  double c       = k.dotProduct(u3);,2,0,1,1,2,1,0,0,0,5,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,378,  c = FastMath.sqrt(c);,2,0,0,1,2,0,6,0,0,9,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,379,  double inv = 1.0 / (c + c);,10,2,0,1,2,0,0,0,0,13,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,380,  q1 = inv * k.getX();,4,1,0,1,2,0,4,0,0,10,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,381,  q2 = inv * k.getY();,12,2,0,1,2,1,4,0,0,21,20,3,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,382,  q3 = inv * k.getZ();,4,1,0,1,2,0,4,0,0,10,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,388,  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());,2,1,0,3,6,0,0,0,0,3,46,6,1.0,0,0
defect4j,math,org/apache/commons/math/complex/Complex,53,153,"        return createComplex(real + rhs.getReal(),",0,0,0,1,3,1,0,0,0,5,42,4,0.05263,1,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2119,            buffer[--q] = '-';,50,9,1,1,2,0,0,2,0,66,18,3,0.08333,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,85,        Iterator() {,2,0,0,1,3,0,0,0,0,2,12,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,75,        private final int[] counter = new int[dimension];,4,1,1,2,4,2,2,0,0,18,49,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,79,        private int count = -1;,2,0,0,0,0,1,0,0,0,4,23,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,86,            counter[last] = -1;,2,0,0,1,2,0,12,0,0,15,19,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,147,            return counter[dim];,0,0,1,1,2,1,0,0,0,4,20,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,205,        return dimension;,2,0,0,0,0,1,12,0,0,14,17,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,217,        if (index < 0 ||,8,5,1,0,1,0,6,0,0,23,16,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,272,        return count + c[last];,8,1,0,1,2,1,0,0,0,10,23,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,46,public class MultidimensionalCounter implements Iterable<Integer> {,2,0,0,0,1,1,0,4,0,7,67,1,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,69,"        this(random, EmptyClusterStrategy.LARGEST_VARIANCE);",6,0,0,1,2,0,0,0,0,6,52,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,134,        return clusters;,2,0,0,0,0,1,0,0,0,2,16,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,178,"                final Cluster<T> nearest = getNearestCluster(resultSet, p);",6,1,0,1,2,0,0,0,0,8,59,12,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,179,                final double d = p.distanceFrom(nearest.getCenter());,2,0,0,2,4,1,12,0,0,15,53,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,180,                sum += d * d;,2,0,1,0,0,0,6,0,0,19,13,8,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,181,                dx2[i] = sum;,2,0,1,1,2,0,0,0,0,7,13,8,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,186,            final double r = random.nextDouble() * sum;,6,1,0,1,2,0,0,0,0,7,43,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,187,            for (int i = 0 ; i < dx2.length; i++) {,20,1,0,1,3,0,0,2,0,25,39,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,188,                if (dx2[i] >= r) {,4,0,0,2,5,0,0,0,0,5,18,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,189,                    final T p = pointSet.remove(i);,2,1,0,1,2,0,0,0,0,3,31,6,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,182,            } catch (OutOfRangeException e) {,2,0,0,1,4,0,0,2,0,4,33,7,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,183,                fwhmApprox = points[points.length - 1].getX() - points[0].getX();,0,0,0,4,8,0,8,0,0,9,65,4,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,271,            double minY = Double.POSITIVE_INFINITY;,6,0,0,0,0,0,0,0,0,6,39,6,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,272,            double maxY = Double.NEGATIVE_INFINITY;,16,3,0,0,0,0,0,0,0,20,39,3,0.5,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,73,        this.min = min;,14,1,0,0,0,0,0,0,0,17,15,3,0.5,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,74,        this.boundIsAllowed = boundIsAllowed;,20,4,0,0,0,0,6,2,0,33,37,3,0.5,0,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,47,    },8,0,0,0,1,0,4,2,0,16,1,3,0.5,0,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,62,"        super(specific, LocalizedFormats.OUT_OF_RANGE_SIMPLE,",6,0,0,0,1,0,0,0,0,6,53,4,0.5,0,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,64,        this.lo = lo;,12,1,1,0,0,0,8,0,0,28,13,3,0.5,0,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,65,        this.hi = hi;,4,0,0,0,0,0,0,0,0,5,13,4,0.5,0,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,66,    },0,0,0,0,1,0,8,0,0,8,1,5,0.5,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,188,"    private DfpField(final int decimalDigits, final boolean computeConstants) {",6,0,0,1,3,3,0,0,0,9,75,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,190,        this.radixDigits = (decimalDigits < 13) ? 4 : (decimalDigits + 3) / 4;,4,1,0,2,4,0,0,0,0,5,70,9,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,191,        this.rMode       = RoundingMode.ROUND_HALF_EVEN;,8,0,0,0,0,1,4,0,0,14,48,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,192,        this.ieeeFlags   = 0;,6,1,0,0,0,0,0,0,0,8,21,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,194,"        this.one         = new Dfp(this, 1);",2,0,0,1,2,0,0,2,0,5,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,195,"        this.two         = new Dfp(this, 2);",2,0,0,1,2,0,0,0,0,2,36,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,205,                computeStringConstants((decimalDigits < 67) ? 200 : (3 * decimalDigits));,12,3,0,3,6,1,12,0,0,30,73,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,208,"                sqr2           = new Dfp(this, sqr2String);",4,0,0,1,2,0,0,0,0,5,43,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,209,                sqr2Split      = split(sqr2String);,2,1,0,1,2,0,0,0,0,3,35,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,211,"                sqr3           = new Dfp(this, sqr3String);",4,0,0,1,2,0,0,2,0,7,43,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,212,"                sqr3Reciprocal = new Dfp(this, sqr3ReciprocalString);",10,3,0,1,2,0,0,0,0,14,53,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,213,"                pi             = new Dfp(this, piString);",4,0,0,1,2,0,6,0,0,10,41,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,214,                piSplit        = split(piString);,4,0,0,1,2,0,4,2,0,11,33,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,216,                eSplit         = split(eString);,2,0,0,1,2,0,4,0,0,7,32,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,217,"                ln2            = new Dfp(this, ln2String);",6,0,0,1,2,1,2,0,0,11,42,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,218,                ln2Split       = split(ln2String);,2,1,0,1,2,0,0,0,0,3,34,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,219,"                ln5            = new Dfp(this, ln5String);",6,0,0,1,2,0,6,2,0,15,42,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,220,                ln5Split       = split(ln5String);,2,0,0,1,2,0,4,0,0,7,34,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,226,            sqr2           = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,227,            sqr2Split      = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,228,            sqr2Reciprocal = null;,2,0,0,0,0,3,6,0,0,11,22,1,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,229,            sqr3           = null;,2,0,0,0,0,1,0,0,0,3,22,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,230,            sqr3Reciprocal = null;,16,4,0,0,0,4,10,4,0,40,22,1,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,232,            piSplit        = null;,4,0,0,0,0,0,0,0,0,5,22,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,233,            e              = null;,10,1,0,0,0,1,0,0,0,13,22,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,234,            eSplit         = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,235,            ln2            = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,237,            ln5            = null;,2,0,0,0,0,0,0,0,0,3,22,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,238,            ln5Split       = null;,4,0,0,0,0,3,0,0,0,8,22,1,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,242,    },6,2,0,0,1,1,0,0,0,9,1,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,266,        return rMode;,4,0,0,0,0,1,0,0,0,5,13,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,328,        ieeeFlags |= bits & (FLAG_INVALID | FLAG_DIV_ZERO | FLAG_OVERFLOW | FLAG_UNDERFLOW | FLAG_INEXACT);,2,0,0,1,2,3,0,2,0,7,99,1,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,329,    },4,1,0,0,1,0,0,0,0,5,1,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,400,        return zero;,14,3,0,0,0,1,0,0,0,18,12,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,523,      boolean leading = true;,2,0,0,0,0,0,0,0,0,3,23,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,527,      char[] buf = new char[a.length()];,2,0,0,3,6,0,4,0,0,6,34,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,529,      for (int i = 0; i < buf.length; i++) {,10,1,0,1,3,0,0,0,0,12,38,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,530,        buf[i] = a.charAt(i);,2,0,0,2,4,0,14,0,0,17,21,13,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,532,        if (buf[i] >= '1' && buf[i] <= '9') {,8,3,1,3,7,0,0,2,0,29,37,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,547,            sig ++;,4,0,0,0,0,0,0,0,0,5,7,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,551,"      result[0] = new Dfp(this, new String(buf, 0, sp));",4,0,1,3,6,0,0,4,0,11,50,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,554,        buf[i] = a.charAt(i);,2,0,1,2,4,0,6,0,0,20,21,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,556,            buf[i] = '0';,0,0,1,1,2,0,0,0,0,6,13,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,560,"      result[1] = new Dfp(this, new String(buf));",10,0,1,3,6,0,0,4,0,18,43,0,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,562,      return result;,2,0,0,0,0,1,0,0,0,2,14,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,570,        if (sqr2String == null || sqr2String.length() < highPrecisionDecimalDigits - 3) {,8,1,0,2,5,0,0,0,0,11,81,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,574,"            final Dfp highPrecisionOne        = new Dfp(highPrecisionField, 1);",6,0,0,1,2,1,0,4,0,12,67,0,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,575,"            final Dfp highPrecisionTwo        = new Dfp(highPrecisionField, 2);",6,0,0,1,2,1,4,6,0,18,67,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,576,"            final Dfp highPrecisionThree      = new Dfp(highPrecisionField, 3);",4,0,0,1,2,1,0,4,0,9,67,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,578,            final Dfp highPrecisionSqr2 = highPrecisionTwo.sqrt();,2,0,0,1,2,1,4,2,0,9,54,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,582,            final Dfp highPrecisionSqr3 = highPrecisionThree.sqrt();,2,0,0,1,2,1,4,2,0,9,56,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,583,            sqr3String           = highPrecisionSqr3.toString();,6,1,1,1,2,0,10,0,0,21,52,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,586,"            piString   = computePi(highPrecisionOne, highPrecisionTwo, highPrecisionThree).toString();",4,1,0,2,4,0,10,0,0,16,90,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,588,"            ln2String  = computeLn(highPrecisionTwo, highPrecisionOne, highPrecisionTwo).toString();",0,0,0,2,4,0,6,0,0,6,88,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,589,"            ln5String  = computeLn(new Dfp(highPrecisionField, 5),  highPrecisionOne, highPrecisionTwo).toString();",4,0,0,3,6,0,8,2,0,15,103,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,590,"            ln10String = computeLn(new Dfp(highPrecisionField, 10), highPrecisionOne, highPrecisionTwo).toString();",16,3,1,3,6,0,16,2,0,47,103,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,615,        for (int i = 1; i < 20; i++) {,6,1,0,1,3,0,0,0,0,8,30,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,616,            final Dfp ykM1 = yk;,2,0,0,0,0,0,0,0,0,3,20,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,618,            final Dfp y2         = yk.multiply(yk);,2,0,0,1,2,1,6,2,0,11,39,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,619,            final Dfp oneMinusY4 = one.subtract(y2.multiply(y2));,2,0,0,2,4,1,10,2,0,15,53,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,620,            final Dfp s          = oneMinusY4.sqrt().sqrt();,2,0,0,2,4,1,6,2,0,11,48,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,621,            yk = one.subtract(s).divide(one.add(s));,2,0,0,3,6,0,14,0,0,17,40,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,623,            two2kp3 = two2kp3.multiply(four);,2,0,0,1,2,0,6,0,0,9,33,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,627,            ak = ak.multiply(p2.multiply(p2)).subtract(two2kp3.multiply(yk).multiply(one.add(yk).add(yk.multiply(yk))));,2,0,0,8,16,0,34,0,0,37,108,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,629,            if (yk.equals(ykM1)) {,2,1,0,2,5,0,6,0,0,9,22,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,645,        Dfp y  = new Dfp(one);,4,0,0,1,2,0,0,4,0,8,22,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,647,        Dfp f  = new Dfp(one);,4,0,0,1,2,0,0,4,0,8,22,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,649,        Dfp x  = new Dfp(one);,4,0,0,1,2,0,0,4,0,8,22,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,651,        for (int i = 0; i < 10000; i++) {,6,1,0,1,3,0,0,0,0,8,33,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,652,            x = x.multiply(a);,2,0,0,1,2,0,6,0,0,9,18,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,653,            y = y.add(x.divide(f));,2,0,0,2,4,0,10,0,0,13,23,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,654,            fi = fi.add(one);,8,1,0,1,2,0,8,0,0,19,17,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,655,            f = f.multiply(fi);,2,0,0,1,2,0,6,0,0,9,19,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,656,            if (y.equals(py)) {,6,0,0,2,5,2,8,0,0,16,19,1,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,659,            py = new Dfp(y);,4,0,0,1,2,0,0,2,0,7,16,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,728,        int den = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,729,"        Dfp x = a.add(new Dfp(a.getField(), -1)).divide(a.add(one));",2,0,0,5,10,0,16,4,0,23,60,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,731,        Dfp y = new Dfp(x);,20,3,0,1,2,0,0,4,0,29,19,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,733,        Dfp py = new Dfp(y);,4,0,0,1,2,0,0,4,0,8,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,734,        for (int i = 0; i < 10000; i++) {,8,1,0,1,3,0,0,0,0,10,33,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,735,            num = num.multiply(x);,2,0,0,1,2,0,6,0,0,9,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,736,            num = num.multiply(x);,2,0,0,1,2,0,6,0,0,9,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,737,            den = den + 2;,18,2,0,0,0,1,0,0,0,25,14,1,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,738,            Dfp t = num.divide(den);,2,0,0,1,2,0,6,2,0,10,24,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,739,            y = y.add(t);,4,1,0,1,2,0,10,0,0,16,13,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,741,                break;,0,0,0,0,0,0,6,0,0,6,6,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,743,            py = new Dfp(y);,8,1,1,1,2,0,6,2,0,21,16,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,29,    public enum RoundingMode {,2,0,0,0,1,1,0,0,0,3,26,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,32,"        ROUND_DOWN,",4,0,0,0,0,0,0,2,0,6,11,1,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,35,"        ROUND_UP,",2,0,0,0,0,0,0,0,0,2,9,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,38,"        ROUND_HALF_UP,",2,0,0,0,0,0,0,0,0,2,14,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,46,"        ROUND_HALF_EVEN,",2,0,0,0,0,0,0,2,0,5,16,1,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,52,"        ROUND_CEIL,",4,0,0,0,0,3,0,0,0,7,11,1,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,55,        ROUND_FLOOR;,2,0,0,0,0,0,0,0,0,2,12,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,203,    },4,0,0,0,1,0,0,2,0,7,1,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,209,"    protected Dfp(final DfpField field, long x) {",6,0,0,1,3,2,0,2,0,10,45,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,213,        nans = FINITE;,4,0,0,0,0,0,0,0,0,5,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,214,        this.field = field;,4,0,0,0,0,0,0,0,0,5,19,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,217,        if (x == Long.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,225,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,226,            sign = -1;,2,0,0,0,0,0,0,0,0,4,10,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,234,"            System.arraycopy(mant, mant.length - exp, mant, mant.length - 1 - exp, exp);",12,2,0,1,2,0,10,0,0,24,76,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,235,            mant[mant.length - 1] = (int) (x % RADIX);,18,3,1,3,6,0,0,0,0,26,42,1,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,236,            x /= RADIX;,4,0,0,0,0,0,0,0,0,5,11,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,318,    public Dfp(final Dfp d) {,4,0,0,1,3,2,0,2,0,8,25,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,319,        mant  = d.mant.clone();,8,1,0,1,2,0,12,0,0,23,23,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,321,        exp   = d.exp;,6,0,0,0,0,0,0,0,0,7,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,322,        nans  = d.nans;,4,0,0,0,0,1,0,2,0,7,15,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,324,    },4,0,0,0,1,1,4,0,0,9,1,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,330,"    protected Dfp(final DfpField field, final String s) {",6,0,0,1,3,3,0,4,0,13,53,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,333,        mant = new int[field.getRadixDigits()];,2,0,0,2,4,0,4,0,0,7,39,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,334,        sign = 1;,2,0,0,0,0,0,0,0,0,3,9,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,335,        exp = 0;,6,1,0,0,0,1,0,2,0,11,8,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,336,        nans = FINITE;,10,2,1,0,0,0,0,0,0,16,14,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,337,        this.field = field;,4,0,0,0,0,0,0,0,0,5,19,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,339,        boolean decimalFound = false;,2,0,0,0,0,0,0,0,0,3,29,5,0.03571,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,196,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,197,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",2,1,1,3,6,0,0,0,0,8,63,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,198,"    NOT_POWER_OF_TWO(""{0} is not a power of 2""),",2,0,0,2,4,0,0,0,0,3,44,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,200,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",2,0,0,2,4,0,0,0,0,3,62,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,201,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,202,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,107,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,203,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",2,0,0,1,2,0,0,0,0,3,79,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,204,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,205,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */",6,0,0,6,12,0,0,0,0,8,107,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,207,"    NOT_SYMMETRIC_MATRIX(""not symmetric matrix""),",2,0,0,1,2,0,0,0,0,3,45,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,208,"    NO_BIN_SELECTED(""no bin selected""),",2,0,0,1,2,0,0,0,0,3,35,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,210,"    NO_DATA(""no data""), /* keep */",2,0,0,1,2,0,0,0,0,3,30,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,211,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",2,0,0,4,8,0,0,0,0,3,82,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,213,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",2,0,0,1,2,0,0,0,0,3,45,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,214,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""), /* keep */",2,0,0,1,2,0,0,0,0,3,62,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,215,"    NO_RESULT_AVAILABLE(""no result available""),",2,0,0,1,2,0,0,0,0,3,43,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,216,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",2,0,0,6,12,0,0,0,0,3,75,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,219,"    DENOMINATOR(""denominator""), /* keep */",4,0,0,1,2,0,0,0,0,5,38,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,220,"    DENOMINATOR_FORMAT(""denominator format""), /* keep */",2,0,0,1,2,0,0,0,0,3,52,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,221,"    FRACTION(""fraction""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,222,"    FUNCTION(""function""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,223,"    IMAGINARY_FORMAT(""imaginary format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,224,"    INPUT_ARRAY(""input array""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,225,"    NUMERATOR(""numerator""), /* keep */",2,0,0,1,2,0,0,0,0,4,34,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,226,"    NUMERATOR_FORMAT(""numerator format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,228,"    REAL_FORMAT(""real format""), /* keep */",8,0,0,1,2,1,6,2,0,18,38,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,229,"    WHOLE_FORMAT(""whole format""), /* keep */",2,0,0,1,2,0,0,0,0,3,40,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,230,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,68,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,231,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,69,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,232,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,97,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,233,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,98,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,235,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",4,1,1,2,4,0,0,0,0,10,87,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,237,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",12,2,0,2,4,0,0,0,0,16,76,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,239,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),",2,0,0,3,6,0,0,0,0,3,87,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,240,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",2,0,0,4,8,0,0,0,0,3,101,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,241,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",2,0,0,5,10,0,0,0,0,3,150,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,243,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */",2,0,0,5,10,0,0,0,0,3,62,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,244,"    OVERFLOW_IN_FRACTION(""overflow in fraction {0}/{1}, cannot negate""),",2,0,0,3,6,0,8,0,0,12,68,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,246,"    OVERFLOW_IN_SUBTRACTION(""overflow in subtraction: {0} - {1}""),",2,0,0,3,6,0,0,0,0,3,62,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,247,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",2,0,1,3,6,0,0,0,0,8,108,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,248,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),",10,2,0,3,6,0,0,0,0,14,99,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,249,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,91,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,250,"    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(""number of polynomial interpolants must match the number of segments ({0} != {1} - 1)""),",2,0,0,4,8,0,0,0,0,3,130,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,251,"    POPULATION_LIMIT_NOT_POSITIVE(""population limit has to be positive""),",10,1,0,1,2,0,0,0,0,13,69,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,252,"    POSITION_SIZE_MISMATCH_INPUT_ARRAY(""position {0} and size {1} don't fit to the size of the input array {2}""),",6,2,0,4,8,0,0,0,0,9,109,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,253,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",6,0,0,4,8,0,0,2,0,9,90,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,255,"    RANDOMKEY_MUTATION_WRONG_CLASS(""RandomKeyMutation works only with RandomKeys, not {0}""),",2,0,0,2,4,0,0,0,0,3,88,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,256,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",2,0,0,1,2,0,0,0,0,3,77,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,257,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),",2,0,0,3,6,0,0,0,0,3,75,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,258,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,72,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,259,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",2,0,0,7,14,0,0,0,0,3,126,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,260,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,98,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,261,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),",4,0,0,5,10,0,0,0,0,6,113,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,262,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",2,0,0,1,2,0,0,0,0,3,66,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,263,"    SIMPLE_MESSAGE(""{0}""),",2,0,0,2,4,0,0,0,0,3,22,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,265,"    SUBARRAY_ENDS_AFTER_ARRAY_END(""subarray ends after array end""),",2,0,0,1,2,0,0,0,0,3,63,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,267,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),",2,0,0,3,6,0,0,0,0,3,97,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,269,"    TOO_SMALL_COST_RELATIVE_TOLERANCE(""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible""),",4,0,0,3,6,0,0,0,0,5,136,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,270,"    TOO_SMALL_INTEGRATION_INTERVAL(""too small integration interval: length = {0}""),",2,0,0,2,4,0,0,0,0,3,79,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,271,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),",2,0,0,3,6,0,0,0,0,3,120,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,272,"    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible""),",2,0,0,3,6,0,0,0,0,3,156,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,273,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),",4,0,0,2,4,0,0,0,0,5,76,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,274,"    TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED(""two or more values required in each category, one has {0}""),",2,0,0,2,4,0,0,0,0,3,101,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,275,"    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(""unable to bracket optimum in line search""),",2,0,0,1,2,0,0,0,0,3,85,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,276,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),",2,0,0,1,2,0,0,0,0,3,97,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,277,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),",2,0,0,1,2,0,0,0,0,3,95,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,278,"    UNABLE_TO_ORTHOGONOLIZE_MATRIX(""unable to orthogonalize matrix in {0} iterations""),",4,3,0,2,4,0,12,0,0,19,83,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,280,"    UNABLE_TO_SOLVE_SINGULAR_PROBLEM(""unable to solve: singular problem""),",2,0,0,1,2,0,0,0,0,3,70,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,281,"    UNBOUNDED_SOLUTION(""unbounded solution""),",2,0,0,1,2,0,0,0,0,3,41,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,282,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),",4,1,0,20,40,1,0,0,0,6,118,3,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,283,"    UNPARSEABLE_3D_VECTOR(""unparseable 3D vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,56,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,284,"    UNPARSEABLE_COMPLEX_NUMBER(""unparseable complex number: \""{0}\""""),",10,1,1,2,4,0,0,0,0,17,66,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,285,"    UNPARSEABLE_FRACTION_NUMBER(""unparseable fraction number: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,68,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,287,"    UNSUPPORTED_EXPANSION_MODE(""unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})""),",0,0,0,8,16,0,0,0,0,24,106,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,289,"    URL_CONTAINS_NO_DATA(""URL {0} contains no data""),",2,0,0,2,4,0,0,0,0,3,49,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,291,"    VECTOR_LENGTH_MISMATCH(""vector length mismatch: got {0} but expected {1}""),",2,0,0,3,6,0,0,0,0,3,75,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,294,"    WRONG_BLOCK_LENGTH(""wrong array shape (block length = {0}, expected {1})""),",2,0,0,4,8,0,0,0,0,3,75,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,295,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),",2,0,0,3,6,0,0,0,0,3,64,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,296,"    NUMBER_OF_POINTS(""number of points ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,54,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,298,"    ZERO_DENOMINATOR_IN_FRACTION(""zero denominator in fraction {0}/{1}""),",2,0,0,3,6,0,0,0,0,3,69,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,299,"    ZERO_FRACTION_TO_DIVIDE_BY(""the fraction to divide by must not be zero: {0}/{1}""),",2,0,0,3,6,0,0,0,0,3,82,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,300,"    ZERO_NORM(""zero norm""),",2,0,0,1,2,0,2,0,0,5,23,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,302,"    ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR(""zero norm for rotation defining vector""),",2,0,0,1,2,0,0,0,0,3,81,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,303,"    ZERO_NOT_ALLOWED(""zero not allowed here"");",8,1,0,1,2,0,0,0,0,11,42,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,39,public enum LocalizedFormats implements Localizable {,2,0,0,0,1,1,0,2,0,5,53,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,35,    private static final double EXP_INT_TABLE_A[] = new double[1500];,2,0,0,2,4,3,0,0,0,5,65,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,40,    private static final double EXP_INT_TABLE_B[] = new double[1500];,6,3,0,2,4,0,4,0,0,14,65,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,53,    private static final double FACT[] = new double[20];,2,1,0,2,4,3,12,0,0,18,52,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,65,    private static final double LN_SPLIT_COEF[][] = {,6,0,0,2,5,0,0,0,0,6,49,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,98,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,51,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,114,    private static final double COSINE_TABLE_A[] = new double[14];,6,5,0,2,4,0,0,0,0,11,62,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,120,    private static final double TANGENT_TABLE_A[] = new double[14];,4,0,0,2,4,3,6,0,0,14,63,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,126,    private static long RECIP_2PI[] = new long[] {,4,1,1,2,5,0,0,0,0,15,46,0,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,155,"    private static final double EIGHTHES[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",2,0,0,2,4,3,0,0,0,5,127,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,158,"    private static final double CBRTTWO[] = { 0.6299605249474366,",2,1,0,1,3,0,0,0,0,4,61,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,170,        for (i = 1; i < 20; i++) {,12,2,0,1,3,0,4,0,0,20,26,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,171,            FACT[i] = FACT[i-1] * i;,4,2,1,2,4,0,0,0,0,13,24,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,174,        double tmp[] = new double[2];,2,0,0,2,4,0,0,0,0,2,29,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,178,        for (i = 0; i < 750; i++) {,4,0,0,1,3,1,0,0,0,5,27,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,183,            if (i != 0) {,2,1,0,1,3,0,6,0,0,9,13,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,192,        for (i = 0; i < 1025; i++) {,6,1,0,1,3,0,0,0,0,9,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,205,        buildSinCosTables();,2,0,0,1,2,1,8,0,0,11,20,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,684,"        split(x, xs);",2,0,0,1,2,0,0,0,0,3,13,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,685,        ys[0] = ys[1] = 0.0;,4,0,1,2,4,0,0,0,0,8,20,14,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,687,        for (int i = 19; i >= 0; i--) {,8,1,0,1,3,0,0,0,0,10,31,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,690,            ys[1] = as[1];,8,1,0,2,4,1,8,0,0,19,14,0,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,695,"            splitAdd(ys, facts, as);",2,0,0,1,2,0,0,0,0,2,24,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,696,            ys[0] = as[0];,4,1,0,2,4,1,0,0,0,6,14,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,697,            ys[1] = as[1];,4,0,0,2,4,0,0,2,0,7,14,0,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,700,        if (result != null) {,10,2,1,1,3,0,0,0,0,15,21,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,702,            result[1] = ys[1];,6,2,0,2,4,0,0,0,0,10,18,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,715,            final double a = d * 1073741824.0;,4,1,0,0,0,1,0,0,0,6,34,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,730,        final double c = a[0] + a[1];,4,1,1,2,4,2,0,0,0,11,29,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,738,            double z = c * 9.31322574615478515625E-10;,2,0,0,0,0,0,0,0,0,2,42,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,739,            a[0] = (c + z - c) * 1073741824.0;,8,4,1,2,4,0,0,0,0,15,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,740,            a[1] = c - a[0] + d;,4,2,1,2,4,0,0,0,0,11,20,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,742,    },4,0,0,0,1,0,0,0,0,5,1,0,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,751,        ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];,0,0,0,7,14,0,0,0,0,21,49,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,755,    },2,0,0,0,1,0,0,0,0,2,1,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,763,        ans[0] = a[0] + b[0];,2,0,0,3,6,0,4,2,0,8,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,766,        resplit(ans);,0,0,0,1,2,0,2,0,0,2,13,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,788,        final double b = 1.0/4194304.0;,4,1,0,0,0,1,0,0,0,7,31,0,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,789,        final double a = 1.0 - b;,6,1,0,0,0,1,10,0,0,19,25,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,791,        if (in[0] == 0.0) {,0,1,1,2,5,0,0,0,0,8,19,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,796,        result[0] = a / in[0];,2,1,1,2,4,0,0,0,0,8,22,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,797,        result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);,6,7,1,9,18,0,0,0,0,29,60,0,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,799,        if (result[1] != result[1]) { // can happen if result[1] is NAN,2,0,0,4,9,3,0,0,0,5,63,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,800,            result[1] = 0.0;,6,1,0,1,2,1,0,0,0,8,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,804,        resplit(result);,0,0,0,1,2,0,4,0,0,4,16,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,806,        for (int i = 0; i < 2; i++) {,6,1,1,1,3,0,6,0,0,16,29,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,811,            err = err * (result[0] + result[1]);,4,2,1,3,6,0,0,0,0,11,36,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,813,            result[1] += err;,2,0,1,1,2,0,0,0,0,5,17,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,823,        final double xs[] = new double[2];,4,0,0,2,4,2,0,4,0,10,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,824,        final double ys[] = new double[2];,6,1,0,2,4,2,0,0,0,9,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,825,        final double zs[] = new double[2];,4,1,1,2,4,2,0,0,0,11,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,828,"        split(a[0], xs);",0,0,1,2,4,0,4,0,0,6,16,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,833,        result[1] = zs[1];,4,3,1,2,4,0,0,0,0,12,18,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,836,"        split(b[1], ys);",6,3,1,2,4,0,16,0,0,27,16,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,839,        double tmp = result[0] + zs[0];,2,1,1,2,4,0,0,0,0,7,31,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,840,        result[1] = result[1] - (tmp - result[0] - zs[0]);,2,2,1,5,10,0,0,0,0,13,50,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,841,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,844,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,847,"        split(a[1], xs);",6,1,0,2,4,0,0,0,0,7,16,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,848,"        split(b[0], ys);",2,0,1,2,4,0,4,0,0,9,16,0,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,849,"        splitMult(xs, ys, zs);",8,2,0,1,2,1,0,0,0,11,22,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,851,        tmp = result[0] + zs[0];,8,0,0,2,4,0,4,0,0,12,24,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,859,"        split(a[1], xs);",6,2,1,2,4,0,4,0,0,17,16,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,861,"        splitMult(xs, ys, zs);",2,0,0,1,2,0,8,2,0,12,22,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,866,        tmp = result[0] + zs[1];,4,2,1,2,4,0,0,0,0,11,24,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,867,        result[1] = result[1] - (tmp - result[0] - zs[1]);,2,0,0,5,10,3,0,0,0,5,50,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,868,        result[0] = tmp;,0,0,0,1,2,0,2,0,0,2,16,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,878,        final double xs[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,880,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,890,        xs[1] = 1.4456468917292502E-16;,2,1,1,1,2,0,0,0,0,6,31,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,892,"        split(1.0, ys);",2,1,0,1,2,0,0,0,0,3,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,894,        while (p > 0) {,2,1,0,1,3,0,0,0,0,3,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,895,            if ((p & 1) != 0) {,2,2,0,2,5,0,0,0,0,4,19,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,903,            p >>= 1;,2,0,0,0,0,0,0,0,0,3,8,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,906,        if (result != null) {,10,4,0,1,3,1,0,0,0,15,21,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,907,            result[0] = ys[0];,0,0,1,2,4,0,0,0,0,5,18,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,908,            result[1] = ys[1];,6,0,1,2,4,1,0,0,0,12,18,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,910,            resplit(result);,6,0,0,1,2,0,4,0,0,11,16,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1398,        double y[] = new double[2];,6,0,0,2,4,0,0,0,0,7,27,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1399,        double a[] = new double[2];,2,0,0,2,4,0,0,0,0,2,27,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1405,        resplit(x);,0,0,0,1,2,0,10,0,0,10,11,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1411,        x[1] = y[1];,2,0,0,2,4,1,0,0,0,3,12,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1414,"        splitMult(x, x, x2);",2,0,0,1,2,1,10,0,0,13,20,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1420,        y[0] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][0];,2,0,0,3,6,3,0,0,0,5,48,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1421,        y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];,8,1,0,3,6,0,0,0,0,10,48,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1424,"            splitMult(y, x2, a);",0,0,0,1,2,0,8,0,0,8,20,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1425,            y[0] = a[0];,2,0,1,2,4,3,0,0,0,10,12,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1427,"            splitAdd(y, LN_SPLIT_COEF[i], a);",0,0,1,2,4,0,6,0,0,10,33,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1436,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1448,        final double facts[] = new double[2];,4,0,0,2,4,1,4,0,0,9,37,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1449,        final double as[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1453,        for (int i = 19; i >= 0; i--) {,8,1,0,1,3,0,0,0,0,11,31,0,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1455,            ys[0] = as[0]; ys[1] = as[1];,6,0,1,4,8,0,0,0,0,16,29,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1461,"            split(FACT[i], as);",0,0,1,2,4,0,4,0,0,8,19,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1464,            if ( (i & 2) != 0 ) {,4,2,0,2,5,1,6,0,0,13,21,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1465,                facts[0] = -facts[0];,2,0,1,2,4,0,4,0,0,13,21,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1466,                facts[1] = -facts[1];,2,0,0,2,4,0,4,2,0,9,21,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1469,"            splitAdd(ys, facts, as);",2,0,0,1,2,0,8,0,0,11,24,0,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1473,        if (result != null) {,6,1,0,1,3,0,0,2,0,9,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1475,            result[1] = ys[1];,6,0,1,2,4,0,6,2,0,20,18,0,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1490,        final double ys[] = new double[2];,20,6,0,2,4,1,0,0,0,28,34,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1491,        final double facts[] = new double[2];,2,0,0,2,4,1,0,0,0,3,37,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1494,        ys[0] = ys[1] = 0.0;,0,0,1,2,4,0,0,0,0,6,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1497,"            splitMult(xs, ys, as);",4,0,0,1,2,1,8,2,0,15,22,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1498,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1505,"            splitReciprocal(as, facts);",4,2,1,1,2,0,6,0,0,16,27,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1508,                facts[0] = -facts[0];,0,0,1,2,4,0,0,0,0,6,21,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1509,                facts[1] = -facts[1];,2,0,1,2,4,1,4,0,0,13,21,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1518,            result[1] = ys[1];,4,0,1,2,4,0,0,0,0,10,18,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1521,        return ys[0] + ys[1];,0,1,1,2,4,1,0,0,0,15,21,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1527,        final double result[] = new double[2];,2,0,0,2,4,1,0,0,0,3,38,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1530,        for (int i = 0; i < 7; i++) {,6,1,0,1,3,0,0,0,0,8,29,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1531,            double x = i / 8.0;,4,1,0,0,0,0,0,0,0,5,19,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1534,            SINE_TABLE_A[i] = result[0];,0,0,1,2,4,0,0,0,0,7,28,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1538,            COSINE_TABLE_A[i] = result[0];,4,2,1,2,4,0,0,0,0,14,30,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1543,        for (int i = 7; i < 14; i++) {,6,1,0,1,3,0,0,0,0,8,30,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1544,            double xs[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1546,            double as[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1552,                xs[0] = SINE_TABLE_A[i/2];,2,1,1,2,4,0,4,0,0,14,26,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1553,                xs[1] = SINE_TABLE_B[i/2];,2,1,1,2,4,0,0,0,0,8,26,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1554,                ys[0] = COSINE_TABLE_A[i/2];,14,5,0,2,4,0,0,0,0,20,28,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1559,                SINE_TABLE_A[i] = result[0] * 2.0;,0,1,1,2,4,0,0,0,0,8,34,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1560,                SINE_TABLE_B[i] = result[1] * 2.0;,0,1,1,2,4,0,0,0,0,8,34,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1563,"                splitMult(ys, ys, as);",2,0,0,1,2,0,0,0,0,3,22,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1564,"                splitMult(xs, xs, temps);",2,0,0,1,2,0,8,0,0,11,25,0,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1567,"                splitAdd(as, temps, result);",2,0,1,1,2,1,0,0,0,7,28,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1569,                COSINE_TABLE_B[i] = result[1];,10,1,0,2,4,0,0,0,0,12,30,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1572,                xs[1] = SINE_TABLE_B[i/2];,2,1,1,2,4,0,0,2,0,10,26,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1573,                ys[0] = COSINE_TABLE_A[i/2];,2,1,1,2,4,0,0,0,0,8,28,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1578,                bs[1] = COSINE_TABLE_B[i/2+1];,4,3,1,2,4,0,0,0,0,16,30,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1581,"                splitMult(xs, bs, temps);",0,0,0,1,2,0,8,0,0,8,25,9,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1589,"                splitMult(xs, as, temps);",2,0,0,1,2,0,8,0,0,10,25,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1590,                temps[0] = -temps[0];,2,0,1,2,4,0,0,0,0,9,21,0,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1593,                COSINE_TABLE_A[i] = result[0];,4,1,1,2,4,0,0,0,0,17,30,0,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1600,            double xs[] = new double[2];,0,0,0,2,4,0,14,0,0,14,28,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1601,            double ys[] = new double[2];,4,0,0,2,4,0,0,0,0,5,28,0,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1602,            double as[] = new double[2];,20,3,0,2,4,0,4,0,0,28,28,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1604,            as[0] = COSINE_TABLE_A[i];,4,1,1,2,4,0,0,0,0,17,26,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1610,            xs[1] = SINE_TABLE_B[i];,4,1,1,2,4,1,2,0,0,16,24,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1612,"            splitMult(xs, ys, as);",2,0,0,1,2,0,20,0,0,22,22,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3016,        return (x < 0l) ? -x : x;,10,1,0,1,2,1,0,0,0,12,25,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3034,        return (x < 0.0) ? -x : x;,6,1,0,1,2,1,6,0,0,14,26,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3044,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,2,2,0,3,6,1,12,0,0,16,72,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3224,        return (a <= b) ? a : (Double.isNaN(a + b) ? Double.NaN : b);,0,0,0,3,6,1,0,0,0,10,61,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,28,public class Incrementor {,2,0,0,0,1,1,0,0,0,3,26,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,44,        maximalCount = max;,4,0,0,0,0,0,0,0,0,5,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,53,        return maximalCount;,2,0,0,0,0,1,0,0,0,2,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,62,        return count;,2,0,0,0,0,1,0,0,0,2,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,93,        count = 0;,18,0,0,0,0,0,6,0,0,31,10,0,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,94,    },6,1,0,0,1,1,0,0,0,8,1,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,75,    private static final long[] FACTORIALS = new long[] {,2,0,0,2,5,3,0,0,0,5,53,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,479,        assert maxUlps > 0 && maxUlps < NAN_GAP;,6,3,0,0,0,0,0,0,0,9,40,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,482,        long yInt = Double.doubleToLongBits(y);,2,0,0,1,2,0,6,0,0,8,39,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,486,            xInt = SGN_MASK - xInt;,16,2,0,0,0,0,2,0,0,24,23,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,488,        if (yInt < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,489,            yInt = SGN_MASK - yInt;,6,1,0,0,0,0,0,0,0,8,23,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,492,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,8,2,0,1,2,1,4,0,0,15,61,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,191,"        Arrays.sort(optima, new Comparator<UnivariateRealPointValuePair>() {",6,1,0,1,4,1,0,0,0,8,68,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,194,                    if (o1 == null) {,4,1,0,1,3,3,0,4,0,12,17,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,196,                    } else if (o2 == null) {,2,1,0,1,4,0,0,0,0,3,24,11,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,199,                    final double v1 = o1.getValue();,2,0,0,1,2,1,4,0,0,7,32,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,200,                    final double v2 = o2.getValue();,4,0,0,1,2,1,4,0,0,10,32,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,201,                    return (goal == GoalType.MINIMIZE) ?,6,1,0,1,2,1,0,0,0,7,36,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,72,                                             final RandomGenerator generator) {,2,0,0,0,2,1,0,2,0,5,34,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,73,        this.optimizer = optimizer;,4,0,0,0,0,0,0,0,0,5,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,74,        this.starts = starts;,4,0,0,0,0,0,0,0,0,5,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,146,"        return optimize(f, goal, min, max, 0);",4,0,0,1,2,1,10,0,0,15,38,3,1.0,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,154,        optima = new UnivariateRealPointValuePair[starts];,2,0,1,1,2,0,0,2,0,7,50,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,155,        totalEvaluations = 0;,2,0,0,0,0,0,0,0,0,3,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,158,        for (int i = 0; i < starts; ++i) {,2,0,0,1,3,0,0,2,0,4,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,160,                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);,12,4,0,3,6,1,4,0,0,21,82,8,1.0,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,161,                final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);,12,4,0,3,6,1,4,0,0,21,82,8,1.0,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,162,"                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2));",0,0,1,4,8,0,24,0,0,29,100,8,1.0,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,169,            final int usedEvaluations = optimizer.getEvaluations();,2,0,0,1,2,1,4,0,0,7,55,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,170,            optimizer.setMaxEvaluations(optimizer.getMaxEvaluations() - usedEvaluations);,2,1,0,2,4,0,8,0,0,11,77,7,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,171,            totalEvaluations += usedEvaluations;,4,0,0,0,0,0,0,0,0,5,36,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,176,        if (optima[0] == null) {,0,1,1,2,5,0,0,0,0,3,24,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,191,"        Arrays.sort(optima, new Comparator<UnivariateRealPointValuePair>() {",2,0,0,1,4,0,6,4,0,13,68,0,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair,62,45,                                        final double value) {,2,0,0,0,2,1,0,0,0,3,21,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair,62,47,        this.value = value;,4,0,0,0,0,0,0,0,0,5,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair,62,56,        return point;,2,0,0,0,0,1,0,0,0,2,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair,62,65,        return value;,2,0,0,0,0,1,0,0,0,2,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,36,public abstract class AbstractUnivariateRealOptimizer,2,0,0,0,0,2,0,0,0,4,53,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,41,    private final Incrementor evaluations = new Incrementor();,2,0,0,1,2,2,0,4,0,8,58,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,72,        return goal;,2,0,0,0,0,1,0,0,0,2,12,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,78,        return searchMin;,2,0,0,0,0,1,0,0,0,2,17,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,84,        return searchMax;,2,0,0,0,0,1,0,0,0,2,17,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,90,        return searchStart;,2,0,0,0,0,1,0,0,0,2,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,110,        return function.value(point);,2,0,0,1,2,1,6,0,0,8,29,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,120,        if (f == null) {,2,1,0,1,3,0,0,0,0,3,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,123,        if (goalType == null) {,2,1,0,1,3,0,0,0,0,3,23,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,128,        searchMin = min;,4,0,0,0,0,0,0,0,0,5,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,129,        searchMax = max;,4,0,0,0,0,0,0,0,0,5,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,130,        searchStart = startValue;,4,0,0,0,0,0,0,0,0,5,25,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,131,        goal = goalType;,4,0,0,0,0,0,0,0,0,5,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,132,        function = f;,10,2,0,0,0,1,8,0,0,21,13,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,158,        return checker;,2,0,0,0,0,1,0,0,0,2,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,62,27,public enum GoalType implements Serializable {,4,1,0,0,1,1,0,2,0,8,46,0,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,62,30,"    MAXIMIZE,",2,0,0,0,0,0,0,0,0,2,9,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,76,                          double abs) {,4,2,1,0,2,0,0,0,0,10,13,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,77,        if (rel < MIN_RELATIVE_TOLERANCE) {,4,1,0,1,3,0,0,0,0,5,35,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,80,        if (abs <= 0) {,4,1,1,1,3,0,0,0,0,8,15,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,83,        relativeThreshold = rel;,4,0,0,0,0,0,6,0,0,11,24,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,84,        absoluteThreshold = abs;,4,0,0,0,0,0,0,0,0,5,24,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,47,    private static final double GOLDEN_SECTION = 0.5 * (3 - FastMath.sqrt(5));,2,2,0,2,4,3,4,0,0,11,74,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,51,    private static final double MIN_RELATIVE_TOLERANCE = 2 * FastMath.ulp(1d);,2,1,0,1,2,3,4,0,0,10,74,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,90,        final boolean isMinim = getGoalType() == GoalType.MINIMIZE;,6,1,0,1,2,1,2,0,0,10,59,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,91,        final double lo = getMin();,2,0,0,1,2,1,2,0,0,5,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,92,        final double mid = getStartValue();,2,0,0,1,2,1,2,0,0,5,35,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,93,        final double hi = getMax();,4,0,0,1,2,1,2,0,0,7,27,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,96,        final ConvergenceChecker<UnivariateRealPointValuePair> checker,2,0,0,0,0,1,0,4,0,7,62,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,101,        if (lo < hi) {,4,1,0,1,3,0,0,0,0,5,14,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,102,            a = lo;,4,1,1,0,0,0,0,0,0,11,7,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,103,            b = hi;,4,0,0,0,0,0,0,0,0,5,7,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,109,        double x = mid;,4,0,0,0,0,0,0,0,0,4,15,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,110,        double v = x;,4,0,0,0,0,0,0,0,0,4,13,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,111,        double w = x;,4,0,0,0,0,0,0,0,0,4,13,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,113,        double e = 0;,12,3,1,0,0,0,0,0,0,18,13,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,115,        if (!isMinim) {,2,0,0,1,3,0,0,0,0,3,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,118,        double fv = fx;,4,0,0,0,0,0,0,0,0,4,15,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,119,        double fw = fx;,4,0,0,0,0,0,0,0,0,4,15,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,121,        UnivariateRealPointValuePair previous = null;,2,0,0,0,0,0,0,2,0,4,45,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,122,        UnivariateRealPointValuePair current,2,0,0,0,0,0,0,2,0,4,36,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,125,        int iter = 0;,4,0,0,0,0,0,0,0,0,5,13,0,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,128,            final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;,6,2,0,1,2,1,6,0,0,15,76,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,129,            final double tol2 = 2 * tol1;,4,1,0,0,0,1,0,0,0,6,29,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,132,            final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);,12,5,0,2,4,1,4,0,0,22,65,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,133,            if (!stop) {,2,0,0,1,3,0,0,0,0,3,12,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,134,                double p = 0;,2,0,0,0,0,0,0,0,0,2,13,9,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,135,                double q = 0;,2,0,0,0,0,0,0,0,0,2,13,9,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,137,                double u = 0;,12,2,0,0,0,0,0,0,0,15,13,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,139,                if (FastMath.abs(e) > tol1) { // Fit parabola.,2,1,0,2,5,0,6,0,0,9,46,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,140,                    r = (x - w) * (fx - fv);,10,3,0,2,4,0,0,0,0,14,24,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,142,                    p = (x - v) * q - (x - w) * r;,14,5,0,2,4,0,0,0,0,20,30,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,143,                    q = 2 * (q - r);,14,4,0,1,2,0,4,0,0,23,16,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,145,                    if (q > 0) {,2,1,0,1,3,0,0,0,0,3,12,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,146,                        p = -p;,4,0,0,0,0,0,0,0,0,6,7,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,148,                        q = -q;,4,0,0,0,0,0,0,0,0,6,7,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,151,                    r = e;,6,0,0,0,0,0,6,2,0,15,6,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,154,                    if (p > q * (a - x) &&,10,0,0,1,3,0,0,0,0,13,22,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,158,                        d = p / q;,6,1,0,0,0,0,4,0,0,12,10,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,159,                        u = x + d;,6,1,0,0,0,0,0,0,0,8,10,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,162,                        if (u - a < tol2 || b - u < tol2) {,12,5,0,1,3,0,0,0,0,17,35,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,163,                            if (x <= m) {,4,1,0,1,3,0,0,0,0,5,13,14,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,164,                                d = tol1;,4,0,0,0,0,0,0,0,0,5,9,16,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,171,                        if (x < m) {,4,1,0,1,3,0,0,0,0,5,12,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,174,                            e = a - x;,6,1,0,0,0,0,0,0,0,8,10,14,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,180,                    if (x < m) {,4,1,0,1,3,0,0,0,0,5,12,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,183,                        e = a - x;,6,1,0,0,0,0,0,0,0,8,10,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,185,                    d = GOLDEN_SECTION * e;,6,1,0,0,0,0,0,0,0,8,23,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,189,                if (FastMath.abs(d) < tol1) {,2,1,0,2,5,0,6,0,0,9,29,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,190,                    if (d >= 0) {,2,1,0,1,3,0,0,0,0,3,13,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,191,                        u = x + tol1;,8,1,0,0,0,1,0,4,0,15,13,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,193,                        u = x - tol1;,6,1,0,0,0,0,0,0,0,8,13,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,196,                    u = x + d;,6,1,0,0,0,0,0,0,0,8,10,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,199,                double fu = computeObjectiveValue(u);,2,0,1,1,2,0,10,0,0,25,37,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,200,                if (!isMinim) {,10,2,0,1,3,0,0,0,0,14,15,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,205,                if (fu <= fx) {,4,1,0,1,3,0,0,0,0,5,15,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,206,                    if (u < x) {,4,1,0,1,3,0,0,0,0,5,12,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,209,                        a = x;,4,0,0,0,0,0,0,0,0,5,6,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,211,                    v = w;,4,0,0,0,0,0,0,0,0,5,6,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,212,                    fv = fw;,4,0,0,0,0,0,0,0,0,5,8,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,214,                    fw = fx;,4,0,0,0,0,0,0,0,0,5,8,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,215,                    x = u;,4,0,0,0,0,0,0,0,0,5,6,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,216,                    fx = fu;,4,0,0,0,0,0,0,0,0,5,8,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,218,                    if (u < x) {,8,1,0,1,3,0,0,0,0,10,12,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,219,                        a = u;,4,0,0,0,0,0,0,0,0,5,6,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,221,                        b = u;,4,0,0,0,0,0,0,0,0,5,6,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,223,                    if (fu <= fw ||,4,2,0,0,1,0,0,0,0,6,15,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,225,                        v = w;,6,0,0,0,0,0,0,0,0,8,6,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,226,                        fv = fw;,4,0,0,0,0,0,0,0,0,5,8,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,227,                        w = u;,2,0,0,0,0,0,0,0,0,3,6,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,229,                    } else if (fu <= fv ||,4,3,0,0,2,0,0,0,0,7,22,11,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,233,                        fv = fu;,4,0,0,0,0,0,0,0,0,5,8,13,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,237,                previous = current;,4,0,0,0,0,0,0,0,0,6,19,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,238,"                current = new UnivariateRealPointValuePair(x, isMinim ? fx : -fx);",12,3,1,1,2,0,0,2,0,28,66,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,241,                if (checker != null) {,2,1,0,1,3,0,0,0,0,3,22,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,247,                return current;,2,0,0,0,0,1,0,0,0,2,15,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,249,            ++iter;,2,0,0,0,0,0,0,0,0,3,7,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,33,public final class MathUtils {,2,0,0,0,1,2,0,0,0,4,30,1,0.00228,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,402,                            tmp = 0.1;,2,0,0,0,0,0,2,0,0,5,10,3,0.28571,1,1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,278,        double[][] jTj = new double[cols][cols];,2,0,0,4,8,1,2,0,0,5,40,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,279,        for (int i = 0; i < cols; ++i) {,10,1,0,1,3,0,0,0,0,13,32,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,280,            for (int j = i; j < cols; ++j) {,10,1,0,1,3,0,0,0,0,12,32,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,281,                double sum = 0;,2,0,0,0,0,0,4,0,0,6,15,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,283,                    sum += jacobian[k][i] * jacobian[k][j];,4,1,1,4,8,0,10,0,0,29,39,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,285,                jTj[i][j] = sum;,0,0,0,2,4,0,0,2,0,2,16,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,286,                jTj[j][i] = sum;,2,2,1,2,4,0,0,0,0,17,16,7,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,292,            RealMatrix inverse =,2,0,0,0,0,0,0,2,0,4,20,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,312,        if (rows <= cols) {,4,1,0,1,3,0,0,0,0,5,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,65,44,    protected AbstractRealMatrix() {,2,0,0,1,3,1,0,0,0,3,32,2,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,65,45,        lu = null;,8,0,1,0,0,1,0,0,0,14,10,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,77,"        super(rowDimension, columnDimension);",6,0,0,1,2,3,0,0,0,9,37,1,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,78,        data = new double[rowDimension][columnDimension];,2,0,1,2,4,0,0,0,0,7,49,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,79,    },12,3,1,0,1,0,0,0,0,29,1,1,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,97,    },4,0,0,0,1,0,0,0,0,5,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,298,        return copyOut();,0,0,1,1,2,1,10,0,0,14,17,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,316,        if (data == null) {,2,1,0,1,3,0,0,0,0,3,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,321,            if (column > 0) {,2,1,0,1,3,0,0,0,0,3,17,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,326,            if (nRows == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,331,            final int nCols = subMatrix[0].length;,10,0,1,1,2,4,0,0,0,16,38,2,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,337,            for (int i = 0; i < data.length; ++i) {,12,1,0,1,3,0,6,2,0,22,39,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,338,                if (subMatrix[i].length != nCols) {,4,1,1,2,5,0,0,0,0,9,35,8,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,407,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,0,0,0,5,10,1,0,0,0,16,66,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,601,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",12,1,1,4,8,1,20,2,0,48,56,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,603,        return out;,12,1,0,0,0,1,0,0,0,14,11,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,361,            final int m = pivot.length;,6,0,0,0,0,1,0,0,0,7,27,2,1.0,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,362,            if (b.getRowDimension() != m) {,2,1,0,2,5,0,4,0,0,7,31,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,367,            if (singular) {,12,3,1,1,3,1,0,2,0,23,15,2,1.0,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,417,            return solve(MatrixUtils.createRealIdentityMatrix(pivot.length));,26,6,0,2,4,1,6,4,0,45,65,0,1.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,65,62,        return (rows * columns <= 4096) ?,4,2,0,1,2,1,0,0,0,6,33,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,65,143,"        final RealMatrix m = createRealMatrix(dimension, dimension);",6,5,0,1,2,0,6,0,0,18,60,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,65,147,        return m;,10,1,1,0,0,1,0,0,0,19,9,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,37,    private static final double GOLDEN_SECTION = 0.5 * (3 - Math.sqrt(5));,6,1,0,2,4,1,6,0,0,14,70,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,57,        clearResult();,2,1,0,1,2,0,2,0,0,5,14,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,58,"        return localMin(f, goalType, min, max, relativeAccuracy, absoluteAccuracy);",8,1,0,1,2,1,0,0,0,10,75,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,88,        double x = a + GOLDEN_SECTION * (b - a);,16,4,0,1,2,0,0,0,0,20,40,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,90,        double w = x;,12,1,0,0,0,0,0,0,0,14,13,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,91,        double e = 0;,18,4,0,0,0,3,16,0,0,42,13,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,92,"        double fx = computeObjectiveValue(f, x);",24,10,1,1,2,2,6,0,0,47,40,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,96,        double fv = fx;,4,0,0,0,0,0,0,0,0,4,15,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,97,        double fw = fx;,4,1,0,0,0,0,0,0,0,5,15,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,99,        int count = 0;,2,0,0,0,0,0,0,0,0,2,14,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,101,            double m = 0.5 * (a + b);,18,1,0,1,2,0,8,0,0,28,25,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,102,            double tol = eps * Math.abs(x) + t;,6,2,0,1,2,0,8,0,0,16,35,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,103,            double t2 = 2 * tol;,4,1,0,0,0,0,0,0,0,5,20,7,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,106,            if (Math.abs(x - m) > t2 - 0.5 * (b - a)) {,2,2,0,3,7,0,6,0,0,11,43,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,107,                double p = 0;,10,2,0,0,0,3,0,0,0,15,13,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,109,                double r = 0;,2,0,0,0,0,0,0,0,0,2,13,9,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,113,                if (Math.abs(e) > tol) { // Fit parabola.,10,1,0,2,5,0,6,0,0,19,41,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,114,                    r = (x - w) * (fx - fv);,4,0,0,2,4,0,4,2,0,11,24,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,115,                    q = (x - v) * (fx - fw);,10,3,0,2,4,0,0,0,0,14,24,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,117,                    q = 2 * (q - r);,6,2,0,1,2,0,0,0,0,9,16,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,119,                    if (q > 0) {,8,2,0,1,3,0,0,0,0,10,12,7,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,126,                    e = d;,6,1,0,0,0,0,0,0,0,8,6,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,139,                    e = ((x < m) ? b : a) - x;,16,4,0,2,4,0,16,2,0,40,26,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,140,                    d = GOLDEN_SECTION * e;,6,1,0,0,0,0,0,0,0,8,23,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,145,"                double fu = computeObjectiveValue(f, u);",2,0,0,1,2,0,6,0,0,8,40,9,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,146,                if (goalType == GoalType.MAXIMIZE) {,6,1,0,1,3,0,0,0,0,7,36,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,151,                if (fu <= fx) {,4,1,0,1,3,0,0,0,0,5,15,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,152,                    if (u < x) {,4,1,0,1,3,0,0,0,0,5,12,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,153,                        b = x;,4,0,0,0,0,0,0,0,0,5,6,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,155,                        a = x;,4,0,0,0,0,0,0,0,0,5,6,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,157,                    v = w;,4,0,0,0,0,0,0,0,0,5,6,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,158,                    fv = fw;,2,0,1,0,0,0,0,0,0,6,8,7,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,160,                    fw = fx;,4,0,0,0,0,0,0,0,0,5,8,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,164,                    if (u < x) {,8,1,0,1,3,0,4,0,0,15,12,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,165,                        a = u;,34,8,1,0,0,5,24,8,0,98,6,0,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,169,                    if ((fu <= fw) || (w == x)) {,8,3,0,3,7,0,0,0,0,11,29,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,170,                        v = w;,2,0,0,0,0,0,0,0,0,3,6,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,174,                    } else if ((fu <= fv) || (v == x) || (v == w)) {,0,0,0,4,10,0,0,0,0,14,48,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,175,                        v = u;,8,4,1,0,0,0,0,0,0,25,6,0,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,179,            } else { // termination,2,0,1,0,2,1,0,0,0,7,23,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,180,"                setResult(x, (goalType == GoalType.MAXIMIZE) ? -fx : fx, count);",10,1,0,2,4,0,6,0,0,18,64,9,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,184,            ++count;,6,2,0,0,0,0,0,0,0,9,8,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,64,        resultComputed = false;,18,4,0,0,0,0,2,6,0,35,23,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,65,        setMaxEvaluations(Integer.MAX_VALUE);,4,0,0,1,2,0,2,0,0,6,37,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,72,        if (!resultComputed) {,8,0,0,1,3,1,0,4,0,14,22,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,98,        this.result         = x;,10,2,0,0,0,3,0,0,0,15,24,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,99,        this.functionValue  = fx;,4,0,0,0,0,0,0,0,0,5,25,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,101,        this.resultComputed = true;,6,1,0,0,0,0,0,0,0,7,27,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,108,        this.resultComputed = false;,8,1,0,0,0,0,0,0,0,10,28,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,109,    },4,0,0,0,1,0,0,0,0,4,1,7,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,114,    },2,0,0,0,1,0,0,0,0,3,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,123,        return evaluations;,6,1,0,0,0,1,0,0,0,7,19,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,137,        if (++evaluations > maxEvaluations) {,4,0,0,1,3,0,10,2,0,17,37,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,141,        return f.value(point);,8,1,0,1,2,1,0,0,0,9,22,5,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,61,                                      final double defaultAbsoluteAccuracy) {,2,0,0,0,2,1,0,0,0,3,39,3,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,62,        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;,4,0,0,0,0,0,0,0,0,5,55,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,64,        this.absoluteAccuracy = defaultAbsoluteAccuracy;,4,0,0,0,0,0,0,0,0,5,48,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,65,        this.relativeAccuracy = defaultRelativeAccuracy;,0,0,0,0,0,0,8,0,0,8,48,5,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,73,        return iterationCount;,2,0,0,0,0,1,0,0,0,2,22,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,93,        maximalIterationCount = count;,4,0,0,0,0,0,0,0,0,5,30,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,67,33,    MINIMIZE,2,0,0,0,0,0,0,0,0,2,8,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,80,                                             final RandomGenerator generator) {,4,0,0,0,2,1,0,2,0,7,34,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,81,        this.optimizer        = optimizer;,4,0,0,0,0,0,0,0,0,5,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,82,        this.totalIterations  = 0;,2,0,0,0,0,0,0,0,0,3,26,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,83,        this.starts           = starts;,4,0,0,0,0,0,0,0,0,5,31,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,84,        this.generator        = generator;,4,0,0,0,0,0,0,0,0,5,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,85,        this.optima           = null;,2,0,0,0,0,0,0,0,0,3,29,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,86,        setMaximalIterationCount(Integer.MAX_VALUE);,6,0,0,1,2,0,2,0,0,8,44,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,87,        setMaxEvaluations(Integer.MAX_VALUE);,4,0,0,1,2,0,2,0,0,6,37,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,152,        this.maxIterations = count;,4,0,0,0,0,0,0,0,0,5,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,193,        if (optima == null) {,2,1,0,1,3,0,0,0,0,3,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,219,        if (optimaValues == null) {,2,1,0,1,3,0,0,0,0,3,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,231,        optima           = new double[starts];,2,0,1,1,2,0,0,0,0,5,38,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,232,        optimaValues     = new double[starts];,2,0,1,1,2,0,0,0,0,5,38,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,233,        totalIterations  = 0;,2,0,0,0,0,0,0,0,0,3,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,234,        totalEvaluations = 0;,8,1,0,0,0,0,0,0,0,11,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,237,        for (int i = 0; i < starts; ++i) {,8,1,0,1,3,0,0,0,0,10,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,240,                optimizer.setMaximalIterationCount(maxIterations - totalIterations);,4,1,0,1,2,0,4,0,0,9,68,9,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,242,                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);,12,4,0,3,6,1,4,0,0,21,82,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,243,                final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);,12,4,0,3,6,1,4,0,0,21,82,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,244,"                optima[i]       = optimizer.optimize(f, goalType,",0,0,1,1,3,0,8,0,0,13,49,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,247,                optimaValues[i] = optimizer.getFunctionValue();,2,0,1,2,4,0,4,0,0,11,47,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,254,            },6,0,0,0,1,1,6,2,0,15,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,256,            totalIterations  += optimizer.getIterationCount();,10,1,0,1,2,0,4,0,0,16,50,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,262,        int lastNaN = optima.length;,6,0,0,0,0,0,0,0,0,6,28,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,263,        for (int i = 0; i < lastNaN; ++i) {,12,1,0,1,3,0,0,0,0,15,35,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,272,        double currX = optima[0];,2,0,1,1,2,0,6,0,0,10,25,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,273,        double currY = optimaValues[0];,2,0,1,1,2,0,0,0,0,4,31,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,274,        for (int j = 1; j < lastNaN; ++j) {,8,1,0,1,3,0,0,0,0,10,35,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,276,            currX = optima[j];,2,0,1,1,2,0,0,0,0,7,18,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,277,            currY = optimaValues[j];,2,0,1,1,2,0,0,0,0,7,24,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,278,            if ((goalType == GoalType.MAXIMIZE) ^ (currY < prevY)) {,10,3,0,3,7,0,0,0,0,13,56,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,301,        if (Double.isNaN(optima[0])) {,2,0,1,3,7,0,4,0,0,8,30,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,381,                            tmp = 0.1;,2,0,0,0,0,0,0,0,0,3,10,12,0.28571,1,1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,161,        TDistribution tDistribution = new TDistributionImpl(nObs - 2);,4,1,0,1,2,0,0,4,0,9,62,4,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,162,        int nVars = correlationMatrix.getColumnDimension();,2,0,0,1,2,0,0,0,0,2,51,4,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,163,        double[][] out = new double[nVars][nVars];,4,0,0,4,8,0,14,0,0,18,42,5,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,166,                if (i == j) {,4,1,0,1,3,0,0,0,0,5,13,8,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,169,"                    double r = correlationMatrix.getEntry(i, j);",2,0,0,1,2,0,8,0,0,10,44,11,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,175,        return new BlockRealMatrix(out);,2,0,0,1,2,1,0,2,0,4,32,5,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,130,        double q0 = 0.0;,4,0,1,0,0,0,0,0,0,9,16,3,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,132,        double c = p1 / q1;,6,1,0,0,0,0,0,0,0,7,19,5,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,134,        double relativeError = Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,6,40,5,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,135,        while (n < maxIterations && relativeError > epsilon) {,4,1,0,1,3,0,0,0,0,5,54,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,137,"            double a = getA(n, x);",2,0,0,1,2,0,6,0,0,8,22,7,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,138,"            double b = getB(n, x);",2,0,0,1,2,0,6,0,0,8,22,7,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,139,            double p2 = a * p1 + b * p0;,0,0,0,0,0,0,6,0,0,6,28,9,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,140,            double q2 = a * q1 + b * q0;,10,3,0,0,0,0,0,0,0,13,28,7,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,141,            boolean infinite = false;,6,1,0,0,0,0,0,0,0,9,25,4,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,142,            if (Double.isInfinite(p2) || Double.isInfinite(q2)) {,0,1,0,3,7,0,12,0,0,13,53,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,182,            double r = p2 / q2;,14,3,0,0,0,0,0,0,0,18,19,3,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,184,            if (Double.isNaN(r)) {,0,0,0,2,5,0,6,0,0,6,22,7,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,189,            relativeError = Math.abs(r / c - 1.0);,6,1,0,1,2,0,0,0,0,7,38,5,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,193,            p0 = p1;,4,0,0,0,0,0,0,0,0,5,8,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,194,            p1 = p2;,4,0,0,0,0,0,0,0,0,5,8,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,197,        },2,0,0,0,1,0,0,0,0,3,1,2,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,199,        if (n >= maxIterations) {,4,0,0,1,3,0,0,0,0,5,25,10,0.8,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,131,            double t =,6,0,0,0,0,0,0,0,0,7,10,3,0.8,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,136,            if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.8,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,139,                ret = 1.0 - 0.5 * t;,6,2,0,0,0,0,0,0,0,10,20,0,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,61,    private static final double HALF_LOG_2_PI = 0.5 * Math.log(2.0 * Math.PI);,10,2,0,1,2,3,4,4,0,23,74,1,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,100,            double g = 607.0 / 128.0;,2,1,0,0,0,0,0,0,0,3,25,7,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,103,            for (int i = LANCZOS.length - 1; i > 0; --i) {,6,1,0,1,3,1,0,0,0,8,46,6,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,106,            sum = sum + LANCZOS[0];,4,1,1,1,2,0,0,0,0,8,23,6,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,108,            double tmp = x + g + .5;,8,1,0,0,0,0,0,0,0,10,24,3,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,109,            ret = ((x + .5) * Math.log(tmp)) - tmp +,8,2,0,3,6,0,0,0,0,11,40,6,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,54,"        return regularizedBeta(x, a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);",6,1,0,1,2,1,0,0,0,8,68,8,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,121,        if (Double.isNaN(x) || Double.isNaN(a) || Double.isNaN(b) || (x < 0) ||,0,0,0,4,9,0,0,0,0,13,71,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,125,        } else if (x > (a + 1.0) / (a + b + 2.0)) {,2,0,0,3,8,0,2,4,0,8,43,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,156,        return ret;,6,0,0,0,0,1,0,0,0,7,11,3,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,192,        if (Double.isNaN(a) || Double.isNaN(b) || (a <= 0.0) || (b <= 0.0)) {,16,5,0,5,11,0,0,0,0,21,69,3,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,195,            ret = Gamma.logGamma(a) + Gamma.logGamma(b) -,2,2,0,2,4,0,12,0,0,17,45,6,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,199,        return ret;,10,2,0,0,0,1,0,0,0,12,11,3,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,134,                    if (n % 2 == 0) { // even,2,0,0,1,3,0,6,2,0,10,25,4,0.8,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,66,"        return solve(f, min, max);",0,0,0,1,2,1,8,0,0,8,26,5,1.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator,71,180,                loop     = false;,2,0,0,0,0,0,0,0,0,4,17,12,1.0,1,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,72,196,        return (start < mid) && (mid < end);,8,3,0,2,4,1,0,0,0,11,36,4,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,72,225,"        if (!isSequence(lower, initial, upper)) {",2,0,0,2,5,0,0,0,0,2,41,4,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,103,"        verifySequence(min, initial, max);",6,0,0,1,2,0,0,2,0,8,34,9,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,113,        double yMin = f.value(min);,6,0,0,1,2,3,0,0,0,9,27,2,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,114,        if (Math.abs(yMin) <= functionValueAccuracy) {,2,1,0,2,5,0,6,0,0,9,46,4,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,180,            if (Math.abs(yMin) <= functionValueAccuracy) {,18,2,0,2,5,0,22,0,0,45,46,3,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,183,            } else if (Math.abs(yMax) <= functionValueAccuracy) {,2,1,0,2,6,0,6,0,0,9,53,7,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,73,196,        return (start < mid) && (mid < end);,12,3,0,2,4,1,0,0,0,16,36,3,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,73,225,"        if (!isSequence(lower, initial, upper)) {",2,0,0,2,5,3,6,0,0,11,41,1,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,102,        clearResult();,2,0,0,1,2,0,0,0,0,2,14,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,107,        if (Math.abs(yInitial) <= functionValueAccuracy) {,2,1,0,2,5,0,6,0,0,9,50,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,114,        if (Math.abs(yMin) <= functionValueAccuracy) {,2,1,0,2,5,0,0,0,0,3,46,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,120,        if (yInitial * yMin < 0) {,4,2,0,1,3,0,0,0,0,6,26,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,126,        if (Math.abs(yMax) <= functionValueAccuracy) {,10,2,0,2,5,0,0,0,0,13,46,8,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,132,        if (yInitial * yMax < 0) {,8,1,0,1,3,0,0,2,0,11,26,3,1.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,310,"                    hNew = filterStep(stepSize * factor, forward, false);",12,4,0,1,2,0,4,0,0,23,53,3,1.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,311,                    interpolator.rescale(hNew);,0,0,0,1,2,0,6,0,0,6,27,11,1.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,331,        return getPct(Long.valueOf(v));,0,0,0,2,4,1,8,0,0,8,31,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,143,            --p;,2,0,0,0,0,0,0,0,0,3,4,6,4.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,210,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,213,        while (it.hasNext() && (e = it.next()) != null) {,8,3,0,4,9,0,8,0,0,21,49,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,214,            final double value = e.getValue();,2,0,0,1,2,0,0,0,0,4,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,222,        double norm = 0;,10,0,0,0,0,0,12,0,0,23,16,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,225,        while (it.hasNext() && (e = it.next()) != null) {,2,2,0,4,9,0,8,0,0,13,49,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,226,            norm += Math.abs(e.getValue());,2,1,1,2,4,0,0,0,0,12,31,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,228,        return norm;,4,1,1,0,0,1,0,0,0,9,12,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,499,        double max = 0;,2,0,0,0,0,0,0,0,0,2,15,5,1.0,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,501,        while (iter.hasNext()) {,10,0,0,2,5,3,0,4,0,17,24,2,1.0,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,502,            iter.advance();,8,0,0,1,2,3,0,0,0,12,15,1,1.0,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,503,            max += iter.value();,2,0,0,1,2,0,4,0,0,7,20,6,1.0,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,505,        return max;,2,0,0,0,0,1,4,0,0,6,11,4,1.0,1,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,709,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,711,            sum += Math.abs(a);,2,0,0,1,2,0,6,0,0,9,19,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,713,        return sum;,0,0,0,0,0,1,2,0,0,2,11,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,719,        double max = 0;,4,0,0,0,0,0,0,0,0,5,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,720,        for (double a : data) {,6,1,0,1,3,1,0,0,0,8,23,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,721,"            max += Math.max(max, Math.abs(a));",2,0,0,2,4,0,12,0,0,15,34,6,1.0,1,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,267,                    double r1 = y0 / y2;,6,1,0,0,0,0,0,0,0,7,20,11,0.11111,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,268,                    double r2 = y1 / y2;,6,1,0,0,0,0,0,0,0,7,20,11,0.11111,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,270,                    p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);,8,1,0,3,6,0,2,0,0,12,42,3,0.11111,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,79,30,"public class EuclideanIntegerPoint implements Clusterable<EuclideanIntegerPoint>, Serializable {",2,0,0,0,1,1,0,6,0,9,96,1,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,47,        points = new ArrayList<T>();,2,0,0,1,2,0,0,4,0,7,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,40,    public KMeansPlusPlusClusterer(final Random random) {,4,0,0,1,3,2,0,2,0,8,53,2,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,41,        this.random = random;,2,1,1,0,0,1,4,0,0,14,21,3,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,56,"        List<Cluster<T>> clusters = chooseInitialCenters(points, k, random);",4,1,0,1,2,3,0,4,0,12,68,1,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,89,        for (final T p : points) {,4,0,0,1,3,1,0,2,0,7,26,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,108,        final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();,34,7,0,1,2,2,6,12,0,63,63,2,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,112,        resultSet.add(new Cluster<T>(firstPoint));,2,0,0,2,4,0,4,4,0,10,42,5,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,115,        while (resultSet.size() < k) {,4,1,0,2,5,0,8,0,0,14,30,0,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,139,        return resultSet;,2,0,0,0,0,1,0,0,0,2,17,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,153,        double minDistance = Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,6,38,5,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,154,        Cluster<T> minCluster = null;,4,1,0,0,0,0,0,4,0,9,29,3,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,155,        for (final Cluster<T> c : clusters) {,10,4,1,1,3,0,2,0,0,21,37,3,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,156,            final double distance = point.distanceFrom(c.getCenter());,2,0,0,2,4,1,8,0,0,11,58,6,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,157,            if (distance < minDistance) {,6,3,0,1,3,0,12,0,0,21,29,12,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,162,        return minCluster;,2,0,0,0,0,1,0,0,0,2,18,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1090,                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;,4,3,1,1,2,0,0,0,0,10,43,11,1.0,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1091,                    dMin = 0.0;,2,0,0,0,0,0,0,0,0,3,11,11,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,870,            return dotProduct((ArrayRealVector) v);,10,2,0,2,4,1,0,0,0,13,39,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,884,        checkVectorDimensions(v.length);,4,0,0,1,2,0,2,0,0,6,32,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,885,        double dot = 0;,4,0,0,0,0,0,0,2,0,6,15,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,886,        for (int i = 0; i < data.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,8,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,887,            dot += data[i] * v[i];,2,0,0,2,4,0,0,0,0,2,22,9,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,889,        return dot;,0,0,0,0,0,1,6,0,0,6,11,7,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,900,        return dotProduct(v.data);,4,1,0,1,2,1,0,0,0,5,26,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1529,                tType = -5;,4,4,0,0,0,0,4,0,0,12,11,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1530,                double s = 0.25 * dMin;,4,1,0,0,0,0,0,0,0,5,23,9,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1534,                double b1 = work[np - 2];,4,1,1,1,2,0,0,0,0,7,25,9,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1535,                double b2 = work[np - 6];,2,0,0,1,2,0,14,0,0,16,25,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1536,                final double gam = dN2;,6,1,0,0,0,1,20,0,0,30,23,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1544,                    b2 = work[nn - 13] / work[nn - 15];,6,3,1,2,4,0,0,0,0,14,35,10,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1622,                if (dMin1 == dN1) {,10,1,0,1,3,3,0,8,0,22,19,1,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,61,                                final boolean copyArray) {,2,0,0,0,2,1,0,0,0,3,26,3,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,63,        this.value  = value;,4,0,0,0,0,0,0,0,0,5,20,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,64,    },2,0,0,0,1,3,0,0,0,5,1,2,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,279,                    final double v2 = o2.getValue();,2,0,0,1,2,1,4,0,0,7,32,10,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,280,                    return (goalType == GoalType.MINIMIZE) ?,4,0,0,1,2,1,0,0,0,4,40,5,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,143,        startConfiguration = new double[n][n];,2,0,1,2,4,0,0,0,0,7,38,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,144,        for (int i = 0; i < n; ++i) {,2,1,0,1,3,0,0,0,0,3,29,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,145,            final double[] vertexI = startConfiguration[i];,2,0,1,2,4,1,0,0,0,7,47,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,152,"                System.arraycopy(steps, 0, vertexI, 0, j + 1);",2,1,0,1,2,0,8,0,0,11,46,9,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,155,    },2,0,0,0,1,0,0,0,0,2,1,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,291,        RealPointValuePair[] previous = new RealPointValuePair[simplex.length];,2,0,0,2,4,1,0,0,0,3,71,2,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,306,"            System.arraycopy(simplex, 0, previous, 0, simplex.length);",4,0,0,1,2,0,8,0,0,12,58,7,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,307,            iterateSimplex(comparator);,6,6,0,1,2,0,16,0,0,28,27,5,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,319,        if (++iterations > maxIterations) {,4,1,0,1,3,0,0,0,0,5,35,5,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,401,"        Arrays.sort(simplex, comparator);",4,0,0,1,2,0,0,0,0,5,33,8,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,46,        this.khi   = 2.0;,2,0,0,0,0,0,0,0,0,3,17,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,48,    },6,2,0,0,1,0,0,0,0,9,1,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,69,            final RealPointValuePair[] original = simplex;,4,0,0,1,2,1,0,2,0,7,46,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,70,            final RealPointValuePair best = original[0];,6,0,0,1,2,1,12,2,0,22,44,3,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,89,"            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);",2,0,1,1,2,0,0,0,0,7,86,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,90,"            if (comparator.compare(contracted, best) < 0) {",0,1,0,2,5,0,8,0,0,9,47,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,97,        },0,0,0,0,1,0,0,2,0,2,1,8,2.0,1,1
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,115,        final double[] xSmallest = original[0].getPointRef();,2,0,1,3,6,1,2,0,0,7,53,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,116,        final int n = xSmallest.length;,6,0,0,0,0,1,0,0,0,7,31,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,119,        simplex = new RealPointValuePair[n + 1];,6,1,1,1,2,0,0,2,0,17,40,3,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,121,        for (int i = 1; i <= n; ++i) {,8,2,1,1,3,0,8,0,0,22,30,3,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,122,            final double[] xOriginal    = original[i].getPointRef();,16,3,1,3,6,1,8,0,0,34,56,3,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,123,            final double[] xTransformed = new double[n];,4,0,0,2,4,0,4,4,0,13,44,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,124,            for (int j = 0; j < n; ++j) {,8,1,0,1,3,0,0,0,0,10,29,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,125,                xTransformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]);,10,1,0,5,10,0,0,0,0,12,71,4,2.0,0,0
defect4j,math,org/apache/commons/math/MathException,85,106,"      super(buildMessage(Locale.US, pattern, arguments));",4,0,0,2,4,0,6,0,0,10,51,5,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,85,108,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,0,0,0,3,6,0,4,0,0,4,73,5,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,85,109,    },4,1,0,0,1,0,0,0,0,5,1,6,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,85,85,"        return (pattern == null) ? """" : new MessageFormat(translate(pattern, locale), locale).format(arguments);        ",18,4,1,4,8,2,10,2,0,43,104,3,1.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,85,43,"        super(""Maximal number of iterations ({0}) exceeded"", maxIterations);",2,0,0,3,6,0,0,0,0,3,68,4,1.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,85,44,        this.maxIterations = maxIterations;,4,0,0,0,0,0,0,0,0,5,35,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,131,            } else if (x > (mean + 20 * standardDeviation)) {,4,0,0,2,6,0,0,0,0,5,49,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,132,                return 1.0d;,8,2,0,0,0,1,0,0,0,11,12,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,178,        if (p < .5) {,2,1,0,1,3,0,0,0,0,3,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,181,            ret = getMean();,6,0,0,1,2,0,0,0,0,6,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,184,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,200,        if (p < .5) {,4,1,0,1,3,0,4,0,0,10,13,3,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,203,            ret = Double.MAX_VALUE;,2,0,1,0,0,0,2,0,0,6,23,6,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,221,        if (p < .5) {,2,1,0,1,3,0,0,0,0,3,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,223,        } else if (p > .5) {,2,1,0,1,4,0,0,0,0,3,20,5,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,224,            ret = getMean() + getStandardDeviation();,2,1,0,2,4,0,4,0,0,8,41,7,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,229,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,991,        final int nRows = getRowDimension();,4,0,0,1,2,1,6,0,0,11,36,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,992,        final int nCols = getColumnDimension();,6,2,1,1,2,0,4,0,0,17,39,8,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,993,        final StringBuffer res = new StringBuffer();,6,0,0,1,2,1,0,4,0,11,44,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,994,        String fullClassName = getClass().getName();,4,0,0,2,4,0,4,2,0,10,44,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,995,        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);,2,1,0,2,4,0,14,2,0,20,84,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,996,"        res.append(shortClassName).append(""{"");",10,1,0,2,5,0,8,0,0,21,39,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,999,            if (i > 0) {,18,3,0,1,3,0,0,0,0,22,12,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1000,"                res.append("","");",0,0,0,1,2,0,4,0,0,5,16,9,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1002,"            res.append(""{"");",14,1,0,1,3,0,4,0,0,21,16,1,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1003,            for (int j = 0; j < nCols; ++j) {,8,1,0,1,3,0,0,0,0,10,33,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1004,                if (j > 0) {,2,1,0,1,3,0,0,0,0,3,12,8,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1005,"                    res.append("","");",2,0,0,1,2,0,8,0,0,11,16,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1007,"                res.append(getEntry(i, j));",6,0,1,2,4,0,0,0,0,11,27,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1009,"            res.append(""}"");",0,0,0,1,3,0,4,0,0,5,16,7,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,339,                         coefficients[i] = 0;,0,0,1,1,2,0,0,0,0,5,20,12,0.5,1,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,132,        } catch (ClassCastException ex) {   ,2,0,0,1,4,0,0,2,0,4,33,6,1.0,1,1
defect4j,math,org/apache/commons/math/stat/Frequency,90,134,"            throw new IllegalArgumentException(""Value not comparable to existing values."");",2,0,0,1,2,0,4,6,0,13,79,3,1.0,1,1
defect4j,math,org/apache/commons/math/fraction/Fraction,91,270,        return (double)numerator / (double)denominator;,4,1,0,2,4,1,0,0,0,5,47,4,0.03846,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,182,            return n;,2,0,0,0,0,1,0,0,0,2,9,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,345,        long result = Math.round(factorialDouble(n));,2,0,0,2,4,0,8,0,0,10,45,5,1.0,1,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,346,        if (result == Long.MAX_VALUE) {,8,1,0,1,3,0,4,2,0,15,31,4,1.0,1,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,430,            u /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.05,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,431,            v /= 2;,10,0,0,0,0,3,0,4,0,18,7,2,0.05,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,432,            k++; // cast out twos.,2,1,0,0,0,0,0,0,0,3,22,4,0.05,0,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,36,    private static UnivariateRealSolverFactory factory = null;,2,0,0,0,0,2,0,2,0,6,58,2,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,128,"        return bracket( function, initial, lowerBound, upperBound,",4,0,0,0,1,1,0,0,0,5,58,4,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,174,        if (maximumIterations <= 0)  {,6,1,0,1,3,0,0,0,0,8,30,6,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,147,            ret = d / (d - 2.0);,6,1,0,1,2,0,0,0,0,7,20,6,0.5,1,1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,148,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.5,1,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,67,        UnivariateRealFunction rootFindingFunction =,2,0,0,0,0,0,0,2,0,4,44,4,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,81,        double upperBound = getDomainUpperBound(p);,2,0,0,1,2,0,4,0,0,6,43,5,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,82,        double[] bracket = null;,18,0,0,1,2,0,8,0,0,28,24,3,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,84,            bracket = UnivariateRealSolverUtils.bracket(,16,1,0,0,1,1,4,2,0,25,44,3,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,68,            new UnivariateRealFunction() {,2,0,0,1,3,0,0,2,0,4,30,3,0.5,0,0
defect4j,math,org/apache/commons/math/complex/Complex,96,277,        if (isNaN()) {,0,0,0,2,5,0,2,0,0,2,14,5,1.0,0,0
defect4j,math,org/apache/commons/math/complex/Complex,96,280,        return 37 * (17 * MathUtils.hash(imaginary) + ,0,3,0,1,3,1,6,0,0,9,45,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,141,                throw new IllegalArgumentException,0,0,0,0,0,0,0,2,0,2,34,8,0.33333,1,1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,986,        if (v.length != this.getColumnDimension()) {,4,1,0,2,5,0,2,0,0,7,44,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,989,        final int nRows = this.getRowDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,992,        for (int row = 0; row < nRows; row++) {,8,1,0,1,3,0,0,0,0,10,39,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,993,            BigDecimal sum = ZERO;,4,0,0,0,0,0,0,2,0,6,22,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,775,        final int nCols = this.getColumnDimension();,0,0,0,1,2,0,4,0,0,5,44,5,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,776,        if (v.length != nCols) {,6,1,0,1,3,0,0,0,0,7,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,781,            final double[] dataRow = data[row];,2,0,1,2,4,1,0,0,0,7,35,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,786,            out[row] = sum;,2,0,0,1,2,0,0,0,0,2,15,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,710,        if (a==0 || b==0){,4,3,0,1,3,0,0,0,0,7,18,4,1.0,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,99,713,"        int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));",2,0,0,3,6,3,0,0,0,5,50,2,1.0,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,58,        return (EstimatedParameter[]) parameters.toArray(new EstimatedParameter[parameters.size()]);,0,0,0,5,10,1,8,4,0,12,92,5,1.0,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,349,            sign = 1;,2,0,0,0,0,0,0,0,0,3,9,5,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,367,        for (int i = 0; i < in.length; i ++) {,10,1,0,1,3,0,0,0,0,12,38,4,6.0,0,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,368,            if (in[i] < 0) {,2,1,1,2,5,0,2,4,0,13,16,3,6.0,0,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,372,        return true;,2,0,0,0,0,1,0,0,0,3,12,4,6.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,161,            ret = 0.0;,2,0,0,0,0,0,0,0,0,3,10,7,0.25,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,200,"        return regularizedGammaQ(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",4,0,0,1,2,1,8,0,0,12,67,5,0.16667,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,60,    private double sumX = 0d;,6,1,0,0,0,0,0,2,0,9,25,5,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,63,    private double sumXX = 0d;,2,0,1,0,0,0,0,0,0,7,26,6,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,66,    private double sumY = 0d;,2,0,0,0,0,0,4,0,0,6,25,5,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,69,    private double sumYY = 0d;,2,0,0,0,0,1,0,0,0,3,26,2,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,107,            xbar = x;,14,4,0,0,0,1,0,0,0,20,9,3,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,110,            double dx = x - xbar;,6,1,0,0,0,0,0,0,0,7,21,7,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,111,            double dy = y - ybar;,2,0,0,0,0,3,0,4,0,9,21,2,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,113,            sumYY += dy * dy * (double) n / (double) (n + 1.0);,4,0,0,3,6,1,0,4,0,9,51,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,115,            xbar += dx / (double) (n + 1.0);,8,2,1,2,4,0,0,0,0,15,32,1,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,116,            ybar += dy / (double) (n + 1.0);,6,2,0,2,4,0,0,0,0,9,32,6,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,119,        sumY += y;,4,0,0,0,0,0,0,0,0,5,10,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,120,        n++;,10,2,0,0,0,0,4,0,0,17,4,0,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,121,    },2,0,0,0,1,0,0,0,0,3,1,6,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,264,        return sumYY - sumXY * sumXY / sumXX;,8,3,0,0,0,1,0,0,0,11,37,4,0.125,1,0
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,290,            pos.setIndex(initialIndex);,0,0,0,1,2,0,6,0,0,6,27,6,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,292,            return null;,10,0,1,0,0,1,0,0,0,13,12,5,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,169,"        char c = parseNextCharacter(source, pos);",4,0,0,1,2,2,6,4,0,16,41,1,0.5,1,1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,170,        switch (c) {,2,0,0,1,3,0,0,0,0,2,12,4,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,188,"        parseAndIgnoreWhitespace(source, pos);",10,1,0,1,2,0,0,0,0,12,38,4,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,191,"        Number den = getDenominatorFormat().parse(source, pos);",0,0,0,2,4,0,4,0,0,5,55,4,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,202,        int w = whole.intValue();,2,0,0,1,2,0,0,0,0,2,25,9,0.5,1,1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,203,        int n = num.intValue();,2,0,0,1,2,0,10,0,0,12,23,3,0.5,1,1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,205,"        return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);",6,3,0,5,10,1,16,2,0,27,68,4,0.5,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,215,"                throw new FractionConversionException(value, p2, q2);",6,0,0,1,2,0,0,2,0,8,53,9,0.5,1,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,268,        return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();,4,3,0,6,12,1,6,0,0,15,90,10,0.16667,1,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,120,        Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));,4,0,0,3,6,0,12,2,0,18,71,3,0.14286,1,1,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,305,            return NaN;,2,0,0,0,0,1,0,0,0,2,11,6,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,451,                if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) {,10,1,0,2,5,0,2,2,0,16,62,3,21.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,6,51,"        iterations = new Incrementor(0, new MaxIterCallback());",2,0,0,2,4,0,0,4,0,7,55,4,3.9397,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,158,            if (iteration > 0) {,2,1,0,1,3,0,0,0,0,3,20,6,1.64103,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,175,			++iteration;,2,0,0,0,0,0,0,0,0,3,12,6,1.64103,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,193,            ++iter;,2,0,0,0,0,0,0,0,0,3,7,6,0.03333,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,214,        int iter = 0;,4,0,0,0,0,1,6,2,0,13,13,4,0.02564,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,217,            ++iter;,2,0,0,0,0,0,0,0,0,3,7,6,0.02564,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,223,"                if (checker.converged(iter, previous, current)) {",0,0,0,2,5,0,10,0,0,10,49,9,0.02564,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,277,            if (iter % n == 0 ||,10,4,0,0,1,0,0,0,0,15,20,3,0.02564,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,160,"                converged = checker.converged(iter, previous, current);",2,0,0,1,2,0,0,0,0,3,55,6,0.01923,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,106,        int iter = 0;,4,0,0,0,0,1,2,2,0,10,13,3,0.01786,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,322,        int iter = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.01136,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,325,            ++iter;,2,0,0,0,0,0,0,0,0,2,7,4,0.01136,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,489,"                        if (checker.converged(iter, previous, current)) {",0,0,0,2,5,0,10,0,0,10,49,13,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,227,"                    stop = checker.converged(iter, previous, current);",2,0,0,1,2,0,10,0,0,13,50,10,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,370,                    for (final EventState remaining : occuringEvents) {,16,2,0,1,3,2,12,4,0,37,51,3,0.07692,1,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,363,"                boolean needReset = currentEvent.reset(eventT, eventY);",4,2,0,1,2,0,0,0,0,6,55,3,0.06667,1,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,347,                isLastStep = currentEvent.stop();,2,0,0,1,2,0,4,0,0,7,33,6,0.05882,1,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,357,                    for (final EventState remaining : occuringEvents) {,4,0,0,1,3,1,0,2,0,7,51,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,371,"                        remaining.stepAccepted(eventT, eventY);",0,0,0,1,2,0,8,0,0,8,39,11,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,187,"        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);",10,0,0,6,12,1,10,4,0,25,99,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,87,"        final Line reverted = new Line(zero, zero.subtract(direction));",4,0,0,2,4,1,6,4,0,15,63,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,87,        final long high = ((long) next(26)) << 26;,2,1,0,3,6,1,2,0,0,6,42,4,0.08654,1,1,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,88,        final int  low  = next(26);,2,0,0,1,2,1,2,0,0,5,27,4,0.08654,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,62,@Deprecated,6,1,0,0,0,1,0,0,0,8,11,4,0.04348,1,1,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Weight,14,43,"        weightMatrix = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(dim, dim);",14,0,0,1,2,0,6,0,0,21,86,4,0.01163,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,54,    },4,0,0,0,1,0,0,0,0,5,1,4,0.01111,1,1,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Weight,14,45,"            weightMatrix.setEntry(i, i, weight[i]);",0,0,1,2,4,0,8,0,0,12,39,7,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,878,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,12,2,0,1,2,0,8,4,0,27,71,3,0.01099,1,1,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,869,            if (intVal > 709) {,2,1,0,1,3,0,0,0,0,3,19,6,0.01081,1,1,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,458,      if (x < -20) {,2,1,0,1,3,0,0,0,0,4,14,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,932,                res[i] = (x[i] - boundaries[0][i]) / diff;,2,2,1,5,10,0,0,0,0,17,42,7,0.33333,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,991,            for (int i = 0; i < x.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,5,0.0,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,992,                if (x[i] < 0) {,2,2,1,2,5,0,0,0,0,8,15,1,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,921,            return,16,4,1,0,0,0,4,0,0,35,6,3,0.06667,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,63,        throws NonPositiveDefiniteMatrixException {,2,0,0,0,1,0,0,0,0,2,43,2,2.0,1,1,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,69,        int[] swap  = new int[order];,2,0,1,2,4,0,4,0,0,8,29,3,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,82,                int isi = index[swap[i]];,10,1,1,2,4,0,0,0,0,19,25,3,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,83,                if (c[ii][ii] > c[isi][isi]) {,4,0,0,5,11,1,0,0,0,5,30,2,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,84,                    swap[r] = i;,4,0,0,1,2,0,4,0,0,10,12,3,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,90,            if (swap[r] != r) {,4,1,1,2,5,0,0,0,0,10,19,0,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,91,                int tmp = index[r];,0,1,1,1,2,0,0,0,0,6,19,6,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,92,                index[r] = index[swap[r]];,4,0,0,3,6,0,0,4,0,9,26,6,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,93,                index[swap[r]] = tmp;,6,1,0,2,4,0,0,0,0,7,21,5,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,128,                    c[ii][ii] -= e * e;,10,6,1,2,4,0,0,0,0,37,19,3,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,184,        return false;,6,1,0,0,0,1,4,0,0,11,13,3,1.0,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,193,                                d = -tol1;,4,0,0,0,0,0,0,0,0,6,10,16,0.25,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,237,"                        return best(current, previous, isMinim);",2,1,0,1,2,1,12,0,0,15,40,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,230,                        return current;,4,0,0,0,0,1,10,0,0,15,15,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,326,                a = FastMath.sqrt(c1 / c2);,6,1,0,1,2,0,4,0,0,12,27,7,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,327,                omega = FastMath.sqrt(c2 / c3);,2,1,0,1,2,0,0,0,0,3,31,4,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,209,            if ((p2 > overflow) || (q2 > overflow)) {,12,3,0,3,7,0,8,0,0,23,41,3,0.01961,1,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,181,        if (a0 > overflow) {,4,1,0,1,3,0,0,0,0,5,20,4,0.01818,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,138,                Integer minRow = null;,2,0,0,0,0,0,0,2,0,4,22,7,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,139,                int minIndex = tableau.getWidth();,4,3,0,1,2,0,0,0,0,7,34,8,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,140,                for (Integer row : minRatioPositions) {,6,1,0,1,3,0,0,2,0,9,39,4,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,349,        Iterator iter = entries.iterator();,2,0,0,1,2,0,4,2,0,8,35,4,0.33333,1,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,350,        while (iter.hasNext()) {,0,0,0,2,5,0,4,0,0,4,24,5,0.33333,1,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,173,        final int n1n2prod = n1 * n2;,10,1,0,0,0,1,0,0,0,13,29,3,1.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,185,            dPrev = q1;,4,0,0,0,0,0,0,0,0,5,11,6,0.04082,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,186,            cPrev = cN / q2;,6,1,0,0,0,0,0,0,0,8,16,6,0.04082,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,187,            p0 = hPrev;,4,0,0,0,0,0,0,0,0,5,11,6,0.04082,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,188,            hPrev = cN;,2,0,0,0,0,0,0,0,0,3,11,2,0.04082,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,189,            q1 = q2;,4,0,0,0,0,0,0,0,0,5,8,6,0.04082,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,134,        double p0 = 1.0;,2,0,0,0,0,0,0,0,0,2,16,5,0.03774,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,143,            double cN = a * hPrev + b * p0;,10,3,0,0,0,0,0,0,0,13,31,7,0.03774,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,144,            double q2 = a * q1 + b * dPrev;,10,3,0,0,0,0,0,0,0,13,31,7,0.03774,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,169,            final double deltaN = cN / q2 / cPrev;,8,1,0,0,0,1,0,0,0,10,38,6,0.03774,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,170,            hN = cPrev * deltaN;,2,1,0,0,0,0,8,0,0,11,20,5,0.03774,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,146,                double scaleFactor = 1d;,2,0,0,0,0,0,0,0,0,2,24,9,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,147,                double lastScaleFactor = 1d;,2,0,0,0,0,0,0,0,0,2,28,9,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,148,                final int maxPower = 5;,2,0,0,0,0,1,0,0,0,3,23,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,149,"                final double scale = FastMath.max(a,b);",2,0,0,1,2,1,12,0,0,15,39,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,150,                if (scale <= 0) {  // Can't scale,2,1,0,1,3,0,0,0,0,3,33,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,153,                for (int i = 0; i < maxPower; i++) {,8,1,0,1,3,0,0,0,0,10,36,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,154,                    lastScaleFactor = scaleFactor;,4,0,0,0,0,0,0,0,0,5,30,10,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,155,                    scaleFactor *= scale;,4,0,0,0,0,0,0,0,0,5,21,10,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,156,                    if (a != 0.0 && a > b) {,6,3,0,1,3,0,0,0,0,9,24,10,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,157,                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);,12,4,0,1,2,0,0,0,0,17,54,12,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,158,                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);,18,5,0,1,2,0,0,0,0,24,54,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,161,                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;,12,4,0,1,2,0,0,0,0,17,54,13,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,163,                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {,0,1,0,4,9,0,12,0,0,14,56,10,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,164,                        break;,0,0,0,0,0,0,0,2,0,3,6,7,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,51,        this.elitismRate = elitismRate;,4,0,0,0,0,0,0,0,0,5,31,4,0.8,1,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,732,        float result = numerator.floatValue() / denominator.floatValue();,2,1,0,2,4,0,8,0,0,11,65,5,0.5,1,1,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1182,"        return new Complex(realPart, imaginaryPart);",8,3,0,1,2,1,14,0,0,25,44,3,2.0,1,1,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1018,        if (isNaN) {,8,0,0,1,3,1,0,0,0,10,12,1,1.0,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1063,        if (isNaN) {,2,0,0,1,3,0,6,0,0,8,12,5,1.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1660,                    throw new PathIsExploredException(); // XXX,0,0,0,1,2,0,0,2,0,2,43,12,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1662,                final int iptMinus1 = ipt;,4,0,0,0,0,1,0,0,0,5,26,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1752,                throw new PathIsExploredException(); // XXX,0,0,0,1,2,0,0,2,0,2,43,10,0.0,1,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,238,                targetY = -REDUCTION_FACTOR * yA;,10,2,0,0,0,0,0,0,0,14,33,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,520,                for (int i = 0; i < weights.length; i++) {,10,1,0,1,3,0,0,0,0,12,42,9,0.5,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,418,              basicRows.add(basicRow);,0,0,0,1,2,0,6,0,0,6,24,9,0.05556,1,1,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,158,        if (!(meanImpl instanceof Mean)) {,8,1,0,2,5,0,0,2,0,13,34,4,0.81818,1,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,161,        if (!(varianceImpl instanceof Variance)) {,6,1,0,2,5,0,0,0,0,7,42,3,0.81818,1,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,164,        if (!(geoMeanImpl instanceof GeometricMean)) {,4,0,0,2,5,0,0,0,0,5,46,3,0.81818,1,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,340,"                    System.arraycopy(eventY, 0, y, 0, y.length);",6,0,0,1,2,0,8,2,0,16,44,3,0.08333,1,1,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,343,                    return eventT;,2,0,0,0,0,1,0,0,0,2,14,8,0.08333,1,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,280,            resetOccurred = false;,2,0,0,0,0,0,0,0,0,4,22,4,0.00735,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,260,            return isZero ? NaN : INF;,18,5,1,0,0,3,2,0,0,35,26,3,2.0,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,297,            return isZero ? NaN : INF;,6,0,0,0,0,1,0,0,0,6,26,7,0.0,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,257,            return NaN;,2,0,0,0,0,1,0,0,0,2,11,6,2.0,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,583,        return this.add(I).divide(I.subtract(this)).log(),0,0,0,4,8,1,12,0,0,12,49,6,0.33333,1,1,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,256,        if (divisor.getReal() == 0.0 && divisor.getImaginary() == 0.0) {,2,3,0,3,7,0,8,0,0,13,64,3,0.30769,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,98,"    public Complex(double real, double imaginary) {",6,0,0,1,3,1,0,0,0,7,47,2,0.02174,1,1,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,293,            return NaN;,2,0,0,0,0,1,0,0,0,2,11,6,0.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,370,        Iterator iter = res.entries.iterator();,2,0,0,1,2,0,0,0,0,3,39,8,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,345,        Iterator iter = res.entries.iterator();,2,1,1,1,2,1,6,0,0,14,39,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,358,        Iterator iter = res.entries.iterator();,6,0,0,1,2,0,6,2,0,14,39,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,187,                    if (x == x1) {,4,1,0,1,3,0,0,0,0,5,14,9,0.16667,1,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,188,"                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));",8,4,0,3,6,0,12,0,0,25,67,11,0.0,1,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,189,                        f0 = computeObjectiveValue(x0);,2,0,0,1,2,0,4,0,0,7,31,11,0.0,1,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,192,            x1 = x;,4,0,0,0,0,0,0,0,0,5,7,6,0.04762,1,1,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,193,            f1 = fx;,8,0,0,0,0,0,0,0,0,11,8,3,0.04762,1,1,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,359,      if (c == 0) {,2,1,0,1,3,0,0,0,0,3,13,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,576,"        return new Dfp(getField(), x);",6,0,0,2,4,1,0,0,0,6,30,4,0.05263,1,1,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,93,"  public Vector3D(double x, double y, double z) {",4,0,0,1,3,0,0,2,0,6,47,5,0.01266,1,1,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,94,    this.x = x;,4,0,0,0,0,0,0,0,0,5,11,4,0.01266,1,1,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,95,    this.y = y;,8,0,0,0,0,1,14,0,0,25,11,1,0.01266,1,1,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,238,        while (count < index) {,6,2,1,1,3,1,4,0,0,26,23,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,239,            count += idx;,4,0,0,0,0,0,0,0,0,5,13,6,0.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,240,            ++idx;,6,1,0,0,0,1,0,0,0,8,6,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,242,        --idx;,6,1,0,0,0,0,0,0,0,8,6,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,59,3482,        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);,16,2,0,3,6,1,4,0,0,22,59,5,0.0,1,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,60,129,        } catch (MaxIterationsExceededException ex) {,2,0,0,1,4,0,0,2,0,4,45,6,0.0,1,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,60,130,            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38,12,4,0,2,5,0,0,0,0,17,65,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,60,132,            } else if (x > (mean + 20 * standardDeviation)) {,6,3,0,2,6,0,0,0,0,9,49,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,60,133,                return 1;,6,1,0,0,0,1,4,0,0,12,9,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,60,135,                throw ex;,2,0,0,0,0,0,0,0,0,2,9,10,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,146,"        return optimize(f, goal, min, max, 0);",4,0,0,1,2,1,10,0,0,15,38,3,1.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,160,                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);,12,4,0,3,6,1,4,0,0,21,82,8,1.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,161,                final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);,12,4,0,3,6,1,4,0,0,21,82,8,1.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,417,        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;,4,3,0,3,6,1,12,0,0,19,54,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,402,                            tmp = 0.1;,2,0,0,0,0,0,2,0,0,5,10,3,0.28571,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,627,            } else if (fp < 0) {,0,0,1,1,4,0,2,0,0,7,20,3,0.25,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,605,            for (int j = 0; j < solvedCols; ++j) {,2,0,0,1,3,1,6,2,0,11,38,4,0.21053,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,610,                int pj = permutation[j];,4,2,1,1,2,0,0,0,0,10,24,3,0.21053,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,316,                            sum += jacobian[i][pj] * residuals[i];,2,1,1,3,6,0,0,0,0,14,38,14,0.08333,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,365,"                current = new VectorialPointValuePair(point, objective);",6,0,0,1,2,0,0,2,0,9,56,8,0.08333,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,443,"                    if (checker.converged(getIterations(), previous, current)) {",0,0,0,3,7,0,10,0,0,10,60,11,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,444,                        return current;,2,0,0,0,0,1,0,0,0,2,15,12,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,240,        double criterion = 0;,2,0,0,0,0,0,0,0,0,2,21,5,0.02326,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,241,        for (int i = 0; i < rows; ++i) {,8,1,0,1,3,0,0,0,0,10,32,4,0.02326,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,242,            final double residual = residuals[i];,2,0,1,1,2,1,0,0,0,7,37,6,0.02326,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,243,            criterion += residual * residual * residualsWeights[i];,6,1,1,1,2,0,0,0,0,12,55,6,0.02326,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,245,        return Math.sqrt(criterion / rows);,2,0,0,1,2,1,8,0,0,11,35,8,0.02326,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,44,        setMaxEvaluations(Integer.MAX_VALUE);,6,1,0,1,2,0,8,0,0,15,37,3,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,47,        setRelativeAccuracy(1.0e-14);,0,1,0,1,2,0,20,0,0,21,29,3,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,119,"        double fx = computeObjectiveValue(f, x);",6,1,0,1,2,0,0,0,0,8,40,11,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,120,        if (goalType == GoalType.MAXIMIZE) {,6,1,0,1,3,0,0,0,0,7,36,4,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,200,"                double fu = computeObjectiveValue(f, u);",2,0,0,1,2,0,6,0,0,8,40,9,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,201,                if (goalType == GoalType.MAXIMIZE) {,10,1,0,1,3,0,0,0,0,12,36,6,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,238,"                setResult(x, (goalType == GoalType.MAXIMIZE) ? -fx : fx, count);",16,1,0,2,4,0,6,0,0,25,64,3,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,241,            ++count;,2,0,0,0,0,0,0,0,0,3,8,6,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,66,"        return optimize(f, goalType, min, max, min + GOLDEN_SECTION * (max - min));",8,3,0,2,4,1,10,0,0,21,75,5,2.25,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,57,        throw new UnsupportedOperationException();,0,0,0,1,2,0,0,2,0,2,42,6,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,381,                            tmp = 0.1;,2,0,0,0,0,0,0,0,0,3,10,12,0.28571,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,511,                int pj = permutation[j];,10,2,0,1,2,0,0,0,0,12,24,3,0.25,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,512,                work1[pj] *= diag[pj] / dxNorm;,2,1,1,2,4,0,0,0,0,12,31,8,0.25,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,514,            sum2 = 0;,2,0,0,0,0,0,0,0,0,3,9,6,0.25,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,303,"                return new VectorialPointValuePair(point, objective);",4,0,0,1,2,1,0,2,0,6,53,9,0.0,1,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator,71,180,                loop     = false;,2,0,0,0,0,0,0,0,0,4,17,12,1.0,1,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,248,"              java.util.Arrays.fill(scale, scalAbsoluteTolerance);",6,0,0,1,2,0,6,0,0,12,52,13,0.02439,1,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,75,303,        return getCumPct((Comparable<?>) v);,6,4,0,2,4,1,0,0,0,10,36,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,284,            cachedVt = getV().transpose();,2,0,0,2,4,0,10,0,0,13,30,3,2.0,1,1,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,166,                for (int i = 0; i < p - 1; ++i) {,6,1,0,1,3,0,0,0,0,8,33,4,0.44444,1,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,178,                            wData[p - 1][j] = ei1[j] * mainBidiagonal[p - 1] / singularValues[j];,4,4,1,5,10,0,0,0,0,23,69,10,0.44444,1,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,275,        return cachedV;,6,1,1,0,0,2,0,0,0,13,15,3,0.4,1,1,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,252,                for (int i = 0; i < p - 1; ++i) {,16,4,0,1,3,1,0,0,0,22,33,5,0.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,499,        double max = 0;,2,0,0,0,0,0,0,0,0,2,15,5,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,501,        while (iter.hasNext()) {,10,0,0,2,5,3,0,4,0,17,24,2,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,502,            iter.advance();,8,0,0,1,2,3,0,0,0,12,15,1,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,503,            max += iter.value();,2,0,0,1,2,0,4,0,0,7,20,6,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,505,        return max;,2,0,0,0,0,1,4,0,0,6,11,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,721,"            max += Math.max(max, Math.abs(a));",2,0,0,2,4,0,12,0,0,15,34,6,1.0,1,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,78,219,                    if ((Math.abs(root - ta) <= convergence) &&,6,3,0,2,5,0,4,0,0,13,43,10,0.01205,1,1,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,78,224,                    } else if (Double.isNaN(previousEventTime) ||,2,2,0,1,4,0,10,0,0,15,45,4,0.01205,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,79,1626,          final int dp = p1[i] - p2[i];,2,1,1,2,4,1,0,0,0,12,29,6,0.33333,1,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,643,"                final double[] range       = eigenvaluesRange(begin, n);",0,0,1,2,4,0,0,0,0,3,56,4,0.06667,1,1,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,906,                        if ((work[i + 3] <= TOLERANCE_2 * work[i]) &&,4,4,1,3,7,0,0,0,0,14,45,12,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,82,"            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {",0,1,0,2,5,0,8,0,0,9,50,6,0.07692,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,292,        int start = getNumObjectiveFunctions();,2,0,0,1,2,0,2,0,0,4,39,5,0.06667,1,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,85,198,        if (fa * fb >= 0.0 ) {,12,4,0,1,3,0,8,0,0,25,22,3,0.0625,1,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,114,            if (lTData[i][i] < absolutePositivityThreshold) {,8,1,0,3,7,0,0,0,0,11,49,4,0.44444,1,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,115,                throw new NotPositiveDefiniteMatrixException();,6,0,0,1,2,1,0,2,0,9,47,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,275,"            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {",2,0,1,3,7,1,12,0,0,20,56,5,0.07143,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,276,                if (row == null) {,4,1,0,1,3,1,0,4,0,10,18,3,0.07143,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,329,        for (int i = 0; i < coefficients.length; i++) {,4,0,0,1,3,1,0,0,0,5,47,8,0.125,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,336,            if (basicRow != null) {,0,0,0,1,3,0,2,0,0,2,23,7,0.125,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,337,                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {,0,0,0,3,7,0,10,0,0,10,83,9,0.125,1,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,89,57,    public Frequency() {,6,0,0,1,3,1,0,0,0,8,20,2,0.16667,1,1,-1
defect4j,math,org/apache/commons/math/stat/Frequency,90,132,        } catch (ClassCastException ex) {   ,2,0,0,1,4,0,0,2,0,4,33,6,1.0,1,1,-1
defect4j,math,org/apache/commons/math/stat/Frequency,90,134,"            throw new IllegalArgumentException(""Value not comparable to existing values."");",2,0,0,1,2,0,4,6,0,13,79,3,1.0,1,1,-1
defect4j,math,org/apache/commons/math/fraction/Fraction,91,259,        double nOd = doubleValue();,2,0,0,1,2,0,2,0,0,4,27,5,0.0,1,0,-1
defect4j,math,org/apache/commons/math/fraction/Fraction,91,260,        double dOn = object.doubleValue();,2,0,0,1,2,0,4,0,0,6,34,5,0.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,95,"        return addAndCheck(a, b, ""overflow: add"");",4,0,0,1,2,1,0,0,0,6,42,8,0.5,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,184,"        long result = Math.round(binomialCoefficientDouble(n, k));",10,5,0,2,4,0,0,2,0,18,58,3,0.5,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,286,        double logSum = 0;,6,3,0,0,0,0,0,0,0,10,18,3,0.06667,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,290,            logSum += Math.log((double)i);,10,1,0,2,4,0,4,2,0,19,30,3,0.06667,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,350,    private static final long[] factorials = new long[] ,4,0,0,2,4,4,2,0,0,10,51,1,0.00495,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,63,        super();,2,1,0,1,2,0,0,0,0,3,8,4,0.0,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,186,            throw new ArithmeticException(,2,0,0,0,1,0,0,0,0,2,30,6,0.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,345,        long result = Math.round(factorialDouble(n));,2,0,0,2,4,0,8,0,0,10,45,5,1.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,346,        if (result == Long.MAX_VALUE) {,8,1,0,1,3,0,4,2,0,15,31,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,377,        return Math.floor(Math.exp(factorialLog(n)) + 0.5);,0,1,0,3,6,1,12,0,0,13,51,5,0.5,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,412,        if (u * v == 0) {,6,2,1,1,3,0,0,0,0,21,17,3,0.02222,1,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,147,            ret = d / (d - 2.0);,6,1,0,1,2,0,0,0,0,7,20,6,0.5,1,1,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,148,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.5,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,96,258,                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); ,2,3,0,8,16,0,28,0,0,34,179,11,0.03448,1,0,-1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,194,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0625,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,710,        if (a==0 || b==0){,4,3,0,1,3,0,0,0,0,7,18,4,1.0,1,1,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,166,        final int cols = problem.getAllParameters().length;,4,0,0,1,2,1,4,0,0,9,51,4,0.5,1,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,202,        int p = problem.getAllParameters().length;,6,2,1,1,2,0,4,0,0,17,42,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,207,        double[] errors = new double[problem.getAllParameters().length];,4,0,0,3,6,0,4,0,0,8,64,5,0.0,1,0,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,74,        double sumSq = 0.0d;,2,0,0,0,0,0,0,0,0,2,20,5,0.0,1,0,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,77,                dev = ((double) observed[i] - expected[i]);,2,1,1,4,8,0,0,0,0,12,43,6,0.0,1,0,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,80,        return sumSq;,6,1,0,0,0,1,0,0,0,7,13,3,0.0,1,1,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,50,        super();,2,0,0,1,2,0,0,0,0,2,8,7,0.05263,1,1,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,264,        return sumYY - sumXY * sumXY / sumXX;,8,3,0,0,0,1,0,0,0,11,37,4,0.125,1,0,-1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,169,"        char c = parseNextCharacter(source, pos);",4,0,0,1,2,2,6,4,0,16,41,1,0.5,1,1,-1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,202,        int w = whole.intValue();,2,0,0,1,2,0,0,0,0,2,25,9,0.5,1,1,-1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,203,        int n = num.intValue();,2,0,0,1,2,0,10,0,0,12,23,3,0.5,1,1,-1
