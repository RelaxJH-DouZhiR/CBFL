dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,1,53,"        super(LocalizedFormats.FRACTION_CONVERSION_OVERFLOW, value, p, q);",10,0,0,1,2,0,0,0,0,10,66,4,1.33333,0,0
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,1,54,    },0,0,0,0,1,0,0,0,0,1,1,4,1.33333,0,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,1,48,                                Object ... args) {,2,1,0,0,2,0,0,0,0,3,18,4,0.8,0,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,1,49,"        getContext().addMessage(pattern, args);",0,0,0,2,4,0,0,0,0,6,39,4,0.8,0,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,1,50,    },0,0,0,0,1,0,0,0,0,1,1,4,0.8,0,0
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,306,"                throw new FractionConversionException(value, p2, q2);",0,0,0,1,2,0,0,0,0,3,53,4,0.5,1,0
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,332,            numerator   = BigInteger.valueOf(p1);,2,0,0,1,2,0,6,0,0,9,37,6,0.5,0,0
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,333,            denominator = BigInteger.valueOf(q1);,2,1,0,1,2,0,0,0,0,3,37,4,0.5,0,0
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,356,"        this(value, 0, maxDenominator, 100);",4,0,0,1,2,0,0,0,0,4,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,357,    },4,0,0,0,1,0,0,0,0,4,1,5,0.5,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,144,"       this(value, 0, maxDenominator, 100);",18,2,1,1,2,0,0,0,0,22,36,3,0.5,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,145,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,215,"                throw new FractionConversionException(value, p2, q2);",6,0,0,1,2,0,0,2,0,8,53,9,0.5,1,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,239,            this.numerator = (int) p1;,0,0,0,1,2,0,0,0,0,3,26,4,0.5,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,240,            this.denominator = (int) q1;,0,0,0,1,2,0,0,0,0,3,28,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,193,        return inverseCumulativeProbability(random.nextDouble());,0,0,1,2,4,1,6,0,0,11,57,3,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,86,        final int indexRm1 = iRm1[index];,0,0,0,1,2,0,0,0,0,3,33,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,87,        final int indexRm2 = iRm2[index];,0,0,0,1,2,0,0,0,0,3,33,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,89,        final int v0       = v[index];,0,0,0,1,2,0,0,0,0,3,30,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,90,        final int vM1      = v[i1[index]];,0,0,0,2,4,0,0,0,0,6,34,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,91,        final int vM2      = v[i2[index]];,0,0,0,2,4,0,0,0,0,6,34,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,92,        final int vM3      = v[i3[index]];,0,0,0,2,4,0,0,0,0,6,34,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,94,        final int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);,2,3,1,4,8,1,0,0,0,14,71,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,95,        final int z1 = (v0 ^ (v0 << 25))  ^ (vM1 ^ (vM1 >>> 27));,4,0,0,4,8,0,4,0,0,8,57,3,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,96,        final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));,0,0,0,3,6,0,0,0,0,9,49,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,97,        final int z3 = z1      ^ z2;,6,1,0,0,0,0,0,0,0,8,28,10,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,98,        int z4 = z0 ^ (z1 ^ (z1 << 9)) ^ (z2 ^ (z2 << 21)) ^ (z3 ^ (z3 >>> 21));,0,0,0,6,12,0,0,0,0,18,72,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,100,        v[index]     = z3;,2,0,1,1,2,0,6,0,0,13,18,3,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,101,        v[indexRm1]  = z4;,2,0,1,1,2,0,0,0,0,7,18,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,102,        v[indexRm2] &= 0x80000000;,0,0,1,1,2,0,0,0,0,5,26,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,103,        index        = indexRm1;,0,0,0,0,0,0,0,0,0,0,24,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,108,        z4 = z4 ^ ((z4 <<  7) & 0xe46e1700);,0,0,0,2,4,0,0,0,0,6,36,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,109,        z4 = z4 ^ ((z4 << 15) & 0x9b868000);,0,0,0,2,4,0,0,0,0,6,36,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,111,        return z4 >>> (32 - bits);,0,0,0,1,2,1,0,0,0,4,26,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,90,        final long high = ((long) next(26)) << 26;,8,4,0,3,6,1,2,0,0,16,42,3,1.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,91,        final int  low  = next(26);,0,0,0,1,2,0,0,0,0,3,27,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,92,        return (high | low) * 0x1.0p-52d;,6,2,0,1,2,1,0,0,0,9,33,3,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,130,            double k = FastMath.sqrt((1.0 - p) / p);,2,0,0,2,4,0,0,0,0,4,40,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,131,            double tmp = mu - k * sigma;,0,0,0,0,0,0,0,0,0,0,28,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,132,            if (tmp > lower) {,0,0,0,1,3,0,0,0,0,4,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,135,            k = 1.0 / k;,4,1,0,0,0,0,0,0,0,6,12,6,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,136,            tmp = mu + k * sigma;,0,0,0,0,0,0,0,0,0,0,21,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,137,            if (tmp < upper) {,0,0,0,1,3,0,0,0,0,4,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,138,                upper = ((int) Math.ceil(tmp)) - 1;,4,0,0,3,6,2,0,2,0,8,35,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,385,        return Math.sqrt(a);,2,1,0,1,2,1,0,0,0,3,20,6,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,125,        final double mu = getNumericalMean();,0,0,0,1,2,0,0,0,0,3,37,4,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,126,        final double sigma = FastMath.sqrt(getNumericalVariance());,2,0,0,2,4,1,6,0,0,9,59,4,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,127,        final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||,2,1,0,2,5,1,12,0,0,17,79,4,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,129,        if (chebyshevApplies) {,0,0,0,1,3,0,0,0,0,4,23,4,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,142,"        return solveInverseCumulativeProbability(p, lower, upper);",0,0,0,1,2,1,0,0,0,4,58,4,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,158,        while (lower + 1 < upper) {,6,2,0,1,3,0,10,0,0,18,27,3,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,176,        return upper;,2,0,0,0,0,1,0,0,0,2,13,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,816,        final int len = a.length;,6,0,0,0,0,1,0,0,0,7,25,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,817,        if (len != b.length) {,2,0,0,1,3,0,0,0,0,2,22,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,823,        final double[] prodHigh = new double[len];,0,0,0,2,4,0,0,0,0,6,42,4,0.09091,1,1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,824,        double prodLowSum = 0;,0,0,0,0,0,0,0,0,0,0,22,4,0.09091,1,1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,826,        for (int i = 0; i < len; i++) {,10,1,0,1,3,0,0,0,0,12,31,3,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,827,            final double ai = a[i];,0,0,0,1,2,0,0,0,0,3,23,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,828,            final double ca = SPLIT_FACTOR * ai;,28,5,0,0,0,1,0,0,0,35,36,3,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,829,            final double aHigh = ca - (ca - ai);,0,0,0,1,2,0,0,0,0,3,36,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,830,            final double aLow = ai - aHigh;,0,0,0,0,0,0,0,0,0,0,31,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,832,            final double bi = b[i];,2,0,0,1,2,0,6,2,0,10,23,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,833,            final double cb = SPLIT_FACTOR * bi;,0,0,0,0,0,0,0,0,0,0,36,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,834,            final double bHigh = cb - (cb - bi);,6,1,0,1,2,0,0,0,0,7,36,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,835,            final double bLow = bi - bHigh;,0,0,0,0,0,0,0,0,0,0,31,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,836,            prodHigh[i] = ai * bi;,12,4,0,1,2,1,0,0,0,17,22,3,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,837,            final double prodLow = aLow * bLow - (((prodHigh[i] -,0,0,0,1,5,0,0,0,0,6,53,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,841,            prodLowSum += prodLow;,4,0,0,0,0,0,0,0,0,5,22,6,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,845,        final double prodHighCur = prodHigh[0];,2,0,0,1,2,0,0,0,0,2,39,5,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,846,        double prodHighNext = prodHigh[1];,0,0,0,1,2,0,0,0,0,3,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,3,38,"        super(value, 0, false);",4,0,1,1,2,0,0,0,0,9,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,3,39,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,3,48,"        super(specific, value, 0, false);",4,0,0,1,2,0,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,3,49,    },4,1,0,0,1,0,0,0,0,5,1,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,50,        this(boundIsAllowed ?,0,0,0,0,1,0,0,0,0,1,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,68,"        super(specific, wrong, min);",6,0,0,1,2,0,0,0,0,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,70,        this.min = min;,8,1,0,0,0,0,0,0,0,10,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,71,        this.boundIsAllowed = boundIsAllowed;,0,0,0,0,0,0,0,0,0,0,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,72,    },0,0,0,0,1,0,6,0,0,6,1,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,78,        return boundIsAllowed;,0,0,0,0,0,1,0,0,0,1,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,85,        return min;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,3,46,"        super(pattern, wrong, arguments);",0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,3,47,        argument = wrong;,6,0,0,0,0,0,0,0,0,7,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,3,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,3,54,        return argument;,10,1,0,0,0,1,0,0,0,12,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,3,44,                                        Object ... args) {,0,0,0,0,2,0,0,0,0,2,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,3,45,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,3,46,"        context.addMessage(pattern, args);",4,1,0,1,2,0,0,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,3,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,3,51,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,3,57,        return context.getMessage();,0,0,0,1,2,1,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,3,63,        return context.getLocalizedMessage();,0,0,0,1,2,1,4,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,3,44,"        super(specific, wrong, expected);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,3,45,        dimension = expected;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,3,46,    },4,2,0,0,1,0,0,0,0,6,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,3,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);",10,0,1,1,2,0,0,0,0,15,67,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,3,57,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,3,63,        return dimension;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,61,"        this(wrong, previous, index, MathArrays.OrderDirection.INCREASING, true);",0,0,0,1,2,0,0,0,0,3,73,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,62,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,80,        super(direction == MathArrays.OrderDirection.INCREASING ?,0,0,0,0,1,0,0,0,0,1,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,89,        this.direction = direction;,6,0,0,0,0,1,0,0,0,8,27,1,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,90,        this.strict = strict;,0,0,0,0,0,0,6,0,0,6,21,11,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,91,        this.index = index;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,92,        this.previous = previous;,8,2,0,0,0,0,8,0,0,19,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,93,    },2,0,0,0,1,0,0,0,0,3,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,99,        return direction;,0,0,0,0,0,1,0,0,0,1,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,105,        return strict;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,113,        return index;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,119,        return previous;,8,2,0,0,0,1,0,2,0,12,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,292,    public static enum OrderDirection {,0,0,0,0,1,0,0,0,0,1,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,294,"        INCREASING,",0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,296,        DECREASING,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,45,                                     Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,46,        context = new ExceptionContext(this);,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,47,"        context.addMessage(pattern, args);",0,0,0,1,2,0,8,0,0,8,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,48,    },14,4,0,0,1,1,18,0,0,40,1,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,60,        super(cause);,0,0,0,1,2,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,61,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,62,"        context.addMessage(pattern, args);",0,0,0,1,2,0,8,0,0,8,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,63,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,69,        this(LocalizedFormats.ILLEGAL_STATE);,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,70,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,74,        return context;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,80,        return context.getMessage();,2,0,0,1,2,1,4,0,0,7,28,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,86,        return context.getLocalizedMessage();,0,0,0,1,2,1,0,0,0,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,3,37,"        super(value, 0, true);",2,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,3,38,    },10,2,0,0,1,1,0,0,0,13,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,3,47,"        super(specific, value, 0, true);",4,1,1,1,2,0,0,0,0,11,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,3,48,    },6,1,0,0,1,0,0,0,0,7,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,3,43,    public MathArithmeticException() {,0,0,0,1,3,0,0,0,0,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,3,44,        context = new ExceptionContext(this);,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,3,45,        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,4,0,0,1,2,0,4,0,0,8,58,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,3,46,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,3,56,                                   Object ... args) {,0,0,0,0,2,0,0,0,0,2,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,3,57,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,3,58,"        context.addMessage(pattern, args);",0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,3,59,    },6,1,0,0,1,1,0,0,0,8,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,3,63,        return context;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,3,69,        return context.getMessage();,0,0,0,1,2,1,4,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,3,75,        return context.getLocalizedMessage();,6,1,0,1,2,2,4,0,0,13,37,1,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,3,37,    public MathInternalError() {,0,0,0,1,3,0,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,3,38,"        getContext().addMessage(LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",2,0,0,2,4,0,2,4,0,8,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,3,39,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,3,46,"        super(cause, LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",8,0,0,1,2,0,0,0,0,8,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,3,47,    },2,0,0,0,1,0,0,0,0,2,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,3,56,"        super(pattern, args);",4,0,0,1,2,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,3,57,    },2,0,0,0,1,3,0,4,0,15,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,3,41,        this(LocalizedFormats.NULL_NOT_ALLOWED);,4,0,0,1,2,0,0,0,0,4,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,3,42,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,3,50,"        super(pattern, arguments);",0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,3,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,3,37,        this(LocalizedFormats.NO_DATA);,4,0,0,1,2,0,0,2,0,7,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,3,38,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,3,45,        super(specific);,2,0,0,1,2,0,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,3,46,    },6,1,0,0,1,0,0,0,0,8,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,315,            switch (dir) {,4,0,0,1,3,0,0,0,0,5,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,52,    private MathArrays() {},2,0,0,2,4,1,0,0,0,3,23,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,86,        double[] newArr = new double[arr.length];,6,0,0,2,4,0,0,0,0,6,41,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,87,        for (int i = 0; i < arr.length; i++) {,0,0,0,1,3,0,0,0,0,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,88,            newArr[i] = arr[i] * val;,0,0,0,2,4,0,0,0,0,6,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,90,        return newArr;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,103,        for (int i = 0; i < arr.length; i++) {,10,1,0,1,3,0,0,0,0,12,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,104,            arr[i] *= val;,2,0,1,1,2,0,0,0,0,7,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,106,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,120,        if (a.length != b.length) {,0,0,0,1,3,0,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,121,"            throw new DimensionMismatchException(a.length, b.length);",8,0,0,1,2,0,0,2,0,10,57,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,124,        final double[] result = a.clone();,4,0,0,2,4,1,8,0,0,13,34,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,125,        for (int i = 0; i < a.length; i++) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,126,            result[i] += b[i];,0,0,1,2,4,0,0,0,0,9,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,128,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,142,        if (a.length != b.length) {,8,1,0,1,3,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,143,"            throw new DimensionMismatchException(a.length, b.length);",0,0,0,1,2,0,0,0,0,3,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,146,        final double[] result = a.clone();,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,147,        for (int i = 0; i < a.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,148,            result[i] -= b[i];,0,0,1,2,4,0,0,0,0,9,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,150,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,164,        if (a.length != b.length) {,0,0,0,1,3,0,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,165,"            throw new DimensionMismatchException(a.length, b.length);",8,0,0,1,2,0,0,2,0,10,57,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,168,        final double[] result = a.clone();,2,0,0,2,4,1,4,0,0,7,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,169,        for (int i = 0; i < a.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,170,            result[i] *= b[i];,0,0,0,2,4,0,0,0,0,6,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,172,        return result;,10,1,0,0,0,1,0,0,0,12,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,186,        if (a.length != b.length) {,10,1,1,1,3,0,0,0,0,14,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,187,"            throw new DimensionMismatchException(a.length, b.length);",12,1,0,1,2,0,0,2,0,15,57,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,190,        final double[] result = a.clone();,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,191,        for (int i = 0; i < a.length; i++) {,14,4,0,1,3,0,0,0,0,20,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,192,            result[i] /= b[i];,0,0,0,2,4,0,0,0,0,6,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,194,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,205,        double sum = 0;,2,0,0,0,0,0,8,0,0,10,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,206,        for (int i = 0; i < p1.length; i++) {,16,3,0,1,3,1,6,0,0,27,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,207,            sum += FastMath.abs(p1[i] - p2[i]);,0,0,0,3,6,0,0,0,0,9,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,209,        return sum;,4,0,0,0,0,4,0,0,0,7,11,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,220,      int sum = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,221,      for (int i = 0; i < p1.length; i++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,222,          sum += FastMath.abs(p1[i] - p2[i]);,2,1,1,3,6,0,4,0,0,16,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,224,      return sum;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,235,        double sum = 0;,14,3,0,0,0,0,0,0,0,19,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,236,        for (int i = 0; i < p1.length; i++) {,10,1,0,1,3,0,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,237,            final double dp = p1[i] - p2[i];,2,1,1,2,4,1,0,0,0,12,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,238,            sum += dp * dp;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,240,        return FastMath.sqrt(sum);,0,0,0,1,2,1,6,0,0,6,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,251,      double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,252,      for (int i = 0; i < p1.length; i++) {,10,1,0,1,3,0,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,253,          final double dp = p1[i] - p2[i];,8,4,1,2,4,1,0,0,0,28,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,254,          sum += dp * dp;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,256,      return FastMath.sqrt(sum);,0,0,0,1,2,1,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,267,        double max = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,268,        for (int i = 0; i < p1.length; i++) {,2,0,0,1,3,0,8,0,0,11,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,269,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",0,0,0,4,8,0,8,0,0,8,53,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,271,        return max;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,282,        int max = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,283,        for (int i = 0; i < p1.length; i++) {,12,2,1,1,3,0,0,0,0,20,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,284,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",2,1,1,4,8,0,10,0,0,22,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,286,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,311,        T previous = val[0];,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,312,        final int max = val.length;,6,0,0,0,0,1,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,313,        for (int i = 1; i < max; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,315,            switch (dir) {,4,0,0,1,3,0,0,0,0,5,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,317,                comp = previous.compareTo(val[i]);,2,0,1,2,4,0,8,0,0,17,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,318,                if (strict) {,4,0,0,1,3,2,0,4,0,10,13,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,319,                    if (comp >= 0) {,2,1,0,1,3,0,0,0,0,3,16,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,320,                        return false;,0,0,0,0,0,1,0,0,0,1,13,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,323,                    if (comp > 0) {,2,1,0,1,3,0,0,0,0,3,15,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,324,                        return false;,0,0,0,0,0,1,0,0,0,1,13,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,329,                comp = val[i].compareTo(previous);,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,330,                if (strict) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,331,                    if (comp >= 0) {,8,1,0,1,3,1,0,0,0,10,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,332,                        return false;,0,0,0,0,0,1,0,0,0,1,13,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,335,                    if (comp > 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,336,                       return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,342,                throw new MathInternalError();,0,0,0,1,2,0,0,2,0,2,30,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,345,            previous = val[i];,4,1,0,1,2,2,0,0,0,8,18,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,347,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,359,"        return checkOrder(val, dir, strict, false);",6,2,0,1,2,1,8,0,0,19,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,376,        double previous = val[0];,4,0,1,1,2,3,0,0,0,9,25,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,377,        final int max = val.length;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,381,        for (index = 1; index < max; index++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,382,            switch (dir) {,2,0,0,1,3,0,0,0,0,2,14,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,384,                if (strict) {,2,0,0,1,3,0,0,0,0,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,385,                    if (val[index] <= previous) {,0,0,0,2,5,0,0,0,0,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,386,                        break ITEM;,2,0,0,0,0,0,0,0,0,2,11,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,389,                    if (val[index] < previous) {,2,1,1,2,5,0,0,0,0,7,28,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,390,                        break ITEM;,2,0,0,0,0,0,0,0,0,2,11,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,395,                if (strict) {,2,0,0,1,3,3,0,0,0,5,13,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,396,                    if (val[index] >= previous) {,2,1,1,2,5,0,0,0,0,7,29,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,397,                        break ITEM;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,400,                    if (val[index] > previous) {,12,2,1,2,5,3,0,0,0,22,28,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,401,                        break ITEM;,2,0,0,0,0,0,0,0,0,2,11,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,407,                throw new MathInternalError();,0,0,0,1,2,0,0,2,0,2,30,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,410,            previous = val[index];,2,0,1,1,2,0,0,0,0,7,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,413,        if (index == max) {,4,1,0,1,3,0,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,415,            return true;,2,0,0,0,0,1,6,0,0,9,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,419,        if (abort) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,420,"            throw new NonMonotonicSequenceException(val[index], previous, index, dir, strict);",8,0,1,2,4,0,0,2,0,14,82,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,422,            return false;,10,3,1,0,0,1,0,0,0,21,13,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,437,"        checkOrder(val, dir, strict, true);",0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,438,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,448,"        checkOrder(val, OrderDirection.INCREASING, true);",10,1,0,1,2,0,4,0,0,16,49,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,449,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,461,        MathUtils.checkNotNull(in);,0,0,0,1,2,0,6,0,0,6,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,462,        for (int i = 1; i < in.length; i++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,463,            if (in[i].length != in[0].length) {,0,0,0,3,7,0,0,0,0,10,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,464,                throw new DimensionMismatchException(,0,0,0,0,1,0,0,0,0,1,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,469,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,481,        for (int i = 0; i < in.length; i++) {,10,1,1,1,3,0,0,0,0,17,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,482,            if (in[i] <= 0) {,2,1,1,2,5,0,0,0,0,8,17,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,483,                throw new NotStrictlyPositiveException(in[i]);,0,0,0,2,4,0,0,0,0,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,486,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,497,        for (int i = 0; i < in.length; i++) {,10,1,0,1,3,0,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,498,            if (in[i] < 0) {,0,1,1,2,5,0,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,499,                throw new NotPositiveException(in[i]);,0,0,0,2,4,0,0,0,0,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,502,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,513,        for (int i = 0; i < in.length; i ++) {,0,0,0,1,3,0,0,0,0,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,514,            for (int j = 0; j < in[i].length; j++) {,0,0,0,2,5,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,515,                if (in[i][j] < 0) {,0,0,0,3,7,0,0,0,0,10,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,516,                    throw new NotPositiveException(in[i][j]);,0,0,1,3,6,0,0,2,0,8,41,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,520,    },8,1,0,0,1,0,0,0,0,9,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,583,        double rdwarf = 3.834e-20;,2,1,1,0,0,0,0,0,0,8,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,584,        double rgiant = 1.304e+19;,2,0,0,0,0,0,0,0,0,2,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,585,        double s1 = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,586,        double s2 = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,587,        double s3 = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,588,        double x1max = 0;,8,1,0,0,0,0,2,0,0,12,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,589,        double x3max = 0;,4,0,0,0,0,0,0,2,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,590,        double floatn = v.length;,6,0,0,0,0,0,0,0,0,6,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,591,        double agiant = rgiant / floatn;,6,1,0,0,0,0,0,0,0,7,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,592,        for (int i = 0; i < v.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,593,            double xabs = Math.abs(v[i]);,4,6,1,2,4,0,4,0,0,26,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,594,            if (xabs < rdwarf || xabs > agiant) {,8,3,0,1,3,0,0,0,0,11,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,595,                if (xabs > rdwarf) {,6,1,0,1,3,0,0,0,0,8,20,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,596,                    if (xabs > x1max) {,6,1,0,1,3,0,0,0,0,7,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,597,                        double r = x1max / xabs;,6,1,0,0,0,0,4,0,0,11,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,598,                        s1= 1 + s1 * r * r;,8,2,0,0,0,0,0,0,0,11,19,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,599,                        x1max = xabs;,4,0,0,0,0,0,0,0,0,5,13,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,600,                    } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,601,                        double r = xabs / x1max;,6,1,0,0,0,0,0,0,0,7,24,13,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,602,                        s1 += r * r;,6,1,0,0,0,0,0,0,0,8,12,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,603,                    },4,0,0,0,1,1,0,4,0,9,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,605,                    if (xabs > x3max) {,4,1,0,1,3,0,0,0,0,5,19,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,606,                        double r = x3max / xabs;,6,1,0,0,0,0,0,0,0,7,24,13,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,607,                        s3= 1 + s3 * r * r;,0,0,0,0,0,0,8,0,0,8,19,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,608,                        x3max = xabs;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,609,                    } else {,2,0,0,0,2,0,0,4,0,6,8,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,610,                        if (xabs != 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,611,                            double r = xabs / x3max;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,612,                            s3 += r * r;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,613,                        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,617,                s2 += xabs * xabs;,6,1,0,0,0,0,0,0,0,8,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,621,        if (s1 != 0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,622,            norm = x1max * Math.sqrt(s1 + (s2 / x1max) / x1max);,12,4,0,2,4,0,4,0,0,21,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,624,            if (s2 == 0) {,2,1,0,1,3,0,8,2,0,13,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,625,                norm = x3max * Math.sqrt(s3);,6,1,0,1,2,1,6,0,0,15,29,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,627,                if (s2 >= x3max) {,0,0,0,1,3,0,0,0,0,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,628,                    norm = Math.sqrt(s2 * (1 + (x3max / s2) * (x3max * s3)));,12,5,0,4,8,0,4,0,0,22,57,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,630,                    norm = Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));,12,4,0,4,8,0,4,0,0,21,56,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,634,        return norm;,2,0,1,0,0,1,4,0,0,16,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,655,"        sortInPlace(x, OrderDirection.INCREASING, yList);",0,0,0,1,2,0,0,0,0,3,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,656,    },0,0,0,0,1,0,8,0,0,8,1,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,682,        if (x == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,683,            throw new NullArgumentException();,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,686,        final int yListLen = yList.length;,10,0,0,0,0,1,0,0,0,12,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,687,        final int len = x.length;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,689,        for (int j = 0; j < yListLen; j++) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,690,            final double[] y = yList[j];,0,0,0,2,4,0,0,0,0,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,691,            if (y == null) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,692,                throw new NullArgumentException();,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,694,            if (y.length != len) {,6,1,0,1,3,0,0,0,0,7,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,695,"                throw new DimensionMismatchException(y.length, len);",0,0,0,1,2,0,0,0,0,3,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,700,"        final List<Pair<Double, Integer>> list",2,0,0,0,0,1,0,8,0,11,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,702,        for (int i = 0; i < len; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,703,"            list.add(new Pair<Double, Integer>(x[i], i));",0,0,0,3,6,0,0,0,0,9,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,707,"        final Comparator<Pair<Double, Integer>> comp",0,0,0,0,0,0,0,0,0,0,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,722,"        Collections.sort(list, comp);",0,0,0,1,2,0,8,0,0,8,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,727,        final int[] indices = new int[len];,0,0,0,2,4,0,0,0,0,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,728,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,729,"            final Pair<Double, Integer> e = list.get(i);",2,0,0,1,2,1,6,6,0,15,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,730,            x[i] = e.getKey();,0,0,1,2,4,0,4,0,0,9,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,731,            indices[i] = e.getValue();,0,0,1,2,4,0,4,0,0,9,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,736,        for (int j = 0; j < yListLen; j++) {,8,1,0,1,3,0,0,0,0,10,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,738,            final double[] yInPlace = yList[j];,2,0,1,2,4,1,0,0,0,7,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,739,            final double[] yOrig = yInPlace.clone();,2,0,0,2,4,1,4,0,0,7,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,741,            for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,742,                yInPlace[i] = yOrig[indices[i]];,0,0,1,3,6,0,0,0,0,11,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,745,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,754,"         return copyOf(source, source.length);",4,0,0,1,2,1,4,0,0,8,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,764,"         return copyOf(source, source.length);",4,0,0,1,2,1,4,0,0,8,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,777,         final int[] output = new int[len];,2,0,1,2,4,1,0,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,778,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",0,0,0,2,4,0,0,0,0,6,73,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,779,         return output;,2,0,0,0,0,1,8,0,0,10,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,792,         final double[] output = new double[len];,14,1,1,2,4,1,0,0,0,20,40,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,793,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",0,0,0,2,4,0,0,0,0,6,73,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,794,         return output;,2,0,0,0,0,1,6,0,0,8,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,818,"            throw new DimensionMismatchException(len, b.length);",0,0,0,1,2,0,0,0,0,3,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,847,        double sHighPrev = prodHighCur + prodHighNext;,10,1,0,0,0,0,0,0,0,11,46,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,848,        double sPrime = sHighPrev - prodHighNext;,0,0,0,0,0,0,0,0,0,0,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,849,        double sLowSum = (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);,0,0,0,3,6,0,0,0,0,9,80,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,851,        final int lenMinusOne = len - 1;,4,1,0,0,0,1,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,852,        for (int i = 1; i < lenMinusOne; i++) {,12,2,1,1,3,0,0,0,0,20,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,853,            prodHighNext = prodHigh[i + 1];,4,1,1,1,2,0,12,0,0,20,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,854,            final double sHighCur = sHighPrev + prodHighNext;,0,0,0,0,0,0,0,0,0,0,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,855,            sPrime = sHighCur - prodHighNext;,6,1,0,0,0,0,0,0,0,8,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,856,            sLowSum += (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);,12,4,0,3,6,0,0,0,0,17,71,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,857,            sHighPrev = sHighCur;,4,0,0,0,0,0,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,860,        double result = sHighPrev + (prodLowSum + sLowSum);,8,2,0,1,2,0,0,0,0,10,51,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,862,        if (Double.isNaN(result)) {,2,0,0,2,5,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,865,            result = 0;,2,0,0,0,0,0,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,866,            for (int i = 0; i < len; ++i) {,10,1,0,1,3,0,0,0,0,12,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,867,                result += a[i] * b[i];,2,1,1,2,4,0,0,0,0,12,22,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,871,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,910,        final double ca1        = SPLIT_FACTOR * a1;,0,0,0,0,0,0,0,0,0,0,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,911,        final double a1High     = ca1 - (ca1 - a1);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,912,        final double a1Low      = a1 - a1High;,10,2,0,0,0,1,0,0,0,13,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,913,        final double cb1        = SPLIT_FACTOR * b1;,0,0,0,0,0,0,0,0,0,0,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,914,        final double b1High     = cb1 - (cb1 - b1);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,915,        final double b1Low      = b1 - b1High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,918,        final double prod1High  = a1 * b1;,6,1,0,0,0,1,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,919,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,922,        final double ca2        = SPLIT_FACTOR * a2;,0,0,0,0,0,0,0,0,0,0,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,923,        final double a2High     = ca2 - (ca2 - a2);,10,2,0,1,2,4,0,0,0,16,43,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,924,        final double a2Low      = a2 - a2High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,925,        final double cb2        = SPLIT_FACTOR * b2;,0,0,0,0,0,0,0,0,0,0,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,926,        final double b2High     = cb2 - (cb2 - b2);,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,927,        final double b2Low      = b2 - b2High;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,930,        final double prod2High  = a2 * b2;,6,1,0,0,0,1,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,931,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,20,8,0,3,6,1,0,0,0,29,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,934,        final double s12High    = prod1High + prod2High;,10,1,0,0,0,1,0,2,0,14,48,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,935,        final double s12Prime   = s12High - prod2High;,10,4,0,0,0,1,0,0,0,15,46,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,936,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,12,4,0,3,6,1,0,0,0,17,86,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,940,        double result = s12High + (prod1Low + prod2Low + s12Low);,0,0,0,1,2,0,0,0,0,3,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,942,        if (Double.isNaN(result)) {,4,0,0,2,5,0,14,0,0,18,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,945,            result = a1 * b1 + a2 * b2;,10,3,0,0,0,0,0,0,0,14,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,948,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,990,        final double ca1        = SPLIT_FACTOR * a1;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,991,        final double a1High     = ca1 - (ca1 - a1);,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,992,        final double a1Low      = a1 - a1High;,8,2,0,0,0,1,4,0,0,15,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,993,        final double cb1        = SPLIT_FACTOR * b1;,2,0,0,0,0,3,0,0,0,5,44,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,994,        final double b1High     = cb1 - (cb1 - b1);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,995,        final double b1Low      = b1 - b1High;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,998,        final double prod1High  = a1 * b1;,6,1,0,0,0,1,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,999,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,20,8,0,3,6,1,0,0,0,29,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1002,        final double ca2        = SPLIT_FACTOR * a2;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1003,        final double a2High     = ca2 - (ca2 - a2);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1004,        final double a2Low      = a2 - a2High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1005,        final double cb2        = SPLIT_FACTOR * b2;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1006,        final double b2High     = cb2 - (cb2 - b2);,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1007,        final double b2Low      = b2 - b2High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1010,        final double prod2High  = a2 * b2;,6,1,0,0,0,1,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1011,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,20,8,0,3,6,1,0,0,0,29,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1014,        final double ca3        = SPLIT_FACTOR * a3;,0,0,0,0,0,0,0,0,0,0,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1015,        final double a3High     = ca3 - (ca3 - a3);,16,4,0,1,2,2,0,0,0,22,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1016,        final double a3Low      = a3 - a3High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1017,        final double cb3        = SPLIT_FACTOR * b3;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1018,        final double b3High     = cb3 - (cb3 - b3);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1019,        final double b3Low      = b3 - b3High;,8,1,0,0,0,1,0,0,0,11,38,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1022,        final double prod3High  = a3 * b3;,6,1,0,0,0,1,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1023,        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);,24,10,1,3,6,1,0,0,0,42,110,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1026,        final double s12High    = prod1High + prod2High;,6,1,0,0,0,1,0,0,0,8,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1027,        final double s12Prime   = s12High - prod2High;,6,1,1,0,0,1,0,0,0,13,46,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1028,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,12,4,0,3,6,1,0,0,0,17,86,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1031,        final double s123High   = s12High + prod3High;,0,0,0,0,0,0,0,0,0,0,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1032,        final double s123Prime  = s123High - prod3High;,8,1,0,0,0,2,2,0,0,13,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1033,        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);,14,4,0,3,6,2,6,2,0,28,87,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1037,        double result = s123High + (prod1Low + prod2Low + prod3Low + s12Low + s123Low);,14,2,0,1,2,0,0,0,0,16,79,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1039,        if (Double.isNaN(result)) {,0,0,0,2,5,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1042,            result = a1 * b1 + a2 * b2 + a3 * b3;,14,5,0,0,0,0,0,0,0,20,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1045,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1092,        final double ca1        = SPLIT_FACTOR * a1;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1093,        final double a1High     = ca1 - (ca1 - a1);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1094,        final double a1Low      = a1 - a1High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1095,        final double cb1        = SPLIT_FACTOR * b1;,2,0,0,0,0,0,0,0,0,3,44,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1096,        final double b1High     = cb1 - (cb1 - b1);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1097,        final double b1Low      = b1 - b1High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1100,        final double prod1High  = a1 * b1;,6,1,0,0,0,1,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1101,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1104,        final double ca2        = SPLIT_FACTOR * a2;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1105,        final double a2High     = ca2 - (ca2 - a2);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1106,        final double a2Low      = a2 - a2High;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1107,        final double cb2        = SPLIT_FACTOR * b2;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1108,        final double b2High     = cb2 - (cb2 - b2);,0,0,1,1,2,0,0,0,0,5,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1109,        final double b2Low      = b2 - b2High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1112,        final double prod2High  = a2 * b2;,6,1,0,0,0,1,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1113,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,20,8,0,3,6,1,0,0,0,29,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1116,        final double ca3        = SPLIT_FACTOR * a3;,0,0,0,0,0,0,0,0,0,0,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1117,        final double a3High     = ca3 - (ca3 - a3);,20,5,0,1,2,1,0,0,0,27,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1118,        final double a3Low      = a3 - a3High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1119,        final double cb3        = SPLIT_FACTOR * b3;,0,0,0,0,0,0,0,0,0,0,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1120,        final double b3High     = cb3 - (cb3 - b3);,2,0,0,1,2,2,4,0,0,8,43,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1121,        final double b3Low      = b3 - b3High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1124,        final double prod3High  = a3 * b3;,6,1,0,0,0,1,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1125,        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);,24,9,0,3,6,1,0,0,0,34,110,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1128,        final double ca4        = SPLIT_FACTOR * a4;,0,0,0,0,0,0,0,0,0,0,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1129,        final double a4High     = ca4 - (ca4 - a4);,26,7,0,1,2,0,4,0,0,38,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1130,        final double a4Low      = a4 - a4High;,6,1,0,0,0,1,24,0,0,32,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1131,        final double cb4        = SPLIT_FACTOR * b4;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1132,        final double b4High     = cb4 - (cb4 - b4);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1133,        final double b4Low      = b4 - b4High;,8,2,1,0,0,1,0,0,0,15,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1136,        final double prod4High  = a4 * b4;,8,1,0,0,0,1,0,0,0,11,34,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1137,        final double prod4Low   = a4Low * b4Low - (((prod4High - a4High * b4High) - a4Low * b4High) - a4High * b4Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1140,        final double s12High    = prod1High + prod2High;,10,3,0,0,0,1,0,0,0,15,48,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1141,        final double s12Prime   = s12High - prod2High;,16,3,1,0,0,1,0,0,0,25,46,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1142,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,0,0,0,3,6,0,0,0,0,9,86,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1145,        final double s123High   = s12High + prod3High;,6,1,0,0,0,1,0,0,0,8,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1146,        final double s123Prime  = s123High - prod3High;,6,1,0,0,0,1,0,2,0,10,47,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1147,        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);,12,4,0,3,6,1,0,0,0,17,87,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1150,        final double s1234High  = s123High + prod4High;,0,0,0,0,0,0,0,0,0,0,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1151,        final double s1234Prime = s1234High - prod4High;,10,1,0,0,0,1,0,0,0,13,48,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1152,        final double s1234Low   = (prod4High - (s1234High - s1234Prime)) + (s123High - s1234Prime);,12,4,0,3,6,1,0,0,0,17,91,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1156,        double result = s1234High + (prod1Low + prod2Low + prod3Low + prod4Low + s12Low + s123Low + s1234Low);,18,2,0,1,2,0,0,0,0,20,102,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1158,        if (Double.isNaN(result)) {,0,0,0,2,5,0,6,0,0,6,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1161,            result = a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4;,22,7,0,0,0,0,0,0,0,31,47,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1164,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1178,        if ((x == null) || (y == null)) {,0,0,0,3,7,0,0,0,0,10,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1179,            return !((x == null) ^ (y == null));,0,0,0,3,6,1,0,0,0,10,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1181,        if (x.length != y.length) {,0,0,0,1,3,0,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1182,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1184,        for (int i = 0; i < x.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1185,"            if (!Precision.equals(x[i], y[i])) {",0,0,1,4,9,0,4,0,0,13,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1186,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1189,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1204,        if ((x == null) || (y == null)) {,4,3,0,3,7,0,0,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1205,            return !((x == null) ^ (y == null));,14,6,0,3,6,1,0,0,0,23,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1207,        if (x.length != y.length) {,8,1,0,1,3,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1208,            return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1210,        for (int i = 0; i < x.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1211,"            if (!Precision.equalsIncludingNaN(x[i], y[i])) {",2,1,1,4,9,0,10,0,0,22,48,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1212,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1215,        return true;,4,2,0,0,0,2,12,0,0,20,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1229,        if ((x == null) || (y == null)) {,10,4,1,3,7,0,0,0,0,17,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1230,            return !((x == null) ^ (y == null));,4,3,0,3,6,1,0,0,0,8,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1232,        if (x.length != y.length) {,8,1,0,1,3,0,0,2,0,11,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1233,            return false;,6,0,0,0,0,1,4,0,0,11,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1235,        for (int i = 0; i < x.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1236,"            if (!Precision.equals(x[i], y[i])) {",0,0,0,4,9,0,0,0,0,13,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1237,                return false;,2,0,0,0,0,1,4,0,0,8,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1240,        return true;,6,0,0,0,0,1,0,0,0,8,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1255,        if ((x == null) || (y == null)) {,0,0,0,3,7,0,0,0,0,10,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1256,            return !((x == null) ^ (y == null));,22,6,1,3,6,1,12,0,0,46,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1258,        if (x.length != y.length) {,18,1,0,1,3,0,0,0,0,19,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1259,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1261,        for (int i = 0; i < x.length; ++i) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1262,"            if (!Precision.equalsIncludingNaN(x[i], y[i])) {",0,0,1,4,9,0,4,0,0,13,48,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1263,                return false;,6,0,0,0,0,1,0,2,0,9,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1266,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1293,         if (Double.isInfinite(normalizedSum)) {,2,0,0,2,5,0,6,0,0,8,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1294,             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);,10,0,0,1,2,0,0,2,0,12,76,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1296,         if (Double.isNaN(normalizedSum)) {,2,1,0,2,5,0,0,0,0,3,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1297,             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);,4,0,0,1,2,0,0,2,0,6,71,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1299,         double sum = 0d;,8,2,1,0,0,0,0,0,0,17,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1300,         final int len = values.length;,6,0,0,0,0,1,0,0,0,7,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1301,         double[] out = new double[len];,2,0,1,2,4,0,0,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1302,         for (int i = 0; i < len; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1303,             if (Double.isInfinite(values[i])) {,0,0,1,3,7,0,4,0,0,8,35,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1304,"                 throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);",6,0,1,2,4,0,0,2,0,12,94,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1306,             if (!Double.isNaN(values[i])) {,0,0,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1307,                 sum += values[i];,2,0,1,1,2,0,8,0,0,15,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1310,         if (sum == 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1311,             throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);,4,0,0,1,2,0,0,2,0,6,71,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1313,         for (int i = 0; i < len; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1314,             if (Double.isNaN(values[i])) {,8,2,1,3,7,0,4,0,0,19,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1315,                 out[i] = Double.NaN;,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1317,                 out[i] = values[i] * normalizedSum / sum;,6,2,1,2,4,0,0,0,0,19,41,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1320,         return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1335,"         T[] array = (T[]) Array.newInstance(field.getRuntimeClass(), length);",6,0,0,5,10,0,10,4,0,22,69,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1336,"         Arrays.fill(array, field.getZero());",0,0,0,2,4,0,10,0,0,11,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1337,         return array;,12,3,0,0,0,1,0,0,0,15,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1355,         if (columns < 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1356,"             T[] dummyRow = buildArray(field, 0);",0,0,0,2,4,0,0,0,0,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1357,"             array = (T[][]) Array.newInstance(dummyRow.getClass(), rows);",2,0,0,5,10,0,10,2,0,15,61,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1358,         } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1359,"             array = (T[][]) Array.newInstance(field.getRuntimeClass(),",0,0,0,4,9,0,0,0,0,13,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1363,             for (int i = 0; i < rows; ++i) {,0,0,0,1,3,0,0,0,0,4,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1364,"                 Arrays.fill(array[i], field.getZero());",0,0,1,3,6,0,8,0,0,12,39,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1367,         return array;,4,1,0,0,0,1,0,0,0,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1395,         MathUtils.checkNotNull(x);,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1396,         MathUtils.checkNotNull(h);,0,0,0,1,2,0,6,0,0,6,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1398,         final int xLen = x.length;,6,0,0,0,0,1,0,0,0,7,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1399,         final int hLen = h.length;,6,0,0,0,0,1,0,0,0,7,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1401,         if (xLen == 0 || hLen == 0) {,0,0,0,1,3,0,0,0,0,4,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1402,             throw new NoDataException();,0,0,0,1,2,0,0,2,0,2,28,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1406,         final int totalLength = xLen + hLen - 1;,6,2,0,0,0,1,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1407,         final double[] y = new double[totalLength];,0,0,0,2,4,0,0,0,0,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1410,         for (int n = 0; n < totalLength; n++) {,8,1,0,1,3,0,0,0,0,10,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1411,             double yn = 0;,2,0,0,0,0,0,0,0,0,3,14,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1412,"             int k = FastMath.max(0, n + 1 - xLen);",10,2,0,1,2,0,4,0,0,17,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1413,             int j = n - k;,6,1,0,0,0,0,14,0,0,21,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1414,             while (k < hLen && j >= 0) {,0,0,0,1,3,0,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1415,                 yn += x[j--] * h[k++];,6,1,1,2,4,0,0,0,0,14,22,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1417,             y[n] = yn;,2,0,1,1,2,0,0,0,0,7,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1420,         return y;,4,0,0,0,0,1,0,0,0,4,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,709,"            new Comparator<Pair<Double, Integer>>() {",0,0,0,1,3,0,0,0,0,4,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,712,                return o1.getKey().compareTo(o2.getKey());,0,0,0,3,6,1,0,2,0,2,42,13,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,714,"        } : new Comparator<Pair<Double,Integer>>() {",8,1,0,1,4,1,6,0,0,17,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,717,                return o2.getKey().compareTo(o1.getKey());,0,0,0,3,6,1,0,0,0,10,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,113,        Line line1 = (Line) getHyperplane();,2,0,0,2,4,0,2,4,0,8,36,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,114,        Line line2 = (Line) subLine.getHyperplane();,10,0,0,2,4,1,6,0,0,18,44,3,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,117,        Vector2D v2D = line1.intersection(line2);,2,0,0,1,2,0,6,2,0,10,41,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,120,        Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));,4,0,0,3,6,0,12,2,0,18,71,3,0.14286,1,1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,56,"        this(new Line(start, end), buildIntervalSet(start, end));",0,0,0,3,6,0,0,0,0,9,57,4,0.14286,1,1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,57,    },0,0,0,0,1,0,0,0,0,1,1,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,113,        Vector3D v1D = line.intersection(subLine.line);,6,0,0,1,2,0,4,2,0,12,47,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,116,        Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));,2,0,0,2,4,0,10,2,0,14,65,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,156,        return distance(p) < 1.0e-10;,0,0,0,1,2,1,0,0,0,4,29,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,164,        final Vector3D d = p.subtract(zero);,2,0,0,1,2,1,6,2,0,11,36,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,165,"        final Vector3D n = new Vector3D(1.0, d, -d.dotProduct(direction), direction);",10,0,0,2,4,1,14,4,0,30,77,3,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,166,        return n.getNorm();,0,0,0,1,2,1,0,0,0,4,19,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,195,        final double cos = direction.dotProduct(line.direction);,8,0,0,1,2,1,4,0,0,14,56,0,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,196,        final double n = 1 - cos * cos;,6,2,0,0,0,1,0,0,0,9,31,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,197,        if (n < Precision.EPSILON) {,0,0,0,1,3,0,0,0,0,4,28,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,202,        final Vector3D delta0 = line.zero.subtract(zero);,0,0,0,1,2,0,0,0,0,3,49,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,203,        final double a        = delta0.dotProduct(direction);,0,0,0,1,2,0,0,0,0,3,53,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,204,        final double b        = delta0.dotProduct(line.direction);,12,0,1,1,2,1,8,0,0,27,58,3,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,206,"        return new Vector3D(1, zero, (a - b * cos) / n, direction);",12,3,0,2,4,1,0,2,0,17,59,5,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,216,        final Vector3D closest = closestPoint(line);,2,0,0,1,2,1,4,2,0,9,44,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,217,        return line.contains(closest) ? closest : null;,0,0,0,1,2,1,0,0,0,4,47,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,56,"        super(new Line(start, end), buildIntervalSet(start, end));",8,0,0,3,6,0,6,2,0,16,58,3,0.125,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,57,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,137,"        final Line line = new Line(start, end);",6,0,0,1,2,1,0,4,0,11,39,4,0.125,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,138,"        return new IntervalsSet(line.toSubSpace(start).getX(),",0,0,0,2,5,1,8,2,0,10,54,5,0.125,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,114,        return point.subtract(zero).dotProduct(direction);,0,0,0,2,4,1,10,0,0,10,50,5,0.125,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,129,        return new Vector1D(getAbscissa((Vector3D) point));,2,0,0,3,6,2,2,0,0,5,51,4,0.125,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,118,        final SubHyperplane<Euclidean1D> upperCut =,2,0,0,0,0,1,0,4,0,7,43,4,0.12121,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,120,"        return new BSPTree<Euclidean1D>(lowerCut,",0,0,0,0,1,1,0,0,0,2,41,4,0.12121,0,0
defect4j,math,org/apache/commons/math3/complex/Complex,5,304,        if (real == 0.0 && imaginary == 0.0) {,4,3,0,1,3,0,0,0,0,7,38,4,0.25,0,0
defect4j,math,org/apache/commons/math3/complex/Complex,5,300,        if (isNaN) {,2,0,0,1,3,0,4,2,0,8,12,4,0.2,0,0
defect4j,math,org/apache/commons/math3/complex/Complex,5,348,                return (real == c.real) && (imaginary == c.imaginary);,0,0,0,2,4,1,0,0,0,7,54,4,0.02439,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,451,                if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) {,10,1,0,2,5,0,2,2,0,16,62,3,21.33333,1,1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,233,        if (mti >= N) { // generate N words at one time,0,0,0,1,3,0,0,0,0,4,47,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,234,            int mtNext = mt[0];,22,7,0,1,2,0,0,0,0,30,19,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,235,            for (int k = 0; k < N - M; ++k) {,0,0,0,1,3,0,0,0,0,4,33,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,236,                int mtCurr = mtNext;,0,0,0,0,0,0,0,0,0,0,20,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,237,                mtNext = mt[k + 1];,0,0,0,1,2,0,0,0,0,3,19,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,238,                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);,2,0,1,2,4,0,0,0,0,7,50,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,239,                mt[k] = mt[k + M] ^ (y >>> 1) ^ MAG01[y & 0x1];,8,4,1,4,8,0,0,0,0,21,47,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,241,            for (int k = N - M; k < N - 1; ++k) {,0,0,0,1,3,0,0,0,0,4,37,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,242,                int mtCurr = mtNext;,4,0,0,0,0,0,0,0,0,4,20,9,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,243,                mtNext = mt[k + 1];,4,1,1,1,2,0,0,0,0,8,19,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,244,                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);,0,0,0,2,4,0,0,0,0,6,50,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,245,                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];,0,0,0,5,10,0,0,0,0,15,53,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,247,            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);,4,3,1,3,6,0,0,0,0,10,49,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,248,            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];,0,0,0,4,8,0,0,0,0,12,51,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,250,            mti = 0;,14,3,0,0,0,0,0,0,0,18,8,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,253,        y = mt[mti++];,0,0,0,1,2,0,0,0,0,3,14,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,256,        y ^=  y >>> 11;,8,2,0,0,0,0,4,0,0,15,15,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,257,        y ^= (y <<   7) & 0x9d2c5680;,4,2,0,1,2,0,0,0,0,7,29,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,258,        y ^= (y <<  15) & 0xefc60000;,12,0,0,1,2,0,2,0,0,15,29,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,259,        y ^=  y >>> 18;,0,0,0,0,0,0,0,0,0,0,15,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,261,        return y >>> (32 - bits);,6,2,0,1,2,1,0,0,0,8,25,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,843,"        DoubleIndex(double value, int index) {",10,0,0,1,3,0,0,0,0,11,38,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,844,            this.value = value;,4,0,0,0,0,0,0,0,0,5,19,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,845,            this.index = index;,4,0,0,0,0,0,0,0,0,5,19,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,846,        },0,1,0,0,1,0,10,0,0,11,1,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,850,"            return Double.compare(value, o.value);",2,0,0,1,2,1,4,0,0,6,38,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,833,    private static class DoubleIndex implements Comparable<DoubleIndex> {,0,0,0,0,1,0,0,0,0,1,69,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,892,        public FitnessFunction() {,0,0,0,1,3,0,0,0,0,4,26,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,893,            valueRange = 1;,8,3,0,0,0,1,0,0,0,12,15,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,894,            isRepairMode = true;,0,0,0,0,0,0,0,0,0,0,20,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,895,        },12,3,1,0,1,3,14,8,0,53,1,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,903,            if (isRepairMode) {,2,0,0,1,3,0,0,0,0,2,19,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,904,                double[] repaired = repair(point);,0,0,0,2,4,0,0,0,0,6,34,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,905,                value = CMAESOptimizer.this.computeObjectiveValue(repaired) +,6,1,0,1,2,3,4,4,0,19,61,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,907,            } else {,0,0,0,0,2,0,0,0,0,2,8,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,910,            return isMinimize ? value : -value;,0,0,0,0,0,1,0,0,0,1,35,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,936,            this.valueRange = valueRange;,0,0,0,0,0,0,0,0,0,0,29,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,937,        },0,0,0,0,1,0,0,0,0,1,1,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,944,            final double[] lB = CMAESOptimizer.this.getLowerBound();,0,0,0,2,4,0,0,0,0,6,56,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,945,            final double[] uB = CMAESOptimizer.this.getUpperBound();,6,0,0,2,4,1,2,0,0,9,56,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,947,            final double[] repaired = new double[x.length];,4,1,0,2,4,0,0,0,0,5,47,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,948,            for (int i = 0; i < x.length; i++) {,0,0,0,1,3,0,0,0,0,4,36,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,949,                if (x[i] < lB[i]) {,4,2,1,3,7,0,0,0,0,18,19,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,951,                } else if (x[i] > uB[i]) {,0,0,0,3,8,0,6,0,0,6,26,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,954,                    repaired[i] = x[i];,0,0,0,2,4,0,0,0,0,6,19,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,957,            return repaired;,4,0,0,0,0,1,0,0,0,5,16,0,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,966,            double penalty = 0;,0,0,0,0,0,0,0,0,0,0,19,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,967,            for (int i = 0; i < x.length; i++) {,0,0,0,1,3,0,0,0,0,4,36,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,968,                double diff = Math.abs(x[i] - repaired[i]);,0,0,0,3,6,0,0,0,0,9,43,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,969,                penalty += diff * valueRange;,6,1,0,0,0,0,0,0,0,8,29,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,971,            return isMinimize ? penalty : -penalty;,0,0,0,0,0,1,0,0,0,1,39,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,881,    private class FitnessFunction {,8,0,0,0,1,3,8,2,0,22,31,2,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,370,        isMinimize = getGoalType().equals(GoalType.MINIMIZE);,2,0,0,2,4,0,0,0,0,3,53,2,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,371,        final FitnessFunction fitfun = new FitnessFunction();,2,0,0,1,2,1,0,4,0,7,53,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,372,        final double[] guess = getStartPoint();,0,0,0,2,4,0,0,0,0,6,39,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,374,        dimension = guess.length;,0,0,0,0,0,0,0,0,0,0,25,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,375,        initializeCMA(guess);,0,0,0,1,2,0,0,0,0,3,21,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,376,        iterations = 0;,2,0,0,0,0,0,0,0,0,2,15,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,377,        double bestValue = fitfun.value(guess);,0,0,0,1,2,0,0,0,0,3,39,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,378,"        push(fitnessHistory, bestValue);",10,0,0,1,2,0,0,2,0,13,32,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,379,        PointValuePair optimum,2,0,0,0,0,0,0,2,0,4,22,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,382,        PointValuePair lastResult = null;,0,0,0,0,0,0,0,0,0,0,33,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,387,        for (iterations = 1; iterations <= maxIterations; iterations++) {,0,0,0,1,3,0,0,0,0,4,65,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,390,"            final RealMatrix arz = randn1(dimension, lambda);",0,0,0,1,2,0,0,0,0,3,49,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,391,"            final RealMatrix arx = zeros(dimension, lambda);",0,0,0,1,2,0,0,0,0,3,48,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,392,            final double[] fitness = new double[lambda];,2,0,0,2,4,3,0,4,0,9,44,2,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,394,            for (int k = 0; k < lambda; k++) {,0,0,0,1,3,0,0,0,0,4,34,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,395,                RealMatrix arxk = null;,2,1,0,0,0,0,0,0,0,3,23,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,396,                for (int i = 0; i < checkFeasableCount + 1; i++) {,8,2,0,1,3,0,0,0,0,11,50,9,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,397,                    if (diagonalOnly <= 0) {,2,0,0,1,3,1,2,0,0,5,24,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,404,                    if (i >= checkFeasableCount ||,4,2,0,0,1,0,0,0,0,6,30,11,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,411,"                copyColumn(arxk, 0, arx, k);",0,0,0,1,2,0,0,0,0,3,28,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,413,                    fitness[k] = fitfun.value(arx.getColumn(k)); // compute fitness,0,0,0,3,6,0,0,0,0,9,63,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,416,                },0,0,0,0,1,0,0,0,0,1,1,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,419,            final int[] arindex = sortedIndices(fitness);,2,0,0,2,4,0,4,0,0,6,45,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,421,            final RealMatrix xold = xmean; // for speed up of Eq. (2) and (3),4,0,0,2,4,1,0,2,0,7,65,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,422,"            final RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu));",0,0,0,2,4,0,0,0,0,6,78,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,423,            xmean = bestArx.multiply(weights);,0,0,0,1,2,0,0,0,0,3,34,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,424,"            final RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu));",14,2,0,2,4,2,30,4,0,53,78,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,425,            final RealMatrix zmean = bestArz.multiply(weights);,10,1,0,1,2,0,0,0,0,13,51,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,426,"            final boolean hsig = updateEvolutionPaths(zmean, xold);",0,0,0,1,2,0,0,0,0,3,55,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,427,            if (diagonalOnly <= 0) {,2,0,0,1,3,0,4,0,0,7,24,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,433,"            sigma *= Math.exp(Math.min(1, (normps/chiN - 1) * cs / damps));",0,0,0,3,6,0,0,0,0,9,63,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,434,            final double bestFitness = fitness[arindex[0]];,2,0,1,2,4,1,0,0,0,7,47,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,435,            final double worstFitness = fitness[arindex[arindex.length - 1]];,0,0,0,2,4,0,0,0,0,6,65,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,436,            if (bestValue > bestFitness) {,0,0,0,1,3,0,0,0,0,4,30,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,437,                bestValue = bestFitness;,2,1,0,0,0,0,0,0,0,3,24,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,438,                lastResult = optimum;,0,0,0,0,0,0,0,0,0,0,21,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,439,"                optimum = new PointValuePair(fitfun.repair(bestArx.getColumn(0)),",2,0,0,2,5,0,0,0,0,3,65,2,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,441,                if (getConvergenceChecker() != null &&,0,0,0,1,3,0,0,0,0,4,38,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,450,            if (stopFitness != 0) { // only if stopFitness is defined,4,1,0,1,3,0,0,0,0,5,57,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,455,            final double[] sqrtDiagC = sqrt(diagC).getColumn(0);,0,0,0,3,6,0,0,0,0,9,52,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,456,            final double[] pcCol = pc.getColumn(0);,10,1,0,2,4,0,0,0,0,12,39,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,457,            for (int i = 0; i < dimension; i++) {,4,0,0,1,3,0,10,0,0,15,37,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,458,"                if (sigma * Math.max(Math.abs(pcCol[i]), sqrtDiagC[i]) > stopTolX) {",8,3,1,5,11,1,8,0,0,28,68,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,459,                    break;,2,1,1,0,0,0,0,0,0,13,6,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,465,            for (int i = 0; i < dimension; i++) {,8,1,0,1,3,0,0,0,0,10,37,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,466,                if (sigma * sqrtDiagC[i] > stopTolUpX) {,0,0,0,2,5,0,0,0,0,7,40,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,470,            final double historyBest = min(fitnessHistory);,0,0,0,1,2,0,0,0,0,3,47,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,471,            final double historyWorst = max(fitnessHistory);,4,0,0,1,2,1,4,0,0,9,48,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,472,            if (iterations > 2 &&,2,2,0,0,1,0,0,0,0,4,21,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,477,            if (iterations > fitnessHistory.length &&,6,1,0,0,1,1,6,0,0,14,41,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,482,            if (max(diagD) / min(diagD) > 1e7) {,0,2,0,3,7,0,14,0,0,16,36,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,486,            if (getConvergenceChecker() != null) {,2,0,0,2,5,0,0,0,0,3,38,2,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,497,            if (bestValue == fitness[arindex[(int)(0.1+lambda/4.)]]) {,4,3,1,5,11,0,0,0,0,11,58,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,500,"            if (iterations > 2 && Math.max(historyWorst, bestFitness) -",4,3,0,1,3,1,8,2,0,18,59,2,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,505,"            push(fitnessHistory,bestFitness);",0,0,0,1,2,0,0,0,0,3,33,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,506,            fitfun.setValueRange(worstFitness-bestFitness);,10,2,0,1,2,0,8,0,0,21,47,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,507,            if (generateStatistics) {,0,0,0,1,3,0,0,0,0,4,25,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,514,        return optimum;,0,0,0,0,0,1,0,0,0,1,15,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,546,    },0,0,0,0,1,0,0,0,0,1,1,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,566,    },0,0,0,0,1,0,0,0,0,1,1,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,574,        if (lambda <= 0) {,0,0,0,1,3,0,0,0,0,4,18,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,578,        final double[][] sigmaArray = new double[guess.length][1];,6,0,0,4,8,1,0,0,0,7,58,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,579,        for (int i = 0; i < guess.length; i++) {,0,0,0,1,3,0,0,0,0,4,40,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,580,            sigmaArray[i][0] = inputSigma[i];,0,0,0,3,6,0,0,0,0,9,33,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,582,"        final RealMatrix insigma = new Array2DRowRealMatrix(sigmaArray, false);",4,0,0,1,2,1,0,4,0,10,71,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,583,        sigma = max(insigma); // overall standard deviation,2,0,0,1,2,0,4,0,0,7,51,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,586,        stopTolUpX = 1e3 * max(insigma);,2,1,0,1,2,0,4,0,0,8,32,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,587,        stopTolX = 1e-11 * max(insigma);,2,1,0,1,2,0,4,0,0,8,32,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,588,        stopTolFun = 1e-12;,6,0,0,0,0,0,0,2,0,9,19,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,589,        stopTolHistFun = 1e-13;,2,0,0,0,0,0,0,0,0,3,23,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,592,        mu = lambda / 2; // number of parents/points for recombination,2,0,0,0,0,3,0,0,0,5,62,2,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,593,        logMu2 = Math.log(mu + 0.5);,0,0,0,1,2,0,0,0,0,3,28,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,594,"        weights = log(sequence(1, mu, 1)).scalarMultiply(-1).scalarAdd(logMu2);",2,0,0,4,8,0,12,0,0,16,71,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,595,        double sumw = 0;,0,0,0,0,0,0,0,0,0,0,16,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,596,        double sumwq = 0;,2,0,0,0,0,0,0,0,0,2,17,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,597,        for (int i = 0; i < mu; i++) {,8,1,0,1,3,0,0,0,0,9,30,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,598,"            double w = weights.getEntry(i, 0);",0,0,0,1,2,0,0,0,0,3,34,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,599,            sumw += w;,4,0,0,0,0,0,0,0,0,5,10,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,600,            sumwq += w * w;,6,1,0,0,0,0,0,0,0,8,15,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,602,        weights = weights.scalarMultiply(1 / sumw);,4,1,0,1,2,0,4,0,0,10,43,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,603,        mueff = sumw * sumw / sumwq; // variance-effectiveness of sum w_i x_i,8,2,0,0,0,0,0,0,0,11,69,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,606,        cc = (4 + mueff / dimension) /,0,0,0,1,2,0,0,0,0,3,30,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,608,        cs = (mueff + 2) / (dimension + mueff + 3.);,14,4,0,2,4,0,0,0,0,20,44,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,609,"        damps = (1 + 2 * Math.max(0, Math.sqrt((mueff - 1) /",4,7,0,1,5,0,8,0,0,20,52,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,613,        ccov1 = 2 / ((dimension + 1.3) * (dimension + 1.3) + mueff);,0,0,0,3,6,0,0,0,0,9,60,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,614,"        ccovmu = Math.min(1 - ccov1, 2 * (mueff - 2 + 1 / mueff) /",0,0,0,1,3,0,0,0,0,4,58,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,616,"        ccov1Sep = Math.min(1, ccov1 * (dimension + 1.5) / 3);",6,3,0,2,4,0,4,0,0,14,54,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,617,"        ccovmuSep = Math.min(1 - ccov1, ccovmu * (dimension + 1.5) / 3);",10,4,0,2,4,1,12,0,0,28,64,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,618,        chiN = Math.sqrt(dimension) *,2,1,0,1,2,0,6,0,0,10,29,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,621,        xmean = MatrixUtils.createColumnRealMatrix(guess); // objective variables,2,0,0,1,2,0,6,0,0,9,73,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,622,        diagD = insigma.scalarMultiply(1 / sigma);,4,1,0,1,2,0,4,0,0,10,42,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,623,        diagC = square(diagD);,0,0,0,1,2,0,0,0,0,3,22,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,624,"        pc = zeros(dimension, 1); // evolution paths for C and sigma",2,0,0,1,2,0,4,0,0,7,60,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,625,"        ps = zeros(dimension, 1); // B defines the coordinate system",2,0,0,1,2,0,4,0,0,7,60,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,626,        normps = ps.getFrobeniusNorm();,2,0,0,1,2,0,4,0,0,7,31,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,628,"        B = eye(dimension, dimension);",0,0,0,1,2,0,0,0,0,3,30,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,629,"        D = ones(dimension, 1); // diagonal D defines the scaling",2,0,0,1,2,0,4,0,0,7,57,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,630,"        BD = times(B, repmat(diagD.transpose(), dimension, 1));",2,0,0,3,6,0,12,0,0,15,55,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,631,        C = B.multiply(diag(square(D)).multiply(B.transpose())); // covariance,0,0,0,5,10,0,0,0,0,15,70,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,632,        historySize = 10 + (int) (3 * 10 * dimension / (double) lambda);,16,2,0,3,6,1,0,0,0,20,64,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,633,        fitnessHistory = new double[historySize]; // history of fitness values,6,0,0,1,2,0,0,0,0,6,70,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,634,        for (int i = 0; i < historySize; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,635,            fitnessHistory[i] = Double.MAX_VALUE;,4,0,1,1,2,0,0,0,0,9,37,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,637,    },0,0,0,0,1,0,0,0,0,1,1,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,648,        ps = ps.scalarMultiply(1 - cs).add(,4,1,0,1,3,0,6,0,0,12,35,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,651,        normps = ps.getFrobeniusNorm();,2,0,0,1,2,0,4,0,0,7,31,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,652,        final boolean hsig = normps /,4,1,0,0,0,1,0,0,0,6,29,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,655,        pc = pc.scalarMultiply(1 - cc);,4,1,0,1,2,0,6,0,0,12,31,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,656,        if (hsig) {,2,0,0,1,3,0,0,0,0,2,11,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,657,            pc = pc.add(xmean.subtract(xold).scalarMultiply(Math.sqrt(cc * (2 - cc) * mueff) / sigma));,0,0,0,5,10,0,0,0,0,15,91,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,659,        return hsig;,2,0,0,0,0,1,0,0,0,2,12,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,804,        for (int i = vals.length-1; i > 0; i--) {,0,0,1,1,3,0,0,0,0,5,41,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,805,            vals[i] = vals[i-1];,0,0,0,2,4,0,0,0,0,6,20,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,807,        vals[0] = val;,2,0,1,1,2,0,0,0,0,5,14,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,808,    },4,1,0,0,1,0,0,0,0,6,1,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,817,        final DoubleIndex[] dis = new DoubleIndex[doubles.length];,0,0,0,2,4,0,0,0,0,6,58,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,818,        for (int i = 0; i < doubles.length; i++) {,10,1,0,1,3,0,0,0,0,12,42,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,819,"            dis[i] = new DoubleIndex(doubles[i], i);",2,0,1,3,6,0,0,2,0,13,40,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,821,        Arrays.sort(dis);,0,0,0,1,2,0,0,0,0,3,17,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,822,        final int[] indices = new int[doubles.length];,6,0,0,2,4,1,6,0,0,13,46,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,823,        for (int i = 0; i < doubles.length; i++) {,10,1,0,1,3,0,0,0,0,13,42,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,824,            indices[i] = dis[i].index;,2,0,1,2,4,0,0,0,0,11,26,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,826,        return indices;,0,0,0,0,0,1,0,0,0,1,15,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,982,        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,0,0,0,6,12,0,0,0,0,18,77,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,983,        for (int r = 0; r < m.getRowDimension(); r++) {,6,1,0,2,5,0,4,0,0,12,47,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,984,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,4,0,0,12,50,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,985,"                d[r][c] = Math.log(m.getEntry(r, c));",2,0,0,4,8,0,0,0,0,2,37,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,988,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,996,        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,0,0,0,6,12,0,0,0,0,18,77,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,997,        for (int r = 0; r < m.getRowDimension(); r++) {,8,1,0,2,5,0,4,0,0,15,47,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,998,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,4,0,0,12,50,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,999,"                d[r][c] = Math.sqrt(m.getEntry(r, c));",0,0,1,4,8,0,12,0,0,19,38,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1002,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1010,        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,0,0,0,6,12,0,0,0,0,18,77,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1011,        for (int r = 0; r < m.getRowDimension(); r++) {,6,1,0,2,5,0,4,0,0,12,47,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1012,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,4,0,0,12,50,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1013,"                double e = m.getEntry(r, c);",0,0,0,1,2,0,0,0,0,3,28,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1014,                d[r][c] = e * e;,0,0,0,2,4,0,0,0,0,6,16,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1017,"        return new Array2DRowRealMatrix(d, false);",4,0,0,1,2,1,0,2,0,8,42,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1026,        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,2,0,0,6,12,1,8,0,0,11,77,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1027,        for (int r = 0; r < m.getRowDimension(); r++) {,14,3,0,2,5,0,4,0,0,23,47,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1028,            for (int c = 0; c < m.getColumnDimension(); c++) {,0,0,0,2,5,0,0,0,0,7,50,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1029,"                d[r][c] = m.getEntry(r, c) * n.getEntry(r, c);",0,1,1,4,8,0,16,0,0,24,46,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1032,"        return new Array2DRowRealMatrix(d, false);",8,2,1,1,2,2,0,0,0,22,42,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1056,        final double[][] d = new double[m.getRowDimension()][cols.length];,6,0,0,5,10,1,4,0,0,11,66,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1057,        for (int r = 0; r < m.getRowDimension(); r++) {,6,0,1,2,5,0,0,0,0,9,47,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1058,            for (int c = 0; c < cols.length; c++) {,10,1,0,1,3,0,0,0,0,12,39,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1059,"                d[r][c] = m.getEntry(r, cols[c]);",0,0,0,4,8,0,0,0,0,12,33,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1062,"        return new Array2DRowRealMatrix(d, false);",4,0,0,1,2,1,6,2,0,14,42,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1102,        if (m.getColumnDimension() == 1) {,0,1,0,2,5,0,4,0,0,5,34,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1103,            final double[][] d = new double[m.getRowDimension()][m.getRowDimension()];,2,0,0,6,12,1,16,0,0,19,74,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1104,            for (int i = 0; i < m.getRowDimension(); i++) {,0,0,0,2,5,0,0,0,0,7,47,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1105,"                d[i][i] = m.getEntry(i, 0);",2,0,0,3,6,0,0,0,0,3,27,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1107,"            return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,2,2,0,7,42,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1127,        for (int i = 0; i < m1.getRowDimension(); i++) {,6,1,0,2,5,0,4,0,0,12,48,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1128,"            m2.setEntry(i, col2, m1.getEntry(i, col1));",0,0,0,2,4,0,16,0,0,16,43,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1130,    },4,0,0,0,1,3,8,2,0,17,1,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1138,        final double[][] d = new double[n][m];,2,0,1,4,8,1,0,0,0,7,38,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1139,        for (int r = 0; r < n; r++) {,8,1,0,1,3,0,0,0,0,10,29,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1140,"            Arrays.fill(d[r], 1);",0,0,0,2,4,0,0,0,0,6,21,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1142,"        return new Array2DRowRealMatrix(d, false);",0,0,0,1,2,1,0,0,0,4,42,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1152,        final double[][] d = new double[n][m];,0,0,0,4,8,0,8,0,0,8,38,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1153,        for (int r = 0; r < n; r++) {,8,1,0,1,3,0,6,0,0,16,29,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1154,            if (r < m) {,0,0,0,1,3,0,0,0,0,4,12,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1155,                d[r][r] = 1;,0,0,1,2,4,0,0,0,0,7,12,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1158,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1167,"        return new Array2DRowRealMatrix(n, m);",4,0,0,1,2,1,0,2,0,6,38,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1177,        final int rd = mat.getRowDimension();,0,0,0,1,2,0,0,0,0,3,37,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1178,        final int cd = mat.getColumnDimension();,2,0,0,1,2,1,4,0,0,7,40,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1179,        final double[][] d = new double[n * rd][m * cd];,10,2,0,4,8,1,0,0,0,13,48,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1180,        for (int r = 0; r < n * rd; r++) {,10,2,0,1,3,0,0,0,0,13,34,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1181,            for (int c = 0; c < m * cd; c++) {,0,0,0,1,3,0,0,0,0,4,34,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1182,"                d[r][c] = mat.getEntry(r % rd, c % cd);",8,2,1,3,6,0,4,0,0,21,39,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1185,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1195,        final int size = (int) ((end - start) / step + 1);,8,3,0,3,6,1,0,0,0,12,50,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1196,        final double[][] d = new double[size][1];,2,0,1,4,8,1,0,0,0,5,41,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1197,        double value = start;,12,1,0,0,0,0,0,0,0,14,21,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1198,        for (int r = 0; r < size; r++) {,14,2,0,1,3,1,0,0,0,18,32,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1199,            d[r][0] = value;,2,0,1,2,4,0,0,0,0,7,16,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1200,            value += step;,6,0,0,0,0,1,0,0,0,8,14,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1202,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1210,        double max = -Double.MAX_VALUE;,6,0,0,0,0,0,6,0,0,13,31,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1211,        for (int r = 0; r < m.getRowDimension(); r++) {,12,1,0,2,5,0,4,2,0,20,47,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1212,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,0,0,0,7,50,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1213,"                double e = m.getEntry(r, c);",2,0,0,1,2,0,8,0,0,10,28,9,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1214,                if (max < e) {,4,1,0,1,3,0,0,0,0,5,14,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1215,                    max = e;,4,0,0,0,0,0,0,0,0,5,8,10,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1219,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1227,        double min = Double.MAX_VALUE;,8,0,0,0,0,0,0,0,0,8,30,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1228,        for (int r = 0; r < m.getRowDimension(); r++) {,8,1,0,2,5,0,4,0,0,14,47,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1229,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,4,0,0,12,50,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1230,"                double e = m.getEntry(r, c);",2,0,0,1,2,0,8,0,0,10,28,9,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1231,                if (min > e) {,4,1,0,1,3,0,0,0,0,5,14,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1232,                    min = e;,8,0,0,0,0,1,2,6,0,18,8,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1236,        return min;,0,0,0,0,0,1,0,0,0,1,11,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1244,        double max = -Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,7,31,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1245,        for (int r = 0; r < m.length; r++) {,10,1,0,1,3,0,0,0,0,12,36,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1246,            if (max < m[r]) {,2,1,1,2,5,0,0,0,0,7,17,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1247,                max = m[r];,2,0,1,1,2,0,0,0,0,7,11,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1250,        return max;,4,1,0,0,0,1,0,0,0,5,11,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1258,        double min = Double.MAX_VALUE;,0,0,0,0,0,0,0,0,0,0,30,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1259,        for (int r = 0; r < m.length; r++) {,16,2,0,1,3,0,0,0,0,20,36,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1260,            if (min > m[r]) {,4,1,1,2,5,0,0,0,0,10,17,0,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1261,                min = m[r];,0,0,0,1,2,0,0,0,0,3,11,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1264,        return min;,2,0,0,0,0,1,0,0,0,2,11,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1309,        final double[][] d = new double[size][popSize];,2,0,1,4,8,1,0,0,0,7,47,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1310,        for (int r = 0; r < size; r++) {,8,1,0,1,3,0,0,0,0,10,32,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1311,            for (int c = 0; c < popSize; c++) {,8,1,0,1,3,0,0,0,0,10,35,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1312,                d[r][c] = random.nextGaussian();,0,0,1,3,6,0,4,0,0,11,32,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1315,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,79,public class CMAESOptimizer,0,0,0,0,0,0,0,0,0,0,27,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,762,         final int[] output = new int[len];,0,0,0,2,4,0,0,0,0,6,34,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,763,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",0,0,0,2,4,0,0,0,0,6,73,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,764,         return output;,2,0,0,0,0,1,0,0,0,2,14,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,79,"        MatrixUtils.checkAdditionCompatible(this, m);",2,0,0,1,2,0,0,0,0,2,45,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,81,        final int rowCount    = getRowDimension();,4,0,0,1,2,1,2,0,0,8,42,0,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,82,        final int columnCount = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,45,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,83,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,84,        for (int row = 0; row < rowCount; ++row) {,8,1,0,1,3,0,0,0,0,10,42,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,85,            for (int col = 0; col < columnCount; ++col) {,10,1,0,1,3,3,0,4,0,19,45,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,86,"                out.setEntry(row, col, getEntry(row, col) + m.getEntry(row, col));",0,1,0,3,6,0,22,0,0,23,66,9,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,90,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,96,"        MatrixUtils.checkSubtractionCompatible(this, m);",8,3,0,1,2,0,4,0,0,16,48,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,98,        final int rowCount    = getRowDimension();,2,0,1,1,2,0,0,0,0,6,42,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,99,        final int columnCount = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,45,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,100,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,101,        for (int row = 0; row < rowCount; ++row) {,8,1,0,1,3,0,0,0,0,10,42,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,102,            for (int col = 0; col < columnCount; ++col) {,8,1,0,1,3,0,0,0,0,10,45,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,103,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));",0,1,0,3,6,0,22,0,0,23,66,9,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,107,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,112,        final int rowCount    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,42,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,113,        final int columnCount = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,45,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,114,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,115,        for (int row = 0; row < rowCount; ++row) {,16,1,0,1,3,0,0,0,0,19,42,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,116,            for (int col = 0; col < columnCount; ++col) {,8,1,0,1,3,0,0,0,0,10,45,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,117,"                out.setEntry(row, col, getEntry(row, col) + d);",0,0,0,2,4,0,0,0,0,6,47,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,121,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,280,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,1,0,0,0,6,63,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,466,"        MatrixUtils.checkColumnIndex(this, column);",0,0,1,1,2,0,6,0,0,13,43,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,467,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,468,"        final RealMatrix out = createMatrix(nRows, 1);",2,0,0,1,2,1,4,2,0,9,46,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,469,        for (int i = 0; i < nRows; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,470,"            out.setEntry(i, 0, getEntry(i, column));",0,0,0,2,4,0,12,0,0,12,40,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,473,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,559,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,0,0,0,3,43,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,560,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,561,        final double[] out = new double[nRows];,2,0,1,2,4,1,0,0,0,5,39,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,562,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,563,"            out[i] = getEntry(i, column);",2,0,0,2,4,1,14,0,0,17,29,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,566,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,280,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,1,0,0,0,6,63,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,289,                sum = 0;,6,2,0,0,0,0,0,0,0,8,8,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,290,            },0,0,0,0,1,0,0,0,0,1,1,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,294,                sum += value * value;,6,1,0,0,0,0,0,0,0,8,21,10,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,295,            },0,0,0,0,1,0,0,0,0,1,1,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,299,                return FastMath.sqrt(sum);,0,0,0,1,2,1,0,0,0,4,26,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,338,        if (columnData == null) {,4,1,0,1,3,0,0,0,0,7,25,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,341,        final int nRows = columnData.length;,6,0,0,0,0,1,8,0,0,15,36,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,342,"        final RealMatrix m = createRealMatrix(nRows, 1);",0,0,0,1,2,0,0,0,0,3,48,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,343,        for (int i = 0; i < nRows; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,344,"            m.setEntry(i, 0, columnData[i]);",0,0,0,2,4,0,0,0,0,6,32,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,346,        return m;,2,0,0,0,0,1,0,0,0,2,9,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,571,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0,0,0,3,7,0,0,0,0,10,61,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,576,    },0,0,0,0,1,0,0,0,0,1,1,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,588,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0,2,0,3,7,0,8,0,0,10,61,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,593,    },0,0,0,0,1,0,0,0,0,1,1,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1109,            final double[][] d = new double[m.getRowDimension()][1];,2,0,0,5,10,1,4,0,0,7,56,6,17.30769,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1110,            for (int i = 0; i < m.getColumnDimension(); i++) {,6,1,0,2,5,0,4,0,0,12,50,6,17.30769,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1111,"                d[i][0] = m.getEntry(i, i);",0,0,0,3,6,0,0,0,0,9,27,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1113,"            return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,7,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,579,            realEigenvalues[i] = main[i];,0,0,1,2,4,0,0,0,0,9,29,6,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,580,            e[i] = secondary[i];,0,0,1,2,4,0,0,0,0,9,20,6,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,612,                    double delta = FastMath.abs(realEigenvalues[m]) +,12,0,0,2,4,2,2,2,0,19,49,0,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,614,                    if (FastMath.abs(e[m]) + delta == delta) {,0,0,0,3,7,0,0,0,0,10,42,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,615,                        break;,0,1,1,0,0,0,0,0,0,9,6,6,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,619,                    if (its == maxIter) {,4,2,0,1,3,0,8,0,0,14,21,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,623,                    its++;,0,0,0,0,0,0,0,0,0,0,6,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,624,                    double q = (realEigenvalues[j + 1] - realEigenvalues[j]) / (2 * e[j]);,0,0,0,5,10,0,0,0,0,15,70,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,625,                    double t = FastMath.sqrt(1 + q * q);,6,2,0,1,2,0,4,0,0,12,36,11,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,626,                    if (q < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,627,                        q = realEigenvalues[m] - realEigenvalues[j] + e[j] / (q - t);,0,0,0,4,8,0,0,0,0,12,61,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,629,                        q = realEigenvalues[m] - realEigenvalues[j] + e[j] / (q + t);,8,4,1,4,8,1,0,0,0,26,61,2,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,631,                    double u = 0.0;,6,1,1,0,0,0,8,0,0,21,15,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,632,                    double s = 1.0;,2,0,0,0,0,0,0,0,0,2,15,11,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,633,                    double c = 1.0;,0,0,0,0,0,0,0,0,0,0,15,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,635,                    for (i = m - 1; i >= j; i--) {,10,2,0,1,3,0,0,0,0,14,30,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,636,                        double p = s * e[i];,4,1,1,1,2,0,0,0,0,9,20,13,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,637,                        double h = c * e[i];,4,1,1,1,2,0,0,0,0,9,20,13,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,638,                        if (FastMath.abs(p) >= FastMath.abs(q)) {,6,1,0,3,7,0,0,0,0,8,41,6,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,639,                            c = q / p;,8,1,0,0,0,3,0,0,0,13,10,1,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,640,                            t = FastMath.sqrt(c * c + 1.0);,0,0,0,1,2,0,0,0,0,3,31,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,641,                            e[i + 1] = p * t;,8,2,1,1,2,0,0,2,0,15,17,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,642,                            s = 1.0 / t;,0,0,0,0,0,0,0,0,0,0,12,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,643,                            c = c * s;,6,1,0,0,0,0,0,0,0,8,10,14,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,645,                            s = p / q;,0,0,0,0,0,0,0,0,0,0,10,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,646,                            t = FastMath.sqrt(s * s + 1.0);,6,2,0,1,2,0,4,0,0,13,31,14,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,647,                            e[i + 1] = q * t;,8,2,1,1,2,0,4,0,0,18,17,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,648,                            c = 1.0 / t;,28,12,0,0,0,0,0,0,0,42,12,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,649,                            s = s * c;,6,1,0,0,0,0,0,0,0,8,10,14,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,651,                        if (e[i + 1] == 0.0) {,0,0,0,2,5,0,0,0,0,7,22,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,656,                        q = realEigenvalues[i + 1] - u;,8,2,1,1,2,0,0,2,0,15,31,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,657,                        t = (realEigenvalues[i] - q) * s + 2.0 * c * h;,0,0,0,2,4,0,0,0,0,6,47,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,658,                        u = s * t;,6,1,0,0,0,0,0,0,0,8,10,12,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,659,                        realEigenvalues[i + 1] = q + u;,6,2,1,1,2,0,0,0,0,11,31,12,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,660,                        q = c * t - h;,12,3,0,0,0,0,0,0,0,16,14,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,661,                        for (int ia = 0; ia < n; ia++) {,12,1,0,1,3,0,0,0,0,15,32,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,662,                            p = z[ia][i + 1];,4,1,1,2,4,0,0,0,0,10,17,14,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,663,                            z[ia][i + 1] = s * z[ia][i] + c * p;,12,4,1,4,8,1,0,4,0,32,36,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,664,                            z[ia][i] = c * z[ia][i] - s * p;,6,3,1,4,8,0,0,0,0,22,32,14,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,667,                    if (t == 0.0 && i >= j) {,0,0,0,1,3,0,0,0,0,4,25,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,670,                    realEigenvalues[j] -= u;,0,0,0,1,2,0,0,0,0,3,24,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,671,                    e[j] = q;,2,0,1,1,2,0,0,0,0,7,9,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,672,                    e[m] = 0.0;,0,0,1,1,2,0,0,0,0,5,11,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,682,                if (realEigenvalues[j] > p) {,2,1,1,2,5,0,0,0,0,7,29,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,683,                    k = j;,6,0,0,0,0,0,0,0,0,8,6,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,684,                    p = realEigenvalues[j];,6,1,1,1,2,0,0,0,0,13,23,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,688,                realEigenvalues[k] = realEigenvalues[i];,0,0,1,2,4,0,0,0,0,9,40,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,689,                realEigenvalues[i] = p;,0,0,0,1,2,0,0,0,0,3,23,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,690,                for (int j = 0; j < n; j++) {,0,0,0,1,3,0,0,0,0,4,29,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,691,                    p = z[j][i];,2,0,1,2,4,0,0,0,0,9,12,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,692,                    z[j][i] = z[j][k];,0,0,1,4,8,0,0,0,0,13,18,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,693,                    z[j][k] = p;,2,0,1,2,4,0,0,0,0,9,12,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,104,                final double[] hK = householderVectors[k - 1];,4,1,1,2,4,1,0,0,0,8,46,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,105,                qta[k][k] = 1;,0,0,1,2,4,0,0,0,0,7,14,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,106,                if (hK[k] != 0.0) {,0,1,1,2,5,0,0,0,0,5,19,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,107,                    final double inv = 1.0 / (secondary[k - 1] * hK[k]);,4,3,1,3,6,1,0,0,0,14,52,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,108,                    double beta = 1.0 / secondary[k - 1];,4,2,1,1,2,0,0,0,0,8,37,11,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,109,                    qta[k][k] = 1 + beta * hK[k];,2,2,1,3,6,0,0,0,0,15,29,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,110,                    for (int i = k + 1; i < m; ++i) {,10,2,0,1,3,0,0,0,0,13,33,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,111,                        qta[k][i] = beta * hK[i];,0,0,0,3,6,0,0,0,0,9,25,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,113,                    for (int j = k + 1; j < m; ++j) {,18,4,0,1,3,0,0,0,0,23,33,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,114,                        beta = 0;,6,0,0,0,0,0,0,0,0,8,9,5,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,115,                        for (int i = k + 1; i < m; ++i) {,10,2,0,1,3,0,0,0,0,13,33,12,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,116,                            beta += qta[j][i] * hK[i];,2,1,1,3,6,0,0,0,0,14,26,14,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,118,                        beta *= inv;,4,0,0,0,0,0,0,0,0,5,12,12,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,119,                        qta[j][k] = beta * hK[k];,2,1,1,3,6,0,0,0,0,14,25,12,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,120,                        for (int i = k + 1; i < m; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,121,                            qta[j][i] += beta * hK[i];,2,1,1,3,6,0,0,0,0,14,26,14,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,198,            final double[] hK = householderVectors[k];,2,0,1,2,4,1,0,0,0,7,42,6,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,199,            main[k] = hK[k];,0,0,0,2,4,0,0,0,0,6,16,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,200,            double xNormSqr = 0;,6,1,0,0,0,0,0,0,0,8,20,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,201,            for (int j = k + 1; j < m; ++j) {,0,0,0,1,3,0,0,0,0,4,33,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,202,                final double c = hK[j];,0,0,0,1,2,0,0,0,0,3,23,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,203,                xNormSqr += c * c;,0,0,0,0,0,0,0,0,0,0,18,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,205,            final double a = (hK[k + 1] > 0) ? -FastMath.sqrt(xNormSqr) : FastMath.sqrt(xNormSqr);,4,2,1,4,8,1,12,0,0,22,86,6,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,206,            secondary[k] = a;,2,0,1,1,2,0,0,0,0,7,17,6,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,207,            if (a != 0.0) {,2,1,0,1,3,0,0,0,0,3,15,6,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,210,                hK[k + 1] -= a;,4,1,1,1,2,0,0,0,0,8,15,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,211,                final double beta = -1 / (a * hK[k + 1]);,6,1,0,2,4,0,0,0,0,8,41,6,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,217,"                Arrays.fill(z, k + 1, m, 0);",2,1,0,1,2,0,8,0,0,11,28,9,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,218,                for (int i = k + 1; i < m; ++i) {,10,2,0,1,3,0,0,0,0,13,33,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,219,                    final double[] hI = householderVectors[i];,2,0,1,2,4,1,0,0,0,7,42,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,220,                    final double hKI = hK[i];,0,1,1,1,2,0,0,0,0,8,25,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,221,                    double zI = hI[i] * hKI;,8,2,1,1,2,0,8,0,0,23,24,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,222,                    for (int j = i + 1; j < m; ++j) {,12,2,0,1,3,0,0,0,0,15,33,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,223,                        final double hIJ = hI[j];,2,0,1,1,2,1,0,0,0,7,25,12,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,224,                        zI   += hIJ * hK[j];,4,1,1,1,2,0,0,0,0,10,20,12,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,225,                        z[j] += hIJ * hKI;,6,2,1,1,2,0,0,4,0,22,18,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,227,                    z[i] = beta * (z[i] + zI);,4,2,1,3,6,0,0,0,0,15,26,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,231,                double gamma = 0;,2,0,0,0,0,0,0,0,0,2,17,9,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,232,                for (int i = k + 1; i < m; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,233,                    gamma += z[i] * hK[i];,2,1,1,2,4,0,0,0,0,12,22,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,235,                gamma *= beta / 2;,12,2,0,0,0,0,0,0,0,16,18,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,238,                for (int i = k + 1; i < m; ++i) {,10,2,0,1,3,0,0,0,0,13,33,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,239,                    z[i] -= gamma * hK[i];,2,1,1,2,4,0,0,0,0,12,22,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,244,                for (int i = k + 1; i < m; ++i) {,14,2,0,1,3,0,0,0,0,18,33,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,245,                    final double[] hI = householderVectors[i];,4,0,1,2,4,1,0,0,0,9,42,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,246,                    for (int j = i; j < m; ++j) {,0,0,0,1,3,0,0,0,0,4,29,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,247,                        hI[j] -= hK[i] * z[j] + z[i] * hK[j];,0,0,0,5,10,0,0,0,0,15,37,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,400,"                final double mij = matrix.getEntry(i, j);",2,2,0,1,2,1,20,2,0,27,41,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,401,"                final double mji = matrix.getEntry(j, i);",2,0,0,1,2,1,8,0,0,11,41,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,402,                if (FastMath.abs(mij - mji) >,4,2,0,1,3,0,4,0,0,10,29,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,7,3367,        y += 1.0;,2,0,0,0,0,0,0,0,0,3,9,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,7,3369,        if (y == 0) {,6,2,0,1,3,0,6,0,0,14,13,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,7,3373,        return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,351,"                    handler.handleStep(interpolator, isLastStep);",2,0,0,1,2,0,12,0,0,14,45,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,352,                },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,218,                switch (allowed) {,2,0,0,1,3,0,0,0,0,2,18,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,224,                    return xB;,0,0,0,0,0,1,0,0,0,1,10,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,239,                final int p = agingA - MAXIMAL_AGING;,6,1,0,0,0,1,0,0,0,8,37,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,240,                final double weightA = (1 << p) - 1;,4,2,0,1,2,1,0,0,0,7,36,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,241,                final double weightB = p + 1;,0,0,0,0,0,0,8,2,0,10,29,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,242,                targetY = (weightA * yA - weightB * REDUCTION_FACTOR * yB) / (weightA + weightB);,38,8,0,2,4,1,0,6,0,56,81,1,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,243,            } else if (agingB >= MAXIMAL_AGING) {,4,1,0,1,4,0,0,0,0,5,37,7,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,342,                xA = nextX;,6,0,0,0,0,0,6,4,0,17,11,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,343,                yA = nextY;,2,0,0,0,0,0,0,0,0,2,11,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,344,                absYA = FastMath.abs(yA);,10,5,0,1,2,0,12,0,0,29,25,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,345,                agingA = 0;,6,0,1,0,0,0,0,0,0,12,11,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,346,                ++agingB;,2,0,0,0,0,2,0,0,0,4,9,1,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,349,                signChangeIndex++;,0,0,0,0,0,0,0,0,0,0,18,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,218,                switch (allowed) {,6,0,0,1,3,0,0,0,0,8,18,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,348,"            handler.resetState(t, y);",6,3,1,1,2,0,0,0,0,15,25,8,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,182,            y[2] = computeObjectiveValue(x[2]);,0,0,1,3,6,0,2,0,0,7,35,6,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,183,"            if (Precision.equals(y[2], 0.0, 1)) {",0,0,1,3,7,0,4,0,0,6,37,7,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,188,            if (y[1] * y[2] < 0) {,0,2,1,3,7,0,0,0,0,6,22,6,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,190,                nbPoints        = 3;,14,0,0,0,0,0,0,0,0,19,20,0,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,191,                signChangeIndex = 2;,2,0,0,0,0,0,0,0,0,3,20,8,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,300,            if ((nbPoints > 2) && (end - start != nbPoints)) {,0,0,0,3,7,0,0,0,0,10,50,4,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,309,            } else  if (nbPoints == x.length) {,0,0,1,1,4,0,2,0,0,8,35,5,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,326,"            System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);",0,0,0,1,2,0,0,0,0,3,89,4,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,327,            x[signChangeIndex] = nextX;,0,0,0,1,2,0,0,0,0,3,27,4,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,328,"            System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);",6,2,0,1,2,0,10,0,0,18,89,7,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,329,            y[signChangeIndex] = nextY;,2,0,0,1,2,3,0,0,0,5,27,2,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,330,            ++nbPoints;,2,0,0,0,0,0,0,0,0,3,11,6,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,333,            if (nextY * yA <= 0) {,0,0,0,1,3,0,0,0,0,4,22,4,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,335,                xB = nextX;,0,0,0,0,0,0,0,0,0,0,11,4,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,336,                yB = nextY;,4,0,0,0,0,0,0,0,0,5,11,8,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,337,                absYB = FastMath.abs(yB);,0,0,0,1,2,0,0,0,0,3,25,4,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,338,                ++agingA;,0,0,0,0,0,0,0,0,0,0,9,4,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,339,                agingB = 0;,2,0,0,0,0,0,0,8,0,10,11,4,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,353,        },12,3,0,0,1,0,6,0,0,22,1,3,0.1,0,0
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,367,"                    System.arraycopy(eventY, 0, y, 0, y.length);",2,0,0,1,2,3,0,0,0,5,44,2,0.07692,0,0
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,368,"                    computeDerivatives(eventT, y, yDot);",0,0,0,1,2,0,0,0,0,3,36,4,0.07692,0,0
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,369,                    resetOccurred = true;,2,0,0,0,0,0,0,0,0,4,21,8,0.07692,0,0
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,370,                    for (final EventState remaining : occuringEvents) {,16,2,0,1,3,2,12,4,0,37,51,3,0.07692,1,0
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,373,                    return eventT;,2,0,0,0,0,1,0,0,0,2,14,8,0.07692,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,157,        final double randomValue = random.nextDouble();,0,0,0,1,2,0,0,0,0,3,47,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,158,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,160,        for (int i = 0; i < probabilities.length; i++) {,10,1,0,1,3,0,0,0,0,12,48,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,161,            sum += probabilities[i];,0,0,0,1,2,0,0,0,0,3,24,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,162,            if (randomValue < sum) {,0,0,0,1,3,0,0,0,0,4,24,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,163,                return singletons.get(i);,4,1,0,1,2,2,6,0,0,12,25,3,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,86,        final int indexRm1 = iRm1[index];,0,0,0,1,2,0,0,0,0,3,33,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,87,        final int indexRm2 = iRm2[index];,4,0,0,1,2,0,0,0,0,6,33,8,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,89,        final int v0       = v[index];,2,1,0,1,2,0,0,0,0,3,30,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,90,        final int vM1      = v[i1[index]];,2,0,1,2,4,1,0,0,0,9,34,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,91,        final int vM2      = v[i2[index]];,12,3,0,2,4,1,0,0,0,16,34,3,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,92,        final int vM3      = v[i3[index]];,0,0,0,2,4,0,0,0,0,6,34,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,94,        final int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);,2,3,1,4,8,1,0,0,0,14,71,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,95,        final int z1 = (v0 ^ (v0 << 25))  ^ (vM1 ^ (vM1 >>> 27));,16,5,0,4,8,2,0,0,0,23,57,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,96,        final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));,6,0,0,3,6,0,0,0,0,7,49,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,97,        final int z3 = z1      ^ z2;,2,0,0,0,0,2,0,2,0,6,28,2,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,98,        int z4 = z0 ^ (z1 ^ (z1 << 9)) ^ (z2 ^ (z2 << 21)) ^ (z3 ^ (z3 >>> 21));,0,0,0,6,12,0,0,0,0,18,72,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,100,        v[index]     = z3;,0,0,0,1,2,0,0,0,0,3,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,101,        v[indexRm1]  = z4;,8,0,1,1,2,0,2,2,0,19,18,3,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,102,        v[indexRm2] &= 0x80000000;,10,2,0,1,2,0,0,0,0,12,26,5,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,103,        index        = indexRm1;,0,0,0,0,0,0,0,0,0,0,24,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,108,        z4 = z4 ^ ((z4 <<  7) & 0xe46e1700);,12,3,0,2,4,0,0,0,0,16,36,1,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,109,        z4 = z4 ^ ((z4 << 15) & 0x9b868000);,0,0,0,2,4,0,0,0,0,6,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,111,        return z4 >>> (32 - bits);,6,2,0,1,2,2,10,0,0,19,26,3,0.5,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,90,        final long high = ((long) next(26)) << 26;,6,1,0,3,6,2,2,4,0,15,42,3,0.5,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,91,        final int  low  = next(26);,2,0,0,1,2,1,2,0,0,5,27,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,92,        return (high | low) * 0x1.0p-52d;,8,2,0,1,2,1,18,0,0,30,33,3,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,66,"        this(new Well19937c(), singletons, probabilities);",6,0,0,2,4,0,6,2,0,15,50,1,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,67,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,87,        super(rng);,2,0,0,1,2,0,0,0,0,2,11,4,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,88,        if (singletons.length != probabilities.length) {,8,1,0,1,3,0,0,0,0,9,48,4,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,92,"        List<Pair<Double, Double>> samples = new ArrayList<Pair<Double, Double>>(singletons.length);",6,0,0,1,2,0,0,16,0,22,92,4,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,94,        for (int i = 0; i < singletons.length; i++) {,2,1,0,1,3,0,0,0,0,3,45,6,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,95,"            samples.add(new Pair<Double, Double>(singletons[i], probabilities[i]));",0,0,0,4,8,0,0,0,0,12,71,4,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,98,"        innerDistribution = new DiscreteDistribution<Double>(rng, samples);",26,5,0,1,2,0,6,4,0,45,67,3,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,99,    },2,0,0,0,1,0,0,0,0,2,1,4,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,50,    @Deprecated,6,1,0,0,0,0,0,0,0,7,11,5,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,60,    private double solverAbsoluteAccuracy = SOLVER_DEFAULT_ABSOLUTE_ACCURACY;,0,0,0,0,0,0,0,0,0,0,73,4,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,76,    protected AbstractRealDistribution(RandomGenerator rng) {,12,2,0,1,3,1,0,2,0,18,57,2,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,77,        random = rng;,4,0,0,0,0,0,0,0,0,5,13,4,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,78,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08333,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1249,         if (Double.isInfinite(normalizedSum)) {,2,0,0,2,5,0,6,0,0,8,39,3,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1252,         if (Double.isNaN(normalizedSum)) {,10,2,0,2,5,0,0,0,0,12,34,5,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1255,         double sum = 0d;,6,0,0,0,0,0,0,4,0,12,16,5,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1256,         final int len = values.length;,8,0,0,0,0,1,4,2,0,15,30,3,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1257,         double[] out = new double[len];,0,0,0,2,4,0,0,0,0,6,31,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1258,         for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1259,             if (Double.isInfinite(values[i])) {,6,0,1,3,7,0,6,0,0,16,35,3,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1262,             if (!Double.isNaN(values[i])) {,0,0,0,3,7,0,0,0,0,10,31,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1263,                 sum += values[i];,18,3,1,1,2,4,2,0,0,37,17,1,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1266,         if (sum == 0) {,6,2,0,1,3,1,0,0,0,9,15,3,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1269,         for (int i = 0; i < len; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1270,             if (Double.isNaN(values[i])) {,18,4,1,3,7,0,4,0,0,31,30,3,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1273,                 out[i] = values[i] * normalizedSum / sum;,0,0,0,2,4,0,0,0,0,6,41,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1276,         return out;,0,0,0,0,0,1,0,0,0,1,11,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,45,"    public Pair(K k, V v) {",0,0,0,1,3,0,0,0,0,4,23,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,46,        key = k;,4,0,0,0,0,0,0,0,0,5,8,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,47,        value = v;,4,0,0,0,0,0,0,0,0,5,10,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,65,        return key;,2,0,0,0,0,1,0,0,0,2,11,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,74,        return value;,0,0,0,0,0,1,0,0,0,1,13,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,86,"        throws NotPositiveException, MathArithmeticException, MathIllegalArgumentException {",8,0,0,0,1,0,0,0,0,9,84,0,0.04762,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,87,        random = rng;,8,1,1,0,0,0,0,0,0,15,13,3,0.04762,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,89,        singletons = new ArrayList<T>(samples.size());,0,0,0,2,4,0,0,0,0,6,46,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,90,        final double[] probs = new double[samples.size()];,2,0,0,3,6,0,0,0,0,2,50,7,0.04762,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,92,        for (int i = 0; i < samples.size(); i++) {,0,0,0,2,5,0,0,0,0,7,42,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,93,"            final Pair<T, Double> sample = samples.get(i);",0,0,0,1,2,0,0,0,0,3,46,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,94,            singletons.add(sample.getKey());,0,0,0,2,4,0,8,0,0,8,32,7,0.04762,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,95,            if (sample.getValue() < 0) {,0,1,0,2,5,0,4,0,0,5,28,6,0.04762,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,98,            probs[i] = sample.getValue();,0,0,0,2,4,0,0,0,0,6,29,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,101,"        probabilities = MathArrays.normalizeArray(probs, 1.0);",4,1,1,1,2,0,6,0,0,20,54,3,0.04762,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,102,    },8,1,0,0,1,0,0,0,0,10,1,6,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,57,"        super(K, M1, M2, M3);",0,0,0,1,2,0,0,0,0,3,21,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,58,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,72,"        this(k, m1, m2, m3, null);",4,0,0,1,2,2,0,2,0,8,26,2,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,73,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,94,"    protected AbstractWell(final int k, final int m1, final int m2, final int m3, final int[] seed) {",0,0,0,2,5,0,0,0,0,7,97,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,99,        final int w = 32;,0,0,0,0,0,0,0,0,0,0,17,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,100,        final int r = (k + w - 1) / w;,8,3,0,1,2,1,0,0,0,12,30,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,101,        this.v      = new int[r];,0,0,0,1,2,0,0,0,0,3,25,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,102,        this.index  = 0;,0,0,0,0,0,0,0,0,0,0,16,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,106,        iRm1 = new int[r];,0,0,0,1,2,0,0,0,0,3,18,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,107,        iRm2 = new int[r];,0,0,0,1,2,0,0,0,0,3,18,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,108,        i1   = new int[r];,2,0,1,1,2,0,0,0,0,5,18,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,109,        i2   = new int[r];,2,0,1,1,2,0,0,0,0,5,18,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,110,        i3   = new int[r];,0,0,0,1,2,0,0,0,0,3,18,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,111,        for (int j = 0; j < r; ++j) {,0,0,1,1,3,0,0,0,0,5,29,6,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,112,            iRm1[j] = (j + r - 1) % r;,6,3,1,2,4,0,0,0,0,14,26,6,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,113,            iRm2[j] = (j + r - 2) % r;,12,3,1,2,4,0,0,0,0,20,26,3,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,114,            i1[j]   = (j + m1)    % r;,0,0,0,2,4,0,0,0,0,6,26,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,115,            i2[j]   = (j + m2)    % r;,6,2,1,2,4,0,0,0,0,13,26,6,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,116,            i3[j]   = (j + m3)    % r;,0,0,0,2,4,0,0,0,0,6,26,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,120,        setSeed(seed);,0,0,0,1,2,0,0,0,0,3,14,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,122,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,154,        if (seed == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,155,            setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0,1,0,3,6,0,10,0,0,11,68,7,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,156,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,159,"        System.arraycopy(seed, 0, v, 0, Math.min(seed.length, v.length));",0,0,0,2,4,0,0,0,0,6,65,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,161,        if (seed.length < v.length) {,0,0,0,1,3,0,0,0,0,4,29,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,162,            for (int i = seed.length; i < v.length; ++i) {,0,0,0,1,3,0,0,0,0,4,46,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,163,                final long l = v[i - seed.length];,8,1,1,1,2,1,0,0,0,12,34,8,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,164,                v[i] = (int) ((1812433253l * (l ^ (l >> 30)) + i) & 0xffffffffL);,14,7,1,6,12,1,0,2,0,31,65,1,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,168,        index = 0;,6,0,0,0,0,0,2,4,0,13,10,0,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,169,        clear();  // Clear normal deviate cache,4,0,0,1,2,0,2,0,0,6,39,5,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,170,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,179,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",4,2,0,7,14,0,2,0,0,8,71,5,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,180,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,40,    public BitsStreamGenerator() {,4,0,0,1,3,1,0,0,0,5,30,2,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,41,        nextGaussian = Double.NaN;,6,0,0,0,0,0,0,0,0,7,26,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,42,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,170,        nextGaussian = Double.NaN;,6,0,0,0,0,0,0,0,0,7,26,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,171,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,131,    public RandomDataGenerator() {,12,1,0,1,3,1,0,0,0,16,30,0,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,118,    private RandomGenerator rand = null;,2,0,0,0,0,1,0,2,0,5,36,2,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,121,    private SecureRandom secRand = null;,2,0,0,0,0,1,0,2,0,5,36,2,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,132,    },8,3,1,0,1,0,0,0,0,14,1,6,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,114,    public RandomDataImpl() {,8,1,0,1,3,1,0,0,0,11,25,2,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,115,        delegate = new RandomDataGenerator();,10,2,0,1,2,0,0,2,0,16,37,3,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,116,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,95,        return direction;,0,0,0,0,0,1,0,0,0,1,17,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,54,"    public Line(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException {",2,0,0,1,3,1,2,0,0,5,87,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,55,"        reset(p1, p2);",0,0,0,1,2,0,0,0,0,3,14,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,56,    },8,0,0,0,1,0,8,0,0,17,1,1,0.03846,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,74,        final Vector3D delta = p2.subtract(p1);,10,2,0,1,2,2,0,0,0,15,39,1,0.03846,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,75,        final double norm2 = delta.getNormSq();,4,1,1,1,2,1,0,0,0,10,39,5,0.03846,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,76,        if (norm2 == 0.0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,79,"        this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta);",4,1,0,2,4,0,6,2,0,14,65,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,80,"        zero = new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta);",14,1,0,2,4,0,6,2,0,25,67,3,0.03846,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,81,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,249,        return x * x + y * y + z * z;,0,0,0,0,0,1,0,0,0,1,29,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,151,"    public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2) {",0,0,1,1,3,0,0,0,0,5,65,4,0.03571,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,152,"        this.x = MathArrays.linearCombination(a1, u1.x, a2, u2.x);",6,0,0,1,2,0,0,0,0,7,58,3,0.03571,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,153,"        this.y = MathArrays.linearCombination(a1, u1.y, a2, u2.y);",0,0,0,1,2,0,0,0,0,3,58,4,0.03571,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,154,"        this.z = MathArrays.linearCombination(a1, u1.z, a2, u2.z);",0,0,0,1,2,0,0,0,0,3,58,4,0.03571,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,155,    },8,2,0,0,1,0,0,0,0,10,1,3,0.03571,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2477,            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,0,0,0,5,10,0,0,0,0,15,91,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2479,            ya = epsA * denom;,0,0,0,0,0,0,0,0,0,0,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2480,            yb = epsB * denom;,6,1,0,0,0,0,0,0,0,8,18,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2481,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1387,        double[] tmp1 = new double[getSize()];,2,0,0,3,6,0,2,0,0,4,38,5,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1388,"        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2",0,0,0,1,2,0,12,0,0,12,54,5,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1389,        double[] tmp2 = new double[getSize()];,2,0,0,3,6,0,2,0,0,4,38,5,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1390,"        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2",0,0,0,1,2,0,0,0,0,3,54,4,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1391,"        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2",4,0,1,1,2,2,8,0,0,20,60,1,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1392,"        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)",24,0,0,2,4,1,10,2,0,38,70,1,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1394,        if (x[xOffset] >= 0) {,0,1,1,2,5,0,0,0,0,5,22,4,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1397,"            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x",0,0,0,1,2,0,10,0,0,10,52,7,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1398,"            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)",0,0,0,2,4,0,0,0,0,6,57,4,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1399,"            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))",0,0,0,3,6,0,0,0,0,9,64,4,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1400,            for (int i = 0; i < tmp2.length; ++i) {,0,0,0,1,3,0,0,0,0,4,39,4,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1401,                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x)),4,2,1,4,8,0,0,0,0,13,64,8,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1420,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,1,1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,756,        y.compiler.checkCompatibility(x.compiler);,8,0,0,1,2,0,2,0,0,10,42,5,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,757,        final DerivativeStructure result = new DerivativeStructure(y.compiler);,0,0,0,1,2,0,0,0,0,3,71,4,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,758,"        y.compiler.atan2(y.data, 0, x.data, 0, result.data, 0);",0,0,0,1,2,0,0,0,0,3,55,4,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,759,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1347,                double v = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1348,                q[n - 1] = -n * q[n - 2];,4,1,1,2,4,0,0,0,0,10,25,10,0.33333,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1349,                for (int k = n - 1; k >= 0; k -= 2) {,8,2,0,1,3,0,0,0,0,11,37,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1350,                    v = v * x2 + q[k];,6,2,1,1,2,0,0,0,0,13,18,10,0.33333,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1351,                    if (k > 2) {,2,1,0,1,3,0,0,0,0,3,12,10,0.33333,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1353,                    } else if (k == 2) {,6,1,0,1,4,0,0,0,0,7,20,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1357,                if ((n & 0x1) == 0) {,2,2,0,2,5,0,0,0,0,4,21,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1358,                    v *= x;,0,0,0,0,0,0,0,0,0,0,7,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1361,                coeff *= f;,4,0,0,0,0,0,0,0,0,5,11,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1362,                function[n] = coeff * v;,0,0,0,1,2,0,0,0,0,3,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2423,"        return atan(x, 0.0, false);",0,0,0,1,2,1,0,0,0,4,27,4,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1327,        double[] function = new double[1 + order];,4,1,0,2,4,0,0,0,0,5,42,5,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1328,        final double x = operand[operandOffset];,2,0,1,1,2,1,0,0,0,7,40,4,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1329,        function[0] = FastMath.atan(x);,2,0,0,2,4,0,0,0,0,3,31,8,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1330,        if (order > 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1338,            final double[] q = new double[order];,2,0,1,2,4,1,0,0,0,5,37,6,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1339,            q[0] = 1;,0,0,0,1,2,0,0,0,0,3,9,4,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1340,            final double x2    = x * x;,6,1,0,0,0,1,0,0,0,8,27,6,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1341,            final double f     = 1.0 / (1 + x2);,4,2,0,1,2,1,0,0,0,7,36,6,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1342,            double coeff = f;,16,5,0,0,0,0,0,0,0,22,17,5,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1343,            function[1] = coeff * q[0];,2,1,1,2,4,0,0,0,0,8,27,6,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1344,            for (int n = 2; n <= order; ++n) {,2,0,0,1,3,0,0,0,0,3,34,2,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1368,"        compose(operand, operandOffset, function, result, resultOffset);",0,0,0,1,2,0,0,0,0,3,64,4,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1370,    },4,0,0,0,1,0,0,0,0,5,1,4,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,178,        final int dim = getDimension();,0,0,0,1,2,0,0,0,0,3,31,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,179,        if (vals.length != dim) {,12,2,0,1,3,0,0,0,0,15,25,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,183,"        return FastMath.pow(2 * FastMath.PI, -dim / 2) *",0,0,0,1,2,1,0,0,0,4,48,4,0.5,1,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,229,        final double[] centered = new double[values.length];,6,1,0,2,4,0,18,0,0,26,52,3,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,230,        for (int i = 0; i < centered.length; i++) {,12,1,0,1,3,0,0,0,0,14,43,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,231,            centered[i] = values[i] - getMeans()[i];,0,0,0,4,8,0,0,0,0,12,40,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,233,        final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered);,4,0,0,2,4,2,12,2,0,20,77,3,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,234,        double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,235,        for (int i = 0; i < preMultiplied.length; i++) {,10,1,0,1,3,0,0,0,0,12,48,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,236,            sum += preMultiplied[i] * centered[i];,0,0,0,2,4,0,0,0,0,6,38,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,238,        return FastMath.exp(-0.5 * sum);,2,1,0,1,2,1,4,0,0,8,32,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,831,"        return exp(x, 0.0, null);",10,1,0,1,2,1,0,0,0,12,25,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,850,        if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,851,            intVal = (int) -x;,4,0,0,1,2,0,0,0,0,6,18,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,853,            if (intVal > 746) {,0,0,0,1,3,0,0,0,0,4,19,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,861,            if (intVal > 709) {,4,1,0,1,3,0,0,0,0,5,19,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,871,            if (intVal == 709) {,2,1,0,1,3,0,0,0,0,3,20,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,881,            intVal++;,0,0,0,0,0,0,0,0,0,0,9,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,883,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,884,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,2,0,0,1,2,0,6,2,0,10,71,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,886,            intVal = -intVal;,0,0,0,0,0,0,0,0,0,0,17,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,888,            intVal = (int) x;,0,0,0,1,2,0,0,0,0,3,17,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,890,            if (intVal > 709) {,0,0,0,1,3,0,0,0,0,4,19,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,898,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,899,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,906,        final int intFrac = (int) ((x - intVal) * 1024.0);,0,0,0,3,6,0,0,0,0,9,50,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,907,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,0,0,0,1,2,0,0,0,0,3,64,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,908,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0,0,0,1,2,0,0,0,0,3,64,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,914,        final double epsilon = x - (intVal + intFrac / 1024.0);,0,0,0,1,2,0,0,0,0,3,55,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,923,        double z = 0.04168701738764507;,0,0,0,0,0,0,0,0,0,0,31,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,924,        z = z * epsilon + 0.1666666505023083;,0,0,0,0,0,0,0,0,0,0,37,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,925,        z = z * epsilon + 0.5000000000042687;,0,0,0,0,0,0,0,0,0,0,37,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,926,        z = z * epsilon + 1.0;,0,0,0,0,0,0,0,0,0,0,22,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,927,        z = z * epsilon + -3.940510424527919E-20;,0,0,0,0,0,0,0,0,0,0,41,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,934,        double tempA = intPartA * fracPartA;,0,0,0,0,0,0,0,0,0,0,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,935,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,0,0,0,0,0,0,0,0,0,0,82,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,941,        final double tempC = tempB + tempA;,0,0,0,0,0,0,0,0,0,0,35,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,943,        if (extra != 0.0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,946,            result = tempC*z + tempB + tempA;,0,0,0,0,0,0,0,0,0,0,33,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,949,        if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,955,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1179,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,0,0,0,1,3,0,0,0,0,4,45,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1246,            double tmp = epsilon * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1247,            double aa = epsilon + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,32,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1248,            double ab = epsilon - aa;,0,0,0,0,0,0,0,0,0,0,25,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1249,            double xa = aa;,0,0,0,0,0,0,0,0,0,0,15,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1250,            double xb = ab;,8,2,0,0,0,0,0,0,0,11,15,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1253,            final double numer = bits & 0x3ffffffffffL;,0,0,0,0,0,0,0,0,0,0,43,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1254,            final double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,0,0,0,1,2,0,0,0,0,3,65,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1255,            aa = numer - xa*denom - xb * denom;,0,0,0,0,0,0,0,0,0,0,35,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1256,            xb += aa / denom;,0,0,0,0,0,0,0,0,0,0,17,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1259,            final double[] lnCoef_last = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];,4,0,1,2,4,0,0,2,0,11,71,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1260,            double ya = lnCoef_last[0];,0,0,0,1,2,0,0,0,0,3,27,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1261,            double yb = lnCoef_last[1];,4,1,0,1,2,0,6,0,0,12,27,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1263,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,55,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1265,                aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1266,                ab = ya * xb + yb * xa + yb * xb;,4,0,0,0,0,0,0,0,0,5,33,0,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1268,                tmp = aa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,24,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1269,                ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1270,                yb = aa - ya + ab;,6,1,0,0,0,1,0,0,0,8,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1273,                final double[] lnCoef_i = LN_HI_PREC_COEF[i];,2,0,1,2,4,1,0,0,0,7,45,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1274,                aa = ya + lnCoef_i[0];,0,0,0,1,2,0,0,0,0,3,22,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1275,                ab = yb + lnCoef_i[1];,0,0,0,1,2,0,0,0,0,3,22,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1277,                tmp = aa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,24,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1278,                ya = aa + tmp - tmp;,6,0,0,0,0,3,0,4,0,13,20,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1279,                yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1283,            aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1284,            ab = ya * xb + yb * xa + yb * xb;,0,0,0,0,0,0,0,0,0,0,33,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1292,            lnza = aa + ab;,0,0,0,0,0,0,0,0,0,0,15,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1293,            lnzb = -(lnza - aa - ab);,8,1,0,1,2,0,12,0,0,23,25,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1294,        } else {,2,0,0,0,2,1,4,0,0,7,8,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1348,            hiPrec[0] = a;,12,4,0,1,2,1,0,0,0,17,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1349,            hiPrec[1] = b;,0,0,0,1,2,0,0,0,0,3,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1443,        final double lns[] = new double[2];,2,0,0,2,4,1,0,0,0,3,35,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1445,        if (y == 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1449,        if (x != x) { // X is NaN,2,2,0,1,3,0,6,0,0,10,25,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1454,        if (x == 0) {,2,0,1,1,3,0,0,0,0,5,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1479,        if (x == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1490,        if (y == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1502,        if (x == Double.NEGATIVE_INFINITY) {,6,2,0,1,3,0,0,0,0,8,36,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1526,        if (y == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1540,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1557,        if (y < 8e298 && y > -8e298) {,4,3,0,1,3,0,0,0,0,8,30,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1558,            double tmp1 = y * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,31,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1559,            ya = y + tmp1 - tmp1;,8,2,0,0,0,0,0,0,0,11,21,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1560,            yb = y - ya;,0,0,0,0,0,0,0,0,0,0,12,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1561,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1569,"        final double lores = log(x, lns);",0,0,0,1,2,0,0,0,0,3,33,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1570,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0,0,0,2,5,0,6,0,0,6,73,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1574,        double lna = lns[0];,0,0,0,1,2,0,0,0,0,3,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1575,        double lnb = lns[1];,0,0,0,1,2,0,0,0,0,3,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1578,        double tmp1 = lna * HEX_40000000;,2,1,0,0,0,0,0,0,0,3,33,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1579,        double tmp2 = lna + tmp1 - tmp1;,0,0,0,0,0,0,0,0,0,0,32,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1580,        lnb += lna - tmp2;,0,0,0,0,0,0,0,0,0,0,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1581,        lna = tmp2;,0,0,0,0,0,0,0,0,0,0,11,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1584,        final double aa = lna * ya;,6,1,0,0,0,1,0,0,0,8,27,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1585,        final double ab = lna * yb + lnb * ya + lnb * yb;,16,5,0,0,0,1,0,0,0,22,49,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1587,        lna = aa+ab;,10,1,0,0,0,0,0,0,0,13,12,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1588,        lnb = -(lna - aa - ab);,8,1,0,1,2,0,0,0,0,11,23,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1590,        double z = 1.0 / 120.0;,2,1,0,0,0,0,0,0,0,3,23,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1591,        z = z * lnb + (1.0 / 24.0);,6,3,0,1,2,0,0,0,0,10,27,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1592,        z = z * lnb + (1.0 / 6.0);,6,3,0,1,2,0,0,0,0,10,26,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1593,        z = z * lnb + 0.5;,2,0,0,0,0,0,4,2,0,8,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1594,        z = z * lnb + 1.0;,6,2,0,0,0,0,0,0,0,9,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1595,        z = z * lnb;,0,0,0,0,0,0,0,0,0,0,12,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1597,"        final double result = exp(lna, z, null);",4,0,0,1,2,0,0,0,0,4,40,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1599,        return result;,6,1,0,0,0,2,0,0,0,8,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1613,        if (e == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6142,        return EXP_INT_A.clone();,0,0,0,1,2,1,0,0,0,4,25,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6150,        return EXP_INT_B.clone();,0,0,0,1,2,1,0,0,0,4,25,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6158,        return EXP_FRAC_A.clone();,0,0,0,1,2,1,0,0,0,4,26,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6166,        return EXP_FRAC_B.clone();,2,0,0,1,2,1,4,0,0,6,26,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3744,    private static class ExpFracTable {,2,0,0,0,1,2,0,0,0,4,35,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3770,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,8,2,0,1,2,0,4,0,0,15,56,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3771,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,0,0,0,1,2,0,0,0,0,3,56,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3773,        },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3705,    private static class ExpIntTable {,2,0,0,0,1,2,0,0,0,4,34,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3737,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,2,0,0,1,2,0,4,0,0,7,54,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3738,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,2,0,0,1,2,0,4,0,0,7,54,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3740,        },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,373,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,374,        final int nCols = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,39,4,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,375,        if (v.length != nRows) {,8,2,1,1,3,1,0,0,0,16,24,3,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,379,        final double[] out = new double[nCols];,0,0,0,2,4,0,0,0,0,6,39,4,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,380,        for (int col = 0; col < nCols; ++col) {,8,1,0,1,3,0,0,0,0,10,39,4,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,381,            double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,382,            for (int i = 0; i < nRows; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,383,                sum += data[i][col] * v[i];,2,1,1,3,6,0,0,0,0,14,27,8,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,385,            out[col] = sum;,2,0,1,1,2,0,0,0,0,7,15,6,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,388,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,164,        return MathArrays.copyOf(means);,2,0,1,1,2,1,6,0,0,11,32,3,0.33333,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1130,        if (x==0) { // Handle special case of +0/-0,2,1,0,1,3,0,0,0,0,3,43,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1133,        long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1136,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,6,4,0,2,5,0,0,0,0,10,50,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1147,        if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1156,        int exp = (int)(bits >> 52)-1023;,0,0,0,2,4,0,0,0,0,6,33,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1158,        if ((bits & 0x7ff0000000000000L) == 0) {,2,2,0,2,5,0,0,0,0,4,40,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1178,        if (exp == -1 || exp == 0) {,0,0,0,1,3,0,0,0,0,4,28,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1228,        final double[] lnm = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,4,3,0,5,10,0,0,0,0,7,79,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1239,        final double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,8,4,0,3,6,1,0,0,0,13,95,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1241,        double lnza = 0.0;,2,0,0,0,0,0,0,0,0,2,18,5,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1242,        double lnzb = 0.0;,0,0,0,0,0,0,0,0,0,0,18,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1244,        if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1320,        double a = LN_2_A*exp;,6,1,0,0,0,0,0,0,0,7,22,5,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1321,        double b = 0.0;,0,0,0,0,0,0,0,0,0,0,15,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1322,        double c = a+lnm[0];,0,0,0,1,2,0,0,0,0,3,20,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1323,        double d = -(c-a-lnm[0]);,0,0,0,2,4,0,0,0,0,6,25,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1324,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1325,        b = b + d;,10,3,0,0,0,0,4,0,0,18,10,1,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1327,        c = a + lnza;,4,0,0,0,0,1,0,4,0,9,13,2,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1328,        d = -(c - a - lnza);,8,1,0,1,2,0,0,0,0,11,20,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1329,        a = c;,10,0,0,0,0,0,0,0,0,12,6,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1330,        b = b + d;,10,1,0,0,0,0,0,2,0,15,10,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1332,        c = a + LN_2_B*exp;,0,0,0,0,0,0,0,0,0,0,19,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1333,        d = -(c - a - LN_2_B*exp);,10,2,0,1,2,0,0,0,0,14,26,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1334,        a = c;,6,1,1,0,0,1,0,0,0,17,6,3,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1335,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1337,        c = a + lnm[1];,0,0,0,1,2,0,0,0,0,3,15,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1338,        d = -(c - a - lnm[1]);,0,0,0,2,4,0,0,0,0,6,22,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1339,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1340,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1342,        c = a + lnzb;,0,0,0,0,0,0,0,0,0,0,13,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1343,        d = -(c - a - lnzb);,8,1,0,1,2,0,0,0,0,11,20,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1344,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1345,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1347,        if (hiPrec != null) {,0,0,0,1,3,0,4,0,0,4,21,7,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1352,        return a + b;,0,0,0,0,0,1,0,0,0,1,13,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3777,    private static class lnMant {,8,1,1,0,1,3,4,0,0,18,29,1,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3791,                LN_MANT = FastMathLiteralArrays.loadLnMant();,2,0,0,1,2,0,4,0,0,7,45,7,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3793,        },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,29,    private static final double[] EXP_INT_A = new double[] {,2,0,0,2,5,3,0,0,0,5,56,2,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,1535,    private static final double[] EXP_INT_B = new double[] {,0,0,0,2,5,0,0,0,0,7,56,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,3043,    private static final double[] EXP_FRAC_A = new double[] {,2,0,0,2,5,3,0,0,0,5,57,2,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,4074,    private static final double[] EXP_FRAC_B = new double[] {,2,0,0,2,5,0,0,0,0,3,57,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,5103,    private static final double[][] LN_MANT = new double[][] {,0,0,0,4,9,0,0,0,0,13,58,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6174,        return LN_MANT.clone();,0,0,0,1,2,1,4,0,0,4,23,5,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,246,        random.setSeed(seed);,0,0,0,1,2,0,6,0,0,6,21,5,0.42857,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,247,        randomData.reSeed(seed);,0,0,0,1,2,0,0,0,0,3,24,4,0.42857,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,248,    },0,0,0,0,1,0,0,0,0,1,1,4,0.42857,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,461,        delegate.reSeed(seed);,0,0,0,1,2,0,0,0,0,3,22,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,462,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,648,       getRan().setSeed(seed);,0,0,0,2,4,0,6,0,0,6,23,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,649,    },4,0,0,0,1,0,0,0,0,5,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,374,        if (shape < 1) {,2,0,1,1,3,1,0,0,0,7,16,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,413,        final double d = shape - 0.333333333333333333;,0,0,0,0,0,0,0,0,0,0,46,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,414,        final double c = 1 / (3 * FastMath.sqrt(d));,2,2,0,2,4,1,6,0,0,11,44,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,417,            final double x = random.nextGaussian();,2,0,0,1,2,1,4,0,0,7,39,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,418,            final double v = (1 + c * x) * (1 + c * x) * (1 + c * x);,0,0,0,3,6,0,0,0,0,9,57,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,420,            if (v <= 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,424,            final double x2 = x * x;,0,0,0,0,0,0,0,0,0,0,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,425,            final double u = random.nextDouble();,18,0,0,1,2,4,18,4,0,45,37,1,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,428,            if (u < 1 - 0.0331 * x2 * x2) {,0,0,0,1,3,0,0,0,0,4,31,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,429,                return scale * d * v;,6,1,0,0,0,1,0,0,0,7,21,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,432,            if (FastMath.log(u) < 0.5 * x2 + d * (1 - v + FastMath.log(v))) {,0,0,0,4,9,0,0,0,0,13,65,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,433,                return scale * d * v;,6,1,0,0,0,1,0,0,0,7,21,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,311,        final double n = random.nextGaussian();,0,0,0,1,2,0,0,0,0,3,39,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,312,        return FastMath.exp(scale + shape * n);,0,0,0,1,2,1,0,0,0,4,39,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,79,"        super(K, M1, M2, M3, seed);",0,0,0,1,2,0,0,0,0,3,27,4,0.31034,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,80,    },0,0,0,0,1,0,0,0,0,1,1,4,0.31034,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,714,        if (rand == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.31034,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,715,            initRan();,0,0,0,1,2,0,0,0,0,3,10,4,0.31034,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,717,        return rand;,2,0,0,0,0,1,0,0,0,2,12,4,0.31034,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,725,        rand = new Well19937c(System.currentTimeMillis() + System.identityHashCode(this));,4,0,0,3,6,0,0,0,0,5,82,4,0.31034,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,726,    },12,6,1,0,1,0,0,0,0,36,1,1,0.31034,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,63,        super(optimizer);,2,0,0,1,2,0,0,0,0,2,17,4,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,64,        degree = -1; // To avoid compilation error until the instance variable is removed.,2,0,0,0,0,0,0,2,0,4,82,3,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,65,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,110,"        return fit(new PolynomialFunction.Parametric(), guess);",0,0,0,2,4,1,0,0,0,7,55,4,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,69,        super();,6,2,0,1,2,0,16,0,0,25,8,3,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,70,        MathUtils.checkNotNull(c);,0,0,0,1,2,0,0,0,0,3,26,4,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,71,        int n = c.length;,10,2,0,0,0,0,12,0,0,24,17,3,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,72,        if (n == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,75,        while ((n > 1) && (c[n - 1] == 0)) {,4,4,1,4,9,0,0,0,0,10,36,4,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,78,        this.coefficients = new double[n];,0,0,0,1,2,0,0,0,0,3,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,79,"        System.arraycopy(c, 0, this.coefficients, 0, n);",0,0,0,1,2,0,0,0,0,3,48,4,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,80,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,94,"       return evaluate(coefficients, x);",0,0,0,1,2,1,0,0,0,4,33,4,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,395,    public static class Parametric implements ParametricUnivariateFunction {,6,0,0,0,1,0,0,0,0,7,72,4,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,130,        MathUtils.checkNotNull(coefficients);,8,0,0,1,2,0,6,0,0,15,37,3,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,131,        int n = coefficients.length;,6,0,0,0,0,0,0,0,0,6,28,5,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,132,        if (n == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,135,        double result = coefficients[n - 1];,4,1,1,1,2,0,0,0,0,7,36,5,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,136,        for (int j = n - 2; j >= 0; j--) {,0,0,0,1,3,0,0,0,0,4,34,4,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,139,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.125,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,153,"        return fit(Integer.MAX_VALUE, f, initialGuess);",0,0,0,1,2,1,0,0,0,4,47,4,0.05,0,0
defect4j,math,org/apache/commons/math3/fitting/PolynomialFitter,14,37,        super(optimizer);,2,0,0,1,2,0,0,0,0,2,17,4,0.125,0,0
defect4j,math,org/apache/commons/math3/fitting/PolynomialFitter,14,38,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0
defect4j,math,org/apache/commons/math3/fitting/PolynomialFitter,14,68,"        return fit(new PolynomialFunction.Parametric(), guess);",10,0,0,2,4,1,4,0,0,14,55,3,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,69,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,70,        MathUtils.checkNotNull(c);,4,1,0,1,2,0,0,0,0,5,26,3,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,71,        int n = c.length;,0,0,0,0,0,0,4,0,0,4,17,5,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,72,        if (n == 0) {,10,3,0,1,3,0,6,0,0,20,13,3,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,75,        while ((n > 1) && (c[n - 1] == 0)) {,8,4,1,4,9,0,0,0,0,15,36,3,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,78,        this.coefficients = new double[n];,0,0,0,1,2,0,0,0,0,3,34,4,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,79,"        System.arraycopy(c, 0, this.coefficients, 0, n);",6,0,0,1,2,0,8,0,0,15,48,3,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,80,    },2,0,0,0,1,3,0,4,0,9,1,2,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,94,"       return evaluate(coefficients, x);",0,0,0,1,2,1,0,0,0,4,33,4,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,395,    public static class Parametric implements ParametricUnivariateFunction {,0,0,0,0,1,0,0,0,0,1,72,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,130,        MathUtils.checkNotNull(coefficients);,0,0,0,1,2,0,0,0,0,3,37,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,131,        int n = coefficients.length;,0,0,0,0,0,0,0,0,0,0,28,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,132,        if (n == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,135,        double result = coefficients[n - 1];,4,1,1,1,2,0,2,0,0,9,36,3,0.09091,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,136,        for (int j = n - 2; j >= 0; j--) {,0,0,0,1,3,0,0,0,0,4,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,139,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,136,"        return fit(Integer.MAX_VALUE, f, initialGuess);",0,0,0,1,2,1,0,0,0,4,47,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,98,"        super(rows, columns);",0,0,0,1,2,0,0,0,0,3,21,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,99,        this.rows = rows;,4,0,0,0,0,0,0,0,0,5,17,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,100,        this.columns = columns;,4,0,0,0,0,0,0,0,0,5,23,8,0.04348,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,103,        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;,12,4,0,1,2,0,0,0,0,17,49,3,0.04348,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,104,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0,0,0,1,2,0,0,0,0,3,55,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,107,"        blocks = createBlocksLayout(rows, columns);",4,0,0,1,2,0,0,0,0,5,43,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1542,"                return pow(-x, y);",4,0,0,1,2,1,4,0,0,10,18,3,1.0,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,131,    public MersenneTwister(long seed) {,8,0,0,1,3,4,0,0,0,12,35,1,0.02174,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,132,        mt = new int[N];,2,0,1,1,2,0,0,0,0,5,16,4,0.02174,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,133,        setSeed(seed);,2,0,1,1,2,1,0,0,0,7,14,4,0.02174,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,134,    },8,1,0,0,1,0,0,0,0,9,1,4,0.02174,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,94,"    private static final int[] MAG01 = { 0x0, 0x9908b0df };",2,0,0,2,4,3,0,0,0,5,55,2,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,144,        long longMT = seed;,0,0,0,0,0,0,0,0,0,0,19,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,146,        mt[0]= (int) longMT;,0,0,0,2,4,0,0,0,0,6,20,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,147,        for (mti = 1; mti < N; ++mti) {,8,1,0,1,3,0,0,0,0,11,31,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,150,            longMT = (1812433253l * (longMT ^ (longMT >> 30)) + mti) & 0xffffffffL;,18,6,0,3,6,0,0,0,0,26,71,1,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,151,            mt[mti]= (int) longMT;,6,0,0,2,4,0,8,2,0,16,22,3,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,154,        clear(); // Clear normal deviate cache,0,0,0,1,2,0,0,0,0,3,38,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,155,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,167,        if (seed == null) {,4,0,0,1,3,0,0,0,0,5,19,8,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,172,        setSeed(19650218);,0,0,0,1,2,0,2,0,0,2,18,5,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,173,        int i = 1;,14,0,0,0,0,3,6,6,0,29,10,1,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,174,        int j = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,176,"        for (int k = FastMath.max(N, seed.length); k != 0; k--) {",10,1,0,2,5,0,6,0,0,18,57,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,177,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,2,3,1,5,10,0,0,0,0,13,73,7,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,178,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,6,5,1,5,10,0,0,0,0,15,73,7,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,179,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1664525l)) + seed[j] + j; // non linear,10,5,1,5,10,0,0,0,0,19,76,7,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,180,            mt[i]   = (int) (l & 0xffffffffl);,0,0,0,3,6,0,0,0,0,9,34,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,181,            i++; j++;,4,0,0,0,0,0,0,0,0,6,9,6,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,182,            if (i >= N) {,14,2,0,1,3,0,0,0,0,17,13,2,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,183,                mt[0] = mt[N - 1];,6,2,1,2,4,0,0,0,0,15,18,1,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,184,                i = 1;,2,1,0,0,0,0,0,0,0,3,6,6,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,186,            if (j >= seed.length) {,6,1,0,1,3,0,0,0,0,7,23,6,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,187,                j = 0;,12,3,0,0,0,0,4,0,0,22,6,5,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,191,        for (int k = N - 1; k != 0; k--) {,8,2,0,1,3,0,0,0,0,11,34,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,192,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,4,3,1,5,10,0,6,0,0,22,73,3,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,193,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,6,5,1,5,10,0,0,0,0,15,73,7,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,194,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1566083941l)) - i; // non linear,2,0,0,4,8,0,4,0,0,7,69,5,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,195,            mt[i]   = (int) (l & 0xffffffffL);,2,1,1,3,6,0,0,0,0,8,34,6,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,196,            i++;,0,0,0,0,0,0,0,0,0,0,4,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,197,            if (i >= N) {,2,0,0,1,3,0,0,0,0,3,13,2,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,198,                mt[0] = mt[N - 1];,2,1,1,2,4,0,0,0,0,8,18,8,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,199,                i = 1;,2,0,0,0,0,0,0,0,0,3,6,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,203,        mt[0] = 0x80000000; // MSB is 1; assuring non-zero initial array,0,0,0,1,2,0,0,0,0,3,64,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,205,        clear(); // Clear normal deviate cache,6,1,0,1,2,1,0,2,0,10,38,1,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,207,    },6,1,0,0,1,0,0,0,0,8,1,3,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,216,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",10,1,0,7,14,0,0,0,0,12,71,3,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,217,    },4,0,0,0,1,0,0,0,0,5,1,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,16,384,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.15385,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,16,393,      if (x > 20) {,10,1,0,1,3,2,0,2,0,18,13,2,0.15385,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,16,870,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.13333,1,1
defect4j,math,org/apache/commons/math3/util/FastMath,16,874,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.13333,1,1
defect4j,math,org/apache/commons/math3/util/FastMath,16,395,              return 0.5 * exp(x);,0,0,0,1,2,1,0,0,0,4,20,4,0.09091,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,16,399,              return 0.5 * exp(-x);,0,0,0,1,2,1,0,0,0,4,21,4,0.09091,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,131,    public MersenneTwister(long seed) {,4,0,0,1,3,1,0,0,0,5,35,2,0.09091,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,132,        mt = new int[N];,6,1,1,1,2,0,0,0,0,10,16,3,0.09091,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,133,        setSeed(seed);,0,0,0,1,2,0,0,0,0,3,14,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,134,    },2,0,0,0,1,0,10,0,0,13,1,3,0.09091,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1510,            if (isNaN()) {,0,0,0,2,5,0,2,0,0,2,14,7,1.0,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1511,                return this;,0,0,0,0,0,1,0,0,0,1,12,4,1.0,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1514,            if (x.isNaN()) {,0,0,0,2,5,0,0,0,0,7,16,4,1.0,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1515,                return x;,2,0,0,0,0,1,2,2,0,6,9,7,1.0,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1518,            if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) {,18,6,0,2,5,0,0,0,0,24,73,6,1.0,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1519,                result = newInstance(this);,4,0,0,1,2,0,8,0,0,14,27,5,1.0,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1520,                result.sign = (byte) (sign * x.sign);,0,0,0,2,4,0,0,0,0,6,37,4,1.0,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1521,                return result;,4,1,1,0,0,1,0,2,0,9,14,1,1.0,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1478,            field.setIEEEFlagsBits(DfpField.FLAG_OVERFLOW);,4,0,0,1,2,0,4,0,0,8,47,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1479,            return DfpField.FLAG_OVERFLOW;,0,0,0,0,0,1,0,0,0,1,30,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1663,"            result = dotrap(excp, MULTIPLY_TRAP, result, result);",0,0,0,1,2,0,0,0,0,3,53,4,0.25,1,1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2278,                result.exp = result.exp - ERR_SCALE;,0,0,0,0,0,0,0,0,0,0,36,4,0.25,1,1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2279,                def = newInstance(getZero());,0,0,0,2,4,0,0,0,0,6,29,4,0.25,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2280,                def.sign = result.sign;,6,1,0,0,0,0,0,0,0,7,23,7,0.25,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2281,                def.nans = INFINITE;,0,0,0,0,0,0,0,0,0,0,20,4,0.25,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2282,                break;,4,0,0,0,0,0,2,2,0,9,6,1,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,583,            lambda = 4 + (int) (3. * Math.log(dimension));,4,2,0,3,6,0,6,0,0,13,46,3,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,751,                    negccov = negcovMax;,0,0,0,0,0,0,0,0,0,1,20,8,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,246,        this(0);,0,0,0,1,2,0,0,0,0,3,8,4,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,247,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,253,"        this(lambda, null, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,",0,0,0,0,1,0,0,0,0,1,62,4,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,256,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,929,            double[] res = new double[x.length];,0,0,0,2,4,0,0,0,0,6,36,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,930,            for (int i = 0; i < x.length; i++) {,4,0,0,1,3,0,4,2,0,10,36,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,931,                double diff = boundaries[1][i] - boundaries[0][i];,0,0,0,4,8,0,0,0,0,12,50,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,932,                res[i] = (x[i] - boundaries[0][i]) / diff;,2,2,1,5,10,0,0,0,0,17,42,7,0.33333,1,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,934,            return res;,0,0,0,0,0,1,0,0,0,1,11,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,955,            double[] res = new double[x.length];,0,0,0,2,4,0,0,0,0,6,36,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,956,            for (int i = 0; i < x.length; i++) {,4,0,0,1,3,0,0,0,0,5,36,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,957,                double diff = boundaries[1][i] - boundaries[0][i];,6,3,1,4,8,0,0,0,0,26,50,1,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,958,                res[i] = diff * x[i] + boundaries[0][i];,0,0,0,4,8,0,0,0,0,12,40,4,0.33333,1,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,960,            return res;,6,0,0,0,0,1,0,0,0,7,11,1,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,970,                double[] repaired = repair(point);,2,0,0,2,4,0,4,0,0,6,34,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,971,                value = CMAESOptimizer.this,2,0,0,0,0,1,0,0,0,4,27,2,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,974,            } else {,10,0,0,0,2,0,0,0,0,10,8,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1014,            double[] repaired = new double[x.length];,0,0,0,2,4,0,0,0,0,6,41,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1015,            for (int i = 0; i < x.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1016,                if (x[i] < 0) {,0,1,1,2,5,0,0,0,0,5,15,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1018,                } else if (x[i] > 1.0) {,0,0,0,2,6,0,0,0,0,8,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1021,                    repaired[i] = x[i];,0,0,0,2,4,0,0,0,0,6,19,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1024,            return repaired;,0,0,0,0,0,1,0,0,0,1,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1033,            double penalty = 0;,2,0,0,0,0,0,0,0,0,2,19,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1034,            for (int i = 0; i < x.length; i++) {,12,1,0,1,3,3,0,0,0,17,36,1,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1035,                double diff = Math.abs(x[i] - repaired[i]);,6,3,1,3,6,0,0,0,0,16,43,11,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1036,                penalty += diff * valueRange;,0,0,0,0,0,0,0,0,0,0,29,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1038,            return isMinimize ? penalty : -penalty;,0,0,0,0,0,1,0,0,0,1,39,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,459,                    break generationLoop;,4,0,0,0,0,0,6,0,0,10,21,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,246,        this(0);,0,0,0,1,2,0,0,0,0,3,8,4,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,247,    },10,1,1,0,1,1,4,0,0,21,1,1,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,253,"        this(lambda, null, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,",0,0,0,0,1,0,0,0,0,1,62,4,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,256,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,570,            lambda = 4 + (int) (3. * Math.log(dimension));,0,0,0,3,6,0,0,0,0,9,46,4,1.0,1,1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,916,            double[] res = new double[x.length];,0,0,0,2,4,0,0,0,0,6,36,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,917,            for (int i = 0; i < x.length; i++) {,0,0,0,1,3,0,0,0,0,4,36,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,918,                double diff = boundaries[1][i] - boundaries[0][i];,2,1,0,4,8,0,0,0,0,3,50,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,919,                res[i] = (x[i] - boundaries[0][i]) / diff;,6,2,0,5,10,0,0,0,0,9,42,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,921,            return res;,6,0,0,0,0,5,2,0,0,12,11,1,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,942,            double[] res = new double[x.length];,6,0,0,2,4,0,0,0,0,6,36,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,943,            for (int i = 0; i < x.length; i++) {,0,0,0,1,3,0,0,0,0,4,36,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,944,                double diff = boundaries[1][i] - boundaries[0][i];,0,0,0,4,8,0,0,0,0,12,50,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,945,                res[i] = diff * x[i] + boundaries[0][i];,0,0,0,4,8,0,0,0,0,12,40,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,947,            return res;,2,0,0,0,0,1,0,0,0,2,11,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,957,                double[] repaired = repair(point);,4,0,0,2,4,0,0,0,0,5,34,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,958,                value = CMAESOptimizer.this,0,0,0,0,0,0,0,0,0,0,27,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,999,            double[] repaired = new double[x.length];,0,0,0,2,4,0,0,0,0,6,41,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1000,            for (int i = 0; i < x.length; i++) {,14,1,0,1,3,0,0,0,0,17,36,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1001,                if (x[i] < 0) {,0,1,1,2,5,0,0,0,0,5,15,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1003,                } else if (x[i] > 1.0) {,4,1,1,2,6,2,0,4,0,15,24,1,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1006,                    repaired[i] = x[i];,0,0,1,2,4,0,0,0,0,9,19,10,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1009,            return repaired;,2,0,0,0,0,1,0,0,0,2,16,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,535,                boundaries = new double[2][];,0,0,0,2,4,0,0,0,0,6,29,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,536,                boundaries[0] = lB;,2,0,0,1,2,0,0,0,0,3,19,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,537,                boundaries[1] = uB;,2,0,1,1,2,0,0,0,0,5,19,8,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,423,                            break generationLoop;,4,0,0,0,0,0,0,0,0,4,21,3,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,995,                    repaired[i] = 1.0;,0,1,0,1,2,0,4,0,0,5,18,6,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,908,            double[] res = new double[x.length];,0,0,0,2,4,0,0,0,0,6,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,909,            for (int i = 0; i < x.length; i++) {,8,1,0,1,3,0,0,0,0,9,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,910,                double diff = boundaries[1][i] - boundaries[0][i];,2,1,1,4,8,0,0,0,0,11,50,8,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,911,                res[i] = (x[i] - boundaries[0][i]) / diff;,0,0,0,5,10,0,0,0,0,15,42,4,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,913,            return res;,6,1,0,0,0,1,6,0,0,14,11,3,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,933,            double[] res = new double[x.length];,0,0,0,2,4,0,0,0,0,6,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,934,            for (int i = 0; i < x.length; i++) {,2,1,0,1,3,0,8,0,0,13,36,10,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,935,                double diff = boundaries[1][i] - boundaries[0][i];,2,1,1,4,8,0,0,0,0,11,50,8,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,936,                res[i] = diff * x[i] + boundaries[0][i];,10,5,1,4,8,0,0,0,0,28,40,1,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,938,            return res;,4,0,0,0,0,1,0,0,0,5,11,1,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,948,                double[] repaired = repair(point);,0,0,0,2,4,0,0,0,0,6,34,4,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,949,                value = CMAESOptimizer.this,0,0,0,0,0,0,0,0,0,0,27,4,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,952,            } else {,0,0,0,0,2,0,0,0,0,1,8,4,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,990,            double[] repaired = new double[x.length];,2,0,0,2,4,1,12,0,0,15,41,3,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,991,            for (int i = 0; i < x.length; i++) {,2,0,0,1,3,1,8,0,0,11,36,11,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,992,                if (x[i] < 0) {,6,0,1,2,5,4,10,4,0,26,15,1,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,994,                } else if (x[i] > 1.0) {,0,1,1,2,6,0,0,0,0,5,24,8,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,997,                    repaired[i] = x[i];,0,0,0,2,4,0,12,0,0,12,19,5,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1000,            return repaired;,8,1,0,0,0,1,0,0,0,9,16,1,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1009,            double penalty = 0;,2,0,0,0,0,0,0,0,0,2,19,6,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1010,            for (int i = 0; i < x.length; i++) {,22,3,0,1,3,1,0,0,0,27,36,1,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1011,                double diff = Math.abs(x[i] - repaired[i]);,0,0,0,3,6,0,0,0,0,9,43,4,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1012,                penalty += diff * valueRange;,0,0,0,0,0,0,0,0,0,0,29,4,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1014,            return isMinimize ? penalty : -penalty;,6,0,0,0,0,1,0,0,0,7,39,6,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,529,                boundaries = new double[2][];,0,0,0,2,4,0,0,0,0,6,29,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,530,                boundaries[0] = lB;,0,0,0,1,2,0,0,0,0,3,19,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,531,                boundaries[1] = uB;,2,1,0,1,2,0,0,0,0,3,19,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,97,"        MatrixUtils.checkSubtractionCompatible(this, m);",0,0,0,1,2,0,6,0,0,7,48,3,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,99,        final int rowCount    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,42,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,100,        final int columnCount = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,45,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,101,"        final RealMatrix out = createMatrix(rowCount, columnCount);",8,1,0,1,2,0,0,0,0,10,59,6,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,102,        for (int row = 0; row < rowCount; ++row) {,0,1,0,1,3,0,20,0,0,21,42,7,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,103,            for (int col = 0; col < columnCount; ++col) {,6,1,0,1,3,0,0,0,0,7,45,3,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,104,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));",0,0,0,3,6,0,0,0,0,9,66,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,108,        return out;,2,0,0,0,0,1,2,4,0,8,11,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,241,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,1,0,0,0,6,60,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,456,        final int rows    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,38,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,457,        final int columns = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,41,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,458,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0,0,0,1,2,0,0,0,0,3,58,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,459,        for (int j = 0; j < columns; ++j) {,8,1,0,1,3,0,0,0,0,10,35,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,460,            for (int i = 0; i < rows; ++i) {,24,3,0,1,3,0,0,0,0,30,32,3,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,461,"                visitor.visit(i, j, data[i][j]);",0,0,1,3,6,0,8,0,0,14,32,9,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,464,        return visitor.end();,0,0,0,1,2,1,4,0,0,4,21,5,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,130,        if (data == null ||,4,4,0,0,1,3,4,0,0,15,19,1,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,134,        return (data.length * data[0].length <= 4096) ?,6,2,1,2,4,1,0,0,0,10,47,6,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,523,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0,0,0,3,7,0,0,0,0,10,61,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,528,    },4,0,0,0,1,0,0,0,0,5,1,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,241,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,10,1,0,1,4,1,0,0,0,12,60,3,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,256,                this.endRow = endRow;,4,0,0,0,0,0,0,0,0,5,21,10,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,257,                columnSum   = 0;,20,8,0,0,0,1,0,0,0,29,16,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,258,                maxColSum   = 0;,0,0,0,0,0,0,0,0,0,0,16,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,259,            },0,0,0,0,1,0,0,0,0,1,1,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,263,                columnSum += FastMath.abs(value);,6,0,1,1,2,1,6,0,0,19,33,1,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,264,                if (row == endRow) {,0,0,0,1,3,0,0,0,0,4,20,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,265,"                    maxColSum = FastMath.max(maxColSum, columnSum);",0,0,0,1,2,0,0,0,0,3,47,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,266,                    columnSum = 0;,0,0,0,0,0,0,0,0,0,0,14,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,268,            },2,0,0,0,1,0,2,0,0,4,1,5,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,272,                return maxColSum;,4,0,0,0,0,1,0,0,0,4,17,3,4.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3508,            return a;,0,0,1,0,0,1,0,0,0,3,9,6,4.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3511,            return b;,2,0,1,0,0,1,0,0,0,11,9,3,4.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3514,        if (a != b) {,4,1,0,1,3,0,0,0,0,5,13,4,4.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3519,        long bits = Double.doubleToRawLongBits(a);,0,0,0,1,2,0,0,0,0,3,42,4,4.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3520,        if (bits == 0x8000000000000000L) {,2,0,0,1,3,0,0,0,0,3,34,8,4.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3523,        return a;,0,0,0,0,0,1,0,0,0,1,9,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,63,        throws NonPositiveDefiniteMatrixException {,2,0,0,0,1,0,0,0,0,2,43,2,2.0,1,1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,65,        final int order = matrix.getRowDimension();,0,0,0,1,2,0,0,0,0,3,43,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,66,        final double[][] c = matrix.getData();,0,0,0,3,6,0,0,0,0,9,38,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,67,        final double[][] b = new double[order][order];,0,0,0,4,8,0,0,0,0,12,46,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,69,        int[] swap  = new int[order];,2,0,1,2,4,0,4,0,0,8,29,3,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,70,        int[] index = new int[order];,2,0,1,2,4,0,0,0,0,4,29,5,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,71,        for (int i = 0; i < order; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,72,            index[i] = i;,0,0,0,1,2,0,0,0,0,3,13,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,75,        int r = 0;,0,0,0,0,0,0,0,0,0,0,10,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,76,        for (boolean loop = true; loop;) {,4,0,0,1,3,0,0,0,0,5,34,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,79,            swap[r] = r;,0,0,0,1,2,0,0,0,0,3,12,4,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,80,            for (int i = r + 1; i < order; ++i) {,10,2,0,1,3,0,0,0,0,13,37,6,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,81,                int ii  = index[i];,0,0,0,1,2,0,0,0,0,3,19,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,82,                int isi = index[swap[i]];,10,1,1,2,4,0,0,0,0,19,25,3,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,83,                if (c[ii][ii] > c[isi][isi]) {,4,0,0,5,11,1,0,0,0,5,30,2,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,84,                    swap[r] = i;,4,0,0,1,2,0,4,0,0,10,12,3,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,90,            if (swap[r] != r) {,4,1,1,2,5,0,0,0,0,10,19,0,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,91,                int tmp = index[r];,0,1,1,1,2,0,0,0,0,6,19,6,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,92,                index[r] = index[swap[r]];,4,0,0,3,6,0,0,4,0,9,26,6,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,93,                index[swap[r]] = tmp;,6,1,0,2,4,0,0,0,0,7,21,5,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,97,            int ir = index[r];,2,0,1,1,2,0,0,0,0,6,18,7,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,98,            if (c[ir][ir] < small) {,4,1,1,3,7,0,0,0,0,13,24,3,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,121,                final double sqrt = FastMath.sqrt(c[ir][ir]);,0,0,0,3,6,0,0,0,0,9,45,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,122,                b[r][r] = sqrt;,2,1,0,2,4,0,0,0,0,3,15,13,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,123,                final double inverse  = 1 / sqrt;,8,2,0,0,0,4,0,4,0,18,33,1,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,124,                for (int i = r + 1; i < order; ++i) {,18,2,0,1,3,2,12,0,0,35,37,3,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,125,                    final int ii = index[i];,2,0,1,1,2,1,0,0,0,7,24,10,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,126,                    final double e = inverse * c[ii][ir];,0,0,0,2,4,0,0,0,0,6,37,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,127,                    b[i][r] = e;,2,0,1,2,4,1,4,0,0,16,12,3,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,128,                    c[ii][ii] -= e * e;,10,6,1,2,4,0,0,0,0,37,19,3,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,129,                    for (int j = r + 1; j < i; ++j) {,10,2,0,1,3,0,0,0,0,13,33,10,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,130,                        final int ij = index[j];,2,0,0,1,2,0,4,0,0,6,24,5,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,131,                        final double f = c[ii][ij] - e * b[j][r];,0,0,0,4,8,0,0,0,0,12,41,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,132,                        c[ii][ij] = f;,0,0,0,2,4,0,0,0,0,6,14,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,133,                        c[ij][ii] = f;,2,0,1,2,4,0,0,0,0,9,14,12,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,138,                loop = ++r < order;,2,0,0,0,0,0,0,0,0,3,19,2,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,140,        },0,0,0,0,1,0,0,0,0,1,1,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,143,        rank = r;,4,0,0,0,0,0,0,0,0,5,9,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,144,"        root = MatrixUtils.createRealMatrix(order, r);",2,0,0,1,2,0,6,0,0,9,46,0,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,145,        for (int i = 0; i < order; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,146,            for (int j = 0; j < r; ++j) {,0,0,0,1,3,0,0,0,0,4,29,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,147,"                root.setEntry(index[i], j, b[i][j]);",0,0,0,4,8,0,0,0,0,12,36,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,151,    },6,0,0,0,1,0,0,0,0,7,1,3,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,160,        return root;,6,1,0,0,0,1,0,0,0,8,12,6,2.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3507,        if (a > b) {,0,0,0,1,3,0,0,0,0,4,12,4,2.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3510,        if (a < b) {,0,0,0,1,3,0,0,0,0,4,12,4,2.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,375,        return Math.sqrt(a);,12,2,0,1,2,2,0,0,0,15,20,3,1.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,275,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,1.0,1,0
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,184,        return false;,6,1,0,0,0,1,4,0,0,11,13,3,1.0,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,22,1107,            return Double.NEGATIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,7,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,129,        final double nhalf = numeratorDegreesOfFreedom / 2;,4,1,0,0,0,1,4,0,0,10,51,12,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,130,        final double mhalf = denominatorDegreesOfFreedom / 2;,0,0,0,0,0,0,0,0,0,0,53,4,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,131,        final double logx = FastMath.log(x);,2,1,0,1,2,0,0,0,0,3,36,4,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,132,        final double logn = FastMath.log(numeratorDegreesOfFreedom);,4,0,0,1,2,2,6,0,0,12,60,1,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,133,        final double logm = FastMath.log(denominatorDegreesOfFreedom);,10,0,0,1,2,1,8,2,0,21,62,3,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,134,        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +,6,2,0,0,1,1,4,0,0,13,66,4,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,136,        return FastMath.exp(nhalf * logn + nhalf * logx - logx +,10,8,0,0,1,1,4,0,0,22,56,5,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,109,        if (x < lower || x > upper) {,2,0,0,1,3,0,0,0,0,2,29,7,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,112,        return 1 / (upper - lower);,6,2,0,1,2,1,0,0,0,9,27,3,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,174,        return upper;,0,0,0,0,0,1,0,0,0,1,13,4,0.25,0,0
defect4j,math,org/apache/commons/math3/special/Beta,22,170,"        return logBeta(a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);",0,0,0,1,2,1,0,0,0,4,57,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,234,        double previous = val[0];,2,0,1,1,2,0,0,0,0,4,25,5,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,235,        final int max = val.length;,0,0,0,0,0,0,0,0,0,0,27,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,239,        for (index = 1; index < max; index++) {,0,0,0,1,3,0,4,0,0,4,39,5,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,240,            switch (dir) {,8,4,0,1,3,0,0,0,0,13,14,10,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,242,                if (strict) {,2,0,0,1,3,0,0,0,0,2,13,8,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,243,                    if (val[index] <= previous) {,0,0,0,2,5,0,0,0,0,7,29,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,268,            previous = val[index];,0,0,0,1,2,0,0,0,0,3,22,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,271,        if (index == max) {,10,2,1,1,3,0,0,0,0,21,19,1,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,273,            return true;,2,0,0,0,0,1,0,0,0,3,12,3,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,295,"        checkOrder(val, dir, strict, true);",0,0,0,1,2,0,8,0,0,9,35,5,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,296,    },2,0,1,0,1,0,0,0,0,5,1,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,306,"        checkOrder(val, OrderDirection.INCREASING, true);",10,3,1,1,2,0,10,0,0,31,49,3,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,307,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,143,    public static enum OrderDirection {,0,0,0,0,1,0,0,0,0,1,35,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,145,"        INCREASING,",0,0,0,0,0,0,0,0,0,0,11,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,147,        DECREASING,0,0,0,0,0,0,0,0,0,0,10,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,166,            switch (dir) {,0,0,0,1,3,0,0,0,0,4,14,4,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,141,        return new UnivariateFunction() {,8,3,1,1,3,1,0,2,0,18,33,3,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,141,        return new UnivariateFunction() {,0,0,0,1,3,1,0,2,0,2,33,6,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,144,                double r = f[0].value(x);,2,0,1,2,4,0,4,0,0,8,25,10,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,145,                for (int i = 1; i < f.length; i++) {,14,1,0,1,3,0,0,2,0,19,36,3,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,146,                    r += f[i].value(x);,2,0,1,2,4,0,4,0,0,11,19,11,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,148,                return r;,2,0,0,0,0,1,0,0,0,2,9,9,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,64,               DimensionMismatchException {,0,0,0,0,1,0,0,0,0,1,28,4,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,65,        if (x == null ||,2,0,1,0,1,0,4,0,0,8,16,3,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,69,        if (x.length == 0 ||,0,0,0,0,1,0,0,0,0,1,20,4,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,73,        if (y.length != x.length) {,6,0,0,1,3,0,0,0,0,6,27,2,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,76,        MathArrays.checkOrder(x);,0,0,0,1,2,0,0,0,0,3,25,4,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,78,        abscissa = MathArrays.copyOf(x);,2,0,0,1,2,0,6,0,0,9,32,4,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,79,        ordinate = MathArrays.copyOf(y);,0,0,0,1,2,0,0,0,0,3,32,4,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,80,    },8,3,0,0,1,0,0,0,0,11,1,10,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,84,"        int index = Arrays.binarySearch(abscissa, x);",4,0,0,1,2,0,8,0,0,13,45,3,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,85,        double fx = 0;,6,1,0,0,0,1,0,0,0,8,14,4,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,87,        if (index < -1) {,0,0,0,1,3,0,0,0,0,4,17,4,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,89,            fx = ordinate[-index-2];,4,1,1,1,2,0,0,0,0,9,24,6,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,90,        } else if (index >= 0) {,0,0,0,1,4,0,0,0,0,5,24,4,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,96,            fx = ordinate[0];,0,0,0,1,2,0,0,0,0,3,17,4,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,99,        return fx;,0,0,0,0,0,1,0,0,0,1,10,4,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,193,                                d = -tol1;,4,0,0,0,0,0,0,0,0,6,10,16,0.25,1,1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,539,"         return copyOf(source, source.length);",0,0,0,1,2,1,0,0,0,4,37,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,567,         final double[] output = new double[len];,0,0,0,2,4,0,0,0,0,6,40,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,568,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",8,0,0,2,4,0,14,0,0,23,73,0,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,569,         return output;,0,0,0,0,0,1,0,0,0,1,14,4,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/function/Sin,23,33,"public class Sin implements UnivariateDifferentiable, DifferentiableUnivariateFunction {",12,0,0,0,1,1,0,4,0,19,88,1,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/function/Sin,23,36,        return FastMath.sin(x);,0,0,0,1,2,1,6,0,0,6,23,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,24,532,"         return copyOf(source, source.length);",4,0,0,1,2,1,4,0,0,8,37,5,0.25,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,24,560,         final double[] output = new double[len];,4,0,1,2,4,1,4,0,0,11,40,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,24,561,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",0,0,0,2,4,0,0,0,0,6,73,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,24,562,         return output;,18,3,0,0,0,2,6,2,0,30,14,2,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/function/Sin,24,33,"public class Sin implements UnivariateDifferentiable, DifferentiableUnivariateFunction {",2,0,0,0,1,3,0,0,0,5,88,2,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/function/Sin,24,36,        return FastMath.sin(x);,0,0,0,1,2,1,6,0,0,6,23,5,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,183,                            if (x <= m) {,0,0,0,1,3,0,0,0,0,4,13,4,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,184,                                d = tol1;,0,0,0,0,0,0,0,0,0,0,9,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1653,        double x2 = x*x;,6,1,0,0,0,1,0,0,0,8,16,6,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1655,        double p = 2.7553817452272217E-6;,0,0,0,0,0,0,0,0,0,0,33,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1656,        p = p * x2 + -1.9841269659586505E-4;,6,2,0,0,0,0,0,0,0,10,36,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1657,        p = p * x2 + 0.008333333333329196;,0,0,0,0,0,0,0,0,0,0,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1658,        p = p * x2 + -0.16666666666666666;,0,0,0,0,0,0,0,0,0,0,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1661,        p = p * x2 * x;,2,0,0,0,0,0,0,8,0,10,15,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1663,        return p;,2,0,0,0,0,1,0,0,0,2,9,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1673,        double x2 = x*x;,6,1,0,0,0,0,0,0,0,7,16,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1675,        double p = 2.479773539153719E-5;,0,0,0,0,0,0,0,0,0,0,32,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1676,        p = p * x2 + -0.0013888888689039883;,0,0,0,0,0,0,8,0,0,8,36,7,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1677,        p = p * x2 + 0.041666666666621166;,6,2,0,0,0,0,0,0,0,9,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1678,        p = p * x2 + -0.49999999999999994;,6,2,0,0,0,0,0,0,0,10,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1679,        p *= x2;,4,0,0,0,0,0,0,0,0,5,8,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1681,        return p;,0,0,0,0,0,1,0,0,0,1,9,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1692,        int idx = (int) ((xa * 8.0) + 0.5);,0,0,0,3,6,0,0,0,0,9,35,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1693,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,6,1,1,1,2,1,0,0,0,12,54,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1696,        final double sintA = SINE_TABLE_A[idx];,2,0,1,1,2,1,0,0,0,7,39,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1697,        final double sintB = SINE_TABLE_B[idx];,2,0,0,1,2,0,6,0,0,8,39,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1698,        final double costA = COSINE_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,41,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1699,        final double costB = COSINE_TABLE_B[idx];,6,3,1,1,2,1,10,0,0,24,41,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1702,        double sinEpsA = epsilon;,8,1,0,0,0,0,0,0,0,9,25,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1703,        double sinEpsB = polySine(epsilon);,2,0,0,1,2,0,0,0,0,2,35,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1704,        final double cosEpsA = 1.0;,0,0,0,0,0,0,0,0,0,0,27,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1705,        final double cosEpsB = polyCosine(epsilon);,4,2,0,1,2,0,0,0,0,6,43,6,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1708,        final double temp = sinEpsA * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,43,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1709,        double temp2 = (sinEpsA + temp) - temp;,0,0,0,1,2,0,0,0,0,3,39,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1710,        sinEpsB +=  sinEpsA - temp2;,6,1,0,0,0,0,0,0,0,8,28,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1711,        sinEpsA = temp2;,0,0,0,0,0,0,0,0,0,0,16,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1737,        double a = 0;,4,0,0,0,0,2,0,4,0,10,13,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1738,        double b = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1740,        double t = sintA;,6,1,0,0,0,0,0,0,0,7,17,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1741,        double c = a + t;,0,0,0,0,0,0,0,0,0,0,17,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1742,        double d = -(c - a - t);,8,1,0,1,2,0,0,0,0,10,24,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1743,        a = c;,8,0,0,0,0,0,0,0,0,9,6,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1744,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1746,        t = costA * sinEpsA;,0,0,0,0,0,0,0,0,0,0,20,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1747,        c = a + t;,0,0,0,0,0,0,0,0,0,0,10,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1748,        d = -(c - a - t);,0,0,0,1,2,0,0,0,0,3,17,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1749,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1750,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1752,        b = b + sintA * cosEpsB + costA * sinEpsB;,0,0,0,0,0,0,0,0,0,0,42,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1767,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,6,0,0,0,0,0,0,0,0,7,68,0,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1794,        if (xb != 0.0) {,6,3,0,1,3,0,0,0,0,9,16,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1795,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,0,0,0,2,5,0,0,0,0,7,44,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1797,            c = a + t;,16,2,1,0,0,2,16,4,0,46,10,2,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1798,            d = -(c - a - t);,2,0,0,1,2,3,0,0,0,5,17,2,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1799,            a = c;,6,1,0,0,0,1,0,0,0,8,6,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1800,            b = b + d;,10,0,0,0,0,0,0,0,0,12,10,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1803,        result = a + b;,8,3,0,0,0,0,14,0,0,25,15,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1805,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1816,        final double pi2a = 1.5707963267948966;,0,0,0,0,0,0,0,0,0,0,39,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1817,        final double pi2b = 6.123233995736766E-17;,4,1,1,0,0,0,0,0,0,8,42,8,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1819,        final double a = pi2a - xa;,0,0,0,0,0,0,0,0,0,0,27,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1820,        double b = -(a - pi2a + xa);,8,2,0,1,2,0,0,0,0,11,28,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1821,        b += pi2b - xb;,0,0,0,0,0,0,0,0,0,0,15,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1823,"        return sinQ(a, b);",4,1,0,1,2,1,0,2,0,7,18,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2201,        boolean negative = false;,6,1,1,0,0,0,4,0,0,17,25,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2202,        int quadrant = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2204,        double xb = 0.0;,6,0,0,0,0,1,0,0,0,8,16,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2207,        xa = x;,4,0,0,0,0,0,4,0,0,9,7,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2208,        if (x < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2214,        if (xa == 0.0) {,4,0,0,1,3,0,0,0,0,5,16,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2222,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,49,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2227,        if (xa > 3294198.0) {,0,0,0,1,3,0,0,0,0,4,21,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2237,"            final CodyWaite cw = new CodyWaite(xa, xb);",0,0,0,1,2,0,0,0,0,3,43,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2238,            quadrant = cw.getK() & 3;,4,0,0,1,2,1,0,0,0,5,25,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2239,            xa = cw.getRemA();,0,0,0,1,2,0,0,0,0,3,18,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2240,            xb = cw.getRemB();,0,0,0,1,2,0,0,0,0,3,18,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2243,        if (negative) {,0,0,0,1,3,0,0,0,0,4,15,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2247,        switch (quadrant) {,2,0,0,1,3,3,0,0,0,5,19,2,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2253,"                return -sinQ(xa, xb);",0,0,0,1,2,1,6,0,0,7,21,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2255,"                return -cosQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,21,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3396,        return (a <= b) ? a : b;,0,0,0,1,2,1,0,0,0,4,24,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3785,                  double xb) {,2,0,0,0,2,0,0,0,0,2,12,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3788,            int k = (int)(xa * 0.6366197723675814);,4,1,0,2,4,0,6,0,0,11,39,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3794,                double a = -k * 1.570796251296997;,4,1,0,0,0,0,4,0,0,10,34,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3795,                remA = xa + a;,6,1,0,0,0,0,0,0,0,8,14,7,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3796,                remB = -(remA - xa - a);,2,1,0,1,2,0,0,0,0,3,24,6,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3798,                a = -k * 7.549789948768648E-8;,0,0,0,0,0,0,0,0,0,0,30,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3799,                double b = remA;,2,1,0,0,0,0,0,0,0,3,16,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3800,                remA = a + b;,6,2,0,0,0,0,0,0,0,9,13,6,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3801,                remB += -(remA - b - a);,0,0,0,1,2,0,0,0,0,3,24,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3803,                a = -k * 6.123233995736766E-17;,10,1,1,0,0,0,4,2,0,25,31,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3804,                b = remA;,0,0,0,0,0,0,0,0,0,0,9,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3805,                remA = a + b;,2,0,0,0,0,0,0,0,0,3,13,6,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3806,                remB += -(remA - b - a);,0,0,0,1,2,0,0,0,0,3,24,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3808,                if (remA > 0) {,10,4,0,1,3,1,0,0,0,15,15,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3809,                    break;,0,0,1,0,0,0,4,0,0,9,6,6,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3818,            this.finalK = k;,0,0,0,0,0,0,0,0,0,0,16,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3819,            this.finalRemA = remA;,0,0,0,0,0,0,0,0,0,0,22,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3820,            this.finalRemB = remB;,4,0,0,0,0,0,0,0,0,5,22,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3821,        },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3827,            return finalK;,2,0,0,0,0,1,0,0,0,2,14,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3833,            return finalRemA;,2,0,0,0,0,1,0,0,0,2,17,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3839,            return finalRemB;,0,0,0,0,0,1,0,0,0,1,17,4,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,211,                        u = x + tol1;,0,0,0,0,0,0,0,0,0,0,13,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,262,                        v = u;,4,0,0,0,0,0,0,0,0,5,6,13,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,263,                        fv = fu;,4,0,0,0,0,0,0,0,0,5,8,13,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,24,66,        return evaluations.getCount();,6,1,0,1,2,1,0,0,0,8,30,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,326,                a = FastMath.sqrt(c1 / c2);,6,1,0,1,2,0,4,0,0,12,27,7,0.33333,1,1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,327,                omega = FastMath.sqrt(c2 / c3);,2,1,0,1,2,0,0,0,0,3,31,4,0.33333,1,1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,201,            this.observations = observations.clone();,8,4,0,1,2,0,4,0,0,17,41,1,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,202,        },2,0,1,0,1,1,4,0,0,11,1,3,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,215,            sortObservations();,0,0,0,1,2,0,2,0,0,2,19,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,216,            guessAOmega();,0,0,0,1,2,0,0,0,0,3,14,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,217,            guessPhi();,4,1,1,1,2,0,2,0,0,23,11,1,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,218,"            return new double[] { a, omega, phi };",0,0,1,2,4,1,4,0,0,8,38,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,228,            WeightedObservedPoint curr = observations[0];,6,1,1,1,2,0,0,0,0,17,45,3,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,229,            for (int j = 1; j < observations.length; ++j) {,0,0,0,1,3,0,0,0,0,4,47,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,230,                WeightedObservedPoint prec = curr;,0,0,0,0,0,0,0,0,0,0,34,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,231,                curr = observations[j];,2,0,1,1,2,0,0,0,0,7,23,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,232,                if (curr.getX() < prec.getX()) {,0,0,0,3,7,0,0,0,0,10,32,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,246,        },8,1,0,0,1,0,0,0,0,9,1,3,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,259,            double sx2 = 0;,18,6,0,0,0,0,0,0,0,26,15,1,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,260,            double sy2 = 0;,18,0,0,0,0,0,2,0,0,20,15,1,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,261,            double sxy = 0;,2,0,0,0,0,0,0,0,0,2,15,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,262,            double sxz = 0;,4,0,0,0,0,1,0,0,0,5,15,1,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,263,            double syz = 0;,2,0,0,0,0,0,0,0,0,2,15,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,265,            double currentX = observations[0].getX();,0,0,0,2,4,0,0,0,0,6,41,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,266,            double currentY = observations[0].getY();,0,0,0,2,4,0,0,0,0,6,41,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,267,            double f2Integral = 0;,2,0,0,0,0,0,0,0,0,2,22,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,268,            double fPrime2Integral = 0;,2,0,0,0,0,0,0,0,0,2,27,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,269,            final double startX = currentX;,0,0,0,0,0,0,0,0,0,0,31,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,270,            for (int i = 1; i < observations.length; ++i) {,10,1,0,1,3,0,0,0,0,12,47,5,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,272,                final double previousX = currentX;,0,0,0,0,0,0,0,0,0,0,34,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,273,                final double previousY = currentY;,0,0,0,0,0,0,0,0,0,0,34,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,274,                currentX = observations[i].getX();,8,1,1,2,4,3,6,4,0,28,34,1,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,275,                currentY = observations[i].getY();,2,0,1,2,4,0,2,0,0,9,34,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,279,                final double dx = currentX - previousX;,6,1,0,0,0,1,0,0,0,8,39,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,280,                final double dy = currentY - previousY;,8,1,0,0,0,4,0,4,0,18,39,1,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,281,                final double f2StepIntegral =,0,0,0,0,0,0,0,0,0,0,29,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,283,                final double fPrime2StepIntegral = dy * dy / dx;,0,0,0,0,0,0,0,0,0,0,48,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,285,                final double x = currentX - startX;,6,1,0,0,0,1,0,0,0,8,35,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,286,                f2Integral += f2StepIntegral;,0,0,0,0,0,0,0,0,0,0,29,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,287,                fPrime2Integral += fPrime2StepIntegral;,0,0,0,0,0,0,0,0,0,0,39,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,289,                sx2 += x * x;,8,1,0,0,0,0,2,0,0,12,13,1,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,290,                sy2 += f2Integral * f2Integral;,0,0,0,0,0,0,0,0,0,0,31,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,291,                sxy += x * f2Integral;,6,1,0,0,0,0,0,0,0,8,22,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,292,                sxz += x * fPrime2Integral;,0,0,0,0,0,0,0,0,0,0,27,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,293,                syz += f2Integral * fPrime2Integral;,0,0,0,0,0,0,0,0,0,0,36,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,297,            double c1 = sy2 * sxz - sxy * syz;,14,3,0,0,0,1,0,0,0,18,34,1,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,298,            double c2 = sxy * sxz - sx2 * syz;,0,0,0,0,0,0,0,0,0,0,34,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,299,            double c3 = sx2 * sy2 - sxy * sxy;,0,0,0,0,0,0,0,0,0,0,34,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,300,            if ((c1 / c2 < 0) || (c2 / c3 < 0)) {,2,0,0,3,7,0,0,0,0,2,37,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,329,        },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,336,            double fcMean = 0;,0,0,0,0,0,0,2,0,0,2,18,5,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,337,            double fsMean = 0;,0,0,0,0,0,0,0,0,0,0,18,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,339,            double currentX = observations[0].getX();,0,0,0,2,4,0,0,0,0,6,41,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,340,            double currentY = observations[0].getY();,2,0,1,2,4,0,2,0,0,6,41,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,341,            for (int i = 1; i < observations.length; ++i) {,0,0,0,1,3,0,0,0,0,4,47,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,343,                final double previousX = currentX;,12,1,0,0,0,1,0,0,0,15,34,1,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,344,                final double previousY = currentY;,0,0,0,0,0,0,0,0,0,0,34,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,345,                currentX = observations[i].getX();,2,0,1,2,4,0,2,0,0,9,34,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,346,                currentY = observations[i].getY();,0,0,0,2,4,0,0,0,0,6,34,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,347,                final double currentYPrime = (currentY - previousY) / (currentX - previousX);,0,0,0,2,4,0,0,0,0,6,77,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,349,                double omegaX = omega * currentX;,10,1,1,0,0,1,0,0,0,17,33,0,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,350,                double cosine = FastMath.cos(omegaX);,2,0,0,1,2,0,6,0,0,8,37,8,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,351,                double sine = FastMath.sin(omegaX);,0,0,0,1,2,0,0,0,0,3,35,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,352,                fcMean += omega * currentY * cosine - currentYPrime * sine;,8,0,0,0,0,0,0,0,0,10,59,3,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,353,                fsMean += omega * currentY * sine + currentYPrime * cosine;,16,3,0,0,0,1,4,0,0,26,59,0,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,356,"            phi = FastMath.atan2(-fsMean, fcMean);",6,0,0,1,2,0,0,0,0,8,38,3,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,357,        },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,195,        public ParameterGuesser(WeightedObservedPoint[] observations) {,8,2,0,2,5,1,0,2,0,13,63,1,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,196,            if (observations.length < 4) {,2,0,0,1,3,0,0,0,0,3,30,8,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,25,47,"    public WeightedObservedPoint(final double weight, final double x, final double y) {",8,0,0,1,3,4,0,0,0,12,83,2,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,25,48,        this.weight = weight;,0,0,0,0,0,0,0,0,0,0,21,4,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,25,49,        this.x      = x;,4,0,0,0,0,0,0,0,0,5,16,4,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,25,50,        this.y      = y;,18,1,1,0,0,0,10,0,0,34,16,3,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,25,51,    },2,0,0,0,1,0,0,0,0,3,1,4,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,25,64,        return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,25,71,        return y;,26,9,0,0,0,1,0,0,0,38,9,0,0.2,0,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,48,                                Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,1.0,0,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,49,"        getContext().addMessage(pattern, args);",2,1,0,2,4,0,24,0,0,27,39,3,1.0,0,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,50,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,69,        this(LocalizedFormats.ILLEGAL_STATE);,0,0,0,1,2,0,0,0,0,3,37,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,70,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,74,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,45,                                     Object ... args) {,0,0,0,0,2,0,0,0,0,2,18,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,46,        context = new ExceptionContext(this);,0,0,0,1,2,0,0,0,0,3,37,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,47,"        context.addMessage(pattern, args);",4,0,0,1,2,0,8,0,0,13,34,0,0.14286,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,597,        return multiply(100).doubleValue();,0,0,0,2,4,1,4,0,0,4,35,5,1.0,1,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,555,"        return new Fraction(numerator * i, denominator);",6,0,0,1,2,1,4,0,0,11,48,4,0.5,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,319,        return (double)numerator / (double)denominator;,4,0,0,2,4,1,0,0,0,5,47,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,138,                Integer minRow = null;,2,0,0,0,0,0,0,2,0,4,22,7,0.33333,1,1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,139,                int minIndex = tableau.getWidth();,4,3,0,1,2,0,0,0,0,7,34,8,0.33333,1,1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,140,                for (Integer row : minRatioPositions) {,6,1,0,1,3,0,0,2,0,9,39,4,0.33333,1,1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,141,                    int i = tableau.getNumObjectiveFunctions();,0,0,0,1,2,0,0,0,0,3,43,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,142,                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {,8,4,0,2,5,0,4,0,0,17,58,9,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,143,                        if (row == tableau.getBasicRow(i)) {,2,1,0,2,5,0,6,0,0,9,36,11,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,144,                            if (i < minIndex) {,0,0,0,1,3,0,0,0,0,4,19,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,145,                                minIndex = i;,0,0,0,0,0,0,0,0,0,0,13,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,146,                                minRow = row;,8,0,0,0,0,0,0,0,0,10,13,3,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,150,                },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,151,                return minRow;,0,0,0,0,0,1,0,0,0,1,14,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,45,                                     Object ... args) {,2,1,0,0,2,0,12,0,0,16,18,4,0.25,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,46,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.25,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,47,"        context.addMessage(pattern, args);",12,3,1,1,2,0,24,2,0,48,34,1,0.25,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,48,    },4,2,0,0,1,0,8,0,0,14,1,5,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,127,                },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,361,        OpenMapRealVector res = new OpenMapRealVector(this);,2,0,0,1,2,0,0,4,0,6,52,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,362,        Iterator iter = entries.iterator();,0,0,0,1,2,0,0,0,0,3,35,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,363,        while (iter.hasNext()) {,2,0,0,2,5,1,0,0,0,3,24,2,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,364,            iter.advance();,0,0,0,1,2,0,0,0,0,3,15,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,365,"            res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));",0,0,0,5,10,0,0,0,0,15,64,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,374,        return res;,0,0,0,0,0,1,0,0,0,1,11,4,2.0,1,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,281,"                j = probe(perturb, j);",0,0,0,1,2,0,0,0,0,3,22,4,1.8,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,282,                index = j & mask;,0,0,0,0,0,0,0,0,0,0,17,4,1.8,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,283,                perturb >>= PERTURB_SHIFT;,8,0,0,0,0,0,0,0,0,10,26,3,1.8,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,285,                if (states[index] != FULL || keys[index] == key) {,4,3,1,3,7,0,0,0,0,15,50,8,1.8,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,292,            return index;,0,0,0,0,0,1,0,0,0,1,13,4,1.8,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,360,        checkVectorDimensions(v.getDimension());,0,0,0,2,4,0,6,0,0,6,40,5,1.33333,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,45,    private static final double[] LANCZOS = {,2,0,0,1,3,3,0,0,0,5,41,2,1.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,63,    private static final double HALF_LOG_2_PI = 0.5 * FastMath.log(2.0 * FastMath.PI);,0,0,0,1,2,0,0,0,0,3,82,4,1.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,154,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,4,3,0,5,11,0,12,0,0,19,68,4,1.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,186,        return ret;,8,1,0,0,0,1,0,0,0,11,11,5,1.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,67,        if (FastMath.abs(x) > 40) {,0,0,0,2,5,0,0,0,0,7,27,4,1.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,70,"        final double ret = Gamma.regularizedGammaP(0.5, x * x, 1.0e-15, 10000);",0,0,0,1,2,0,0,0,0,3,71,4,1.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,71,        return x < 0 ? -ret : ret;,4,0,0,0,0,1,0,0,0,6,26,6,1.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,375,        return Math.sqrt(a);,2,0,0,1,2,1,2,0,0,4,20,5,1.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3020,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,0,0,0,2,4,1,0,0,0,7,61,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3535,        if (a > b) {,2,0,0,1,3,0,0,0,0,2,12,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,82,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,90,        final double[] z = new double[x.length + y.length];,0,0,0,2,4,0,0,0,0,6,51,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,92,"        System.arraycopy(x, 0, z, 0, x.length);",0,0,0,1,2,0,0,0,0,3,39,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,93,"        System.arraycopy(y, 0, z, x.length, y.length);",2,2,0,1,2,0,0,0,0,4,46,6,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,95,        return z;,4,0,0,0,0,1,0,0,0,5,9,3,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,129,"        ensureDataConformance(x, y);",4,1,0,1,2,0,0,0,0,5,28,7,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,131,"        final double[] z = concatenateSamples(x, y);",0,0,0,2,4,0,0,0,0,6,44,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,132,        final double[] ranks = naturalRanking.rank(z);,6,1,0,2,4,1,0,0,0,8,46,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,134,        double sumRankX = 0;,4,3,0,0,0,0,4,0,0,11,20,3,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,140,        for (int i = 0; i < x.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,141,            sumRankX += ranks[i];,2,0,1,1,2,0,0,0,0,7,21,6,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,148,        final double U1 = sumRankX - (x.length * (x.length + 1)) / 2;,2,1,0,2,4,0,0,0,0,3,61,11,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,153,        final double U2 = x.length * y.length - U1;,0,0,0,0,0,0,0,0,0,0,43,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,155,"        return FastMath.max(U1, U2);",10,2,0,1,2,1,8,0,0,21,28,1,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,173,        final int n1n2prod = n1 * n2;,10,1,0,0,0,1,0,0,0,13,29,3,1.0,1,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,176,        final double EU = n1n2prod / 2.0;,10,5,0,0,0,1,6,0,0,23,33,3,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,177,        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;,0,0,0,1,2,0,0,0,0,3,52,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,179,        final double z = (Umin - EU) / FastMath.sqrt(VarU);,0,0,0,2,4,0,12,0,0,12,51,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,181,"        final NormalDistribution standardNormal = new NormalDistribution(0, 1);",6,0,0,1,2,0,6,0,0,13,71,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,183,        return 2 * standardNormal.cumulativeProbability(z);,18,7,0,1,2,4,6,0,0,35,51,1,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,224,"        final double Umax = mannWhitneyU(x, y);",2,0,0,1,2,1,6,0,0,9,39,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,229,        final double Umin = x.length * y.length - Umax;,14,2,0,0,0,1,0,0,0,18,47,0,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,231,"        return calculateAsymptoticPValue(Umin, x.length, y.length);",0,0,0,1,2,1,0,0,0,4,59,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,432,"        public IntDoublePair(double value, int position) {",6,0,0,1,3,1,0,0,0,7,50,3,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,433,            this.value = value;,4,0,0,0,0,0,0,0,0,5,19,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,434,            this.position = position;,0,0,0,0,0,0,0,0,0,0,25,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,435,        },0,1,1,0,1,0,2,0,0,8,1,6,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,445,"            return Double.compare(value, other.value);",0,0,0,1,2,1,0,0,0,4,42,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,453,            return value;,2,0,0,0,0,1,0,0,0,2,13,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,461,            return position;,2,0,0,0,0,1,0,0,0,2,16,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,419,    private static class IntDoublePair implements Comparable<IntDoublePair>  {,0,0,0,0,1,0,0,0,0,1,74,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,334,        switch (tiesStrategy) {,2,0,0,1,3,0,0,0,0,2,23,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,200,        switch (nanStrategy) {,4,0,0,1,3,0,0,0,0,4,22,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,193,        IntDoublePair[] ranks = new IntDoublePair[data.length];,0,0,0,2,4,0,0,0,0,6,55,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,194,        for (int i = 0; i < data.length; i++) {,14,0,0,1,3,3,0,0,0,18,39,1,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,195,"            ranks[i] = new IntDoublePair(data[i], i);",2,0,1,3,6,1,0,0,0,7,41,8,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,199,        List<Integer> nanPositions = null;,4,0,0,0,0,0,4,4,0,13,34,3,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,200,        switch (nanStrategy) {,0,0,0,1,3,0,0,0,0,4,22,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,211,                nanPositions = getNanPositions(ranks);,2,0,0,1,2,0,4,0,0,7,38,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,212,                break;,0,0,0,0,0,0,0,0,0,0,6,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,218,        Arrays.sort(ranks);,4,1,0,1,2,0,18,2,0,26,19,3,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,222,        double[] out = new double[ranks.length];,2,0,0,2,4,0,0,0,0,2,40,3,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,223,        int pos = 1;  // position in sorted array,0,0,0,0,0,0,0,0,0,0,41,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,224,        out[ranks[0].getPosition()] = pos;,4,3,0,3,6,0,0,0,0,7,34,6,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,225,        List<Integer> tiesTrace = new ArrayList<Integer>();,0,0,0,1,2,0,0,0,0,3,51,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,226,        tiesTrace.add(ranks[0].getPosition());,2,0,0,3,6,1,6,0,0,9,38,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,227,        for (int i = 1; i < ranks.length; i++) {,4,0,0,1,3,0,0,0,0,4,40,3,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,228,"            if (Double.compare(ranks[i].getValue(), ranks[i - 1].getValue()) > 0) {",2,2,1,6,13,0,8,0,0,18,71,6,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,230,                pos = i + 1;,0,0,0,0,0,0,0,0,0,0,12,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,231,"                if (tiesTrace.size() > 1) {  // if seq is nontrivial, resolve",0,0,0,2,5,0,0,0,0,7,61,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,234,                tiesTrace = new ArrayList<Integer>();,0,0,0,1,2,0,0,0,0,3,37,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,235,                tiesTrace.add(ranks[i].getPosition());,0,0,0,3,6,0,0,0,0,9,38,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,240,            out[ranks[i].getPosition()] = pos;,2,0,1,3,6,0,2,0,0,11,34,6,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,242,        if (tiesTrace.size() > 1) {  // handle tie sequence at end,0,0,0,2,5,0,0,0,0,7,58,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,245,        if (nanStrategy == NaNStrategy.FIXED) {,2,0,1,1,3,1,0,0,0,7,39,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,246,"            restoreNaNs(out, nanPositions);",0,0,0,1,2,0,6,0,0,6,31,7,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,248,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,387,        if (nanPositions.size() == 0) {,0,0,0,2,5,0,0,0,0,7,31,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,388,            return;,0,0,0,0,0,1,0,0,0,1,7,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,404,        ArrayList<Integer> out = new ArrayList<Integer>();,0,0,0,1,2,0,0,0,0,3,50,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,405,        for (int i = 0; i < ranks.length; i++) {,18,4,0,1,3,0,0,0,0,23,40,3,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,406,            if (Double.isNaN(ranks[i].getValue())) {,0,0,1,4,9,0,6,0,0,10,40,7,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,410,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,53,    protected AbstractRealDistribution() { },0,0,0,2,4,0,0,0,0,6,40,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,47,    protected final RandomDataImpl randomData = new RandomDataImpl();,0,0,0,1,2,0,0,0,0,3,65,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,50,    private double solverAbsoluteAccuracy = SOLVER_DEFAULT_ABSOLUTE_ACCURACY;,8,0,0,0,0,1,4,0,0,15,73,0,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,61,"        this(mean, sd, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);",0,0,0,1,2,0,0,0,0,3,50,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,62,    },2,0,0,0,1,0,0,0,0,3,1,5,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,75,        throws NotStrictlyPositiveException {,6,0,0,0,1,1,0,0,0,7,37,1,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,76,        if (sd <= 0) {,2,1,0,1,3,0,0,0,0,3,14,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,80,        this.mean = mean;,4,0,0,0,0,0,0,0,0,5,17,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,81,        standardDeviation = sd;,8,0,0,0,0,2,6,0,0,17,23,3,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,82,        solverAbsoluteAccuracy = inverseCumAccuracy;,0,0,0,0,0,0,0,0,0,0,44,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,83,    },2,0,0,0,1,0,2,0,0,5,1,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,42,    private static final double SQRT2PI = FastMath.sqrt(2 * FastMath.PI);,0,0,0,1,2,0,0,0,0,3,69,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,44,    private static final double SQRT2 = FastMath.sqrt(2.0);,2,2,0,1,2,0,0,0,0,4,55,6,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,137,        final double dev = x - mean;,0,0,0,0,0,0,0,0,0,0,28,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,138,        if (FastMath.abs(dev) > 40 * standardDeviation) {,0,0,0,2,5,0,0,0,0,7,49,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,141,        return 0.5 * (1 + Erf.erf(dev / (standardDeviation * SQRT2)));,16,5,0,3,6,1,4,0,0,27,62,0,1.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,168,    public RandomDataImpl() {,2,0,0,1,3,1,0,0,0,3,25,2,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,126,    private RandomGenerator rand = null;,8,1,0,0,0,1,0,2,0,13,36,1,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,129,    private SecureRandom secRand = null;,0,0,0,0,0,0,0,0,0,0,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,169,    },12,0,0,0,1,0,0,4,0,19,1,3,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,139,        final double LN2 = FastMath.log(2);,4,0,0,1,2,1,4,0,0,11,35,1,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,140,        double qi = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,141,        int i = 1;,0,0,0,0,0,0,0,0,0,0,10,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,149,        final ResizableDoubleArray ra = new ResizableDoubleArray(20);,2,0,0,1,2,1,0,4,0,7,61,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,151,        while (qi < 1) {,2,1,0,1,3,0,8,0,0,11,16,1,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,152,"            qi += FastMath.pow(LN2, i) / ArithmeticUtils.factorial(i);",0,0,0,2,4,0,0,0,0,6,58,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,153,            ra.addElement(qi);,12,4,0,1,2,1,6,0,0,23,18,1,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,154,            ++i;,2,0,0,0,0,0,0,0,0,3,4,6,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,157,        EXPONENTIAL_SA_QI = ra.getElements();,6,0,0,1,2,1,4,4,0,16,37,1,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,158,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3747,    private static class ExpFracTable {,2,0,0,0,1,2,4,0,0,8,35,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3773,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,4,0,0,1,2,0,4,0,0,10,56,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3774,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,14,4,1,1,2,3,4,0,0,36,56,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3776,        },4,2,0,0,1,0,10,0,0,16,1,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,29,    private static final double[] EXP_INT_A = new double[] {,2,2,0,2,5,0,12,0,0,17,56,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,1535,    private static final double[] EXP_INT_B = new double[] {,2,0,0,2,5,3,0,0,0,5,56,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,3043,    private static final double[] EXP_FRAC_A = new double[] {,0,0,0,2,5,0,0,0,0,7,57,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,4074,    private static final double[] EXP_FRAC_B = new double[] {,2,0,0,2,5,3,0,0,0,5,57,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,5103,    private static final double[][] LN_MANT = new double[][] {,0,0,0,4,9,0,0,0,0,13,58,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,6142,        return EXP_INT_A.clone();,0,0,0,1,2,1,4,0,0,4,25,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,6150,        return EXP_INT_B.clone();,0,0,0,1,2,1,4,0,0,4,25,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,6158,        return EXP_FRAC_A.clone();,0,0,0,1,2,1,4,0,0,4,26,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,6166,        return EXP_FRAC_B.clone();,0,0,0,1,2,1,4,0,0,4,26,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,6174,        return LN_MANT.clone();,0,0,0,1,2,1,4,0,0,4,23,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,113,    private static final double LN_QUICK_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,126,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,51,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,139,    private static final double SINE_TABLE_A[] =,10,2,0,1,2,4,0,0,0,16,44,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,158,    private static final double SINE_TABLE_B[] =,8,2,1,1,2,3,0,0,0,16,44,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,177,    private static final double COSINE_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,46,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,196,    private static final double COSINE_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,46,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,216,    private static final double TANGENT_TABLE_A[] =,10,1,0,1,2,3,0,0,0,16,47,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,235,    private static final double TANGENT_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,254,    private static final long RECIP_2PI[] = new long[] {,0,0,0,2,5,0,0,0,0,7,52,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,275,    private static final long PI_O_4_BITS[] = new long[] {,6,3,0,2,5,3,0,0,0,13,54,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,283,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",2,0,0,2,4,3,0,0,0,5,126,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,286,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0,0,0,1,3,0,0,0,0,4,61,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,826,        if (x < 0.0) {,2,0,0,1,3,1,0,0,0,3,14,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,827,            intVal = (int) -x;,14,2,0,1,2,2,4,2,0,26,18,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,829,            if (intVal > 746) {,2,1,0,1,3,0,0,0,0,3,19,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,837,            if (intVal > 709) {,0,0,0,1,3,0,0,0,0,4,19,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,847,            if (intVal == 709) {,4,1,0,1,3,0,0,0,0,5,20,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,857,            intVal++;,0,0,0,0,0,0,0,0,0,0,9,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,859,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,2,0,0,1,2,3,0,0,0,5,71,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,860,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,862,            intVal = -intVal;,0,0,0,0,0,0,0,0,0,0,17,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,882,        final int intFrac = (int) ((x - intVal) * 1024.0);,0,0,0,3,6,0,0,0,0,9,50,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,883,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,0,0,0,1,2,0,0,0,0,3,64,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,884,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0,0,0,1,2,0,2,0,0,2,64,9,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,890,        final double epsilon = x - (intVal + intFrac / 1024.0);,0,0,0,1,2,0,0,0,0,3,55,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,899,        double z = 0.04168701738764507;,2,0,0,0,0,0,0,0,0,2,31,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,900,        z = z * epsilon + 0.1666666505023083;,8,2,0,0,0,0,0,0,0,11,37,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,901,        z = z * epsilon + 0.5000000000042687;,6,2,0,0,0,0,0,0,0,9,37,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,902,        z = z * epsilon + 1.0;,6,2,0,0,0,0,0,0,0,9,22,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,903,        z = z * epsilon + -3.940510424527919E-20;,8,2,1,0,0,3,0,2,0,21,41,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,910,        double tempA = intPartA * fracPartA;,0,0,0,0,0,0,0,0,0,0,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,911,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,14,5,0,0,0,0,0,0,0,19,82,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,917,        final double tempC = tempB + tempA;,0,0,0,0,0,0,0,0,0,0,35,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,919,        if (extra != 0.0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,920,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,4,0,0,0,0,0,0,0,0,5,63,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,925,        if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,931,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1096,"        return log(x, null);",2,0,0,1,2,1,4,0,0,9,20,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1106,        if (x==0) { // Handle special case of +0/-0,2,1,0,1,3,0,0,0,0,3,43,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1109,        long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1112,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,0,0,0,2,5,0,0,0,0,7,50,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1123,        if (x == Double.POSITIVE_INFINITY) {,6,2,1,1,3,0,0,0,0,15,36,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1132,        int exp = (int)(bits >> 52)-1023;,4,2,0,2,4,0,0,0,0,6,33,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1134,        if ((bits & 0x7ff0000000000000L) == 0) {,14,6,0,2,5,0,10,0,0,30,40,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1154,        if (exp == -1 || exp == 0) {,0,0,0,1,3,0,0,0,0,4,28,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1155,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,0,0,0,1,3,0,0,0,0,4,45,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1202,        double lnm[] = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,2,0,0,5,10,0,0,0,0,3,73,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1213,        double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,0,0,0,3,6,0,0,0,0,9,89,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1215,        double lnza = 0.0;,0,0,0,0,0,0,0,0,0,0,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1216,        double lnzb = 0.0;,2,0,0,0,0,0,0,0,0,2,18,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1218,        if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1220,            double tmp = epsilon * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,36,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1221,            double aa = epsilon + tmp - tmp;,8,2,0,0,0,0,0,0,0,10,32,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1222,            double ab = epsilon - aa;,6,1,0,0,0,0,0,0,0,7,25,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1223,            double xa = aa;,4,0,0,0,0,0,0,0,0,4,15,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1224,            double xb = ab;,0,0,0,0,0,0,8,0,0,8,15,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1227,            double numer = bits & 0x3ffffffffffL;,0,0,0,0,0,0,0,0,0,0,37,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1228,            double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,12,3,0,1,2,0,4,0,0,20,59,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1229,            aa = numer - xa*denom - xb * denom;,14,4,0,0,0,0,0,0,0,20,35,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1230,            xb += aa / denom;,0,0,0,0,0,0,0,0,0,0,17,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1233,            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];,0,0,0,2,4,0,0,0,0,6,57,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1234,            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];,6,1,1,2,4,0,0,0,0,9,57,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1236,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,55,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1238,                aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1239,                ab = ya * xb + yb * xa + yb * xb;,0,0,0,0,0,0,0,0,0,0,33,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1241,                tmp = aa * HEX_40000000;,8,1,0,0,0,0,0,0,0,10,24,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1242,                ya = aa + tmp - tmp;,2,0,0,0,0,0,0,0,0,3,20,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1243,                yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1246,                aa = ya + LN_HI_PREC_COEF[i][0];,4,1,1,2,4,0,0,0,0,10,32,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1247,                ab = yb + LN_HI_PREC_COEF[i][1];,4,1,1,2,4,0,0,0,0,10,32,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1249,                tmp = aa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1250,                ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1251,                yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1255,            aa = ya * xa;,6,1,0,0,0,0,0,0,0,8,13,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1256,            ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1264,            lnza = aa + ab;,0,0,0,0,0,0,0,0,0,0,15,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1265,            lnzb = -(lnza - aa - ab);,8,1,0,1,2,0,0,0,0,11,25,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1266,        } else {,2,0,0,0,2,0,0,0,0,4,8,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1269,            lnza = -0.16624882440418567;,0,0,0,0,0,0,0,0,0,0,28,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1270,            lnza = lnza * epsilon + 0.19999954120254515;,10,1,0,0,0,0,0,0,0,12,44,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1271,            lnza = lnza * epsilon + -0.2499999997677497;,0,0,0,0,0,0,0,0,0,0,44,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1272,            lnza = lnza * epsilon + 0.3333333333332802;,6,2,0,0,0,0,0,0,0,9,43,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1273,            lnza = lnza * epsilon + -0.5;,6,2,0,0,0,0,0,0,0,10,29,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1274,            lnza = lnza * epsilon + 1.0;,0,0,0,0,0,0,0,0,0,0,28,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1275,            lnza = lnza * epsilon;,6,1,1,0,0,0,0,0,0,14,22,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1292,        double a = LN_2_A*exp;,0,0,0,0,0,0,0,0,0,0,22,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1293,        double b = 0.0;,2,0,0,0,0,0,0,0,0,2,15,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1294,        double c = a+lnm[0];,0,0,0,1,2,0,0,0,0,3,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1295,        double d = -(c-a-lnm[0]);,6,1,1,2,4,0,0,0,0,10,25,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1296,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1297,        b = b + d;,8,1,0,0,0,0,0,0,0,11,10,0,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1299,        c = a + lnza;,6,1,0,0,0,0,0,0,0,8,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1300,        d = -(c - a - lnza);,8,1,0,1,2,0,0,0,0,11,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1301,        a = c;,10,2,0,0,0,0,0,0,0,12,6,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1302,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1304,        c = a + LN_2_B*exp;,0,0,0,0,0,0,0,0,0,0,19,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1305,        d = -(c - a - LN_2_B*exp);,10,2,0,1,2,0,0,0,0,14,26,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1306,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1307,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1309,        c = a + lnm[1];,4,1,1,1,2,0,2,0,0,10,15,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1310,        d = -(c - a - lnm[1]);,0,0,0,2,4,0,0,0,0,6,22,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1311,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1312,        b = b + d;,14,1,0,0,0,0,0,0,0,16,10,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1314,        c = a + lnzb;,6,1,0,0,0,0,0,0,0,8,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1315,        d = -(c - a - lnzb);,8,1,0,1,2,0,0,0,0,11,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1316,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1317,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1319,        if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1320,            hiPrec[0] = a;,16,6,1,1,2,0,0,0,0,30,14,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1321,            hiPrec[1] = b;,0,0,0,1,2,0,0,0,0,3,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1324,        return a + b;,0,0,0,0,0,1,0,0,0,1,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1420,        final double lns[] = new double[2];,8,3,0,2,4,2,8,4,0,26,35,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1422,        if (y == 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1426,        if (x != x) { // X is NaN,4,1,0,1,3,0,0,0,0,5,25,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1431,        if (x == 0) {,0,0,0,1,3,0,12,0,0,12,13,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1456,        if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1467,        if (y == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1479,        if (x == Double.NEGATIVE_INFINITY) {,12,1,0,1,3,1,0,0,0,14,36,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1503,        if (y == Double.NEGATIVE_INFINITY) {,0,0,0,1,3,0,6,0,0,7,36,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1517,        if (x < 0) {,0,0,1,1,3,0,0,0,0,6,12,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1534,        if (y < 8e298 && y > -8e298) {,0,0,0,1,3,0,0,0,0,4,30,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1535,            double tmp1 = y * HEX_40000000;,8,2,0,0,0,0,0,0,0,10,31,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1536,            ya = y + tmp1 - tmp1;,0,0,0,0,0,0,0,0,0,0,21,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1537,            yb = y - ya;,0,0,0,0,0,0,0,0,0,0,12,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1538,        } else {,8,2,0,0,2,0,0,0,0,11,8,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1546,"        final double lores = log(x, lns);",2,0,0,1,2,1,6,0,0,9,33,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1547,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0,0,0,2,5,0,6,0,0,6,73,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1551,        double lna = lns[0];,2,0,1,1,2,0,0,0,0,4,20,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1552,        double lnb = lns[1];,0,0,0,1,2,0,0,0,0,3,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1555,        double tmp1 = lna * HEX_40000000;,10,1,0,0,0,0,0,0,0,12,33,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1556,        double tmp2 = lna + tmp1 - tmp1;,10,2,0,0,0,1,0,0,0,13,32,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1557,        lnb += lna - tmp2;,6,1,0,0,0,0,0,0,0,8,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1558,        lna = tmp2;,4,0,0,0,0,0,0,0,0,5,11,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1561,        final double aa = lna * ya;,6,1,0,0,0,1,0,0,0,8,27,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1562,        final double ab = lna * yb + lnb * ya + lnb * yb;,14,5,0,0,0,1,0,0,0,20,49,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1564,        lna = aa+ab;,6,1,0,0,0,0,0,0,0,8,12,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1565,        lnb = -(lna - aa - ab);,0,0,0,1,2,0,0,0,0,3,23,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1567,        double z = 1.0 / 120.0;,4,1,0,0,0,0,4,2,0,11,23,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1568,        z = z * lnb + (1.0 / 24.0);,6,3,0,1,2,0,0,0,0,10,27,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1569,        z = z * lnb + (1.0 / 6.0);,0,0,0,1,2,0,0,0,0,3,26,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1570,        z = z * lnb + 0.5;,0,0,0,0,0,0,0,0,0,0,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1571,        z = z * lnb + 1.0;,6,2,0,0,0,0,0,0,0,9,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1572,        z = z * lnb;,0,0,0,0,0,0,0,0,0,0,12,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1574,"        final double result = exp(lna, z, null);",6,1,1,1,2,1,6,0,0,18,40,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1576,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3334,        if (x != x) { // NaN,4,1,0,1,3,0,0,0,0,5,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3338,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,8,3,0,1,3,0,0,0,0,12,46,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3342,        y = (long) x;,0,0,0,1,2,0,0,0,0,3,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3343,        if (x < 0 && y != x) {,6,3,0,1,3,0,0,0,0,9,22,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3347,        if (y == 0) {,2,0,0,1,3,0,0,0,0,3,13,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3351,        return y;,2,0,1,0,0,1,0,0,0,7,9,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3361,        if (x != x) { // NaN,4,1,0,1,3,0,0,0,0,5,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3365,        y = floor(x);,2,0,0,1,2,0,4,0,0,7,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3366,        if (y == x) {,6,1,1,1,3,0,0,0,0,10,13,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3367,            return y;,4,0,0,0,0,1,0,0,0,4,9,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3780,    private static class lnMant {,2,0,0,0,1,2,0,0,0,4,29,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3794,                LN_MANT = FastMathLiteralArrays.loadLnMant();,0,0,0,1,2,0,0,0,0,3,45,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3796,        },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,93,    private float contractionCriteria = 2.5f;,8,0,1,0,0,2,0,2,0,16,41,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,103,    private float expansionFactor = 2.0f;,4,0,0,0,0,1,0,0,0,6,37,0,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,109,    private int expansionMode = MULTIPLICATIVE_MODE;,4,0,0,0,0,1,0,0,0,5,48,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,115,    private int initialCapacity = 16;,0,0,0,0,0,0,0,0,0,0,33,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,126,    private int numElements = 0;,2,0,0,0,0,1,0,0,0,3,28,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,134,    private int startIndex = 0;,2,0,0,0,0,1,0,0,0,3,27,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,160,    public ResizableDoubleArray(int initialCapacity) {,4,0,0,1,3,1,0,0,0,5,50,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,161,        setInitialCapacity(initialCapacity);,0,0,0,1,2,0,4,0,0,4,36,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,162,        internalArray = new double[this.initialCapacity];,4,0,0,1,2,0,0,0,0,5,49,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,163,    },2,0,0,0,1,0,0,0,0,3,1,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,301,        numElements++;,2,0,0,0,0,0,0,0,0,3,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,302,        if ((startIndex + numElements) > internalArray.length) {,8,2,0,2,5,0,0,0,0,10,56,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,303,            expand();,0,0,0,1,2,0,8,0,0,8,9,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,305,        internalArray[startIndex + (numElements - 1)] = value;,2,0,0,2,4,0,0,2,0,5,54,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,306,        if (shouldContract()) {,0,0,0,2,5,0,2,0,0,2,23,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,307,            contract();,0,0,0,1,2,0,2,0,0,2,11,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,309,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,432,        double[] tempArray = new double[numElements + 1];,4,1,0,2,4,0,0,0,0,5,49,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,435,"        System.arraycopy(internalArray, startIndex, tempArray, 0, numElements);",0,0,0,1,2,0,12,0,0,12,71,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,436,        internalArray = tempArray;,4,0,0,0,0,0,0,0,0,5,26,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,439,        startIndex = 0;,2,0,0,0,0,0,0,0,0,3,15,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,440,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,532,        int newSize = 0;,2,0,0,0,0,0,0,0,0,2,16,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,533,        if (expansionMode == MULTIPLICATIVE_MODE) {,4,1,0,1,3,0,8,0,0,13,43,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,534,            newSize = (int) FastMath.ceil(internalArray.length * expansionFactor);,10,1,1,2,4,1,4,0,0,21,70,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,538,        double[] tempArray = new double[newSize];,2,0,1,2,4,0,0,0,0,4,41,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,541,"        System.arraycopy(internalArray, 0, tempArray, 0, internalArray.length);",4,0,0,1,2,0,8,0,0,12,71,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,542,        internalArray = tempArray;,8,1,0,0,0,1,0,0,0,11,26,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,543,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,599,        double[] elementArray = new double[numElements];,16,3,1,2,4,0,2,0,0,25,48,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,600,"        System.arraycopy( internalArray, startIndex, elementArray, 0,",8,1,0,0,1,1,10,0,0,20,61,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,602,        return elementArray;,2,0,0,0,0,1,0,0,0,2,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,755,        if (initialCapacity > 0) {,4,1,0,1,3,0,0,2,0,7,26,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,756,            synchronized(this) {,0,0,0,1,3,0,0,0,0,4,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,757,                this.initialCapacity = initialCapacity;,0,0,0,0,0,0,0,0,0,0,39,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,758,            },2,0,0,0,1,1,4,2,0,9,1,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,764,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,800,        if (expansionMode == MULTIPLICATIVE_MODE) {,4,1,0,1,3,0,0,0,0,5,43,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,801,            return (internalArray.length / ((float) numElements)) > contractionCriteria;,8,2,0,3,6,1,0,0,0,10,76,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3708,    private static class ExpIntTable {,2,0,0,0,1,2,0,0,0,4,34,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3740,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,0,0,0,1,2,0,0,0,0,3,54,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3741,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,8,0,0,1,2,0,4,0,0,13,54,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3743,        },4,0,0,0,1,0,0,0,0,5,1,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,35,    static final long[] FACTORIALS = new long[] {,2,0,0,2,5,2,0,0,0,5,45,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,299,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,303,        if (n > 20) {,0,0,0,1,3,0,0,0,0,4,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,306,        return FACTORIALS[n];,0,0,1,1,2,1,0,0,0,4,21,5,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,44,    public MannWhitneyUTest() {,0,0,0,1,3,0,0,0,0,4,27,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,45,"        naturalRanking = new NaturalRanking(NaNStrategy.FIXED,",6,0,0,0,1,0,0,2,0,9,54,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,74,        if (x == null ||,2,2,0,0,1,0,0,0,0,4,16,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,78,        if (x.length == 0 ||,4,2,0,0,1,0,0,0,0,6,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,222,"        ensureDataConformance(x, y);",0,0,0,1,2,0,6,0,0,6,28,5,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaNStrategy,30,36,public enum NaNStrategy {,0,0,0,0,1,0,0,0,0,1,25,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaNStrategy,30,39,"    MINIMAL,",0,0,0,0,0,0,0,0,0,0,8,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaNStrategy,30,42,"    MAXIMAL,",2,0,0,0,0,0,0,0,0,2,8,2,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaNStrategy,30,45,"    REMOVED,",2,0,0,0,0,0,0,0,0,2,8,2,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaNStrategy,30,48,    FIXED,2,0,0,0,0,0,0,0,0,2,5,2,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/TiesStrategy,30,39,public enum TiesStrategy {,0,0,0,0,1,0,0,0,0,1,26,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/TiesStrategy,30,42,"    SEQUENTIAL,",2,0,0,0,0,0,0,0,0,2,11,2,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/TiesStrategy,30,45,"    MINIMUM,",6,0,0,0,0,0,0,0,0,6,8,5,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/TiesStrategy,30,48,"    MAXIMUM,",2,0,0,0,0,0,0,0,0,2,8,2,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/TiesStrategy,30,51,"    AVERAGE,",2,0,0,0,0,0,0,0,0,2,8,2,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/TiesStrategy,30,54,    RANDOM,12,1,0,0,0,0,0,0,0,14,6,0,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,129,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,130,        this.nanStrategy = nanStrategy;,4,0,0,0,0,0,0,0,0,5,31,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,131,        this.tiesStrategy = tiesStrategy;,4,0,0,0,0,0,0,0,0,5,33,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,132,        randomData = new RandomDataImpl();,2,0,0,1,2,0,0,2,0,5,34,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,133,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,74,    public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.MAXIMAL;,6,0,0,0,0,3,0,2,0,11,75,2,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,77,    public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;,8,0,0,0,0,3,0,2,0,13,78,1,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,180,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,181,        this.rand = rand;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,182,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,201,        if (len <= 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,202,"            throw new NotStrictlyPositiveException(LocalizedFormats.LENGTH, len);",12,1,0,1,2,1,0,2,0,16,69,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,206,        RandomGenerator ran = getRan();,2,0,0,1,2,0,2,2,0,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,209,        StringBuilder outBuffer = new StringBuilder();,2,0,0,1,2,0,0,4,0,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,212,        byte[] randomBytes = new byte[(len / 2) + 1];,0,0,0,3,6,0,0,0,0,9,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,213,        ran.nextBytes(randomBytes);,0,0,0,1,2,0,6,0,0,6,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,216,        for (int i = 0; i < randomBytes.length; i++) {,0,0,0,1,3,0,0,0,0,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,217,            Integer c = Integer.valueOf(randomBytes[i]);,8,1,1,2,4,0,4,2,0,19,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,224,            String hex = Integer.toHexString(c.intValue() + 128);,2,1,0,2,4,0,8,2,0,13,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,227,            if (hex.length() == 1) {,0,1,0,2,5,0,4,0,0,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,228,"                hex = ""0"" + hex;",4,1,0,0,0,0,0,0,0,7,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,230,            outBuffer.append(hex);,0,0,0,1,2,0,6,0,0,6,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,232,"        return outBuffer.toString().substring(0, len);",0,0,0,2,4,1,8,0,0,8,46,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,237,        if (lower >= upper) {,4,1,0,1,3,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,238,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",4,0,0,0,1,0,0,2,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,241,        double r = getRan().nextDouble();,0,0,0,2,4,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,242,        double scaled = r * upper + (1.0 - r) * lower + r;,0,0,0,1,2,0,0,0,0,3,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,243,        return (int) FastMath.floor(scaled);,0,0,0,2,4,1,6,0,0,6,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,248,        if (lower >= upper) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,249,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",0,0,0,0,1,0,4,0,0,4,87,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,252,        double r = getRan().nextDouble();,8,1,0,2,4,0,4,0,0,14,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,253,        double scaled = r * upper + (1.0 - r) * lower + r;,0,0,0,1,2,0,0,0,0,3,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,254,        return (long)FastMath.floor(scaled);,6,0,1,2,4,2,10,0,0,22,36,1,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,274,        if (len <= 0) {,4,1,0,1,3,0,0,0,0,5,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,275,"            throw new NotStrictlyPositiveException(LocalizedFormats.LENGTH, len);",6,0,0,1,2,0,0,2,0,8,69,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,279,        SecureRandom secRan = getSecRan();,0,0,1,1,2,0,0,0,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,280,        MessageDigest alg = null;,4,1,0,0,0,0,0,2,0,7,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,282,"            alg = MessageDigest.getInstance(""SHA-1"");",2,0,0,1,2,0,4,0,0,8,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,286,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,283,        } catch (NoSuchAlgorithmException ex) {,12,2,0,1,4,0,0,2,0,18,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,285,            throw new MathInternalError(ex);,2,0,0,1,2,0,0,2,0,4,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,287,        alg.reset();,0,0,0,1,2,0,4,0,0,4,12,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,290,        int numIter = (len / 40) + 1;,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,292,        StringBuilder outBuffer = new StringBuilder();,2,0,0,1,2,0,0,4,0,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,293,        for (int iter = 1; iter < numIter + 1; iter++) {,0,0,0,1,3,0,0,0,0,4,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,294,            byte[] randomBytes = new byte[40];,10,2,0,2,4,1,0,0,0,13,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,295,            secRan.nextBytes(randomBytes);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,296,            alg.update(randomBytes);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,299,            byte[] hash = alg.digest();,2,0,0,2,4,0,4,0,0,6,27,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,302,            for (int i = 0; i < hash.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,303,                Integer c = Integer.valueOf(hash[i]);,10,2,1,2,4,1,4,2,0,23,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,310,                String hex = Integer.toHexString(c.intValue() + 128);,2,1,0,2,4,0,8,2,0,13,53,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,313,                if (hex.length() == 1) {,0,1,0,2,5,0,4,0,0,5,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,314,"                    hex = ""0"" + hex;",8,4,0,0,0,0,0,0,0,14,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,316,                outBuffer.append(hex);,0,0,0,1,2,0,6,0,0,6,22,9,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,319,"        return outBuffer.toString().substring(0, len);",0,0,0,2,4,1,0,0,0,7,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,324,        if (lower >= upper) {,4,1,0,1,3,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,325,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",4,0,0,0,1,0,0,2,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,328,        SecureRandom sec = getSecRan();,2,0,0,1,2,0,2,2,0,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,329,        double r = sec.nextDouble();,6,0,0,1,2,1,20,4,0,32,28,1,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,330,        double scaled = r * upper + (1.0 - r) * lower + r;,16,9,0,1,2,0,0,0,0,25,50,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,331,        return (int)FastMath.floor(scaled);,0,0,0,2,4,1,6,0,0,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,337,        if (lower >= upper) {,4,1,0,1,3,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,338,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",0,0,0,0,1,0,0,0,0,1,87,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,341,        SecureRandom sec = getSecRan();,2,0,0,1,2,0,2,2,0,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,342,        double r = sec.nextDouble();,2,0,0,1,2,0,4,0,0,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,343,        double scaled = r * upper + (1.0 - r) * lower + r;,12,5,0,1,2,0,0,0,0,17,50,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,344,        return (long)FastMath.floor(scaled);,2,0,0,2,4,1,6,0,0,9,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,361,        if (mean <= 0) {,2,1,1,1,3,0,0,0,0,9,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,362,"            throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, mean);",8,1,0,1,2,0,0,2,0,11,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,365,        final double pivot = 40.0d;,2,0,0,0,0,1,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,366,        if (mean < pivot) {,4,1,0,1,3,0,4,0,0,9,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,367,            final RandomGenerator generator = getRan();,2,0,0,1,2,1,2,2,0,7,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,368,            double p = FastMath.exp(-mean);,4,0,0,1,2,0,4,0,0,9,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,369,            long n = 0;,2,0,0,0,0,0,0,0,0,2,11,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,370,            double r = 1.0d;,2,0,0,0,0,0,0,0,0,2,16,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,371,            double rnd = 1.0d;,2,0,0,0,0,0,0,0,0,3,18,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,373,            while (n < 1000 * mean) {,10,1,0,1,3,0,0,0,0,12,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,374,                rnd = generator.nextDouble();,2,0,0,1,2,0,4,0,0,7,29,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,375,                r = r * rnd;,6,1,0,0,0,0,0,0,0,8,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,376,                if (r >= p) {,12,3,0,1,3,0,0,0,0,16,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,377,                    n++;,4,2,1,0,0,0,0,0,0,12,4,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,379,                    return n;,2,0,0,0,0,1,0,0,0,2,9,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,382,            return n;,6,0,0,0,0,1,0,0,0,7,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,384,            final double lambda = FastMath.floor(mean);,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,385,            final double lambdaFractional = mean - lambda;,12,2,0,0,0,1,0,0,0,16,46,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,386,            final double logLambda = FastMath.log(lambda);,2,0,0,1,2,1,6,0,0,9,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,387,            final double logLambdaFactorial = ArithmeticUtils.factorialLog((int) lambda);,0,0,0,2,4,0,0,0,0,6,77,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,388,            final long y2 = lambdaFractional < Double.MIN_VALUE ? 0 : nextPoisson(lambdaFractional);,8,1,0,1,2,1,8,0,0,19,88,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,389,            final double delta = FastMath.sqrt(lambda * FastMath.log(32 * lambda / FastMath.PI + 1));,10,4,0,2,4,1,8,0,0,23,89,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,390,            final double halfDelta = delta / 2;,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,391,            final double twolpd = 2 * lambda + delta;,6,2,0,0,0,1,0,0,0,9,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,392,            final double a1 = FastMath.sqrt(FastMath.PI * twolpd) * FastMath.exp(1 / 8 * lambda);,12,4,0,2,4,2,8,0,0,26,85,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,393,            final double a2 = (twolpd / delta) * FastMath.exp(-delta * (1 + delta) / twolpd);,14,5,0,3,6,1,4,0,0,25,81,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,394,            final double aSum = a1 + a2 + 1;,6,1,0,0,0,1,0,0,0,8,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,395,            final double p1 = a1 / aSum;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,396,            final double p2 = a2 / aSum;,6,1,0,0,0,1,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,397,            final double c1 = 1 / (8 * lambda);,4,2,0,1,2,1,0,0,0,7,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,399,            double x = 0;,2,0,0,0,0,0,0,0,0,2,13,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,400,            double y = 0;,6,1,0,0,0,0,0,0,0,7,13,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,401,            double v = 0;,0,1,0,0,0,0,18,0,0,19,13,12,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,402,            int a = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,403,            double t = 0;,2,0,0,0,0,0,0,0,0,2,13,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,404,            double qr = 0;,2,0,0,0,0,0,0,0,0,2,14,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,405,            double qa = 0;,2,0,0,0,0,0,0,0,0,2,14,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,407,"                final double u = nextUniform(0.0, 1);",2,0,0,1,2,1,2,0,0,5,37,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,408,                if (u <= p1) {,4,1,0,1,3,0,0,0,0,5,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,409,"                    final double n = nextGaussian(0d, 1d);",2,0,0,1,2,0,0,0,0,2,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,410,                    x = n * FastMath.sqrt(lambda + halfDelta) - 0.5d;,0,0,0,1,2,0,0,0,0,3,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,411,                    if (x > delta || x < -lambda) {,12,3,0,1,3,0,0,0,0,17,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,412,                        continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,414,                    y = x < 0 ? FastMath.floor(x) : FastMath.ceil(x);,4,1,0,2,4,0,12,0,0,18,49,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,415,                    final double e = nextExponential(1d);,2,0,0,1,2,1,2,0,0,5,37,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,416,                    v = -e - (n * n / 2) + c1;,10,4,0,1,2,0,0,0,0,16,26,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,417,                } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,418,                    if (u > p1 + p2) {,6,2,0,1,3,0,0,0,0,8,18,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,419,                        y = lambda;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,420,                        break;,2,0,0,0,0,0,0,0,0,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,422,                        x = delta + (twolpd / delta) * nextExponential(1d);,8,3,0,2,4,0,2,0,0,14,51,12,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,423,                        y = FastMath.ceil(x);,0,0,0,1,2,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,424,                        v = -nextExponential(1d) - delta * (x + 1) / twolpd;,8,4,0,2,4,0,2,0,0,16,52,12,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,427,                a = x < 0 ? 1 : 0;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,428,                t = y * (y + 1) / (2 * lambda);,0,0,0,2,4,0,0,0,0,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,429,                if (v < -t && a == 0) {,8,4,1,1,3,0,0,0,0,17,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,430,                    y = lambda + y;,6,1,0,0,0,0,0,0,0,8,15,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,431,                    break;,2,1,1,0,0,0,0,0,0,9,6,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,433,                qr = t * ((2 * y + 1) / (6 * lambda) - 1);,8,6,0,3,6,0,0,0,0,15,42,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,434,                qa = qr - (t * t) / (3 * (lambda + a * (y + 1)));,2,0,0,4,8,0,0,0,0,2,49,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,435,                if (v < qa) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,436,                    y = lambda + y;,6,1,0,0,0,0,0,0,0,8,15,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,437,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,439,                if (v > qr) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,440,                    continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,442,                if (v < y * logLambda - ArithmeticUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial) {,12,5,0,4,9,0,4,0,0,21,96,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,443,                    y = lambda + y;,6,1,0,0,0,0,0,0,0,8,15,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,444,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,446,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,447,            return y2 + (long) y;,4,1,0,1,2,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,454,        if (sigma <= 0) {,4,1,0,1,3,0,0,0,0,5,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,455,"            throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sigma);",0,0,0,1,2,0,0,0,0,3,83,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,457,        return sigma * getRan().nextGaussian() + mu;,4,2,0,2,4,1,4,0,0,10,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,473,        if (mean <= 0.0) {,4,1,0,1,3,0,0,0,0,6,18,0,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,474,"            throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, mean);",6,0,0,1,2,0,0,2,0,8,68,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,478,        double a = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,479,"        double u = this.nextUniform(0, 1);",0,2,0,1,2,0,4,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,482,        while (u < 0.5) {,2,1,0,1,3,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,483,            a += EXPONENTIAL_SA_QI[0];,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,484,            u *= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,488,        u += u - 1;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,491,        if (u <= EXPONENTIAL_SA_QI[0]) {,6,2,1,2,5,0,4,0,0,15,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,492,            return mean * (a + u);,12,3,0,1,2,1,0,0,0,16,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,496,"        int i = 0; // Should be 1, be we iterate before it in while using 0",2,0,0,0,0,0,0,0,0,2,67,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,497,"        double u2 = this.nextUniform(0, 1);",2,0,0,1,2,0,2,0,0,4,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,498,        double umin = u2;,8,0,0,0,0,0,0,0,0,9,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,502,            ++i;,4,0,0,0,0,0,0,0,0,5,4,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,503,"            u2 = this.nextUniform(0, 1);",2,0,0,1,2,0,2,0,0,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,505,            if (u2 < umin) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,506,                umin = u2;,4,0,0,0,0,0,0,0,0,5,10,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,510,        } while (u > EXPONENTIAL_SA_QI[i]); // Ensured to exit since EXPONENTIAL_SA_QI[MAX] = 1,2,1,1,3,7,0,0,0,0,7,87,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,512,        return mean * (a + umin * EXPONENTIAL_SA_QI[0]);,0,0,0,2,4,1,0,0,0,7,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,530,"        return nextUniform(lower, upper, false);",8,1,1,1,2,1,10,0,0,26,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,551,        if (lower >= upper) {,6,1,0,1,3,0,4,0,0,11,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,552,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",4,0,0,0,1,0,0,2,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,556,        if (Double.isInfinite(lower) || Double.isInfinite(upper)) {,8,6,1,3,7,0,12,0,0,34,59,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,557,            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_BOUND);,4,0,0,1,2,0,0,2,0,6,72,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,560,        if (Double.isNaN(lower) || Double.isNaN(upper)) {,0,1,0,3,7,0,12,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,561,            throw new MathIllegalArgumentException(LocalizedFormats.NAN_NOT_ALLOWED);,4,0,0,1,2,0,0,2,0,6,73,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,564,        final RandomGenerator generator = getRan();,2,0,0,1,2,1,2,2,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,567,        double u = generator.nextDouble();,2,0,0,1,2,0,4,0,0,6,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,568,        while (!lowerInclusive && u <= 0.0) {,0,0,0,1,3,0,0,0,0,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,569,            u = generator.nextDouble();,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,572,        return u * upper + (1.0 - u) * lower;,8,4,0,1,2,1,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,586,"        return nextInversionDeviate(new BetaDistribution(alpha, beta));",4,0,0,2,4,1,2,2,0,8,63,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,600,"        return nextInversionDeviate(new BinomialDistribution(numberOfTrials, probabilityOfSuccess));",0,0,0,2,4,1,0,0,0,7,92,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,614,"        return nextInversionDeviate(new CauchyDistribution(median, scale));",4,0,0,2,4,1,2,2,0,8,67,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,627,        return nextInversionDeviate(new ChiSquaredDistribution(df));,2,0,0,2,4,1,2,2,0,6,60,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,641,"        return nextInversionDeviate(new FDistribution(numeratorDf, denominatorDf));",4,0,0,2,4,1,2,2,0,8,75,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,666,        if (shape < 1) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,671,"                final double u = this.nextUniform(0, 1);",4,0,0,1,2,0,6,0,0,10,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,672,                final double bGS = 1 + shape/FastMath.E;,0,0,0,0,0,0,0,0,0,0,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,673,                final double p = bGS*u;,6,1,0,0,0,1,0,0,0,8,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,675,                if (p <= 1) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,678,"                    final double x = FastMath.pow(p, 1/shape);",4,1,0,1,2,1,6,0,0,12,42,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,679,"                    final double u2 = this.nextUniform(0.0, 1);",2,0,0,1,2,1,2,0,0,5,43,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,681,                    if (u2 > FastMath.exp(-x)) {,2,1,0,2,5,0,0,0,0,3,28,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,683,                        continue;,2,0,1,0,0,0,2,0,0,9,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,685,                        return scale*x;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,690,                    final double x = -1 * FastMath.log((bGS-p)/shape);,8,3,0,2,4,1,4,0,0,17,50,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,691,"                    final double u2 = this.nextUniform(0, 1);",2,0,0,1,2,1,2,0,0,5,41,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,693,"                    if (u2 > FastMath.pow(x, shape - 1)) {",4,2,0,2,5,0,6,0,0,12,38,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,695,                        continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,697,                        return scale*x;,10,2,0,0,0,1,0,0,0,12,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,705,        final RandomGenerator generator = this.getRan();,2,0,0,1,2,1,2,2,0,7,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,706,        final double d = shape - 0.333333333333333333;,4,1,0,0,0,1,0,0,0,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,707,        final double c = 1.0 / (3*FastMath.sqrt(d));,8,6,0,2,4,1,10,0,0,26,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,710,            final double x = generator.nextGaussian();,2,0,0,1,2,1,4,0,0,7,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,711,            final double v = (1+c*x)*(1+c*x)*(1+c*x);,14,7,0,3,6,1,0,0,0,22,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,713,            if (v <= 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,714,                continue;,8,2,0,0,0,0,0,0,0,12,9,0,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,717,            final double xx = x*x;,6,1,0,0,0,1,0,0,0,8,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,718,"            final double u = this.nextUniform(0, 1);",0,0,0,1,2,0,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,721,            if (u < 1 - 0.0331*xx*xx) {,6,3,0,1,3,0,0,0,0,9,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,722,                return scale*d*v;,22,5,0,0,0,1,0,0,0,27,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,725,            if (FastMath.log(u) < 0.5*xx + d*(1 - v + FastMath.log(v))) {,28,9,0,4,9,0,16,0,0,55,61,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,726,                return scale*d*v;,6,1,0,0,0,1,0,0,0,7,17,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,728,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,743,"        return nextInversionDeviate(new HypergeometricDistribution(populationSize, numberOfSuccesses, sampleSize));",6,0,0,2,4,1,2,2,0,10,107,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,757,"        return nextInversionDeviate(new PascalDistribution(r, p));",0,0,0,2,4,1,0,0,0,7,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,770,        return nextInversionDeviate(new TDistribution(df));,2,0,0,2,4,1,2,2,0,6,51,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,784,"        return nextInversionDeviate(new WeibullDistribution(shape, scale));",4,0,0,2,4,1,2,2,0,8,67,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,798,"        return nextInversionDeviate(new ZipfDistribution(numberOfElements, exponent));",4,0,0,2,4,1,2,2,0,8,78,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,812,        if (rand == null) {,12,4,0,1,3,0,0,0,0,17,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,813,            initRan();,0,0,0,1,2,0,0,0,0,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,815,        return rand;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,823,        rand = new Well19937c(System.currentTimeMillis() + System.identityHashCode(this));,2,1,0,3,6,0,8,2,0,14,82,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,824,    },6,0,0,0,1,0,0,2,0,8,1,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,836,        if (secRand == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,837,            secRand = new SecureRandom();,2,0,0,1,2,0,0,2,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,838,            secRand.setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0,1,0,3,6,0,12,0,0,13,76,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,840,        return secRand;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,853,        if (rand == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,854,            initRan();,0,0,0,1,2,0,2,0,0,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,856,        rand.setSeed(seed);,0,0,0,1,2,0,8,0,0,9,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,857,    },2,0,0,0,1,0,0,0,0,3,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,867,        if (secRand == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,868,            secRand = new SecureRandom();,2,0,0,1,2,0,0,2,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,870,        secRand.setSeed(System.currentTimeMillis());,0,0,0,2,4,0,8,0,0,8,44,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,871,    },2,2,0,0,1,0,0,0,0,4,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,883,        if (secRand == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,884,            secRand = new SecureRandom();,2,0,0,1,2,0,0,2,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,886,        secRand.setSeed(seed);,0,0,0,1,2,0,6,0,0,6,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,887,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,894,        if (rand == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,895,            initRan();,0,0,0,1,2,0,0,0,0,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,897,        rand.setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0,1,0,3,6,0,12,0,0,13,73,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,898,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,922,"        secRand = SecureRandom.getInstance(algorithm, provider);",24,4,1,1,2,0,10,0,0,58,56,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,923,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,935,        if (k > n) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,936,"            throw new NumberIsTooLargeException(LocalizedFormats.PERMUTATION_EXCEEDS_N,",4,0,0,0,1,0,0,2,0,6,75,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,939,        if (k <= 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,940,"            throw new NotStrictlyPositiveException(LocalizedFormats.PERMUTATION_SIZE,",0,0,0,0,1,0,0,0,0,1,73,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,944,        int[] index = getNatural(n);,4,1,0,2,4,0,4,0,0,9,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,945,"        shuffle(index, n - k);",4,1,0,1,2,0,4,0,0,9,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,946,        int[] result = new int[k];,2,0,1,2,4,0,0,0,0,4,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,947,        for (int i = 0; i < k; i++) {,8,1,0,1,3,0,0,0,0,10,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,948,            result[i] = index[n - i - 1];,4,1,1,2,4,0,0,0,0,12,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,951,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,969,        int len = c.size();,4,0,0,1,2,0,6,0,0,10,19,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,970,        if (k > len) {,4,1,0,1,3,0,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,971,"            throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE,",4,0,0,0,1,0,0,2,0,6,89,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,974,        if (k <= 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,975,"            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, k);",6,0,0,1,2,0,0,2,0,8,78,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,978,        Object[] objects = c.toArray();,2,0,0,2,4,0,0,0,0,3,31,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,979,"        int[] index = nextPermutation(len, k);",2,0,0,2,4,0,6,0,0,8,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,980,        Object[] result = new Object[k];,2,0,1,2,4,0,0,4,0,8,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,981,        for (int i = 0; i < k; i++) {,10,1,0,1,3,0,0,0,0,14,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,982,            result[i] = objects[index[i]];,0,0,1,3,6,0,0,0,0,11,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,984,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,996,"        return distribution.inverseCumulativeProbability(nextUniform(0, 1));",0,0,0,2,4,1,6,0,0,6,68,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1009,"        return distribution.inverseCumulativeProbability(nextUniform(0, 1));",0,0,0,2,4,1,0,0,0,7,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1024,        int target = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1025,        for (int i = list.length - 1; i >= end; i--) {,12,2,0,1,3,0,0,0,0,15,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1026,            if (i == 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1027,                target = 0;,2,0,0,0,0,0,0,0,0,3,11,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1029,"                target = nextInt(0, i);",2,0,0,1,2,0,4,0,0,7,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1031,            int temp = list[target];,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1032,            list[target] = list[i];,0,0,0,2,4,0,0,0,0,6,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1033,            list[i] = temp;,2,0,1,1,2,0,0,0,0,7,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1035,    },4,1,0,0,1,0,4,0,0,9,1,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1045,        int[] natural = new int[n];,0,0,0,2,4,0,0,0,0,6,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1046,        for (int i = 0; i < n; i++) {,8,1,0,1,3,0,0,0,0,10,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1047,            natural[i] = i;,0,0,0,1,2,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1049,        return natural;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,30,38,"        super(value, 0, false);",2,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,30,39,    },2,0,0,0,1,0,0,0,0,2,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,30,48,"        super(specific, value, 0, false);",4,0,0,1,2,0,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,30,49,    },4,1,0,0,1,0,0,0,0,5,1,8,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,30,50,        this(boundIsAllowed ?,4,0,0,0,1,0,0,0,0,4,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,30,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,30,68,"        super(specific, wrong, min);",6,0,0,1,2,0,0,0,0,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,30,70,        this.min = min;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,30,71,        this.boundIsAllowed = boundIsAllowed;,8,1,1,0,0,0,0,0,0,15,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,30,72,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,30,78,        return boundIsAllowed;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,30,85,        return min;,6,2,0,0,0,1,0,0,0,9,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,30,46,"        super(pattern, wrong, arguments);",12,2,0,1,2,0,0,0,0,14,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,30,47,        argument = wrong;,6,0,1,0,0,0,0,0,0,12,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,30,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,30,54,        return argument;,10,1,1,0,0,2,0,2,0,18,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,30,44,                                        Object ... args) {,0,0,0,0,2,0,0,0,0,2,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,30,45,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,30,46,"        context.addMessage(pattern, args);",0,0,0,1,2,0,8,0,0,8,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,30,47,    },16,3,0,0,1,0,0,0,0,21,1,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,30,51,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,30,57,        return context.getMessage();,4,0,0,1,2,1,4,4,0,12,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,30,63,        return context.getLocalizedMessage();,0,0,0,1,2,1,0,0,0,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,30,50,        this(boundIsAllowed ?,0,0,0,0,1,0,0,0,0,1,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,30,54,    },2,0,0,0,1,0,0,0,0,2,1,7,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,30,67,"        super(specific, wrong, max);",0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,30,69,        this.max = max;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,30,70,        this.boundIsAllowed = boundIsAllowed;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,30,71,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,30,77,        return boundIsAllowed;,0,0,0,0,0,1,0,0,0,1,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,30,84,        return max;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,30,37,    public MathInternalError() {,2,0,0,1,3,1,8,0,0,11,28,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,30,38,"        getContext().addMessage(LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",4,0,0,2,4,0,6,0,0,10,69,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,30,39,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,30,46,"        super(cause, LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",8,0,0,1,2,0,0,0,0,8,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,30,47,    },8,0,0,0,1,0,0,0,0,8,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,30,56,"        super(pattern, args);",4,0,0,1,2,0,4,0,0,9,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,30,57,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,45,                                     Object ... args) {,8,1,0,0,2,0,0,2,0,11,18,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,46,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,47,"        context.addMessage(pattern, args);",2,0,0,1,2,1,8,4,0,15,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,48,    },2,0,0,0,1,0,0,0,0,2,1,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,60,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,61,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,62,"        context.addMessage(pattern, args);",4,0,0,1,2,0,10,4,0,18,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,63,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,69,        this(LocalizedFormats.ILLEGAL_STATE);,8,0,0,1,2,2,0,2,0,12,37,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,70,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,74,        return context;,14,4,0,0,0,2,2,0,0,22,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,80,        return context.getMessage();,8,2,1,1,2,1,4,0,0,25,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,86,        return context.getLocalizedMessage();,6,0,0,1,2,1,4,0,0,11,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,242,            ContinuedFraction cf = new ContinuedFraction() {,2,0,0,1,3,0,0,4,0,6,48,8,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,246,                    return ((2.0 * n) + 1.0) - a + x;,6,4,0,2,4,1,0,0,0,10,33,14,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,251,                    return n * (a - n);,6,2,0,1,2,1,6,0,0,14,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,45,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,46,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,73,"        return evaluate(x, DEFAULT_EPSILON, Integer.MAX_VALUE);",4,0,0,1,2,1,6,0,0,10,55,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,84,"        return evaluate(x, epsilon, Integer.MAX_VALUE);",18,5,0,1,2,1,6,0,0,30,47,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,95,"        return evaluate(x, DEFAULT_EPSILON, maxIterations);",6,1,0,1,2,1,8,0,0,16,51,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,124,        final double small = 1e-50;,2,0,0,0,0,1,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,125,"        double hPrev = getA(0, x);",4,0,0,1,2,0,8,0,0,12,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,128,"        if (Precision.equals(hPrev, 0.0, small)) {",0,0,0,2,5,0,8,0,0,8,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,129,            hPrev = small;,4,0,0,0,0,0,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,132,        int n = 1;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,133,        double dPrev = 0.0;,2,0,0,0,0,0,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,134,        double cPrev = hPrev;,4,0,0,0,0,0,0,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,135,        double hN = hPrev;,18,2,0,0,0,0,0,0,0,21,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,137,        while (n < maxIterations) {,4,1,0,1,3,0,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,138,"            final double a = getA(n, x);",2,0,0,1,2,1,6,0,0,9,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,139,"            final double b = getB(n, x);",2,0,0,1,2,1,6,0,0,9,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,141,            double dN = a + b * dPrev;,8,2,0,0,0,0,0,0,0,10,26,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,142,"            if (Precision.equals(dN, 0.0, small)) {",0,0,0,2,5,0,8,0,0,8,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,143,                dN = small;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,145,            double cN = a + b / cPrev;,8,2,0,0,0,0,0,0,0,10,26,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,146,"            if (Precision.equals(cN, 0.0, small)) {",0,0,0,2,5,0,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,147,                cN = small;,4,0,0,0,0,0,0,0,0,5,11,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,150,            dN = 1 / dN;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,151,            final double deltaN = cN * dN;,10,1,0,0,0,1,0,0,0,13,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,152,            hN = hPrev * deltaN;,8,1,0,0,0,0,2,2,0,15,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,154,            if (Double.isInfinite(hN)) {,4,0,0,2,5,0,6,0,0,11,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,155,"                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,",0,0,0,0,1,0,0,0,0,1,87,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,158,            if (Double.isNaN(hN)) {,0,0,0,2,5,0,6,0,0,6,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,159,"                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,",4,0,0,0,1,0,0,2,0,6,82,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,163,            if (FastMath.abs(deltaN - 1.0) < epsilon) {,4,2,0,2,5,0,4,2,0,12,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,164,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,167,            dPrev = dN;,4,0,0,0,0,0,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,168,            cPrev = cN;,4,0,0,0,0,0,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,169,            hPrev = hN;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,170,            n++;,2,0,0,0,0,0,0,0,0,3,4,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,171,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,173,        if (n >= maxIterations) {,4,1,0,1,3,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,174,"            throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,",4,0,0,0,1,0,0,2,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,178,        return hN;,0,0,0,0,0,1,0,0,0,1,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,73,    private Gamma() {},0,0,0,2,4,0,0,0,0,6,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,95,        if (Double.isNaN(x) || (x <= 0.0)) {,10,4,0,3,7,1,6,0,0,21,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,96,            ret = Double.NaN;,10,0,0,0,0,0,0,0,0,12,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,98,            double g = 607.0 / 128.0;,2,1,0,0,0,0,0,0,0,3,25,7,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,99,            double sum = lanczos(x);,4,0,0,1,2,0,4,0,0,8,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,100,            double tmp = x + g + .5;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,101,            ret = ((x + .5) * FastMath.log(tmp)) - tmp +,6,5,0,3,6,0,6,0,0,18,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,105,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,117,"        return regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",4,0,0,1,2,1,8,0,0,12,67,5,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,155,            ret = Double.NaN;,6,0,0,0,0,0,0,0,0,7,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,156,        } else if (x == 0.0) {,2,1,0,1,4,0,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,157,            ret = 0.0;,8,1,0,0,0,0,0,0,0,11,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,158,        } else if (x >= a + 1) {,10,2,0,1,4,0,2,2,0,17,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,161,"            ret = 1.0 - regularizedGammaQ(a, x, epsilon, maxIterations);",2,1,0,1,2,0,10,0,0,14,60,8,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,164,            double n = 0.0; // current element index,0,0,0,0,0,0,0,0,0,0,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,165,            double an = 1.0 / a; // n-th element in the series,4,1,0,0,0,0,0,0,0,5,50,9,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,166,            double sum = an; // partial sum,4,0,0,0,0,0,0,0,0,4,31,11,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,168,                   n < maxIterations &&,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,171,                n = n + 1.0;,4,1,0,0,0,0,0,0,0,6,12,10,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,172,                an = an * (x / (a + n));,10,3,0,2,4,0,0,0,0,14,24,10,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,175,                sum = sum + an;,6,1,0,0,0,0,0,0,0,8,15,10,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,177,            if (n >= maxIterations) {,6,1,0,1,3,0,6,0,0,14,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,178,                throw new MaxCountExceededException(maxIterations);,0,0,0,1,2,0,0,0,0,3,51,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,179,            } else if (Double.isInfinite(sum)) {,0,0,0,2,6,0,6,0,0,6,36,10,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,180,                ret = 1.0;,2,0,0,0,0,0,0,0,0,3,10,11,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,182,                ret = FastMath.exp(-x + (a * FastMath.log(x)) - logGamma(a)) * sum;,0,0,0,4,8,0,0,0,0,12,67,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,198,"        return regularizedGammaQ(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",4,0,0,1,2,1,8,0,0,12,67,5,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,232,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,4,3,0,5,11,0,12,0,0,19,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,233,            ret = Double.NaN;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,234,        } else if (x == 0.0) {,0,0,0,1,4,0,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,235,            ret = 1.0;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,236,        } else if (x < a + 1.0) {,0,0,0,1,4,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,239,"            ret = 1.0 - regularizedGammaP(a, x, epsilon, maxIterations);",2,1,0,1,2,0,10,0,0,14,60,8,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,242,            ContinuedFraction cf = new ContinuedFraction() {,0,0,0,1,3,0,0,0,0,4,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,255,"            ret = 1.0 / cf.evaluate(x, epsilon, maxIterations);",2,1,0,1,2,0,10,0,0,14,51,8,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,256,            ret = FastMath.exp(-x + (a * FastMath.log(x)) - logGamma(a)) * ret;,12,4,0,4,8,0,14,0,0,32,67,3,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,259,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,284,        if (x > 0 && x <= S_LIMIT) {,0,0,0,1,3,0,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,287,            return -GAMMA - 1 / x;,4,2,0,0,0,1,0,0,0,7,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,290,        if (x >= C_LIMIT) {,4,1,0,1,3,0,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,292,            double inv = 1 / (x * x);,8,2,0,1,2,0,0,2,0,13,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,296,            return FastMath.log(x) - 0.5 / x - inv * ((1.0 / 12) + inv * (1.0 / 120 - inv / 252));,14,11,0,4,8,1,12,0,0,38,86,3,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,299,        return digamma(x + 1) - 1 / x;,4,3,0,1,2,1,2,0,0,9,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,314,        if (x > 0 && x <= S_LIMIT) {,6,3,0,1,3,0,0,0,0,9,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,315,            return 1 / (x * x);,0,0,0,1,2,1,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,318,        if (x >= C_LIMIT) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,319,            double inv = 1 / (x * x);,0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,324,            return 1 / x + inv / 2 + inv / x * (1.0 / 6 - inv * (1.0 / 30 + inv / 42));,14,13,0,2,4,1,0,2,0,29,75,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,327,        return trigamma(x + 1) + 1 / (x * x);,6,4,0,2,4,1,4,0,0,14,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,350,        double sum = 0.0;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,351,        for (int i = LANCZOS.length - 1; i > 0; --i) {,10,2,0,1,3,0,0,0,0,13,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,352,            sum = sum + (LANCZOS[i] / (x + i));,12,5,1,3,6,0,0,0,0,27,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,354,        return sum + LANCZOS[0];,0,0,0,1,2,1,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,30,42,"        this(LocalizedFormats.MAX_COUNT_EXCEEDED, max);",10,0,0,1,2,0,0,0,0,10,47,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,30,43,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,30,53,                                     Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,30,54,"        getContext().addMessage(specific, max, args);",0,0,0,2,4,0,10,0,0,10,45,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,30,55,        this.max = max;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,30,56,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,30,62,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,44,    private Erf() {},0,0,0,2,4,0,0,0,0,6,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,68,            return x > 0 ? 1 : -1;,4,2,0,0,0,1,0,0,0,7,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,98,        if (FastMath.abs(x) > 40) {,0,1,0,2,5,0,6,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,99,            return x > 0 ? 0 : 2;,2,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,101,"        final double ret = Gamma.regularizedGammaQ(0.5, x * x, 1.0e-15, 10000);",6,1,0,1,2,1,4,0,0,12,71,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,102,        return x < 0 ? 2 - ret : ret;,6,2,0,0,0,1,0,0,0,8,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,116,        if(x1 > x2) {,8,3,1,1,3,0,0,0,0,14,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,117,"            return -erf(x2, x1);",0,0,0,1,2,1,6,0,0,7,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,120,        return,0,0,0,0,0,0,6,0,0,6,6,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,6134,    private FastMathLiteralArrays() {},6,2,0,2,4,2,0,0,0,10,34,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,349,    private FastMath() {},2,0,0,2,4,1,0,0,0,3,21,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,361,        if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN){,12,3,0,1,3,0,0,0,0,16,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,362,            return d; // These are un-normalised - don't try to convert,0,0,0,0,0,1,0,0,0,1,59,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,364,        long xl = Double.doubleToLongBits(d);,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,365,        xl = xl & MASK_30BITS; // Drop low order bits,6,1,0,0,0,0,0,0,0,8,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,366,        return Double.longBitsToDouble(xl);,0,0,0,1,2,1,6,0,0,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,383,      if (x != x) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,384,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,392,      if (x > 20.0) {,4,2,0,1,3,0,0,0,0,6,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,393,          return exp(x)/2.0;,0,1,0,1,2,1,4,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,396,      if (x < -20) {,2,1,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,397,          return exp(-x)/2.0;,0,0,0,1,2,1,4,2,0,6,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,400,      double hiPrec[] = new double[2];,2,0,0,2,4,0,0,0,0,2,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,401,      if (x < 0.0) {,12,2,0,1,3,0,0,0,0,15,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,402,          x = -x;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,404,"      exp(x, 0.0, hiPrec);",0,0,0,1,2,0,6,0,0,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,406,      double ya = hiPrec[0] + hiPrec[1];,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,407,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,4,1,1,3,6,0,0,0,0,10,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,409,      double temp = ya * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,410,      double yaa = ya + temp - temp;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,411,      double yab = ya - yaa;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,414,      double recip = 1.0/ya;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,415,      temp = recip * HEX_40000000;,4,1,1,0,0,0,0,0,0,8,28,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,416,      double recipa = recip + temp - temp;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,417,      double recipb = recip - recipa;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,420,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,20,9,0,1,2,0,0,0,0,30,76,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,422,      recipb += -yb * recip * recip;,12,3,0,0,0,0,0,0,0,17,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,425,      temp = ya + recipa;,12,1,0,0,0,0,0,0,0,14,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,426,      yb += -(temp - ya - recipa);,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,427,      ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,428,      temp = ya + recipb;,6,1,0,0,0,0,0,0,0,8,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,429,      yb += -(temp - ya - recipb);,48,14,0,1,2,0,6,2,0,73,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,430,      ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,432,      double result = ya + yb;,14,3,0,0,0,1,0,0,0,18,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,433,      result *= 0.5;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,434,      return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,442,      boolean negate = false;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,443,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,444,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,452,      if (x > 20.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,453,          return exp(x)/2.0;,0,1,0,1,2,1,4,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,456,      if (x < -20) {,6,2,0,1,3,0,0,0,0,9,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,457,          return -exp(-x)/2.0;,2,1,0,1,2,1,2,0,0,7,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,460,      if (x == 0) {,6,1,0,1,3,0,0,0,0,9,13,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,461,          return x;,4,1,0,0,0,1,0,0,0,5,9,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,464,      if (x < 0.0) {,6,1,0,1,3,0,0,0,0,7,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,465,          x = -x;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,466,          negate = true;,8,1,0,0,0,0,0,0,0,12,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,471,      if (x > 0.25) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,472,          double hiPrec[] = new double[2];,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,473,"          exp(x, 0.0, hiPrec);",18,3,0,1,2,0,0,0,0,23,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,475,          double ya = hiPrec[0] + hiPrec[1];,4,1,1,2,4,0,0,0,0,9,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,476,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0,0,0,3,6,0,0,0,0,9,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,478,          double temp = ya * HEX_40000000;,0,0,0,0,0,0,4,0,0,4,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,479,          double yaa = ya + temp - temp;,4,0,0,0,0,1,6,0,0,13,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,480,          double yab = ya - yaa;,6,1,0,0,0,0,0,0,0,7,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,483,          double recip = 1.0/ya;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,484,          temp = recip * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,485,          double recipa = recip + temp - temp;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,486,          double recipb = recip - recipa;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,489,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,2,1,0,1,2,0,0,0,0,3,76,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,491,          recipb += -yb * recip * recip;,6,0,0,0,0,0,0,0,0,7,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,493,          recipa = -recipa;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,494,          recipb = -recipb;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,497,          temp = ya + recipa;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,498,          yb += -(temp - ya - recipa);,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,499,          ya = temp;,16,1,0,0,0,0,0,0,0,19,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,500,          temp = ya + recipb;,6,1,0,0,0,0,0,0,0,8,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,501,          yb += -(temp - ya - recipb);,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,502,          ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,504,          result = ya + yb;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,505,          result *= 0.5;,2,0,0,0,0,0,0,0,0,3,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,506,      },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,508,          double hiPrec[] = new double[2];,2,0,0,2,4,0,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,509,"          expm1(x, hiPrec);",0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,511,          double ya = hiPrec[0] + hiPrec[1];,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,512,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,4,1,1,3,6,0,0,0,0,10,42,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,515,          double denom = 1.0 + ya;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,516,          double denomr = 1.0 / denom;,18,4,0,0,0,0,0,0,0,23,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,517,          double denomb = -(denom - 1.0 - ya) + yb;,8,2,0,1,2,0,0,0,0,11,41,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,518,          double ratio = ya * denomr;,12,2,0,0,0,0,0,0,0,14,27,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,519,          double temp = ratio * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,520,          double ra = ratio + temp - temp;,0,0,0,0,0,0,0,0,0,0,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,521,          double rb = ratio - ra;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,523,          temp = denom * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,524,          double za = denom + temp - temp;,10,2,0,0,0,1,0,0,0,13,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,525,          double zb = denom - za;,8,2,0,0,0,0,0,0,0,10,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,527,          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;,0,0,0,1,2,0,0,0,0,1,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,530,          rb += yb*denomr;                        // numerator,12,2,0,0,0,1,0,0,0,16,52,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,531,          rb += -ya * denomb * denomr * denomr;   // denominator,10,1,0,0,0,0,0,0,0,13,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,534,          temp = ya + ra;,16,2,0,0,0,0,0,0,0,20,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,535,          yb += -(temp - ya - ra);,8,1,0,1,2,0,0,0,0,11,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,536,          ya = temp;,10,0,0,0,0,0,0,2,0,13,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,537,          temp = ya + rb;,16,2,0,0,0,0,0,0,0,20,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,538,          yb += -(temp - ya - rb);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,539,          ya = temp;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,541,          result = ya + yb;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,542,          result *= 0.5;,2,0,0,0,0,0,0,0,0,3,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,545,      if (negate) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,546,          result = -result;,14,1,0,0,0,0,0,0,0,18,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,549,      return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,557,      boolean negate = false;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,559,      if (x != x) {,4,1,0,1,3,0,0,2,0,7,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,560,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,569,      if (x > 20.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,570,          return 1.0;,4,0,0,0,0,1,0,0,0,5,11,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,573,      if (x < -20) {,2,1,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,574,          return -1.0;,0,0,0,0,0,1,0,0,0,1,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,577,      if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,578,          return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,581,      if (x < 0.0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,582,          x = -x;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,583,          negate = true;,2,0,0,0,0,0,0,0,0,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,587,      if (x >= 0.5) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,588,          double hiPrec[] = new double[2];,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,590,"          exp(x*2.0, 0.0, hiPrec);",0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,592,          double ya = hiPrec[0] + hiPrec[1];,8,2,0,2,4,0,0,0,0,11,34,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,593,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0,0,0,3,6,0,0,0,0,9,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,596,          double na = -1.0 + ya;,6,2,0,0,0,0,0,0,0,9,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,597,          double nb = -(na + 1.0 - ya);,2,1,0,1,2,0,0,0,0,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,598,          double temp = na + yb;,6,1,0,0,0,0,0,0,0,7,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,599,          nb += -(temp - na - yb);,12,1,0,1,2,0,0,0,0,15,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,600,          na = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,603,          double da = 1.0 + ya;,4,1,0,0,0,0,0,0,0,5,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,604,          double db = -(da - 1.0 - ya);,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,605,          temp = da + yb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,606,          db += -(temp - da - yb);,8,1,0,1,2,0,0,0,0,11,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,607,          da = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,609,          temp = da * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,610,          double daa = da + temp - temp;,14,2,0,0,0,0,0,0,0,17,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,611,          double dab = da - daa;,20,6,0,0,0,0,0,0,0,27,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,614,          double ratio = na/da;,6,1,0,0,0,0,0,0,0,7,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,615,          temp = ratio * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,616,          double ratioa = ratio + temp - temp;,10,2,0,0,0,0,0,0,0,13,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,617,          double ratiob = ratio - ratioa;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,620,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0,0,0,1,2,0,0,0,0,3,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,623,          ratiob += nb / da;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,625,          ratiob += -db * na / da / da;,10,3,0,0,0,0,0,0,0,15,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,627,          result = ratioa + ratiob;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,628,      },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,630,          double hiPrec[] = new double[2];,10,1,0,2,4,0,0,0,0,13,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,632,"          expm1(x*2.0, hiPrec);",2,1,0,1,2,0,4,0,0,7,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,634,          double ya = hiPrec[0] + hiPrec[1];,2,1,1,2,4,0,0,0,0,7,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,635,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,4,1,1,3,6,0,0,0,0,10,42,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,638,          double na = ya;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,639,          double nb = yb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,642,          double da = 2.0 + ya;,4,1,0,0,0,0,0,0,0,5,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,643,          double db = -(da - 2.0 - ya);,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,644,          double temp = da + yb;,6,1,0,0,0,0,0,0,0,7,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,645,          db += -(temp - da - yb);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,646,          da = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,648,          temp = da * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,649,          double daa = da + temp - temp;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,650,          double dab = da - daa;,8,1,0,0,0,0,6,0,0,16,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,653,          double ratio = na/da;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,654,          temp = ratio * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,655,          double ratioa = ratio + temp - temp;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,656,          double ratiob = ratio - ratioa;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,659,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,22,9,0,1,2,0,0,0,0,32,72,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,662,          ratiob += nb / da;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,664,          ratiob += -db * na / da / da;,10,3,0,0,0,0,0,0,0,15,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,666,          result = ratioa + ratiob;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,669,      if (negate) {,4,0,0,1,3,0,0,0,0,4,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,670,          result = -result;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,673,      return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,681,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,0,0,0,2,4,1,0,0,0,7,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,689,        boolean negative = false;,8,1,0,0,0,0,0,0,0,10,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,690,        if (a < 0) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,691,            negative = true;,16,3,0,0,0,0,0,0,0,21,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,692,            a = -a;,10,2,0,0,0,1,0,0,0,13,7,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,696,        if (a > 0.167) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,697,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,4,0,0,2,4,0,0,0,0,4,54,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,699,            final double a2 = a * a;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,700,            if (a > 0.097) {,6,4,0,1,3,0,0,0,0,10,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,701,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,52,17,0,8,16,0,0,0,0,70,212,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,702,            } else if (a > 0.036) {,0,0,0,1,4,0,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,703,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,40,13,0,6,12,0,0,0,0,54,160,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,704,            } else if (a > 0.0036) {,0,0,0,1,4,0,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,705,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);,28,9,0,4,8,0,0,0,0,38,109,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,707,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);,16,5,0,2,4,0,0,2,0,24,63,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,711,        return negative ? -absAsinh : absAsinh;,0,0,0,0,0,1,0,0,0,1,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,719,        boolean negative = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,720,        if (a < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,721,            negative = true;,4,1,0,0,0,0,0,0,0,7,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,722,            a = -a;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,726,        if (a > 0.15) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,727,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,10,3,1,3,6,0,0,0,0,16,49,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,729,            final double a2 = a * a;,8,1,1,0,0,1,0,0,0,15,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,730,            if (a > 0.087) {,2,1,0,1,3,0,0,0,0,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,731,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));,0,0,0,8,16,0,0,0,0,24,141,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,732,            } else if (a > 0.031) {,2,0,0,1,4,0,0,0,0,2,23,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,733,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));,28,13,0,6,12,0,6,0,0,48,109,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,734,            } else if (a > 0.003) {,0,0,0,1,4,0,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,735,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));,6,1,0,4,8,0,0,0,0,7,77,15,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,737,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));,0,0,0,2,4,0,0,0,0,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,741,        return negative ? -absAtanh : absAtanh;,0,0,0,0,0,1,0,0,0,1,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,750,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,2,0,0,3,6,2,0,0,0,2,87,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,759,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,6,2,0,3,6,2,0,0,0,9,91,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,767,"        return nextAfter(a, Double.POSITIVE_INFINITY);",8,1,1,1,2,2,16,0,0,28,46,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,775,"        return nextAfter(a, Float.POSITIVE_INFINITY);",0,0,0,1,2,1,0,0,0,4,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,783,        return Math.random();,0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,807,"        return exp(x, 0.0, null);",0,0,0,1,2,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,830,                if (hiPrec != null) {,14,5,1,1,3,1,4,0,0,28,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,831,                    hiPrec[0] = 0.0;,0,0,0,1,2,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,832,                    hiPrec[1] = 0.0;,4,1,1,1,2,0,0,0,0,8,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,834,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,839,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",4,2,0,1,2,1,6,0,0,13,79,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,840,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,841,                    hiPrec[0] /= 285040095144011776.0;,0,0,1,1,2,0,0,0,0,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,842,                    hiPrec[1] /= 285040095144011776.0;,8,2,1,1,2,0,0,0,0,13,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,844,                return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,849,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",6,3,0,1,2,1,6,0,0,16,79,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,850,                if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,851,                    hiPrec[0] /= 4.455505956692756620;,0,0,1,1,2,0,0,0,0,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,852,                    hiPrec[1] /= 4.455505956692756620;,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,854,                return result;,12,2,0,0,0,1,12,0,0,29,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,864,            intVal = (int) x;,0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,866,            if (intVal > 709) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,867,                if (hiPrec != null) {,8,2,0,1,3,1,0,0,0,11,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,868,                    hiPrec[0] = Double.POSITIVE_INFINITY;,2,0,0,1,2,2,0,0,0,4,37,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,869,                    hiPrec[1] = 0.0;,6,3,0,1,2,1,6,0,0,16,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,871,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,874,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,875,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,10,1,0,1,2,0,0,0,0,12,71,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,922,            result = tempC*z + tempB + tempA;,14,3,0,0,0,0,6,0,0,24,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,927,            hiPrec[0] = tempA;,0,0,0,1,2,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,928,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,22,6,1,1,2,1,0,0,0,32,58,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,939,"      return expm1(x, null);",0,0,0,1,2,1,4,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,948,        if (x != x || x == 0.0) { // NaN or zero,6,3,0,1,3,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,949,            return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,952,        if (x <= -1.0 || x >= 1.0) {,14,4,0,1,3,0,0,0,0,21,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,955,            double hiPrec[] = new double[2];,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,956,"            exp(x, 0.0, hiPrec);",0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,957,            if (x > 0.0) {,10,3,1,1,3,0,0,0,0,20,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,958,                return -1.0 + hiPrec[0] + hiPrec[1];,0,1,1,2,4,1,0,0,0,6,36,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,960,                final double ra = -1.0 + hiPrec[0];,8,2,1,1,2,1,0,0,0,15,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,961,                double rb = -(ra + 1.0 - hiPrec[0]);,12,4,1,2,4,1,0,0,0,22,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,962,                rb += hiPrec[1];,0,0,0,1,2,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,963,                return ra + rb;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,970,        boolean negative = false;,8,1,0,0,0,0,0,0,0,11,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,972,        if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,973,            x = -x;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,974,            negative = true;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,978,            int intFrac = (int) (x * 1024.0);,4,1,0,2,4,0,0,0,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,979,            double tempA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0;,6,1,1,1,2,0,0,0,0,9,60,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,980,            double tempB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,6,0,1,1,2,0,0,0,0,8,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,982,            double temp = tempA + tempB;,6,1,0,0,0,0,0,0,0,7,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,983,            tempB = -(temp - tempA - tempB);,8,1,0,1,2,0,0,0,0,11,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,984,            tempA = temp;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,986,            temp = tempA * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,987,            baseA = tempA + temp - temp;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,988,            baseB = tempB + (tempA - baseA);,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,990,            epsilon = x - intFrac/1024.0;,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,995,        double zb = 0.008336750013465571;,6,1,0,0,0,0,0,0,0,8,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,996,        zb = zb * epsilon + 0.041666663879186654;,0,0,0,0,0,0,0,0,0,0,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,997,        zb = zb * epsilon + 0.16666666666745392;,6,2,0,0,0,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,998,        zb = zb * epsilon + 0.49999999999999994;,0,0,0,0,0,0,0,0,0,0,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,999,        zb = zb * epsilon;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1000,        zb = zb * epsilon;,10,2,1,0,0,0,0,0,0,16,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1002,        double za = epsilon;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1003,        double temp = za + zb;,2,0,0,0,0,0,0,0,0,2,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1004,        zb = -(temp - za - zb);,10,2,0,1,2,0,0,0,0,14,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1005,        za = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1007,        temp = za * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1008,        temp = za + temp - temp;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1009,        zb += za - temp;,6,1,0,0,0,0,0,0,0,8,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1010,        za = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1013,        double ya = za * baseA;,6,1,0,0,0,0,0,0,0,7,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1015,        temp = ya + za * baseB;,6,1,0,0,0,1,0,0,0,8,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1016,        double yb = -(temp - ya - za * baseB);,0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1017,        ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1019,        temp = ya + zb * baseA;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1020,        yb += -(temp - ya - zb * baseA);,12,2,0,1,2,0,0,0,0,17,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1021,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1023,        temp = ya + zb * baseB;,10,3,1,0,0,1,6,0,0,25,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1024,        yb += -(temp - ya - zb*baseB);,14,2,0,1,2,0,0,0,0,18,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1025,        ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1029,        temp = ya + baseA;,4,0,0,0,0,0,0,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1030,        yb += -(temp - baseA - ya);,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1031,        ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1033,        temp = ya + za;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1035,        yb += -(temp - ya - za);,0,0,0,1,2,0,4,0,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1036,        ya = temp;,6,0,0,0,0,0,0,0,0,7,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1038,        temp = ya + baseB;,2,0,0,0,0,1,0,0,0,3,18,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1040,        yb += -(temp - ya - baseB);,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1041,        ya = temp;,4,0,0,0,0,0,2,0,0,7,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1043,        temp = ya + zb;,16,4,0,0,0,0,0,0,0,21,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1045,        yb += -(temp - ya - zb);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1046,        ya = temp;,2,0,0,0,0,0,4,2,0,8,10,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1048,        if (negative) {,8,1,0,1,3,0,0,0,0,10,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1050,            double denom = 1.0 + ya;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1051,            double denomr = 1.0 / denom;,4,1,0,0,0,0,4,0,0,9,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1052,            double denomb = -(denom - 1.0 - ya) + yb;,10,2,0,1,2,0,0,0,0,13,41,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1053,            double ratio = ya * denomr;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1054,            temp = ratio * HEX_40000000;,8,1,0,0,0,0,0,0,0,11,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1055,            final double ra = ratio + temp - temp;,8,2,0,0,0,1,0,0,0,11,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1056,            double rb = ratio - ra;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1058,            temp = denom * HEX_40000000;,8,2,1,0,0,0,0,0,0,14,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1059,            za = denom + temp - temp;,8,2,0,0,0,0,0,0,0,11,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1060,            zb = denom - za;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1062,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,8,2,0,1,2,1,0,0,0,11,60,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1073,            rb += yb * denomr;                      // numerator,6,1,0,0,0,0,0,0,0,8,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1074,            rb += -ya * denomb * denomr * denomr;   // denominator,10,1,0,0,0,0,0,0,0,13,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1077,            ya = -ra;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1078,            yb = -rb;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1081,        if (hiPrecOut != null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1082,            hiPrecOut[0] = ya;,0,0,0,1,2,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1083,            hiPrecOut[1] = yb;,14,3,1,1,2,0,0,0,0,22,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1086,        return ya + yb;,14,5,0,0,0,2,4,0,0,24,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1107,            return Double.NEGATIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1113,            if (x != 0.0) {,2,1,0,1,3,0,0,0,0,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1114,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1115,                    hiPrec[0] = Double.NaN;,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1118,                return Double.NaN;,6,1,0,0,0,1,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1124,            if (hiPrec != null) {,10,1,0,1,3,1,10,0,0,23,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1125,                hiPrec[0] = Double.POSITIVE_INFINITY;,4,0,1,1,2,0,0,0,0,7,37,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1128,            return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1136,            if (x == 0) {,6,1,0,1,3,0,0,0,0,9,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1138,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1139,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1142,                return Double.NEGATIVE_INFINITY;,2,1,1,0,0,1,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1146,            bits <<= 1;,2,0,0,0,0,0,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1147,            while ( (bits & 0x0010000000000000L) == 0) {,2,2,0,2,5,0,0,0,0,4,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1148,                exp--;,2,0,0,0,0,0,0,0,0,3,6,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1149,                bits <<= 1;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1160,                double xa = x - 1.0;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1161,                double xb = xa - x + 1.0;,8,1,1,0,0,0,0,0,0,17,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1162,                double tmp = xa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1163,                double aa = xa + tmp - tmp;,12,2,0,0,0,0,0,0,0,14,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1164,                double ab = xa - aa;,0,0,0,0,0,0,6,0,0,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1165,                xa = aa;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1166,                xb = ab;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1168,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,6,1,1,2,4,0,0,0,0,9,53,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1169,                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];,14,2,1,2,4,0,0,0,0,20,53,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1171,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1173,                    aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1174,                    ab = ya * xb + yb * xa + yb * xb;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1176,                    tmp = aa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1177,                    ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1178,                    yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1181,                    aa = ya + LN_QUICK_COEF[i][0];,6,1,1,2,4,0,0,2,0,15,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1182,                    ab = yb + LN_QUICK_COEF[i][1];,4,0,0,2,4,0,0,0,0,6,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1184,                    tmp = aa * HEX_40000000;,16,2,1,0,0,0,0,0,0,23,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1185,                    ya = aa + tmp - tmp;,14,2,0,0,0,0,0,0,0,18,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1186,                    yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1190,                aa = ya * xa;,6,1,0,0,0,0,0,0,0,8,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1191,                ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1193,                tmp = aa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1194,                ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1195,                yb = aa - ya + ab;,14,3,0,0,0,0,0,0,0,19,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1197,                return ya + yb;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1333,        if (x == -1) {,2,0,0,1,3,0,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1334,            return x/0.0;   // -Infinity,4,3,0,0,0,1,0,0,0,7,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1337,        if (x > 0 && 1/x == 0) { // x = Infinity,0,0,0,1,3,0,0,0,0,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1338,            return x;,6,3,0,0,0,1,0,0,0,9,9,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1341,        if (x>1e-6 || x<-1e-6) {,20,9,0,1,3,0,0,0,0,30,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1342,            double xpa = 1.0 + x;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1343,            double xpb = -(xpa - 1.0 - x);,6,1,0,1,2,0,0,0,0,8,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1345,            double hiPrec[] = new double[2];,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1347,"            final double lores = log(xpa, hiPrec);",2,0,0,1,2,1,6,0,0,9,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1348,            if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,8,3,0,2,5,0,0,0,0,12,73,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1349,                return lores;,2,0,0,0,0,1,0,0,0,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1354,            double fx1 = xpb/xpa;,6,1,0,0,0,0,0,0,0,7,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1356,            double epsilon = 0.5 * fx1 + 1.0;,14,5,0,0,0,0,0,0,0,19,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1357,            epsilon = epsilon * fx1;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1359,            return epsilon + hiPrec[1] + hiPrec[0];,2,1,1,2,4,1,0,0,0,7,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1363,        double y = x * F_1_3 - F_1_2;,8,2,0,0,0,0,0,0,0,10,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1364,        y = y * x + 1.0;,10,2,0,0,0,0,0,0,0,13,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1365,        y = y * x;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1367,        return y;,4,1,0,0,0,1,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1375,        final double hiPrec[] = new double[2];,4,1,0,2,4,0,0,0,0,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1377,"        final double lores = log(x, hiPrec);",0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1378,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0,0,0,2,5,0,0,0,0,7,73,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1379,            return lores;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1382,        final double tmp = hiPrec[0] * HEX_40000000;,0,0,0,1,2,0,0,0,0,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1383,        final double lna = hiPrec[0] + tmp - tmp;,2,0,0,1,2,0,0,0,0,2,41,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1384,        final double lnb = hiPrec[0] - lna + hiPrec[1];,0,0,0,2,4,0,0,0,0,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1386,        final double rln10a = 0.4342944622039795;,2,0,0,0,0,0,0,0,0,3,41,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1387,        final double rln10b = 1.9699272335463627E-8;,0,0,0,0,0,0,0,0,0,0,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1389,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,0,0,0,0,0,1,0,0,0,1,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1409,        return log(x) / log(base);,0,1,0,2,4,1,8,0,0,9,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1423,            return 1.0;,4,0,0,0,0,1,0,0,0,4,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1427,            return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1432,            long bits = Double.doubleToLongBits(x);,10,2,0,1,2,0,6,0,0,19,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1433,            if ((bits & 0x8000000000000000L) != 0) {,2,2,0,2,5,0,0,0,0,4,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1435,                long yi = (long) y;,14,6,1,1,2,1,6,0,0,31,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1437,                if (y < 0 && y == yi && (yi & 1) == 1) {,0,0,0,2,5,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1438,                    return Double.NEGATIVE_INFINITY;,12,1,1,0,0,1,4,0,0,21,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1441,                if (y > 0 && y == yi && (yi & 1) == 1) {,8,1,1,2,5,0,4,0,0,19,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1442,                    return -0.0;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1446,            if (y < 0) {,2,1,0,1,3,0,6,0,0,9,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1447,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1449,            if (y > 0) {,14,2,1,1,3,0,0,0,0,20,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1450,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1453,            return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1457,            if (y != y) { // y is NaN,4,1,0,1,3,0,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1458,                return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1460,            if (y < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1461,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1463,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1468,            if (x * x == 1.0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1469,                return Double.NaN;,6,0,0,0,0,2,6,0,0,16,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1472,            if (x * x > 1.0) {,4,2,0,1,3,0,0,0,0,6,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1473,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1475,                return 0.0;,14,4,0,0,0,1,0,0,0,19,11,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1480,            if (y != y) { // y is NaN,4,1,0,1,3,0,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1481,                return y;,20,0,0,0,0,1,0,2,0,25,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1484,            if (y < 0) {,4,1,0,1,3,1,0,0,0,6,12,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1485,                long yi = (long) y;,0,0,0,1,2,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1486,                if (y == yi && (yi & 1) == 1) {,2,0,0,2,5,1,0,0,0,3,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1487,                    return -0.0;,2,0,0,0,0,2,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1490,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1493,            if (y > 0)  {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1494,                long yi = (long) y;,4,0,0,1,2,0,0,0,0,4,19,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1495,                if (y == yi && (yi & 1) == 1) {,4,0,0,2,5,0,0,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1496,                    return Double.NEGATIVE_INFINITY;,8,2,0,0,0,1,0,0,0,11,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1499,                return Double.POSITIVE_INFINITY;,8,1,0,0,0,1,0,0,0,9,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1505,            if (x * x == 1.0) {,10,3,0,1,3,0,0,0,0,13,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1506,                return Double.NaN;,10,2,0,0,0,1,0,0,0,13,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1509,            if (x * x < 1.0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1510,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1512,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1519,            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {,2,0,0,1,3,0,0,0,0,2,46,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1520,"                return pow(-x, y);",2,0,0,1,2,1,4,0,0,7,18,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1523,            if (y == (long) y) {,10,2,0,2,5,0,0,0,0,13,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1525,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",4,0,0,4,8,1,0,0,0,5,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1527,                return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1539,            double tmp1 = y * 9.31322574615478515625E-10;,0,0,0,0,0,0,0,0,0,0,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1540,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,0,0,0,0,0,0,0,0,0,0,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1541,            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;,12,3,0,1,2,0,0,0,0,16,56,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1542,            yb = y - ya;,6,1,0,0,0,0,0,0,0,8,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1548,            return lores;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1588,        double x2 = x*x;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1590,        double p = 2.7553817452272217E-6;,8,0,0,0,0,0,0,0,0,12,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1591,        p = p * x2 + -1.9841269659586505E-4;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1592,        p = p * x2 + 0.008333333333329196;,6,2,0,0,0,0,0,0,0,9,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1593,        p = p * x2 + -0.16666666666666666;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1596,        p = p * x2 * x;,8,1,0,0,0,0,0,0,0,10,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1598,        return p;,6,1,0,0,0,1,0,0,0,7,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1608,        double x2 = x*x;,14,5,0,0,0,0,0,0,0,21,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1610,        double p = 2.479773539153719E-5;,6,1,0,0,0,1,0,0,0,8,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1611,        p = p * x2 + -0.0013888888689039883;,8,3,0,0,0,0,0,0,0,13,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1612,        p = p * x2 + 0.041666666666621166;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1613,        p = p * x2 + -0.49999999999999994;,6,2,0,0,0,0,0,0,0,10,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1614,        p *= x2;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1616,        return p;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1627,        int idx = (int) ((xa * 8.0) + 0.5);,8,2,0,3,6,0,6,0,0,16,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1628,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0,0,0,1,2,0,0,0,0,3,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1631,        final double sintA = SINE_TABLE_A[idx];,6,0,1,1,2,1,0,0,0,13,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1632,        final double sintB = SINE_TABLE_B[idx];,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1633,        final double costA = COSINE_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1634,        final double costB = COSINE_TABLE_B[idx];,2,0,1,1,2,1,0,0,0,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1637,        double sinEpsA = epsilon;,4,0,0,0,0,0,0,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1638,        double sinEpsB = polySine(epsilon);,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1639,        final double cosEpsA = 1.0;,6,1,1,0,0,2,0,0,0,13,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1640,        final double cosEpsB = polyCosine(epsilon);,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1643,        final double temp = sinEpsA * HEX_40000000;,8,2,0,0,0,0,0,0,0,10,43,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1644,        double temp2 = (sinEpsA + temp) - temp;,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1645,        sinEpsB +=  sinEpsA - temp2;,12,3,0,0,0,1,0,0,0,17,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1646,        sinEpsA = temp2;,4,1,0,0,0,0,0,0,0,7,16,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1672,        double a = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1673,        double b = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1675,        double t = sintA;,4,0,0,0,0,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1676,        double c = a + t;,6,1,0,0,0,0,0,0,0,7,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1677,        double d = -(c - a - t);,8,1,0,1,2,0,0,0,0,10,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1678,        a = c;,14,1,0,0,0,0,0,0,0,18,6,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1679,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1681,        t = costA * sinEpsA;,14,3,0,0,0,0,0,0,0,19,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1682,        c = a + t;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1683,        d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1684,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1685,        b = b + d;,12,2,0,0,0,0,0,0,0,16,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1687,        b = b + sintA * cosEpsB + costA * sinEpsB;,12,4,0,0,0,0,0,0,0,17,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1702,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,0,0,0,0,0,0,6,2,0,8,68,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1729,        if (xb != 0.0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1730,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,0,0,0,2,5,0,0,0,0,7,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1732,            c = a + t;,0,0,1,0,0,0,8,0,0,17,10,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1733,            d = -(c - a - t);,8,1,0,1,2,0,6,0,0,18,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1734,            a = c;,4,0,0,0,0,0,0,0,0,5,6,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1735,            b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1738,        result = a + b;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1740,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1751,        final double pi2a = 1.5707963267948966;,0,0,0,0,0,0,0,0,0,0,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1752,        final double pi2b = 6.123233995736766E-17;,4,0,0,0,0,1,0,0,0,5,42,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1754,        final double a = pi2a - xa;,6,1,0,0,0,1,0,0,0,8,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1755,        double b = -(a - pi2a + xa);,8,2,0,1,2,0,0,0,0,11,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1756,        b += pi2b - xb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1758,"        return sinQ(a, b);",2,1,0,1,2,1,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1771,        int idx = (int) ((xa * 8.0) + 0.5);,0,0,0,3,6,0,0,0,0,9,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1772,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,2,1,0,1,2,0,0,0,0,3,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1775,        final double sintA = SINE_TABLE_A[idx];,2,0,1,1,2,1,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1776,        final double sintB = SINE_TABLE_B[idx];,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1777,        final double costA = COSINE_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1778,        final double costB = COSINE_TABLE_B[idx];,2,1,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1781,        double sinEpsA = epsilon;,10,1,0,0,0,0,0,0,0,11,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1782,        double sinEpsB = polySine(epsilon);,2,0,0,1,2,0,4,0,0,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1783,        final double cosEpsA = 1.0;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1784,        final double cosEpsB = polyCosine(epsilon);,2,0,0,1,2,1,4,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1787,        double temp = sinEpsA * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1788,        double temp2 = (sinEpsA + temp) - temp;,2,0,0,1,2,0,0,0,0,3,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1789,        sinEpsB +=  sinEpsA - temp2;,6,1,0,0,0,0,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1790,        sinEpsA = temp2;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1815,        double a = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1816,        double b = 0;,2,0,1,0,0,0,6,0,0,13,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1819,        double t = sintA;,4,0,0,0,0,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1820,        double c = a + t;,14,2,0,0,0,0,0,0,0,18,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1821,        double d = -(c - a - t);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1822,        a = c;,6,1,0,0,0,1,0,0,0,8,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1823,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1825,        t = costA*sinEpsA;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1826,        c = a + t;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1827,        d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1828,        a = c;,14,1,0,0,0,0,0,0,0,17,6,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1829,        b = b + d;,14,1,0,0,0,0,0,0,0,20,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1831,        b = b + sintA*cosEpsB + costA*sinEpsB;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1832,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,0,0,0,0,0,0,0,0,0,0,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1834,        double sina = a + b;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1835,        double sinb = -(sina - a - b);,8,1,0,1,2,0,0,0,0,10,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1839,        a = b = c = d = 0.0;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1841,        t = costA*cosEpsA;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1842,        c = a + t;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1843,        d = -(c - a - t);,0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1844,        a = c;,6,1,0,0,0,0,0,0,0,8,6,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1845,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1847,        t = -sintA*sinEpsA;,12,1,0,0,0,1,2,8,0,26,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1848,        c = a + t;,22,6,0,0,0,0,0,0,0,30,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1849,        d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1850,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1851,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1853,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,16,6,0,0,0,0,0,0,0,23,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1854,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,2,0,0,1,2,0,0,0,0,3,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1856,        double cosa = a + b;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1857,        double cosb = -(cosa - a - b);,8,1,0,1,2,0,0,0,0,10,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1859,        if (cotanFlag) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1861,            tmp = cosa; cosa = sina; sina = tmp;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1862,            tmp = cosb; cosb = sinb; sinb = tmp;,20,2,0,0,0,0,0,0,0,25,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1876,        double est = sina/cosa;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1879,        temp = est * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1880,        double esta = (est + temp) - temp;,12,2,0,1,2,0,0,0,0,16,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1881,        double estb =  est - esta;,0,0,0,0,0,0,0,0,0,0,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1883,        temp = cosa * HEX_40000000;,6,1,0,0,0,1,6,0,0,14,27,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1884,        double cosaa = (cosa + temp) - temp;,8,5,1,1,2,0,0,0,0,20,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1885,        double cosab =  cosa - cosaa;,6,1,0,0,0,0,0,0,0,7,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1888,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,0,0,0,1,2,0,0,0,0,3,114,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1889,        err += sinb/cosa;                     // Change in est due to sinb,16,3,1,0,0,2,0,0,0,26,66,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1890,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,0,0,0,0,0,0,0,0,0,0,66,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1892,        if (xb != 0.0) {,16,4,0,1,3,0,0,0,0,21,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1895,            double xbadj = xb + est*est*xb;,4,2,0,0,0,0,0,0,0,6,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1896,            if (cotanFlag) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1897,                xbadj = -xbadj;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1900,            err += xbadj;,6,0,0,0,0,1,2,0,0,10,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1903,        return est+err;,16,4,0,0,0,1,0,0,0,21,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1920,        long inbits = Double.doubleToLongBits(x);,2,0,0,1,2,1,6,0,0,9,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1921,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,4,3,0,3,6,0,0,0,0,7,53,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1924,        inbits &= 0x000fffffffffffffL;,2,0,0,0,0,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1925,        inbits |= 0x0010000000000000L;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1928,        exponent++;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1929,        inbits <<= 11;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1935,        int idx = exponent >> 6;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1936,        int shift = exponent - (idx << 6);,6,2,0,1,2,0,0,0,0,10,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1938,        if (shift != 0) {,10,3,1,1,3,0,0,0,0,16,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1939,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,0,0,0,3,6,0,0,0,0,9,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1940,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,4,2,1,2,4,0,0,0,0,11,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1941,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,10,6,1,5,10,0,0,0,0,23,70,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1942,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,10,6,1,5,10,0,0,0,0,21,72,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1944,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,0,0,0,2,4,0,0,0,0,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1945,            shpiA = RECIP_2PI[idx];,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1946,            shpiB = RECIP_2PI[idx+1];,0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1950,        long a = inbits >>> 32;,10,2,0,0,0,0,0,0,0,12,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1951,        long b = inbits & 0xffffffffL;,4,1,0,0,0,0,0,0,0,5,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1953,        long c = shpiA >>> 32;,10,1,0,0,0,0,0,0,0,13,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1954,        long d = shpiA & 0xffffffffL;,4,1,0,0,0,0,0,0,0,5,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1956,        long ac = a * c;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1957,        long bd = b * d;,10,3,0,0,0,0,0,0,0,14,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1958,        long bc = b * c;,12,2,0,0,0,0,0,0,0,14,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1959,        long ad = a * d;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1961,        long prodB = bd + (ad << 32);,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1962,        long prodA = ac + (ad >>> 32);,8,3,0,1,2,0,0,0,0,12,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1964,        boolean bita = (bd & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1965,        boolean bitb = (ad & 0x80000000L ) != 0;,10,4,0,1,2,0,0,0,0,16,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1966,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,12,4,0,1,2,0,0,0,0,17,52,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1969,        if ( (bita && bitb) ||,2,0,0,1,3,1,6,4,0,13,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1971,            prodA++;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1974,        bita = (prodB & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1975,        bitb = (bc & 0x80000000L ) != 0;,8,3,1,1,2,0,4,2,0,22,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1977,        prodB = prodB + (bc << 32);,6,2,0,1,2,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1978,        prodA = prodA + (bc >>> 32);,8,2,0,1,2,1,4,0,0,16,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1980,        bitsum = (prodB & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1983,        if ( (bita && bitb) ||,6,3,1,1,3,0,0,0,0,18,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1985,            prodA++;,2,0,0,0,0,0,0,0,0,3,8,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1989,        c = shpiB >>> 32;,4,1,0,0,0,0,0,0,0,6,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1990,        d = shpiB & 0xffffffffL;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1991,        ac = a * c;,4,0,0,0,0,0,0,0,0,4,11,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1992,        bc = b * c;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1993,        ad = a * d;,10,1,0,0,0,0,0,0,0,12,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1996,        ac = ac + ((bc + ad) >>> 32);,2,0,0,2,4,0,0,0,0,2,29,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1998,        bita = (prodB & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1999,        bitb = (ac & 0x8000000000000000L ) != 0;,4,2,0,1,2,0,8,0,0,15,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2000,        prodB += ac;,4,0,0,0,0,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2001,        bitsum = (prodB & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2003,        if ( (bita && bitb) ||,2,0,0,1,3,0,4,0,0,6,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2005,            prodA++;,10,2,0,0,0,1,0,0,0,14,8,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2009,        c = shpi0 >>> 32;,12,2,0,0,0,0,0,0,0,16,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2010,        d = shpi0 & 0xffffffffL;,12,1,0,0,0,1,8,0,0,24,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2012,        bd = b * d;,10,1,0,0,0,0,0,0,0,13,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2013,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2014,        ad = a * d;,0,0,0,0,0,0,6,0,0,6,11,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2016,        prodA += bd + ((bc + ad) << 32);,16,4,0,2,4,0,0,0,0,23,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2028,        int intPart = (int)(prodA >>> 62);,4,1,0,2,4,0,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2031,        prodA <<= 2;,2,0,0,0,0,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2032,        prodA |= prodB >>> 62;,4,1,0,0,0,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2033,        prodB <<= 2;,6,0,0,0,0,0,0,0,0,7,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2036,        a = prodA >>> 32;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2037,        b = prodA & 0xffffffffL;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2039,        c = PI_O_4_BITS[0] >>> 32;,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2040,        d = PI_O_4_BITS[0] & 0xffffffffL;,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2042,        ac = a * c;,2,0,0,0,0,0,0,0,0,3,11,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2043,        bd = b * d;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2044,        bc = b * c;,6,1,1,0,0,0,2,0,0,23,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2045,        ad = a * d;,6,1,0,0,0,0,0,2,0,10,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2047,        long prod2B = bd + (ad << 32);,18,3,1,1,2,0,0,0,0,24,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2048,        long prod2A = ac + (ad >>> 32);,4,0,0,1,2,0,0,0,0,4,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2050,        bita = (bd & 0x8000000000000000L) != 0;,2,0,0,1,2,1,0,2,0,5,39,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2051,        bitb = (ad & 0x80000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2052,        bitsum = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2055,        if ( (bita && bitb) ||,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2057,            prod2A++;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2060,        bita = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2061,        bitb = (bc & 0x80000000L ) != 0;,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2063,        prod2B = prod2B + (bc << 32);,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2064,        prod2A = prod2A + (bc >>> 32);,8,3,0,1,2,0,0,0,0,12,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2066,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2069,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2071,            prod2A++;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2075,        c = PI_O_4_BITS[1] >>> 32;,6,1,1,1,2,0,0,0,0,12,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2076,        d = PI_O_4_BITS[1] & 0xffffffffL;,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2077,        ac = a * c;,4,1,0,0,0,0,12,0,0,17,11,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2078,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2079,        ad = a * d;,6,1,0,0,0,0,6,0,0,14,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2082,        ac = ac + ((bc + ad) >>> 32);,22,9,0,2,4,0,0,0,0,32,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2084,        bita = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2085,        bitb = (ac & 0x8000000000000000L ) != 0;,8,3,0,1,2,0,0,0,0,13,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2086,        prod2B += ac;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2087,        bitsum = (prod2B & 0x8000000000000000L) != 0;,10,4,0,1,2,0,0,0,0,15,45,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2089,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2091,            prod2A++;,10,1,0,0,0,0,0,0,0,14,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2095,        a = prodB >>> 32;,2,0,0,0,0,0,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2096,        b = prodB & 0xffffffffL;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2097,        c = PI_O_4_BITS[0] >>> 32;,10,2,1,1,2,0,0,0,0,16,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2098,        d = PI_O_4_BITS[0] & 0xffffffffL;,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2099,        ac = a * c;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2100,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2101,        ad = a * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2104,        ac = ac + ((bc + ad) >>> 32);,8,3,0,2,4,0,0,0,0,12,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2106,        bita = (prod2B & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2107,        bitb = (ac & 0x8000000000000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2108,        prod2B += ac;,4,0,0,0,0,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2109,        bitsum = (prod2B & 0x8000000000000000L) != 0;,4,1,0,1,2,0,0,0,0,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2111,        if ( (bita && bitb) ||,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2113,            prod2A++;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2117,        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits,12,5,0,1,2,0,0,0,0,18,68,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2118,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits,10,5,0,4,8,0,0,0,0,15,102,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2120,        double sumA = tmpA + tmpB;,6,1,0,0,0,0,0,0,0,7,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2121,        double sumB = -(sumA - tmpA - tmpB);,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2124,        result[0] = intPart;,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2125,        result[1] = sumA * 2.0;,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2126,        result[2] = sumB * 2.0;,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2127,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2135,        boolean negative = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2136,        int quadrant = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2138,        double xb = 0.0;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2141,        xa = x;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2142,        if (x < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2143,            negative = true;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2144,            xa = -xa;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2148,        if (xa == 0.0) {,8,2,0,1,3,0,0,0,0,11,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2149,            long bits = Double.doubleToLongBits(x);,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2150,            if (bits < 0) {,2,1,0,1,3,0,0,0,0,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2151,                return -0.0;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2153,            return 0.0;,2,1,0,0,0,1,0,0,0,3,11,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2156,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2157,            return Double.NaN;,6,1,0,0,0,1,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2161,        if (xa > 3294198.0) {,4,1,0,1,3,0,6,0,0,11,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2165,            double reduceResults[] = new double[3];,0,0,0,2,4,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2166,"            reducePayneHanek(xa, reduceResults);",0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2167,            quadrant = ((int) reduceResults[0]) & 3;,0,0,0,3,6,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2168,            xa = reduceResults[1];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2169,            xb = reduceResults[2];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2170,        } else if (xa > 1.5707963267948966) {,8,2,0,1,4,0,0,0,0,10,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2175,            int k = (int)(xa * 0.6366197723675814);,0,0,0,2,4,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2181,                double a = -k * 1.570796251296997;,20,5,0,0,0,1,0,0,0,27,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2182,                remA = xa + a;,8,2,0,0,0,0,0,0,0,11,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2183,                remB = -(remA - xa - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2185,                a = -k * 7.549789948768648E-8;,6,1,0,0,0,0,0,0,0,11,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2186,                double b = remA;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2187,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2188,                remB += -(remA - b - a);,16,3,0,1,2,0,0,0,0,21,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2190,                a = -k * 6.123233995736766E-17;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2191,                b = remA;,18,5,0,0,0,0,0,0,0,27,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2192,                remA = a + b;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2193,                remB += -(remA - b - a);,2,0,0,1,2,0,0,0,0,2,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2195,                if (remA > 0.0) {,6,1,0,1,3,0,0,0,0,8,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2196,                    break;,4,0,0,0,0,0,4,2,0,10,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2202,                k--;,6,0,0,0,0,0,0,0,0,7,4,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2203,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2204,            quadrant = k & 3;,4,1,0,0,0,0,0,0,0,6,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2205,            xa = remA;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2206,            xb = remB;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2209,        if (negative) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2210,            quadrant ^= 2;  // Flip bit 1,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2213,        switch (quadrant) {,4,1,0,1,3,0,4,0,0,9,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2215,"                return sinQ(xa, xb);",0,0,0,1,2,1,6,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2217,"                return cosQ(xa, xb);",0,0,0,1,2,1,6,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2219,"                return -sinQ(xa, xb);",0,0,0,1,2,1,6,0,0,7,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2221,"                return -cosQ(xa, xb);",12,2,0,1,2,1,6,0,0,22,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2223,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2233,        int quadrant = 0;,0,0,0,0,0,0,4,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2236,        double xa = x;,4,0,0,0,0,0,0,0,0,4,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2237,        if (x < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2238,            xa = -xa;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2241,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,18,4,0,1,3,0,0,0,0,23,49,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2242,            return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2246,        double xb = 0;,6,1,0,0,0,0,0,0,0,8,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2247,        if (xa > 3294198.0) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2251,            double reduceResults[] = new double[3];,10,2,0,2,4,1,0,0,0,13,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2252,"            reducePayneHanek(xa, reduceResults);",0,0,0,1,2,0,6,0,0,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2253,            quadrant = ((int) reduceResults[0]) & 3;,2,1,1,3,6,0,0,0,0,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2254,            xa = reduceResults[1];,4,0,1,1,2,0,4,0,0,11,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2255,            xb = reduceResults[2];,10,2,1,1,2,0,4,0,0,21,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2256,        } else if (xa > 1.5707963267948966) {,2,1,0,1,4,0,0,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2261,            int k = (int)(xa * 0.6366197723675814);,12,1,1,2,4,0,0,0,0,15,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2267,                double a = -k * 1.570796251296997;,10,3,0,0,0,0,8,0,0,22,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2268,                remA = xa + a;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2269,                remB = -(remA - xa - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2271,                a = -k * 7.549789948768648E-8;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2272,                double b = remA;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2273,                remA = a + b;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2274,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2276,                a = -k * 6.123233995736766E-17;,4,0,0,0,0,0,0,0,0,5,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2277,                b = remA;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2278,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2279,                remB += -(remA - b - a);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2281,                if (remA > 0.0) {,2,1,0,1,3,0,0,0,0,3,17,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2282,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2288,                k--;,2,0,0,0,0,0,0,0,0,3,4,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2289,            },6,1,0,0,1,0,0,0,0,8,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2290,            quadrant = k & 3;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2291,            xa = remA;,10,2,1,0,0,0,0,0,0,18,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2292,            xb = remB;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2298,        switch (quadrant) {,2,0,0,1,3,0,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2300,"                return cosQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2302,"                return -sinQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2304,"                return -cosQ(xa, xb);",4,0,0,1,2,1,0,0,0,4,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2306,"                return sinQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2308,                return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2318,        boolean negative = false;,2,0,0,0,0,0,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2319,        int quadrant = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2322,        double xa = x;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2323,        if (x < 0) {,8,2,0,1,3,0,4,0,0,15,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2324,            negative = true;,2,0,0,0,0,0,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2325,            xa = -xa;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2329,        if (xa == 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2330,            long bits = Double.doubleToLongBits(x);,8,1,0,1,2,0,6,0,0,16,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2331,            if (bits < 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2332,                return -0.0;,4,1,0,0,0,1,0,0,0,6,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2334,            return 0.0;,2,0,0,0,0,1,0,0,0,2,11,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2337,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2338,            return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2342,        double xb = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2343,        if (xa > 3294198.0) {,4,1,1,1,3,0,0,0,0,8,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2347,            double reduceResults[] = new double[3];,4,0,0,2,4,0,0,0,0,4,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2348,"            reducePayneHanek(xa, reduceResults);",0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2349,            quadrant = ((int) reduceResults[0]) & 3;,4,1,1,3,6,0,6,0,0,17,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2350,            xa = reduceResults[1];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2351,            xb = reduceResults[2];,0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2352,        } else if (xa > 1.5707963267948966) {,2,1,0,1,4,0,0,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2357,            int k = (int)(xa * 0.6366197723675814);,0,0,0,2,4,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2363,                double a = -k * 1.570796251296997;,2,1,0,0,0,0,0,0,0,3,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2364,                remA = xa + a;,6,1,0,0,0,0,0,0,0,8,14,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2365,                remB = -(remA - xa - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2367,                a = -k * 7.549789948768648E-8;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2368,                double b = remA;,8,0,0,0,0,0,0,0,0,8,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2369,                remA = a + b;,8,2,0,0,0,0,0,0,0,11,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2370,                remB += -(remA - b - a);,14,2,0,1,2,0,0,0,0,19,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2372,                a = -k * 6.123233995736766E-17;,6,2,0,0,0,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2373,                b = remA;,4,0,0,0,0,0,0,0,0,5,9,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2374,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2375,                remB += -(remA - b - a);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2377,                if (remA > 0.0) {,2,1,0,1,3,0,0,0,0,3,17,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2378,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2384,                k--;,2,0,0,0,0,0,0,0,0,3,4,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2385,            },8,2,0,0,1,0,0,0,0,11,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2386,            quadrant = k & 3;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2387,            xa = remA;,4,1,0,0,0,1,0,0,0,6,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2388,            xb = remB;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2391,        if (xa > 1.5) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2393,            final double pi2a = 1.5707963267948966;,2,0,0,0,0,1,0,0,0,3,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2394,            final double pi2b = 6.123233995736766E-17;,0,0,0,0,0,0,0,0,0,0,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2396,            final double a = pi2a - xa;,6,1,0,0,0,1,0,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2397,            double b = -(a - pi2a + xa);,18,3,0,1,2,0,0,0,0,22,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2398,            b += pi2b - xb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2400,            xa = a + b;,6,1,0,0,0,0,0,0,0,8,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2401,            xb = -(xa - a - b);,0,0,0,1,2,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2402,            quadrant ^= 1;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2403,            negative ^= true;,2,0,0,0,0,0,0,0,0,4,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2407,        if ((quadrant & 1) == 0) {,0,0,0,2,5,0,0,0,0,7,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2408,"            result = tanQ(xa, xb, false);",10,1,0,1,2,0,6,0,0,20,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2410,"            result = -tanQ(xa, xb, true);",0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2413,        if (negative) {,4,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2414,            result = -result;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2417,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2426,"        return atan(x, 0.0, false);",0,0,0,1,2,1,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2436,        boolean negate = false;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2439,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,4,1,0,1,3,1,0,0,0,6,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2440,"            return leftPlane ? copySign(Math.PI, xa) : xa;",8,0,0,1,2,1,4,0,0,12,46,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2443,        if (xa < 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2445,            xa = -xa;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2446,            xb = -xb;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2447,            negate = true;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2450,        if (xa > 1.633123935319537E16) { // Very large input,6,1,0,1,3,0,0,0,0,8,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2451,            return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);,0,0,0,3,6,1,0,0,0,10,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2455,        if (xa < 1) {,6,1,0,1,3,1,0,0,0,8,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2456,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,8,4,0,4,8,0,0,0,0,14,65,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2458,            final double oneOverXa = 1 / xa;,0,0,0,0,0,0,0,0,0,0,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2459,            idx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);,8,4,0,4,8,0,0,0,0,15,89,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2461,        double epsA = xa - TANGENT_TABLE_A[idx];,12,1,0,1,2,0,0,2,0,17,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2462,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,0,0,0,2,4,0,0,0,0,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2463,        epsB += xb - TANGENT_TABLE_B[idx];,4,1,1,1,2,0,0,0,0,10,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2465,        double temp = epsA + epsB;,14,2,1,0,0,1,4,0,0,23,26,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2466,        epsB = -(temp - epsA - epsB);,10,2,1,1,2,0,0,0,0,17,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2467,        epsA = temp;,4,0,0,0,0,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2470,        temp = xa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2471,        double ya = xa + temp - temp;,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2472,        double yb = xb + xa - ya;,18,3,0,0,0,1,0,0,0,23,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2473,        xa = ya;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2474,        xb += yb;,4,1,0,0,0,0,0,0,0,5,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2477,        if (idx == 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2480,            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,0,0,0,5,10,0,0,0,0,15,91,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2482,            ya = epsA * denom;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2483,            yb = epsB * denom;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2484,        } else {,4,0,0,0,2,0,0,0,0,6,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2485,            double temp2 = xa * TANGENT_TABLE_A[idx];,0,0,0,1,2,0,6,0,0,6,41,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2486,            double za = 1d + temp2;,12,7,1,0,0,1,0,0,0,28,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2487,            double zb = -(za - 1d - temp2);,0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2488,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,20,8,1,2,4,1,0,0,0,38,62,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2489,            temp = za + temp2;,6,1,0,0,0,0,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2490,            zb += -(temp - za - temp2);,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2491,            za = temp;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2493,            zb += xb * TANGENT_TABLE_B[idx];,8,4,1,1,2,0,4,0,0,21,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2494,            ya = epsA / za;,6,1,0,0,0,0,4,0,0,13,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2496,            temp = ya * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2497,            final double yaa = (ya + temp) - temp;,14,3,0,1,2,1,0,0,0,18,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2498,            final double yab = ya - yaa;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2500,            temp = za * HEX_40000000;,10,2,1,0,0,1,0,0,0,17,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2501,            final double zaa = (za + temp) - temp;,2,1,0,1,2,0,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2502,            final double zab = za - zaa;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2505,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,0,0,0,1,2,0,0,0,0,3,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2507,            yb += -epsA * zb / za / za;,18,6,0,0,0,1,12,0,0,39,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2508,            yb += epsB / za;,0,0,0,0,0,0,0,0,0,1,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2512,        epsA = ya;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2513,        epsB = yb;,8,1,0,0,0,0,0,0,0,10,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2516,        final double epsA2 = epsA * epsA;,6,1,0,0,0,1,0,0,0,8,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2527,        yb = 0.07490822288864472;,4,1,1,0,0,1,0,0,0,10,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2528,        yb = yb * epsA2 + -0.09088450866185192;,18,7,0,0,0,0,0,0,0,28,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2529,        yb = yb * epsA2 + 0.11111095942313305;,6,2,0,0,0,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2530,        yb = yb * epsA2 + -0.1428571423679182;,6,2,0,0,0,0,0,0,0,10,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2531,        yb = yb * epsA2 + 0.19999999999923582;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2532,        yb = yb * epsA2 + -0.33333333333333287;,0,0,0,0,0,0,0,0,0,0,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2533,        yb = yb * epsA2 * epsA;,8,1,0,0,0,0,0,0,0,10,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2536,        ya = epsA;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2538,        temp = ya + yb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2539,        yb = -(temp - ya - yb);,16,3,0,1,2,0,0,0,0,21,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2540,        ya = temp;,12,2,0,0,0,1,6,0,0,23,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2543,        yb += epsB / (1d + epsA * epsA);,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2546,        double za = EIGHTHS[idx] + ya;,4,1,1,1,2,0,0,0,0,9,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2547,        double zb = -(za - EIGHTHS[idx] - ya);,6,1,1,2,4,0,0,0,0,12,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2548,        temp = za + yb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2549,        zb += -(temp - za - yb);,8,1,0,1,2,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2550,        za = temp;,26,4,0,0,0,0,0,0,0,32,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2552,        double result = za + zb;,6,1,0,0,0,0,0,0,0,7,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2553,        double resultb = -(result - za - zb);,22,6,0,1,2,0,4,0,0,34,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2555,        if (leftPlane) {,8,2,0,1,3,0,0,0,0,11,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2557,            final double pia = 1.5707963267948966 * 2;,4,0,0,0,0,0,0,0,0,5,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2558,            final double pib = 6.123233995736766E-17 * 2;,2,1,0,0,0,1,0,0,0,4,45,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2560,            za = pia - result;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2561,            zb = -(za - pia + result);,14,3,0,1,2,0,0,0,0,20,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2562,            zb += pib - resultb;,2,0,0,0,0,0,0,0,0,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2564,            result = za + zb;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2565,            resultb = -(result - za - zb);,8,1,0,1,2,0,0,0,0,11,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2569,        if (negate ^ leftPlane) {,0,0,0,1,3,0,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2570,            result = -result;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2573,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2583,        if (x != x || y != y) {,0,0,0,1,3,0,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2584,            return Double.NaN;,6,0,0,0,0,1,0,0,0,6,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2587,        if (y == 0) {,10,5,0,1,3,1,0,0,0,16,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2588,            final double result = x * y;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2589,            final double invx = 1d / x;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2590,            final double invy = 1d / y;,4,1,0,0,0,1,0,0,0,6,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2592,            if (invx == 0) { // X is infinite,2,1,0,1,3,0,0,0,0,3,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2593,                if (x > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2594,                    return y; // return +/- 0.0,0,0,0,0,0,2,0,0,0,2,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2596,"                    return copySign(Math.PI, y);",4,0,0,1,2,1,4,0,0,8,28,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2600,            if (x < 0 || invx < 0) {,0,0,0,1,3,0,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2601,                if (y < 0 || invy < 0) {,4,3,0,1,3,0,0,0,0,7,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2602,                    return -Math.PI;,0,0,0,0,0,1,0,0,0,1,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2604,                    return Math.PI;,2,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2607,                return result;,6,1,0,0,0,1,0,0,0,8,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2613,        if (y == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2614,            if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2615,                return Math.PI * F_1_4;,0,0,0,0,0,1,0,0,0,1,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2618,            if (x == Double.NEGATIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2619,                return Math.PI * F_3_4;,0,0,0,0,0,1,0,0,0,1,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2622,            return Math.PI * F_1_2;,0,0,0,0,0,1,0,0,0,1,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2625,        if (y == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2626,            if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2627,                return -Math.PI * F_1_4;,8,2,0,0,0,1,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2630,            if (x == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2631,                return -Math.PI * F_3_4;,6,1,0,0,0,1,0,0,0,8,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2634,            return -Math.PI * F_1_2;,0,0,0,0,0,1,0,0,0,1,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2637,        if (x == Double.POSITIVE_INFINITY) {,14,2,0,1,3,0,0,0,0,18,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2638,            if (y > 0 || 1 / y > 0) {,4,4,0,1,3,0,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2639,                return 0d;,0,0,0,0,0,1,0,0,0,1,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2642,            if (y < 0 || 1 / y < 0) {,12,8,0,1,3,0,0,0,0,21,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2643,                return -0d;,14,1,0,0,0,2,4,0,0,23,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2647,        if (x == Double.NEGATIVE_INFINITY),6,1,0,1,2,0,0,0,0,7,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2649,            if (y > 0.0 || 1 / y > 0.0) {,6,5,0,1,3,0,0,0,0,11,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2650,                return Math.PI;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2653,            if (y < 0 || 1 / y < 0) {,0,0,0,1,3,0,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2654,                return -Math.PI;,4,0,0,0,0,1,0,0,0,5,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2660,        if (x == 0) {,8,2,0,1,3,0,4,0,0,16,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2661,            if (y > 0 || 1 / y > 0) {,0,0,0,1,3,0,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2662,                return Math.PI * F_1_2;,6,1,0,0,0,1,0,0,0,7,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2665,            if (y < 0 || 1 / y < 0) {,0,0,0,1,3,0,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2666,                return -Math.PI * F_1_2;,8,2,0,0,0,1,0,0,0,11,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2671,        final double r = y / x;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2672,        if (Double.isInfinite(r)) { // bypass calculations that can create NaN,2,1,0,2,5,0,0,0,0,3,70,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2673,"            return atan(r, 0, x < 0);",0,0,0,1,2,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2676,        double ra = doubleHighPart(r);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2677,        double rb = r - ra;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2680,        final double xa = doubleHighPart(x);,2,0,0,1,2,1,4,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2681,        final double xb = x - xa;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2683,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,26,13,0,1,2,0,0,0,0,40,54,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2685,        final double temp = ra + rb;,6,1,0,0,0,1,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2686,        rb = -(temp - ra - rb);,6,2,0,1,2,0,0,0,0,10,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2687,        ra = temp;,8,2,1,0,0,0,0,0,0,15,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2689,        if (ra == 0) { // Fix up the sign so atan works correctly,2,1,0,1,3,0,0,0,0,3,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2690,"            ra = copySign(0d, y);",6,0,0,1,2,0,4,0,0,11,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2694,"        final double result = atan(ra, rb, x < 0);",4,1,0,1,2,1,6,0,0,12,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2696,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2704,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2705,          return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2708,      if (x > 1.0 || x < -1.0) {,4,3,0,1,3,0,0,0,0,8,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2709,          return Double.NaN;,10,1,0,0,0,1,0,0,0,11,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2712,      if (x == 1.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2713,          return Math.PI/2.0;,4,1,0,0,0,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2716,      if (x == -1.0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2717,          return -Math.PI/2.0;,4,1,0,0,0,1,0,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2720,      if (x == 0.0) { // Matches +/- 0.0; return correct sign,14,2,0,1,3,1,0,0,0,17,55,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2721,          return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2727,      double temp = x * HEX_40000000;,8,2,0,0,0,0,0,0,0,10,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2728,      final double xa = x + temp - temp;,14,3,1,0,0,1,0,0,0,20,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2729,      final double xb = x - xa;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2732,      double ya = xa*xa;,6,1,0,0,0,0,0,0,0,7,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2733,      double yb = xa*xb*2.0 + xb*xb;,10,3,0,0,0,0,0,0,0,13,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2736,      ya = -ya;,4,0,0,0,0,0,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2737,      yb = -yb;,4,0,0,0,0,0,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2739,      double za = 1.0 + ya;,4,1,0,0,0,0,6,0,0,11,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2740,      double zb = -(za - 1.0 - ya);,6,1,0,1,2,0,0,0,0,9,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2742,      temp = za + yb;,10,1,0,0,0,0,0,0,0,13,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2743,      zb += -(temp - za - yb);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2744,      za = temp;,8,1,0,0,0,0,0,0,0,10,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2748,      y = sqrt(za);,8,7,0,1,2,0,4,0,0,20,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2749,      temp = y * HEX_40000000;,0,0,1,0,0,0,0,0,0,7,24,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2750,      ya = y + temp - temp;,14,2,0,0,0,0,0,0,0,18,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2751,      yb = y - ya;,6,1,0,0,0,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2754,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0,0,0,2,4,0,0,0,0,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2757,      double dx = zb / (2.0*y);,4,1,0,1,2,0,0,0,0,5,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2760,      double r = x/y;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2761,      temp = r * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2762,      double ra = r + temp - temp;,10,3,0,0,0,0,4,0,0,17,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2763,      double rb = r - ra;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2765,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,0,0,0,1,2,0,0,0,0,3,83,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2766,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,0,0,0,0,0,0,0,0,0,0,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2768,      temp = ra + rb;,0,0,0,0,0,0,4,0,0,4,15,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2769,      rb = -(temp - ra - rb);,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2770,      ra = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2772,"      return atan(ra, rb, false);",0,0,0,1,2,1,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2780,      if (x != x) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2781,          return Double.NaN;,0,0,0,0,0,1,6,0,0,7,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2784,      if (x > 1.0 || x < -1.0) {,10,4,0,1,3,1,12,0,0,28,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2785,          return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2788,      if (x == -1.0) {,2,1,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2789,          return Math.PI;,12,2,0,0,0,1,0,0,0,14,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2792,      if (x == 1.0) {,4,0,0,1,3,0,0,0,0,4,15,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2793,          return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2796,      if (x == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2797,          return Math.PI/2.0;,4,1,0,0,0,1,4,0,0,9,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2803,      double temp = x * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2804,      final double xa = x + temp - temp;,14,3,0,0,0,1,0,0,0,18,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2805,      final double xb = x - xa;,6,1,0,0,0,1,0,0,0,8,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2808,      double ya = xa*xa;,8,1,0,0,0,0,4,0,0,14,18,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2809,      double yb = xa*xb*2.0 + xb*xb;,4,0,0,0,0,0,0,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2812,      ya = -ya;,4,0,0,0,0,0,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2813,      yb = -yb;,6,1,0,0,0,0,0,0,0,7,9,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2815,      double za = 1.0 + ya;,12,1,0,0,0,0,0,0,0,15,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2816,      double zb = -(za - 1.0 - ya);,6,1,0,1,2,0,0,0,0,8,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2818,      temp = za + yb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2819,      zb += -(temp - za - yb);,2,1,1,1,2,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2820,      za = temp;,8,1,0,0,0,0,0,0,0,11,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2823,      double y = sqrt(za);,14,2,0,1,2,0,8,0,0,25,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2824,      temp = y * HEX_40000000;,10,1,0,0,0,0,0,0,0,13,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2825,      ya = y + temp - temp;,12,2,0,0,0,1,2,8,0,26,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2826,      yb = y - ya;,6,1,0,0,0,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2829,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,18,8,0,2,4,0,0,0,0,27,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2832,      yb += zb / (2.0*y);,6,2,0,1,2,0,0,0,0,9,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2833,      y = ya+yb;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2834,      yb = -(y - ya - yb);,8,1,0,1,2,0,0,0,0,11,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2837,      double r = y/x;,6,1,0,0,0,0,0,0,0,7,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2840,      if (Double.isInfinite(r)) { // x is effectively zero,2,0,0,2,5,1,10,0,0,13,52,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2841,          return Math.PI/2; // so return the appropriate value,0,0,0,0,0,2,0,0,0,2,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2844,      double ra = doubleHighPart(r);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2845,      double rb = r - ra;,6,1,0,0,0,0,0,0,0,7,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2847,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,0,0,0,1,2,0,0,0,0,3,83,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2848,      rb += yb / x;  // Add in effect additional bits of sqrt.,6,1,0,0,0,0,0,0,0,8,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2850,      temp = ra + rb;,0,0,0,0,0,0,0,0,0,1,15,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2851,      rb = -(temp - ra - rb);,8,1,0,1,2,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2852,      ra = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2854,"      return atan(ra, rb, x<0);",0,0,0,1,2,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2863,      long inbits = Double.doubleToLongBits(x);,4,0,0,1,2,0,10,0,0,14,41,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2864,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0,0,0,3,6,0,0,0,0,9,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2865,      boolean subnormal = false;,2,0,0,0,0,0,0,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2867,      if (exponent == -1023) {,4,1,0,1,3,0,0,2,0,8,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2868,          if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2869,              return x;,2,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2873,          subnormal = true;,2,0,0,0,0,0,0,0,0,3,17,16,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2874,          x *= 1.8014398509481984E16;  // 2^54,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2875,          inbits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,9,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2876,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,12,4,0,3,6,0,0,0,0,19,49,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2879,      if (exponent == 1024) {,0,0,0,1,3,0,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2881,          return x;,2,0,0,0,0,1,0,0,0,4,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2885,      int exp3 = exponent / 3;,4,1,0,0,0,0,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2888,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,0,0,0,1,3,0,0,0,0,4,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2892,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,2,1,0,2,4,0,0,0,0,3,98,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2895,      double est = -0.010714690733195933;,2,0,0,0,0,0,0,0,0,3,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2896,      est = est * mant + 0.0875862700108075;,10,2,0,0,0,0,0,0,0,13,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2897,      est = est * mant + -0.3058015757857271;,6,2,0,0,0,0,0,0,0,10,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2898,      est = est * mant + 0.7249995199969751;,6,2,0,0,0,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2899,      est = est * mant + 0.5039018405998233;,6,2,0,0,0,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2901,      est *= CBRTTWO[exponent % 3 + 2];,4,2,1,1,2,0,0,0,0,9,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2906,      final double xs = x / (p2*p2*p2);,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2907,      est += (xs - est*est*est) / (3*est*est);,16,4,0,2,4,0,0,2,0,23,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2908,      est += (xs - est*est*est) / (3*est*est);,14,4,0,2,4,0,0,0,0,19,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2911,      double temp = est * HEX_40000000;,8,1,0,0,0,0,0,0,0,10,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2912,      double ya = est + temp - temp;,8,2,0,0,0,0,6,0,0,16,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2913,      double yb = est - ya;,6,1,0,0,0,0,0,0,0,7,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2915,      double za = ya * ya;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2916,      double zb = ya * yb * 2.0 + yb * yb;,10,3,0,0,0,0,0,0,0,13,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2917,      temp = za * HEX_40000000;,28,10,0,0,0,0,0,0,0,40,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2918,      double temp2 = za + temp - temp;,8,2,0,0,0,0,0,0,0,10,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2919,      zb += za - temp2;,6,1,0,0,0,0,0,0,0,8,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2920,      za = temp2;,10,2,0,0,0,1,0,0,0,13,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2922,      zb = za * yb + ya * zb + zb * yb;,14,5,0,0,0,0,0,0,0,20,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2923,      za = za * ya;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2925,      double na = xs - za;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2926,      double nb = -(na - xs + za);,8,2,0,1,2,0,0,0,0,11,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2927,      nb -= zb;,4,1,0,0,0,0,0,0,0,5,9,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2929,      est += (na+nb)/(3*est*est);,0,0,0,2,4,0,0,0,0,6,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2932,      est *= p2;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2934,      if (subnormal) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2935,          est *= 3.814697265625E-6;  // 2^-18,4,2,0,0,0,0,0,0,0,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2938,      return est;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2948,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,2,2,0,2,5,1,6,0,0,10,79,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2949,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2953,        final double facta = 0.01745329052209854;,2,0,0,0,0,1,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2954,        final double factb = 1.997844754509471E-9;,2,0,0,0,0,1,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2956,        double xa = doubleHighPart(x);,2,0,0,1,2,0,4,0,0,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2957,        double xb = x - xa;,6,1,0,0,0,0,6,0,0,13,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2959,        double result = xb * factb + xb * facta + xa * factb + xa * facta;,0,0,0,0,0,0,0,0,0,0,66,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2960,        if (result == 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2961,            result = result * x; // ensure correct sign if calculation underflows,6,1,0,0,0,0,0,0,0,8,69,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2963,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2973,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,2,2,0,2,5,1,6,0,0,10,79,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2974,            return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2978,        final double facta = 57.2957763671875;,2,0,0,0,0,1,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2979,        final double factb = 3.145894820876798E-6;,2,0,0,0,0,1,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2981,        double xa = doubleHighPart(x);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2982,        double xb = x - xa;,6,1,0,0,0,0,0,0,0,7,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2984,        return xb * factb + xb * facta + xa * factb + xa * facta;,0,0,0,0,0,1,0,0,0,1,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2993,        return (x < 0) ? -x : x;,8,1,0,1,2,1,0,2,0,12,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3002,        return (x < 0l) ? -x : x;,6,1,0,1,2,1,0,0,0,8,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3011,        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0,12,2,1,2,4,1,0,0,0,18,64,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3029,        if (Double.isInfinite(x)) {,10,3,1,2,5,0,6,0,0,25,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3030,            return Double.POSITIVE_INFINITY;,12,1,0,0,0,1,0,0,0,14,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3032,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,2,2,0,3,6,1,12,0,0,16,72,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3041,        if (Float.isInfinite(x)) {,8,2,0,2,5,1,0,0,0,11,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3042,            return Float.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3044,        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));,4,3,0,3,6,1,12,0,0,19,66,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3056,        if ((n > -1023) && (n < 1024)) {,0,0,0,3,7,0,0,0,0,10,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3057,            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);,4,3,0,4,8,1,4,0,0,11,62,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3061,        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {,2,2,0,4,9,0,12,0,0,16,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3062,            return d;,6,0,0,0,0,2,0,0,0,7,9,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3064,        if (n < -2098) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3065,            return (d > 0) ? 0.0 : -0.0;,0,0,0,1,2,1,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3067,        if (n > 2097) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3068,            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,12,1,0,1,2,1,6,4,0,23,69,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3072,        final long bits = Double.doubleToLongBits(d);,2,0,0,1,2,1,6,0,0,9,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3073,        final long sign = bits & 0x8000000000000000L;,0,0,0,0,0,0,0,0,0,0,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3074,        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;,4,2,0,3,6,0,0,0,0,6,48,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3075,        long mantissa   = bits & 0x000fffffffffffffL;,4,1,0,0,0,0,0,0,0,5,45,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3078,        int scaledExponent = exponent + n;,12,2,0,0,0,0,0,0,0,15,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3080,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3082,            if (scaledExponent > 0) {,4,1,0,1,3,0,4,0,0,9,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3084,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0,0,0,4,8,1,0,0,0,13,82,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3085,            } else if (scaledExponent > -53) {,0,0,0,1,4,0,0,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3089,                mantissa = mantissa | (1L << 52);,4,2,0,1,2,0,0,0,0,7,33,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3092,                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));,8,2,0,2,4,1,0,0,0,13,73,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3093,                mantissa = mantissa >>> (1 - scaledExponent);,6,2,0,1,2,0,0,0,0,9,45,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3094,                if (mostSignificantLostBit != 0) {,4,2,0,1,3,0,0,0,0,6,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3096,                    mantissa++;,4,1,0,0,0,0,4,4,0,14,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3098,                return Double.longBitsToDouble(sign | mantissa);,4,0,0,1,2,1,0,0,0,4,48,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3102,                return (sign == 0L) ? 0.0 : -0.0;,2,1,0,1,2,1,0,0,0,4,33,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3106,            if (exponent == 0) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3109,                while ((mantissa >>> 52) != 1) {,0,0,0,2,5,0,6,0,0,6,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3110,                    mantissa = mantissa << 1;,4,1,0,0,0,0,0,0,0,6,25,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3111,                    --scaledExponent;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3113,                ++scaledExponent;,10,2,0,0,0,1,0,0,0,14,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3114,                mantissa = mantissa & 0x000fffffffffffffL;,4,1,0,0,0,0,0,0,0,6,42,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3116,                if (scaledExponent < 2047) {,8,2,0,1,3,1,0,0,0,11,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3117,                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,6,2,0,4,8,1,4,0,0,12,82,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3119,                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,18,2,0,1,2,2,8,0,0,29,74,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3122,            } else if (scaledExponent < 2047) {,4,1,0,1,4,1,4,4,0,14,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3123,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,6,2,0,4,8,1,4,0,0,12,82,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3125,                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,2,0,0,1,2,2,6,0,0,9,74,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3140,        if ((n > -127) && (n < 128)) {,4,3,0,3,7,0,0,0,0,8,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3141,            return f * Float.intBitsToFloat((n + 127) << 23);,4,3,0,2,4,1,4,0,0,11,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3145,        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {,0,0,0,4,9,0,0,0,0,13,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3146,            return f;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3148,        if (n < -277) {,2,1,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3149,            return (f > 0) ? 0.0f : -0.0f;,2,1,0,1,2,1,0,0,0,4,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3151,        if (n > 276) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3152,            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,10,1,0,1,2,1,0,0,0,11,67,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3156,        final int bits = Float.floatToIntBits(f);,2,0,0,1,2,1,6,0,0,9,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3157,        final int sign = bits & 0x80000000;,4,1,0,0,0,1,0,0,0,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3158,        int  exponent  = (bits >>> 23) & 0xff;,4,2,0,1,2,0,0,0,0,6,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3159,        int mantissa   = bits & 0x007fffff;,0,0,0,0,0,0,8,0,0,8,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3162,        int scaledExponent = exponent + n;,10,1,0,0,0,0,0,0,0,11,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3164,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3166,            if (scaledExponent > 0) {,0,0,0,1,3,0,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3168,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,12,3,0,2,4,1,4,0,0,19,70,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3169,            } else if (scaledExponent > -24) {,2,1,0,1,4,0,0,0,0,4,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3173,                mantissa = mantissa | (1 << 23);,14,3,0,1,2,0,0,0,0,20,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3176,                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));,6,2,0,2,4,1,0,0,0,10,71,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3177,                mantissa = mantissa >>> (1 - scaledExponent);,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3178,                if (mostSignificantLostBit != 0) {,2,1,0,1,3,0,0,0,0,3,34,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3180,                    mantissa++;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3182,                return Float.intBitsToFloat(sign | mantissa);,4,1,0,1,2,1,4,0,0,9,45,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3186,                return (sign == 0) ? 0.0f : -0.0f;,22,9,0,1,2,2,0,0,0,33,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3190,            if (exponent == 0) {,2,1,0,1,3,0,0,0,0,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3193,                while ((mantissa >>> 23) != 1) {,2,2,0,2,5,0,0,0,0,4,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3194,                    mantissa = mantissa << 1;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3195,                    --scaledExponent;,2,0,0,0,0,0,0,0,0,3,17,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3197,                ++scaledExponent;,2,0,0,0,0,0,0,0,0,3,17,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3198,                mantissa = mantissa & 0x007fffff;,4,1,0,0,0,0,0,0,0,6,33,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3200,                if (scaledExponent < 255) {,2,1,0,1,3,0,0,0,0,3,27,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3201,                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0,0,0,2,4,1,0,0,0,7,70,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3203,                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,10,1,0,1,2,1,0,0,0,11,71,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3206,            } else if (scaledExponent < 255) {,0,0,0,1,4,0,0,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3207,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0,0,0,2,4,1,0,0,0,7,70,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3209,                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0,0,0,1,2,1,0,0,0,4,71,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3249,        if (Double.isNaN(d) || Double.isNaN(direction)) {,4,1,1,3,7,0,10,0,0,27,49,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3250,            return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3251,        } else if (d == direction) {,8,2,0,1,4,0,0,0,0,10,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3252,            return direction;,2,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3253,        } else if (Double.isInfinite(d)) {,0,0,0,2,6,0,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3254,            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;,26,6,0,1,2,1,0,0,0,34,54,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3255,        } else if (d == 0) {,6,1,0,1,4,0,0,0,0,8,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3256,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,10,1,0,1,2,1,0,0,0,12,62,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3261,        final long bits = Double.doubleToLongBits(d);,2,0,0,1,2,1,6,0,0,9,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3262,        final long sign = bits & 0x8000000000000000L;,4,1,0,0,0,1,2,0,0,8,45,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3263,        if ((direction < d) ^ (sign == 0L)) {,6,3,0,3,7,0,0,0,0,9,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3264,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));,0,0,0,3,6,1,0,0,0,10,74,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3266,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));,0,0,0,3,6,1,6,0,0,6,74,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3305,        if (Double.isNaN(f) || Double.isNaN(direction)) {,0,1,0,3,7,0,12,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3306,            return Float.NaN;,4,0,0,0,0,1,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3307,        } else if (f == direction) {,4,1,0,1,4,0,0,0,0,5,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3308,            return (float) direction;,2,0,0,1,2,1,0,0,0,2,25,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3309,        } else if (Float.isInfinite(f)) {,0,0,0,2,6,0,0,0,0,8,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3310,            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;,0,0,0,1,2,1,6,0,0,6,53,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3311,        } else if (f == 0f) {,2,1,0,1,4,0,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3312,            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;,10,1,0,1,2,1,0,0,0,12,60,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3317,        final int bits = Float.floatToIntBits(f);,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3318,        final int sign = bits & 0x80000000;,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3319,        if ((direction < f) ^ (sign == 0)) {,6,3,0,3,7,0,0,0,0,9,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3320,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));,4,3,0,3,6,1,4,0,0,11,62,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3322,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));,0,0,0,3,6,1,0,0,0,10,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3335,            return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3339,            return x;,4,1,0,0,0,1,0,4,0,9,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3344,            y--;,0,0,0,0,0,0,0,0,0,0,4,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3348,            return x*y;,4,1,0,0,0,1,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3362,            return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3370,        y += 1.0;,2,0,0,0,0,0,0,0,0,3,9,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3372,        if (y == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3373,            return x*y;,12,4,0,0,0,1,0,0,0,16,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3376,        return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3384,        double y = floor(x);,4,0,1,1,2,0,4,0,0,10,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3385,        double d = x - y;,6,1,0,0,0,0,0,0,0,7,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3387,        if (d > 0.5) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3388,            if (y == -1.0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3389,                return -0.0; // Preserve sign of operand,0,0,0,0,0,1,0,0,0,1,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3391,            return y+1.0;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3393,        if (d < 0.5) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3394,            return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3398,        long z = (long) y;,0,0,0,1,2,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3399,        return (z & 1) == 0 ? y : y + 1.0;,24,7,0,1,2,2,0,0,0,33,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3407,        return (long) floor(x + 0.5);,2,1,0,2,4,1,2,0,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3415,        return (int) floor(x + 0.5f);,2,1,0,2,4,1,2,0,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3424,        return (a <= b) ? a : b;,8,1,0,1,2,1,6,0,0,15,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3433,        return (a <= b) ? a : b;,0,1,0,1,2,1,12,0,0,13,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3442,        if (a > b) {,6,2,0,1,3,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3443,            return b;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3445,        if (a < b) {,8,2,0,1,3,0,0,0,0,10,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3446,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3449,        if (a != b) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3450,            return Float.NaN;,8,0,0,0,0,1,2,2,0,12,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3454,        int bits = Float.floatToRawIntBits(a);,2,0,0,1,2,0,0,0,0,2,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3455,        if (bits == 0x80000000) {,0,0,0,1,3,0,4,0,0,5,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3456,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3458,        return b;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3467,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3468,            return b;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3470,        if (a < b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3471,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3474,        if (a != b) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3475,            return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3479,        long bits = Double.doubleToRawLongBits(a);,2,0,0,1,2,0,6,0,0,8,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3480,        if (bits == 0x8000000000000000L) {,2,1,0,1,3,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3481,            return a;,6,1,0,0,0,1,0,0,0,8,9,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3483,        return b;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3492,        return (a <= b) ? b : a;,10,1,0,1,2,2,4,0,0,16,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3501,        return (a <= b) ? b : a;,8,1,0,1,2,1,0,0,0,9,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3510,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3511,            return a;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3513,        if (a < b) {,6,2,0,1,3,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3514,            return b;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3517,        if (a != b) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3518,            return Float.NaN;,4,0,0,0,0,1,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3522,        int bits = Float.floatToRawIntBits(a);,2,0,0,1,2,0,6,0,0,8,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3523,        if (bits == 0x80000000) {,4,1,0,1,3,0,6,0,0,14,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3524,            return b;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3526,        return a;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3536,            return a;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3538,        if (a < b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3539,            return b;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3542,        if (a != b) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3543,            return Double.NaN;,4,0,0,0,0,1,4,0,0,9,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3547,        long bits = Double.doubleToRawLongBits(a);,2,0,0,1,2,0,6,0,0,8,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3548,        if (bits == 0x8000000000000000L) {,2,1,0,1,3,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3549,            return b;,2,0,0,0,0,1,4,0,0,6,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3551,        return a;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3569,        if (Double.isInfinite(x) || Double.isInfinite(y)) {,0,1,0,3,7,0,12,0,0,13,51,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3570,            return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3571,        } else if (Double.isNaN(x) || Double.isNaN(y)) {,0,0,0,3,8,0,0,0,0,11,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3572,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3575,            final int expX = getExponent(x);,2,0,0,1,2,1,4,0,0,7,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3576,            final int expY = getExponent(y);,2,0,0,1,2,1,4,0,0,7,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3577,            if (expX > expY + 27) {,4,2,0,1,3,0,0,0,0,6,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3579,                return abs(x);,0,0,0,1,2,1,4,0,0,4,14,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3580,            } else if (expY > expX + 27) {,0,0,0,1,4,0,0,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3582,                return abs(y);,0,0,0,1,2,1,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3586,                final int middleExp = (expX + expY) / 2;,6,2,0,1,2,1,0,0,0,9,40,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3589,"                final double scaledX = scalb(x, -middleExp);",4,0,0,1,2,1,4,0,0,10,44,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3590,"                final double scaledY = scalb(y, -middleExp);",6,1,1,1,2,1,4,0,0,16,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3593,                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);,10,3,0,1,2,1,2,0,0,16,67,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3596,"                return scalb(scaledH, middleExp);",0,0,0,1,2,1,0,0,0,4,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3624,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation",16,1,0,1,2,2,8,2,0,29,90,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3636,        long m = Double.doubleToLongBits(magnitude);,20,8,1,1,2,0,10,0,0,43,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3637,        long s = Double.doubleToLongBits(sign);,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3638,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,8,7,0,3,7,0,6,0,0,21,69,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3639,            return magnitude;,4,0,0,0,0,1,10,2,0,17,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3641,        return -magnitude; // flip sign,0,0,0,0,0,1,0,0,0,1,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3653,        int m = Float.floatToIntBits(magnitude);,2,0,0,1,2,0,6,0,0,8,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3654,        int s = Float.floatToIntBits(sign);,12,1,0,1,2,0,6,2,0,22,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3655,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,8,7,0,3,7,0,0,0,0,15,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3656,            return magnitude;,2,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3658,        return -magnitude; // flip sign,0,0,0,0,0,1,0,0,0,1,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3671,        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;,2,3,0,4,8,3,6,4,0,17,66,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3684,        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;,6,3,0,3,6,1,0,0,0,10,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3693,        PrintStream out = System.out;,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3694,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_A"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);",4,0,0,1,2,0,8,0,0,13,96,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3695,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_B"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);",4,0,0,1,2,0,8,0,0,13,96,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3696,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_A"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);",0,0,0,1,2,0,0,0,0,3,100,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3697,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_B"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);",4,0,0,1,2,0,8,0,0,13,100,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3698,"        FastMathCalc.printarray(out, ""LN_MANT"",LN_MANT_LEN, lnMant.LN_MANT);",4,0,0,1,2,0,8,0,0,13,68,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3699,"        FastMathCalc.printarray(out, ""SINE_TABLE_A"", SINE_TABLE_LEN, SINE_TABLE_A);",0,0,0,1,2,0,10,0,0,11,75,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3700,"        FastMathCalc.printarray(out, ""SINE_TABLE_B"", SINE_TABLE_LEN, SINE_TABLE_B);",2,0,0,1,2,0,0,0,0,3,75,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3701,"        FastMathCalc.printarray(out, ""COSINE_TABLE_A"", SINE_TABLE_LEN, COSINE_TABLE_A);",0,0,0,1,2,0,10,0,0,11,79,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3702,"        FastMathCalc.printarray(out, ""COSINE_TABLE_B"", SINE_TABLE_LEN, COSINE_TABLE_B);",0,0,0,1,2,0,10,0,0,11,79,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3703,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_A"", SINE_TABLE_LEN, TANGENT_TABLE_A);",0,0,0,1,2,0,10,0,0,11,81,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3704,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_B"", SINE_TABLE_LEN, TANGENT_TABLE_B);",0,0,0,1,2,0,0,0,0,3,81,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3705,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,145,    public ResizableDoubleArray() {,2,0,0,1,3,1,0,0,0,3,31,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,146,        internalArray = new double[initialCapacity];,12,3,1,1,2,0,0,0,0,20,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,147,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,182,    public ResizableDoubleArray(double[] initialArray) {,4,0,0,2,5,1,10,0,0,15,52,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,183,        if (initialArray == null) {,2,1,0,1,3,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,184,            this.internalArray = new double[initialCapacity];,0,0,0,1,2,0,0,0,0,3,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,186,            this.internalArray = new double[initialArray.length];,6,0,0,1,2,0,0,0,0,7,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,187,"            System.arraycopy(initialArray, 0, this.internalArray, 0, initialArray.length);",6,1,0,1,2,0,0,0,0,8,78,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,188,            initialCapacity = initialArray.length;,8,0,0,0,0,1,2,0,0,12,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,189,            numElements = initialArray.length;,6,0,0,0,0,0,0,0,0,7,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,191,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,215,"    public ResizableDoubleArray(int initialCapacity, float expansionFactor) {",6,0,0,1,3,1,0,0,0,7,73,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,216,        this.expansionFactor = expansionFactor;,4,0,0,0,0,0,0,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,217,        setInitialCapacity(initialCapacity);,4,4,0,1,2,0,4,0,0,12,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,218,        internalArray = new double[initialCapacity];,2,0,1,1,2,0,0,0,0,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,219,        setContractionCriteria(expansionFactor +0.5f);,2,1,0,1,2,0,2,0,0,5,46,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,220,    },4,1,0,0,1,0,0,0,0,6,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,242,        float contractionCriteria) {,2,0,0,0,2,0,0,0,0,2,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,243,        this.expansionFactor = expansionFactor;,4,0,0,0,0,0,4,0,0,8,39,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,244,        setContractionCriteria(contractionCriteria);,0,0,0,1,2,0,0,0,0,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,245,        setInitialCapacity(initialCapacity);,0,0,0,1,2,0,4,0,0,4,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,246,        internalArray = new double[initialCapacity];,2,0,1,1,2,0,0,0,0,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,247,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,271,"            float contractionCriteria, int expansionMode) {",4,0,0,0,2,0,0,0,0,4,47,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,272,        this.expansionFactor = expansionFactor;,0,0,0,0,0,0,10,0,0,11,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,273,        setContractionCriteria(contractionCriteria);,4,4,0,1,2,0,4,0,0,12,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,274,        setInitialCapacity(initialCapacity);,0,0,0,1,2,0,4,0,0,4,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,275,        setExpansionMode(expansionMode);,0,0,0,1,2,0,4,0,0,4,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,276,        internalArray = new double[initialCapacity];,2,0,1,1,2,0,0,0,0,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,277,    },6,1,0,0,1,0,0,0,0,8,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,290,        throws NullArgumentException {,0,0,0,0,1,0,0,0,0,1,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,291,        MathUtils.checkNotNull(original);,0,0,0,1,2,0,6,0,0,6,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,292,"        copy(original, this);",8,0,0,1,2,0,10,0,0,21,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,293,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,318,        final double[] tempArray = new double[numElements + values.length + 1];,8,1,0,2,4,1,0,0,0,10,71,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,319,"        System.arraycopy(internalArray, startIndex, tempArray, 0, numElements);",0,0,0,1,2,0,12,0,0,12,71,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,320,"        System.arraycopy(values, 0, tempArray, numElements, values.length);",8,0,0,1,2,0,10,0,0,19,67,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,321,        internalArray = tempArray;,4,0,0,0,0,0,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,322,        startIndex = 0;,2,0,0,0,0,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,323,        numElements += values.length;,6,0,0,0,0,0,0,0,0,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,324,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,343,        double discarded = internalArray[startIndex];,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,345,        if ((startIndex + (numElements + 1)) > internalArray.length) {,8,3,0,3,7,0,0,0,0,11,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,346,            expand();,0,0,0,1,2,0,0,0,0,3,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,349,        startIndex += 1;,2,0,0,0,0,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,352,        internalArray[startIndex + (numElements - 1)] = value;,6,2,1,2,4,0,0,0,0,11,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,355,        if (shouldContract()) {,0,0,0,2,5,0,0,0,0,7,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,356,            contract();,0,0,0,1,2,0,0,0,0,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,358,        return discarded;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,372,        if (numElements < 1) {,6,1,0,1,3,0,0,0,0,8,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,373,            throw new MathIllegalStateException(,0,0,0,0,1,0,0,2,0,2,36,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,377,        double discarded = internalArray[startIndex + (numElements - 1)];,6,2,1,2,4,0,0,0,0,10,65,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,379,        internalArray[startIndex + (numElements - 1)] = value;,0,0,0,2,4,0,0,0,0,6,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,381,        return discarded;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,397,        if (contraction < expansion) {,4,1,0,1,3,0,0,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,398,            throw new MathIllegalArgumentException(,2,0,0,0,1,0,0,0,0,2,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,403,        if (contraction <= 1.0) {,2,1,0,1,3,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,404,            throw new MathIllegalArgumentException(,0,0,0,0,1,0,0,0,0,1,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,409,        if (expansion <= 1.0) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,410,            throw new MathIllegalArgumentException(,0,0,0,0,1,0,0,2,0,2,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,414,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,421,        numElements = 0;,2,0,0,0,0,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,422,        startIndex = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,423,        internalArray = new double[initialCapacity];,0,0,0,1,2,0,0,0,0,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,424,    },6,1,0,0,1,0,0,0,0,8,1,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,455,"        discardExtremeElements(i,true);",0,0,0,1,2,0,4,0,0,5,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,457,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,472,"        discardExtremeElements(i,false);",0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,474,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,496,        if (i > numElements) {,4,0,0,1,3,0,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,497,            throw new MathIllegalArgumentException(,0,0,0,0,1,0,0,2,0,2,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,500,       } else if (i < 0) {,2,1,0,1,4,0,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,501,           throw new MathIllegalArgumentException(,8,3,0,0,1,0,0,0,0,12,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,506,            numElements -= i;,4,0,0,0,0,0,0,0,0,5,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,507,            if (front) {,2,0,0,1,3,0,0,0,0,2,12,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,508,                startIndex += i;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,511,        if (shouldContract()) {,2,0,0,2,5,1,6,2,0,11,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,512,            contract();,0,0,0,1,2,0,2,0,0,2,11,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,514,    },6,1,0,0,1,0,0,0,0,8,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,536,            newSize = internalArray.length + FastMath.round(expansionFactor);,18,5,0,1,2,0,6,0,0,31,65,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,551,        double[] tempArray = new double[size];,2,0,1,2,4,0,0,0,0,4,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,553,"        System.arraycopy(internalArray, 0, tempArray, 0, internalArray.length);",6,0,0,1,2,0,8,0,0,16,71,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,554,        internalArray = tempArray;,0,0,0,0,0,0,0,0,0,0,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,555,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,570,        return contractionCriteria;,4,1,0,0,0,1,0,0,0,5,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,582,        if (index >= numElements) {,10,2,0,1,3,1,0,0,0,13,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,583,            throw new ArrayIndexOutOfBoundsException(index);,2,0,0,1,2,0,0,2,0,4,48,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,584,        } else if (index >= 0) {,2,1,0,1,4,0,0,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,585,            return internalArray[startIndex + index];,4,1,1,1,2,1,0,0,0,7,41,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,587,            throw new ArrayIndexOutOfBoundsException(index);,4,0,0,1,2,0,0,2,0,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,618,        return expansionFactor;,2,0,0,0,0,1,0,0,0,2,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,629,        return expansionMode;,6,1,0,0,0,1,0,0,0,7,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,641,        return internalArray.length;,4,0,0,0,0,1,0,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,651,        return numElements;,2,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,667,        return internalArray;,12,1,0,0,0,1,0,0,0,14,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,676,"        checkContractExpand(contractionCriteria, getExpansionFactor());",0,0,0,2,4,0,6,0,0,6,63,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,677,        synchronized(this) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,678,            this.contractionCriteria = contractionCriteria;,0,0,0,0,0,0,8,0,0,8,47,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,679,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,680,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,696,        if (index < 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,697,            throw new ArrayIndexOutOfBoundsException(index);,2,0,0,1,2,0,0,2,0,4,48,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,699,        if (index + 1 > numElements) {,6,2,0,1,3,0,0,0,0,8,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,700,            numElements = index + 1;,4,1,0,0,0,0,0,0,0,6,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,702,        if ((startIndex + index) >= internalArray.length) {,0,0,0,2,5,0,0,0,0,7,51,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,703,            expandTo(startIndex + (index + 1));,0,0,0,2,4,0,0,0,0,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,705,        internalArray[startIndex + index] = value;,6,1,1,1,2,0,0,0,0,10,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,706,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,720,"        checkContractExpand(getContractionCriteria(), expansionFactor);",0,0,0,2,4,0,6,0,0,6,63,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,722,        synchronized(this) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,723,            this.expansionFactor = expansionFactor;,0,0,0,0,0,0,0,0,0,0,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,724,        },8,1,0,0,1,0,0,0,0,11,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,725,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,735,        if (expansionMode != MULTIPLICATIVE_MODE &&,8,2,0,0,1,0,0,0,0,11,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,737,            throw new MathIllegalArgumentException(,0,0,0,0,1,0,0,2,0,2,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,742,        synchronized(this) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,743,            this.expansionMode = expansionMode;,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,744,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,745,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,760,            throw new MathIllegalArgumentException(,2,0,0,0,1,0,0,2,0,4,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,777,        if (i < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,778,            throw new MathIllegalArgumentException(,0,0,0,0,1,0,0,2,0,2,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,785,        if ((startIndex + i) > internalArray.length) {,8,2,0,2,5,0,0,0,0,10,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,786,            expandTo(startIndex + i);,0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,790,        numElements = i;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,791,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,803,            return (internalArray.length - numElements) > contractionCriteria;,8,2,0,1,2,1,0,0,0,10,66,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,817,        return startIndex;,4,0,0,0,0,1,0,0,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,839,        MathUtils.checkNotNull(source);,0,0,0,1,2,0,6,0,0,6,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,840,        MathUtils.checkNotNull(dest);,2,0,0,1,2,1,8,0,0,11,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,841,        synchronized(source) {,2,0,0,1,3,0,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,842,           synchronized(dest) {,2,0,0,1,3,0,0,0,0,2,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,843,               dest.initialCapacity = source.initialCapacity;,6,0,0,0,0,0,6,0,0,13,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,844,               dest.contractionCriteria = source.contractionCriteria;,0,0,0,0,0,0,0,0,0,0,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,845,               dest.expansionFactor = source.expansionFactor;,8,0,0,0,0,0,0,0,0,9,46,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,846,               dest.expansionMode = source.expansionMode;,8,0,0,0,0,0,0,0,0,9,42,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,847,               dest.internalArray = new double[source.internalArray.length];,0,0,0,1,2,0,0,0,0,3,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,848,"               System.arraycopy(source.internalArray, 0, dest.internalArray,",8,0,0,0,1,0,4,0,0,12,61,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,850,               dest.numElements = source.numElements;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,851,               dest.startIndex = source.startIndex;,14,3,0,0,0,0,0,0,0,18,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,852,           },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,853,       },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,854,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,865,        ResizableDoubleArray result = new ResizableDoubleArray();,2,0,0,1,2,0,0,4,0,6,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,866,"        copy(this, result);",4,1,0,1,2,0,8,0,0,13,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,867,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,881,        if (object == this ) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,882,            return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,884,       if (object instanceof ResizableDoubleArray == false) {,2,1,0,1,3,0,0,2,0,6,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,885,            return false;,10,1,0,0,0,1,0,0,0,13,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,887,       synchronized(this) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,888,           synchronized(object) {,8,0,0,1,3,0,4,0,0,15,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,889,               boolean result = true;,2,0,0,0,0,0,0,0,0,3,22,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,890,               ResizableDoubleArray other = (ResizableDoubleArray) object;,10,1,0,1,2,0,0,4,0,16,59,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,891,               result = result && (other.initialCapacity == initialCapacity);,10,2,0,1,2,0,0,0,0,13,62,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,892,               result = result && (other.contractionCriteria == contractionCriteria);,0,0,0,1,2,0,0,0,0,3,70,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,893,               result = result && (other.expansionFactor == expansionFactor);,10,2,0,1,2,0,0,0,0,13,62,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,894,               result = result && (other.expansionMode == expansionMode);,0,0,0,1,2,0,0,0,0,3,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,895,               result = result && (other.numElements == numElements);,0,0,0,1,2,0,0,0,0,3,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,896,               result = result && (other.startIndex == startIndex);,10,2,0,1,2,0,0,0,0,13,52,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,897,               if (!result) {,2,0,0,1,3,0,0,0,0,3,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,898,                   return false;,0,0,0,0,0,1,0,0,0,1,13,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,900,"                   return Arrays.equals(internalArray, other.internalArray);",4,0,0,1,2,1,10,0,0,14,57,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,902,           },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,903,       },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,914,        int[] hashData = new int[7];,2,0,0,2,4,0,0,0,0,2,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,915,        hashData[0] = new Float(expansionFactor).hashCode();,2,0,1,3,6,0,2,2,0,9,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,916,        hashData[1] = new Float(contractionCriteria).hashCode();,2,0,1,3,6,0,2,2,0,9,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,917,        hashData[2] = expansionMode;,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,918,            hashData[3] = Arrays.hashCode(internalArray);,0,0,1,2,4,0,6,0,0,9,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,919,            hashData[4] = initialCapacity;,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,920,            hashData[5] = numElements;,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,921,            hashData[6] = startIndex;,0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,922,        return Arrays.hashCode(hashData);,4,0,0,1,2,2,6,4,0,15,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,30,41,        this(LocalizedFormats.NULL_NOT_ALLOWED);,12,3,0,1,2,1,0,0,0,17,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,30,42,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,30,50,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,30,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,46,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,60,        long s = (long)x + (long)y;,6,1,0,2,4,0,0,0,0,7,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,61,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,0,0,0,1,3,0,0,0,0,4,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,62,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);",8,0,0,1,2,0,0,2,0,10,79,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,64,        return (int)s;,0,0,0,1,2,1,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,78,"        return ArithmeticUtils.addAndCheck(a, b, LocalizedFormats.OVERFLOW_IN_ADDITION);",4,0,0,1,2,1,8,0,0,12,80,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,108,"        ArithmeticUtils.checkBinomial(n, k);",0,0,0,1,2,0,8,0,0,8,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,109,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,110,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,112,        if ((k == 1) || (k == n - 1)) {,0,0,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,113,            return n;,6,0,0,0,0,1,6,0,0,12,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,116,        if (k > n / 2) {,4,2,0,1,3,0,0,0,0,6,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,117,"            return binomialCoefficient(n, n - k);",4,1,0,1,2,1,4,0,0,9,37,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,125,        long result = 1;,10,2,0,0,0,0,4,0,0,16,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,126,        if (n <= 61) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,128,            int i = n - k + 1;,18,2,0,0,0,0,4,0,0,27,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,129,            for (int j = 1; j <= k; j++) {,8,1,0,1,3,0,0,0,0,10,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,130,                result = result * i / j;,8,2,0,0,0,0,0,0,0,11,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,131,                i++;,2,0,0,0,0,0,0,0,0,3,4,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,133,        } else if (n <= 66) {,2,1,0,1,4,0,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,136,            int i = n - k + 1;,6,2,0,0,0,0,0,0,0,8,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,137,            for (int j = 1; j <= k; j++) {,8,1,0,1,3,0,0,0,0,10,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,144,"                final long d = gcd(i, j);",2,0,0,1,2,1,6,0,0,9,25,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,145,                result = (result / (j / d)) * (i / d);,12,4,0,3,6,0,0,0,0,17,38,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,146,                i++;,0,0,0,0,0,0,0,0,0,0,4,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,148,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,152,            int i = n - k + 1;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,153,            for (int j = 1; j <= k; j++) {,4,1,0,1,3,0,8,0,0,14,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,154,"                final long d = gcd(i, j);",2,0,0,1,2,1,6,0,0,9,25,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,155,"                result = mulAndCheck(result / (j / d), i / d);",0,0,0,2,4,0,0,0,0,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,156,                i++;,0,0,0,0,0,0,0,0,0,0,4,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,159,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,186,"        ArithmeticUtils.checkBinomial(n, k);",0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,187,        if ((n == k) || (k == 0)) {,0,0,0,3,7,0,0,0,0,10,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,188,            return 1d;,0,0,0,0,0,1,0,0,0,1,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,190,        if ((k == 1) || (k == n - 1)) {,0,0,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,191,            return n;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,193,        if (k > n/2) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,194,"            return binomialCoefficientDouble(n, n - k);",0,0,0,1,2,1,0,0,0,4,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,196,        if (n < 67) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,197,"            return binomialCoefficient(n,k);",0,0,0,1,2,1,6,0,0,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,200,        double result = 1d;,2,0,0,0,0,0,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,201,        for (int i = 1; i <= k; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,202,             result *= (double)(n - k + i) / (double)i;,10,3,0,3,6,0,0,0,0,14,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,205,        return FastMath.floor(result + 0.5);,4,1,1,1,2,1,10,0,0,19,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,228,"        ArithmeticUtils.checkBinomial(n, k);",4,3,0,1,2,0,12,0,0,19,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,229,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,230,            return 0;,4,2,0,0,0,1,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,232,        if ((k == 1) || (k == n - 1)) {,0,0,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,233,            return FastMath.log(n);,0,0,0,1,2,1,6,0,0,6,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,240,        if (n < 67) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,241,"            return FastMath.log(binomialCoefficient(n,k));",0,0,0,2,4,1,0,0,0,7,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,248,        if (n < 1030) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,249,"            return FastMath.log(binomialCoefficientDouble(n, k));",0,0,0,2,4,1,10,0,0,10,53,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,252,        if (k > n / 2) {,4,2,0,1,3,0,0,0,0,6,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,253,"            return binomialCoefficientLog(n, n - k);",10,3,0,1,2,1,24,0,0,37,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,259,        double logSum = 0;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,262,        for (int i = n - k + 1; i <= n; i++) {,14,4,0,1,3,0,0,0,0,20,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,263,            logSum += FastMath.log(i);,2,0,0,1,2,0,6,0,0,9,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,267,        for (int i = 2; i <= k; i++) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,268,            logSum -= FastMath.log(i);,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,271,        return logSum;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,300,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",4,0,0,0,1,0,0,2,0,6,77,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,304,            throw new MathArithmeticException();,22,9,0,1,2,0,0,0,0,32,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,323,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,324,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",0,0,0,0,1,0,0,0,0,1,77,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,327,        if (n < 21) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,328,            return factorial(n);,0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,330,        return FastMath.floor(FastMath.exp(ArithmeticUtils.factorialLog(n)) + 0.5);,2,1,1,3,6,1,6,0,0,14,75,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,341,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,342,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",0,0,0,0,1,0,0,0,0,1,77,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,345,        if (n < 21) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,346,            return FastMath.log(factorial(n));,0,0,0,2,4,1,8,0,0,8,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,348,        double logSum = 0;,10,1,0,0,0,0,0,0,0,12,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,349,        for (int i = 2; i <= n; i++) {,10,1,0,1,3,0,6,0,0,18,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,350,            logSum += FastMath.log(i);,2,0,0,1,2,0,6,0,0,9,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,352,        return logSum;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,385,        int u = p;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,386,        int v = q;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,387,        if ((u == 0) || (v == 0)) {,4,3,0,3,7,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,388,            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {,12,3,0,3,7,0,0,0,0,15,59,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,389,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,",0,0,0,0,1,0,0,0,0,1,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,392,            return FastMath.abs(u) + FastMath.abs(v);,0,0,0,2,4,1,0,0,0,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,399,        if (u > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,400,            u = -u;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,402,        if (v > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,403,            v = -v;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,406,        int k = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,407,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,0,0,0,3,7,0,0,0,0,10,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,409,            u /= 2;,2,0,0,0,0,0,0,0,0,4,7,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,410,            v /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,411,            k++; // cast out twos.,2,0,0,0,0,0,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,413,        if (k == 31) {,10,9,0,1,3,0,0,0,0,20,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,414,"            throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,",6,0,0,0,1,0,0,2,0,8,72,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,419,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,0,0,0,3,6,0,0,0,0,9,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,425,            while ((t & 1) == 0) { // while t is even..,4,2,0,2,5,1,2,0,0,9,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,426,                t /= 2; // cast out twos,18,2,0,0,0,1,2,0,0,27,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,429,            if (t > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,430,                u = -t;,4,0,0,0,0,0,0,0,0,6,7,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,432,                v = t;,10,2,0,0,0,1,0,0,0,15,6,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,435,            t = (v - u) / 2;,0,0,0,1,2,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,438,        } while (t != 0);,2,1,0,1,3,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,439,        return -u * (1 << k); // gcd is u*2^k,4,2,0,1,2,1,0,0,0,7,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,472,        long u = p;,8,1,0,0,0,0,0,0,0,9,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,473,        long v = q;,12,1,0,0,0,0,0,0,0,14,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,474,        if ((u == 0) || (v == 0)) {,6,1,0,3,7,0,0,0,0,7,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,475,            if ((u == Long.MIN_VALUE) || (v == Long.MIN_VALUE)){,0,0,0,3,7,0,0,0,0,10,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,476,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,",4,0,0,0,1,0,0,2,0,6,72,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,479,            return FastMath.abs(u) + FastMath.abs(v);,0,1,0,2,4,1,12,0,0,13,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,486,        if (u > 0) {,2,0,0,1,3,1,12,2,0,17,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,487,            u = -u;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,489,        if (v > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,490,            v = -v;,10,1,0,0,0,0,0,0,0,12,7,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,493,        int k = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,494,        while ((u & 1) == 0 && (v & 1) == 0 && k < 63) { // while u and v are,6,7,0,3,7,0,0,0,0,13,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,496,            u /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,497,            v /= 2;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,498,            k++; // cast out twos.,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,500,        if (k == 63) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,501,"            throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,",4,0,0,0,1,0,0,2,0,6,72,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,506,        long t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,8,3,0,3,6,0,0,0,0,12,47,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,512,            while ((t & 1) == 0) { // while t is even..,0,0,0,2,5,0,0,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,513,                t /= 2; // cast out twos,2,0,0,0,0,0,0,0,0,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,516,            if (t > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,517,                u = -t;,4,0,0,0,0,0,0,0,0,6,7,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,519,                v = t;,4,0,0,0,0,0,0,0,0,5,6,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,522,            t = (v - u) / 2;,0,0,0,1,2,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,525,        } while (t != 0);,4,1,0,1,3,0,0,0,0,5,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,526,        return -u * (1L << k); // gcd is u*2^k,4,2,0,1,2,1,0,0,0,7,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,552,        if (a == 0 || b == 0){,6,3,0,1,3,0,0,2,0,11,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,553,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,555,"        int lcm = FastMath.abs(ArithmeticUtils.mulAndCheck(a / gcd(a, b), b));",4,1,0,3,6,0,16,0,0,21,70,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,556,        if (lcm == Integer.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,557,"            throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_32_BITS,",0,0,0,0,1,0,0,0,0,1,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,560,        return lcm;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,586,        if (a == 0 || b == 0){,6,3,0,1,3,1,4,2,0,16,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,587,            return 0;,0,0,0,0,0,1,4,2,0,7,9,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,589,"        long lcm = FastMath.abs(ArithmeticUtils.mulAndCheck(a / gcd(a, b), b));",4,1,0,3,6,0,16,0,0,21,71,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,590,        if (lcm == Long.MIN_VALUE){,0,0,0,1,3,0,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,591,"            throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_64_BITS,",14,2,0,0,1,1,0,2,0,20,72,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,594,        return lcm;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,608,        long m = ((long)x) * ((long)y);,6,1,0,4,8,0,0,0,0,7,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,609,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,610,            throw new MathArithmeticException();,0,0,0,1,2,0,0,2,0,2,36,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,612,        return (int)m;,0,0,0,1,2,1,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,627,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,629,"            ret = mulAndCheck(b, a);",4,0,1,1,2,1,6,4,0,18,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,631,            if (a < 0) {,6,1,0,1,3,0,6,2,0,15,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,632,                if (b < 0) {,6,1,0,1,3,0,0,0,0,7,12,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,634,                    if (a >= Long.MAX_VALUE / b) {,8,2,0,1,3,0,0,0,0,10,30,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,635,                        ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,637,                        throw new MathArithmeticException();,0,0,0,1,2,0,0,2,0,2,36,14,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,639,                } else if (b > 0) {,2,1,0,1,4,0,0,0,0,3,19,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,641,                    if (Long.MIN_VALUE / b <= a) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,642,                        ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,13,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,644,                        throw new MathArithmeticException();,0,0,0,1,2,0,0,2,0,2,36,15,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,649,                    ret = 0;,12,1,0,0,0,0,0,0,0,15,8,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,651,            } else if (a > 0) {,12,2,0,1,4,0,0,0,0,16,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,656,                if (a <= Long.MAX_VALUE / b) {,8,2,0,1,3,0,0,0,0,10,30,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,657,                    ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,659,                    throw new MathArithmeticException();,0,0,0,1,2,0,0,2,0,2,36,13,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,663,                ret = 0;,6,1,0,0,0,0,0,0,0,7,8,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,666,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,680,        long s = (long)x - (long)y;,10,1,1,2,4,1,0,0,0,14,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,681,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,682,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y);",8,0,0,1,2,0,0,2,0,10,82,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,684,        return (int)s;,0,0,0,1,2,1,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,699,        if (b == Long.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,700,            if (a < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,701,                ret = a - b;,6,1,0,0,0,0,0,0,0,8,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,703,"                throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, a, -b);",2,0,0,1,2,1,6,0,0,9,80,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,707,"            ret = addAndCheck(a, -b, LocalizedFormats.OVERFLOW_IN_ADDITION);",8,0,0,1,2,0,4,0,0,14,64,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,709,        return ret;,10,2,0,0,0,1,0,0,0,13,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,721,        if (e < 0) {,4,1,1,1,3,0,0,0,0,11,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,722,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,725,        int result = 1;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,726,        int k2p    = k;,4,0,0,0,0,0,0,0,0,4,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,727,        while (e != 0) {,8,1,1,1,3,0,6,0,0,20,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,728,            if ((e & 0x1) != 0) {,0,0,0,2,5,0,0,0,0,7,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,729,                result *= k2p;,4,0,0,0,0,0,0,0,0,5,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,731,            k2p *= k2p;,12,1,0,0,0,0,0,0,0,16,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,732,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,735,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,747,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,748,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,751,        int result = 1;,6,1,1,0,0,0,0,0,0,10,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,752,        int k2p    = k;,4,0,0,0,0,0,0,0,0,4,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,753,        while (e != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,754,            if ((e & 0x1) != 0) {,0,0,0,2,5,0,0,0,0,7,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,755,                result *= k2p;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,757,            k2p *= k2p;,4,0,0,0,0,0,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,758,            e = e >> 1;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,761,        return result;,8,1,0,0,0,1,0,0,0,9,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,773,        if (e < 0) {,6,2,0,1,3,0,0,0,0,8,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,774,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,1,0,1,2,0,0,0,0,7,61,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,777,        long result = 1l;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,778,        long k2p    = k;,4,0,0,0,0,0,0,0,0,4,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,779,        while (e != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,780,            if ((e & 0x1) != 0) {,2,2,0,2,5,0,0,0,0,4,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,781,                result *= k2p;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,783,            k2p *= k2p;,4,0,0,0,0,0,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,784,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,787,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,799,        if (e < 0) {,10,2,0,1,3,0,0,0,0,13,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,800,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,803,        long result = 1l;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,804,        long k2p    = k;,4,0,0,0,0,0,0,0,0,4,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,805,        while (e != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,806,            if ((e & 0x1) != 0) {,2,2,0,2,5,0,0,0,0,4,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,807,                result *= k2p;,4,0,0,0,0,0,0,0,0,5,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,809,            k2p *= k2p;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,810,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,813,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,825,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,826,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,829,        return k.pow(e);,0,0,0,1,2,1,6,0,0,6,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,841,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,842,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0,0,0,1,2,0,0,0,0,3,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,845,        BigInteger result = BigInteger.ONE;,6,0,0,0,0,0,0,2,0,8,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,846,        BigInteger k2p    = k;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,847,        while (e != 0) {,4,1,0,1,3,1,2,0,0,8,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,848,            if ((e & 0x1) != 0) {,12,3,0,2,5,0,0,0,0,16,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,849,                result = result.multiply(k2p);,4,0,0,1,2,0,12,0,0,19,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,851,            k2p = k2p.multiply(k2p);,10,1,0,1,2,0,0,0,0,12,24,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,852,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,855,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,868,        if (e.compareTo(BigInteger.ZERO) < 0) {,4,1,0,2,5,0,10,0,0,15,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,869,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0,0,0,1,2,0,0,0,0,3,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,872,        BigInteger result = BigInteger.ONE;,6,0,0,0,0,0,0,2,0,8,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,873,        BigInteger k2p    = k;,4,0,1,0,0,0,4,2,0,19,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,874,        while (!BigInteger.ZERO.equals(e)) {,4,0,0,2,5,0,4,0,0,9,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,875,            if (e.testBit(0)) {,0,0,0,2,5,0,0,0,0,7,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,876,                result = result.multiply(k2p);,2,0,0,1,2,0,6,0,0,9,30,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,878,            k2p = k2p.multiply(k2p);,2,0,0,1,2,0,6,0,0,9,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,879,            e = e.shiftRight(1);,4,0,0,1,2,0,4,0,0,9,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,882,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,898,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,900,"            ret = addAndCheck(b, a, pattern);",0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,904,            if (a < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,905,                if (b < 0) {,2,1,0,1,3,0,0,0,0,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,907,                    if (Long.MIN_VALUE - b <= a) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,908,                        ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,910,"                        throw new MathArithmeticException(pattern, a, b);",0,0,0,1,2,0,0,0,0,3,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,914,                    ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,921,                if (a <= Long.MAX_VALUE - b) {,8,2,0,1,3,0,0,0,0,10,30,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,922,                    ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,924,"                    throw new MathArithmeticException(pattern, a, b);",6,0,0,1,2,0,0,2,0,8,49,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,928,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,940,        if (n < k) {,4,1,0,1,3,0,4,0,0,9,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,941,"            throw new NumberIsTooLargeException(LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER,",0,0,0,0,1,0,0,0,0,1,87,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,944,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,945,"            throw new NotPositiveException(LocalizedFormats.BINOMIAL_NEGATIVE_PARAMETER, n);",6,0,0,1,2,0,4,4,0,14,80,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,947,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,956,        return (n > 0) && ((n & (n - 1)) == 0);,10,5,0,4,8,1,0,0,0,16,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,30,37,"        super(value, 0, true);",8,2,0,1,2,1,0,0,0,13,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,30,38,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,30,47,"        super(specific, value, 0, true);",4,0,0,1,2,0,0,0,0,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,30,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,43,    public MathArithmeticException() {,2,0,0,1,3,1,0,0,0,3,34,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,44,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,45,        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,4,0,0,1,2,0,4,0,0,8,58,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,46,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,56,                                   Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,57,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,58,"        context.addMessage(pattern, args);",6,1,0,1,2,1,8,0,0,16,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,59,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,63,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,69,        return context.getMessage();,0,0,0,1,2,1,4,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,75,        return context.getLocalizedMessage();,0,0,0,1,2,1,4,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,59,                            final TiesStrategy tiesStrategy) {,2,0,0,0,2,1,0,2,0,5,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,60,"        naturalRanking = new NaturalRanking(nanStrategy, tiesStrategy);",0,0,0,1,2,0,0,0,0,3,63,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,61,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,76,            throw new NullArgumentException();,0,0,0,1,2,0,0,2,0,2,34,8,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,80,            throw new NoDataException();,0,0,0,1,2,0,0,2,0,2,28,8,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,30,37,        this(LocalizedFormats.NO_DATA);,18,2,0,1,2,0,0,0,0,22,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,30,38,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,30,45,        super(specific);,2,0,0,1,2,0,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,30,46,    },0,0,0,0,1,0,4,0,0,4,1,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,92,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,93,        tiesStrategy = DEFAULT_TIES_STRATEGY;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,94,        nanStrategy = DEFAULT_NAN_STRATEGY;,4,0,0,0,0,0,0,0,0,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,95,        randomData = null;,2,0,0,0,0,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,96,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,104,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,105,        this.tiesStrategy = tiesStrategy;,4,0,0,0,0,0,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,106,        nanStrategy = DEFAULT_NAN_STRATEGY;,4,0,0,0,0,0,12,0,0,17,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,107,        randomData = new RandomDataImpl();,2,0,0,1,2,0,0,2,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,108,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,116,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,117,        this.nanStrategy = nanStrategy;,12,2,1,0,0,1,0,0,0,18,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,118,        tiesStrategy = DEFAULT_TIES_STRATEGY;,0,0,0,0,0,0,0,0,0,0,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,119,        randomData = null;,2,0,0,0,0,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,120,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,142,        super();,2,0,1,1,2,0,0,0,0,9,8,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,143,        this.tiesStrategy = TiesStrategy.RANDOM;,6,0,0,0,0,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,144,        nanStrategy = DEFAULT_NAN_STRATEGY;,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,145,        randomData = new RandomDataImpl(randomGenerator);,4,0,0,1,2,0,0,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,146,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,158,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,159,        this.nanStrategy = nanStrategy;,4,2,0,0,0,0,8,0,0,14,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,160,        this.tiesStrategy = TiesStrategy.RANDOM;,6,0,0,0,0,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,161,        randomData = new RandomDataImpl(randomGenerator);,4,0,0,1,2,0,0,2,0,7,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,162,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,170,        return nanStrategy;,4,1,0,0,0,1,0,0,0,6,19,8,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,179,        return tiesStrategy;,2,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,202,"                recodeNaNs(ranks, Double.POSITIVE_INFINITY);",4,1,0,1,2,0,16,0,0,21,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,203,                break;,8,4,0,0,0,0,0,0,0,14,6,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,205,"                recodeNaNs(ranks, Double.NEGATIVE_INFINITY);",4,0,0,1,2,0,4,0,0,8,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,206,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,208,                ranks = removeNaNs(ranks);,2,0,0,1,2,0,4,0,0,7,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,209,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,214,                throw new MathInternalError();,0,0,0,1,2,0,0,2,0,2,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,232,"                    resolveTie(out, tiesTrace);",0,0,0,1,2,0,6,0,0,6,27,11,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,238,                tiesTrace.add(ranks[i].getPosition());,0,0,1,3,6,0,6,0,0,10,38,9,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,243,"            resolveTie(out, tiesTrace);",0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,259,        if (!containsNaNs(ranks)) {,2,0,0,2,5,0,8,2,0,13,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,260,            return ranks;,2,0,0,0,0,1,0,0,0,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,262,        IntDoublePair[] outRanks = new IntDoublePair[ranks.length];,0,0,0,2,4,0,0,0,0,6,59,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,263,        int j = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,264,        for (int i = 0; i < ranks.length; i++) {,10,1,0,1,3,0,4,0,0,16,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,265,            if (Double.isNaN(ranks[i].getValue())) {,0,0,1,4,9,0,6,0,0,10,40,7,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,267,                for (int k = i + 1; k < ranks.length; k++) {,12,2,0,1,3,0,0,0,0,15,44,8,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,268,                    ranks[k] = new IntDoublePair(,0,0,0,1,3,0,0,0,0,4,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,272,                outRanks[j] = new IntDoublePair(,0,0,1,1,3,0,0,2,0,7,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,274,                j++;,2,0,0,0,0,0,0,0,0,3,4,8,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,277,        IntDoublePair[] returnRanks = new IntDoublePair[j];,2,0,1,2,4,0,0,4,0,8,51,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,278,"        System.arraycopy(outRanks, 0, returnRanks, 0, j);",0,0,0,1,2,0,0,0,0,3,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,279,        return returnRanks;,0,0,0,0,0,1,0,0,0,1,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,289,        for (int i = 0; i < ranks.length; i++) {,10,1,0,1,3,0,0,0,0,12,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,290,            if (Double.isNaN(ranks[i].getValue())) {,0,0,1,4,9,0,6,0,0,10,40,7,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,291,                ranks[i] = new IntDoublePair(,0,0,0,1,3,0,0,0,0,4,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,295,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,304,        for (int i = 0; i < ranks.length; i++) {,10,1,0,1,3,0,0,0,0,12,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,305,            if (Double.isNaN(ranks[i].getValue())) {,2,0,1,4,9,0,10,0,0,16,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,306,                return true;,0,0,0,0,0,1,0,0,0,1,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,309,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,329,        final double c = ranks[tiesTrace.get(0)];,0,0,0,2,4,0,0,0,0,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,332,        final int length = tiesTrace.size();,12,1,0,1,2,1,6,0,0,21,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,334,        switch (tiesStrategy) {,4,0,0,1,3,0,0,0,0,4,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,336,"                fill(ranks, tiesTrace, (2 * c + length - 1) / 2d);",6,5,0,2,4,0,6,0,0,17,50,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,337,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,339,"                fill(ranks, tiesTrace, c + length - 1);",0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,340,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,342,"                fill(ranks, tiesTrace, c);",0,0,0,1,2,0,8,0,0,8,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,343,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,345,                Iterator<Integer> iterator = tiesTrace.iterator();,0,0,0,1,2,0,0,0,0,3,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,346,                long f = FastMath.round(c);,2,0,0,1,2,0,6,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,347,                while (iterator.hasNext()) {,0,0,0,2,5,0,4,0,0,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,348,                    ranks[iterator.next()] =,0,0,1,2,4,0,4,0,0,7,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,354,                iterator = tiesTrace.iterator();,2,0,0,1,2,0,4,0,0,7,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,355,                f = FastMath.round(c);,2,0,0,1,2,0,6,0,0,9,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,356,                int i = 0;,2,0,0,0,0,0,0,0,0,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,357,                while (iterator.hasNext()) {,2,0,0,2,5,0,4,0,0,6,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,358,                    ranks[iterator.next()] = f + i++;,8,1,0,2,4,0,0,0,0,10,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,362,                throw new MathInternalError();,0,0,0,1,2,0,0,2,0,2,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,364,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,374,        Iterator<Integer> iterator = tiesTrace.iterator();,2,0,0,1,2,0,4,4,0,10,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,375,        while (iterator.hasNext()) {,0,0,0,2,5,0,4,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,376,            data[iterator.next()] = value;,2,0,1,2,4,0,4,0,0,9,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,378,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,390,        Iterator<Integer> iterator = nanPositions.iterator();,2,0,0,1,2,0,4,4,0,10,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,391,        while (iterator.hasNext()) {,2,0,0,2,5,0,4,0,0,7,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,392,            ranks[iterator.next().intValue()] = Double.NaN;,4,0,1,3,6,0,6,0,0,13,47,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,395,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,407,                out.add(Integer.valueOf(i));,0,0,0,2,4,0,10,0,0,10,28,9,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,149,        final UnivariateFunction toSolve = new UnivariateFunction() {,4,0,0,1,3,0,6,0,0,11,61,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,152,                return cumulativeProbability(x) - p;,2,1,0,1,2,1,4,0,0,7,36,10,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,62,        if (x0 > x1) {,4,1,0,1,3,0,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,63,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT,",4,0,0,0,1,0,0,2,0,6,89,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,66,        return cumulativeProbability(x1) - cumulativeProbability(x0);,0,1,0,2,4,1,8,0,0,9,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,107,        if (p < 0.0 || p > 1.0) {,4,3,0,1,3,0,0,0,0,7,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,108,"            throw new OutOfRangeException(p, 0, 1);",10,1,0,1,2,0,0,0,0,12,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,111,        double lowerBound = getSupportLowerBound();,2,0,0,1,2,0,2,0,0,4,43,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,112,        if (p == 0.0) {,10,2,0,1,3,0,0,0,0,12,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,113,            return lowerBound;,2,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,116,        double upperBound = getSupportUpperBound();,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,117,        if (p == 1.0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,118,            return upperBound;,2,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,121,        final double mu = getNumericalMean();,2,0,0,1,2,1,2,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,122,        final double sig = FastMath.sqrt(getNumericalVariance());,2,0,0,2,4,1,6,0,0,9,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,124,        chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||,2,1,0,2,5,0,12,0,0,17,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,127,        if (lowerBound == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,128,            if (chebyshevApplies) {,2,0,0,1,3,0,0,0,0,2,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,129,                lowerBound = mu - sig * FastMath.sqrt((1. - p) / p);,10,4,0,2,4,0,4,0,0,19,52,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,131,                lowerBound = -1.0;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,132,                while (cumulativeProbability(lowerBound) >= p) {,2,1,0,2,5,0,4,0,0,7,48,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,133,                    lowerBound *= 2.0;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,138,        if (upperBound == Double.POSITIVE_INFINITY) {,8,1,0,1,3,1,10,4,0,24,45,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,139,            if (chebyshevApplies) {,2,0,0,1,3,0,0,0,0,2,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,140,                upperBound = mu + sig * FastMath.sqrt(p / (1. - p));,10,4,0,2,4,0,4,0,0,19,52,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,142,                upperBound = 1.0;,2,0,0,0,0,0,0,0,0,3,17,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,143,                while (cumulativeProbability(upperBound) < p) {,2,1,0,2,5,0,4,0,0,7,47,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,144,                    upperBound *= 2.0;,2,0,0,0,0,0,0,0,0,3,18,10,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,149,        final UnivariateFunction toSolve = new UnivariateFunction() {,8,0,0,1,3,2,0,6,0,16,61,2,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,156,"        double x = UnivariateSolverUtils.solve(toSolve,",2,0,0,0,1,0,6,0,0,8,47,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,161,        if (!isSupportConnected()) {,0,0,0,2,5,0,2,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,163,            final double dx = getSolverAbsoluteAccuracy();,2,0,0,1,2,1,2,0,0,5,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,164,            if (x - dx >= getSupportLowerBound()) {,4,2,0,2,5,0,2,0,0,8,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,165,                double px = cumulativeProbability(x);,2,0,0,1,2,0,4,0,0,6,37,9,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,166,                if (cumulativeProbability(x - dx) == px) {,0,0,0,2,5,0,0,0,0,7,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,167,                    upperBound = x;,4,0,0,0,0,0,0,0,0,5,15,10,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,168,                    while (upperBound - lowerBound > dx) {,6,2,0,1,3,0,0,0,0,8,38,10,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,169,                        final double midPoint = 0.5 * (lowerBound + upperBound);,6,2,0,1,2,1,0,0,0,9,56,12,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,170,                        if (cumulativeProbability(midPoint) < px) {,2,1,0,2,5,0,4,0,0,7,43,12,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,171,                            lowerBound = midPoint;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,173,                            upperBound = midPoint;,4,0,0,0,0,0,0,0,0,5,22,14,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,175,                    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,176,                    return upperBound;,2,0,0,0,0,1,0,0,0,2,18,10,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,180,        return x;,6,0,0,0,0,1,0,0,0,7,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,191,        return solverAbsoluteAccuracy;,6,0,0,0,0,1,0,0,0,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,196,        randomData.reSeed(seed);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,197,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,208,        return randomData.nextInversionDeviate(this);,2,1,0,1,2,1,0,0,0,3,45,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,218,        if (sampleSize <= 0) {,4,1,0,1,3,0,0,2,0,7,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,219,"            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,",6,1,0,0,1,0,2,2,0,11,74,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,222,        double[] out = new double[sampleSize];,2,0,1,2,4,0,10,0,0,15,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,223,        for (int i = 0; i < sampleSize; i++) {,0,0,0,1,3,0,0,0,0,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,224,            out[i] = sample();,0,0,1,2,4,0,2,0,0,7,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,226,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,77,"            throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sd);",2,0,0,1,2,0,0,0,0,2,80,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,90,"        this(0, 1);",6,1,0,1,2,0,4,0,0,11,11,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,91,    },6,0,0,0,1,0,0,0,0,7,1,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,99,        return mean;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,108,        return standardDeviation;,2,0,0,0,0,1,0,0,0,2,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,119,        return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,124,        final double x0 = x - mean;,11,2,0,0,0,1,0,0,0,14,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,125,        final double x1 = x0 / standardDeviation;,6,1,0,0,0,1,0,0,0,8,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,126,        return FastMath.exp(-0.5 * x1 * x1) / (standardDeviation * SQRT2PI);,0,0,0,2,4,1,0,0,0,7,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,139,            return dev < 0 ? 0.0d : 1.0d;,2,1,0,0,0,1,0,0,0,3,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,148,        if (x0 > x1) {,4,1,0,1,3,0,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,149,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT,",0,0,0,0,1,0,0,0,0,1,89,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,152,        final double denom = standardDeviation * SQRT2;,8,1,0,0,0,1,0,0,0,10,47,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,153,        final double v0 = (x0 - mean) / denom;,0,0,0,1,2,0,0,2,0,2,38,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,154,        final double v1 = (x1 - mean) / denom;,8,2,0,1,2,1,0,0,0,11,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,155,"        return 0.5 * Erf.erf(v0, v1);",0,1,0,1,2,1,8,0,0,9,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,161,        return solverAbsoluteAccuracy;,0,0,0,0,0,1,0,0,0,1,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,170,        return getMean();,0,0,0,1,2,1,2,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,179,        final double s = getStandardDeviation();,2,0,0,1,2,1,2,0,0,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,180,        return s * s;,4,1,0,0,0,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,193,        return Double.NEGATIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,206,        return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,211,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,216,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,227,        return true;,8,1,0,0,0,1,0,0,0,11,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,233,"        return randomData.nextGaussian(mean, standardDeviation);",0,0,0,1,2,1,0,0,0,4,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,30,46,"        this(LocalizedFormats.OUT_OF_RANGE_SIMPLE, wrong, lo, hi);",20,1,0,1,2,0,0,0,0,22,58,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,30,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,30,62,"        super(specific, wrong, lo, hi);",8,0,0,1,2,0,0,0,0,8,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,30,63,        this.lo = lo;,2,0,0,0,0,0,0,2,0,4,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,30,64,        this.hi = hi;,4,0,0,0,0,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,30,65,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,30,71,        return lo;,2,0,0,0,0,1,0,0,0,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,30,77,        return hi;,2,0,0,0,0,1,0,0,0,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,31,80,        return context.getMessage();,0,0,0,1,2,1,4,0,0,4,28,5,1.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,31,86,        return context.getLocalizedMessage();,0,0,0,1,2,1,0,0,0,4,37,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,178,        return solverAbsoluteAccuracy;,0,0,0,0,0,1,0,0,0,1,30,4,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,194,            return denominatorDF / (denominatorDF - 2);,4,2,0,1,2,1,0,0,0,6,43,6,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,230,            final double numeratorDF = getNumeratorDegreesOfFreedom();,8,1,0,1,2,1,8,2,0,21,58,3,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,231,            final double denomDFMinusTwo = denominatorDF - 2;,14,2,0,0,0,1,0,0,0,18,49,3,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,233,            return ( 2 * (denominatorDF * denominatorDF) * (numeratorDF + denominatorDF - 2) ) /,10,5,0,3,6,1,0,0,0,15,84,3,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,145,            ret = 0;,0,0,0,0,0,0,0,0,0,0,8,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,163,        return numeratorDegreesOfFreedom;,2,0,0,0,0,1,0,0,0,2,33,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,191,        final double denominatorDF = getDenominatorDegreesOfFreedom();,0,0,0,1,2,0,0,0,0,3,62,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,193,        if (denominatorDF > 2) {,2,1,0,1,3,0,0,0,0,3,24,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,214,        if (!numericalVarianceIsCalculated) {,4,0,0,1,3,0,0,0,0,5,37,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,215,            numericalVariance = calculateNumericalVariance();,2,0,0,1,2,0,2,0,0,5,49,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,216,            numericalVarianceIsCalculated = true;,4,1,1,0,0,0,4,0,0,23,37,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,218,        return numericalVariance;,4,0,0,0,0,1,0,0,0,4,25,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,227,        final double denominatorDF = getDenominatorDegreesOfFreedom();,0,0,0,1,2,0,0,0,0,3,62,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,229,        if (denominatorDF > 4) {,12,6,0,1,3,0,10,0,0,28,24,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,248,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,260,        return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,114,        return numberOfTrials * probabilityOfSuccess;,0,0,0,0,0,1,0,0,0,1,45,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,124,        final double p = probabilityOfSuccess;,4,0,0,0,0,1,0,0,0,5,38,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,125,        return numberOfTrials * p * (1 - p);,8,3,1,1,2,1,0,0,0,20,36,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,137,        return probabilityOfSuccess < 1.0 ? 0 : numberOfTrials;,0,0,0,0,0,1,0,0,0,1,55,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,149,        return probabilityOfSuccess > 0.0 ? numberOfTrials : 0;,0,0,0,0,0,1,0,0,0,1,55,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2480,            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,6,5,1,5,10,1,0,0,0,20,91,6,1.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2482,            ya = epsA * denom;,0,0,0,0,0,0,0,0,0,0,18,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2483,            yb = epsB * denom;,4,1,0,0,0,0,0,0,0,5,18,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2484,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,1.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,81,"        this(p1, p2.subtract(p1).crossProduct(p3.subtract(p1)));",0,0,0,4,8,0,0,0,0,12,56,4,0.5,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,82,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,204,                final SubHyperplane.SplitSubHyperplane<S> split = other.split(inserted);,0,0,0,1,2,0,0,0,0,3,72,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,205,                plusList.add(split.getPlus());,0,0,0,2,4,0,0,0,0,6,30,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,206,                minusList.add(split.getMinus());,0,0,0,2,4,0,8,0,0,8,32,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,207,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,324,            return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,406,        return originOffset + (sameOrientationAs(plane) ? -plane.originOffset : plane.originOffset);,0,0,0,2,4,1,0,0,0,7,92,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,427,        return (((Plane) other).w).dotProduct(w) > 0.0;,0,0,0,4,8,1,0,0,0,13,47,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,63,            final double global = otherPlane.getOffset(thisPlane);,2,0,0,1,2,0,6,2,0,10,54,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,64,            return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);,16,2,0,3,6,1,0,0,0,19,88,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,105,            final double global = otherPlane.getOffset(thisPlane);,4,0,0,1,2,0,0,0,0,5,54,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,106,            return (global < -1.0e-10) ?,2,1,0,1,2,1,0,0,0,4,28,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,59,            return GEQ;,2,0,0,0,0,1,0,0,0,2,11,5,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,406,            coefficients[i] = 0;,2,0,0,1,2,0,4,0,0,6,20,8,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,407,            continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,261,"            return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),",6,0,0,2,5,2,0,4,0,11,73,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,339,                columnsToDrop.add(i);,4,0,0,1,2,0,0,0,0,4,21,9,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,57,        switch (this) {,2,0,0,1,3,0,0,2,0,4,15,3,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,57,        switch (this) {,0,0,0,1,3,0,0,0,0,4,15,4,0.25,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,112,        this.chromosomes.addAll(chromosomeColl);,0,0,0,1,2,0,0,0,0,3,40,4,1.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,113,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,209,        return chromosomes.iterator();,0,0,0,1,2,1,0,0,0,4,30,4,1.0,1,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,108,        if (chromosomes.size() + chromosomeColl.size() > populationLimit) {,2,2,0,3,7,0,8,0,0,12,67,4,0.5,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,39,        super(representation);,6,1,0,1,2,0,0,0,0,7,22,12,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,40,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,58,        for (int i : chromosomeRepresentation) {,2,0,0,1,3,0,6,0,0,8,40,5,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,59,            if (i < 0 || i >1) {,4,3,0,1,3,0,0,0,0,7,20,6,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,63,        },2,0,0,0,1,0,0,0,0,3,1,8,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,64,    },4,1,0,0,1,0,6,0,0,11,1,3,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,73,        List<Integer> rList= new ArrayList<Integer> (length);,0,0,0,1,2,0,0,0,0,3,53,4,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,74,        for (int j=0; j<length; j++) {,10,2,1,1,3,0,0,0,0,26,30,4,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,75,            rList.add(GeneticAlgorithm.getRandomGenerator().nextInt(2));,8,5,1,3,6,0,0,0,0,20,60,6,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,77,        return rList;,8,3,0,0,0,1,4,0,0,15,13,3,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,36,    private double elitismRate = 0.9;,2,0,0,0,0,1,0,0,0,3,33,2,2.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,50,"    public ListPopulation(final List<Chromosome> chromosomes, final int populationLimit) {",6,0,0,1,3,3,0,4,0,13,86,2,0.8,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,51,        if (chromosomes.size() > populationLimit) {,0,0,0,2,5,0,0,0,0,7,43,4,0.8,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,55,        if (populationLimit <= 0) {,0,0,0,1,3,0,0,0,0,4,27,4,0.8,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,59,        this.chromosomes = chromosomes;,2,0,0,0,0,1,0,4,0,7,31,1,0.8,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,60,        this.populationLimit = populationLimit;,2,2,0,0,0,0,0,0,0,4,39,4,0.8,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,61,    },0,0,0,0,1,0,0,0,0,1,1,4,0.8,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,50,"        super(chromosomes, populationLimit);",0,0,0,1,2,0,0,0,0,3,36,4,0.8,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,51,        this.elitismRate = elitismRate;,4,0,0,0,0,0,0,0,0,5,31,4,0.8,1,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,52,    },20,5,1,0,1,3,0,4,0,46,1,1,0.8,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,69,    public ListPopulation(final int populationLimit) {,4,0,0,1,3,2,0,0,0,6,50,2,0.4,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,70,        if (populationLimit <= 0) {,0,0,0,1,3,0,0,0,0,4,27,4,0.4,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,73,        this.populationLimit = populationLimit;,0,0,0,0,0,0,0,0,0,0,39,4,0.4,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,74,        this.chromosomes = new ArrayList<Chromosome>(populationLimit);,4,0,0,1,2,0,0,0,0,5,62,4,0.4,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,75,    },8,0,0,0,1,1,6,0,0,16,1,3,0.4,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,64,        super(populationLimit);,2,0,0,1,2,0,0,0,0,2,23,4,0.4,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,65,        this.elitismRate = elitismRate;,0,0,0,0,0,0,0,0,0,0,31,4,0.4,1,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,66,    },0,0,0,0,1,0,0,0,0,1,1,4,0.4,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,732,        float result = numerator.floatValue() / denominator.floatValue();,2,1,0,2,4,0,8,0,0,11,65,5,0.5,1,1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,735,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.5,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,36,244,        if (o == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.05405,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,247,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,119,"    public BigFraction(BigInteger num, BigInteger den) {",6,0,0,1,3,1,0,4,0,11,52,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,120,"        MathUtils.checkNotNull(num, LocalizedFormats.NUMERATOR);",8,0,0,1,2,0,6,0,0,15,56,3,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,121,"        MathUtils.checkNotNull(den, LocalizedFormats.DENOMINATOR);",4,0,0,1,2,0,6,0,0,10,58,5,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,122,        if (BigInteger.ZERO.equals(den)) {,0,0,0,2,5,0,0,0,0,7,34,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,125,        if (BigInteger.ZERO.equals(num)) {,4,0,0,2,5,0,4,0,0,8,34,5,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,126,            numerator   = BigInteger.ZERO;,6,0,0,0,0,0,0,0,0,7,30,6,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,127,            denominator = BigInteger.ONE;,6,0,0,0,0,0,0,0,0,7,29,6,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,131,            final BigInteger gcd = num.gcd(den);,2,0,0,1,2,1,6,2,0,11,36,6,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,132,            if (BigInteger.ONE.compareTo(gcd) < 0) {,4,1,0,2,5,0,4,0,0,9,40,6,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,133,                num = num.divide(gcd);,0,0,0,1,2,0,0,0,0,3,22,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,134,                den = den.divide(gcd);,8,0,0,1,2,0,0,0,0,8,22,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,138,            if (BigInteger.ZERO.compareTo(den) > 0) {,0,0,0,2,5,0,0,0,0,7,41,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,144,            numerator   = num;,4,0,0,0,0,0,0,0,0,5,18,6,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,145,            denominator = den;,2,0,0,0,0,0,0,0,0,2,18,5,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,148,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,366,"        this(BigInteger.valueOf(num), BigInteger.ONE);",0,0,0,2,4,0,0,0,0,6,46,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,367,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,381,"        this(BigInteger.valueOf(num), BigInteger.valueOf(den));",0,0,0,3,6,0,0,0,0,9,55,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,382,    },4,3,1,0,1,0,0,0,0,11,1,11,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,44,    public static final BigFraction TWO = new BigFraction(2);,4,0,0,1,2,3,0,4,0,11,57,1,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,47,    public static final BigFraction ONE = new BigFraction(1);,8,1,0,1,2,1,4,0,0,15,57,3,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,50,    public static final BigFraction ZERO = new BigFraction(0);,2,0,0,1,2,3,0,4,0,9,58,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,53,    public static final BigFraction MINUS_ONE = new BigFraction(-1);,2,0,0,1,2,3,0,4,0,9,64,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,56,"    public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);",2,0,0,1,2,3,0,4,0,9,68,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,59,"    public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);",2,1,1,1,2,3,10,4,0,29,66,1,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,62,"    public static final BigFraction ONE_HALF = new BigFraction(1, 2);",2,0,0,1,2,3,0,4,0,9,65,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,65,"    public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);",0,0,0,1,2,0,0,0,0,3,68,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,68,"    public static final BigFraction ONE_THIRD = new BigFraction(1, 3);",2,0,0,1,2,3,0,4,0,9,66,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,71,"    public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);",2,0,0,1,2,0,0,2,0,4,69,5,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,74,"    public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);",0,0,0,1,2,0,0,0,0,3,71,4,0.05405,1,1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,77,"    public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);",0,0,0,1,2,0,0,0,0,3,67,4,0.05405,1,1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,80,"    public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);",12,1,0,1,2,3,0,4,0,21,69,1,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,83,"    public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);",2,0,0,1,2,3,0,4,0,9,67,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,89,    private static final BigInteger ONE_HUNDRED = BigInteger.valueOf(100);,0,0,0,1,2,0,0,0,0,3,70,4,0.05405,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,370,    private LocalizedFormats(final String sourceFormat) {,4,0,0,1,3,2,0,2,0,8,53,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,371,        this.sourceFormat = sourceFormat;,4,0,0,0,0,0,0,0,0,5,33,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,372,    },4,0,0,0,1,1,0,0,0,5,1,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",6,0,0,5,10,0,6,0,0,14,67,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,45,"    ARRAY_SIZE_EXCEEDS_MAX_VARIABLES(""array size cannot be greater than {0}""),",0,0,0,2,4,0,0,0,0,6,74,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,46,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",2,0,0,4,8,0,0,0,0,3,94,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,47,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",2,0,0,1,2,0,0,0,0,3,41,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,48,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",0,0,0,1,2,0,0,0,0,3,95,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,49,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",0,0,0,1,2,0,0,0,0,3,60,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,50,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",2,0,0,1,2,0,0,0,0,3,54,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,51,"    BANDWIDTH(""bandwidth ({0})""),",2,0,0,3,6,0,0,0,0,3,29,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,52,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",2,0,0,4,8,0,0,0,0,2,108,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,53,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),",2,0,0,3,6,0,0,0,0,3,93,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,54,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",2,0,0,1,2,0,0,0,0,3,123,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,55,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",2,0,0,1,2,0,0,0,0,3,89,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",2,0,0,2,4,0,0,0,0,3,108,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,57,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",0,0,0,1,2,0,0,0,0,3,100,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,58,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",10,1,0,2,4,0,0,0,0,12,94,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",10,0,0,3,6,0,8,2,0,21,97,3,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",2,0,0,2,4,0,0,0,0,3,83,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",2,0,0,2,4,0,0,0,0,3,86,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",0,0,0,2,4,0,0,0,0,6,87,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",0,0,0,1,2,0,0,0,0,3,84,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",0,0,0,1,2,0,0,0,0,3,131,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",0,0,0,1,2,0,0,0,0,3,75,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",4,1,1,2,4,0,6,0,0,13,78,3,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",4,0,0,1,2,0,0,0,0,5,95,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",0,0,0,2,4,0,0,0,0,6,74,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",0,0,0,1,2,0,0,0,0,3,55,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",2,0,0,3,6,0,0,0,0,3,79,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",2,0,0,2,4,0,0,0,0,3,115,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",0,0,0,5,10,0,0,0,0,15,78,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",6,0,0,3,6,0,0,2,0,8,46,3,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,75,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",0,0,0,2,4,0,0,0,0,6,112,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",8,0,0,2,4,0,0,0,0,9,86,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",8,0,0,5,10,0,0,0,0,9,290,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",2,0,0,3,6,1,0,0,0,3,263,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",0,0,0,1,2,0,2,0,0,2,52,7,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,80,"    CROSSING_BOUNDARY_LOOPS(""some outline boundary loops cross each other""),",4,0,0,1,2,0,0,0,0,5,72,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,81,"    CROSSOVER_RATE(""crossover rate ({0})""),",2,0,0,3,6,0,0,0,0,3,39,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,82,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",0,0,0,3,6,0,0,0,0,9,109,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,83,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",6,0,0,3,6,1,0,0,0,7,81,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,84,"    DIFFERENT_ORIG_AND_PERMUTED_DATA(""original and permuted data must contain the same elements""),",0,0,0,1,2,0,0,0,0,3,94,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,85,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",0,0,0,1,2,0,0,0,0,3,49,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,86,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",0,0,0,5,10,0,0,0,0,15,71,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,87,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",4,1,0,3,6,3,8,0,0,18,52,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,88,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",4,0,0,1,2,0,0,0,0,6,54,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,89,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",0,0,0,2,4,0,0,0,0,6,119,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,90,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",8,2,1,1,2,0,0,0,0,15,51,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,91,"    DUPLICATED_ABSCISSA(""Abscissa {0} is duplicated at both indices {1} and {2}""),",10,3,0,4,8,0,8,0,0,21,78,3,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,92,"    ELITISM_RATE(""elitism rate ({0})""),",0,0,0,3,6,0,0,0,0,9,35,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,93,"    EMPTY_CLUSTER_IN_K_MEANS(""empty cluster in k-means""),",10,2,1,1,2,1,0,0,0,18,53,1,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,94,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",2,0,0,1,2,0,0,0,0,3,88,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,95,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",6,1,1,1,2,1,0,0,0,19,71,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,96,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",2,0,0,1,2,0,0,0,0,3,65,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,97,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",0,0,0,1,2,0,0,0,0,3,77,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,98,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",4,1,1,4,8,0,0,0,0,11,78,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,99,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",2,0,0,3,6,0,0,0,0,3,81,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,100,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",0,0,0,1,2,0,0,0,0,3,53,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,101,"    EVALUATION(""evaluation""), /* keep */",10,2,0,1,2,1,0,0,0,14,36,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,102,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",0,0,0,3,6,0,0,0,0,9,77,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,103,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",0,0,0,2,4,0,0,0,0,6,69,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,104,"    FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),",0,0,0,12,24,0,0,0,0,36,175,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,105,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",0,0,0,3,6,0,0,0,0,9,85,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,106,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",0,0,0,2,4,0,0,0,0,6,79,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,107,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",2,0,0,2,4,0,0,0,0,3,54,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,108,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,73,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,109,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",2,0,0,5,10,0,0,0,0,3,85,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,110,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",2,0,0,1,2,0,0,0,0,3,62,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,111,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",2,0,0,1,2,0,0,0,0,3,54,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,112,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",0,0,0,4,8,0,0,0,0,12,56,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,113,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",2,0,0,4,8,0,0,0,0,3,56,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,114,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",2,0,0,2,4,0,0,0,0,3,76,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,115,"    IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO(""identical abscissas x[{0}] == x[{1}] == {2} cause division by zero""),",2,0,0,6,12,0,0,0,0,3,107,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,116,"    ILL_CONDITIONED_OPERATOR(""condition number {1} is too high ""),",2,0,0,2,4,0,0,0,0,3,62,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,117,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",2,0,0,3,6,0,0,0,0,3,95,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,118,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",2,0,0,3,6,0,0,0,0,3,50,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,119,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,64,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,120,"    INDEX(""index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,121,"    NOT_FINITE_NUMBER(""{0} is not a finite number""), /* keep */",2,0,0,2,4,0,0,0,0,3,59,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,122,"    INFINITE_BOUND(""interval bounds must be finite""),",0,0,0,1,2,0,0,0,0,3,49,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,123,"    ARRAY_ELEMENT(""value {0} at index {1}""), /* keep */",2,0,0,3,6,0,0,0,0,3,51,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,124,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",0,0,0,3,6,0,0,0,0,9,79,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,125,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",4,1,0,1,2,0,4,0,0,10,59,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,126,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",0,0,0,3,6,0,0,0,0,9,72,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,127,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {1} after final column {0}""),",2,0,0,3,6,0,0,0,0,3,79,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,128,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {1} after final row {0}""),",2,0,0,3,6,0,0,0,0,3,67,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,129,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",4,0,0,4,8,0,0,0,0,4,121,5,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,130,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",0,0,0,2,4,0,0,0,0,6,103,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,131,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",0,0,0,2,4,0,0,0,0,6,98,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,132,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",8,2,1,3,6,1,0,0,0,19,75,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,133,"    DIMENSION(""dimension ({0})""), /* keep */",6,0,0,3,6,0,0,0,0,9,40,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,134,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",2,0,0,3,6,0,0,0,0,3,105,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,135,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",2,0,0,3,6,0,0,0,0,3,83,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,136,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS(""{0} method needs at least two previous points""),",2,0,0,2,4,0,0,0,0,3,103,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,137,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",2,0,0,2,4,0,0,0,0,3,66,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,138,"    INVALID_BINARY_DIGIT(""invalid binary digit: {0}""),",2,0,1,2,4,0,2,0,0,18,50,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,139,"    INVALID_BINARY_CHROMOSOME(""binary mutation works on BinaryChromosome only""),",0,0,0,1,2,0,0,0,0,3,76,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,140,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",2,0,0,4,8,0,0,0,0,3,112,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,141,"    INVALID_FIXED_LENGTH_CHROMOSOME(""one-point crossover only works with fixed-length chromosomes""),",2,0,0,1,2,0,0,0,0,3,96,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,142,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),",2,0,0,4,8,0,0,0,0,3,124,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,143,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",14,3,0,3,6,0,0,0,0,19,72,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,144,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",2,0,0,2,4,0,0,0,0,3,71,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,145,"    NOT_ENOUGH_DATA_REGRESSION(""the number of observations is not sufficient to conduct regression""),",0,0,0,1,2,0,0,0,0,3,97,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,146,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),",2,0,0,4,8,0,0,0,0,3,141,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,147,"    INVALID_REGRESSION_OBSERVATION(""length of regressor array = {0} does not match the number of variables = {1} in the model""),",0,0,0,3,6,0,0,0,0,9,124,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,148,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",2,0,0,26,52,0,0,0,0,3,165,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,149,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",2,0,0,1,2,0,0,0,0,3,41,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,150,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",0,0,0,4,8,0,0,0,0,12,56,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,151,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",6,0,0,4,8,1,0,4,0,12,56,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,152,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),",0,0,0,1,2,0,0,0,0,3,101,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,153,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",2,0,0,1,2,0,0,2,0,5,67,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,154,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",0,0,0,5,10,0,0,0,0,15,111,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,155,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",2,0,0,5,10,0,0,0,0,3,111,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,156,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",2,0,0,1,2,0,0,0,0,3,70,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,157,"    EVALUATIONS(""evaluations""), /* keep */",2,0,0,1,2,0,4,2,0,9,38,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,158,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",2,0,0,3,6,0,0,0,0,3,62,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,159,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",0,0,0,3,6,0,0,0,0,9,71,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,160,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({1,number,0.00E00}) reached, integration needs {0,number,0.00E00}""),",2,0,0,4,8,0,0,0,0,3,132,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,161,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",2,0,0,3,6,0,0,0,0,3,156,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,162,"    MUTATION_RATE(""mutation rate ({0})""),",0,0,0,3,6,0,0,0,0,9,37,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,163,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",2,0,0,2,4,0,0,0,0,3,43,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,164,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",2,0,0,1,2,0,0,0,0,3,49,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,165,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",2,0,0,2,4,0,0,0,0,3,92,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,166,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",2,0,0,2,4,0,0,0,0,3,55,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,167,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",2,0,0,5,10,0,0,0,0,3,68,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,168,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",2,0,0,3,6,0,0,0,0,3,58,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,169,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,79,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,170,"    NUMBER_OF_SUCCESSES(""number of successes ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,60,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,171,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,73,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,172,"    NUMBER_OF_INTERPOLATION_POINTS(""number of interpolation points ({0})""), /* keep */",10,4,1,3,6,0,12,0,0,32,82,3,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,173,"    NUMBER_OF_TRIALS(""number of trials ({0})""),",4,0,0,3,6,0,0,0,0,6,43,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,174,"    ROBUSTNESS_ITERATIONS(""number of robustness iterations ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,175,"    START_POSITION(""start position ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,50,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,176,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge (in less than {0} iterations) for value {1}""),",2,0,0,4,8,0,0,0,0,3,131,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,177,"    NON_INVERTIBLE_TRANSFORM(""non-invertible affine transform collapses some lines into single points""),",2,0,0,1,2,0,0,0,0,3,100,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,178,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",2,0,0,2,4,0,6,0,0,9,98,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,179,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",8,1,0,2,4,0,0,0,0,11,81,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,180,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",0,0,0,3,6,0,0,0,0,9,89,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,181,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",0,0,0,3,6,0,0,0,0,9,89,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,182,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,85,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,183,"    NON_SQUARE_MATRIX(""non square ({0}x{1}) matrix""),",6,0,0,4,8,0,12,2,0,20,49,5,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,184,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",2,0,0,1,2,0,0,0,0,3,60,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,185,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",0,0,0,1,2,0,0,0,0,3,41,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,186,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",2,0,0,5,10,0,0,0,0,3,93,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,187,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,188,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,88,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,189,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),",0,0,0,5,10,0,0,0,0,15,113,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,190,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",2,0,0,3,6,0,0,0,0,3,97,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,191,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",10,3,0,6,12,1,0,0,0,15,85,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,192,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",0,0,1,6,12,0,0,0,0,10,88,10,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,193,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",0,0,0,5,10,0,0,0,0,15,105,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,194,"    ALPHA(""alpha""), /* keep */",2,0,0,1,2,0,0,0,0,3,26,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,195,"    BETA(""beta""), /* keep */",2,0,0,1,2,0,0,0,0,3,24,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,196,"    NOT_POSITIVE_COLUMNDIMENSION(""invalid column dimension: {0} (must be positive)""),",4,0,0,3,6,0,0,0,0,5,81,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,197,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""), /* keep */",2,0,0,1,2,0,0,0,0,3,72,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,198,"    NON_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix: diagonal element at ({1},{1}) is smaller than {2} ({0})""),",0,0,0,7,14,0,0,0,0,21,118,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,199,"    NON_POSITIVE_DEFINITE_OPERATOR(""non positive definite linear operator""), /* keep */",2,0,0,1,2,0,8,0,0,11,83,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,200,"    NON_SELF_ADJOINT_OPERATOR(""non self-adjoint linear operator""), /* keep */",2,0,0,1,2,0,0,0,0,3,73,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,201,"    NON_SQUARE_OPERATOR(""non square ({0}x{1}) linear operator""), /* keep */",4,0,0,4,8,0,2,0,0,7,71,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,202,"    DEGREES_OF_FREEDOM(""degrees of freedom ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,58,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,203,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",4,2,0,3,6,0,8,0,0,14,77,3,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,204,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",2,0,0,3,6,0,0,0,0,3,66,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,205,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,65,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,206,"    EXPONENT(""exponent ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,38,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,207,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,53,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,208,"    LENGTH(""length ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,34,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,209,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,49,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,210,"    MEAN(""mean ({0})""), /* keep */",4,0,1,3,6,0,0,0,0,10,30,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,211,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",2,0,0,2,4,0,0,0,0,3,72,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,212,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",4,2,1,3,6,0,0,0,0,16,56,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,213,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",2,0,0,3,6,0,0,0,0,3,65,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,214,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",2,0,0,2,5,0,0,0,0,3,53,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,215,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",6,1,1,3,6,0,0,0,0,11,69,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,216,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,71,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,217,"    POPULATION_SIZE(""population size ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,218,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,4,0,7,76,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,219,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,220,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,221,"    SCALE(""scale ({0})""), /* keep */",2,0,1,3,6,0,0,0,0,13,32,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,222,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",8,0,0,3,6,0,0,0,0,9,51,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,223,"    SHAPE(""shape ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,224,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",4,0,0,3,6,0,6,2,0,15,77,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,225,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,226,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),",8,3,0,3,6,0,2,0,0,14,63,3,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,227,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,228,"    NOT_POWER_OF_TWO(""{0} is not a power of 2""),",2,1,0,2,4,0,0,0,0,3,44,6,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,229,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",2,0,1,2,4,0,0,0,0,13,87,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,230,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",2,0,0,2,4,0,0,0,0,3,62,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,231,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,232,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,107,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,233,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",2,0,0,1,2,0,0,0,0,3,79,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,234,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,235,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,107,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,236,"    NOT_SUBTRACTION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not subtraction compatible""),",2,0,0,5,10,0,0,0,0,3,99,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,237,"    NOT_SUPPORTED_IN_DIMENSION_N(""method not supported in dimension {0}""),",2,0,0,2,4,0,0,0,0,3,70,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,238,"    NOT_SYMMETRIC_MATRIX(""not symmetric matrix""),",0,0,0,1,2,0,0,0,0,3,45,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,239,"    NON_SYMMETRIC_MATRIX(""non symmetric matrix: the difference between entries at ({0},{1}) and ({1},{0}) is larger than {2}""), /* keep */",2,0,0,8,16,0,0,0,0,3,134,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,240,"    NO_BIN_SELECTED(""no bin selected""),",0,0,0,1,2,0,0,0,0,3,35,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,241,"    NO_CONVERGENCE_WITH_ANY_START_POINT(""none of the {0} start points lead to convergence""), /* keep */",10,1,1,2,4,0,0,0,0,17,99,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,242,"    NO_DATA(""no data""), /* keep */",2,0,0,1,2,0,0,0,0,3,30,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,243,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",2,0,0,4,8,0,0,0,0,3,82,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,244,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),",2,0,0,1,2,0,0,0,0,3,99,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,245,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",0,0,0,1,2,0,0,0,0,3,45,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,246,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""), /* keep */",0,0,0,1,2,0,0,0,0,3,62,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,247,"    NO_REGRESSORS(""Regression model must include at least one regressor""),",0,0,0,1,2,0,0,0,0,3,70,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,248,"    NO_RESULT_AVAILABLE(""no result available""),",2,0,0,1,2,0,0,0,0,3,43,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,249,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",6,0,0,6,12,0,0,0,0,9,75,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,250,"    NAN_NOT_ALLOWED(""NaN is not allowed""),",2,0,0,1,2,0,0,0,0,3,38,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,251,"    NULL_NOT_ALLOWED(""null is not allowed""), /* keep */",0,0,0,1,2,0,0,0,0,3,51,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,252,"    ARRAY_ZERO_LENGTH_OR_NULL_NOTALLOWED(""A null or zero length array not allowed""),",6,1,0,1,2,0,0,0,0,8,80,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,253,"    COVARIANCE_MATRIX(""covariance matrix""), /* keep */",2,0,0,1,2,0,0,0,0,3,50,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,254,"    DENOMINATOR(""denominator""), /* keep */",4,1,1,1,2,0,0,0,0,11,38,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,255,"    DENOMINATOR_FORMAT(""denominator format""), /* keep */",6,0,0,1,2,0,0,0,0,8,52,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,256,"    FRACTION(""fraction""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,257,"    FUNCTION(""function""), /* keep */",0,0,0,1,2,0,0,0,0,3,32,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,258,"    IMAGINARY_FORMAT(""imaginary format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,259,"    INPUT_ARRAY(""input array""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,260,"    NUMERATOR(""numerator""), /* keep */",2,0,0,1,2,0,0,0,0,3,34,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,261,"    NUMERATOR_FORMAT(""numerator format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,262,"    OBJECT_TRANSFORMATION(""conversion exception in transformation""), /* keep */",2,0,0,1,2,0,0,0,0,3,75,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,263,"    REAL_FORMAT(""real format""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,264,"    WHOLE_FORMAT(""whole format""), /* keep */",2,0,0,1,2,0,0,0,0,3,40,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,265,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,68,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,266,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,69,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,267,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */",0,0,0,4,8,0,0,0,0,12,97,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,268,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,98,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,269,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,127,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,270,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",2,0,0,2,4,0,0,0,0,3,87,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,271,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),",2,0,0,4,8,0,0,0,0,3,150,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,272,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",4,0,0,2,4,0,0,0,0,5,76,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,273,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",2,0,0,2,4,0,0,0,0,3,84,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,274,"    BOBYQA_BOUND_DIFFERENCE_CONDITION(""the difference between the upper and lower bound must be larger than twice the initial trust region radius ({0})""),",2,0,0,3,6,0,0,0,0,3,150,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,275,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),",2,0,0,3,6,0,0,0,0,3,87,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,276,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",2,0,0,4,8,0,0,0,0,3,101,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,277,"    SIGNIFICANCE_LEVEL(""significance level ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,278,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",2,0,0,5,10,0,0,0,0,3,150,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,279,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),",2,0,0,6,12,0,0,0,0,3,96,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,280,"    OUT_OF_RANGE(""out of range""), /* keep */",2,0,0,1,2,0,0,0,0,3,40,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,281,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */",2,0,0,5,10,0,0,0,0,3,62,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,282,"    OUT_OF_RANGE_LEFT(""{0} out of ({1}, {2}] range""),",0,0,0,5,10,0,0,0,0,15,49,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,283,"    OUT_OF_RANGE_RIGHT(""{0} out of [{1}, {2}) range""),",2,0,0,5,10,0,0,0,0,3,50,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,284,"    OUTLINE_BOUNDARY_LOOP_OPEN(""an outline boundary loop is open""),",0,0,0,1,2,0,0,0,0,3,63,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,285,"    OVERFLOW(""overflow""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,286,"    OVERFLOW_IN_FRACTION(""overflow in fraction {0}/{1}, cannot negate""),",2,0,0,3,6,0,0,0,0,3,68,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,287,"    OVERFLOW_IN_ADDITION(""overflow in addition: {0} + {1}""),",2,0,0,3,6,0,0,0,0,3,56,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,288,"    OVERFLOW_IN_SUBTRACTION(""overflow in subtraction: {0} - {1}""),",2,0,0,3,6,0,0,0,0,3,62,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,289,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",2,0,0,3,6,0,0,0,0,3,108,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,290,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),",2,0,0,3,6,0,0,0,0,3,99,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,291,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",4,0,0,5,10,0,10,0,0,16,91,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,292,"    POLYNOMIAL(""polynomial""), /* keep */",2,1,1,1,2,0,0,0,0,8,36,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,293,"    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(""number of polynomial interpolants must match the number of segments ({0} != {1} - 1)""),",0,0,0,4,8,0,0,0,0,12,130,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,294,"    POPULATION_LIMIT_NOT_POSITIVE(""population limit has to be positive""),",0,0,0,1,2,0,0,0,0,3,69,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,295,"    POSITION_SIZE_MISMATCH_INPUT_ARRAY(""position {0} and size {1} don't fit to the size of the input array {2}""),",4,1,0,4,8,0,0,0,0,6,109,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,296,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",10,3,0,4,8,0,0,0,0,14,90,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,297,"    PROPAGATION_DIRECTION_MISMATCH(""propagation direction mismatch""),",0,0,0,1,2,0,0,0,0,3,65,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,298,"    RANDOMKEY_MUTATION_WRONG_CLASS(""RandomKeyMutation works only with RandomKeys, not {0}""),",0,0,0,2,4,0,0,0,0,6,88,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,299,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",8,0,1,1,2,1,4,8,0,26,77,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,300,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),",2,0,0,3,6,0,0,0,0,3,75,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,301,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),",0,0,0,5,10,0,0,0,0,15,72,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,302,"    ROW_INDEX(""row index ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,40,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,303,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",2,0,0,7,14,0,0,0,0,3,126,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,304,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",2,0,1,5,10,0,0,0,0,13,98,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,305,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),",0,0,0,5,10,0,0,0,0,15,113,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,306,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",0,0,0,1,2,0,0,0,0,3,66,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,307,"    SIMPLE_MESSAGE(""{0}""),",2,0,0,2,4,0,0,0,0,3,22,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,308,"    SINGULAR_MATRIX(""matrix is singular""), /* keep */",2,0,0,1,2,0,0,0,0,3,49,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,309,"    SINGULAR_OPERATOR(""operator is singular""),",2,0,0,1,2,0,0,0,0,3,42,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,310,"    SUBARRAY_ENDS_AFTER_ARRAY_END(""subarray ends after array end""),",2,0,0,1,2,0,0,0,0,3,63,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,311,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),",2,0,0,3,6,0,0,0,0,3,87,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,312,"    TOO_LARGE_TOURNAMENT_ARITY(""tournament arity ({0}) cannot be bigger than population size ({1})""),",2,0,0,5,10,0,0,2,0,6,97,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,313,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),",2,0,0,3,6,0,0,0,0,3,97,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,314,"    TOO_MUCH_CANCELLATION(""too much cancellation in a denominator""),",2,0,0,1,2,0,0,2,0,5,64,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,315,"    TOO_MANY_REGRESSORS(""too many regressors ({0}) specified, only {1} in the model""),",8,1,0,4,8,0,0,0,0,10,82,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,316,"    TOO_SMALL_COST_RELATIVE_TOLERANCE(""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible""),",2,0,0,3,6,0,0,0,0,3,136,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,317,"    TOO_SMALL_INTEGRATION_INTERVAL(""too small integration interval: length = {0}""),",0,0,0,2,4,0,0,0,0,6,79,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,318,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),",0,0,0,3,6,0,0,0,0,9,120,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,319,"    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible""),",4,1,1,3,6,0,0,0,0,15,156,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,320,"    TRUST_REGION_STEP_FAILED(""trust region step has failed to reduce Q""),",2,0,0,1,2,0,0,0,0,3,69,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,321,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),",2,0,0,2,4,0,0,0,0,3,76,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,322,"    TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED(""two or more values required in each category, one has {0}""),",2,0,0,2,4,0,0,0,0,3,101,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,323,"    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(""unable to bracket optimum in line search""),",2,0,0,1,2,0,0,0,0,3,85,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,324,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),",0,0,0,1,2,0,0,0,0,3,97,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,325,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),",2,0,0,1,2,0,0,0,0,3,95,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,326,"    UNABLE_TO_ORTHOGONOLIZE_MATRIX(""unable to orthogonalize matrix in {0} iterations""),",2,0,0,2,4,0,0,0,0,3,83,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,327,"    UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN(""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix""),",2,0,0,3,6,0,0,0,0,3,117,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,328,"    UNABLE_TO_SOLVE_SINGULAR_PROBLEM(""unable to solve: singular problem""),",2,0,0,1,2,0,0,0,0,3,70,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,329,"    UNBOUNDED_SOLUTION(""unbounded solution""),",2,0,0,1,2,0,0,0,0,3,41,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,330,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),",2,0,0,20,40,0,0,0,0,3,118,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,331,"    UNKNOWN_PARAMETER(""unknown parameter {0}""),",2,0,0,2,4,0,0,0,0,3,43,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,332,"    UNMATCHED_ODE_IN_EXPANDED_SET(""ode does not match the main ode set in the extended set""),",2,0,0,1,2,0,0,0,0,3,89,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,333,"    CANNOT_PARSE_AS_TYPE(""string \""{0}\"" unparseable (from position {1}) as an object of type {2}""), /* keep */",0,0,0,5,10,0,0,0,0,15,107,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,334,"    CANNOT_PARSE(""string \""{0}\"" unparseable (from position {1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,74,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,335,"    UNPARSEABLE_3D_VECTOR(""unparseable 3D vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,56,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,336,"    UNPARSEABLE_COMPLEX_NUMBER(""unparseable complex number: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,66,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,337,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),",4,1,0,2,4,0,0,0,0,5,60,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,338,"    UNSUPPORTED_EXPANSION_MODE(""unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})""),",0,0,0,8,16,0,0,0,0,24,106,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,339,"    UNSUPPORTED_OPERATION(""unsupported operation""), /* keep */",6,0,0,1,2,0,6,2,0,15,58,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,340,"    ARITHMETIC_EXCEPTION(""arithmetic exception""), /* keep */",2,0,0,1,2,0,0,0,0,3,56,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,341,"    ILLEGAL_STATE(""illegal state""), /* keep */",10,0,0,1,2,1,0,0,0,12,42,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,342,"    USER_EXCEPTION(""exception generated in user code""), /* keep */",2,0,0,1,2,0,0,0,0,3,62,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,343,"    URL_CONTAINS_NO_DATA(""URL {0} contains no data""),",10,1,0,2,4,0,0,0,0,12,49,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,344,"    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(""{0} values have been added before statistic is configured""),",2,0,0,2,4,0,0,0,0,3,103,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,345,"    VECTOR_LENGTH_MISMATCH(""vector length mismatch: got {0} but expected {1}""),",0,0,0,3,6,0,0,0,0,9,75,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,346,"    VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT(""vector must have at least one element""),",0,0,0,1,2,0,0,0,0,3,79,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,347,"    WEIGHT_AT_LEAST_ONE_NON_ZERO(""weigth array must contain at least one non-zero value""),",0,0,0,1,2,0,0,0,0,3,86,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,348,"    WRONG_BLOCK_LENGTH(""wrong array shape (block length = {0}, expected {1})""),",2,0,0,4,8,0,0,0,0,3,75,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,349,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),",2,0,0,3,6,0,0,0,0,3,64,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,350,"    NUMBER_OF_POINTS(""number of points ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,54,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,351,"    ZERO_DENOMINATOR(""denominator must be different from 0""),",2,0,0,1,2,0,0,0,0,3,57,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,352,"    ZERO_DENOMINATOR_IN_FRACTION(""zero denominator in fraction {0}/{1}""),",4,1,0,3,6,0,6,0,0,12,69,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,353,"    ZERO_FRACTION_TO_DIVIDE_BY(""the fraction to divide by must not be zero: {0}/{1}""),",2,0,0,3,6,0,0,0,0,3,82,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,354,"    ZERO_NORM(""zero norm""),",2,0,0,1,2,0,0,0,0,3,23,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,355,"    ZERO_NORM_FOR_ROTATION_AXIS(""zero norm for rotation axis""),",2,0,0,1,2,0,0,0,0,3,59,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,356,"    ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR(""zero norm for rotation defining vector""),",0,0,0,1,2,0,0,0,0,3,81,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,357,"    ZERO_NOT_ALLOWED(""zero not allowed here"");",2,0,0,1,2,0,0,0,0,3,42,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,39,public enum LocalizedFormats implements Localizable {,2,1,1,0,1,0,0,0,0,8,53,8,0.04706,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,393,          return exp(x)/2.0;,0,1,0,1,2,1,4,0,0,5,18,6,4.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,453,          return exp(x)/2.0;,2,1,0,1,2,1,0,0,0,3,18,7,4.0,0,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1178,        if (Double.isNaN(realPart) ||,0,0,0,1,3,0,0,0,0,4,29,4,2.0,1,1
defect4j,math,org/apache/commons/math/complex/Complex,37,1182,"        return new Complex(realPart, imaginaryPart);",8,3,0,1,2,1,14,0,0,25,44,3,2.0,1,1
defect4j,math,org/apache/commons/math/util/FastMath,37,867,                if (hiPrec != null) {,6,0,1,1,3,2,6,0,0,18,21,3,1.77778,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,871,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,1.77778,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2413,            initialTrustRegionRadius = minDiff / 3.0;,4,1,0,0,0,0,0,0,0,6,41,6,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,126,            lowerBound = lower.clone();,2,0,0,1,2,0,4,0,0,7,27,6,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,134,            upperBound = upper.clone();,0,0,0,1,2,0,0,0,0,3,27,4,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,98,            for (int i = 0; i < dim; i++) {,2,0,0,1,3,1,6,2,0,11,31,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,99,                final double v = startPoint[i];,2,0,1,1,2,1,0,0,0,7,31,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,100,                final double lo = lower[i];,12,2,0,1,2,0,4,0,0,19,27,1,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,101,                if (v < lo) {,4,1,0,1,3,0,0,0,0,5,13,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,107,            if (upper.length != dim) {,4,0,0,1,3,0,0,0,0,5,26,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,110,            for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,6,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,111,                final double v = startPoint[i];,4,3,0,1,2,0,16,0,0,23,31,3,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,112,                final double hi = upper[i];,0,0,0,1,2,0,0,0,0,3,27,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,113,                if (v > hi) {,0,0,0,1,3,0,0,0,0,4,13,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,95,            if (lower.length != dim) {,0,1,1,1,3,0,0,0,0,20,26,10,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,244,    super(interpolator);,2,0,0,1,2,0,0,0,0,2,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,246,    if (interpolator.currentState == null) {,4,1,0,1,3,0,0,0,0,5,40,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,248,      yDotKLast = null;,2,0,0,0,0,0,0,0,0,3,17,6,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,249,      v         = null;,2,2,0,0,0,0,12,0,0,17,17,3,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,250,      vectorsInitialized = false;,2,0,0,0,0,0,0,0,0,4,27,6,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,273,  },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,278,    return new DormandPrince853StepInterpolator(this);,4,1,0,1,2,1,0,0,0,5,50,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,288,"    super.reinitialize(integrator, y, yDotK, forward, primaryMapper, secondaryMappers);",10,6,1,1,2,0,0,0,0,20,83,9,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,290,    final int dimension = currentState.length;,6,0,0,0,0,1,0,0,0,7,42,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,292,    yDotKLast = new double[3][];,2,0,0,2,4,0,0,0,0,3,28,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,293,    for (int k = 0; k < yDotKLast.length; ++k) {,4,1,0,1,3,0,0,0,0,7,44,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,294,      yDotKLast[k] = new double[dimension];,6,1,1,2,4,1,0,0,0,15,37,5,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,297,    v = new double[7][];,0,0,0,2,4,0,0,0,0,6,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,298,    for (int k = 0; k < v.length; ++k) {,0,0,0,1,3,0,0,0,0,4,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,299,      v[k]  = new double[dimension];,0,0,0,2,4,0,0,0,0,6,30,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,302,    vectorsInitialized = false;,10,1,0,0,0,0,0,0,0,14,27,3,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,304,  },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,309,    super.storeTime(t);,0,0,0,1,2,0,0,0,0,3,19,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,310,    vectorsInitialized = false;,0,0,0,0,0,0,0,0,0,0,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,311,  },12,0,0,0,1,0,0,0,0,12,1,5,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,407,    if (currentState == null) {,2,1,0,1,3,0,0,0,0,3,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,409,      return;,0,0,0,0,0,1,0,0,0,1,7,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,220,"    super(METHOD_NAME, true, STATIC_C, STATIC_A, STATIC_B,",8,0,0,0,1,0,0,0,0,9,54,4,0.03448,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,223,  },4,2,0,0,1,0,0,0,0,6,1,5,0.03448,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,231,    super();,0,0,0,1,2,0,0,0,0,3,8,4,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,232,    yDotKLast = null;,2,0,0,0,0,0,0,0,0,3,17,8,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,233,    v         = null;,2,0,0,0,0,0,0,0,0,2,17,4,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,234,    vectorsInitialized = false;,4,0,0,0,0,0,0,0,0,7,27,0,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,235,  },0,0,0,0,1,0,0,0,0,1,1,4,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,180,    private static final double[][] D = {,4,0,0,2,5,3,8,0,0,16,37,1,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,63,  private static final double[] STATIC_C = {,18,4,0,1,3,4,2,0,0,29,42,1,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,70,  private static final double[][] STATIC_A = {,6,0,0,2,5,4,12,4,0,26,44,1,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,137,  private static final double[] STATIC_B = {,2,0,0,1,3,3,0,0,0,5,42,2,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,247,    return 8;,0,0,0,0,0,1,0,0,0,1,9,4,0.03125,0,0
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,37,        super(max);,2,0,0,1,2,0,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,38,        getContext().addMessage(LocalizedFormats.EVALUATIONS);,0,0,0,2,4,0,0,0,0,6,54,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,39,    },2,0,0,0,1,1,6,0,0,9,1,3,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,42,"        this(LocalizedFormats.MAX_COUNT_EXCEEDED, max);",6,0,0,1,2,0,0,0,0,6,47,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,43,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,53,                                     Object ... args) {,0,0,0,0,2,0,0,0,0,2,18,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,54,"        getContext().addMessage(specific, max, args);",0,0,0,2,4,0,0,0,0,6,45,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,55,        this.max = max;,6,1,0,0,0,0,0,0,0,7,15,5,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,56,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,62,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,45,                                     Object ... args) {,8,3,0,0,2,0,0,2,0,13,18,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,46,        context = new ExceptionContext(this);,4,1,0,1,2,0,12,0,0,18,37,3,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,47,"        context.addMessage(pattern, args);",0,0,0,1,2,0,0,0,0,3,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,48,    },6,0,0,0,1,0,16,0,0,23,1,1,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,69,        this(LocalizedFormats.ILLEGAL_STATE);,0,0,0,1,2,0,0,0,0,3,37,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,70,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,74,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,40,151,            maxCountCallback.trigger(maximalCount);,12,2,0,1,2,0,6,0,0,22,39,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,40,65,                     throw new MaxCountExceededException(max);,4,1,0,1,2,0,0,0,0,6,41,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,393,        this.allowed = allowedSolution;,0,0,0,0,0,0,0,0,0,0,31,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,394,"        return super.solve(maxEval, f, min, max, startValue);",10,1,0,1,2,1,6,0,0,18,53,3,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,295,        } catch (MaxCountExceededException e) {,12,1,0,1,4,0,0,2,0,16,39,3,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,296,            throw new TooManyEvaluationsException(e.getMax());,6,1,0,2,4,1,4,2,0,14,50,3,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,128,        this.maximalOrder = maximalOrder;,4,0,0,0,0,1,0,0,0,5,33,2,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,129,        this.allowed = AllowedSolution.ANY_SIDE;,0,0,0,0,0,0,0,0,0,0,40,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,130,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,124,"        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);",6,0,0,1,2,0,0,0,0,6,65,4,0.25,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,125,        if (maximalOrder < 2) {,0,0,0,1,3,0,0,0,0,4,23,4,0.25,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver,40,59,"        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);",0,0,0,1,2,0,0,0,0,3,65,4,0.25,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver,40,60,    },4,0,0,0,1,0,0,0,0,6,1,8,0.25,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,370,"        return evaluate(values, weights, 0, values.length);",4,0,0,1,2,1,6,0,0,10,51,5,1.0,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,222,"        return test(values, weights, begin, length, false);",8,1,0,1,2,1,10,0,0,22,51,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,258,        if (weights == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,262,        if (weights.length != values.length) {,2,0,0,1,3,0,0,0,0,2,38,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,266,        boolean containsPositiveWeight = false;,14,1,0,0,0,0,0,0,0,18,39,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,267,        for (int i = begin; i < begin + length; i++) {,12,2,0,1,3,0,0,0,0,15,46,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,268,            if (Double.isNaN(weights[i])) {,0,0,0,3,7,0,0,0,0,10,31,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,271,            if (Double.isInfinite(weights[i])) {,2,0,1,3,7,0,4,0,0,10,36,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,274,            if (weights[i] < 0) {,0,1,1,2,5,0,0,0,0,5,21,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,277,            if (!containsPositiveWeight && weights[i] > 0.0) {,0,0,0,2,5,0,0,0,0,7,50,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,278,                containsPositiveWeight = true;,4,1,0,0,0,0,0,0,0,7,30,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,282,        if (!containsPositiveWeight) {,10,1,0,1,3,0,0,0,0,12,30,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,286,"        return test(values, begin, length, allowEmpty);",0,0,0,1,2,1,0,0,0,4,47,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,316,        double var = Double.NaN;,2,0,0,0,0,0,0,0,0,4,24,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,318,"        if (test(values, weights,begin, length)) {",0,0,0,2,5,0,0,0,0,7,42,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,319,            clear();,4,1,0,1,2,0,0,0,0,6,8,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,320,            if (length == 1) {,2,0,0,1,3,0,6,2,0,10,18,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,322,            } else if (length > 1) {,0,0,0,1,4,0,0,0,0,5,24,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,323,                Mean mean = new Mean();,4,0,0,1,2,0,0,4,0,8,23,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,324,"                double m = mean.evaluate(values, weights, begin, length);",2,0,0,1,2,0,12,0,0,14,57,10,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,325,"                var = evaluate(values, weights, m, begin, length);",8,0,0,1,2,3,16,4,0,32,50,1,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,328,        return var;,2,0,0,0,0,1,0,0,0,2,11,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,504,        double var = Double.NaN;,6,0,0,0,0,0,0,0,0,6,24,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,506,"        if (test(values, weights, begin, length)) {",10,1,0,2,5,0,10,0,0,22,43,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,507,            if (length == 1) {,2,1,0,1,3,0,0,0,0,3,18,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,509,            } else if (length > 1) {,0,0,0,1,4,0,0,0,0,5,24,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,510,                double accum = 0.0;,2,0,0,0,0,0,0,0,0,2,19,10,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,511,                double dev = 0.0;,2,0,0,0,0,0,0,0,0,2,17,10,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,512,                double accum2 = 0.0;,0,0,0,0,0,0,0,0,0,0,20,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,513,                for (int i = begin; i < begin + length; i++) {,14,2,0,1,3,0,0,0,0,18,46,0,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,514,                    dev = values[i] - mean;,4,1,1,1,2,0,0,0,0,10,23,11,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,515,                    accum += weights[i] * (dev * dev);,0,0,0,2,4,0,0,0,0,6,34,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,516,                    accum2 += weights[i] * dev;,6,1,1,1,2,0,4,0,0,16,27,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,519,                double sumWts = 0;,2,0,0,0,0,0,0,0,0,2,18,10,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,520,                for (int i = 0; i < weights.length; i++) {,10,1,0,1,3,0,0,0,0,12,42,9,0.5,1,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,521,                    sumWts += weights[i];,2,0,1,1,2,0,0,0,0,7,21,11,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,524,                if (isBiasCorrected) {,0,0,0,1,3,0,0,0,0,4,22,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,525,                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);,0,0,0,3,6,0,0,0,0,9,60,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,531,        return var;,4,1,1,0,0,1,0,0,0,10,11,8,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,205,"        if (test(values, weights, begin, length)) {",2,1,0,2,5,1,12,6,0,22,43,1,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,206,            Sum sum = new Sum();,0,0,0,1,2,0,0,0,0,3,20,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,209,"            double sumw = sum.evaluate(weights,begin,length);",14,4,1,1,2,0,2,0,0,31,49,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,210,"            double xbarw = sum.evaluate(values, weights, begin, length) / sumw;",0,0,0,1,2,0,0,0,0,3,67,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,213,            double correction = 0;,0,0,0,0,0,0,0,0,0,0,22,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,214,            for (int i = begin; i < begin + length; i++) {,0,0,0,1,3,0,0,0,0,4,46,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,215,                correction += weights[i] * (values[i] - xbarw);,0,0,0,3,6,0,0,0,0,9,47,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,217,            return xbarw + (correction/sumw);,8,2,0,1,2,1,2,0,0,13,33,0,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,159,        double sum = Double.NaN;,6,0,0,0,0,0,0,0,0,6,24,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,160,"        if (test(values, weights, begin, length, true)) {",0,0,0,2,5,0,10,0,0,11,49,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,161,            sum = 0.0;,4,0,0,0,0,0,6,0,0,13,10,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,162,            for (int i = begin; i < begin + length; i++) {,12,2,0,1,3,0,6,0,0,21,46,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,163,                sum += values[i] * weights[i];,2,1,1,2,4,0,0,0,0,12,30,8,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,166,        return sum;,8,2,0,0,0,1,16,2,0,32,11,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,204,        if (incMoment) {,10,1,1,1,3,0,4,0,0,21,16,1,0.01563,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,205,            moment.clear();,0,0,0,1,2,0,4,0,0,4,15,7,0.01563,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,207,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01563,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,68,        return (point == null) ? null : point.clone();,2,1,0,2,4,1,4,0,0,7,46,5,0.07143,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,181,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,347,            columnsToDrop.add(col);,4,1,0,1,2,0,4,2,0,12,23,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,73,"        throws DimensionMismatchException, NoDataException, NullArgumentException {",12,0,0,0,1,1,0,12,0,26,75,1,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,74,        copyIn(d);,0,0,0,1,2,0,0,0,0,3,10,4,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,75,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,261,        if (data == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,262,            if (row > 0) {,2,1,0,1,3,0,4,0,0,7,14,3,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,265,            if (column > 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,268,            MathUtils.checkNotNull(subMatrix);,0,0,0,1,2,0,0,0,0,3,34,4,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,269,            final int nRows = subMatrix.length;,12,1,0,0,0,1,0,0,0,14,35,4,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,270,            if (nRows == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,274,            final int nCols = subMatrix[0].length;,4,0,1,1,2,1,0,0,0,7,38,6,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,275,            if (nCols == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,278,            data = new double[subMatrix.length][nCols];,0,0,0,2,4,0,0,0,0,6,43,4,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,279,            for (int i = 0; i < data.length; ++i) {,10,1,0,1,3,0,0,0,0,12,39,6,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,280,                if (subMatrix[i].length != nCols) {,6,1,1,2,5,3,0,4,0,18,35,1,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,283,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",2,0,0,3,6,0,0,0,0,2,64,5,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,285,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,289,    },4,0,0,0,1,0,0,0,0,4,1,7,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,525,"        setSubMatrix(in, 0, 0);",0,0,0,1,2,0,4,0,0,4,23,5,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,526,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,332,        List<Integer> columnsToDrop = new ArrayList<Integer>();,2,0,0,1,2,0,0,8,0,10,55,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,333,        columnsToDrop.add(0);,2,0,0,1,2,0,6,4,0,12,21,3,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,336,        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {,2,0,0,3,7,0,0,0,0,2,82,5,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,337,"            final double entry = tableau.getEntry(0, i);",0,0,0,1,2,0,0,0,0,3,44,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,338,"            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {",0,1,0,2,5,0,8,0,0,9,50,6,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,344,        for (int i = 0; i < getNumArtificialVariables(); i++) {,8,1,0,2,5,0,2,0,0,13,55,3,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,345,          int col = i + getArtificialVariableOffset();,6,2,0,1,2,0,4,0,0,12,44,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,346,          if (getBasicRow(col) == null) {,0,0,0,2,5,0,0,0,0,7,31,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,351,        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];,2,2,0,7,14,0,8,0,0,12,83,5,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,352,        for (int i = 1; i < getHeight(); i++) {,6,1,0,2,5,0,2,0,0,10,39,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,353,          int col = 0;,2,0,0,0,0,0,0,0,0,2,12,7,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,354,          for (int j = 0; j < getWidth(); j++) {,0,0,0,2,5,0,0,0,0,7,38,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,355,            if (!columnsToDrop.contains(j)) {,0,0,0,2,5,0,0,0,0,7,33,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,356,"              matrix[i - 1][col++] = tableau.getEntry(i, j);",0,0,0,3,6,0,0,0,0,9,46,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,361,        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {,6,2,0,2,5,0,4,0,0,13,53,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,362,          columnLabels.remove((int) columnsToDrop.get(i));,2,0,0,3,6,0,10,0,0,12,48,1,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,365,        this.tableau = new Array2DRowRealMatrix(matrix);,4,0,0,1,2,0,0,2,0,7,48,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,366,        this.numArtificialVariables = 0;,0,0,0,0,0,0,0,0,0,0,32,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,367,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,42,330,        if (o == null) {,8,1,0,1,3,0,0,0,0,9,16,3,0.0625,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,42,333,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,647,    },2,0,0,0,1,1,4,0,0,7,1,4,9.0,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,643,        if (n > 0) {,6,0,0,1,3,1,4,0,0,12,12,3,6.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1160,                double xa = x - 1.0;,4,0,0,0,0,0,0,0,0,5,20,4,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1161,                double xb = xa - x + 1.0;,6,0,0,0,0,0,2,2,0,11,25,3,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1162,                double tmp = xa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,31,4,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1163,                double aa = xa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,27,4,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1164,                double ab = xa - aa;,2,0,0,0,0,2,0,0,0,4,20,2,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1165,                xa = aa;,10,0,0,0,0,0,0,2,0,15,8,3,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1166,                xb = ab;,4,0,0,0,0,0,0,0,0,5,8,8,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1168,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,2,0,0,2,4,0,0,0,0,2,53,4,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1169,                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];,14,1,0,2,4,0,4,0,0,21,53,3,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1171,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,53,8,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1173,                    aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1174,                    ab = ya * xb + yb * xa + yb * xb;,2,1,0,0,0,0,12,0,0,15,33,5,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1176,                    tmp = aa * HEX_40000000;,2,0,0,0,0,0,0,0,0,2,24,4,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1177,                    ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,10,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1178,                    yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1181,                    aa = ya + LN_QUICK_COEF[i][0];,2,0,0,2,4,3,0,0,0,5,30,2,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1182,                    ab = yb + LN_QUICK_COEF[i][1];,0,0,0,2,4,0,0,0,0,6,30,4,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1184,                    tmp = aa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,24,4,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1185,                    ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,10,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1186,                    yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1190,                aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1191,                ab = ya * xb + yb * xa + yb * xb;,20,5,1,0,0,1,0,0,0,29,33,3,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1193,                tmp = aa * HEX_40000000;,20,6,0,0,0,0,0,0,0,28,24,3,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1194,                ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1195,                yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1197,                return ya + yb;,0,0,0,0,0,1,6,0,0,6,15,5,1.28571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,209,    if ((initialStepSize < minStep) || (initialStepSize > maxStep)) {,10,3,0,3,7,0,0,0,0,13,65,3,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,212,      initialStep = initialStepSize;,0,0,0,0,0,0,0,0,0,0,30,4,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,214,  },0,0,0,0,1,0,12,0,0,12,1,6,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,252,      return forward ? initialStep : -initialStep;,0,0,0,0,0,1,0,0,0,1,44,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3373,        y += 1.0;,0,0,0,0,0,0,0,0,0,0,9,4,0.16667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3375,        if (y == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.16667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3379,        return y;,4,0,0,0,0,1,0,0,0,5,9,4,0.16667,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,334,"            handler.resetState(t, y);",0,0,0,1,2,0,8,0,0,8,25,7,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,49,"        super(rowDimension, columnDimension);",0,0,0,1,2,0,0,0,0,3,37,4,0.03333,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,50,        this.rows = rowDimension;,0,0,0,0,0,0,0,0,0,0,25,4,0.03333,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,51,        this.columns = columnDimension;,4,0,0,0,0,0,0,0,0,5,31,4,0.03333,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,52,        this.entries = new OpenIntToDoubleHashMap(0.0);,4,0,0,1,2,3,0,2,0,10,47,1,0.03333,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,53,    },0,0,0,0,1,0,4,0,0,4,1,5,0.03333,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,57,        if (columnDimension < 1) {,0,0,0,1,3,0,0,0,0,4,26,4,0.00388,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,60,    },2,1,1,0,1,0,0,0,0,7,1,4,0.00388,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,53,"    protected AbstractRealMatrix(final int rowDimension, final int columnDimension) {",0,0,0,1,3,0,0,0,0,4,81,4,0.00386,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,54,        if (rowDimension < 1) {,2,1,0,1,3,0,0,0,0,3,23,4,0.00386,0,0
defect4j,math,org/apache/commons/math/complex/Complex,46,260,            return isZero ? NaN : INF;,18,5,1,0,0,3,2,0,0,35,26,3,2.0,1,0
defect4j,math,org/apache/commons/math/complex/Complex,46,1183,"        return ""("" + real + "", "" + imaginary + "")"";",4,1,0,1,2,1,0,0,0,8,43,4,1.0,0,0
defect4j,math,org/apache/commons/math/complex/Complex,46,587,        return this.add(I).divide(I.subtract(this)).log(),0,0,0,4,8,1,0,0,0,13,49,4,0.33333,0,0
defect4j,math,org/apache/commons/math/complex/Complex,47,257,            return NaN;,2,0,0,0,0,1,0,0,0,2,11,6,2.0,1,0
defect4j,math,org/apache/commons/math/util/FastMath,47,2991,                if (y < 0.0 || invy < 0.0) {,8,1,0,1,3,0,0,0,0,11,28,3,0.5,0,0
defect4j,math,org/apache/commons/math/util/FastMath,47,2994,                    return Math.PI;,6,0,1,0,0,3,4,0,0,14,15,4,0.5,0,0
defect4j,math,org/apache/commons/math/complex/Complex,47,583,        return this.add(I).divide(I.subtract(this)).log(),0,0,0,4,8,1,12,0,0,12,49,6,0.33333,1,1
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,39,public class ExceptionContext implements Serializable {,2,0,0,0,1,1,0,2,0,5,55,1,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,45,    private List<Localizable> msgPatterns = new ArrayList<Localizable>();,6,0,0,1,2,1,4,8,0,19,69,1,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,51,    private List<Object[]> msgArguments = new ArrayList<Object[]>();,0,0,0,3,6,0,0,0,0,9,64,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,55,"    private Map<String, Object> context = new HashMap<String, Object>();",0,0,0,1,2,0,0,0,0,3,68,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,66,        msgPatterns.add(pattern);,0,0,0,1,2,0,6,0,0,6,25,5,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,67,        msgArguments.add(ArgUtils.flatten(arguments));,2,0,1,2,4,1,6,0,0,15,46,3,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,68,    },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,355,    private LocalizedFormats(final String sourceFormat) {,4,0,0,1,3,2,0,2,0,8,53,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,356,        this.sourceFormat = sourceFormat;,2,0,0,0,0,0,0,0,0,3,33,6,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,357,    },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",0,0,0,5,10,0,0,0,0,15,67,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,45,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",0,0,0,4,8,0,0,0,0,12,94,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,46,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",4,0,0,1,2,3,0,4,0,12,41,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,47,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",14,2,0,1,2,0,0,0,0,20,95,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,48,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",4,0,0,1,2,3,0,4,0,11,60,1,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,49,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",26,2,0,1,2,2,8,4,0,46,54,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,50,"    BANDWIDTH(""bandwidth ({0})""),",2,0,0,3,6,0,0,0,0,3,29,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,51,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",10,0,0,4,8,1,0,0,0,15,108,1,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,52,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),",0,0,0,3,6,0,0,0,0,9,93,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,53,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",0,0,0,1,2,0,0,0,0,3,123,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,54,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",0,0,0,1,2,0,0,0,0,3,89,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,55,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",2,0,0,2,4,0,0,0,0,3,108,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",0,0,0,1,2,0,0,0,0,3,100,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,57,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",2,0,0,2,4,0,0,0,0,2,94,5,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,58,"    CANNOT_CONVERT_OBJECT_TO_FRACTION(""cannot convert given object to a fraction number: {0}""),",2,0,0,2,4,0,0,0,0,3,91,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",6,2,0,3,6,0,0,0,0,9,97,6,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",2,0,0,2,4,0,0,0,0,3,83,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",0,0,0,2,4,0,0,0,0,6,86,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",4,1,0,2,4,0,0,0,0,6,87,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",0,0,0,1,2,0,0,0,0,3,84,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",14,5,0,1,2,0,0,0,0,20,131,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",0,0,0,1,2,0,0,0,0,3,75,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",0,0,0,2,4,0,0,0,0,6,98,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",0,0,0,2,4,0,0,0,0,6,78,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",0,0,0,1,2,0,0,0,0,3,95,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",0,0,0,2,4,0,0,0,0,6,74,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",4,1,0,1,2,0,6,0,0,11,55,12,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",0,0,0,3,6,0,0,0,0,9,79,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",0,0,0,2,4,0,0,0,0,6,115,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,78,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",4,2,0,3,6,0,6,0,0,12,46,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,75,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",4,0,0,2,4,3,2,0,0,10,112,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",6,0,0,2,4,0,0,0,0,8,86,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",2,0,1,5,10,0,0,0,0,16,290,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",2,0,0,3,6,0,0,0,0,3,263,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",2,0,1,1,2,1,0,0,0,7,52,8,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,80,"    CROSSING_BOUNDARY_LOOPS(""some outline boundary loops cross each other""),",2,0,0,1,2,1,2,0,0,5,72,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,81,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",2,0,0,3,6,0,0,0,0,3,109,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,82,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",2,0,0,3,6,3,0,0,0,5,81,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,83,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",4,0,0,1,2,0,8,0,0,13,49,5,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,84,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",0,0,0,5,10,0,0,0,0,15,71,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,85,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",0,0,0,3,6,0,0,0,0,9,52,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,86,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",4,0,0,1,2,0,0,0,0,5,54,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,87,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",10,1,0,2,4,0,0,0,0,13,119,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,88,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",12,4,1,1,2,0,0,0,0,22,51,3,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,89,"    DUPLICATED_ABSCISSA(""Abscissa {0} is duplicated at both indices {1} and {2}""),",6,1,0,4,8,1,4,0,0,12,78,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,90,"    EMPTY_CLUSTER_IN_K_MEANS(""empty cluster in k-means""),",0,0,0,1,2,0,0,0,0,3,53,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,91,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",2,0,0,1,2,0,0,0,0,3,88,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,92,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",20,8,0,1,2,1,0,0,0,29,71,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,93,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",0,0,0,1,2,0,0,0,0,3,65,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,94,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",0,0,0,1,2,0,0,0,0,3,77,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,95,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",8,0,0,4,8,3,4,0,0,16,78,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,96,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",20,0,0,3,6,4,0,6,0,31,81,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,97,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",0,0,0,1,2,0,0,0,0,3,53,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,98,"    EVALUATION_FAILED(""evaluation failed for argument = {0}""),",2,0,0,2,4,0,0,0,0,3,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,99,"    EVALUATION(""evaluation""), /* keep */",4,2,0,1,2,0,0,2,0,9,36,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,100,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",6,1,0,3,6,1,0,0,0,8,77,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,101,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",4,1,0,2,4,0,0,0,0,5,69,8,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,102,"    FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),",0,0,0,12,24,0,0,0,0,36,175,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,103,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",0,0,0,3,6,0,0,0,0,9,85,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,104,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",0,0,0,2,4,0,0,0,0,6,79,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,105,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",2,0,0,2,4,0,0,0,0,3,54,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,106,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,73,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,107,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",0,0,0,5,10,0,0,0,0,15,85,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,108,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",0,0,0,1,2,0,0,0,0,3,62,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,109,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",0,0,0,1,2,0,0,0,0,3,54,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,110,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",0,0,0,4,8,0,0,0,0,12,56,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,111,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",0,0,0,4,8,0,0,0,0,12,56,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,112,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",0,0,0,2,4,0,0,0,0,6,76,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,113,"    IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO(""identical abscissas x[{0}] == x[{1}] == {2} cause division by zero""),",2,0,0,6,12,0,0,0,0,3,107,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,114,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",2,0,0,3,6,0,0,0,0,3,95,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,115,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",6,0,0,3,6,0,10,2,0,19,50,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,116,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,64,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,117,"    INDEX(""index ({0})""), /* keep */",0,0,1,3,6,0,12,0,0,16,32,9,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,118,"    NOT_FINITE_NUMBER(""{0} is not a finite number""), /* keep */",2,0,0,2,4,0,0,0,0,3,59,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,119,"    ARRAY_ELEMENT(""value {0} at index {1}""), /* keep */",0,1,1,3,6,0,0,0,0,8,51,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,120,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",22,2,0,3,6,1,0,0,0,28,79,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,121,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",2,0,0,1,2,0,0,0,0,3,59,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,122,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",2,0,0,3,6,0,8,0,0,11,72,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,123,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {1} after final column {0}""),",0,0,0,3,6,0,0,0,0,9,79,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,124,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {1} after final row {0}""),",2,0,0,3,6,0,0,0,0,3,67,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,125,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",10,1,0,4,8,0,0,0,0,12,121,6,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,126,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",0,0,0,2,4,0,0,0,0,6,103,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,127,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,128,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",2,0,0,3,6,0,0,0,0,3,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,129,"    DIMENSION(""dimension ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,40,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,130,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",2,0,0,3,6,0,0,0,0,3,105,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,131,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",0,0,0,3,6,0,0,0,0,9,83,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,132,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS(""{0} method needs at least two previous points""),",0,0,0,2,4,0,0,0,0,6,103,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,133,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",2,0,0,2,4,0,0,0,0,3,66,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,134,"    INVALID_BINARY_DIGIT(""invalid binary digit: {0}""),",10,0,0,2,4,0,8,0,0,19,50,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,135,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",2,0,0,4,8,0,0,0,0,3,112,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,136,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),",0,0,0,4,8,0,0,0,0,12,124,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,137,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",2,0,0,3,6,0,0,0,0,3,72,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,138,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",2,0,0,2,4,0,0,0,0,3,71,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,139,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),",2,0,0,4,8,0,0,0,0,3,141,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,140,"    INVALID_REGRESSION_OBSERVATION(""length of regressor array = {0} does not match the number of variables = {1} in the model""),",2,0,0,3,6,0,0,0,0,3,124,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,141,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",2,0,0,26,52,0,0,0,0,3,165,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,142,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",8,0,0,1,2,0,0,0,0,10,41,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,143,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,144,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",2,1,0,4,8,0,0,0,0,3,56,8,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,145,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),",2,0,0,1,2,0,0,0,0,3,101,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,146,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",2,0,0,1,2,0,0,0,0,3,67,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,147,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,111,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,148,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",2,0,0,5,10,0,0,0,0,3,111,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,149,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",2,0,0,1,2,0,0,0,0,3,70,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,150,"    EVALUATIONS(""evaluations""), /* keep */",0,0,0,1,2,0,8,0,0,8,38,5,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,151,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",2,0,0,3,6,0,0,0,0,3,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,152,"    MAX_EVALUATIONS_EXCEEDED(""maximal number of evaluations ({0}) exceeded""),",2,0,0,3,6,0,0,0,0,3,73,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,153,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",2,0,0,3,6,0,0,0,0,3,71,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,154,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({0,number,0.00E00}) reached, integration needs {1,number,0.00E00}""),",4,0,0,4,8,1,6,0,0,12,132,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,155,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",2,0,0,3,6,0,0,0,0,3,156,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,156,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",2,0,0,2,4,0,0,0,0,3,43,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,157,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",0,0,0,1,2,0,0,0,0,3,49,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,158,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",2,0,0,2,4,0,0,0,0,3,92,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,159,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",0,0,0,2,4,0,0,0,0,6,55,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,160,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",0,0,0,5,10,0,0,0,0,15,68,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,161,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",0,0,0,3,6,0,0,0,0,9,58,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,162,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,163,"    NUMBER_OF_SUCCESSES(""number of successes ({0})""), /* keep */",8,0,0,3,6,0,0,0,0,8,60,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,164,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,73,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,165,"    NUMBER_OF_INTERPOLATION_POINTS(""number of interpolation points ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,82,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,166,"    NUMBER_OF_TRIALS(""number of trials ({0})""),",2,0,0,3,6,0,0,0,0,3,43,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,167,"    ROBUSTNESS_ITERATIONS(""number of robustness iterations ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,168,"    START_POSITION(""start position ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,50,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,169,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge (in less than {0} iterations) for value {1}""),",2,0,0,4,8,0,0,0,0,3,131,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,170,"    NON_INVERTIBLE_TRANSFORM(""non-invertible affine transform collapses some lines into single points""),",0,0,0,1,2,0,0,0,0,3,100,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,171,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",0,0,0,2,4,0,0,0,0,6,98,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,172,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",2,0,0,2,4,0,0,0,0,3,81,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,173,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,89,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,174,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",6,1,0,3,6,0,0,0,0,8,89,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,175,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,176,"    NON_SQUARE_MATRIX(""non square ({0}x{1}) matrix""),",2,0,0,4,8,0,0,0,0,3,49,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,177,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",0,0,0,1,2,0,0,0,0,3,60,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,178,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",2,0,0,1,2,0,0,0,0,3,41,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,179,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",2,0,0,5,10,0,0,0,0,3,93,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,180,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",2,1,1,6,12,0,4,0,0,11,85,6,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,181,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",0,0,0,6,12,0,0,0,0,18,88,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,182,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),",0,0,0,5,10,0,0,0,0,15,113,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,183,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",2,0,0,3,6,0,0,0,0,3,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,184,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,185,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",0,0,0,6,12,0,0,0,0,18,88,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,186,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",2,0,0,5,10,0,0,0,0,3,105,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,187,"    ALPHA(""alpha""), /* keep */",2,0,0,1,2,0,0,0,0,3,26,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,188,"    BETA(""beta""), /* keep */",2,0,0,1,2,0,0,0,0,3,24,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,189,"    NOT_POSITIVE_COLUMNDIMENSION(""invalid column dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,81,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,190,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""),",2,0,0,1,2,0,0,0,0,3,61,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,191,"    NON_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix: diagonal element at ({0},{0}) is larger than {2}""), /* keep */",2,0,0,5,10,0,0,0,0,3,122,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,192,"    NON_POSITIVE_DEFINITE_LINEAR_OPERATOR(""non positive definite linear operator""), /* keep */",2,0,0,1,2,0,0,0,0,3,90,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,193,"    NON_SELF_ADJOINT_LINEAR_OPERATOR(""non self-adjoint linear operator""), /* keep */",10,1,0,1,2,0,0,0,0,13,80,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,194,"    NON_SQUARE_LINEAR_OPERATOR(""non square ({0}x{1}) linear operator""), /* keep */",2,0,0,4,8,0,0,0,0,3,78,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,195,"    DEGREES_OF_FREEDOM(""degrees of freedom ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,196,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",4,0,0,3,6,0,0,0,0,6,77,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,197,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",2,0,0,3,6,0,0,0,0,3,66,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,198,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,65,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,199,"    EXPONENT(""exponent ({0})""), /* keep */",4,0,0,3,6,0,0,0,0,5,38,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,200,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,53,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,201,"    LENGTH(""length ({0})""), /* keep */",4,0,0,3,6,0,0,0,0,7,34,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,202,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,49,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,203,"    MEAN(""mean ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,30,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,204,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",2,0,0,2,4,0,0,0,0,3,72,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,205,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,206,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",2,0,0,3,6,0,0,0,0,3,65,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,207,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",0,0,0,2,5,0,0,0,0,7,53,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,208,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,69,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,209,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,71,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,210,"    POPULATION_SIZE(""population size ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,211,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,76,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,212,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,213,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,214,"    SCALE(""scale ({0})""), /* keep */",6,0,0,3,6,1,0,2,0,11,32,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,215,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,216,"    SHAPE(""shape ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,217,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,77,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,218,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,219,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,63,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,220,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,221,"    NOT_POWER_OF_TWO(""{0} is not a power of 2""),",0,0,0,2,4,0,0,0,0,6,44,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,222,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",8,1,0,2,4,0,0,0,0,11,87,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,223,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",2,0,0,2,4,0,0,0,0,3,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,224,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,225,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",0,0,0,6,12,0,0,0,0,18,107,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,226,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",2,0,0,1,2,0,0,0,0,3,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,227,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",0,0,0,6,12,0,0,0,0,18,104,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,228,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */",6,0,0,6,12,0,0,0,0,9,107,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,229,"    NOT_SUBTRACTION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not subtraction compatible""),",0,0,0,5,10,0,0,0,0,15,99,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,230,"    NOT_SUPPORTED_IN_DIMENSION_N(""method not supported in dimension {0}""),",6,0,0,2,4,0,0,0,0,7,70,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,231,"    NOT_SYMMETRIC_MATRIX(""not symmetric matrix""),",2,0,0,1,2,0,0,0,0,3,45,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,232,"    NON_SYMMETRIC_MATRIX(""non symmetric matrix: the difference between entries at ({0},{1}) and ({1},{0}) is larger than {2}""), /* keep */",4,0,0,8,16,3,0,0,0,8,134,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,233,"    NO_BIN_SELECTED(""no bin selected""),",2,0,0,1,2,0,0,0,0,3,35,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,234,"    NO_CONVERGENCE_WITH_ANY_START_POINT(""none of the {0} start points lead to convergence""), /* keep */",0,0,0,2,4,0,0,0,0,6,99,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,235,"    NO_DATA(""no data""), /* keep */",6,0,0,1,2,4,8,10,0,29,30,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,236,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",2,0,0,4,8,0,0,0,0,3,82,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,237,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),",2,0,0,1,2,0,0,0,0,3,99,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,238,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",2,0,0,1,2,0,0,0,0,3,45,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,239,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""), /* keep */",8,1,0,1,2,0,0,0,0,11,62,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,240,"    NO_REGRESSORS(""Regression model must include at least one regressor""),",4,0,0,1,2,0,0,2,0,7,70,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,241,"    NO_RESULT_AVAILABLE(""no result available""),",2,0,0,1,2,0,0,0,0,3,43,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,242,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",10,3,1,6,12,0,0,0,0,17,75,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,243,"    NULL_NOT_ALLOWED(""null is not allowed""), /* keep */",12,4,1,1,2,0,6,0,0,29,51,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,244,"    COVARIANCE_MATRIX(""covariance matrix""), /* keep */",2,0,0,1,2,0,0,0,0,3,50,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,245,"    DENOMINATOR(""denominator""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,246,"    DENOMINATOR_FORMAT(""denominator format""), /* keep */",2,0,0,1,2,0,0,0,0,3,52,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,247,"    FRACTION(""fraction""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,248,"    FUNCTION(""function""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,249,"    IMAGINARY_FORMAT(""imaginary format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,250,"    INPUT_ARRAY(""input array""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,251,"    NUMERATOR(""numerator""), /* keep */",0,0,0,1,2,0,0,0,0,3,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,252,"    NUMERATOR_FORMAT(""numerator format""), /* keep */",0,0,0,1,2,0,0,0,0,3,48,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,253,"    OBJECT_TRANSFORMATION(""conversion exception in transformation""), /* keep */",2,0,0,1,2,0,0,0,0,3,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,254,"    REAL_FORMAT(""real format""), /* keep */",4,0,0,1,2,3,0,0,0,8,38,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,255,"    WHOLE_FORMAT(""whole format""), /* keep */",0,0,0,1,2,0,0,0,0,3,40,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,256,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,68,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,257,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",4,0,1,4,8,0,0,0,0,9,69,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,258,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,259,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */",0,0,0,4,8,0,0,0,0,12,98,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,260,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,127,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,261,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",2,0,0,2,4,0,0,0,0,3,87,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,262,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),",0,0,0,4,8,0,0,0,0,12,150,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,263,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",2,0,0,2,4,0,0,0,0,3,76,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,264,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",2,0,0,2,4,0,0,0,0,3,84,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,265,"    BOBYQA_BOUND_DIFFERENCE_CONDITION(""the difference between the upper and lower bound must be larger than twice the initial trust region radius ({0})""),",4,0,0,3,6,0,6,0,0,11,150,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,266,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),",2,0,0,3,6,0,0,0,0,3,87,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,267,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",2,0,0,4,8,0,0,0,0,3,101,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,268,"    SIGNIFICANCE_LEVEL(""significance level ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,269,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",0,0,0,5,10,0,0,0,0,15,150,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,270,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),",12,2,0,6,12,0,0,0,0,16,96,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,271,"    OUT_OF_RANGE(""out of range""), /* keep */",2,0,0,1,2,0,0,0,0,3,40,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,272,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */",2,0,0,5,10,0,0,0,0,3,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,273,"    OUTLINE_BOUNDARY_LOOP_OPEN(""an outline boundary loop is open""),",6,0,0,1,2,0,8,0,0,15,63,5,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,274,"    OVERFLOW_IN_FRACTION(""overflow in fraction {0}/{1}, cannot negate""),",2,0,0,3,6,0,0,0,0,3,68,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,275,"    OVERFLOW_IN_ADDITION(""overflow in addition: {0} + {1}""),",4,0,0,3,6,1,2,0,0,8,56,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,276,"    OVERFLOW_IN_SUBTRACTION(""overflow in subtraction: {0} - {1}""),",0,0,0,3,6,0,0,0,0,9,62,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,277,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",2,0,0,3,6,0,0,0,0,3,108,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,278,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),",2,0,0,3,6,0,0,0,0,3,99,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,279,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,91,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,280,"    POLYNOMIAL(""polynomial""), /* keep */",2,0,0,1,2,0,0,0,0,3,36,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,281,"    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(""number of polynomial interpolants must match the number of segments ({0} != {1} - 1)""),",2,0,0,4,8,0,0,0,0,3,130,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,282,"    POPULATION_LIMIT_NOT_POSITIVE(""population limit has to be positive""),",20,3,1,1,2,2,8,2,0,40,69,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,283,"    POSITION_SIZE_MISMATCH_INPUT_ARRAY(""position {0} and size {1} don't fit to the size of the input array {2}""),",2,0,0,4,8,0,0,0,0,3,109,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,284,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",2,0,0,4,8,0,0,0,0,3,90,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,285,"    PROPAGATION_DIRECTION_MISMATCH(""propagation direction mismatch""),",2,0,0,1,2,0,0,0,0,3,65,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,286,"    RANDOMKEY_MUTATION_WRONG_CLASS(""RandomKeyMutation works only with RandomKeys, not {0}""),",0,0,0,2,4,0,0,0,0,6,88,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,287,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",0,0,0,1,2,0,0,0,0,3,77,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,288,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),",2,0,0,3,6,0,0,0,0,3,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,289,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,6,0,0,9,72,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,290,"    ROW_INDEX(""row index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,40,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,291,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",2,0,0,7,14,0,0,0,0,3,126,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,292,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,98,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,293,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,113,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,294,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",8,1,0,1,2,0,0,0,0,10,66,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,295,"    SIMPLE_MESSAGE(""{0}""),",2,0,0,2,4,0,0,0,0,3,22,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,296,"    SINGULAR_MATRIX(""matrix is singular""), /* keep */",2,0,0,1,2,0,0,0,0,3,49,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,297,"    SUBARRAY_ENDS_AFTER_ARRAY_END(""subarray ends after array end""),",2,0,0,1,2,0,0,0,0,3,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,298,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),",4,0,0,3,6,1,0,0,0,6,87,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,299,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),",2,0,0,3,6,0,0,0,0,3,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,300,"    TOO_MUCH_CANCELLATION(""too much cancellation in a denominator""),",2,0,0,1,2,0,0,0,0,3,64,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,301,"    TOO_MANY_REGRESSORS(""too many regressors ({0}) specified, only {1} in the model""),",2,0,0,4,8,0,0,0,0,3,82,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,302,"    TOO_SMALL_COST_RELATIVE_TOLERANCE(""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible""),",0,0,0,3,6,0,0,0,0,9,136,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,303,"    TOO_SMALL_INTEGRATION_INTERVAL(""too small integration interval: length = {0}""),",0,0,0,2,4,0,0,0,0,6,79,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,304,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),",2,0,0,3,6,0,0,0,0,3,120,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,305,"    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible""),",0,0,0,3,6,0,0,0,0,9,156,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,306,"    TRUST_REGION_STEP_FAILED(""trust region step has failed to reduce Q""),",2,0,0,1,2,0,0,0,0,3,69,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,307,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),",4,0,1,2,4,0,0,0,0,8,76,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,308,"    TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED(""two or more values required in each category, one has {0}""),",2,0,0,2,4,0,0,0,0,3,101,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,309,"    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(""unable to bracket optimum in line search""),",2,1,0,1,2,0,0,0,0,3,85,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,310,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),",2,0,0,1,2,0,0,0,0,3,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,311,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),",2,0,0,1,2,0,0,0,0,3,95,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,312,"    UNABLE_TO_ORTHOGONOLIZE_MATRIX(""unable to orthogonalize matrix in {0} iterations""),",2,0,0,2,4,0,0,0,0,3,83,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,313,"    UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN(""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix""),",2,0,0,3,6,0,0,0,0,3,117,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,314,"    UNABLE_TO_SOLVE_SINGULAR_PROBLEM(""unable to solve: singular problem""),",6,0,0,1,2,1,0,0,0,8,70,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,315,"    UNBOUNDED_SOLUTION(""unbounded solution""),",0,0,0,1,2,0,0,0,0,3,41,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,316,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),",2,0,0,20,40,0,0,0,0,2,118,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,317,"    CANNOT_PARSE_AS_TYPE(""string {0} unparseable (from position {1}) as an object of type {2}""), /* keep */",4,0,0,5,10,0,0,0,0,5,103,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,318,"    CANNOT_PARSE(""string {0} unparseable (from position {1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,70,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,319,"    UNPARSEABLE_3D_VECTOR(""unparseable 3D vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,320,"    UNPARSEABLE_COMPLEX_NUMBER(""unparseable complex number: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,66,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,321,"    UNPARSEABLE_FRACTION_NUMBER(""unparseable fraction number: \""{0}\""""),",0,0,0,2,4,0,0,0,0,6,68,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,322,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,60,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,323,"    UNSUPPORTED_EXPANSION_MODE(""unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})""),",2,1,0,8,16,0,2,0,0,6,106,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,324,"    UNSUPPORTED_OPERATION(""unsupported operation""), /* keep */",2,0,0,1,2,0,0,0,0,3,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,325,"    ARITHMETIC_EXCEPTION(""arithmetic exception""), /* keep */",2,0,0,1,2,0,0,0,0,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,326,"    ILLEGAL_STATE(""illegal state""), /* keep */",2,0,0,1,2,0,0,0,0,3,42,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,327,"    USER_EXCEPTION(""exception generated in user code""), /* keep */",0,0,0,1,2,0,0,0,0,3,62,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,328,"    URL_CONTAINS_NO_DATA(""URL {0} contains no data""),",0,0,0,2,4,0,0,0,0,6,49,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,329,"    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(""{0} values have been added before statistic is configured""),",4,0,0,2,4,1,6,4,0,16,103,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,330,"    VECTOR_LENGTH_MISMATCH(""vector length mismatch: got {0} but expected {1}""),",0,0,0,3,6,0,0,0,0,9,75,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,331,"    VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT(""vector must have at least one element""),",0,0,0,1,2,0,0,0,0,3,79,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,332,"    WEIGHT_AT_LEAST_ONE_NON_ZERO(""weigth array must contain at least one non-zero value""),",2,0,0,1,2,0,0,0,0,3,86,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,333,"    WRONG_BLOCK_LENGTH(""wrong array shape (block length = {0}, expected {1})""),",8,1,0,4,8,0,0,0,0,11,75,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,334,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),",8,3,0,3,6,0,0,0,0,12,64,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,335,"    NUMBER_OF_POINTS(""number of points ({0})""), /* keep */",4,0,0,3,6,0,0,0,0,5,54,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,336,"    ZERO_DENOMINATOR(""denominator must be different from 0""),",2,0,0,1,2,0,0,0,0,3,57,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,337,"    ZERO_DENOMINATOR_IN_FRACTION(""zero denominator in fraction {0}/{1}""),",0,0,0,3,6,0,0,0,0,9,69,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,338,"    ZERO_FRACTION_TO_DIVIDE_BY(""the fraction to divide by must not be zero: {0}/{1}""),",2,0,0,3,6,0,0,0,0,3,82,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,339,"    ZERO_NORM(""zero norm""),",4,0,0,1,2,0,0,0,0,5,23,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,340,"    ZERO_NORM_FOR_ROTATION_AXIS(""zero norm for rotation axis""),",2,0,0,1,2,0,0,0,0,3,59,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,341,"    ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR(""zero norm for rotation defining vector""),",0,0,0,1,2,0,0,0,0,3,81,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,342,"    ZERO_NOT_ALLOWED(""zero not allowed here"");",0,0,0,1,2,0,0,0,0,3,42,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,39,public enum LocalizedFormats implements Localizable {,2,0,0,0,1,1,0,2,0,5,53,1,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,42,        final List<Object> list = new ArrayList<Object>();,0,0,0,1,2,0,0,0,0,3,50,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,43,        if (array != null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,44,            for (Object o : array) {,4,0,0,1,3,0,0,2,0,6,24,6,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,45,                if (o instanceof Object[]) {,2,0,0,2,5,0,0,2,0,4,28,9,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,46,                    for (Object oR : flatten((Object[]) o)) {,4,0,0,4,9,0,2,4,0,10,41,10,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,50,                    list.add(o);,0,0,0,1,2,0,0,0,0,3,12,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,54,        return list.toArray();,0,0,0,1,2,1,0,0,0,4,22,4,0.25,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,189,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.16667,1,0
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,48,60,"        super(DEFAULT_ABSOLUTE_ACCURACY, Method.REGULA_FALSI);",6,0,1,1,2,0,0,0,0,16,54,3,0.125,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,48,61,    },4,0,0,0,1,0,6,0,0,12,1,0,0.125,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,67,    },2,0,0,0,1,0,0,0,0,2,1,9,1.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,368,        checkVectorDimensions(v.getDimension());,0,0,0,2,4,0,0,0,0,6,40,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,369,        OpenMapRealVector res = new OpenMapRealVector(this);,8,0,0,1,2,0,0,4,0,12,52,1,1.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,370,        Iterator iter = res.entries.iterator();,2,0,0,1,2,0,0,0,0,3,39,8,1.0,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,371,        while (iter.hasNext()) {,0,0,0,2,5,0,0,0,0,7,24,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,372,            iter.advance();,4,1,1,1,2,0,0,0,0,7,15,9,1.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,373,"            res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));",0,0,0,5,10,0,0,0,0,15,64,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,186,        if (states[index] == FREE) {,0,0,0,2,5,0,0,0,0,7,28,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,187,            return missingEntries;,2,0,0,0,0,1,0,0,0,2,22,6,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,354,        final int hash  = hashOf(key);,2,0,0,1,2,1,4,0,0,7,30,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,355,        int index = hash & mask;,6,1,0,0,0,0,0,0,0,7,24,5,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,356,"        if (containsKey(key, index)) {",4,1,0,2,5,1,4,0,0,10,30,6,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,357,            return doRemove(index);,0,0,0,1,2,1,4,0,0,4,23,7,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,394,        keys[index]   = 0;,2,1,0,1,2,0,0,0,0,3,18,5,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,395,        states[index] = REMOVED;,6,1,0,1,2,0,0,0,0,7,24,7,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,396,        final double previous = values[index];,0,0,0,1,2,0,0,0,0,3,38,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,397,        values[index] = missingEntries;,0,0,0,1,2,0,0,0,0,3,31,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,398,        --size;,2,0,1,0,0,0,0,0,0,8,7,9,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,399,        ++count;,4,0,0,0,0,3,0,2,0,10,8,1,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,400,        return previous;,10,1,0,0,0,1,4,0,0,15,16,7,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,63,        int d = getDimension();,6,1,0,1,2,1,16,0,0,25,23,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,64,        if (d != n) {,0,0,0,1,3,0,2,2,0,4,13,5,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,666,        } else if (entries.containsKey(index)) {,0,0,0,2,6,0,6,0,0,6,40,6,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,667,            entries.remove(index);,0,0,0,1,2,0,6,0,0,6,22,8,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,210,        final int hash  = hashOf(key);,0,0,0,1,2,0,0,0,0,3,30,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,211,        int index = hash & mask;,0,0,0,0,0,0,0,0,0,0,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,212,"        if (containsKey(key, index)) {",0,0,0,2,5,0,6,0,0,6,30,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,213,            return true;,6,1,0,0,0,1,0,0,0,7,12,7,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,33,public class OpenMapRealVector extends AbstractRealVector,2,0,0,0,0,1,0,2,0,5,57,1,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,239,                    return x1;,0,0,0,0,0,1,0,0,0,1,10,4,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,187,                    if (x == x1) {,4,1,0,1,3,0,0,0,0,5,14,9,0.16667,1,0
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,50,43,"        super(DEFAULT_ABSOLUTE_ACCURACY, Method.REGULA_FALSI);",0,0,0,1,2,0,0,0,0,3,54,4,0.125,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,50,44,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,51,43,"        super(DEFAULT_ABSOLUTE_ACCURACY, Method.REGULA_FALSI);",6,0,0,1,2,0,0,0,0,6,54,4,0.125,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,51,44,    },6,2,0,0,1,3,4,0,0,15,1,2,0.125,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,124,"        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);",4,0,0,1,2,1,12,0,0,16,73,5,0.08333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,199,                switch (allowed) {,0,0,0,1,3,0,0,0,0,4,18,4,0.04762,1,1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,178,                switch (method) {,0,0,0,1,3,0,6,0,0,6,17,5,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,171,            if (f1 * fx < 0) {,6,2,1,1,3,0,0,0,0,12,18,3,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,174,                x0 = x1;,4,0,0,0,0,0,0,0,0,5,8,8,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,175,                f0 = f1;,4,0,0,0,0,0,0,0,0,5,8,8,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,176,                inverted = !inverted;,6,3,0,0,0,0,0,0,0,10,21,0,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,178,                switch (method) {,2,0,1,1,3,0,0,0,0,11,17,3,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,192,            x1 = x;,4,0,0,0,0,0,0,0,0,5,7,6,0.04762,1,1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,193,            f1 = fx;,8,0,0,0,0,0,0,0,0,11,8,3,0.04762,1,1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,198,            if (FastMath.abs(f1) <= ftol) {,8,1,1,2,5,0,14,6,0,37,31,3,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,229,"            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),",6,3,0,2,6,0,14,0,0,23,65,6,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,246,        },16,4,1,0,1,0,22,6,0,70,1,1,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,195,"        return solve(maxEval, f, min, max, min + 0.5 * (max - min));",6,3,0,2,4,1,10,0,0,19,60,5,0.04762,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,313,"  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {",10,0,0,1,3,1,6,8,0,25,69,2,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,316,  double u1u1 = u1.getNormSq();,0,0,0,1,2,0,0,0,0,3,29,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,317,  double u2u2 = u2.getNormSq();,2,0,0,1,2,0,4,0,0,6,29,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,318,  double v1v1 = v1.getNormSq();,18,5,0,1,2,0,4,4,0,31,29,3,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,319,  double v2v2 = v2.getNormSq();,0,0,0,1,2,0,0,0,0,3,29,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,320,  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {,6,2,1,5,11,0,8,0,0,20,63,3,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,325,"  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);",12,1,0,2,4,0,4,2,0,20,50,3,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,328,  double u1u2   = u1.dotProduct(u2);,14,1,0,1,2,0,0,0,0,16,34,3,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,329,  double v1v2   = v1.dotProduct(v2);,2,0,0,1,2,0,6,0,0,8,34,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,330,  double coeffU = u1u2 / u1u1;,0,0,0,0,0,0,0,0,0,0,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,331,  double coeffV = v1v2 / u1u1;,0,0,0,0,0,0,0,0,0,0,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,332,  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));,14,5,0,3,6,0,4,0,0,23,79,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,333,  double alpha  = coeffU - beta * coeffV;,0,0,0,0,0,0,0,0,0,0,39,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,334,"  v2 = new Vector3D(alpha, v1, beta, v2);",0,0,0,1,2,0,0,0,0,3,39,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,337,  Vector3D uRef  = u1;,2,0,0,0,0,3,0,4,0,10,20,2,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,338,  Vector3D vRef  = v1;,4,0,0,0,0,0,0,2,0,6,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,339,  Vector3D v1Su1 = v1.subtract(u1);,0,0,0,1,2,0,0,0,0,3,33,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,340,  Vector3D v2Su2 = v2.subtract(u2);,0,0,0,1,2,0,0,0,0,3,33,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,341,  Vector3D k     = v1Su1.crossProduct(v2Su2);,0,0,0,1,2,0,0,0,0,3,43,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,342,  Vector3D u3    = u1.crossProduct(u2);,2,0,0,1,2,0,0,0,0,2,37,3,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,343,  double c       = k.dotProduct(u3);,2,0,1,1,2,1,0,0,0,5,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,344,  if (c == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,1.0,1,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,378,  c = FastMath.sqrt(c);,2,0,0,1,2,0,6,0,0,9,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,379,  double inv = 1.0 / (c + c);,10,2,0,1,2,0,0,0,0,13,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,380,  q1 = inv * k.getX();,4,1,0,1,2,0,4,0,0,10,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,381,  q2 = inv * k.getY();,12,2,0,1,2,1,4,0,0,21,20,3,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,382,  q3 = inv * k.getZ();,4,1,0,1,2,0,4,0,0,10,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,385,"   k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,",0,0,0,2,5,0,0,0,0,7,53,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,388,  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());,2,1,0,3,6,0,0,0,0,3,46,6,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,390,  },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,481,    return q0;,0,0,0,0,0,1,0,0,0,1,10,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,224,        return x * x + y * y + z * z;,0,0,0,0,0,1,0,0,0,1,29,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,134,"    public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2) {",2,0,0,1,3,3,0,0,0,5,65,2,0.1,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,135,"        this.x = MathUtils.linearCombination(a1, u1.x, a2, u2.x);",0,0,0,1,2,0,0,0,0,3,57,4,0.1,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,136,"        this.y = MathUtils.linearCombination(a1, u1.y, a2, u2.y);",0,0,0,1,2,0,0,0,0,3,57,4,0.1,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,137,"        this.z = MathUtils.linearCombination(a1, u1.z, a2, u2.z);",10,0,0,1,2,0,8,0,0,19,57,4,0.1,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,138,    },6,1,0,0,1,0,0,0,0,7,1,6,0.1,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,134,                  boolean needsNormalization) {,0,0,0,0,2,0,0,0,0,2,29,4,0.07143,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,136,    if (needsNormalization) {,0,0,0,1,3,0,0,0,0,4,25,4,0.07143,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,145,    this.q0 = q0;,4,0,0,0,0,0,0,0,0,5,13,4,0.07143,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,146,    this.q1 = q1;,4,0,0,0,0,0,0,0,0,5,13,4,0.07143,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,147,    this.q2 = q2;,0,0,0,0,0,0,0,0,0,0,13,4,0.07143,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,148,    this.q3 = q3;,4,0,0,0,0,0,0,0,0,5,13,4,0.07143,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,150,  },4,0,1,0,1,1,4,0,0,14,1,3,0.07143,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,98,"  public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);",2,0,0,1,2,0,0,0,0,3,80,4,0.07143,0,0
defect4j,math,org/apache/commons/math/complex/Complex,53,152,        MathUtils.checkNotNull(rhs);,0,0,0,1,2,0,0,0,0,3,28,4,0.05263,0,0
defect4j,math,org/apache/commons/math/complex/Complex,53,153,"        return createComplex(real + rhs.getReal(),",0,0,0,1,3,1,0,0,0,5,42,4,0.05263,1,0
defect4j,math,org/apache/commons/math/complex/Complex,53,319,        return isNaN;,2,0,0,0,0,1,4,0,0,6,13,3,0.04348,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,53,2334,    },10,0,0,0,1,1,8,0,0,19,1,3,0.02381,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2119,            buffer[--q] = '-';,50,9,1,1,2,0,0,2,0,66,18,3,0.08333,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1041,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.07143,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1234,            a.exp = b.exp;,0,0,0,0,0,0,0,0,0,0,14,4,0.05556,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2328,            exponent--;,10,1,0,0,0,0,0,0,0,12,11,5,0.05556,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,473,"      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);",0,0,0,1,2,1,0,0,0,4,101,4,0.33333,1,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,181,    return x;,2,0,0,0,0,1,0,0,0,2,9,4,0.02564,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,189,    return y;,0,0,1,0,0,1,0,0,0,5,9,10,0.02564,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,197,    return z;,0,0,0,0,0,1,0,0,0,1,9,4,0.02564,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,93,"  public Vector3D(double x, double y, double z) {",4,0,0,1,3,0,0,2,0,6,47,5,0.01266,1,1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,94,    this.x = x;,4,0,0,0,0,0,0,0,0,5,11,4,0.01266,1,1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,95,    this.y = y;,8,0,0,0,0,1,14,0,0,25,11,1,0.01266,1,1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,96,    this.z = z;,0,0,0,0,0,0,0,0,0,0,11,4,0.01266,1,1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,97,  },0,0,0,0,1,0,0,0,0,1,1,4,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,35,"  public static final Vector3D ZERO   = new Vector3D(0, 0, 0);",4,0,1,1,2,3,0,4,0,16,60,1,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,38,"  public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);",0,0,0,1,2,0,0,0,0,3,60,4,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,41,"  public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);",6,1,0,1,2,3,6,4,0,21,62,1,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,44,"  public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);",0,0,0,1,2,0,0,0,0,3,60,4,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,47,"  public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);",2,1,1,1,2,0,0,0,0,11,62,8,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,50,"  public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);",0,0,0,1,2,0,0,0,0,3,60,4,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,53,"  public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);",4,0,0,1,2,3,0,4,0,13,62,1,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,57,"  public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);",0,0,0,1,2,0,0,0,0,3,84,4,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,61,  public static final Vector3D POSITIVE_INFINITY =,2,0,0,0,0,3,0,2,0,7,48,2,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,65,  public static final Vector3D NEGATIVE_INFINITY =,0,0,0,0,0,0,0,0,0,0,48,4,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,69,  private static final Vector3DFormat DEFAULT_FORMAT =,0,0,0,0,0,0,0,0,0,0,52,4,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,159,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,0,0,0,7,40,4,0.01266,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,85,        Iterator() {,2,0,0,1,3,0,0,0,0,2,12,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,75,        private final int[] counter = new int[dimension];,4,1,1,2,4,2,2,0,0,18,49,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,79,        private int count = -1;,2,0,0,0,0,1,0,0,0,4,23,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,86,            counter[last] = -1;,2,0,0,1,2,0,12,0,0,15,19,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,87,        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,147,            return counter[dim];,0,0,1,1,2,1,0,0,0,4,20,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,196,        return new Iterator();,0,0,0,1,2,1,0,0,0,4,22,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,205,        return dimension;,2,0,0,0,0,1,12,0,0,14,17,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,217,        if (index < 0 ||,8,5,1,0,1,0,6,0,0,23,16,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,272,        return count + c[last];,8,1,0,1,2,1,0,0,0,10,23,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,46,public class MultidimensionalCounter implements Iterable<Integer> {,2,0,0,0,1,1,0,4,0,7,67,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,260,        if (c.length != dimension) {,0,0,0,1,3,0,0,0,0,4,28,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,263,        int count = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,264,        for (int i = 0; i < dimension; i++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,265,            final int index = c[i];,0,0,0,1,2,0,0,0,0,3,23,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,266,            if (index < 0 ||,0,0,0,0,1,0,0,0,0,1,16,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,270,            count += uniCounterOffset[i] * c[i];,20,2,0,2,4,0,0,0,0,24,36,3,0.5,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,44,public final class MathUtils {,8,0,0,0,1,7,0,4,0,19,30,1,0.25,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,89,    private static final long[] FACTORIALS = new long[] {,0,0,0,2,5,0,0,0,0,7,53,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2220,"         return copyOf(source, source.length);",2,0,0,1,2,1,0,0,0,2,37,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2243,         final int[] output = new int[len];,2,0,1,2,4,1,0,0,0,5,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2244,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",4,0,0,2,4,0,14,0,0,18,73,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2245,         return output;,2,0,0,0,0,1,0,0,0,2,14,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,165,    public MultidimensionalCounter(int ... size) {,16,5,0,1,3,1,0,0,0,24,46,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,166,        dimension = size.length;,6,0,0,0,0,0,0,0,0,7,24,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,167,        this.size = MathUtils.copyOf(size);,4,1,0,1,2,0,14,0,0,19,35,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,169,        uniCounterOffset = new int[dimension];,2,0,1,1,2,0,0,0,0,5,38,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,171,        last = dimension - 1;,0,0,0,0,0,0,0,0,0,0,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,172,        int tS = size[last];,14,0,1,1,2,0,0,2,0,21,20,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,173,        for (int i = 0; i < last; i++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,174,            int count = 1;,0,0,0,0,0,0,0,0,0,0,14,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,175,            for (int j = i + 1; j < dimension; j++) {,4,3,0,1,3,0,10,0,0,17,41,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,176,                count *= size[j];,4,0,0,1,2,0,0,2,0,7,17,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,178,            uniCounterOffset[i] = count;,4,0,0,1,2,0,0,0,0,4,28,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,179,            tS *= size[i];,8,0,1,1,2,0,0,0,0,15,14,0,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,181,        uniCounterOffset[last] = 0;,2,0,1,1,2,0,0,0,0,8,27,0,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,183,        if (tS <= 0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,187,        totalSize = tS;,4,0,1,0,0,0,0,0,0,12,15,1,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,188,    },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,55,    private static final double EXP_INT_TABLE_A[] = new double[1500];,2,0,0,2,4,3,0,0,0,5,65,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,60,    private static final double EXP_INT_TABLE_B[] = new double[1500];,0,0,0,2,4,0,0,0,0,6,65,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,65,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,0,0,0,2,4,0,0,0,0,6,66,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,70,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,10,1,0,2,4,0,0,0,0,12,66,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,73,    private static final double FACT[] = new double[20];,6,0,0,2,4,0,0,2,0,8,52,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,76,    private static final double LN_MANT[][] = new double[1024][];,0,0,0,4,8,0,0,0,0,12,61,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,85,    private static final double LN_SPLIT_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,105,    private static final double LN_QUICK_COEF[][] = {,2,1,0,2,5,0,0,0,0,3,49,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,118,    private static final double LN_HI_PREC_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,51,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,128,    private static final double SINE_TABLE_A[] = new double[14];,8,2,0,2,4,0,0,0,0,10,60,10,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,131,    private static final double SINE_TABLE_B[] = new double[14];,2,1,0,2,4,0,0,0,0,3,60,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,134,    private static final double COSINE_TABLE_A[] = new double[14];,6,1,0,2,4,1,0,0,0,8,62,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,137,    private static final double COSINE_TABLE_B[] = new double[14];,0,0,0,2,4,0,0,0,0,6,62,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,140,    private static final double TANGENT_TABLE_A[] = new double[14];,0,0,0,2,4,0,0,0,0,6,63,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,143,    private static final double TANGENT_TABLE_B[] = new double[14];,0,0,0,2,4,0,0,0,0,6,63,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,146,    private static final long RECIP_2PI[] = new long[] {,0,0,0,2,5,0,0,0,0,7,52,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,167,    private static final long PI_O_4_BITS[] = new long[] {,0,0,0,2,5,0,0,0,0,7,54,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,175,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",4,1,0,2,4,0,0,0,0,6,126,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,178,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0,0,0,1,3,0,0,0,0,4,61,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,208,        FACT[0] = 1.0;,4,0,0,1,2,0,6,0,0,12,14,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,209,        for (i = 1; i < FACT.length; i++) {,2,0,1,1,3,0,0,0,0,6,35,9,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,210,            FACT[i] = FACT[i-1] * i;,2,0,0,2,4,3,0,4,0,9,24,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,213,        double tmp[] = new double[2];,0,0,0,2,4,0,0,0,0,6,29,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,214,        double recip[] = new double[2];,0,0,0,2,4,0,0,0,0,6,31,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,217,        for (i = 0; i < 750; i++) {,0,0,0,1,3,0,0,0,0,4,27,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,218,"            expint(i, tmp);",0,0,0,1,2,0,0,0,0,3,15,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,219,            EXP_INT_TABLE_A[i+750] = tmp[0];,0,0,0,2,4,0,0,0,0,6,32,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,220,            EXP_INT_TABLE_B[i+750] = tmp[1];,2,1,0,2,4,0,0,0,0,3,32,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,222,            if (i != 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,224,"                splitReciprocal(tmp, recip);",0,0,0,1,2,0,0,0,0,3,28,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,225,                EXP_INT_TABLE_A[750-i] = recip[0];,0,0,0,2,4,0,0,0,0,6,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,226,                EXP_INT_TABLE_B[750-i] = recip[1];,0,0,0,2,4,0,0,0,0,6,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,231,        for (i = 0; i < EXP_FRAC_TABLE_A.length; i++) {,0,0,0,1,3,0,0,0,0,4,47,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,232,"            slowexp(i/1024.0, tmp);",0,0,0,1,2,0,0,0,0,3,23,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,233,            EXP_FRAC_TABLE_A[i] = tmp[0];,2,0,1,2,4,0,0,0,0,16,29,0,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,234,            EXP_FRAC_TABLE_B[i] = tmp[1];,6,1,0,2,4,0,0,0,0,7,29,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,238,        for (i = 0; i < LN_MANT.length; i++) {,0,0,0,1,3,0,0,0,0,4,38,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,239,            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,0,0,0,4,8,0,0,0,0,12,79,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,240,            LN_MANT[i] = slowLog(d);,0,0,0,2,4,0,0,0,0,6,24,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,244,        buildSinCosTables();,0,0,0,1,2,0,0,0,0,3,20,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,245,    },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,987,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,988,        final double ys[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,989,        final double facts[] = new double[2];,0,0,0,2,4,0,0,0,0,6,37,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,990,        final double as[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,991,"        split(x, xs);",0,0,0,1,2,0,0,0,0,3,13,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,992,        ys[0] = ys[1] = 0.0;,0,0,0,2,4,0,0,0,0,6,20,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,994,        for (int i = 19; i >= 0; i--) {,10,1,0,1,3,0,0,0,0,13,31,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,995,"            splitMult(xs, ys, as);",2,0,0,1,2,0,0,0,0,3,22,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,996,            ys[0] = as[0];,0,0,0,2,4,0,0,0,0,6,14,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,997,            ys[1] = as[1];,0,0,0,2,4,0,0,0,0,6,14,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,999,"            split(FACT[i], as);",4,0,0,2,4,0,8,0,0,12,19,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1000,"            splitReciprocal(as, facts);",0,0,0,1,2,0,6,0,0,6,27,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1002,"            splitAdd(ys, facts, as);",2,1,0,1,2,0,8,0,0,11,24,1,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1003,            ys[0] = as[0];,8,1,0,2,4,1,0,0,0,10,14,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1004,            ys[1] = as[1];,0,0,1,2,4,0,0,0,0,5,14,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1007,        if (result != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1008,            result[0] = ys[0];,0,0,0,2,4,0,0,0,0,6,18,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1009,            result[1] = ys[1];,0,0,0,2,4,0,0,0,0,6,18,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1012,        return ys[0] + ys[1];,0,0,0,2,4,1,0,0,0,7,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1021,        if (d < 8e298 && d > -8e298) {,6,9,1,1,3,0,0,0,0,24,30,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1022,            final double a = d * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1023,            split[0] = (d + a) - a;,0,0,0,2,4,0,0,0,0,6,23,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1024,            split[1] = d - split[0];,2,0,0,2,4,0,0,0,0,3,24,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1025,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1030,    },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1037,        final double c = a[0] + a[1];,2,1,1,2,4,1,0,0,0,8,29,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1038,        final double d = -(c - a[0] - a[1]);,0,0,0,3,6,0,0,0,0,9,36,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1040,        if (c < 8e298 && c > -8e298) {,0,0,0,1,3,0,0,0,0,4,30,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1041,            double z = c * HEX_40000000;,8,1,0,0,0,0,0,0,0,9,28,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1042,            a[0] = (c + z) - z;,2,0,0,2,4,3,0,4,0,9,19,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1043,            a[1] = c - a[0] + d;,0,0,0,2,4,0,0,0,0,6,20,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1044,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1045,            double z = c * 9.31322574615478515625E-10;,0,0,0,0,0,0,0,0,0,0,42,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1046,            a[0] = (c + z - c) * HEX_40000000;,8,3,1,2,4,0,0,0,0,14,34,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1047,            a[1] = c - a[0] + d;,6,2,1,2,4,0,10,0,0,24,20,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1049,    },4,1,1,0,1,3,0,0,0,17,1,1,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1057,        ans[0] = a[0] * b[0];,0,0,0,3,6,0,0,0,0,9,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1058,        ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];,0,5,1,7,14,0,0,0,0,24,49,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1061,        resplit(ans);,0,0,0,1,2,0,0,0,0,3,13,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1062,    },4,0,0,0,1,0,2,0,0,6,1,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1070,        ans[0] = a[0] + b[0];,0,0,0,3,6,0,0,0,0,9,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1071,        ans[1] = a[1] + b[1];,2,1,1,3,6,0,2,0,0,8,21,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1073,        resplit(ans);,0,0,0,1,2,0,0,0,0,3,13,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1074,    },2,1,0,0,1,0,0,0,0,3,1,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1095,        final double b = 1.0/4194304.0;,2,1,0,0,0,1,0,0,0,4,31,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1096,        final double a = 1.0 - b;,8,2,0,0,0,0,0,0,0,10,25,9,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1098,        if (in[0] == 0.0) {,2,1,1,2,5,0,0,0,0,6,19,0,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1103,        result[0] = a / in[0];,0,0,0,2,4,0,0,0,0,6,22,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1104,        result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);,0,0,0,9,18,0,0,0,0,27,60,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1106,        if (result[1] != result[1]) { // can happen if result[1] is NAN,0,0,0,4,9,0,0,0,0,13,63,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1107,            result[1] = 0.0;,0,0,0,1,2,0,0,0,0,3,16,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1111,        resplit(result);,0,0,0,1,2,0,4,0,0,4,16,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1113,        for (int i = 0; i < 2; i++) {,6,1,0,1,3,0,0,0,0,8,29,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1115,            double err = 1.0 - result[0] * in[0] - result[0] * in[1] -,0,0,0,4,8,0,0,0,0,12,58,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1118,            err = err * (result[0] + result[1]);,4,2,1,3,6,0,0,0,0,11,36,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1120,            result[1] += err;,2,0,1,1,2,0,0,0,0,5,17,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1122,    },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1130,        final double xs[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1131,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1132,        final double zs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1135,"        split(a[0], xs);",12,1,1,2,4,0,4,0,0,29,16,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1136,"        split(b[0], ys);",0,0,0,2,4,0,0,0,0,6,16,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1137,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,8,0,0,8,22,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1139,        result[0] = zs[0];,0,0,1,2,4,0,0,0,0,5,18,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1140,        result[1] = zs[1];,0,0,1,2,4,0,0,0,0,5,18,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1143,"        split(b[1], ys);",0,0,0,2,4,0,0,0,0,6,16,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1144,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,0,0,0,3,22,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1146,        double tmp = result[0] + zs[0];,2,1,1,2,4,0,0,0,0,7,31,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1147,        result[1] = result[1] - (tmp - result[0] - zs[0]);,0,0,0,5,10,0,0,0,0,15,50,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1148,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1149,        tmp = result[0] + zs[1];,0,0,0,2,4,0,0,0,0,6,24,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1150,        result[1] = result[1] - (tmp - result[0] - zs[1]);,0,0,0,5,10,0,0,0,0,15,50,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1151,        result[0] = tmp;,0,0,0,1,2,0,0,0,0,3,16,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1154,"        split(a[1], xs);",0,0,1,2,4,0,10,0,0,13,16,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1155,"        split(b[0], ys);",0,0,0,2,4,0,0,0,0,6,16,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1156,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,0,0,0,3,22,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1158,        tmp = result[0] + zs[0];,4,1,1,2,4,1,0,0,0,11,24,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1159,        result[1] = result[1] - (tmp - result[0] - zs[0]);,0,0,0,5,10,0,0,0,0,15,50,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1160,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1161,        tmp = result[0] + zs[1];,0,0,0,2,4,0,0,0,0,6,24,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1162,        result[1] = result[1] - (tmp - result[0] - zs[1]);,2,2,1,5,10,0,0,0,0,20,50,1,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1163,        result[0] = tmp;,0,0,0,1,2,0,0,0,0,3,16,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1166,"        split(a[1], xs);",2,0,0,2,4,3,0,0,0,5,16,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1167,"        split(b[1], ys);",0,0,0,2,4,0,0,0,0,6,16,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1168,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,0,0,0,3,22,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1170,        tmp = result[0] + zs[0];,2,1,1,2,4,0,4,0,0,12,24,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1171,        result[1] = result[1] - (tmp - result[0] - zs[0]);,0,0,0,5,10,0,0,0,0,15,50,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1172,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1173,        tmp = result[0] + zs[1];,2,0,0,2,4,0,0,0,0,3,24,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1174,        result[1] = result[1] - (tmp - result[0] - zs[1]);,2,2,1,5,10,0,0,0,0,13,50,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1175,        result[0] = tmp;,0,0,0,1,2,0,0,0,0,3,16,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1176,    },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1185,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1186,        final double as[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1187,        final double ys[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1196,        xs[0] = 2.718281828459045;,2,1,1,1,2,0,0,0,0,6,26,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1197,        xs[1] = 1.4456468917292502E-16;,0,0,1,1,2,0,0,0,0,3,31,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1199,"        split(1.0, ys);",0,0,0,1,2,0,0,0,0,3,15,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1201,        while (p > 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1202,            if ((p & 1) != 0) {,2,2,0,2,5,0,0,0,0,4,19,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1203,"                quadMult(ys, xs, as);",0,0,0,1,2,0,0,0,0,3,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1204,                ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1207,"            quadMult(xs, xs, as);",2,0,0,1,2,0,8,0,0,11,21,0,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1208,            xs[0] = as[0]; xs[1] = as[1];,2,1,0,4,8,0,0,0,0,3,29,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1210,            p >>= 1;,2,0,0,0,0,0,0,0,0,3,8,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1213,        if (result != null) {,4,1,1,1,3,0,0,0,0,8,21,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1214,            result[0] = ys[0];,2,1,1,2,4,0,0,0,0,13,18,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1215,            result[1] = ys[1];,0,0,1,2,4,0,0,0,0,5,18,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1217,            resplit(result);,0,0,0,1,2,0,4,0,0,4,16,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1220,        return ys[0] + ys[1];,0,0,0,2,4,1,0,0,0,7,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1716,        double x[] = new double[2];,4,1,0,2,4,0,6,0,0,11,27,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1717,        double x2[] = new double[2];,2,0,0,2,4,0,6,0,0,8,28,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1718,        double y[] = new double[2];,2,0,0,2,4,0,0,0,0,2,27,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1719,        double a[] = new double[2];,2,0,0,2,4,0,0,0,0,2,27,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1721,"        split(xi, x);",0,0,0,1,2,0,6,0,0,6,13,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1724,        x[0] += 1.0;,0,0,1,1,2,0,0,0,0,4,12,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1725,        resplit(x);,0,0,0,1,2,0,4,0,0,4,11,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1726,"        splitReciprocal(x, a);",8,2,0,1,2,1,4,0,0,15,22,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1727,        x[0] -= 2.0;,0,0,0,1,2,0,0,0,0,3,12,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1728,        resplit(x);,0,0,0,1,2,0,4,0,0,4,11,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1729,"        splitMult(x, a, y);",2,0,0,1,2,1,8,0,0,11,19,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1730,        x[0] = y[0];,0,0,0,2,4,0,0,0,0,6,12,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1731,        x[1] = y[1];,2,0,1,2,4,3,0,0,0,10,12,1,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1734,"        splitMult(x, x, x2);",4,0,0,1,2,0,8,2,0,14,20,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1740,        y[0] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][0];,4,1,1,3,6,0,0,0,0,10,48,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1741,        y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];,8,2,0,3,6,0,0,0,0,11,48,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1743,        for (int i = LN_SPLIT_COEF.length-2; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,51,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1744,"            splitMult(y, x2, a);",4,0,0,1,2,0,8,0,0,13,20,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1745,            y[0] = a[0];,0,0,0,2,4,0,0,0,0,6,12,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1746,            y[1] = a[1];,0,0,0,2,4,0,0,0,0,6,12,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1747,"            splitAdd(y, LN_SPLIT_COEF[i], a);",0,0,1,2,4,0,6,0,0,10,33,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1748,            y[0] = a[0];,0,0,0,2,4,0,0,0,0,6,12,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1749,            y[1] = a[1];,0,0,0,2,4,0,0,0,0,6,12,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1752,"        splitMult(y, x, a);",0,0,0,1,2,0,0,0,0,3,19,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1753,        y[0] = a[0];,8,3,0,2,4,0,0,0,0,11,12,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1754,        y[1] = a[1];,0,0,0,2,4,0,0,0,0,6,12,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1756,        return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1766,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1767,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1768,        final double facts[] = new double[2];,6,1,0,2,4,2,2,0,0,11,37,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1769,        final double as[] = new double[2];,8,2,0,2,4,1,0,0,0,13,34,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1770,"        split(x, xs);",2,0,0,1,2,0,6,0,0,9,13,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1771,        ys[0] = ys[1] = 0.0;,0,0,0,2,4,0,0,0,0,6,20,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1773,        for (int i = 19; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,31,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1774,"            splitMult(xs, ys, as);",0,0,0,1,2,0,8,0,0,8,22,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1775,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,2,0,13,29,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1777,            if ( (i & 1) == 0) {,2,2,0,2,5,0,0,0,0,4,20,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1778,                continue;,0,0,0,0,0,0,0,2,0,2,9,10,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1781,"            split(FACT[i], as);",0,0,1,2,4,0,4,0,0,8,19,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1782,"            splitReciprocal(as, facts);",0,0,0,1,2,0,0,0,0,3,27,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1784,            if ( (i & 2) != 0 ) {,10,3,0,2,5,0,0,0,0,14,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1785,                facts[0] = -facts[0];,0,0,0,2,4,0,0,0,0,6,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1786,                facts[1] = -facts[1];,0,0,0,2,4,0,0,0,0,6,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1789,"            splitAdd(ys, facts, as);",0,0,0,1,2,0,0,0,0,3,24,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1790,            ys[0] = as[0]; ys[1] = as[1];,2,0,1,4,8,0,0,0,0,7,29,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1793,        if (result != null) {,10,3,0,1,3,0,0,0,0,13,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1794,            result[0] = ys[0];,6,1,1,2,4,0,0,0,0,13,18,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1795,            result[1] = ys[1];,0,0,0,2,4,0,0,0,0,6,18,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1798,        return ys[0] + ys[1];,2,0,0,2,4,1,0,0,0,2,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1809,        final double xs[] = new double[2];,4,0,0,2,4,1,0,0,0,6,34,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1810,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1811,        final double facts[] = new double[2];,2,0,0,2,4,1,0,0,0,3,37,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1812,        final double as[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1813,"        split(x, xs);",0,0,0,1,2,0,6,0,0,6,13,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1814,        ys[0] = ys[1] = 0.0;,0,0,1,2,4,0,6,0,0,12,20,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1816,        for (int i = 19; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,31,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1817,"            splitMult(xs, ys, as);",0,0,1,1,2,0,8,0,0,14,22,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1818,            ys[0] = as[0]; ys[1] = as[1];,0,0,0,4,8,0,0,0,0,12,29,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1820,            if ( (i & 1) != 0) {,0,0,0,2,5,0,0,0,0,7,20,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1821,                continue;,2,0,0,0,0,0,0,0,0,3,9,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1824,"            split(FACT[i], as);",0,0,1,2,4,0,4,0,0,8,19,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1825,"            splitReciprocal(as, facts);",0,0,0,1,2,0,6,0,0,6,27,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1827,            if ( (i & 2) != 0 ) {,2,2,0,2,5,0,0,0,0,4,21,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1828,                facts[0] = -facts[0];,0,0,1,2,4,0,0,0,0,6,21,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1829,                facts[1] = -facts[1];,0,0,0,2,4,0,0,0,0,6,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1832,"            splitAdd(ys, facts, as);",4,1,1,1,2,0,8,0,0,16,24,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1833,            ys[0] = as[0]; ys[1] = as[1];,0,0,0,4,8,0,0,0,0,12,29,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1836,        if (result != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1837,            result[0] = ys[0];,4,3,1,2,4,0,4,0,0,16,18,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1838,            result[1] = ys[1];,4,3,0,2,4,0,0,0,0,8,18,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1841,        return ys[0] + ys[1];,6,2,1,2,4,1,0,0,0,13,21,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1847,        final double result[] = new double[2];,0,0,0,2,4,0,0,0,0,6,38,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1850,        for (int i = 0; i < 7; i++) {,10,2,0,1,3,0,0,0,0,13,29,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1851,            double x = i / 8.0;,10,2,0,0,0,0,0,0,0,13,19,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1853,"            slowSin(x, result);",0,0,0,1,2,0,0,0,0,3,19,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1854,            SINE_TABLE_A[i] = result[0];,2,0,1,2,4,0,0,0,0,12,28,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1855,            SINE_TABLE_B[i] = result[1];,6,1,0,2,4,0,0,0,0,7,28,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1857,"            slowCos(x, result);",2,0,0,1,2,0,6,0,0,9,19,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1858,            COSINE_TABLE_A[i] = result[0];,0,0,0,2,4,0,6,0,0,6,30,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1859,            COSINE_TABLE_B[i] = result[1];,6,2,1,2,4,0,8,0,0,27,30,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1863,        for (int i = 7; i < 14; i++) {,0,0,0,1,3,0,0,0,0,4,30,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1864,            double xs[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1865,            double ys[] = new double[2];,0,0,0,2,4,0,0,0,0,6,28,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1866,            double as[] = new double[2];,2,0,1,2,4,0,0,0,0,5,28,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1867,            double bs[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1868,            double temps[] = new double[2];,2,0,0,2,4,0,0,0,0,2,31,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1870,            if ( (i & 1) == 0) {,0,0,0,2,5,0,0,0,0,7,20,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1872,                xs[0] = SINE_TABLE_A[i/2];,6,3,1,2,4,0,0,0,0,19,26,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1873,                xs[1] = SINE_TABLE_B[i/2];,2,1,1,2,4,0,0,0,0,8,26,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1874,                ys[0] = COSINE_TABLE_A[i/2];,6,1,1,2,4,0,0,0,0,13,28,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1875,                ys[1] = COSINE_TABLE_B[i/2];,2,1,1,2,4,0,0,0,0,8,28,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1878,"                splitMult(xs, ys, result);",0,0,0,1,2,0,0,0,0,3,26,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1879,                SINE_TABLE_A[i] = result[0] * 2.0;,2,1,1,2,4,0,0,2,0,13,34,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1880,                SINE_TABLE_B[i] = result[1] * 2.0;,0,0,0,2,4,0,0,0,0,6,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1883,"                splitMult(ys, ys, as);",0,0,0,1,2,0,0,0,0,3,22,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1884,"                splitMult(xs, xs, temps);",0,0,0,1,2,0,8,0,0,8,25,9,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1885,                temps[0] = -temps[0];,0,0,0,2,4,0,0,0,0,6,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1886,                temps[1] = -temps[1];,0,0,1,2,4,0,0,0,0,6,21,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1887,"                splitAdd(as, temps, result);",0,0,1,1,2,0,0,0,0,5,28,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1888,                COSINE_TABLE_A[i] = result[0];,0,0,0,2,4,0,0,0,0,6,30,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1889,                COSINE_TABLE_B[i] = result[1];,2,0,1,2,4,3,0,0,0,12,30,1,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1891,                xs[0] = SINE_TABLE_A[i/2];,6,1,1,2,4,0,0,0,0,13,26,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1892,                xs[1] = SINE_TABLE_B[i/2];,2,1,1,2,4,0,0,0,0,8,26,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1893,                ys[0] = COSINE_TABLE_A[i/2];,2,1,1,2,4,0,2,0,0,10,28,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1894,                ys[1] = COSINE_TABLE_B[i/2];,2,1,1,2,4,0,0,0,0,8,28,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1895,                as[0] = SINE_TABLE_A[i/2+1];,2,2,1,2,4,0,0,0,0,9,28,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1896,                as[1] = SINE_TABLE_B[i/2+1];,2,2,1,2,4,0,0,0,0,9,28,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1897,                bs[0] = COSINE_TABLE_A[i/2+1];,8,4,1,2,4,0,12,0,0,30,30,0,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1898,                bs[1] = COSINE_TABLE_B[i/2+1];,0,0,0,2,4,0,0,0,0,6,30,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1901,"                splitMult(xs, bs, temps);",0,0,0,1,2,0,8,0,0,8,25,9,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1902,"                splitMult(ys, as, result);",2,0,0,1,2,0,8,2,0,13,26,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1903,"                splitAdd(result, temps, result);",6,1,0,1,2,0,0,0,0,8,32,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1904,                SINE_TABLE_A[i] = result[0];,0,0,0,2,4,0,0,2,0,2,28,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1905,                SINE_TABLE_B[i] = result[1];,0,0,1,2,4,0,0,0,0,7,28,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1908,"                splitMult(ys, bs, result);",4,1,0,1,2,0,8,0,0,13,26,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1909,"                splitMult(xs, as, temps);",0,0,0,1,2,0,8,0,0,8,25,9,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1910,                temps[0] = -temps[0];,2,0,1,2,4,0,0,0,0,10,21,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1911,                temps[1] = -temps[1];,8,2,1,2,4,0,0,0,0,17,21,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1912,"                splitAdd(result, temps, result);",0,0,0,1,2,0,0,0,0,3,32,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1913,                COSINE_TABLE_A[i] = result[0];,0,0,1,2,4,0,0,0,0,7,30,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1914,                COSINE_TABLE_B[i] = result[1];,0,0,1,2,4,0,0,0,0,7,30,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1919,        for (int i = 0; i < 14; i++) {,6,1,0,1,3,0,0,0,0,8,30,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1920,            double xs[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1921,            double ys[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1922,            double as[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1924,            as[0] = COSINE_TABLE_A[i];,2,0,1,2,4,0,0,0,0,10,26,0,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1925,            as[1] = COSINE_TABLE_B[i];,0,0,0,2,4,0,0,0,0,6,26,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1927,"            splitReciprocal(as, ys);",0,0,0,1,2,0,6,0,0,6,24,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1929,            xs[0] = SINE_TABLE_A[i];,10,3,1,2,4,0,0,0,0,22,24,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1930,            xs[1] = SINE_TABLE_B[i];,0,0,1,2,4,0,0,0,0,7,24,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1932,"            splitMult(xs, ys, as);",0,0,0,1,2,0,0,0,0,3,22,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1934,            TANGENT_TABLE_A[i] = as[0];,8,1,1,2,4,0,0,0,0,17,27,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1935,            TANGENT_TABLE_B[i] = as[1];,0,0,1,2,4,0,0,0,0,7,27,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1938,    },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3784,        return (a <= b) ? a : b;,10,2,0,1,2,1,0,0,0,12,24,3,0.25,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,69,"        this(random, EmptyClusterStrategy.LARGEST_VARIANCE);",6,0,0,1,2,0,0,0,0,6,52,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,70,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,134,        return clusters;,2,0,0,0,0,1,0,0,0,2,16,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,175,            int sum = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.5,1,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,176,            for (int i = 0; i < pointSet.size(); i++) {,0,0,0,2,5,0,0,0,0,7,43,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,177,                final T p = pointSet.get(i);,0,0,0,1,2,0,0,0,0,3,28,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,178,"                final Cluster<T> nearest = getNearestCluster(resultSet, p);",6,1,0,1,2,0,0,0,0,8,59,12,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,179,                final double d = p.distanceFrom(nearest.getCenter());,2,0,0,2,4,1,12,0,0,15,53,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,180,                sum += d * d;,2,0,1,0,0,0,6,0,0,19,13,8,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,181,                dx2[i] = sum;,2,0,1,1,2,0,0,0,0,7,13,8,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,186,            final double r = random.nextDouble() * sum;,6,1,0,1,2,0,0,0,0,7,43,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,187,            for (int i = 0 ; i < dx2.length; i++) {,20,1,0,1,3,0,0,2,0,25,39,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,188,                if (dx2[i] >= r) {,4,0,0,2,5,0,0,0,0,5,18,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,189,                    final T p = pointSet.remove(i);,2,1,0,1,2,0,0,0,0,3,31,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,190,                    resultSet.add(new Cluster<T>(p));,0,0,0,2,4,0,0,0,0,6,33,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,191,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,194,        },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,44,public final class MathUtils {,0,0,0,0,1,0,0,0,0,1,30,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,89,    private static final long[] FACTORIALS = new long[] {,0,0,0,2,5,0,0,0,0,7,53,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1873,      double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1874,      for (int i = 0; i < p1.length; i++) {,2,0,0,1,3,0,0,0,0,3,37,15,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1875,          final double dp = p1[i] - p2[i];,2,1,1,2,4,1,0,0,0,21,32,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1876,          sum += dp * dp;,6,1,0,0,0,0,0,0,0,8,15,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1878,      return FastMath.sqrt(sum);,0,0,0,1,2,1,0,0,0,4,26,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,55,    private static final double EXP_INT_TABLE_A[] = new double[1500];,0,0,0,2,4,0,0,0,0,6,65,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,60,    private static final double EXP_INT_TABLE_B[] = new double[1500];,0,0,0,2,4,0,0,0,0,6,65,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,65,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,0,0,0,2,4,0,0,0,0,6,66,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,70,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,0,0,0,2,4,0,0,0,0,6,66,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,73,    private static final double FACT[] = new double[20];,4,1,0,2,4,3,0,0,0,8,52,1,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,76,    private static final double LN_MANT[][] = new double[1024][];,2,0,0,4,8,0,0,0,0,3,61,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,85,    private static final double LN_SPLIT_COEF[][] = {,2,0,1,2,5,0,0,0,0,7,49,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,105,    private static final double LN_QUICK_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,118,    private static final double LN_HI_PREC_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,51,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,128,    private static final double SINE_TABLE_A[] = new double[14];,2,0,0,2,4,3,0,0,0,5,60,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,131,    private static final double SINE_TABLE_B[] = new double[14];,2,0,0,2,4,3,0,0,0,5,60,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,134,    private static final double COSINE_TABLE_A[] = new double[14];,2,0,0,2,4,3,0,2,0,7,62,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,137,    private static final double COSINE_TABLE_B[] = new double[14];,8,1,0,2,4,0,0,0,0,9,62,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,140,    private static final double TANGENT_TABLE_A[] = new double[14];,2,1,0,2,4,0,0,0,0,3,63,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,143,    private static final double TANGENT_TABLE_B[] = new double[14];,0,0,0,2,4,0,0,0,0,6,63,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,146,    private static final long RECIP_2PI[] = new long[] {,0,0,0,2,5,0,0,0,0,7,52,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,167,    private static final long PI_O_4_BITS[] = new long[] {,0,0,0,2,5,0,0,0,0,7,54,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,175,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",6,0,0,2,4,0,0,0,0,7,126,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,178,"    private static final double CBRTTWO[] = { 0.6299605249474366,",2,0,0,1,3,0,0,0,0,3,61,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,208,        FACT[0] = 1.0;,0,0,0,1,2,0,0,0,0,3,14,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,209,        for (i = 1; i < FACT.length; i++) {,0,0,0,1,3,0,0,0,0,4,35,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,210,            FACT[i] = FACT[i-1] * i;,0,0,0,2,4,0,0,0,0,6,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,213,        double tmp[] = new double[2];,2,0,0,2,4,0,0,0,0,2,29,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,214,        double recip[] = new double[2];,0,0,0,2,4,0,0,0,0,6,31,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,217,        for (i = 0; i < 750; i++) {,0,0,0,1,3,0,0,0,0,4,27,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,218,"            expint(i, tmp);",0,0,0,1,2,0,0,0,0,3,15,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,219,            EXP_INT_TABLE_A[i+750] = tmp[0];,0,0,0,2,4,0,0,0,0,6,32,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,220,            EXP_INT_TABLE_B[i+750] = tmp[1];,14,1,1,2,4,0,4,0,0,27,32,1,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,222,            if (i != 0) {,12,2,0,1,3,0,8,0,0,24,13,1,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,224,"                splitReciprocal(tmp, recip);",0,0,0,1,2,0,0,0,0,3,28,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,225,                EXP_INT_TABLE_A[750-i] = recip[0];,4,0,0,2,4,0,0,0,0,5,34,0,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,226,                EXP_INT_TABLE_B[750-i] = recip[1];,0,0,0,2,4,0,0,0,0,6,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,231,        for (i = 0; i < EXP_FRAC_TABLE_A.length; i++) {,0,0,1,1,3,0,2,0,0,7,47,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,232,"            slowexp(i/1024.0, tmp);",0,0,0,1,2,0,0,0,0,3,23,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,233,            EXP_FRAC_TABLE_A[i] = tmp[0];,0,0,0,2,4,0,0,0,0,6,29,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,234,            EXP_FRAC_TABLE_B[i] = tmp[1];,2,0,0,2,4,3,0,0,0,5,29,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,238,        for (i = 0; i < LN_MANT.length; i++) {,0,0,0,1,3,0,0,0,0,4,38,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,239,            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,2,0,0,4,8,0,0,0,0,3,79,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,240,            LN_MANT[i] = slowLog(d);,2,0,0,2,4,1,4,2,0,9,24,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,244,        buildSinCosTables();,4,0,0,1,2,2,0,2,0,8,20,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,245,    },8,1,0,0,1,0,0,0,0,11,1,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,277,        return Math.sqrt(a);,0,0,0,1,2,1,0,0,0,4,20,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,987,        final double xs[] = new double[2];,20,2,0,2,4,1,16,0,0,40,34,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,988,        final double ys[] = new double[2];,8,0,0,2,4,0,6,0,0,16,34,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,989,        final double facts[] = new double[2];,0,0,0,2,4,0,0,0,0,6,37,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,990,        final double as[] = new double[2];,6,1,0,2,4,0,0,0,0,8,34,11,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,991,"        split(x, xs);",0,0,0,1,2,0,0,0,0,3,13,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,992,        ys[0] = ys[1] = 0.0;,0,0,0,2,4,0,0,0,0,6,20,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,994,        for (int i = 19; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,31,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,995,"            splitMult(xs, ys, as);",0,0,0,1,2,0,0,0,0,3,22,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,996,            ys[0] = as[0];,2,0,0,2,4,1,2,0,0,5,14,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,997,            ys[1] = as[1];,18,6,1,2,4,3,0,0,0,30,14,1,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,999,"            split(FACT[i], as);",0,0,0,2,4,0,0,0,0,6,19,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1000,"            splitReciprocal(as, facts);",0,0,0,1,2,0,6,0,0,6,27,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1002,"            splitAdd(ys, facts, as);",6,0,0,1,2,1,0,0,0,7,24,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1003,            ys[0] = as[0];,0,0,1,2,4,0,0,0,0,5,14,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1004,            ys[1] = as[1];,2,0,0,2,4,0,0,0,0,3,14,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1007,        if (result != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1008,            result[0] = ys[0];,0,0,0,2,4,0,0,0,0,6,18,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1009,            result[1] = ys[1];,0,0,0,2,4,0,0,0,0,6,18,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1012,        return ys[0] + ys[1];,0,0,0,2,4,1,0,0,0,7,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1021,        if (d < 8e298 && d > -8e298) {,0,0,0,1,3,0,0,0,0,4,30,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1022,            final double a = d * HEX_40000000;,6,1,0,0,0,1,0,0,0,8,34,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1023,            split[0] = (d + a) - a;,6,2,0,2,4,0,4,0,0,12,23,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1024,            split[1] = d - split[0];,4,1,1,2,4,0,0,0,0,11,24,0,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1025,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1030,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1037,        final double c = a[0] + a[1];,2,1,1,2,4,1,0,0,0,8,29,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1038,        final double d = -(c - a[0] - a[1]);,10,3,1,3,6,1,0,0,0,20,36,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1040,        if (c < 8e298 && c > -8e298) {,0,0,0,1,3,0,0,0,0,4,30,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1041,            double z = c * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,28,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1042,            a[0] = (c + z) - z;,6,2,1,2,4,0,0,0,0,11,19,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1043,            a[1] = c - a[0] + d;,4,2,1,2,4,0,0,0,0,11,20,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1044,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1045,            double z = c * 9.31322574615478515625E-10;,0,0,0,0,0,0,0,0,0,0,42,4,0.33333,0,0
