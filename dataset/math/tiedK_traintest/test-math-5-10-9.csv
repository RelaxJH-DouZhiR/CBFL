dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,165,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",0,0,0,3,6,0,0,0,0,9,97,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,166,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",8,0,0,6,12,0,10,0,0,20,85,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,167,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,88,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,168,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",0,0,0,5,10,0,0,0,0,15,105,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,169,"    NOT_POSITIVE_ALPHA(""alpha must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,170,"    NOT_POSITIVE_BETA(""beta must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,171,"    NOT_POSITIVE_COLUMNDIMENSION(""invalid column dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,81,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,172,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""),",2,0,0,1,2,0,0,0,0,3,61,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,173,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,174,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",0,0,0,3,6,0,0,0,0,9,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,175,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,65,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,176,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,53,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,177,"    LENGTH(""length ({0})""), /* keep */",2,0,0,3,6,0,8,0,0,11,34,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,178,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,179,"    MEAN(""mean ({0})""), /* keep */",10,2,0,3,6,1,0,0,0,14,30,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,180,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",14,7,0,2,4,0,0,0,0,23,72,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,181,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,182,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",0,0,0,3,6,0,0,0,0,9,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,183,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",2,0,0,2,5,0,0,0,0,3,53,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,184,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,185,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,186,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",4,0,0,3,6,0,0,2,0,8,76,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,187,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,188,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,189,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,190,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,191,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",8,3,1,3,6,0,0,0,0,17,58,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,192,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,193,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,194,"    NOT_POWER_OF_TWO(""{0} is not a power of 2""),",0,0,0,2,4,0,0,0,0,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,195,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",8,1,0,2,4,0,0,0,0,10,87,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,196,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",2,0,0,2,4,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,197,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,198,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",4,0,0,6,12,0,2,2,0,9,107,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,199,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",0,0,0,1,2,0,0,2,0,2,79,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,200,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",4,0,0,6,12,0,0,0,0,5,104,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,201,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */",0,0,0,6,12,0,0,0,0,18,107,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,202,"    NOT_SUBTRACTION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not subtraction compatible""),",0,0,0,5,10,0,0,0,0,15,99,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,203,"    NOT_SYMMETRIC_MATRIX(""not symmetric matrix""),",0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,204,"    NO_BIN_SELECTED(""no bin selected""),",0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,205,"    NO_CONVERGENCE_WITH_ANY_START_POINT(""none of the {0} start points lead to convergence""),",0,0,0,2,4,0,0,0,0,6,88,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,206,"    NO_DATA(""no data""), /* keep */",2,0,0,1,2,0,0,0,0,3,30,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,207,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",8,0,0,4,8,1,0,4,0,14,82,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,208,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),",2,0,0,1,2,0,0,0,0,3,99,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,209,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",6,0,0,1,2,0,0,0,0,9,45,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,210,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""),",2,0,0,1,2,0,0,0,0,3,51,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,211,"    NO_RESULT_AVAILABLE(""no result available""),",2,0,0,1,2,0,0,0,0,3,43,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,212,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",6,1,0,6,12,1,2,0,0,11,75,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,213,"    NULL_COVARIANCE_MATRIX(""covariance matrix is null""),",0,0,0,1,2,0,0,0,0,3,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,214,"    NULL_DENOMINATOR(""denominator is null""),",2,0,0,1,2,0,0,0,0,3,40,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,215,"    NULL_DENOMINATOR_FORMAT(""denominator format can not be null""),",0,0,0,1,2,0,0,0,0,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,216,"    NULL_FRACTION(""null fraction""),",2,0,0,1,2,0,0,0,0,3,31,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,217,"    NULL_FUNCTION(""function is null""),",4,0,0,1,2,1,0,0,0,6,34,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,218,"    NULL_IMAGINARY_FORMAT(""null imaginary format""),",4,0,0,1,2,0,8,0,0,14,47,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,219,"    NULL_INPUT_ARRAY(""input array is null""),",2,0,0,1,2,0,0,0,0,3,40,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,220,"    NULL_NUMERATOR(""numerator is null""),",0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,221,"    NULL_NUMERATOR_FORMAT(""numerator format can not be null""),",6,0,0,1,2,0,0,0,0,8,58,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,222,"    NULL_OBJECT_TRANSFORMATION(""Conversion Exception in Transformation, Object is null""),",2,0,0,1,2,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,223,"    NULL_REAL_FORMAT(""null real format""),",0,0,0,1,2,0,0,0,0,1,37,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,224,"    NULL_WHOLE_FORMAT(""whole format can not be null""),",2,0,0,1,2,0,0,0,0,3,50,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,225,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,68,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,226,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,227,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,228,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */",10,2,0,4,8,0,0,0,0,13,98,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,229,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,127,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,230,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",0,0,0,2,4,0,0,0,0,6,87,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,231,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),",2,0,0,4,8,0,0,0,0,3,150,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,232,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",2,0,0,2,4,0,0,0,0,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,233,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",2,0,0,2,4,0,0,0,0,3,84,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,234,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),",10,2,0,3,6,0,6,0,0,20,87,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,235,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",2,0,0,4,8,0,0,0,0,3,101,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,236,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",2,0,0,5,10,0,0,0,0,3,150,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,237,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),",2,0,0,6,12,0,0,0,0,3,96,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,238,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */",2,0,0,5,10,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,239,"    OVERFLOW_IN_FRACTION(""overflow in fraction {0}/{1}, cannot negate""),",0,0,0,3,6,0,0,0,0,9,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,240,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",2,0,0,3,6,0,0,0,0,3,108,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,241,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),",8,0,0,3,6,0,0,0,0,9,99,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,242,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,91,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,243,"    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(""number of polynomial interpolants must match the number of segments ({0} != {1} - 1)""),",2,0,0,4,8,0,0,0,0,3,130,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,244,"    POSITION_SIZE_MISMATCH_INPUT_ARRAY(""position {0} and size {1} don't fit to the size of the input array {2}""),",0,0,0,4,8,0,0,0,0,12,109,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,245,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",0,0,0,4,8,0,0,0,0,12,90,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,246,"    PROPAGATION_DIRECTION_MISMATCH(""propagation direction mismatch""),",0,0,0,1,2,0,0,0,0,3,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,247,"    RANDOMKEY_MUTATION_WRONG_CLASS(""RandomKeyMutation works only with RandomKeys, not {0}""),",2,0,0,2,4,0,0,0,0,3,88,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,248,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",2,0,0,1,2,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,249,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),",2,0,0,3,6,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,250,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,251,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",2,0,0,7,14,0,0,0,0,3,126,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,252,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,253,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),",0,0,0,5,10,0,0,0,0,15,113,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,254,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",2,0,0,1,2,0,0,0,0,3,66,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,255,"    SIMPLE_MESSAGE(""{0}""),",2,0,0,2,4,0,0,0,0,3,22,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,256,"    SINGULAR_MATRIX(""matrix is singular""),",11,2,0,1,2,0,4,0,0,18,38,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,257,"    SUBARRAY_ENDS_AFTER_ARRAY_END(""subarray ends after array end""),",4,1,1,1,2,0,0,0,0,10,63,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,258,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),",2,0,0,3,6,0,0,0,0,3,87,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,259,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),",2,0,0,3,6,0,0,0,0,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,260,"    TOO_SMALL_BANDWIDTH(""the bandwidth must be large enough to accomodate at least 2 points. There are {0}  data points, and bandwidth must be at least {1}  but it is only {2}""),",0,0,0,4,8,0,0,0,0,12,174,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,261,"    TOO_SMALL_COST_RELATIVE_TOLERANCE(""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible""),",0,0,0,3,6,0,0,0,0,9,136,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,262,"    TOO_SMALL_INTEGRATION_INTERVAL(""too small integration interval: length = {0}""),",2,0,0,2,4,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,263,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),",2,0,0,3,6,0,0,0,0,3,120,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,264,"    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible""),",6,0,0,3,6,0,0,0,0,8,156,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,265,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),",2,0,0,2,4,0,0,0,0,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,266,"    TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED(""two or more values required in each category, one has {0}""),",2,0,0,2,4,0,0,0,0,3,101,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,267,"    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(""unable to bracket optimum in line search""),",4,1,0,1,2,0,0,0,0,6,85,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,268,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),",2,0,0,1,2,0,0,0,0,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,269,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),",2,0,0,1,2,0,0,0,0,3,95,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,270,"    UNABLE_TO_ORTHOGONOLIZE_MATRIX(""unable to orthogonalize matrix in {0} iterations""),",0,0,0,2,4,0,0,0,0,6,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,271,"    UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN(""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix""),",2,0,0,3,6,0,0,0,0,3,117,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,272,"    UNABLE_TO_SOLVE_SINGULAR_PROBLEM(""unable to solve: singular problem""),",2,0,0,1,2,0,0,0,0,3,70,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,273,"    UNBOUNDED_SOLUTION(""unbounded solution""),",2,0,0,1,2,0,0,0,0,3,41,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,274,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),",2,0,0,20,40,0,0,0,0,3,118,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,275,"    UNPARSEABLE_3D_VECTOR(""unparseable 3D vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,276,"    UNPARSEABLE_COMPLEX_NUMBER(""unparseable complex number: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,66,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,277,"    UNPARSEABLE_FRACTION_NUMBER(""unparseable fraction number: \""{0}\""""),",6,2,0,2,4,1,10,0,0,20,68,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,278,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,60,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,279,"    UNSUPPORTED_EXPANSION_MODE(""unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})""),",0,0,0,8,16,0,0,0,0,24,106,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,280,"    URL_CONTAINS_NO_DATA(""URL {0} contains no data""),",2,0,0,2,4,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,281,"    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(""{0} values have been added before statistic is configured""),",2,0,0,2,4,0,0,0,0,3,103,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,282,"    VECTOR_LENGTH_MISMATCH(""vector length mismatch: got {0} but expected {1}""),",10,1,0,3,6,0,4,2,0,18,75,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,283,"    VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT(""vector must have at least one element""),",2,0,0,1,2,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,284,"    WEIGHT_AT_LEAST_ONE_NON_ZERO(""weigth array must contain at least one non-zero value""),",0,0,0,1,2,0,0,0,0,3,86,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,285,"    WRONG_BLOCK_LENGTH(""wrong array shape (block length = {0}, expected {1})""),",2,0,0,4,8,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,286,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),",6,4,0,3,6,0,0,0,0,11,64,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,287,"    NUMBER_OF_POINTS(""number of points ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,288,"    ZERO_DENOMINATOR(""denominator must be different from 0""),",0,0,0,1,2,0,0,0,0,3,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,289,"    ZERO_DENOMINATOR_IN_FRACTION(""zero denominator in fraction {0}/{1}""),",2,0,0,3,6,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,290,"    ZERO_FRACTION_TO_DIVIDE_BY(""the fraction to divide by must not be zero: {0}/{1}""),",2,0,0,3,6,0,0,0,0,3,82,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,291,"    ZERO_NORM(""zero norm""),",2,0,0,1,2,0,0,0,0,3,23,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,292,"    ZERO_NORM_FOR_ROTATION_AXIS(""zero norm for rotation axis""),",0,0,0,1,2,0,0,0,0,3,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,293,"    ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR(""zero norm for rotation defining vector"");",2,0,0,1,2,0,0,0,0,3,81,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,40,public enum LocalizedFormats implements Localizable {,10,2,0,0,1,1,0,2,0,15,53,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,311,        return sourceFormat;,2,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,317,            ResourceBundle bundle =,4,0,1,0,0,0,0,2,0,11,23,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,319,            if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {,0,0,0,5,11,0,12,0,0,12,68,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,321,                return bundle.getString(toString());,0,0,0,2,4,1,6,0,0,6,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,326,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,324,        } catch (MissingResourceException mre) {,2,0,0,1,4,0,2,4,0,8,40,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,330,        return sourceFormat;,2,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,381,                            tmp = 0.1;,2,1,0,0,0,0,12,0,0,16,10,3,0.28571,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,607,            } else if (fp < 0) {,2,1,0,1,4,0,0,0,0,3,20,7,0.28571,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,608,"                paru = Math.min(paru, lmPar);",6,0,0,1,2,0,16,0,0,23,29,3,0.28571,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,510,            for (int j = 0; j < solvedCols; ++j) {,12,1,0,1,3,0,0,0,0,14,38,5,0.25,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,511,                int pj = permutation[j];,2,0,1,1,2,0,0,0,0,6,24,9,0.25,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,512,                work1[pj] *= diag[pj] / dxNorm;,2,1,1,2,4,0,0,0,0,12,31,8,0.25,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,514,            sum2 = 0;,0,0,0,0,0,0,0,0,0,0,9,4,0.25,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,515,            for (int j = 0; j < solvedCols; ++j) {,14,2,0,1,3,0,0,0,0,17,38,4,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,516,                int pj = permutation[j];,8,0,1,1,2,1,0,0,0,13,24,3,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,517,                double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,518,                for (int i = 0; i < j; ++i) {,8,1,0,1,3,0,0,0,0,10,29,8,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,519,                    sum += jacobian[i][pj] * work1[permutation[i]];,4,1,1,4,8,0,8,0,0,27,47,3,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,521,                double s = (work1[pj] - sum) / diagR[pj];,4,2,1,3,6,0,0,0,0,14,41,9,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,522,                work1[pj] = s;,8,1,1,1,2,0,0,0,0,15,14,3,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,523,                sum2 += s * s;,6,1,0,0,0,0,0,0,0,8,14,8,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,525,            parl = fp / (delta * sum2);,8,2,0,1,2,0,0,0,0,11,27,6,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,585,            for (int j = 0; j < solvedCols; ++j) {,0,0,0,1,3,0,0,0,0,4,38,4,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,586,                int pj = permutation[j];,8,1,0,1,2,0,0,0,0,10,24,6,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,587,                work1[pj] = work3[pj] * diag[pj] / dxNorm;,0,0,0,3,6,0,0,0,0,9,42,4,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,589,            for (int j = 0; j < solvedCols; ++j) {,10,2,1,1,3,0,0,0,0,22,38,3,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,590,                int pj = permutation[j];,0,0,0,1,2,0,0,0,0,3,24,4,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,591,                work1[pj] /= work2[j];,0,0,1,2,4,0,0,0,0,9,22,8,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,592,                double tmp = work1[pj];,2,0,1,1,2,0,0,0,0,6,23,9,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,593,                for (int i = j + 1; i < solvedCols; ++i) {,10,2,0,1,3,0,0,0,0,13,42,8,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,594,                    work1[permutation[i]] -= jacobian[i][pj] * tmp;,2,1,1,4,8,0,0,0,0,16,47,10,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,597,            sum2 = 0;,2,0,0,0,0,0,0,0,0,3,9,6,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,598,            for (int j = 0; j < solvedCols; ++j) {,8,1,0,1,3,0,0,0,0,10,38,6,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,599,                double s = work1[permutation[j]];,2,0,1,2,4,0,0,0,0,8,33,9,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,600,                sum2 += s * s;,0,0,0,0,0,0,0,0,0,0,14,4,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,602,            double correction = fp / (delta * sum2);,8,2,0,1,2,0,0,0,0,10,40,7,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,605,            if (fp > 0) {,4,2,0,1,3,0,4,0,0,10,13,1,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,612,"            lmPar = Math.max(parl, lmPar + correction);",6,1,0,1,2,0,6,0,0,14,43,6,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,402,                    cost = previousCost;,4,0,0,0,0,0,0,0,0,5,20,10,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,403,                    for (int j = 0; j < solvedCols; ++j) {,0,0,0,1,3,0,0,0,0,4,38,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,404,                        int pj = permutation[j];,2,0,1,1,2,0,0,0,0,6,24,13,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,405,                        point[pj] = oldX[pj];,8,1,1,2,4,0,0,0,0,19,21,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,407,                    tmpVec    = residuals;,0,0,0,0,0,0,0,0,0,0,22,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,408,                    residuals = oldRes;,0,0,0,0,0,0,0,0,0,0,19,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,409,                    oldRes    = tmpVec;,4,0,0,0,0,0,0,0,0,5,19,10,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,508,        double parl = 0;,0,0,0,0,0,0,0,0,0,0,16,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,509,        if (rank == solvedCols) {,4,1,0,1,3,0,0,0,0,5,25,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,529,        sum2 = 0;,2,0,0,0,0,0,0,0,0,3,9,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,530,        for (int j = 0; j < solvedCols; ++j) {,8,1,0,1,3,0,0,0,0,10,38,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,531,            int pj = permutation[j];,2,0,1,1,2,0,0,0,0,6,24,7,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,532,            double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,7,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,533,            for (int i = 0; i <= j; ++i) {,8,1,0,1,3,0,0,0,0,10,30,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,534,                sum += jacobian[i][pj] * qy[i];,2,1,1,3,6,0,0,0,0,14,31,8,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,536,            sum /= diag[pj];,2,0,1,1,2,0,0,0,0,7,16,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,537,            sum2 += sum * sum;,12,1,0,0,0,0,0,0,0,14,18,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,539,        double gNorm = Math.sqrt(sum2);,4,0,0,1,2,0,6,0,0,10,31,5,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,540,        double paru = gNorm / delta;,6,1,0,0,0,0,0,0,0,7,28,5,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,541,        if (paru == 0) {,4,1,0,1,3,0,0,0,0,5,16,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,548,"        lmPar = Math.min(paru, Math.max(lmPar, parl));",0,0,0,2,4,0,0,0,0,6,46,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,549,        if (lmPar == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,553,        for (int countdown = 10; countdown >= 0; --countdown) {,16,2,0,1,3,0,0,0,0,20,55,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,556,            if (lmPar == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,559,            double sPar = Math.sqrt(lmPar);,2,0,0,1,2,0,6,0,0,8,31,7,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,560,            for (int j = 0; j < solvedCols; ++j) {,8,1,0,1,3,0,0,2,0,13,38,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,561,                int pj = permutation[j];,2,0,1,1,2,0,0,0,0,6,24,9,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,562,                work1[pj] = sPar * diag[pj];,0,0,0,2,4,0,0,0,0,6,28,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,564,"            determineLMDirection(qy, work1, work2, work3);",0,0,0,1,2,0,10,0,0,10,46,7,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,566,            dxNorm = 0;,4,0,0,0,0,0,0,0,0,6,11,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,567,            for (int j = 0; j < solvedCols; ++j) {,8,1,0,1,3,0,0,0,0,10,38,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,568,                int pj = permutation[j];,2,0,1,1,2,0,0,0,0,6,24,9,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,569,                double s = diag[pj] * lmDir[pj];,2,1,1,2,4,0,0,0,0,11,32,9,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,570,                work3[pj] = s;,6,0,1,1,2,0,0,0,0,12,14,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,571,                dxNorm += s * s;,6,1,0,0,0,0,0,0,0,8,16,8,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,573,            dxNorm = Math.sqrt(dxNorm);,0,0,0,1,2,0,0,0,0,3,27,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,574,            double previousFP = fp;,4,0,0,0,0,0,0,0,0,4,23,7,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,575,            fp = dxNorm - delta;,22,2,0,0,0,0,0,0,0,26,20,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,579,            if ((Math.abs(fp) <= 0.1 * delta) ||,4,4,0,2,5,0,6,0,0,14,36,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,581,                return;,0,0,0,0,0,1,0,0,0,1,7,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,642,        for (int j = 0; j < solvedCols; ++j) {,0,0,0,1,3,0,0,0,0,4,38,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,643,            int pj = permutation[j];,2,0,1,1,2,0,0,0,0,6,24,7,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,644,            for (int i = j + 1; i < solvedCols; ++i) {,10,2,0,1,3,0,4,0,0,17,42,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,645,                jacobian[i][pj] = jacobian[j][permutation[i]];,6,1,1,5,10,0,0,4,0,28,46,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,647,            lmDir[j] = diagR[pj];,0,0,1,2,4,0,0,0,0,9,21,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,648,            work[j]  = qy[j];,0,0,0,2,4,0,0,0,0,6,17,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,652,        for (int j = 0; j < solvedCols; ++j) {,8,1,0,1,3,0,0,0,0,10,38,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,656,            int pj = permutation[j];,0,0,0,1,2,0,0,0,0,3,24,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,657,            double dpj = diag[pj];,2,0,1,1,2,0,0,0,0,6,22,7,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,658,            if (dpj != 0) {,2,1,0,1,3,0,0,0,0,3,15,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,659,"                Arrays.fill(lmDiag, j + 1, lmDiag.length, 0);",16,5,0,1,2,0,10,0,0,32,45,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,661,            lmDiag[j] = dpj;,2,0,1,1,2,0,0,0,0,7,16,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,666,            double qtbpj = 0;,2,0,0,0,0,0,0,0,0,2,17,7,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,667,            for (int k = j; k < solvedCols; ++k) {,10,1,0,1,3,0,0,0,0,12,38,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,668,                int pk = permutation[k];,6,3,1,1,2,0,6,0,0,19,24,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,672,                if (lmDiag[k] != 0) {,0,1,1,2,5,0,0,0,0,5,21,8,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,676,                    double rkk = jacobian[k][pk];,0,0,0,2,4,0,0,0,0,6,29,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,677,                    if (Math.abs(rkk) < Math.abs(lmDiag[k])) {,0,1,1,4,9,0,10,0,0,15,42,10,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,678,                        final double cotan = rkk / lmDiag[k];,0,0,0,1,2,0,0,0,0,3,37,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,679,                        sin   = 1.0 / Math.sqrt(1.0 + cotan * cotan);,6,3,0,1,2,0,4,0,0,14,45,12,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,680,                        cos   = sin * cotan;,0,0,0,0,0,0,0,0,0,0,20,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,681,                    } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,682,                        final double tan = lmDiag[k] / rkk;,4,1,1,1,2,1,0,0,0,10,35,12,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,683,                        cos = 1.0 / Math.sqrt(1.0 + tan * tan);,6,3,0,1,2,0,4,0,0,14,39,12,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,684,                        sin = cos * tan;,0,0,0,0,0,0,0,0,0,0,16,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,689,                    jacobian[k][pk] = cos * rkk + sin * lmDiag[k];,6,3,1,3,6,0,0,0,0,20,46,10,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,690,                    final double temp = cos * work[k] + sin * qtbpj;,0,0,0,1,2,0,0,0,0,3,48,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,691,                    qtbpj = -sin * work[k] + cos * qtbpj;,8,3,1,1,2,0,0,0,0,17,37,10,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,692,                    work[k] = temp;,2,1,1,1,2,0,0,0,0,21,15,1,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,695,                    for (int i = k + 1; i < solvedCols; ++i) {,10,2,0,1,3,0,0,0,0,13,42,10,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,696,                        double rik = jacobian[i][pk];,2,0,1,2,4,0,0,0,0,8,29,13,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,697,                        final double temp2 = cos * rik + sin * lmDiag[i];,8,3,1,1,2,1,0,0,0,16,49,12,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,698,                        lmDiag[i] = -sin * rik + cos * lmDiag[i];,12,6,1,2,4,0,8,0,0,36,41,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,699,                        jacobian[i][pk] = temp2;,2,0,1,2,4,0,0,0,0,9,24,12,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,707,            lmDiag[j] = jacobian[j][permutation[j]];,6,4,0,4,8,0,0,0,0,10,40,8,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,708,            jacobian[j][permutation[j]] = lmDir[j];,0,1,1,4,8,0,14,0,0,28,39,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,714,        int nSing = solvedCols;,6,1,0,0,0,0,4,0,0,12,23,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,715,        for (int j = 0; j < solvedCols; ++j) {,8,1,0,1,3,0,6,0,0,16,38,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,716,            if ((lmDiag[j] == 0) && (nSing == solvedCols)) {,6,4,1,4,9,0,12,0,0,27,48,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,719,            if (nSing < solvedCols) {,4,1,0,1,3,0,0,0,0,5,25,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,723,        if (nSing > 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,724,            for (int j = nSing - 1; j >= 0; --j) {,8,2,0,1,3,0,0,0,0,11,38,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,725,                int pj = permutation[j];,0,0,0,1,2,0,0,0,0,3,24,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,726,                double sum = 0;,8,0,0,0,0,0,0,0,0,9,15,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,727,                for (int i = j + 1; i < nSing; ++i) {,10,2,0,1,3,0,0,0,0,13,37,8,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,728,                    sum += jacobian[i][pj] * work[i];,10,2,1,3,6,1,0,0,0,29,33,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,730,                work[j] = (work[j] - sum) / lmDiag[j];,4,2,1,4,8,0,0,0,0,26,38,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,735,        for (int j = 0; j < lmDir.length; ++j) {,0,0,0,1,3,0,0,0,0,4,40,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,736,            lmDir[permutation[j]] = work[j];,0,0,0,3,6,0,0,0,0,9,32,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,739,    },0,0,0,0,1,0,0,0,0,1,1,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,378,                    double tmp =,6,1,0,0,0,0,0,0,0,8,12,1,0.21053,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,380,                        if ((0.1 * cost >= previousCost) || (tmp < 0.1)) {,6,4,0,3,7,0,0,0,0,10,50,10,0.21053,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,383,"                        delta = tmp * Math.min(delta, 10.0 * lmNorm);",6,2,0,1,2,0,6,0,0,15,45,10,0.21053,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,384,                        lmPar /= tmp;,0,0,0,0,0,0,0,0,0,0,13,4,0.21053,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,385,                } else if ((lmPar == 0) || (ratio >= 0.75)) {,12,5,0,3,8,1,0,0,0,18,45,3,0.21053,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,419,"                        return new VectorialPointValuePair(point, objective);",4,0,0,1,2,1,0,2,0,6,53,11,0.13793,1,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,161,        TDistribution tDistribution = new TDistributionImpl(nObs - 2);,4,1,0,1,2,0,0,4,0,9,62,4,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,162,        int nVars = correlationMatrix.getColumnDimension();,2,0,0,1,2,0,4,0,0,6,51,5,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,163,        double[][] out = new double[nVars][nVars];,2,0,1,4,8,0,0,0,0,6,42,5,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,164,        for (int i = 0; i < nVars; i++) {,8,1,0,1,3,0,0,0,0,10,33,4,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,165,            for (int j = 0; j < nVars; j++) {,10,1,0,1,3,0,0,0,0,12,33,3,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,166,                if (i == j) {,4,1,0,1,3,0,0,0,0,5,13,8,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,167,                    out[i][j] = 0d;,2,0,1,2,4,0,0,0,0,9,15,3,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,169,"                    double r = correlationMatrix.getEntry(i, j);",2,0,0,1,2,0,8,0,0,10,44,11,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,170,                    double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));,10,5,0,4,8,0,8,0,0,23,59,11,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,171,                    out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));,0,2,1,4,8,0,6,0,0,15,61,10,0.8,1,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,175,        return new BlockRealMatrix(out);,8,0,0,1,2,1,0,2,0,10,32,3,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,46,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,128,        double p0 = 1.0;,2,0,0,0,0,0,0,0,0,2,16,5,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,129,"        double p1 = getA(0, x);",2,0,0,1,2,0,4,0,0,6,23,5,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,130,        double q0 = 0.0;,2,0,0,0,0,0,0,0,0,2,16,5,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,131,        double q1 = 1.0;,2,0,0,0,0,0,0,0,0,2,16,5,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,132,        double c = p1 / q1;,6,1,0,0,0,0,0,0,0,7,19,5,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,133,        int n = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,134,        double relativeError = Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,6,40,5,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,135,        while (n < maxIterations && relativeError > epsilon) {,8,3,0,1,3,0,0,0,0,11,54,4,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,136,            ++n;,2,0,0,0,0,0,0,0,0,3,4,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,137,"            double a = getA(n, x);",2,0,0,1,2,0,6,0,0,8,22,7,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,138,"            double b = getB(n, x);",2,0,0,1,2,0,0,0,0,4,22,4,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,139,            double p2 = a * p1 + b * p0;,10,3,0,0,0,0,0,0,0,13,28,7,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,140,            double q2 = a * q1 + b * q0;,12,3,0,0,0,0,0,0,0,15,28,3,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,141,            boolean infinite = false;,2,0,0,0,0,0,0,0,0,3,25,7,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,142,            if (Double.isInfinite(p2) || Double.isInfinite(q2)) {,0,1,0,3,7,0,12,0,0,13,53,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,175,            if (infinite) {,2,0,0,1,3,0,0,0,0,2,15,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,182,            double r = p2 / q2;,6,1,0,0,0,0,0,0,0,7,19,7,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,184,            if (Double.isNaN(r)) {,0,0,0,2,5,0,0,0,0,7,22,4,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,189,            relativeError = Math.abs(r / c - 1.0);,6,2,0,1,2,0,4,0,0,13,38,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,192,            c = p2 / q2;,6,1,0,0,0,0,0,0,0,8,12,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,193,            p0 = p1;,4,0,0,0,0,0,0,0,0,5,8,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,194,            p1 = p2;,4,0,0,0,0,0,0,0,0,5,8,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,195,            q0 = q1;,4,0,0,0,0,0,0,0,0,5,8,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,196,            q1 = q2;,4,0,0,0,0,0,0,0,0,5,8,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,197,        },0,0,0,0,1,0,0,0,0,1,1,4,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,199,        if (n >= maxIterations) {,10,2,0,1,3,1,0,0,0,13,25,3,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,205,        return c;,2,0,0,0,0,1,0,0,0,2,9,4,0.8,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,128,        if (x == 0.0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.8,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,131,            double t =,2,0,0,0,0,0,0,0,0,2,10,7,0.8,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,136,            if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.8,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,139,                ret = 1.0 - 0.5 * t;,4,2,0,0,0,0,0,0,0,7,20,8,0.8,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,143,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,41,    private static final double[] LANCZOS =,2,0,0,1,2,3,0,0,0,5,39,2,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,61,    private static final double HALF_LOG_2_PI = 0.5 * Math.log(2.0 * Math.PI);,6,2,0,1,2,3,4,0,0,15,74,2,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,97,        if (Double.isNaN(x) || (x <= 0.0)) {,2,2,0,3,7,0,6,0,0,10,36,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,100,            double g = 607.0 / 128.0;,4,1,0,0,0,0,0,0,0,5,25,3,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,102,            double sum = 0.0;,2,0,0,0,0,0,0,0,0,2,17,7,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,103,            for (int i = LANCZOS.length - 1; i > 0; --i) {,10,2,0,1,3,0,0,0,0,13,46,6,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,104,                sum = sum + (LANCZOS[i] / (x + i));,0,0,0,3,6,0,0,0,0,9,35,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,106,            sum = sum + LANCZOS[0];,4,1,1,1,2,0,0,0,0,8,23,6,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,108,            double tmp = x + g + .5;,6,1,0,0,0,0,0,0,0,7,24,7,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,109,            ret = ((x + .5) * Math.log(tmp)) - tmp +,6,5,0,3,6,0,6,0,0,18,40,6,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,113,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,54,"        return regularizedBeta(x, a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);",28,11,0,1,2,2,10,0,0,50,68,3,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,121,        if (Double.isNaN(x) || Double.isNaN(a) || Double.isNaN(b) || (x < 0) ||,2,2,0,4,9,0,18,0,0,22,71,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,125,        } else if (x > (a + 1.0) / (a + b + 2.0)) {,0,0,0,3,8,0,0,0,0,11,43,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,128,            ContinuedFraction fraction = new ContinuedFraction() {,2,0,0,1,3,0,0,4,0,6,54,7,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,151,            ret = Math.exp((a * Math.log(x)) + (b * Math.log(1.0 - x)) -,8,7,0,4,9,0,14,0,0,30,60,7,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,156,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,192,        if (Double.isNaN(a) || Double.isNaN(b) || (a <= 0.0) || (b <= 0.0)) {,4,3,0,5,11,0,12,0,0,19,69,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,195,            ret = Gamma.logGamma(a) + Gamma.logGamma(b) -,2,2,0,2,4,0,12,0,0,17,45,6,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,199,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,128,            ContinuedFraction fraction = new ContinuedFraction() {,4,0,1,1,3,0,0,4,0,15,54,3,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,134,                    if (n % 2 == 0) { // even,0,0,0,1,3,0,0,0,0,4,25,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,135,                        m = n / 2.0;,4,1,0,0,0,0,0,0,0,6,12,15,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,136,                        ret = (m * (b - m) * x) /,10,3,0,2,4,0,0,0,0,14,25,15,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,139,                        m = (n - 1.0) / 2.0;,4,2,0,1,2,0,0,0,0,7,20,15,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,140,                        ret = -((a + m) * (a + b + m) * x) /,14,4,0,3,6,0,0,0,0,20,36,15,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,143,                    return ret;,6,4,0,0,0,1,4,0,0,14,11,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,148,                    return 1.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.8,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1238,            final int iBlock = row    / BLOCK_SIZE;,0,0,0,0,0,0,0,0,0,0,39,4,0.57143,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1239,            final int jBlock = column / BLOCK_SIZE;,0,0,0,0,0,0,0,0,0,0,39,4,0.57143,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1240,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0,0,0,2,4,0,0,0,0,6,72,4,0.57143,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1242,            return blocks[iBlock * blockColumns + jBlock][k];,6,2,1,2,4,1,0,0,0,12,49,7,0.57143,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,79,        nObs = matrix.getRowDimension();,2,0,0,1,2,0,4,0,0,7,32,4,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,80,        correlationMatrix = computeCorrelationMatrix(matrix);,8,1,0,1,2,0,4,0,0,15,53,4,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,81,    },0,0,0,0,1,0,0,0,0,1,1,4,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,187,        int nVars = matrix.getColumnDimension();,4,0,0,1,2,0,8,2,0,14,40,3,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,188,"        RealMatrix outMatrix = new BlockRealMatrix(nVars, nVars);",0,0,0,1,2,0,0,0,0,3,57,4,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,189,        for (int i = 0; i < nVars; i++) {,8,1,0,1,3,0,0,0,0,10,33,4,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,190,            for (int j = 0; j < i; j++) {,8,1,0,1,3,0,0,0,0,10,29,6,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,191,"              double corr = correlation(matrix.getColumn(i), matrix.getColumn(j));",2,0,0,3,6,0,14,0,0,16,68,9,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,192,"              outMatrix.setEntry(i, j, corr);",0,0,0,1,2,0,0,0,0,3,31,4,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,193,"              outMatrix.setEntry(j, i, corr);",0,0,0,1,2,0,10,0,0,10,31,9,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,195,"            outMatrix.setEntry(i, i, 1d);",0,0,0,1,2,0,8,0,0,8,29,7,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,197,        return outMatrix;,2,0,0,0,0,1,0,0,0,2,17,4,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,280,    },0,0,0,0,1,0,0,0,0,1,1,4,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,304,        return sumXY / sumXX;,4,1,0,0,0,1,0,0,0,5,21,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1255,            final int iBlock = row    / BLOCK_SIZE;,6,1,0,0,0,1,0,0,0,8,39,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1256,            final int jBlock = column / BLOCK_SIZE;,6,1,0,0,0,1,0,0,0,8,39,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1257,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,8,4,0,2,4,1,4,0,0,17,72,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1259,            blocks[iBlock * blockColumns + jBlock][k] = value;,8,2,1,2,4,0,0,0,0,15,50,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1264,        },0,0,0,0,1,0,0,0,0,1,1,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1265,    },4,2,1,0,1,0,0,0,0,8,1,7,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,544,        if (column < 0 || column >= m.getColumnDimension()) {,4,3,0,2,5,0,4,0,0,11,53,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,548,    },0,0,0,0,1,0,0,0,0,1,1,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,98,"        super(rows, columns);",0,0,0,1,2,0,0,0,0,3,21,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,99,        this.rows    = rows;,4,0,0,0,0,0,0,0,0,5,20,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,100,        this.columns = columns;,0,0,0,0,0,0,4,0,0,4,23,5,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,103,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,8,3,1,1,2,0,0,0,0,16,55,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,104,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,8,3,0,1,2,0,0,0,0,12,55,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,107,"        blocks = createBlocksLayout(rows, columns);",2,0,0,1,2,0,6,0,0,9,43,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,109,    },0,0,0,0,1,0,0,0,0,1,1,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,267,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,8,3,0,1,2,1,0,0,0,12,65,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,268,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,16,4,0,1,2,1,0,0,0,22,65,3,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,270,        final double[][] blocks = new double[blockRows * blockColumns][];,6,1,0,4,8,1,0,0,0,8,65,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,271,        int blockIndex = 0;,2,0,0,0,0,0,0,0,0,2,19,5,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,272,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0,0,0,1,3,0,0,0,0,4,52,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,273,            final int pStart  = iBlock * BLOCK_SIZE;,0,0,0,0,0,0,0,0,0,0,40,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,274,"            final int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);",6,1,0,1,2,1,6,0,0,14,56,6,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,275,            final int iHeight = pEnd - pStart;,6,1,0,0,0,1,0,0,0,8,34,6,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,276,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,10,1,0,1,3,0,0,0,0,13,55,0,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,277,                final int qStart = jBlock * BLOCK_SIZE;,6,1,0,0,0,1,0,0,0,8,39,8,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,278,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",6,1,0,1,2,1,6,0,0,14,58,8,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,279,                final int jWidth = qEnd - qStart;,0,0,0,0,0,0,0,0,0,0,33,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,280,                blocks[blockIndex] = new double[iHeight * jWidth];,6,1,1,2,4,1,0,0,0,13,50,2,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,281,                ++blockIndex;,2,0,0,0,0,0,0,0,0,2,13,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,285,        return blocks;,2,0,0,0,0,1,0,0,0,2,14,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1185,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,6,0,0,6,43,5,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1186,        final double[] out = new double[rows];,2,0,1,2,4,1,0,0,0,5,38,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1189,        final int jBlock  = column / BLOCK_SIZE;,6,1,0,0,0,1,0,0,0,8,40,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1190,        final int jColumn = column - jBlock * BLOCK_SIZE;,14,3,0,0,0,2,6,0,0,25,49,3,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1191,        final int jWidth  = blockWidth(jBlock);,0,0,0,1,2,0,0,0,0,3,39,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1192,        int outIndex      = 0;,0,0,0,0,0,0,0,0,0,0,22,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1193,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,8,1,0,1,3,0,12,0,0,22,52,3,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1194,            final int iHeight = blockHeight(iBlock);,0,0,0,1,2,0,0,0,0,3,40,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1195,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0,0,0,2,4,0,0,0,0,6,62,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1196,            for (int i = 0; i < iHeight; ++i) {,0,0,0,1,3,0,0,0,0,4,35,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1197,                out[outIndex++] = block[i * jWidth + jColumn];,12,2,1,2,4,0,0,0,0,21,46,1,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1201,        return out;,6,1,0,0,0,1,0,0,0,7,11,3,0.4,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,77,    public PearsonsCorrelation(RealMatrix matrix) {,6,0,0,1,3,1,6,2,0,16,47,2,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,78,        checkSufficientData(matrix);,0,0,0,1,2,0,4,0,0,4,28,5,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,227,            for(int i=0; i<xArray.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,6,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,228,"                regression.addData(xArray[i], yArray[i]);",0,0,1,3,6,0,4,0,0,12,41,9,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,230,            return regression.getR();,0,0,0,1,2,1,0,0,0,4,25,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,273,        int nRows = matrix.getRowDimension();,4,0,0,1,2,0,4,0,0,9,37,0,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,274,        int nCols = matrix.getColumnDimension();,2,0,0,1,2,0,4,0,0,6,40,5,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,275,        if (nRows < 2 || nCols < 2) {,4,3,0,1,3,0,0,0,0,7,29,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,122,        if (n == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,123,            xbar = x;,4,0,0,0,0,0,0,0,0,5,9,6,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,124,            ybar = y;,12,1,0,0,0,0,0,0,0,15,9,3,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,126,            double dx = x - xbar;,6,1,0,0,0,0,0,0,0,7,21,7,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,127,            double dy = y - ybar;,6,1,0,0,0,0,0,0,0,7,21,7,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,128,            sumXX += dx * dx * (double) n / (n + 1d);,0,0,0,2,4,0,6,0,0,6,41,5,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,129,            sumYY += dy * dy * (double) n / (n + 1d);,10,3,0,2,4,0,0,0,0,14,41,6,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,130,            sumXY += dx * dy * (double) n / (n + 1d);,10,3,0,2,4,0,0,0,0,14,41,6,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,131,            xbar += dx / (n + 1.0);,4,1,1,1,2,0,0,0,0,9,23,11,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,132,            ybar += dy / (n + 1.0);,6,2,0,1,2,0,0,0,0,9,23,6,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,134,        sumX += x;,0,0,0,0,0,0,6,0,0,6,10,5,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,135,        sumY += y;,10,0,0,0,0,0,8,0,0,20,10,3,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,136,        n++;,2,0,0,0,0,0,0,0,0,3,4,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,138,        if (n > 2) {,8,2,0,1,3,0,0,0,0,11,12,3,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,139,            distribution.setDegreesOfFreedom(n - 2);,0,0,0,1,2,0,0,0,0,3,40,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,141,    },0,0,0,0,1,0,0,0,0,1,1,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,298,        if (n < 2) {,2,1,0,1,3,0,0,0,0,3,12,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,301,        if (Math.abs(sumXX) < 10 * Double.MIN_VALUE) {,4,2,0,2,5,0,6,0,0,12,46,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,337,"        return Math.max(0d, sumYY - sumXY * sumXY / sumXX);",8,3,0,1,2,1,4,0,0,15,51,5,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,351,        if (n < 2) {,2,1,0,1,3,0,0,0,0,3,12,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,354,        return sumYY;,4,0,0,0,0,1,0,0,0,4,13,3,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,432,        double b1 = getSlope();,2,0,0,1,2,0,2,0,0,4,23,5,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,433,        double result = Math.sqrt(getRSquare());,0,0,0,2,4,0,0,0,0,6,40,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,434,        if (b1 < 0) {,8,1,0,1,3,0,8,0,0,18,13,3,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,437,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,455,        double ssto = getTotalSumSquares();,2,0,0,1,2,0,2,0,0,4,35,5,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,456,        return (ssto - getSumSquaredErrors()) / ssto;,4,2,0,2,4,1,2,0,0,8,45,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,55,        throws IllegalArgumentException {,0,0,0,0,1,0,0,0,0,1,33,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,56,        if (rowDimension <= 0 ) {,0,0,0,1,3,0,0,0,0,4,25,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,61,        if (columnDimension <= 0) {,2,1,0,1,3,0,0,0,0,3,27,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,66,        lu = null;,2,0,0,0,0,0,0,0,0,3,10,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,67,    },0,0,0,0,1,0,0,0,0,1,1,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,126,"        this(rawData.length, rawData[0].length, toBlocksLayout(rawData), false);",6,0,1,3,6,0,4,0,0,13,72,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,127,    },0,0,0,0,1,0,0,0,0,1,1,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,148,"        super(rows, columns);",0,0,0,1,2,0,0,0,0,3,21,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,149,        this.rows    = rows;,4,0,0,0,0,0,0,0,0,5,20,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,150,        this.columns = columns;,0,0,0,0,0,0,0,0,0,0,23,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,153,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0,0,0,1,2,0,0,0,0,3,55,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,154,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,10,3,0,1,2,0,0,0,0,14,55,3,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,156,        if (copyArray) {,8,0,0,1,3,0,0,0,0,8,16,3,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,161,            blocks = blockData;,4,0,0,0,0,0,0,0,0,5,19,6,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,164,        int index = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,165,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,8,1,0,1,3,0,0,0,0,10,52,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,166,            final int iHeight = blockHeight(iBlock);,2,0,0,1,2,1,4,0,0,7,40,6,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,167,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++index) {",10,1,0,1,3,0,0,0,0,13,64,6,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,168,                if (blockData[index].length != iHeight * blockWidth(jBlock)) {,0,0,0,3,7,0,0,0,0,10,62,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,173,                if (copyArray) {,8,1,0,1,3,0,0,0,0,10,16,3,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,179,    },0,0,0,0,1,0,0,0,0,1,1,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,206,        final int rows         = rawData.length;,6,0,0,0,0,1,0,0,0,7,40,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,207,        final int columns      = rawData[0].length;,0,0,0,1,2,0,0,0,0,3,43,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,208,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,8,3,0,1,2,1,0,0,0,12,65,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,209,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,8,3,0,1,2,1,0,0,0,12,65,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,212,        for (int i = 0; i < rawData.length; ++i) {,10,1,0,1,3,0,0,0,0,12,42,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,213,            final int length = rawData[i].length;,0,0,0,1,2,0,0,0,0,3,37,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,214,            if (length != columns) {,4,1,0,1,3,0,0,0,0,5,24,6,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,222,        final double[][] blocks = new double[blockRows * blockColumns][];,12,2,0,4,8,1,0,0,0,17,65,1,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,223,        int blockIndex = 0;,2,0,0,0,0,0,0,0,0,2,19,5,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,224,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,8,1,0,1,3,0,0,0,0,10,52,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,225,            final int pStart  = iBlock * BLOCK_SIZE;,6,1,0,0,0,1,0,0,0,8,40,6,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,226,"            final int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);",4,0,0,1,2,0,0,0,0,5,56,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,227,            final int iHeight = pEnd - pStart;,6,1,0,0,0,1,0,0,0,8,34,6,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,228,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,10,2,0,1,3,0,2,0,0,15,55,3,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,229,                final int qStart = jBlock * BLOCK_SIZE;,6,1,0,0,0,1,0,0,0,8,39,8,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,230,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",10,2,1,1,2,1,18,0,0,36,58,3,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,231,                final int jWidth = qEnd - qStart;,0,0,0,0,0,0,0,0,0,0,33,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,234,                final double[] block = new double[iHeight * jWidth];,6,1,0,2,4,1,0,0,0,8,52,8,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,235,                blocks[blockIndex] = block;,2,0,1,1,2,0,0,0,0,7,27,8,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,238,                int index = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,239,                for (int p = pStart; p < pEnd; ++p) {,10,1,0,1,3,0,0,0,0,12,37,8,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,240,"                    System.arraycopy(rawData[p], qStart, block, index, jWidth);",0,0,1,2,4,0,12,0,0,16,59,11,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,241,                    index += jWidth;,4,0,0,0,0,0,0,0,0,5,16,10,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,244,                ++blockIndex;,4,0,0,0,0,1,0,4,0,10,13,1,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,249,        return blocks;,0,0,0,0,0,1,0,0,0,1,14,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1345,        return rows;,2,0,0,0,0,1,0,0,0,2,12,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1351,        return columns;,2,0,0,0,0,1,0,0,0,2,15,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1675,        return (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;,16,5,1,1,2,3,0,4,0,32,79,1,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1684,        return (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;,12,4,0,1,2,1,0,0,0,16,91,5,0.36364,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,81,        setDegreesOfFreedomInternal(degreesOfFreedom);,8,1,0,1,2,0,4,0,0,15,46,0,0.36364,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,82,    },0,0,0,0,1,0,0,0,0,1,1,4,0.36364,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,66,"        return solve(f, min, max);",0,0,0,1,2,1,0,0,0,4,26,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,70,223,        return (a + b) * .5;,10,3,0,1,2,1,0,0,0,13,20,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,165,        this.iterationCount = 0;,2,0,0,0,0,0,0,0,0,3,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,166,        this.resultComputed = false;,2,0,0,0,0,0,0,0,0,4,28,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,167,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,208,        if (lower >= upper) {,4,1,0,1,3,0,0,0,0,5,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,213,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,79,        clearResult();,0,0,0,1,2,0,2,0,0,2,14,5,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,80,"        verifyInterval(min,max);",0,0,0,1,2,0,6,0,0,6,24,5,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,85,        int i = 0;,10,1,0,0,0,0,0,0,0,12,10,3,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,86,        while (i < maximalIterationCount) {,4,1,0,1,3,0,0,0,0,5,35,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,87,"            m = UnivariateRealSolverUtils.midpoint(min, max);",0,0,0,1,2,0,0,0,0,3,49,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,88,           fmin = f.value(min);,2,0,0,1,2,0,6,0,0,9,20,6,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,52,"        super(100, 1E-6);",0,0,0,1,2,0,0,0,0,3,17,4,0.09091,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,53,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,93,"        super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);",12,2,0,1,2,0,0,0,0,14,61,3,0.07143,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,94,        this.defaultFunctionValueAccuracy = 1.0e-15;,2,0,0,0,0,0,0,0,0,3,44,4,0.07143,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,95,        this.functionValueAccuracy = defaultFunctionValueAccuracy;,6,2,0,0,0,0,0,0,0,9,58,3,0.07143,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,96,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,41,    protected boolean resultComputed = false;,2,0,0,0,0,1,0,0,0,4,41,2,0.06667,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,70,61,                                      final double defaultAbsoluteAccuracy) {,0,0,0,0,2,0,0,0,0,2,39,4,0.06667,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,70,62,        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;,4,0,0,0,0,0,0,0,0,5,55,4,0.06667,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,70,63,        this.defaultRelativeAccuracy = 1.0e-14;,0,0,0,0,0,0,0,0,0,0,39,4,0.06667,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,70,64,        this.absoluteAccuracy = defaultAbsoluteAccuracy;,4,0,0,0,0,0,0,0,0,5,48,4,0.06667,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,70,65,        this.relativeAccuracy = defaultRelativeAccuracy;,0,0,0,0,0,0,0,0,0,0,48,4,0.06667,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,70,66,        this.defaultMaximalIterationCount = defaultMaximalIterationCount;,4,0,0,0,0,0,0,0,0,5,65,4,0.06667,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,70,67,        this.maximalIterationCount = defaultMaximalIterationCount;,4,0,0,0,0,0,0,0,0,5,58,4,0.06667,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,70,68,        this.iterationCount = 0;,2,0,0,0,0,0,0,0,0,3,24,4,0.06667,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,70,69,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator,71,180,                loop     = false;,0,0,0,0,0,0,0,0,0,1,17,4,1.0,1,1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,71,300,                  loop     = false;,2,0,0,0,0,0,0,0,0,4,17,14,1.0,1,1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,150,    if ((initialStepSize < minStep) || (initialStepSize > maxStep)) {,8,3,0,3,7,0,0,0,0,11,65,4,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,153,      initialStep = initialStepSize;,4,0,0,0,0,0,0,0,0,5,30,6,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,155,  },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,211,      return forward ? initialStep : -initialStep;,6,0,0,0,0,1,0,0,0,7,44,7,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,292,          filteredH = maxStep;,4,0,0,0,0,0,0,0,0,5,20,6,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,71,335,                x1 = x1 + 0.5 * tolerance;,0,0,0,0,0,0,4,0,0,5,26,4,0.28571,0,0
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,71,107,"      System.arraycopy(currentState,      0, interpolatedState,       0, currentState.length);",4,0,0,1,2,0,8,0,0,12,88,5,0.18182,0,0
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,71,108,"      System.arraycopy(currentDerivative, 0, interpolatedDerivatives, 0, currentDerivative.length);",4,0,0,1,2,0,8,0,0,12,93,5,0.18182,0,0
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,71,109,  },0,0,0,0,1,0,0,0,0,1,1,4,0.18182,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,72,196,        return (start < mid) && (mid < end);,8,3,0,2,4,1,0,0,0,11,36,4,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,72,225,"        if (!isSequence(lower, initial, upper)) {",2,0,0,2,5,0,12,2,0,17,41,3,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,72,230,    },0,0,0,0,1,0,8,0,0,8,1,5,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,102,        clearResult();,2,0,1,1,2,1,0,0,0,5,14,4,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,103,"        verifySequence(min, initial, max);",2,0,0,1,2,0,8,0,0,10,34,3,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,106,        double yInitial = f.value(initial);,2,0,0,1,2,0,6,0,0,8,35,5,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,107,        if (Math.abs(yInitial) <= functionValueAccuracy) {,2,1,0,2,5,0,6,0,0,9,50,4,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,113,        double yMin = f.value(min);,2,0,0,1,2,0,6,0,0,8,27,5,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,114,        if (Math.abs(yMin) <= functionValueAccuracy) {,2,1,0,2,5,0,6,0,0,9,46,4,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,180,            if (Math.abs(yMin) <= functionValueAccuracy) {,2,1,0,2,5,0,6,0,0,9,46,6,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,183,            } else if (Math.abs(yMax) <= functionValueAccuracy) {,2,1,0,2,6,0,6,0,0,9,53,7,0.5,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,72,83,        return absoluteAccuracy;,0,0,0,0,0,1,0,0,0,1,24,4,0.25,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,247,"                setResult(x1, i);",0,0,0,1,2,0,6,0,0,6,17,9,0.01124,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,248,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.01124,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,236,                x0 = x1;,0,0,0,0,0,0,0,0,0,0,8,4,0.0087,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,237,                x1 = x2;,4,0,0,0,0,0,0,0,0,5,8,8,0.0087,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,238,                x2 = x0;,4,0,0,0,0,0,0,0,0,5,8,8,0.0087,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,239,                y0 = y1;,4,0,0,0,0,0,0,0,0,5,8,8,0.0087,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,240,                y1 = y2;,0,0,0,0,0,0,0,0,0,0,8,4,0.0087,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,241,                y2 = y0;,4,0,0,0,0,0,0,0,0,5,8,8,0.0087,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,72,141,        this.result         = newResult;,4,0,0,0,0,0,0,0,0,5,32,4,0.00847,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,72,142,        this.iterationCount = iterationCount;,4,0,0,0,0,0,0,0,0,5,37,4,0.00847,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,72,143,        this.resultComputed = true;,8,0,0,0,0,1,0,0,0,11,27,3,0.00847,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,72,144,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00847,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,73,196,        return (start < mid) && (mid < end);,0,0,0,2,4,1,0,0,0,7,36,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,73,225,"        if (!isSequence(lower, initial, upper)) {",2,0,0,2,5,0,4,0,0,6,41,5,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,73,230,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,102,        clearResult();,0,0,0,1,2,0,0,0,0,3,14,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,103,"        verifySequence(min, initial, max);",4,1,1,1,2,0,8,0,0,15,34,3,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,106,        double yInitial = f.value(initial);,2,0,0,1,2,0,6,0,0,8,35,5,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,107,        if (Math.abs(yInitial) <= functionValueAccuracy) {,2,1,0,2,5,0,6,0,0,9,50,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,113,        double yMin = f.value(min);,2,0,0,1,2,0,6,0,0,8,27,5,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,114,        if (Math.abs(yMin) <= functionValueAccuracy) {,2,1,0,2,5,0,6,0,0,9,46,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,120,        if (yInitial * yMin < 0) {,12,3,0,1,3,0,0,0,0,16,26,3,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,125,        double yMax = f.value(max);,2,0,0,1,2,0,6,0,0,8,27,5,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,126,        if (Math.abs(yMax) <= functionValueAccuracy) {,2,1,0,2,5,0,6,0,0,9,46,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,132,        if (yInitial * yMax < 0) {,0,0,0,1,3,0,0,0,0,4,26,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,184,                throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,0,4,0,0,4,58,10,1.0,1,1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,176,            if (Math.abs(yMin) <= functionValueAccuracy) {,2,1,0,2,5,0,6,0,0,9,46,6,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,179,            } else if (Math.abs(yMax) <= functionValueAccuracy) {,2,1,0,2,6,0,6,0,0,9,53,7,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,286,                    delta = 0.5 * dx;,4,1,0,0,0,0,0,0,0,6,17,10,0.09091,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,287,                    oldDelta = delta;,4,0,0,0,0,0,0,0,0,5,17,10,0.09091,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,73,305,        return new IllegalArgumentException() {,0,0,0,1,3,1,0,2,0,2,39,6,0.05882,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,73,305,        return new IllegalArgumentException() {,2,0,0,1,3,1,0,2,0,4,39,4,0.05882,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,300,                x1 = x1 + 0.5 * tolerance;,6,2,0,0,0,0,0,0,0,9,26,9,0.02632,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,292,          filteredH = maxStep;,0,0,0,0,0,0,0,0,0,0,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,309,                    final double factor = computeStepGrowShrinkFactor(error);,0,0,0,1,2,0,0,0,0,3,57,4,1.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,310,"                    hNew = filterStep(stepSize * factor, forward, false);",6,1,0,1,2,0,6,0,0,15,53,3,1.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,311,                    interpolator.rescale(hNew);,0,0,0,1,2,0,6,0,0,6,27,11,1.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,290,                        final double dt = manager.getEventTime() - stepStart;,8,1,0,1,2,1,4,0,0,14,53,3,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,291,                        if (Math.abs(dt) <= Math.ulp(stepStart)) {,0,1,0,3,7,0,12,0,0,13,42,12,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,296,                            hNew = dt;,4,0,0,0,0,0,0,0,0,5,10,14,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,297,                            interpolator.rescale(hNew);,0,0,0,1,2,0,6,0,0,6,27,15,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,299,                    } else {,4,1,0,0,2,0,0,0,0,5,8,5,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,356,        final double stopTime  = stepStart;,4,0,0,0,0,1,0,0,0,5,35,4,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,357,        stepStart = Double.NaN;,6,0,0,0,0,0,0,0,0,7,23,4,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,358,        stepSize  = Double.NaN;,6,0,0,0,0,0,0,0,0,7,23,4,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,359,        return stopTime;,6,1,1,0,0,1,0,0,0,10,16,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,919,        return walkInRowOrder(visitor);,4,0,0,1,2,1,4,0,0,8,31,3,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,496,        final int rows    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,38,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,497,        final int columns = getColumnDimension();,4,0,0,1,2,2,4,0,0,10,41,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,498,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0,0,0,1,2,0,0,0,0,3,58,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,499,        for (int i = 0; i < rows; ++i) {,0,0,0,1,3,0,0,0,0,4,32,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,500,            final double[] rowI = data[i];,2,0,1,2,4,1,0,0,0,7,30,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,501,            for (int j = 0; j < columns; ++j) {,8,1,0,1,3,0,0,0,0,10,35,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,502,"                visitor.visit(i, j, rowI[j]);",0,0,1,2,4,0,8,0,0,12,29,9,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,505,        return visitor.end();,0,0,0,1,2,1,4,0,0,4,21,5,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,236,"        interpolator.reinitialize(stepStart, stepSize, scaled, nordsieck);",0,0,0,1,2,0,12,0,0,12,66,5,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,237,        interpolator.storeTime(stepStart);,0,0,0,1,2,0,6,0,0,6,34,5,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,239,        double hNew = stepSize;,0,0,0,0,0,0,0,0,0,0,23,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,240,        interpolator.rescale(hNew);,0,0,0,1,2,0,8,0,0,8,27,3,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,242,        boolean lastStep = false;,2,0,0,0,0,0,0,0,0,3,25,5,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,243,        while (!lastStep) {,2,0,0,1,3,0,0,0,0,3,19,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,246,            interpolator.shift();,0,0,0,1,2,0,4,0,0,4,21,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,248,            double error = 0;,2,0,0,0,0,0,0,0,0,2,17,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,249,            for (boolean loop = true; loop;) {,4,0,0,1,3,0,0,0,0,5,34,6,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,251,                stepSize = hNew;,4,0,0,0,0,0,0,0,0,5,16,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,254,                final double stepEnd = stepStart + stepSize;,6,1,0,0,0,1,0,0,0,8,44,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,255,                interpolator.setInterpolatedTime(stepEnd);,0,0,0,1,2,0,0,0,0,3,42,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,256,"                System.arraycopy(interpolator.getInterpolatedState(), 0, yTmp, 0, y0.length);",4,0,0,2,4,0,10,0,0,14,77,9,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,259,"                computeDerivatives(stepEnd, yTmp, yDot);",0,0,0,1,2,0,8,0,0,8,40,9,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,262,                final double[] predictedScaled = new double[y0.length];,6,0,0,2,4,1,0,0,0,7,55,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,263,                for (int j = 0; j < y0.length; ++j) {,10,1,0,1,3,0,0,0,0,12,37,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,264,                    predictedScaled[j] = stepSize * yDot[j];,0,0,0,2,4,0,0,0,0,6,40,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,266,                final Array2DRowRealMatrix nordsieckTmp = updateHighOrderDerivativesPhase1(nordsieck);,2,0,0,1,2,1,4,2,0,9,86,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,267,"                updateHighOrderDerivativesPhase2(scaled, predictedScaled, nordsieckTmp);",0,0,0,1,2,0,8,0,0,8,72,9,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,270,"                error = nordsieckTmp.walkInOptimizedOrder(new Corrector(y, predictedScaled, yTmp));",0,0,0,2,4,0,0,0,0,6,83,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,272,                if (error <= 1.0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,275,"                    computeDerivatives(stepEnd, yTmp, yDot);",0,0,0,1,2,0,8,0,0,8,40,11,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,278,                    final double[] correctedScaled = new double[y0.length];,8,0,0,2,4,1,4,0,0,14,55,3,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,279,                    for (int j = 0; j < y0.length; ++j) {,0,0,0,1,3,0,0,0,0,4,37,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,280,                        correctedScaled[j] = stepSize * yDot[j];,2,1,1,2,4,0,0,0,0,12,40,12,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,282,"                    updateHighOrderDerivativesPhase2(predictedScaled, correctedScaled, nordsieckTmp);",0,0,0,1,2,0,8,0,0,8,81,11,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,285,"                    interpolatorTmp.reinitialize(stepEnd, stepSize, correctedScaled, nordsieckTmp);",0,0,0,1,2,0,0,0,0,3,79,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,286,                    interpolatorTmp.storeTime(stepStart);,0,0,0,1,2,0,6,0,0,6,37,11,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,287,                    interpolatorTmp.shift();,0,0,0,1,2,0,4,0,0,4,24,11,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,288,                    interpolatorTmp.storeTime(stepEnd);,0,0,0,1,2,0,0,0,0,3,35,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,289,                    if (manager.evaluateStep(interpolatorTmp)) {,4,0,0,2,5,0,0,0,0,5,44,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,301,                        scaled    = correctedScaled;,4,0,0,0,0,0,0,0,0,5,28,12,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,302,                        nordsieck = nordsieckTmp;,10,1,0,0,0,0,0,0,0,12,25,3,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,303,"                        interpolator.reinitialize(stepEnd, stepSize, scaled, nordsieck);",0,0,0,1,2,0,12,0,0,12,64,13,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,304,                        loop = false;,2,0,0,0,0,0,0,0,0,4,13,12,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,307,                } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,314,            },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,317,            final double nextStep = stepStart + stepSize;,0,0,0,0,0,0,0,0,0,0,45,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,318,"            System.arraycopy(yTmp, 0, y, 0, n);",0,0,0,1,2,0,10,0,0,10,35,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,319,            interpolator.storeTime(nextStep);,0,0,0,1,2,0,6,0,0,6,33,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,320,"            manager.stepAccepted(nextStep, y);",0,0,0,1,2,0,8,0,0,8,34,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,321,            lastStep = manager.stop();,2,0,0,1,2,0,4,0,0,7,26,6,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,324,            for (StepHandler handler : stepHandlers) {,4,0,0,1,3,0,0,2,0,6,42,6,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,325,                interpolator.setInterpolatedTime(nextStep);,0,0,0,1,2,0,6,0,0,6,43,9,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,326,"                handler.handleStep(interpolator, lastStep);",0,0,0,1,2,0,8,0,0,8,43,9,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,327,            },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,328,            stepStart = nextStep;,4,0,0,0,0,0,0,0,0,5,21,6,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,330,"            if (!lastStep && manager.reset(stepStart, y)) {",0,0,0,2,5,0,0,0,0,7,47,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,339,            if (! lastStep) {,2,0,0,1,3,0,0,0,0,3,17,6,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,343,"                stepSize = filterStep(stepSize, forward, true);",2,0,0,1,2,0,6,0,0,10,47,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,346,                final double  factor     = computeStepGrowShrinkFactor(error);,2,0,0,1,2,1,4,0,0,7,62,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,347,                final double  scaledH    = stepSize * factor;,6,1,0,0,0,1,0,0,0,8,45,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,348,                final double  nextT      = stepStart + scaledH;,6,1,0,0,0,1,0,0,0,8,47,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,349,                final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);,12,2,0,2,4,1,0,0,0,15,65,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,350,"                hNew = filterStep(scaledH, forward, nextIsLast);",2,0,0,1,2,0,8,0,0,11,48,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,351,                interpolator.rescale(hNew);,0,0,0,1,2,0,6,0,0,6,27,9,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,354,        },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,390,"        public Corrector(final double[] previous, final double[] scaled, final double[] state) {",0,0,0,4,9,0,0,0,0,13,88,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,391,            this.previous = previous;,8,0,0,0,0,0,0,0,0,10,25,1,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,392,            this.scaled   = scaled;,4,0,0,0,0,0,0,0,0,5,23,5,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,393,            this.after    = state;,8,0,0,0,0,0,0,0,0,10,22,1,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,394,            this.before   = state.clone();,2,0,0,1,2,0,4,0,0,7,30,5,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,395,        },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,400,"            Arrays.fill(after, 0.0);",0,0,0,1,2,0,6,0,0,6,24,6,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,401,        },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,406,            if ((row & 0x1) == 0) {,0,0,0,2,5,0,0,0,0,7,23,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,407,                after[column] -= value;,0,0,0,1,2,0,0,0,0,3,23,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,409,                after[column] += value;,0,0,0,1,2,0,0,0,0,3,23,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,411,        },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,424,            double error = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,425,            for (int i = 0; i < after.length; ++i) {,0,0,0,1,3,0,0,0,0,4,40,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,426,                after[i] += previous[i] + scaled[i];,0,0,0,3,6,0,0,0,0,9,36,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,427,"                final double yScale = Math.max(Math.abs(previous[i]), Math.abs(after[i]));",6,0,1,5,10,1,12,0,0,28,74,1,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,428,                final double tol = (vecAbsoluteTolerance == null) ?,4,1,0,1,2,1,0,0,0,6,51,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,431,                final double ratio  = (after[i] - before[i]) / tol;,4,2,1,3,6,1,0,0,0,15,51,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,432,                error += ratio * ratio;,6,1,0,0,0,0,0,0,0,8,23,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,435,            return Math.sqrt(error / after.length);,6,1,0,1,2,1,4,0,0,11,39,6,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,176,"        super(""Adams-Moulton"", nSteps, nSteps + 1, minStep, maxStep,",0,0,0,0,1,0,0,0,0,1,60,4,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,178,    },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,210,        setEquations(equations);,0,0,0,1,2,0,4,0,0,4,24,5,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,211,        resetEvaluations();,0,0,0,1,2,0,2,0,0,2,19,5,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,212,        final boolean forward = t > t0;,6,1,0,0,0,1,0,0,0,8,31,4,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,215,        if (y != y0) {,4,1,0,1,3,0,0,0,0,5,14,4,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,216,"            System.arraycopy(y0, 0, y, 0, n);",0,0,0,1,2,0,10,0,0,10,33,7,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,218,        final double[] yDot = new double[y0.length];,6,0,0,2,4,1,0,0,0,7,44,4,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,219,        final double[] yTmp = new double[y0.length];,6,0,0,2,4,1,0,0,0,7,44,4,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,222,        final NordsieckStepInterpolator interpolator = new NordsieckStepInterpolator();,2,0,0,1,2,1,0,4,0,7,79,4,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,223,"        interpolator.reinitialize(y, forward);",0,0,0,1,2,0,8,0,0,8,38,5,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,224,        final NordsieckStepInterpolator interpolatorTmp = new NordsieckStepInterpolator();,2,0,0,1,2,1,0,4,0,7,82,4,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,225,"        interpolatorTmp.reinitialize(yTmp, forward);",0,0,0,1,2,0,8,0,0,8,44,5,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,228,        for (StepHandler handler : stepHandlers) {,4,0,0,1,3,0,0,2,0,6,42,4,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,229,            handler.reset();,0,0,0,1,2,0,4,0,0,4,16,7,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,230,        },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,231,"        CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);",2,0,0,1,2,0,8,2,0,12,80,4,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,235,"        start(t0, y, t);",0,0,0,1,2,0,8,0,0,8,16,5,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,208,        final int n = y0.length;,8,0,1,0,0,1,0,0,0,12,24,3,0.2,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,209,"        sanityChecks(equations, t0, y0, t, y);",0,0,0,1,2,0,0,0,0,3,38,4,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,331,        return getPct(Long.valueOf(v));,0,0,0,2,4,1,8,0,0,8,31,5,1.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,386,            return getCumFreq(((Integer) v).longValue());,6,0,0,4,8,2,0,0,0,7,45,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,444,        return getCumFreq(Long.valueOf(v));,2,0,0,2,4,2,4,0,0,7,35,10,0.5,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,177,        addValue(Long.valueOf(v));,0,0,0,2,4,0,0,0,0,6,26,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,178,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,320,        return (double) getCount(v) / (double) sumFreq;,2,1,0,3,6,1,4,0,0,7,47,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,408,"            return getSumFreq();    // v is comparable, but greater than the last value",0,0,0,1,2,1,2,0,0,2,75,7,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,541,"    private static class NaturalComparator<T extends Comparable<T>> implements Comparator<Comparable<T>>, Serializable {",4,0,0,0,1,2,0,12,0,18,116,2,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,561,            return o1.compareTo((T) o2);,12,0,0,2,4,1,12,2,0,27,28,1,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,142,"                freqTable.put(obj, Long.valueOf(count.longValue() + 1));",0,1,0,3,6,0,14,0,0,15,56,9,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,218,            result += iterator.next().longValue();,0,0,0,2,4,0,0,0,0,6,38,4,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,251,                result = count.longValue();,2,0,0,1,2,0,4,0,0,7,27,8,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,316,        final long sumFreq = getSumFreq();,0,0,0,1,2,0,0,0,0,3,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,317,        if (sumFreq == 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,385,        if (v instanceof Integer) {,0,0,0,1,3,0,0,0,0,4,27,4,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,388,        Comparator<Comparable<?>> c = (Comparator<Comparable<?>>) freqTable.comparator();,2,0,0,2,4,0,4,8,0,14,81,4,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,389,        if (c == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,390,            c = new NaturalComparator();,6,0,0,1,2,0,0,2,0,10,28,3,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,392,        long result = 0;,2,0,0,0,0,0,0,0,0,2,16,5,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,395,            Long value = freqTable.get(v);,2,0,0,1,2,0,6,2,0,10,30,6,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,396,            if (value != null) {,0,0,0,1,3,0,0,0,0,4,20,4,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,397,                result = value.longValue();,2,0,0,1,2,0,4,0,0,7,27,8,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,401,        },0,1,0,0,1,0,14,0,0,15,1,5,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,403,"        if (c.compare(v, freqTable.firstKey()) < 0) {",0,1,0,3,7,0,10,0,0,11,45,4,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,407,"        if (c.compare(v, freqTable.lastKey()) >= 0) {",2,1,0,3,7,0,10,0,0,13,45,4,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,495,        return (double) getCumFreq(v) / (double) sumFreq;,2,1,0,3,6,1,4,0,0,7,49,4,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,159,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,215,        long result = 0;,2,0,0,0,0,0,0,0,0,2,16,5,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,216,        Iterator<Long> iterator = freqTable.values().iterator();,2,0,0,2,4,0,6,4,0,12,56,4,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,217,        while (iterator.hasNext())  {,0,0,0,2,5,0,0,0,0,7,29,4,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,220,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,244,        if (v instanceof Integer) {,2,0,0,1,3,0,0,2,0,4,27,5,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,247,        long result = 0;,2,0,0,0,0,0,0,0,0,2,16,5,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,249,            Long count =  freqTable.get(v);,2,0,0,1,2,0,6,2,0,10,31,6,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,250,            if (count != null) {,2,1,0,1,3,0,0,0,0,3,20,6,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,255,        },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,256,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,382,        if (getSumFreq() == 0) {,4,4,0,2,5,0,8,0,0,18,24,4,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,491,        final long sumFreq = getSumFreq();,2,0,0,1,2,1,2,0,0,5,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,492,        if (sumFreq == 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.2,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,143,            --p;,0,0,0,0,0,0,0,0,0,0,4,4,4.0,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,283,        if (cachedVt == null) {,8,1,0,1,3,0,0,0,0,11,23,5,2.0,1,1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,284,            cachedVt = getV().transpose();,2,0,0,2,4,0,4,0,0,7,30,6,2.0,1,1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,288,        return cachedVt;,0,0,0,0,0,1,0,0,0,1,16,4,2.0,1,1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,182,                    wData[i] = new double[p];,0,0,1,2,4,0,0,0,0,7,25,10,0.8,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,217,        if (cachedS == null) {,4,1,0,1,3,3,0,0,0,8,22,1,0.8,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,220,            cachedS = MatrixUtils.createRealDiagonalMatrix(singularValues);,2,0,0,1,2,0,6,0,0,9,63,6,0.8,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,223,        return cachedS;,2,0,0,0,0,1,0,0,0,2,15,4,0.8,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,202,"        final RealMatrix m = createRealMatrix(diagonal.length, diagonal.length);",0,0,0,1,2,0,0,0,0,3,72,4,0.8,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,203,        for (int i = 0; i < diagonal.length; ++i) {,10,1,0,1,3,0,0,0,0,12,43,4,0.8,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,204,"            m.setEntry(i, i, diagonal[i]);",2,0,1,2,4,0,8,0,0,15,30,3,0.8,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,206,        return m;,2,0,0,0,0,1,0,0,0,2,9,4,0.8,0,0
defect4j,math,org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,76,30,public class DefaultRealMatrixPreservingVisitor implements RealMatrixPreservingVisitor {,2,0,0,0,1,1,0,2,0,5,88,1,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,76,35,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,76,44,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,195,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,4,0,0,1,4,2,0,0,0,5,60,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,603,        final int nRows = getRowDimension();,4,0,0,1,2,1,2,0,0,7,36,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,604,        final int nCols = getColumnDimension();,4,0,0,1,2,1,2,0,0,7,39,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,605,"        final RealMatrix out = createMatrix(nCols, nRows);",0,0,0,1,2,0,0,0,0,3,50,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,606,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,4,0,1,1,4,1,2,2,0,11,63,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,616,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,919,        return walkInRowOrder(visitor);,0,0,0,1,2,1,4,0,0,4,31,5,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,195,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,1,0,0,0,6,60,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,210,                this.endRow = endRow;,16,3,0,0,0,0,0,0,0,22,21,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,211,                columnSum   = 0;,2,0,0,0,0,0,0,0,0,3,16,10,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,212,                maxColSum   = 0;,2,0,0,0,0,0,0,0,0,3,16,10,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,213,            },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,217,                columnSum += Math.abs(value);,0,0,0,1,2,0,0,0,0,3,29,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,218,                if (row == endRow) {,4,1,0,1,3,0,0,0,0,5,20,10,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,219,"                    maxColSum = Math.max(maxColSum, columnSum);",2,0,0,1,2,0,8,0,0,11,43,12,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,220,                    columnSum = 0;,2,0,0,0,0,0,0,0,0,3,14,12,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,222,            },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,226,                return maxColSum;,2,0,0,0,0,1,0,0,0,2,17,10,0.5,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,633,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0,0,0,3,7,0,0,0,0,10,61,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,640,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,235,            return subtract((Array2DRowRealMatrix) m);,0,0,0,2,4,1,0,0,0,7,42,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,252,"        MatrixUtils.checkSubtractionCompatible(this, m);",0,0,0,1,2,0,6,0,0,6,48,5,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,254,        final int rowCount    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,42,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,255,        final int columnCount = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,45,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,256,        final double[][] outData = new double[rowCount][columnCount];,0,0,0,4,8,0,0,0,0,12,61,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,257,        for (int row = 0; row < rowCount; row++) {,2,0,0,1,3,1,10,0,0,13,42,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,258,            final double[] dataRow    = data[row];,0,0,0,2,4,0,0,0,0,6,38,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,259,            final double[] mRow       = m.data[row];,0,0,0,2,4,0,0,0,0,6,40,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,260,            final double[] outDataRow = outData[row];,0,0,0,2,4,0,0,0,0,6,41,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,261,            for (int col = 0; col < columnCount; col++) {,18,2,0,1,3,0,0,0,0,23,45,1,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,262,                outDataRow[col] = dataRow[col] - mRow[col];,0,1,1,3,6,0,0,0,0,14,43,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,266,"        return new Array2DRowRealMatrix(outData, false);",8,2,0,1,2,1,0,2,0,13,48,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,496,        final int rows    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,38,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,497,        final int columns = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,41,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,498,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",4,2,0,1,2,0,8,0,0,14,58,5,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,499,        for (int i = 0; i < rows; ++i) {,8,1,0,1,3,0,0,0,0,10,32,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,500,            final double[] rowI = data[i];,4,1,1,2,4,1,0,0,0,10,30,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,501,            for (int j = 0; j < columns; ++j) {,0,0,0,1,3,0,0,0,0,4,35,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,502,"                visitor.visit(i, j, rowI[j]);",0,0,1,2,4,0,8,0,0,12,29,9,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,505,        return visitor.end();,0,0,0,1,2,1,0,0,0,4,21,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,564,        final int rows    = getRowDimension();,4,0,0,1,2,2,2,0,0,8,38,1,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,565,        final int columns = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,566,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",4,2,0,1,2,0,8,0,0,14,58,5,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,567,        for (int j = 0; j < columns; ++j) {,10,2,0,1,3,0,0,0,0,13,35,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,568,            for (int i = 0; i < rows; ++i) {,10,1,0,1,3,0,0,2,0,14,32,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,569,"                visitor.visit(i, j, data[i][j]);",2,0,1,3,6,3,8,0,0,19,32,1,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,572,        return visitor.end();,6,1,0,1,2,1,0,0,0,8,21,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,606,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,2,0,0,1,4,0,2,2,0,6,63,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,611,"                out.setEntry(column, row, value);",0,0,0,1,2,0,10,0,0,10,33,11,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,612,            },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,156,        if (cachedU == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,158,            final int p = singularValues.length;,6,0,0,0,0,1,0,0,0,7,36,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,159,            if (m >= n) {,6,2,0,1,3,0,0,0,0,8,13,1,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,161,                final RealMatrix e =,2,0,0,0,0,1,0,2,0,5,20,8,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,163,                final double[][] eData = e.getData();,2,0,0,3,6,1,4,0,0,7,37,8,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,164,                final double[][] wData = new double[m][p];,4,0,1,4,8,1,0,0,0,9,42,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,165,                double[] ei1 = eData[0];,2,0,1,2,4,0,0,0,0,4,24,9,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,166,                for (int i = 0; i < p - 1; ++i) {,8,2,0,1,3,0,0,0,0,11,33,8,0.44444,1,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,177,                        for (int j = 0; j < p; ++j) {,8,1,0,1,3,0,0,0,0,10,29,8,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,178,                            wData[p - 1][j] = ei1[j] * mainBidiagonal[p - 1] / singularValues[j];,4,4,1,5,10,0,0,0,0,23,69,10,0.44444,1,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,181,                for (int i = p; i < m; ++i) {,10,1,0,1,3,0,6,0,0,18,29,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,184,                cachedU =,6,2,1,0,0,0,0,0,0,18,9,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,186,            } else {,6,2,1,0,2,0,0,0,0,11,8,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,196,        return cachedU;,0,0,0,0,0,1,0,0,0,1,15,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,88,        if (cachedU == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,90,            final int m = householderVectors.length;,6,0,0,0,0,1,0,0,0,7,40,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,91,            final int n = householderVectors[0].length;,0,0,0,1,2,0,0,0,0,3,43,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,92,            final int p = main.length;,6,0,0,0,0,1,8,0,0,15,26,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,93,            final int diagOffset    = (m >= n) ? 0 : 1;,6,1,0,1,2,1,0,0,0,8,43,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,94,            final double[] diagonal = (m >= n) ? main : secondary;,10,1,0,2,4,1,0,0,0,12,54,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,95,"            cachedU = MatrixUtils.createRealMatrix(m, m);",2,0,0,1,2,0,8,0,0,11,45,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,98,            for (int k = m - 1; k >= p; --k) {,4,0,0,1,3,0,0,0,0,5,34,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,103,            for (int k = p - 1; k >= diagOffset; --k) {,10,2,0,1,3,0,0,0,0,13,43,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,104,                final double[] hK = householderVectors[k];,2,0,1,2,4,1,0,0,0,7,42,8,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,105,"                cachedU.setEntry(k, k, 1);",0,0,0,1,2,0,8,0,0,8,26,9,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,106,                if (hK[k - diagOffset] != 0.0) {,4,2,1,2,5,0,0,0,0,8,32,8,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,107,                    for (int j = k; j < m; ++j) {,10,1,0,1,3,0,0,0,0,12,29,10,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,108,                        double alpha = 0;,10,2,1,0,0,0,0,0,0,15,17,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,109,                        for (int i = k; i < m; ++i) {,10,1,0,1,3,0,0,0,0,12,29,12,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,110,"                            alpha -= cachedU.getEntry(i, j) * householderVectors[i][k - diagOffset];",6,2,1,3,6,0,8,0,0,21,72,14,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,112,                        alpha /= diagonal[k - diagOffset] * hK[k - diagOffset];,10,3,1,2,4,0,0,0,0,18,55,12,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,114,                        for (int i = k; i < m; ++i) {,10,1,0,1,3,0,0,0,0,12,29,12,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,115,"                            cachedU.addToEntry(i, j, -alpha * householderVectors[i][k - diagOffset]);",0,0,0,3,6,0,0,0,0,9,73,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,120,            if (diagOffset > 0) {,2,1,0,1,3,0,0,0,0,3,21,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,127,        return cachedU;,2,0,0,0,0,1,0,0,0,2,15,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,188,                    for (int j = k; j < n; ++j) {,10,1,0,1,3,0,0,0,0,12,29,10,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,189,                        double beta = 0;,8,1,0,0,0,1,0,0,0,10,16,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,190,                        for (int i = k; i < n; ++i) {,10,1,0,1,3,0,0,0,0,12,29,12,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,191,"                            beta -= cachedV.getEntry(i, j) * hK[i];",2,1,1,2,4,0,8,0,0,16,39,14,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,193,                        beta /= diagonal[k - diagOffset] * hK[k];,8,2,1,2,4,0,0,0,0,18,41,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,195,                        for (int i = k; i < n; ++i) {,0,0,0,1,3,0,6,0,0,6,29,5,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,196,"                            cachedV.addToEntry(i, j, -beta * hK[i]);",2,1,1,2,4,0,8,0,0,16,40,15,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,210,        double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,211,        Iterator<Entry> it = sparseIterator();,6,0,0,1,2,3,0,4,0,13,38,2,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,213,        while (it.hasNext() && (e = it.next()) != null) {,2,2,0,4,9,0,8,0,0,13,49,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,214,            final double value = e.getValue();,2,0,0,1,2,1,4,0,0,7,34,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,215,            sum += value * value;,6,1,0,0,0,0,0,0,0,8,21,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,216,        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,217,        return Math.sqrt(sum);,0,0,0,1,2,1,0,0,0,4,22,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,222,        double norm = 0;,2,0,0,0,0,0,0,0,0,2,16,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,223,        Iterator<Entry> it = sparseIterator();,2,0,0,1,2,0,2,4,0,8,38,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,225,        while (it.hasNext() && (e = it.next()) != null) {,6,1,0,4,9,0,0,0,0,7,49,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,226,            norm += Math.abs(e.getValue());,2,0,0,2,4,0,8,0,0,11,31,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,228,        return norm;,2,0,0,0,0,1,0,0,0,2,12,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,499,        double max = 0;,4,1,0,0,0,0,0,0,0,5,15,3,1.0,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,500,        Iterator iter = entries.iterator();,2,0,0,1,2,0,4,2,0,8,35,4,1.0,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,501,        while (iter.hasNext()) {,0,0,0,2,5,0,4,0,0,4,24,5,1.0,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,502,            iter.advance();,0,0,0,1,2,0,0,0,0,3,15,4,1.0,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,503,            max += iter.value();,0,0,0,1,2,0,0,0,0,3,20,4,1.0,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,505,        return max;,6,1,0,0,0,1,0,0,0,7,11,3,1.0,1,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,709,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,710,        for (double a : data) {,4,0,0,1,3,0,0,0,0,4,23,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,711,            sum += Math.abs(a);,0,0,0,1,2,0,0,0,0,3,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,713,        return sum;,0,0,0,0,0,1,0,0,0,1,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,719,        double max = 0;,0,0,0,0,0,0,0,0,0,0,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,720,        for (double a : data) {,4,0,0,1,3,0,0,0,0,4,23,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,721,"            max += Math.max(max, Math.abs(a));",2,0,0,2,4,0,14,2,0,19,34,3,1.0,1,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,723,        return max;,0,0,0,0,0,1,0,0,0,1,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,863,        protected OpenMapSparseIterator() {,2,0,0,1,3,1,0,0,0,3,35,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,864,            iter = entries.iterator();,2,0,0,1,2,0,4,0,0,7,26,5,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,865,            current = new OpenMapEntry(iter);,4,0,0,1,2,0,0,2,0,7,33,5,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,866,        },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,870,            return iter.hasNext();,4,1,1,1,2,2,4,0,0,14,22,1,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,875,            iter.advance();,0,0,0,1,2,0,4,0,0,4,15,6,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,876,            return current;,2,0,0,0,0,1,0,0,0,2,15,5,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,854,    protected class OpenMapSparseIterator implements java.util.Iterator<Entry> {,8,0,0,0,1,1,0,2,0,11,76,2,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,809,        return new OpenMapSparseIterator();,0,0,0,1,2,1,0,2,0,2,35,6,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,30,"public class OpenMapRealVector extends AbstractRealVector implements SparseRealVector, Serializable {",2,0,0,0,1,1,0,6,0,9,101,1,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,825,        protected OpenMapEntry(Iterator iter) {,4,0,0,1,3,1,0,2,0,7,39,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,826,            this.iter = iter;,4,0,0,0,0,0,0,0,0,5,17,5,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,827,        },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,832,            return iter.value();,0,0,0,1,2,1,4,0,0,4,20,6,0.5,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,77,72,    public abstract class Entry {,0,0,0,0,1,0,0,0,0,1,29,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,117,"        this(values, DEFAULT_ZERO_TOLERANCE);",4,0,0,1,2,0,0,0,0,4,37,4,0.14286,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,118,    },0,0,0,0,1,0,0,0,0,1,1,4,0.14286,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,126,"    public OpenMapRealVector(double[] values, double epsilon) {",6,0,0,2,5,1,0,0,0,7,59,2,0.14286,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,127,        virtualSize = values.length;,6,0,0,0,0,0,0,0,0,7,28,4,0.14286,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,128,        entries = new OpenIntToDoubleHashMap(0.0);,2,0,0,1,2,0,0,2,0,5,42,4,0.14286,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,129,        this.epsilon = epsilon;,4,0,0,0,0,0,0,0,0,5,23,4,0.14286,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,130,        for (int key = 0; key < values.length; key++) {,0,0,0,1,3,0,0,0,0,4,47,4,0.14286,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,131,            double value = values[key];,2,0,1,1,2,0,0,0,0,6,27,7,0.14286,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,132,            if (!isDefaultValue(value)) {,0,0,0,2,5,0,4,0,0,5,29,6,0.14286,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,133,"                entries.put(key, value);",0,0,0,1,2,0,8,0,0,8,24,9,0.14286,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,136,    },0,0,0,0,1,0,0,0,0,1,1,4,0.14286,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,205,        return Math.abs(value) < epsilon;,2,1,0,1,2,1,6,0,0,9,33,4,0.14286,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,699,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,700,        for (double a : data) {,6,0,0,1,3,0,6,0,0,12,23,3,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,701,            sum += a * a;,6,1,0,0,0,0,0,0,0,8,13,6,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,703,        return Math.sqrt(sum);,0,0,0,1,2,1,6,0,0,6,22,5,0.08333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,267,                    double r1 = y0 / y2;,0,0,0,0,0,0,0,0,0,0,20,4,0.11111,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,268,                    double r2 = y1 / y2;,6,1,0,0,0,0,0,0,0,7,20,11,0.11111,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,269,                    p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));,18,7,0,4,8,0,0,0,0,26,56,10,0.11111,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,270,                    p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);,0,0,0,3,6,0,0,0,0,9,42,4,0.11111,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,296,                x1 = x1 + 0.5 * tolerance;,6,2,0,0,0,0,0,0,0,9,26,9,0.07143,0,0
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,78,99,"      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);",4,0,0,1,2,0,8,0,0,12,77,5,0.05882,0,0
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,78,100,  },0,0,0,0,1,0,0,0,0,1,1,4,0.05882,0,0
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,78,66,"    super(y, forward);",4,0,0,1,2,0,0,0,0,4,18,4,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,78,67,  },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,107,"  protected AbstractStepInterpolator(final double[] y, final boolean forward) {",0,0,0,2,5,0,0,0,0,7,77,4,0.04,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,109,    previousTime      = Double.NaN;,6,0,0,0,0,0,0,0,0,7,31,4,0.04,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,110,    currentTime       = Double.NaN;,6,0,0,0,0,0,0,0,0,7,31,4,0.04,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,111,    h                 = Double.NaN;,6,0,0,0,0,0,0,0,0,7,31,4,0.04,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,112,    interpolatedTime  = Double.NaN;,10,1,0,0,0,2,0,0,0,14,31,1,0.04,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,114,    currentState            = y;,4,0,0,0,0,0,0,0,0,5,28,4,0.04,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,115,    interpolatedState       = new double[y.length];,0,0,0,1,2,0,0,0,0,3,47,4,0.04,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,116,    interpolatedDerivatives = new double[y.length];,6,0,0,1,2,0,0,0,0,7,47,4,0.04,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,118,    finalized         = false;,0,0,0,0,0,0,0,0,0,0,26,4,0.04,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,119,    this.forward      = forward;,4,0,0,0,0,0,0,0,0,5,28,4,0.04,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,120,    this.dirtyState   = true;,2,0,0,0,0,0,0,0,0,4,25,4,0.04,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,122,  },2,0,0,0,1,0,0,0,0,2,1,4,0.04,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,79,30,"public class EuclideanIntegerPoint implements Clusterable<EuclideanIntegerPoint>, Serializable {",2,0,0,0,1,1,0,6,0,9,96,1,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,45,    public Cluster(final T center) {,4,0,0,1,3,2,0,2,0,8,32,2,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,46,        this.center = center;,4,0,0,0,0,0,0,0,0,5,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,47,        points = new ArrayList<T>();,2,1,0,1,2,0,0,0,0,3,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,48,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,71,        return center;,2,0,0,0,0,1,0,0,0,2,14,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,40,    public KMeansPlusPlusClusterer(final Random random) {,4,0,0,1,3,2,0,2,0,8,53,2,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,41,        this.random = random;,4,0,0,0,0,0,0,0,0,5,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,42,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,56,"        List<Cluster<T>> clusters = chooseInitialCenters(points, k, random);",2,0,0,1,2,0,8,6,0,16,68,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,57,"        assignPointsToClusters(clusters, points);",0,0,0,1,2,0,6,0,0,6,41,5,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,89,        for (final T p : points) {,4,0,0,1,3,1,0,2,0,7,26,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,90,"            Cluster<T> cluster = getNearestCluster(clusters, p);",2,0,0,1,2,0,6,4,0,12,52,6,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,91,            cluster.addPoint(p);,0,0,0,1,2,0,0,0,0,3,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,107,        final List<T> pointSet = new ArrayList<T>(points);,4,0,0,1,2,1,0,8,0,13,50,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,108,        final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();,0,0,0,1,2,0,0,0,0,3,63,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,111,        final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));,2,0,0,3,6,0,0,0,0,3,70,6,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,112,        resultSet.add(new Cluster<T>(firstPoint));,2,0,0,2,4,0,4,4,0,10,42,5,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,114,        final double[] dx2 = new double[pointSet.size()];,2,0,0,3,6,1,4,0,0,7,49,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,115,        while (resultSet.size() < k) {,2,1,0,2,5,0,4,0,0,7,30,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,139,        return resultSet;,2,0,0,0,0,1,0,0,0,2,17,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,153,        double minDistance = Double.MAX_VALUE;,14,1,0,0,0,0,0,0,0,17,38,3,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,154,        Cluster<T> minCluster = null;,2,1,0,0,0,0,0,0,0,3,29,6,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,155,        for (final Cluster<T> c : clusters) {,10,1,0,1,3,1,0,4,0,17,37,3,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,156,            final double distance = point.distanceFrom(c.getCenter());,2,0,0,2,4,1,8,0,0,11,58,6,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,157,            if (distance < minDistance) {,4,1,0,1,3,0,0,0,0,5,29,6,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,161,        },2,0,0,0,1,0,0,0,0,3,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,162,        return minCluster;,2,0,0,0,0,1,0,0,0,2,18,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,79,57,"        return MathUtils.distance(point, p.getPoint());",0,0,0,2,4,1,0,0,0,7,47,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,79,1624,      int sum = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.33333,1,0
defect4j,math,org/apache/commons/math/util/MathUtils,79,1625,      for (int i = 0; i < p1.length; i++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,79,1626,          final int dp = p1[i] - p2[i];,2,1,1,2,4,1,0,0,0,12,29,6,0.33333,1,0
defect4j,math,org/apache/commons/math/util/MathUtils,79,1627,          sum += dp * dp;,0,0,0,0,0,0,0,0,0,0,15,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,79,1629,      return Math.sqrt(sum);,0,0,0,1,2,1,0,0,0,4,22,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,79,43,    public EuclideanIntegerPoint(final int[] point) {,4,0,0,2,5,2,0,0,0,6,49,2,0.2,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,79,44,        this.point = point;,4,0,0,0,0,0,0,0,0,5,19,4,0.2,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,79,45,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,79,52,        return point;,2,0,0,0,0,1,0,0,0,2,13,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,79,30,public final class MathUtils {,2,0,0,0,1,2,0,0,0,4,30,1,0.00247,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,79,69,    private static final long[] FACTORIALS = new long[] {,0,0,0,2,5,0,0,0,0,7,53,4,0.00247,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1090,                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;,0,0,0,1,2,0,0,0,0,3,43,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1091,                    dMin = 0.0;,2,0,0,0,0,0,0,0,0,3,11,11,1.0,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1092,                    updateSigma(tau);,0,0,0,1,2,0,6,0,0,6,17,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1093,                    return deflatedEnd;,4,0,0,0,0,1,0,0,0,5,19,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,870,            return dotProduct((ArrayRealVector) v);,2,0,0,2,4,1,8,2,0,12,39,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,884,        checkVectorDimensions(v.length);,0,0,0,1,2,0,0,0,0,3,32,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,885,        double dot = 0;,2,0,0,0,0,0,0,0,0,2,15,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,886,        for (int i = 0; i < data.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,887,            dot += data[i] * v[i];,18,3,1,2,4,0,0,0,0,31,22,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,889,        return dot;,2,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,900,        return dotProduct(v.data);,4,0,0,1,2,1,2,0,0,6,26,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,336,        if (eigenvectors == null) {,0,0,0,1,3,0,0,0,0,4,27,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,337,            findEigenVectors();,0,0,0,1,2,0,0,0,0,3,19,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,339,        return eigenvectors[i].copy();,0,0,1,2,4,1,2,0,0,6,30,5,0.5,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,175,"    public ArrayRealVector(ArrayRealVector v, boolean deep) {",6,0,0,1,3,1,0,2,0,9,57,2,0.5,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,176,        data = deep ? v.data.clone() : v.data;,12,0,0,1,2,0,2,0,0,15,38,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,177,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,225,"        return new ArrayRealVector(this, true);",2,0,0,1,2,1,6,4,0,13,39,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1105,                        tau *= 0.25;,2,0,0,0,0,0,0,0,0,3,12,15,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1106,                        tType -= 12;,0,0,0,0,0,0,0,0,0,0,12,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1530,                tType = -5;,2,0,0,0,0,0,0,0,0,4,11,8,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1531,                double s = 0.25 * dMin;,8,2,0,0,0,1,2,0,0,13,23,3,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1534,                final int np = nn - 2 * pingPong;,6,2,0,0,0,1,0,0,0,9,33,8,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1535,                double b1 = work[np - 2];,4,1,1,1,2,0,0,0,0,7,25,9,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1536,                double b2 = work[np - 6];,4,1,1,1,2,0,0,0,0,7,25,9,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1537,                final double gam = dN2;,10,2,1,0,0,1,0,0,0,18,23,3,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1538,                if (work[np - 8] > b2 || work[np - 4] > b1) {,0,0,0,3,7,0,0,0,0,10,45,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1541,                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);,10,6,1,4,8,0,0,0,0,20,58,9,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1544,                if (end - start > 3) {,14,3,0,1,3,0,0,0,0,18,22,3,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1564,                if (a2 < cnst1) {,0,0,0,1,3,0,0,0,0,4,17,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1565,                    tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);,6,4,0,3,6,0,6,0,0,17,43,10,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1570,            } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,77,    public ArrayRealVector(double[] d) {,4,0,0,2,5,1,0,0,0,5,36,2,0.25,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,78,        data = d.clone();,2,0,0,1,2,0,4,0,0,7,17,4,0.25,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,79,    },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,269,            return subtract((ArrayRealVector) v);,2,0,0,2,4,1,2,2,0,6,37,7,0.25,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,283,        checkVectorDimensions(v.length);,0,0,0,1,2,0,0,0,0,3,32,4,0.25,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,284,        double[] out = new double[data.length];,0,0,0,2,4,0,0,0,0,6,39,4,0.25,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,285,        for (int i = 0; i < data.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.25,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,286,            out[i] = data[i] - v[i];,0,1,1,3,6,0,0,0,0,14,24,6,0.25,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,288,        return new ArrayRealVector(out);,2,0,0,1,2,1,0,2,0,4,32,5,0.25,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,299,        return (ArrayRealVector) subtract(v.data);,4,0,0,2,4,1,2,2,0,8,42,5,0.25,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,905,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.25,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,906,        for (double a : data) {,4,0,0,1,3,0,0,0,0,4,23,4,0.25,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,907,            sum += a * a;,0,0,0,0,0,0,0,0,0,0,13,4,0.25,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,909,        return Math.sqrt(sum);,0,0,0,1,2,1,6,0,0,6,22,5,0.25,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,1287,        if (data.length != n) {,6,1,0,1,3,0,0,0,0,7,23,4,0.25,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,1292,    },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1488,                        np = nn - 2 * pingPong;,6,2,0,0,0,0,0,0,0,9,23,11,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1489,                        b2 = work[np - 2];,4,1,1,1,2,0,0,0,0,8,18,11,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1490,                        gam = dN1;,6,0,0,0,0,0,14,0,0,22,10,3,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1491,                        if (work[np - 4]  >  work[np - 2]) {,4,3,1,3,7,0,0,0,0,11,36,11,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1494,                        a2 = work[np - 4] / work[np - 2];,12,7,1,2,4,0,10,0,0,34,33,3,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1495,                        if (work[nn - 9]  >  work[nn - 11]) {,4,3,1,3,7,0,0,0,0,11,37,11,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1498,                        b2 = work[nn - 9] / work[nn - 11];,6,3,1,2,4,0,0,0,0,14,34,11,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1499,                        np = nn - 13;,4,1,0,0,0,0,0,0,0,6,13,11,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1509,                            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1529,                tType = -5;,0,0,0,0,0,0,0,0,0,0,11,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1530,                double s = 0.25 * dMin;,4,1,0,0,0,0,0,0,0,5,23,9,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1533,                final int np = nn - 2 * pingPong;,6,2,0,0,0,1,0,0,0,9,33,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1534,                double b1 = work[np - 2];,4,1,1,1,2,0,0,0,0,7,25,9,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1535,                double b2 = work[np - 6];,0,0,0,1,2,0,0,0,0,3,25,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1536,                final double gam = dN2;,0,0,0,0,0,0,0,0,0,0,23,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1537,                if (work[np - 8] > b2 || work[np - 4] > b1) {,0,0,0,3,7,0,0,0,0,10,45,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1540,                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);,10,6,1,4,8,0,0,0,0,20,58,9,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1543,                if (end - start > 2) {,4,2,0,1,3,0,0,0,0,6,22,8,0.5,1,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1544,                    b2 = work[nn - 13] / work[nn - 15];,6,3,1,2,4,0,0,0,0,14,35,10,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1621,                tau = 0.25 * dMin1;,4,1,0,0,0,0,0,0,0,6,19,7,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1622,                if (dMin1 == dN1) {,4,1,0,1,3,0,0,0,0,5,19,7,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1625,                tType = -9;,0,0,0,0,0,0,0,0,0,0,11,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1627,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,81,77,    public ArrayRealVector(double[] d) {,8,1,0,2,5,1,4,0,0,14,36,2,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,81,78,        data = d.clone();,2,0,0,1,2,0,4,0,0,7,17,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,81,79,    },4,0,0,0,1,2,6,2,0,14,1,1,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1479,                        gam = dN;,10,1,0,0,0,0,0,0,0,14,9,1,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1480,                        a2 = 0.0;,2,0,0,0,0,0,0,0,0,3,9,11,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1481,                        if (work[nn - 5]  >  work[nn - 7]) {,0,0,0,3,7,0,0,0,0,10,36,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1484,                        b2 = work[nn - 5] / work[nn - 7];,6,3,1,2,4,0,0,0,0,14,33,11,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1485,                        np = nn - 9;,4,1,0,0,0,0,0,0,0,6,12,11,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1504,                        if(b2 == 0.0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1507,                        b1 = b2;,0,0,0,0,0,0,0,0,0,0,8,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1508,                        if (work[i4]  >  work[i4 - 2]) {,2,2,1,3,7,0,0,0,0,10,32,11,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1511,                        b2 = b2 * (work[i4] / work[i4 - 2]);,6,3,1,3,6,0,0,0,0,16,36,11,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1512,                        a2 = a2 + b2;,6,1,0,0,0,0,0,0,0,8,13,11,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1513,"                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {",0,0,0,2,5,0,0,0,0,7,48,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1586,            if (dMin1 == dN1 && dMin2 == dN2) {,8,3,0,1,3,0,0,0,0,11,35,5,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1084,                } else if ((dMin < 0.0) &&,18,5,1,1,4,3,0,0,0,32,26,2,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1093,                } else if (dMin < 0.0) {,12,1,0,1,4,0,8,0,0,22,24,3,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1095,                    if (tType < -22) {,0,0,0,1,3,0,0,0,0,4,18,4,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1098,                    } else if (dMin1 > 0.0) {,2,1,0,1,4,0,0,0,0,3,25,13,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1100,                        tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);,0,0,0,2,4,0,0,0,0,6,53,4,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1101,                        tType -= 11;,0,0,0,0,0,0,0,0,0,0,12,4,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1474,                    tType = -4;,0,0,0,0,0,0,0,0,0,0,11,4,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1475,                    double s = 0.25 * dMin;,4,1,0,0,0,0,0,0,0,5,23,10,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1478,                    if (dMin == dN) {,4,1,0,1,3,0,0,0,0,5,17,9,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1502,                    a2 = a2 + b2;,6,1,0,0,0,0,0,0,0,8,13,9,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1503,                    for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {,16,4,0,1,3,2,0,2,0,25,60,0,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1517,                    a2 = cnst3 * a2;,6,1,0,0,0,0,0,0,0,8,16,9,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1520,                    if (a2 < cnst1) {,4,1,0,1,3,0,0,0,0,5,17,9,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1521,                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);,6,4,0,3,6,0,6,0,0,17,41,11,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1523,                    tau = s;,0,0,0,0,0,0,0,0,0,0,8,4,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,191,        throws InvalidMatrixException {,0,0,0,0,1,0,0,0,0,1,31,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,193,        this.main      = main.clone();,0,0,0,1,2,0,0,0,0,3,30,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,194,        this.secondary = secondary.clone();,0,0,0,1,2,0,0,0,0,3,35,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,195,        transformer    = null;,2,0,0,0,0,0,0,0,0,3,22,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,198,        squaredSecondary = new double[secondary.length];,6,0,0,1,2,0,0,0,0,7,48,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,199,        for (int i = 0; i < squaredSecondary.length; ++i) {,10,1,0,1,3,0,0,0,0,12,51,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,200,            final double s = secondary[i];,0,0,0,1,2,0,0,0,0,3,30,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,201,            squaredSecondary[i] = s * s;,4,1,1,1,2,0,0,0,0,10,28,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,204,        this.splitTolerance = splitTolerance;,4,0,0,0,0,0,0,0,0,5,37,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,205,        decompose();,0,0,0,1,2,0,2,0,0,2,12,5,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,643,"                final double[] range       = eigenvaluesRange(begin, n);",14,2,1,2,4,1,6,0,0,28,56,1,0.06667,1,1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,644,                final double oneFourth     = 0.25 * (3 * range[0] + range[1]);,0,0,0,3,6,0,0,0,0,9,62,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,645,"                final int oneFourthCount   = countEigenValues(oneFourth, begin, n);",2,0,0,1,2,1,8,0,0,11,67,7,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,646,                final double threeFourth   = 0.25 * (range[0] + 3 * range[1]);,2,3,1,3,6,1,0,0,0,10,62,7,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,647,"                final int threeFourthCount = countEigenValues(threeFourth, begin, n);",2,0,0,1,2,1,8,0,0,11,69,7,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,648,                final boolean chooseLeft   = (oneFourthCount - 1) >= (n - threeFourthCount);,0,0,0,2,4,0,0,0,0,6,76,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,649,                final double lambda        = chooseLeft ? range[0] : range[1];,6,0,1,2,4,1,0,0,0,11,62,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,651,                tau = (range[1] - range[0]) * MathUtils.EPSILON * n + 2 * minPivot;,10,4,1,3,6,0,0,0,0,19,67,7,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,654,"                ldlTDecomposition(lambda, begin, n);",0,0,0,1,2,0,8,0,0,8,36,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,657,                processGeneralBlock(n);,4,0,0,1,2,0,12,0,0,16,23,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,826,        double sumOffDiag = 0;,2,0,0,0,0,0,0,0,0,2,22,5,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,827,        for (int i = 0; i < n - 1; ++i) {,10,3,0,1,3,0,0,0,0,15,33,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,828,            final int fourI = 4 * i;,8,2,0,0,0,1,6,0,0,17,24,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,829,            final double ei = work[fourI + 2];,4,1,1,1,2,1,0,0,0,8,34,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,830,            sumOffDiag += ei;,0,0,0,0,0,0,0,0,0,0,17,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,833,        if (sumOffDiag == 0) {,8,2,0,1,3,0,0,0,0,12,22,1,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,839,"        flipIfWarranted(n, 2);",0,0,0,1,2,0,0,0,0,3,22,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,842,        initialSplits(n);,0,0,0,1,2,0,4,0,0,4,17,5,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,845,        tType = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,846,        dMin1 = 0;,4,0,0,0,0,3,4,2,0,14,10,1,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,847,        dMin2 = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,848,        dN    = 0;,8,1,0,0,0,0,0,0,0,11,10,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,849,        dN1   = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,850,        dN2   = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,851,        tau   = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,854,        int i0 = 0;,0,0,0,0,0,0,0,0,0,0,11,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,855,        int n0 = n;,4,0,0,0,0,0,0,0,0,4,11,5,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,856,        while (n0 > 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,859,            sigma    = (n0 == n) ? 0 : -work[4 * n0 - 2];,2,0,0,2,4,0,0,0,0,2,45,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,860,            sigmaLow = 0;,2,0,0,0,0,0,0,0,0,3,13,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,863,            double offDiagMin = (i0 == n0) ? 0 : work[4 * n0 - 6];,2,0,0,2,4,0,0,0,0,3,54,2,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,864,            double offDiagMax = 0;,0,0,0,0,0,0,0,0,0,0,22,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,865,            double diagMax    = work[4 * n0 - 4];,0,0,0,1,2,0,0,0,0,3,37,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,866,            double diagMin    = diagMax;,4,0,0,0,0,0,0,0,0,4,28,7,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,867,            i0 = 0;,0,0,0,0,0,0,0,0,0,0,7,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,868,            for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {,0,0,0,2,5,0,0,0,0,7,44,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,869,                if (work[i + 2] <= 0) {,2,2,1,2,5,0,0,0,0,6,23,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,873,                if (diagMin >= 4 * offDiagMax) {,2,0,0,1,3,0,2,2,0,6,32,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,874,"                    diagMin    = Math.min(diagMin, work[i + 4]);",8,3,1,2,4,0,6,0,0,25,44,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,875,"                    offDiagMax = Math.max(offDiagMax, work[i + 2]);",4,1,1,2,4,0,6,0,0,14,47,10,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,877,"                diagMax    = Math.max(diagMax, work[i] + work[i + 2]);",0,0,0,3,6,0,0,0,0,9,54,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,878,"                offDiagMin = Math.min(offDiagMin, work[i + 2]);",6,1,1,2,4,0,6,0,0,16,47,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,880,            work[4 * n0 - 2] = offDiagMin;,0,0,0,1,2,0,0,0,0,3,30,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,883,"            dMin = -Math.max(0, diagMin - 2 * Math.sqrt(diagMin * offDiagMax));",0,0,0,2,4,0,0,0,0,6,67,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,885,            pingPong = 0;,2,0,0,0,0,0,0,0,0,3,13,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,886,            int maxIter = 30 * (n0 - i0);,0,0,0,1,2,0,0,0,0,3,29,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,887,            for (int k = 0; i0 < n0; ++k) {,0,0,0,1,3,0,0,0,0,4,31,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,888,                if (k >= maxIter) {,4,1,0,1,3,0,0,0,0,5,19,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,893,"                n0 = goodStep(i0, n0);",4,1,0,1,2,0,6,0,0,12,22,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,894,                pingPong = 1 - pingPong;,0,0,0,0,0,0,0,0,0,0,24,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,898,                if ((pingPong == 0) && (n0 - i0 > 3) &&,6,2,0,2,5,1,0,0,0,9,39,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,936,        pingPong = 0;,2,0,0,0,0,0,0,0,0,3,13,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,937,        for (int k = 0; k < 2; ++k) {,0,0,0,1,3,0,0,0,0,4,29,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,940,            double d = work[4 * (n - 1) + pingPong];,6,3,1,2,4,0,0,0,0,11,40,7,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,941,            for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {,14,4,0,2,5,0,0,0,0,20,54,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,942,                if (work[i + 2] <= TOLERANCE_2 * d) {,18,4,1,2,5,0,0,0,0,25,37,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,946,                    d *= work[i] / (d + work[i + 2]);,6,3,1,3,6,0,0,0,0,16,33,10,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,951,            d = work[pingPong];,2,0,1,1,2,0,0,0,0,5,19,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,952,            for (int i = 2 + pingPong; i < 4 * n - 2; i += 4) {,10,4,0,1,3,0,0,0,0,15,51,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,953,                final int j = i - 2 * pingPong - 1;,6,3,0,0,0,1,0,0,0,10,35,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,954,                work[j] = d + work[i];,2,1,1,2,4,0,0,0,0,12,22,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,955,                if (work[i] <= TOLERANCE_2 * d) {,4,2,1,2,5,0,0,0,0,10,33,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,960,                } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&,6,4,1,3,8,0,0,0,0,16,58,9,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,962,                    final double tmp = work[i + 2] / work[j];,4,2,1,2,4,1,4,0,0,19,41,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,963,                    work[j + 2] = work[i] * tmp;,4,2,1,2,4,0,0,0,0,13,28,11,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,964,                    d *= tmp;,4,0,0,0,0,0,0,0,0,5,9,11,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,965,                } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,970,            work[4 * n - 3 - pingPong] = d;,6,3,1,1,2,0,0,0,0,12,31,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,973,            pingPong = 1 - pingPong;,0,0,0,0,0,0,0,0,0,0,24,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,977,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,992,        g = 0.0;,2,0,0,0,0,0,0,0,0,3,8,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,995,        int deflatedEnd = end;,6,0,1,0,0,0,0,0,0,9,22,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,996,        for (boolean deflating = true; deflating;) {,0,0,0,1,3,0,0,0,0,4,44,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,998,            if (start >= deflatedEnd) {,4,1,0,1,3,0,0,0,0,5,27,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1003,            final int k = 4 * deflatedEnd + pingPong - 1;,0,0,0,0,0,0,0,0,0,0,45,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1005,            if ((start == deflatedEnd - 1) ||,4,3,0,1,3,0,0,0,0,7,33,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1011,                work[4 * deflatedEnd - 4] = sigma + work[4 * deflatedEnd - 4 + pingPong];,0,0,0,2,4,0,0,0,0,6,73,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1012,                deflatedEnd -= 1;,4,0,0,0,0,0,0,4,0,9,17,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1014,            } else if ((start == deflatedEnd - 2) ||,4,3,0,1,4,0,0,0,0,7,40,7,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1043,                deflating = false;,2,0,0,0,0,0,0,0,0,4,18,9,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1047,        },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1049,        final int l = 4 * deflatedEnd + pingPong - 1;,0,0,0,0,0,0,0,0,0,0,45,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1052,        if ((dMin <= 0) || (deflatedEnd < end)) {,4,0,0,3,7,0,0,0,0,5,41,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1053,"            if (flipIfWarranted(deflatedEnd, 1)) {",0,0,0,2,5,0,4,0,0,4,38,7,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1066,        if ((dMin < 0) ||,2,2,0,1,3,0,0,0,0,4,17,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1071,"            computeShiftIncrement(start, deflatedEnd, end - deflatedEnd);",4,1,0,1,2,0,6,0,0,11,61,7,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1074,            for (boolean loop = true; loop;) {,6,0,0,1,3,0,0,0,0,8,34,0,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1077,"                dqds(start, deflatedEnd);",4,0,0,1,2,0,12,0,0,16,25,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1080,                if ((dMin >= 0) && (dMin1 > 0)) {,4,3,0,3,7,0,0,0,0,7,33,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1082,                    updateSigma(tau);,0,0,0,1,2,0,4,0,0,4,17,11,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1083,                    return deflatedEnd;,0,0,0,0,0,1,0,0,0,1,19,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1118,"        dqd(start, deflatedEnd);",0,0,0,1,2,0,6,0,0,6,24,5,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1120,        return deflatedEnd;,2,0,0,0,0,1,0,0,0,2,19,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1132,        if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {,0,0,0,4,9,0,0,0,0,13,58,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1145,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1157,        final int lowerStart = 4 * main.length;,0,0,0,0,0,0,0,0,0,0,39,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1158,        final int upperStart = 5 * main.length;,6,1,0,0,0,1,0,0,0,8,39,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1159,        double lower = Double.POSITIVE_INFINITY;,8,0,0,0,0,0,0,0,0,8,40,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1160,        double upper = Double.NEGATIVE_INFINITY;,26,3,0,0,0,0,0,0,0,29,40,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1161,        for (int i = 0; i < n; ++i) {,8,1,0,1,3,0,0,0,0,10,29,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1162,"            lower = Math.min(lower, work[lowerStart + index +i]);",8,1,1,2,4,0,6,0,0,18,53,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1163,"            upper = Math.max(upper, work[upperStart + index +i]);",0,0,0,2,4,0,0,0,0,6,53,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1167,"        final double tNorm = Math.max(Math.abs(lower), Math.abs(upper));",2,0,0,3,6,1,16,0,0,19,64,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1168,        final double relativeTolerance = Math.sqrt(MathUtils.EPSILON);,6,0,0,1,2,1,4,0,0,11,62,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1169,        final double absoluteTolerance = 4 * minPivot;,2,0,0,0,0,0,4,0,0,7,46,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1170,        final int maxIter =,0,0,0,0,0,0,0,0,0,0,19,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1172,        final double margin = 2 * (tNorm * MathUtils.EPSILON * n + 2 * minPivot);,12,4,0,1,2,1,0,0,0,17,73,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1175,        double left  = lower - margin;,6,1,0,0,0,0,0,0,0,7,30,5,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1176,        double right = upper + margin;,6,1,0,0,0,0,0,0,0,7,30,5,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1177,        for (int i = 0; i < maxIter; ++i) {,10,2,0,1,3,0,4,0,0,18,35,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1179,            final double range = right - left;,6,1,0,0,0,1,0,0,0,8,34,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1180,            if ((range < absoluteTolerance) ||,0,0,0,1,3,0,0,0,0,4,34,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1183,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1186,            final double middle = 0.5 * (left + right);,6,2,0,1,2,1,0,0,0,9,43,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1187,"            if (countEigenValues(middle, index, n) >= 1) {",4,0,0,2,5,0,0,0,0,4,46,2,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1188,                right = middle;,4,0,0,0,0,0,0,0,0,5,15,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1190,                left = middle;,6,1,1,0,0,0,4,0,0,17,14,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1194,"        lower = Math.max(lower, left - 100 * MathUtils.EPSILON * Math.abs(left));",8,2,0,2,4,0,12,0,0,23,73,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1197,        left  = lower - margin;,0,0,0,0,0,0,0,0,0,0,23,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1198,        right = upper + margin;,6,1,0,0,0,0,0,0,0,8,23,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1199,        for (int i = 0; i < maxIter; ++i) {,10,1,0,1,3,3,0,0,0,15,35,1,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1201,            final double range = right - left;,6,1,0,0,0,1,0,0,0,8,34,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1202,            if ((range < absoluteTolerance) ||,4,2,0,1,3,0,0,0,0,6,34,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1205,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1208,            final double middle = 0.5 * (left + right);,6,2,0,1,2,1,0,0,0,9,43,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1209,"            if (countEigenValues(middle, index, n) >= n) {",2,1,0,2,5,0,8,0,0,11,46,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1210,                right = middle;,2,0,0,0,0,0,0,0,0,3,15,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1212,                left = middle;,4,0,0,0,0,0,0,0,0,5,14,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1216,"        upper = Math.min(upper, right + 100 * MathUtils.EPSILON * Math.abs(right));",0,0,0,2,4,0,0,0,0,6,75,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1218,"        return new double[] { lower, upper };",4,0,0,2,4,1,0,0,0,4,37,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1230,        double ratio = main[index] - t;,4,1,1,1,2,0,0,0,0,9,31,5,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1231,        int count = (ratio > 0) ? 0 : 1;,4,1,0,1,2,0,0,2,0,8,32,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1232,        for (int i = 1; i < n; ++i) {,0,0,0,1,3,0,0,0,0,4,29,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1233,            ratio = main[index + i] - squaredSecondary[index + i - 1] / ratio - t;,14,6,1,2,4,0,0,0,0,25,70,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1234,            if (ratio <= 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1235,                ++count;,2,0,0,0,0,0,0,0,0,3,8,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1238,        return count;,6,1,0,0,0,1,0,0,0,7,13,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1253,        double di = main[index] - lambda;,0,0,0,1,2,0,0,0,0,3,33,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1254,        work[0] = Math.abs(di);,0,0,1,2,4,0,6,0,0,9,23,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1255,        for (int i = 1; i < n; ++i) {,8,1,0,1,3,0,0,0,0,10,29,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1256,            final int    fourI = 4 * i;,4,1,0,0,0,1,0,0,0,6,27,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1257,            final double eiM1  = secondary[index + i - 1];,0,0,0,1,2,0,0,0,0,3,46,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1258,            final double ratio = eiM1 / di;,6,1,0,0,0,1,0,0,0,8,31,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1259,            work[fourI - 2] = ratio * ratio * Math.abs(di);,4,0,0,2,4,0,0,2,0,6,47,7,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1260,            di = (main[index + i] - lambda) - eiM1 * ratio;,12,5,1,2,4,0,12,0,0,32,47,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1261,            work[fourI] = Math.abs(di);,0,0,1,2,4,0,6,0,0,11,27,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1263,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1273,        eMin = work[4 * start + pingPong + 4];,0,0,0,1,2,0,0,0,0,3,38,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1274,        double d = work[4 * start + pingPong] - tau;,10,2,0,1,2,0,0,0,0,13,44,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1275,        dMin = d;,4,0,0,0,0,0,0,0,0,5,9,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1276,        dMin1 = -work[4 * start + pingPong];,6,2,1,1,2,0,0,0,0,12,36,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1278,        if (pingPong == 0) {,4,1,1,1,3,0,0,0,0,8,20,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1279,            for (int j4 = 4 * start + 3; j4 <= 4 * (end - 3); j4 += 4) {,0,0,1,2,5,0,0,0,0,5,60,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1280,                work[j4 - 2] = d + work[j4 - 1];,0,0,0,2,4,0,0,0,0,6,32,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1281,                final double tmp = work[j4 + 1] / work[j4 - 2];,6,3,1,2,4,1,0,0,0,14,47,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1282,                d = d * tmp - tau;,0,0,0,0,0,0,0,0,0,0,18,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1283,"                dMin = Math.min(dMin, d);",2,0,1,1,2,0,12,0,0,17,25,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1284,                work[j4] = work[j4 - 1] * tmp;,4,2,1,2,4,0,0,0,0,13,30,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1285,"                eMin = Math.min(work[j4], eMin);",2,0,1,2,4,0,6,0,0,13,32,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1288,            for (int j4 = 4 * start + 3; j4 <= 4 * (end - 3); j4 += 4) {,10,5,0,2,5,0,0,0,0,16,60,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1289,                work[j4 - 3] = d + work[j4];,0,0,0,2,4,0,0,0,0,6,28,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1290,                final double tmp = work[j4 + 2] / work[j4 - 3];,10,4,1,2,4,1,0,0,0,24,47,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1291,                d = d * tmp - tau;,0,0,0,0,0,0,0,0,0,0,18,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1292,"                dMin = Math.min(dMin, d);",0,0,0,1,2,0,0,0,0,3,25,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1293,                work[j4 - 1] = work[j4] * tmp;,0,0,0,2,4,0,0,0,0,6,30,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1294,"                eMin = Math.min(work[j4 - 1], eMin);",4,1,1,2,4,0,6,0,0,14,36,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1299,        dN2 = d;,0,0,0,0,0,0,0,0,0,0,8,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1300,        dMin2 = dMin;,12,2,0,0,0,1,8,0,0,24,13,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1301,        int j4 = 4 * (end - 2) - pingPong - 1;,6,4,0,1,2,0,0,0,0,10,38,5,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1302,        int j4p2 = j4 + 2 * pingPong - 1;,0,0,0,0,0,0,0,0,0,0,33,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1303,        work[j4 - 2] = dN2 + work[j4p2];,4,2,1,2,4,0,0,0,0,13,32,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1304,        work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);,4,4,1,5,10,0,0,0,0,21,56,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1305,        dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]) - tau;,0,0,0,3,6,0,0,0,0,9,50,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1306,"        dMin = Math.min(dMin, dN1);",0,0,0,1,2,0,0,0,0,3,27,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1308,        dMin1 = dMin;,4,0,0,0,0,0,0,0,0,5,13,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1309,        j4 = j4 + 4;,4,1,0,0,0,0,0,0,0,6,12,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1310,        j4p2 = j4 + 2 * pingPong - 1;,6,3,0,0,0,0,0,0,0,10,29,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1311,        work[j4 - 2] = dN1 + work[j4p2];,4,2,1,2,4,0,0,0,0,13,32,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1312,        work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);,0,0,0,5,10,0,0,0,0,15,56,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1313,        dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]) - tau;,10,5,1,3,6,0,0,0,0,20,49,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1314,"        dMin = Math.min(dMin, dN);",2,0,0,1,2,0,8,0,0,11,26,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1316,        work[j4 + 2] = dN;,4,1,1,1,2,0,0,0,0,8,18,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1317,        work[4 * end - pingPong - 1] = eMin;,6,3,1,1,2,0,0,0,0,12,36,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1319,    },4,2,1,0,1,1,0,0,0,16,1,2,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1330,        eMin = work[4 * start + pingPong + 4];,6,3,1,1,2,0,0,0,0,12,38,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1331,        double d = work[4 * start + pingPong];,2,0,0,1,2,0,6,2,0,10,38,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1332,        dMin = d;,0,0,0,0,0,0,0,0,0,0,9,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1334,        if (pingPong == 0) {,2,1,0,1,3,0,0,0,0,3,20,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1335,            for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4) {,0,0,0,2,5,0,0,0,0,7,59,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1336,                work[j4 - 2] = d + work[j4 - 1];,2,1,0,2,4,0,4,0,0,7,32,9,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1337,                if (work[j4 - 2] == 0.0) {,2,2,1,2,5,0,0,0,0,6,26,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1342,                } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&,0,0,0,3,8,0,0,0,0,11,64,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1344,                    final double tmp = work[j4 + 1] / work[j4 - 2];,20,4,1,2,4,1,0,0,0,31,47,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1345,                    work[j4] = work[j4 - 1] * tmp;,10,4,1,2,4,0,0,0,0,25,30,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1346,                    d *= tmp;,0,0,0,0,0,0,0,0,0,0,9,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1347,                } else {,0,1,0,0,2,0,4,0,0,5,8,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1351,"                dMin = Math.min(dMin, d);",2,0,0,1,2,0,8,0,0,11,25,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1352,"                eMin = Math.min(eMin, work[j4]);",2,0,1,2,4,0,6,0,0,13,32,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1377,        dN2   = d;,4,0,0,0,0,0,0,0,0,5,10,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1378,        dMin2 = dMin;,4,0,0,0,0,0,0,0,0,5,13,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1379,        int j4 = 4 * (end - 2) - pingPong - 1;,6,5,1,1,2,0,0,0,0,15,38,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1380,        int j4p2 = j4 + 2 * pingPong - 1;,0,0,0,0,0,0,0,0,0,0,33,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1381,        work[j4 - 2] = dN2 + work[j4p2];,2,1,0,2,4,0,0,0,0,3,32,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1382,        if (work[j4 - 2] == 0.0) {,4,2,1,2,5,0,4,0,0,15,26,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1387,        } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&,0,0,0,3,8,0,0,0,0,11,66,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1389,            final double tmp = work[j4p2 + 2] / work[j4 - 2];,16,4,1,2,4,1,0,0,0,26,49,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1390,            work[j4] = work[j4p2] * tmp;,4,1,1,2,4,1,6,0,0,21,28,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1391,            dN1 = dN2 * tmp;,8,2,0,0,0,0,0,0,0,11,16,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1392,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1396,"        dMin = Math.min(dMin, dN1);",0,0,0,1,2,0,0,0,0,3,27,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1398,        dMin1 = dMin;,4,0,0,0,0,0,0,0,0,5,13,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1399,        j4 = j4 + 4;,0,0,0,0,0,0,0,0,0,0,12,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1400,        j4p2 = j4 + 2 * pingPong - 1;,0,0,0,0,0,0,0,0,0,0,29,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1401,        work[j4 - 2] = dN1 + work[j4p2];,4,2,1,2,4,0,0,0,0,13,32,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1402,        if (work[j4 - 2] == 0.0) {,2,2,1,2,5,0,0,0,0,6,26,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1407,        } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&,10,5,1,3,8,0,0,0,0,19,66,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1409,            final double tmp = work[j4p2 + 2] / work[j4 - 2];,6,3,1,2,4,1,0,0,0,14,49,7,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1410,            work[j4] = work[j4p2] * tmp;,0,0,0,2,4,0,0,0,0,6,28,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1411,            dN = dN1 * tmp;,10,1,0,0,0,0,0,0,0,13,15,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1412,        } else {,4,0,0,0,2,3,2,2,0,11,8,1,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1416,"        dMin = Math.min(dMin, dN);",6,0,0,1,2,0,12,2,0,21,26,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1418,        work[j4 + 2] = dN;,4,1,1,1,2,0,0,0,0,8,18,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1419,        work[4 * end - pingPong - 1] = eMin;,0,0,0,1,2,0,0,0,0,3,36,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1421,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1432,        final double cnst1 = 0.563;,0,0,1,0,0,0,0,0,0,6,27,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1433,        final double cnst2 = 1.010;,0,0,0,0,0,0,0,0,0,0,27,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1434,        final double cnst3 = 1.05;,2,0,0,0,0,1,0,0,0,3,26,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1438,        if (dMin <= 0.0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1444,        int nn = 4 * end + pingPong - 1;,0,0,0,0,0,0,0,0,0,0,32,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1445,        switch (deflated) {,4,0,0,1,3,3,0,0,0,7,19,1,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1448,            if (dMin == dN || dMin == dN1) {,8,3,0,1,3,0,0,0,0,11,32,5,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1450,                double b1 = Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);,6,3,1,4,8,0,8,0,0,21,62,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1451,                double b2 = Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);,8,4,1,4,8,0,8,0,0,24,62,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1452,                double a2 = work[nn - 7] + work[nn - 5];,6,3,1,2,4,0,0,0,0,13,40,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1454,                if (dMin == dN && dMin1 == dN1) {,8,3,0,1,3,0,0,0,0,11,33,7,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1456,                    final double gap2 = dMin2 - a2 - dMin2 * 0.25;,8,2,0,0,0,1,0,0,0,11,46,9,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1457,                    final double gap1 = a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));,22,7,0,4,8,1,0,0,0,30,89,9,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1458,                    if (gap1 > 0.0 && gap1 > b1) {,6,3,0,1,3,0,0,0,0,9,30,9,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1459,"                        tau   = Math.max(dN - (b1 / gap1) * b1, 0.5 * dMin);",12,4,0,2,4,0,4,0,0,21,52,11,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1460,                        tType = -2;,0,0,0,0,0,0,0,0,0,0,11,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1472,                } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1526,            } else if (dMin == dN2) {,0,0,0,1,4,0,0,0,0,5,25,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1672,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1682,        if (shift < sigma) {,0,0,0,1,3,0,0,0,0,4,20,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1683,            sigmaLow += shift;,0,0,0,0,0,0,0,0,0,0,18,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1684,            final double t = sigma + sigmaLow;,0,0,0,0,0,0,0,0,0,0,34,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1685,            sigmaLow -= t - sigma;,2,0,0,0,0,0,0,0,0,2,22,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1686,            sigma = t;,0,0,0,0,0,0,0,0,0,0,10,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1687,        } else {,8,1,0,0,2,1,6,0,0,16,8,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1688,            final double t = sigma + shift;,6,1,0,0,0,1,0,0,0,8,31,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1689,            sigmaLow += sigma - (t - shift);,8,2,0,1,2,0,0,0,0,11,32,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1690,            sigma = t;,4,0,0,0,0,0,0,0,0,5,10,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1692,    },2,0,0,0,1,0,0,0,0,2,1,4,0.06667,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,308,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,169,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,170,                        matrix[row][getSlackVariableOffset() + slackVar++] = 1;  // slack,2,1,1,3,6,0,2,0,0,11,65,8,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,152,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,191,            doIteration(tableau);,0,0,0,1,2,0,4,0,0,4,21,7,0.125,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,338,        double[] out = new double[data.length];,10,0,0,2,4,0,2,0,0,12,39,3,0.1,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,339,        for (int i = 0; i < data.length; i++) {,14,1,0,1,3,0,2,0,0,18,39,3,0.1,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,340,            out[i] = data[i] * d;,0,0,0,2,4,0,0,0,0,6,21,4,0.1,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,342,        return new ArrayRealVector(out);,0,0,0,1,2,1,0,0,0,4,32,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,297,                return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.1,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,884,        checkVectorDimensions(v.length);,14,1,0,1,2,0,2,0,0,18,32,3,0.09091,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,885,        double dot = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.09091,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,886,        for (int i = 0; i < data.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.09091,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,887,            dot += data[i] * v[i];,2,1,1,2,4,0,0,0,0,12,22,6,0.09091,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,889,        return dot;,6,0,0,0,0,1,0,0,0,7,11,3,0.09091,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1287,        if (data.length != n) {,6,1,0,1,3,0,0,0,0,7,23,4,0.09091,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1292,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,282,"        return getBasicRow(col, false);",0,0,0,1,2,1,4,0,0,5,31,5,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,340,      double[] coefficients = new double[getOriginalNumDecisionVariables()];,4,0,0,3,6,0,4,0,0,8,70,5,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,341,      Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset());,2,0,0,2,4,0,4,2,0,8,90,4,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,342,"      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());",4,1,0,2,4,0,6,0,0,13,102,5,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,343,      Set<Integer> basicRows = new HashSet<Integer>();,2,0,0,1,2,0,0,8,0,10,48,4,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,344,      for (int i = 0; i < coefficients.length; i++) {,0,0,0,1,3,0,0,0,0,4,47,4,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,345,          Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i);,4,1,0,2,4,0,4,2,0,11,74,6,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,346,          if (basicRows.contains(basicRow)) {,0,0,0,2,5,0,6,0,0,6,35,7,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,351,              basicRows.add(basicRow);,0,0,0,1,2,0,6,0,0,6,24,9,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,352,              coefficients[i] =,0,0,1,1,2,0,0,0,0,5,17,8,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,357,"        return new RealPointValuePair(coefficients, f.getValue(coefficients));",6,1,1,2,4,1,6,2,0,20,70,3,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,433,        return getNumObjectiveFunctions() + numDecisionVariables;,0,0,0,1,2,1,0,0,0,4,57,4,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,458,      return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();,0,1,0,2,4,1,4,0,0,5,70,4,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,481,        return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;,16,4,0,0,0,1,0,0,0,21,79,3,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,82,48,"    public RealPointValuePair(final double[] point, final double value) {",0,0,0,2,5,0,0,0,0,7,69,4,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,82,49,        this.point = point.clone();,0,0,0,1,2,0,0,0,0,3,27,4,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,82,50,        this.value  = value;,4,0,0,0,0,0,0,0,0,5,20,4,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,82,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,82,86,        return value;,2,0,0,0,0,1,0,0,0,2,13,4,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,82,92,        return coefficients.dotProduct(point) + constantTerm;,2,1,0,1,2,1,6,0,0,9,53,4,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,155,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,193,        return tableau.getSolution();,0,0,0,1,2,1,4,0,0,4,29,5,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,81,"        this(new ArrayRealVector(coefficients), relationship, value);",6,0,0,2,4,0,0,2,0,8,61,4,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,82,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,296,"            } else if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {",2,0,0,3,8,0,12,0,0,16,63,3,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,307,        if (numArtificialVariables == 0) {,2,1,0,1,3,0,0,0,0,3,34,4,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,147,        if (tableau.getNumArtificialVariables() > 0) {,0,1,0,2,5,0,4,0,0,5,46,4,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,150,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,6,2,0,3,7,0,8,0,0,17,83,4,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,151,"            if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {",0,1,0,3,7,0,12,0,0,13,66,6,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,189,        tableau.discardArtificialVariables();,0,0,0,1,2,0,4,0,0,4,37,5,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,190,        while (!isOptimal(tableau)) {,0,0,0,2,5,0,4,0,0,5,29,4,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,349,              coefficients[i] = 0;,6,5,1,1,2,1,0,0,0,20,20,6,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,151,                return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,190,            doIteration(tableau);,0,0,0,1,2,0,4,0,0,4,21,7,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,179,    },10,1,0,0,1,0,0,0,0,12,1,5,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,297,                return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,884,        checkVectorDimensions(v.length);,2,1,0,1,2,0,8,0,0,13,32,10,0.1,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,885,        double dot = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.1,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,886,        for (int i = 0; i < data.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.1,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,887,            dot += data[i] * v[i];,0,0,0,2,4,0,0,0,0,6,22,4,0.1,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,889,        return dot;,2,0,0,0,0,1,0,0,0,2,11,4,0.1,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,1287,        if (data.length != n) {,6,1,0,1,3,0,0,0,0,7,23,4,0.1,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,1292,    },0,0,0,0,1,0,0,0,0,1,1,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,129,        if (tableau.getNumArtificialVariables() == 0) {,0,1,0,2,5,0,4,0,0,5,47,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,132,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,10,2,0,3,7,0,8,0,0,22,83,3,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,133,"            if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {",0,0,0,3,7,0,0,0,0,10,66,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,134,                return false;,6,2,1,0,0,1,0,0,0,10,13,6,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,137,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,154,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,171,        while (!isPhase1Solved(tableau)) {,10,1,0,2,5,0,4,0,0,17,34,3,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,172,            doIteration(tableau);,0,0,0,1,2,0,4,0,0,4,21,7,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,176,"        if (!MathUtils.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0, epsilon)) {",0,0,0,4,9,0,14,0,0,15,81,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,192,        return tableau.getSolution();,0,0,0,1,2,1,4,0,0,4,29,5,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,310,        int width = getWidth() - numArtificialVariables - 1;,4,1,0,1,2,0,2,0,0,7,52,5,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,311,        int height = getHeight() - 1;,4,1,0,1,2,0,2,0,0,7,29,5,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,312,        double[][] matrix = new double[height][width];,0,0,0,4,8,0,0,0,0,12,46,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,313,        for (int i = 0; i < height; i++) {,8,1,0,1,3,0,0,0,0,10,34,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,314,            for (int j = 0; j < width - 1; j++) {,8,2,0,1,3,0,0,0,0,11,37,6,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,315,"                matrix[i][j] = getEntry(i + 1, j + 1);",14,6,1,3,6,0,6,0,0,35,38,1,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,317,"            matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());",4,2,1,4,8,0,4,0,0,15,55,6,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,319,        this.tableau = new Array2DRowRealMatrix(matrix);,4,0,0,1,2,0,0,2,0,7,48,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,320,        this.numArtificialVariables = 0;,2,0,0,0,0,0,0,0,0,3,32,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,321,    },0,0,0,0,1,0,0,0,0,1,1,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,340,      double[] coefficients = new double[getOriginalNumDecisionVariables()];,0,0,0,3,6,0,0,0,0,9,70,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,341,      Integer negativeVarBasicRow = getBasicRow(getNegativeDecisionVariableOffset());,0,0,0,2,4,0,0,0,0,6,79,4,0.1,1,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,342,"      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());",4,1,0,2,4,0,6,0,0,13,102,5,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,343,      Set<Integer> basicRows = new HashSet<Integer>();,2,0,0,1,2,0,0,8,0,10,48,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,344,      for (int i = 0; i < coefficients.length; i++) {,12,1,0,1,3,0,0,0,0,14,47,3,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,345,          Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);,6,1,0,2,4,0,8,2,0,17,63,3,0.1,1,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,346,          if (basicRows.contains(basicRow)) {,0,0,0,2,5,0,0,0,0,7,35,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,351,              basicRows.add(basicRow);,0,0,0,1,2,0,6,0,0,6,24,9,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,352,              coefficients[i] =,0,0,1,1,2,0,0,0,0,5,17,8,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,357,"        return new RealPointValuePair(coefficients, f.getValue(coefficients));",0,0,0,2,4,1,0,0,0,7,70,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,458,      return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();,4,1,1,2,4,1,4,0,0,13,70,3,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,481,        return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;,6,1,0,0,0,1,0,0,0,7,79,5,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,83,48,"    public RealPointValuePair(final double[] point, final double value) {",8,1,0,2,5,3,0,0,0,12,69,2,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,83,49,        this.point = point.clone();,2,0,0,1,2,0,4,0,0,7,27,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,83,50,        this.value  = value;,4,0,0,0,0,0,0,0,0,5,20,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,83,51,    },8,2,0,0,1,0,0,0,0,10,1,10,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,83,86,        return value;,2,0,0,0,0,1,0,0,0,2,13,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,83,92,        return coefficients.dotProduct(point) + constantTerm;,4,1,1,1,2,2,6,0,0,16,53,3,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,146,        if (tableau.getNumArtificialVariables() > 0) {,0,1,0,2,5,0,4,0,0,5,46,4,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,149,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,8,2,0,3,7,0,8,2,0,21,83,3,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,150,"            if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {",0,1,0,3,7,0,12,0,0,13,66,6,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,188,        tableau.discardArtificialVariables();,0,0,0,1,2,0,4,0,0,4,37,5,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,189,        while (!isOptimal(tableau)) {,0,0,0,2,5,0,4,0,0,5,29,4,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,61,                                final boolean copyArray) {,2,0,0,0,2,1,0,0,0,3,26,3,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,62,        this.point = copyArray ? point.clone() : point;,6,0,0,1,2,0,4,0,0,11,47,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,63,        this.value  = value;,4,0,0,0,0,0,0,0,0,5,20,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,64,    },0,0,0,0,1,0,0,0,0,1,1,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,278,                    final double v1 = o1.getValue();,0,0,0,1,2,0,0,0,0,3,32,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,279,                    final double v2 = o2.getValue();,2,0,0,1,2,1,4,0,0,7,32,10,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,280,                    return (goalType == GoalType.MINIMIZE) ?,6,1,0,1,2,1,0,0,0,7,40,12,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,142,        final int n = steps.length;,14,4,0,0,0,1,0,0,0,20,27,3,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,143,        startConfiguration = new double[n][n];,0,0,0,2,4,0,0,0,0,6,38,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,144,        for (int i = 0; i < n; ++i) {,8,1,0,1,3,0,0,0,0,10,29,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,145,            final double[] vertexI = startConfiguration[i];,4,0,1,2,4,1,0,2,0,11,47,3,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,146,            for (int j = 0; j < i + 1; ++j) {,8,2,0,1,3,0,0,0,0,11,33,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,147,                if (steps[j] == 0.0) {,0,1,1,2,5,0,0,0,0,5,22,8,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,152,"                System.arraycopy(steps, 0, vertexI, 0, j + 1);",2,1,0,1,2,0,8,0,0,11,46,9,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,155,    },0,0,0,0,1,0,0,0,0,1,1,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,291,        RealPointValuePair[] previous = new RealPointValuePair[simplex.length];,0,0,0,2,4,0,0,0,0,6,71,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,294,            if (iterations > 0) {,2,1,0,1,3,0,0,0,0,3,21,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,306,"            System.arraycopy(simplex, 0, previous, 0, simplex.length);",0,0,0,1,2,0,0,0,0,3,58,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,307,            iterateSimplex(comparator);,2,1,0,1,2,0,4,0,0,7,27,3,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,319,        if (++iterations > maxIterations) {,4,1,0,1,3,0,0,0,0,6,35,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,322,    },2,1,0,0,1,0,0,0,0,3,1,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,401,"        Arrays.sort(simplex, comparator);",0,0,0,1,2,0,8,0,0,8,33,5,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,403,    },0,0,0,0,1,0,0,0,0,1,1,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,45,    public MultiDirectional() {,4,0,0,1,3,0,0,0,0,5,27,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,46,        this.khi   = 2.0;,2,0,0,0,0,0,0,0,0,3,17,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,47,        this.gamma = 0.5;,2,0,0,0,0,0,0,0,0,3,17,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,48,    },0,0,0,0,1,0,0,0,0,1,1,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,66,            incrementIterationsCounter();,0,0,0,1,2,0,2,0,0,2,29,7,2.0,1,1
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,69,            final RealPointValuePair[] original = simplex;,4,0,0,1,2,1,0,2,0,7,46,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,70,            final RealPointValuePair best = original[0];,2,0,1,1,2,1,0,2,0,7,44,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,73,"            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);",8,1,0,1,2,1,6,2,0,18,83,3,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,74,"            if (comparator.compare(reflected, best) < 0) {",0,1,0,2,5,0,8,0,0,9,46,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,89,"            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);",2,0,0,1,2,1,8,2,0,13,86,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,90,"            if (comparator.compare(contracted, best) < 0) {",0,1,0,2,5,0,8,0,0,9,47,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,97,        },2,0,0,0,1,0,0,0,0,3,1,6,2.0,1,1
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,115,        final double[] xSmallest = original[0].getPointRef();,8,1,1,3,6,2,8,0,0,21,53,1,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,116,        final int n = xSmallest.length;,6,0,0,0,0,1,0,0,0,7,31,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,119,        simplex = new RealPointValuePair[n + 1];,4,1,0,1,2,0,0,2,0,8,40,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,120,        simplex[0] = original[0];,0,0,1,2,4,0,0,0,0,5,25,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,121,        for (int i = 1; i <= n; ++i) {,14,2,0,1,3,1,0,0,0,18,30,3,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,122,            final double[] xOriginal    = original[i].getPointRef();,6,0,1,3,6,1,4,0,0,15,56,3,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,123,            final double[] xTransformed = new double[n];,2,0,1,2,4,1,0,0,0,5,44,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,124,            for (int j = 0; j < n; ++j) {,8,1,0,1,3,0,0,0,0,10,29,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,125,                xTransformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]);,2,3,1,5,10,0,0,0,0,22,71,8,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,127,"            simplex[i] = new RealPointValuePair(xTransformed, Double.NaN, false);",6,0,1,2,4,0,0,2,0,14,69,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,131,        evaluateSimplex(comparator);,0,0,0,1,2,0,8,0,0,8,28,5,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,132,        return simplex[0];,0,0,0,1,2,1,0,0,0,4,18,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,84,27,public enum GoalType implements Serializable {,2,0,0,0,1,1,0,2,0,5,46,1,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,84,30,"    MAXIMIZE,",2,0,0,0,0,0,0,0,0,2,9,2,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,84,33,    MINIMIZE,0,0,0,0,0,0,0,0,0,0,8,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,50,    public SimpleScalarValueChecker() {,0,0,0,1,3,0,0,0,0,4,35,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,51,        this.relativeThreshold = DEFAULT_RELATIVE_THRESHOLD;,10,0,0,0,0,1,0,0,0,14,52,2,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,52,        this.absoluteThreshold = DEFAULT_ABSOLUTE_THRESHOLD;,4,0,0,0,0,0,0,0,0,5,52,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,53,    },0,0,0,0,1,0,0,0,0,1,1,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,48,"    public RealPointValuePair(final double[] point, final double value) {",6,0,0,2,5,3,0,0,0,9,69,2,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,49,        this.point = point.clone();,2,0,0,1,2,0,4,0,0,7,27,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,50,        this.value  = value;,4,0,0,0,0,0,0,0,0,5,20,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,51,    },4,1,0,0,1,0,0,0,0,5,1,7,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,79,        return point;,2,0,0,0,0,1,0,0,0,2,13,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,86,        return value;,2,0,0,0,0,1,0,0,0,2,13,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,275,            new Comparator<RealPointValuePair>() {,6,0,0,1,3,0,0,4,0,11,38,3,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,116,    protected DirectSearchOptimizer() {,12,3,0,1,3,1,0,0,0,17,35,2,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,117,        setConvergenceChecker(new SimpleScalarValueChecker());,0,0,0,2,4,0,2,2,0,4,54,5,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,118,        setMaxIterations(Integer.MAX_VALUE);,4,0,0,1,2,0,2,0,0,6,36,5,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,119,        setMaxEvaluations(Integer.MAX_VALUE);,4,1,0,1,2,0,2,0,0,7,37,3,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,120,    },0,0,0,0,1,0,0,0,0,1,1,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,220,        this.maxIterations = maxIterations;,4,0,0,0,0,0,0,0,0,5,35,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,221,    },0,0,0,0,1,0,0,0,0,1,1,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,230,        this.maxEvaluations = maxEvaluations;,4,0,0,0,0,0,0,0,0,5,37,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,231,    },4,1,0,0,1,0,0,0,0,5,1,8,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,250,        this.checker = checker;,4,0,0,0,0,0,0,0,0,5,23,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,251,    },0,0,0,0,1,0,0,0,0,1,1,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,265,        if (startConfiguration == null) {,10,5,0,1,3,0,0,0,0,15,33,3,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,273,        this.f = f;,4,0,0,0,0,0,0,0,0,5,11,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,274,        final Comparator<RealPointValuePair> comparator =,0,0,0,0,0,0,0,0,0,0,49,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,286,        iterations  = 0;,2,0,0,0,0,0,0,0,0,3,16,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,287,        evaluations = 0;,2,0,0,0,0,0,0,0,0,3,16,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,288,        buildSimplex(startPoint);,2,0,1,1,2,1,4,0,0,11,25,3,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,289,        evaluateSimplex(comparator);,0,0,0,1,2,0,4,0,0,4,28,5,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,345,        if (++evaluations > maxEvaluations) {,4,1,0,1,3,0,0,0,0,6,37,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,349,        return f.value(x);,0,0,0,1,2,1,0,0,0,4,18,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,360,        final int n = startPoint.length;,6,0,0,0,0,1,0,0,0,7,32,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,361,        if (n != startConfiguration.length) {,6,1,0,1,3,0,0,0,0,7,37,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,368,        simplex = new RealPointValuePair[n + 1];,4,1,0,1,2,0,0,2,0,8,40,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,369,"        simplex[0] = new RealPointValuePair(startPoint, Double.NaN);",8,0,1,2,4,0,0,2,0,14,60,0,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,372,        for (int i = 0; i < n; ++i) {,8,1,0,1,3,0,0,0,0,10,29,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,373,            final double[] confI   = startConfiguration[i];,2,0,1,2,4,1,0,2,0,10,47,3,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,374,            final double[] vertexI = new double[n];,2,0,1,2,4,1,0,0,0,5,39,6,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,375,            for (int k = 0; k < n; ++k) {,10,2,0,1,3,0,4,0,0,18,29,5,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,376,                vertexI[k] = startPoint[k] + confI[k];,0,1,1,3,6,0,0,0,0,14,38,8,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,378,"            simplex[i + 1] = new RealPointValuePair(vertexI, Double.NaN);",8,1,1,2,4,0,0,2,0,14,61,6,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,381,    },2,0,0,0,1,0,0,0,0,2,1,6,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,392,        for (int i = 0; i < simplex.length; ++i) {,10,1,0,1,3,0,0,0,0,12,42,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,393,            final RealPointValuePair vertex = simplex[i];,2,0,1,1,2,1,0,2,0,9,45,6,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,394,            final double[] point = vertex.getPointRef();,2,0,0,2,4,1,4,0,0,7,44,6,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,395,            if (Double.isNaN(vertex.getValue())) {,0,0,0,3,7,0,0,0,0,10,38,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,396,"                simplex[i] = new RealPointValuePair(point, evaluate(point), false);",2,0,1,3,6,0,4,2,0,14,67,8,1.33333,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,84,43,"        super(""Maximal number of iterations ({0}) exceeded"", maxIterations);",2,0,0,3,6,0,0,0,0,3,68,4,1.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,84,44,        this.maxIterations = maxIterations;,0,0,0,0,0,0,0,0,0,0,35,4,1.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,84,45,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,84,45,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,84,46,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,84,53,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,84,54,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,84,166,"        return buildMessage(locale, pattern, arguments);",4,1,1,1,2,1,8,0,0,15,48,3,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,84,172,        return getMessage(Locale.getDefault());,6,1,1,2,4,1,6,0,0,16,39,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,70,        return point.clone();,0,0,0,1,2,1,4,0,0,4,21,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,320,            throw new OptimizationException(new MaxIterationsExceededException(maxIterations));,2,0,0,2,4,0,0,4,0,6,83,7,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/OptimizationException,84,50,        super(cause);,0,0,0,1,2,0,0,0,0,3,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/OptimizationException,84,51,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,84,106,"      super(buildMessage(Locale.US, pattern, arguments));",4,0,0,2,4,0,6,0,0,10,51,5,0.5,0,0
defect4j,math,org/apache/commons/math/MathException,84,107,      this.pattern   = pattern;,4,0,0,0,0,0,0,0,0,5,25,4,0.5,0,0
defect4j,math,org/apache/commons/math/MathException,84,108,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,0,0,0,3,6,0,0,0,0,9,73,4,0.5,0,0
defect4j,math,org/apache/commons/math/MathException,84,109,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math/MathException,84,119,        super(rootCause);,4,0,0,1,2,3,0,0,0,7,17,1,0.5,0,0
defect4j,math,org/apache/commons/math/MathException,84,120,        this.pattern   = getMessage();,2,0,0,1,2,0,2,0,0,5,30,4,0.5,0,0
defect4j,math,org/apache/commons/math/MathException,84,121,        this.arguments = new Object[0];,2,0,0,1,2,0,0,2,0,5,31,4,0.5,0,0
defect4j,math,org/apache/commons/math/MathException,84,122,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math/MathException,84,60,            ResourceBundle bundle =,2,0,0,0,0,0,0,2,0,4,23,6,0.5,0,0
defect4j,math,org/apache/commons/math/MathException,84,67,        } catch (MissingResourceException mre) {,2,0,0,1,4,0,0,2,0,4,40,6,0.5,0,0
defect4j,math,org/apache/commons/math/MathException,84,73,        return s;,4,1,0,0,0,1,0,0,0,5,9,3,0.5,0,0
defect4j,math,org/apache/commons/math/MathException,84,85,"        return (pattern == null) ? """" : new MessageFormat(translate(pattern, locale), locale).format(arguments);        ",4,1,0,4,8,1,14,2,0,25,104,3,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,65,                                 final double absoluteThreshold) {,2,0,0,0,2,1,0,0,0,3,33,3,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,66,        this.relativeThreshold = relativeThreshold;,8,0,0,0,0,0,0,0,0,10,43,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,67,        this.absoluteThreshold = absoluteThreshold;,6,1,0,0,0,1,0,0,0,9,43,3,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,68,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,74,        final double p          = previous.getValue();,2,0,0,1,2,1,4,0,0,7,46,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,75,        final double c          = current.getValue();,2,0,0,1,2,1,4,0,0,7,45,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,76,        final double difference = Math.abs(p - c);,6,1,0,1,2,1,4,0,0,12,42,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,77,"        final double size       = Math.max(Math.abs(p), Math.abs(c));",2,0,0,3,6,1,16,0,0,19,61,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,78,        return (difference <= (size * relativeThreshold)) || (difference <= absoluteThreshold);,10,4,0,3,6,1,0,0,0,14,87,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,245,        return evaluations;,2,0,0,0,0,1,0,0,0,2,19,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,268,            final double[] unit = new double[startPoint.length];,0,0,0,2,4,0,0,0,0,6,52,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,269,"            Arrays.fill(unit, 1.0);",0,0,0,1,2,0,6,0,0,6,23,7,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,270,            setStartConfiguration(unit);,0,0,0,1,2,0,4,0,0,4,28,7,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,295,                boolean converged = true;,0,0,0,0,0,0,0,0,0,0,25,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,296,                for (int i = 0; i < simplex.length; ++i) {,12,1,0,1,3,0,0,0,0,15,42,0,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,297,"                    converged &= checker.converged(iterations, previous[i], simplex[i]);",2,0,1,3,6,0,6,0,0,17,68,10,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,299,                if (converged) {,0,0,0,1,3,0,0,0,0,4,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,301,                    return simplex[0];,0,0,1,1,2,1,0,0,0,2,18,11,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,77,                final RealPointValuePair[] reflectedSimplex = simplex;,4,0,0,1,2,1,0,2,0,7,54,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,78,"                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);",4,1,1,1,2,2,8,2,0,25,82,3,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,79,"                if (comparator.compare(reflected, expanded) <= 0) {",0,1,0,2,5,0,8,0,0,9,51,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,81,                    simplex = reflectedSimplex;,4,0,0,0,0,0,0,0,0,5,27,10,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,84,                return;,0,0,0,0,0,1,0,0,0,1,7,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,94,                return;,0,0,0,0,0,1,0,0,0,1,7,4,0.33333,1,1
defect4j,math,org/apache/commons/math/MathException,85,106,"      super(buildMessage(Locale.US, pattern, arguments));",4,0,0,2,4,0,6,0,0,10,51,5,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,85,107,      this.pattern   = pattern;,4,0,0,0,0,0,0,0,0,5,25,4,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,85,108,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,4,1,0,3,6,0,4,2,0,12,73,4,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,85,109,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,85,60,            ResourceBundle bundle =,2,0,0,0,0,0,0,2,0,4,23,6,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,85,67,        } catch (MissingResourceException mre) {,2,0,0,1,4,0,0,2,0,4,40,6,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,85,73,        return s;,2,0,0,0,0,1,0,0,0,2,9,4,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,85,85,"        return (pattern == null) ? """" : new MessageFormat(translate(pattern, locale), locale).format(arguments);        ",4,1,0,4,8,1,10,2,0,20,104,5,1.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,85,43,"        super(""Maximal number of iterations ({0}) exceeded"", maxIterations);",2,0,0,3,6,0,0,0,0,3,68,4,1.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,85,44,        this.maxIterations = maxIterations;,4,0,0,0,0,0,0,0,0,5,35,4,1.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,85,45,    },2,0,0,0,1,0,0,0,0,2,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,85,45,"        super(pattern, arguments);",4,1,0,1,2,0,22,0,0,27,26,3,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,85,46,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,128,        } catch (MaxIterationsExceededException ex) {,0,0,0,1,4,0,0,0,0,5,45,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,129,            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38,6,3,0,2,5,0,0,0,0,9,65,7,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,131,            } else if (x > (mean + 20 * standardDeviation)) {,6,3,0,2,6,0,0,0,0,9,49,8,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,132,                return 1.0d;,0,0,0,0,0,1,0,0,0,1,12,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,178,        if (p < .5) {,2,1,0,1,3,0,0,0,0,3,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,181,            ret = getMean();,2,0,0,1,2,0,2,0,0,5,16,6,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,184,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,200,        if (p < .5) {,2,1,0,1,3,0,0,0,0,3,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,203,            ret = Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,7,23,6,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,206,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,221,        if (p < .5) {,2,1,0,1,3,0,0,0,0,3,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,223,        } else if (p > .5) {,2,1,0,1,4,0,0,0,0,3,20,5,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,224,            ret = getMean() + getStandardDeviation();,2,1,0,2,4,0,4,0,0,8,41,7,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,229,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,85,181,                throw new MaxIterationsExceededException(maxIterations);,2,0,0,1,2,0,0,2,0,4,56,11,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,162,        return super.inverseCumulativeProbability(p);,6,0,0,1,2,1,0,0,0,6,45,4,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,156,        if (p == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.33333,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,159,        if (p == 1) {,2,1,0,1,3,0,0,0,0,3,13,4,0.33333,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,72,        return mean;,2,0,0,0,0,1,0,0,0,2,12,4,0.16667,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,88,        return standardDeviation;,8,1,0,0,0,1,0,0,0,10,25,3,0.16667,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,126,            return 0.5 * (1.0 + Erf.erf((x - mean) /,4,4,0,1,4,1,4,0,0,12,40,6,0.14286,0,0
defect4j,math,org/apache/commons/math/special/Erf,85,51,"        double ret = Gamma.regularizedGammaP(0.5, x * x, 1.0e-15, 10000);",6,1,0,1,2,0,4,0,0,11,65,5,0.14286,0,0
defect4j,math,org/apache/commons/math/special/Erf,85,52,        if (x < 0) {,8,2,0,1,3,0,4,0,0,15,12,4,0.14286,0,0
defect4j,math,org/apache/commons/math/special/Erf,85,55,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.14286,0,0
defect4j,math,org/apache/commons/math/special/Gamma,85,162,            ret = 0.0;,2,0,0,0,0,0,0,0,0,3,10,7,0.14286,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,991,        final int nRows = getRowDimension();,0,0,0,1,2,0,0,0,0,3,36,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,992,        final int nCols = getColumnDimension();,8,0,0,1,2,1,2,0,0,11,39,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,993,        final StringBuffer res = new StringBuffer();,0,0,0,1,2,0,6,0,0,6,44,9,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,994,        String fullClassName = getClass().getName();,2,0,0,2,4,0,4,2,0,8,44,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,995,        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);,2,1,0,2,4,0,8,2,0,14,84,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,996,"        res.append(shortClassName).append(""{"");",0,0,0,2,5,0,8,0,0,9,39,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,998,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,999,            if (i > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1000,"                res.append("","");",0,0,0,1,2,0,4,0,0,5,16,9,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1002,"            res.append(""{"");",2,0,0,1,3,0,4,2,0,9,16,2,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1003,            for (int j = 0; j < nCols; ++j) {,8,1,0,1,3,0,0,0,0,10,33,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1004,                if (j > 0) {,2,1,0,1,3,0,0,0,0,3,12,8,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1005,"                    res.append("","");",0,0,0,1,2,0,0,0,0,3,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1007,"                res.append(getEntry(i, j));",0,0,0,2,4,0,10,0,0,10,27,9,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1009,"            res.append(""}"");",0,0,0,1,3,0,4,0,0,5,16,7,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1012,"        res.append(""}"");",0,0,0,1,3,0,4,0,0,5,16,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1013,        return res.toString();,0,0,0,1,2,1,4,0,0,4,22,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,86,627,        if (left.getColumnDimension() != right.getRowDimension()) {,0,0,0,3,7,0,0,0,0,10,59,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,86,633,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,492,            return multiply((DenseRealMatrix) m);,2,0,0,2,4,1,2,2,0,6,37,7,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,555,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0,0,0,1,2,0,6,0,0,6,51,5,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,557,"        final DenseRealMatrix out = new DenseRealMatrix(rows, m.columns);",8,0,0,1,2,1,8,4,0,21,65,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,560,        int blockIndex = 0;,4,1,0,0,0,0,0,0,0,5,19,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,561,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,10,1,0,1,3,0,0,0,0,12,56,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,563,            final int pStart = iBlock * BLOCK_SIZE;,0,0,0,0,0,0,0,0,0,0,39,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,564,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0,0,0,1,2,0,0,0,0,3,55,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,566,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,10,1,0,1,3,0,0,0,0,12,59,6,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,567,                final int jWidth = out.blockWidth(jBlock);,0,0,0,1,2,0,0,0,0,3,42,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,568,                final int jWidth2 = jWidth  + jWidth;,6,1,0,0,0,1,0,0,0,8,37,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,569,                final int jWidth3 = jWidth2 + jWidth;,6,1,0,0,0,1,0,0,0,8,37,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,570,                final int jWidth4 = jWidth3 + jWidth;,8,1,0,0,0,1,0,0,0,10,37,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,573,                final double[] outBlock = out.blocks[blockIndex];,6,0,1,2,4,1,0,0,0,9,49,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,576,                for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,8,1,0,1,3,0,0,0,0,10,55,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,577,                    final int kWidth = blockWidth(kBlock);,2,0,0,1,2,1,4,0,0,7,38,10,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,578,                    final double[] tBlock = blocks[iBlock * blockColumns + kBlock];,8,2,1,2,4,1,0,0,0,13,63,10,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,579,                    final double[] mBlock = m.blocks[kBlock * m.blockColumns + jBlock];,20,2,0,2,4,4,4,0,0,30,67,1,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,580,"                    for (int p = pStart, k = 0; p < pEnd; ++p) {",0,0,0,1,3,0,0,0,0,4,44,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,581,                        final int lStart = (p - pStart) * kWidth;,0,0,0,1,2,0,0,0,0,3,41,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,582,                        final int lEnd   = lStart + kWidth;,0,0,0,0,0,0,0,0,0,0,35,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,583,                        for (int nStart = 0; nStart < jWidth; ++nStart) {,0,0,0,1,3,0,0,0,0,4,49,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,584,                            double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,15,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,585,                            int l = lStart;,4,0,0,0,0,0,0,0,0,4,15,15,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,586,                            int n = nStart;,4,0,0,0,0,0,0,0,0,4,15,15,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,587,                            while (l < lEnd - 3) {,0,0,0,1,3,0,0,0,0,4,22,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,588,                                sum += tBlock[l] * mBlock[n] +,0,0,0,2,4,0,0,0,0,6,30,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,592,                                l += 4;,2,0,0,0,0,0,0,0,0,3,7,16,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,593,                                n += jWidth4;,4,0,0,0,0,0,0,0,0,5,13,16,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,595,                            while (l < lEnd) {,0,0,0,1,3,0,0,0,0,4,18,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,596,                                sum += tBlock[l++] * mBlock[n];,0,0,0,2,4,0,0,0,0,6,31,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,597,                                n += jWidth;,6,0,0,0,0,0,0,0,0,7,12,2,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,599,                            outBlock[k++] += sum;,0,0,0,1,2,0,0,0,0,3,21,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,605,                ++blockIndex;,0,0,0,0,0,0,0,0,0,0,13,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,610,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,76,    },0,0,0,0,1,0,8,0,0,8,1,7,0.5,1,1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,132,        for (int i = 0; i < order; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,134,            final double[] ltI = lTData[i];,2,0,1,2,4,1,0,0,0,7,31,6,0.5,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,138,            ltI[i] = Math.sqrt(ltI[i]);,6,1,0,3,6,0,0,0,0,8,27,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,139,            final double inverse = 1.0 / ltI[i];,0,0,1,1,2,0,0,0,0,5,36,6,0.5,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,141,            for (int q = order - 1; q > i; --q) {,10,2,0,1,3,0,0,0,0,13,37,6,0.5,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,142,                ltI[q] *= inverse;,0,0,0,1,2,0,0,0,0,3,18,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,143,                final double[] ltQ = lTData[q];,2,0,1,2,4,1,0,0,0,7,31,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,144,                for (int p = q; p < order; ++p) {,10,1,0,1,3,0,0,0,0,12,33,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,145,                    ltQ[p] -= ltI[q] * ltI[p];,0,1,1,3,6,0,0,0,0,14,26,10,0.5,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,151,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,618,        final double[][] data = new double[getRowDimension()][getColumnDimension()];,2,0,0,6,12,1,4,0,0,7,76,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,619,        final int lastColumns = columns - (blockColumns - 1) * BLOCK_SIZE;,10,3,1,1,2,1,0,2,0,21,66,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,621,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,8,1,0,1,3,0,0,0,0,10,52,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,622,            final int pStart = iBlock * BLOCK_SIZE;,6,1,0,0,0,1,8,0,0,16,39,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,623,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",6,1,0,1,2,1,6,0,0,14,55,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,624,            int regularPos   = 0;,0,0,0,0,0,0,0,0,0,0,21,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,625,            int lastPos      = 0;,0,0,0,0,0,0,0,0,0,0,21,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,626,            for (int p = pStart; p < pEnd; ++p) {,10,1,0,1,3,0,0,0,0,12,37,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,627,                final double[] dataP = data[p];,2,0,1,2,4,1,0,0,0,7,31,8,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,628,                int blockIndex = iBlock * blockColumns;,8,1,0,0,0,1,0,0,0,10,39,2,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,629,                int dataPos    = 0;,4,0,0,0,0,0,0,0,0,5,19,10,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,630,                for (int jBlock = 0; jBlock < blockColumns - 1; ++jBlock) {,8,2,0,1,3,0,0,0,0,11,59,8,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,634,"                System.arraycopy(blocks[blockIndex], lastPos, dataP, dataPos, lastColumns);",0,0,0,2,4,0,0,0,0,6,75,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,635,                regularPos += BLOCK_SIZE;,4,0,0,0,0,0,0,0,0,5,25,8,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,636,                lastPos    += lastColumns;,4,0,0,0,0,0,0,0,0,5,26,8,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,640,        return data;,6,1,0,0,0,1,0,0,0,7,12,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,104,        final int order = matrix.getRowDimension();,4,1,0,1,2,1,12,0,0,19,43,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,105,        lTData   = matrix.getData();,2,0,0,1,2,0,4,0,0,7,28,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,106,        cachedL  = null;,0,0,0,0,0,0,0,0,0,0,16,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,107,        cachedLT = null;,4,0,0,0,0,1,0,0,0,6,16,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,110,        for (int i = 0; i < order; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,112,            final double[] lI = lTData[i];,0,0,0,2,4,0,0,0,0,6,30,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,114,            if (lTData[i][i] < absolutePositivityThreshold) {,2,1,1,3,7,0,0,0,0,9,49,6,0.44444,1,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,118,            for (int j = i + 1; j < order; ++j) {,24,2,0,1,3,0,8,0,0,36,37,2,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,119,                final double[] lJ = lTData[j];,2,0,1,2,4,1,0,0,0,7,30,8,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,120,                final double lIJ = lI[j];,10,0,1,1,2,5,0,0,0,19,25,1,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,121,                final double lJI = lJ[i];,2,0,1,1,2,1,0,0,0,7,25,8,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,122,                final double maxDelta =,0,0,0,0,0,0,0,0,0,0,23,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,124,                if (Math.abs(lIJ - lJI) > maxDelta) {,0,0,0,2,5,0,0,0,0,7,37,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,127,                lJ[i] = 0;,0,0,0,1,2,0,0,0,0,3,10,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,86,88,        return new DenseRealMatrix(data);,0,0,0,1,2,1,0,0,0,4,33,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,126,"        this(rawData.length, rawData[0].length, toBlocksLayout(rawData), false);",6,0,1,3,6,0,4,0,0,13,72,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,127,    },2,2,0,0,1,0,0,0,0,4,1,5,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,148,"        super(rows, columns);",4,0,0,1,2,0,0,0,0,4,21,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,149,        this.rows    = rows;,4,0,0,0,0,0,0,0,0,5,20,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,150,        this.columns = columns;,4,0,0,0,0,0,0,0,0,5,23,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,153,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,8,3,0,1,2,0,0,0,0,12,55,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,154,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0,0,0,1,2,0,6,0,0,6,55,9,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,156,        if (copyArray) {,0,0,0,1,3,0,0,0,0,4,16,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,161,            blocks = blockData;,4,0,0,0,0,0,0,0,0,5,19,6,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,164,        int index = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,165,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,8,1,0,1,3,0,0,0,0,10,52,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,166,            final int iHeight = blockHeight(iBlock);,2,0,1,1,2,0,0,0,0,10,40,1,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,167,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++index) {",0,0,0,1,3,0,0,0,0,4,64,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,168,                if (blockData[index].length != iHeight * blockWidth(jBlock)) {,6,2,0,3,7,0,0,0,0,8,62,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,173,                if (copyArray) {,2,0,0,1,3,0,0,0,0,2,16,8,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,179,    },0,0,0,0,1,0,0,0,0,1,1,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,206,        final int rows         = rawData.length;,0,0,0,0,0,0,0,0,0,0,40,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,207,        final int columns      = rawData[0].length;,0,0,0,1,2,0,0,0,0,3,43,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,208,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,14,3,0,1,2,1,0,0,0,19,65,3,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,209,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,8,3,0,1,2,1,0,0,0,12,65,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,212,        for (int i = 0; i < rawData.length; ++i) {,0,0,0,1,3,0,0,0,0,4,42,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,213,            final int length = rawData[i].length;,0,0,0,1,2,0,0,0,0,3,37,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,214,            if (length != columns) {,0,0,0,1,3,0,0,0,0,4,24,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,222,        final double[][] blocks = new double[blockRows * blockColumns][];,0,0,0,4,8,0,0,0,0,12,65,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,223,"        for (int iBlock = 0, blockIndex = 0; iBlock < blockRows; ++iBlock) {",10,1,0,1,3,0,0,2,0,15,68,3,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,224,            final int pStart  = iBlock * BLOCK_SIZE;,6,1,0,0,0,1,0,0,0,8,40,6,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,225,"            final int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);",10,1,0,1,2,4,12,0,0,28,56,1,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,226,            final int iHeight = pEnd - pStart;,0,0,0,0,0,0,0,0,0,0,34,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,227,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++blockIndex) {",10,1,0,1,3,0,0,0,0,13,69,6,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,228,                final int qStart = jBlock * BLOCK_SIZE;,6,1,0,0,0,1,0,0,0,8,39,8,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,229,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0,0,0,1,2,0,0,0,0,3,58,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,230,                final int jWidth = qEnd - qStart;,16,2,0,0,0,3,8,0,0,30,33,3,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,233,                final double[] block = new double[iHeight * jWidth];,0,0,0,2,4,0,0,0,0,6,52,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,234,                blocks[blockIndex] = block;,0,0,0,1,2,0,0,0,0,3,27,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,237,"                for (int p = pStart, index = 0; p < pEnd; ++p, index += jWidth) {",18,1,0,1,3,0,0,0,0,22,65,0,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,238,"                    System.arraycopy(rawData[p], qStart, block, index, jWidth);",0,0,0,2,4,0,0,0,0,6,59,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,244,        return blocks;,2,0,0,0,0,1,0,0,0,2,14,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,1317,        return rows;,2,0,0,0,0,1,0,0,0,2,12,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,1323,        return columns;,2,0,0,0,0,1,0,0,0,2,15,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,1626,        return (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;,12,4,0,1,2,1,0,0,0,16,79,5,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,1635,        return (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;,0,0,0,1,2,1,0,0,0,4,91,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,55,        throws IllegalArgumentException {,4,0,0,0,1,0,0,0,0,5,33,2,0.4,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,56,        if (rowDimension <= 0 ) {,2,1,0,1,3,0,0,0,0,3,25,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,61,        if (columnDimension <= 0) {,2,1,0,1,3,0,0,0,0,3,27,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,66,        lu = null;,2,0,0,0,0,0,0,0,0,3,10,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,67,    },0,0,0,0,1,0,0,0,0,1,1,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,639,        return (getColumnDimension() == getRowDimension());,0,1,0,3,6,1,4,0,0,5,51,5,0.4,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,74,"        this(matrix, DEFAULT_RELATIVE_SYMMETRY_THRESHOLD,",4,0,0,0,1,0,0,0,0,4,49,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,97,"               NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {",4,0,0,0,1,0,0,0,0,4,65,2,0.4,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,99,        if (!matrix.isSquare()) {,0,0,0,2,5,0,4,0,0,5,25,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,1214,            final int iBlock = row    / BLOCK_SIZE;,6,1,0,0,0,1,6,0,0,14,39,3,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,1215,            final int jBlock = column / BLOCK_SIZE;,6,1,0,0,0,1,0,0,0,8,39,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,1216,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,14,6,0,2,4,0,4,0,0,24,72,3,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,1218,            return blocks[iBlock * blockColumns + jBlock][k];,0,0,0,2,4,1,0,0,0,7,49,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,291,            return;,0,0,0,0,0,1,12,0,0,13,7,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,168,            return;,0,0,0,0,0,1,0,0,0,1,7,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,151,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.16667,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,190,            doIteration(tableau);,0,0,0,1,2,0,4,0,0,4,21,7,0.16667,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,87,70,        return point.clone();,2,0,0,1,2,1,4,0,0,6,21,3,0.14286,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,884,        checkVectorDimensions(v.length);,4,0,0,1,2,0,2,0,0,6,32,5,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,885,        double dot = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,886,        for (int i = 0; i < data.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,887,            dot += data[i] * v[i];,2,1,1,2,4,0,0,0,0,12,22,6,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,889,        return dot;,2,0,0,0,0,1,0,0,0,2,11,4,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,1287,        if (data.length != n) {,0,0,0,1,3,0,0,0,0,4,23,4,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,1292,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,325,        double[] coefficients = new double[getOriginalNumDecisionVariables()];,4,0,0,3,6,3,2,0,0,9,70,1,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,326,        Integer basicRow =,2,0,0,0,0,0,0,2,0,4,18,4,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,328,"        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());",10,1,0,2,4,0,6,0,0,21,80,1,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,329,        Set<Integer> basicRows = new HashSet<Integer>();,12,1,0,1,2,0,0,8,0,22,48,3,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,330,        for (int i = 0; i < coefficients.length; i++) {,10,1,0,1,3,0,0,0,0,12,47,4,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,331,            basicRow = getBasicRow(getNumObjectiveFunctions() + i);,6,2,0,2,4,0,4,0,0,13,55,3,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,332,            if (basicRows.contains(basicRow)) {,0,0,0,2,5,0,6,0,0,6,35,7,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,337,                basicRows.add(basicRow);,0,0,0,1,2,0,6,0,0,6,24,9,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,338,                coefficients[i] =,0,0,1,1,2,0,0,0,0,5,17,8,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,343,"        return new RealPointValuePair(coefficients, f.getValue(coefficients));",0,0,0,2,4,1,0,0,0,7,70,4,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,458,        return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;,6,1,0,0,0,1,0,0,0,7,79,5,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,87,48,"    public RealPointValuePair(final double[] point, final double value) {",6,0,0,2,5,3,0,0,0,9,69,2,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,87,49,        this.point = point.clone();,2,0,0,1,2,0,4,0,0,7,27,4,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,87,50,        this.value  = value;,4,0,0,0,0,0,0,0,0,5,20,4,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,87,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,87,92,        return coefficients.dotProduct(point) + constantTerm;,2,1,0,1,2,1,6,0,0,9,53,4,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,154,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,192,        return tableau.getSolution();,0,0,0,1,2,1,4,0,0,4,29,5,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,146,        if (tableau.getNumArtificialVariables() > 0) {,0,1,0,2,5,0,4,0,0,5,46,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,149,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,6,2,0,3,7,0,8,0,0,17,83,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,150,"            if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {",0,1,0,3,7,0,12,0,0,13,66,6,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,188,        tableau.discardArtificialVariables();,0,0,0,1,2,0,4,0,0,4,37,5,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,189,        while (!isOptimal(tableau)) {,0,0,0,2,5,0,4,0,0,5,29,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,339,                         coefficients[i] = 0;,0,0,1,1,2,0,0,0,0,5,20,12,0.5,1,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,172,                        matrix[row][getSlackVariableOffset() + slackVar++] = -1; // excess,4,1,1,3,6,0,2,0,0,15,66,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,70,        return point.clone();,0,0,0,1,2,1,4,0,0,4,21,5,0.16667,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,279,                    return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.14286,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,884,        checkVectorDimensions(v.length);,4,0,0,1,2,0,2,0,0,6,32,5,0.125,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,885,        double dot = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.125,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,886,        for (int i = 0; i < data.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.125,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,887,            dot += data[i] * v[i];,2,1,1,2,4,0,0,0,0,12,22,6,0.125,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,889,        return dot;,2,0,0,0,0,1,0,0,0,2,11,4,0.125,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,1287,        if (data.length != n) {,6,1,0,1,3,0,0,0,0,7,23,4,0.125,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,1292,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,154,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,179,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,192,        return tableau.getSolution();,2,0,0,1,2,1,12,2,0,16,29,3,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,48,"    public RealPointValuePair(final double[] point, final double value) {",6,0,0,2,5,3,0,0,0,9,69,2,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,49,        this.point = point.clone();,2,0,0,1,2,0,4,0,0,7,27,4,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,50,        this.value  = value;,4,0,0,0,0,0,0,0,0,5,20,4,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,325,        double[] coefficients = new double[getOriginalNumDecisionVariables()];,0,0,0,3,6,0,0,0,0,9,70,4,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,326,        Integer basicRow =,2,0,0,0,0,0,12,2,0,16,18,3,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,328,"        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());",4,1,0,2,4,0,6,0,0,13,80,5,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,329,        for (int i = 0; i < coefficients.length; i++) {,10,1,0,1,3,0,0,0,0,12,47,4,0.125,1,1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,330,            basicRow = getBasicRow(getNumObjectiveFunctions() + i);,4,1,0,2,4,0,4,0,0,10,55,6,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,333,                coefficients[i] =,2,0,1,1,2,3,0,4,0,14,17,1,0.125,1,1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,336,            if (basicRow != null) {,0,0,0,1,3,0,0,0,0,4,23,4,0.125,1,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,337,                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {,8,2,0,3,7,0,4,0,0,15,83,8,0.125,1,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,338,"                    if (tableau.getEntry(basicRow, j) == 1) {",4,2,0,2,5,0,8,0,0,14,41,3,0.125,1,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,344,"        return new RealPointValuePair(coefficients, f.getValue(coefficients));",6,3,0,2,4,1,16,2,0,27,70,3,0.125,1,1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,459,        return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;,0,0,0,0,0,1,0,0,0,1,79,4,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,88,92,        return coefficients.dotProduct(point) + constantTerm;,6,4,0,1,2,1,8,0,0,18,53,11,0.125,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,110,            addValue((Comparable<?>) v);            ,0,0,0,2,4,0,0,0,0,6,28,4,1.0,1,1
defect4j,math,org/apache/commons/math/stat/Frequency,89,57,    public Frequency() {,2,0,0,1,3,1,0,0,0,3,20,2,0.16667,1,1
defect4j,math,org/apache/commons/math/stat/Frequency,89,58,        freqTable = new TreeMap();,2,0,0,1,2,0,0,2,0,5,26,4,0.16667,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,59,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,468,"    private static class NaturalComparator implements Comparator, Serializable {",2,0,0,0,1,2,0,4,0,8,76,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,487,            return ((Comparable)o1).compareTo(o2);,2,0,0,3,6,1,4,2,0,8,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,66,    public Frequency(Comparator comparator) {,4,0,0,1,3,1,0,2,0,7,41,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,67,        freqTable = new TreeMap(comparator);,4,0,0,1,2,0,0,2,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,68,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,78,        NumberFormat nf = NumberFormat.getPercentInstance();,2,0,0,1,2,0,4,2,0,8,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,79,        StringBuffer outBuffer = new StringBuffer();,4,0,1,1,2,0,0,4,0,13,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,80,"        outBuffer.append(""Value \t Freq. \t Pct. \t Cum Pct. \n"");",8,4,0,1,2,1,4,0,0,18,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,81,        Iterator iter = freqTable.keySet().iterator();,2,0,0,2,4,0,6,2,0,10,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,82,        while (iter.hasNext()) {,4,0,0,2,5,2,0,0,0,6,24,1,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,83,            Object value = iter.next();,2,0,0,1,2,0,4,2,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,84,            outBuffer.append(value);,4,0,0,1,2,0,6,2,0,13,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,85,            outBuffer.append('\t');,0,0,0,1,2,0,4,0,0,5,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,86,            outBuffer.append(getCount(value));,0,0,0,2,4,0,8,0,0,8,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,87,            outBuffer.append('\t');,0,0,0,1,2,0,4,0,0,5,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,88,            outBuffer.append(nf.format(getPct(value)));,0,0,0,3,6,0,12,0,0,12,43,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,89,            outBuffer.append('\t');,0,0,0,1,2,0,4,0,0,5,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,90,            outBuffer.append(nf.format(getCumPct(value)));,2,0,0,3,6,0,12,0,0,15,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,91,            outBuffer.append('\n');,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,92,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,93,        return outBuffer.toString();,0,0,0,1,2,1,4,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,111,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,124,        Object obj = v;,6,0,0,0,0,0,0,2,0,8,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,125,        if (v instanceof Integer) {,2,0,0,1,3,0,0,2,0,4,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,126,           obj = Long.valueOf(((Integer) v).longValue());,4,0,0,4,8,0,6,2,0,13,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,129,            Long count = (Long) freqTable.get(obj);,2,0,0,2,4,0,6,4,0,12,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,130,            if (count == null) {,2,1,0,1,3,0,0,0,0,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,131,"                freqTable.put(obj, Long.valueOf(1));",0,0,0,2,4,0,10,0,0,10,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,133,"                freqTable.put(obj, Long.valueOf(count.longValue() + 1));",0,1,0,3,6,0,14,0,0,15,56,9,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,138,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,135,        } catch (ClassCastException ex) {   ,2,0,0,1,4,0,0,2,0,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,137,"            throw new IllegalArgumentException(""Value not comparable to existing values."");",0,0,0,1,2,0,0,0,0,3,79,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,139,    },4,2,0,0,1,0,0,0,0,6,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,147,        addValue(Long.valueOf(v));,0,0,0,2,4,0,8,0,0,8,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,148,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,156,        addValue(Long.valueOf(v.longValue()));,0,0,0,3,6,0,10,0,0,10,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,157,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,165,        addValue(Long.valueOf(v));,0,0,0,2,4,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,166,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,174,        addValue(Character.valueOf(v));,0,0,0,2,4,0,8,0,0,8,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,175,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,179,        freqTable.clear();,0,0,0,1,2,0,4,0,0,4,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,180,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,192,        return freqTable.keySet().iterator();,0,0,0,2,4,1,6,0,0,6,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,203,        long result = 0;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,204,        Iterator iterator = freqTable.values().iterator();,4,1,0,2,4,0,0,0,0,5,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,205,        while (iterator.hasNext())  {,0,0,1,2,5,0,0,0,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,206,            result += ((Long) iterator.next()).longValue();,2,0,0,4,8,0,6,2,0,11,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,208,        return result;,4,0,0,0,0,4,0,0,0,7,14,1,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,219,        if (v instanceof Integer) {,0,0,0,1,3,0,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,220,            return getCount(((Integer) v).longValue());,8,1,0,4,8,2,4,2,0,16,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,222,        long result = 0;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,224,            Long count =  (Long) freqTable.get(v);,4,1,0,2,4,1,0,0,0,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,225,            if (count != null) {,2,1,0,1,3,0,0,0,0,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,226,                result = count.longValue();,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,230,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,228,        } catch (ClassCastException ex) {,2,0,0,1,4,0,0,2,0,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,231,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,241,        return getCount(Long.valueOf(v));,0,0,0,2,4,1,8,0,0,8,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,251,        return getCount(Long.valueOf(v));,0,0,0,2,4,1,14,0,0,14,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,261,        return getCount(Character.valueOf(v));,0,0,0,2,4,1,8,0,0,8,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,276,        final long sumFreq = getSumFreq();,4,0,0,1,2,1,2,0,0,8,34,0,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,277,        if (sumFreq == 0) {,2,1,1,1,3,0,6,0,0,14,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,278,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,280,        return (double) getCount(v) / (double) sumFreq;        ,2,1,0,3,6,1,4,0,0,7,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,291,        return getPct(Long.valueOf(v));       ,0,0,0,2,4,1,8,0,0,8,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,302,        return getPct(Long.valueOf(v));         ,0,0,0,2,4,1,8,0,0,8,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,313,        return getPct(Character.valueOf(v));         ,0,0,0,2,4,1,8,0,0,8,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,327,        if (getSumFreq() == 0) {,0,1,0,2,5,0,2,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,328,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,330,        if (v instanceof Integer) {,2,0,0,1,3,0,0,2,0,4,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,331,            return getCumFreq(((Integer) v).longValue());,0,0,0,4,8,1,0,0,0,13,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,333,        Comparator c = freqTable.comparator();,4,1,0,1,2,0,4,2,0,12,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,334,        if (c == null) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,335,            c = new NaturalComparator();,2,0,0,1,2,0,0,2,0,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,337,        long result = 0;,0,1,0,0,0,0,4,0,0,7,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,340,            Long value = (Long) freqTable.get(v);,2,0,0,2,4,0,6,4,0,12,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,341,            if (value != null) {,2,1,0,1,3,0,0,0,0,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,342,                result = value.longValue();,2,0,0,1,2,0,4,0,0,7,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,346,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,344,        } catch (ClassCastException ex) {,2,0,0,1,4,0,0,2,0,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,345,            return result;   // v is not comparable,2,0,0,0,0,1,0,0,0,2,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,348,"        if (c.compare(v, freqTable.firstKey()) < 0) {",0,1,0,3,7,0,10,0,0,11,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,349,"            return 0;  // v is comparable, but less than first value",0,0,0,0,0,1,0,0,0,1,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,352,"        if (c.compare(v, freqTable.lastKey()) >= 0) {",0,1,0,3,7,0,10,0,0,11,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,353,"            return getSumFreq();    // v is comparable, but greater than the last value",2,0,0,1,2,2,6,0,0,9,75,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,356,        Iterator values = valuesIterator();,2,0,0,1,2,0,2,2,0,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,357,        while (values.hasNext()) {,0,0,0,2,5,0,4,0,0,4,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,358,            Object nextValue = values.next();,2,0,0,1,2,0,4,2,0,8,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,359,"            if (c.compare(v, nextValue) > 0) {",0,1,0,2,5,0,8,0,0,9,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,360,                result += getCount(nextValue);,2,0,0,1,2,0,4,0,0,7,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,362,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,364,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,365,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,377,        return getCumFreq(Long.valueOf(v));       ,0,0,0,2,4,1,8,0,0,8,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,389,        return getCumFreq(Long.valueOf(v));         ,0,0,0,2,4,1,8,0,0,8,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,401,        return getCumFreq(Character.valueOf(v));         ,0,0,0,2,4,1,8,0,0,8,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,418,        final long sumFreq = getSumFreq();,2,0,0,1,2,1,6,0,0,9,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,419,        if (sumFreq == 0) {,12,2,0,1,3,0,0,0,0,15,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,420,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,422,        return (double) getCumFreq(v) / (double) sumFreq;        ,0,0,0,3,6,1,0,0,0,10,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,435,        return getCumPct(Long.valueOf(v));       ,8,1,0,2,4,1,14,4,0,28,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,448,        return getCumPct(Long.valueOf(v));         ,2,0,0,2,4,4,0,0,0,5,34,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,461,        return getCumPct(Character.valueOf(v));         ,2,0,0,2,4,4,8,0,0,13,39,1,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,132,        } catch (ClassCastException ex) {   ,10,2,0,1,4,0,0,0,0,12,33,3,1.0,1,1
defect4j,math,org/apache/commons/math/stat/Frequency,90,134,"            throw new IllegalArgumentException(""Value not comparable to existing values."");",0,0,0,1,2,0,0,2,0,3,79,8,1.0,1,1
defect4j,math,org/apache/commons/math/stat/Frequency,90,121,        Object obj = v;,4,0,0,0,0,0,0,2,0,6,15,4,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,122,        if (v instanceof Integer) {,2,0,0,1,3,0,0,2,0,4,27,5,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,126,            Long count = (Long) freqTable.get(obj);,2,0,0,2,4,0,6,4,0,12,39,6,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,57,    public Frequency() {,2,0,0,1,3,1,0,0,0,3,20,2,0.16667,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,58,        freqTable = new TreeMap();,4,0,0,1,2,0,0,2,0,8,26,4,0.16667,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,59,    },2,1,0,0,1,0,0,0,0,3,1,4,0.16667,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,66,    public Frequency(Comparator comparator) {,4,0,0,1,3,1,0,2,0,7,41,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,67,        freqTable = new TreeMap(comparator);,4,0,0,1,2,0,0,2,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,68,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,78,        NumberFormat nf = NumberFormat.getPercentInstance();,8,0,0,1,2,0,4,6,0,18,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,79,        StringBuffer outBuffer = new StringBuffer();,2,0,0,1,2,0,0,4,0,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,80,"        outBuffer.append(""Value \t Freq. \t Pct. \t Cum Pct. \n"");",0,0,0,1,2,0,4,0,0,5,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,81,        Iterator iter = freqTable.keySet().iterator();,2,0,0,2,4,0,6,2,0,10,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,82,        while (iter.hasNext()) {,0,0,0,2,5,0,4,0,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,83,            Object value = iter.next();,2,0,0,1,2,0,4,2,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,84,            outBuffer.append(value);,0,0,0,1,2,0,6,0,0,6,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,85,            outBuffer.append('\t');,0,0,0,1,2,0,4,0,0,5,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,86,            outBuffer.append(getCount(value));,0,0,0,2,4,0,8,0,0,8,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,87,            outBuffer.append('\t');,2,1,0,1,2,0,4,0,0,8,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,88,            outBuffer.append(nf.format(getPct(value)));,0,0,0,3,6,0,12,0,0,12,43,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,89,            outBuffer.append('\t');,0,0,0,1,2,0,4,0,0,5,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,90,            outBuffer.append(nf.format(getCumPct(value)));,0,0,0,3,6,0,12,0,0,12,46,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,91,            outBuffer.append('\n');,0,0,0,1,2,0,4,0,0,5,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,92,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,93,        return outBuffer.toString();,0,0,0,1,2,1,4,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,123,           obj = Long.valueOf(((Integer) v).longValue());,4,0,0,4,8,0,6,2,0,13,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,127,            if (count == null) {,4,1,0,1,3,0,4,2,0,11,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,128,"                freqTable.put(obj, Long.valueOf(1));",0,0,0,2,4,0,10,0,0,10,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,130,"                freqTable.put(obj, Long.valueOf(count.longValue() + 1));",0,1,0,3,6,0,14,0,0,15,56,9,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,135,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,136,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,144,        addValue(Long.valueOf(v));,0,0,0,2,4,0,8,0,0,8,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,145,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,153,        addValue(Long.valueOf(v.longValue()));,8,0,0,3,6,0,14,2,0,25,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,154,    },2,0,0,0,1,0,6,2,0,10,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,162,        addValue(Long.valueOf(v));,0,0,0,2,4,0,8,0,0,8,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,163,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,171,        addValue(Character.valueOf(v));,0,0,0,2,4,0,8,0,0,8,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,172,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,176,        freqTable.clear();,10,1,0,1,2,0,8,0,0,20,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,177,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,189,        return freqTable.keySet().iterator();,0,0,0,2,4,1,6,0,0,6,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,200,        long result = 0;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,201,        Iterator iterator = freqTable.values().iterator();,2,0,0,2,4,0,6,2,0,10,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,202,        while (iterator.hasNext())  {,0,0,0,2,5,0,4,0,0,4,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,203,            result += ((Long) iterator.next()).longValue();,2,0,0,4,8,0,6,2,0,11,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,205,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,216,        if (v instanceof Integer) {,2,0,0,1,3,0,0,2,0,4,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,217,            return getCount(((Integer) v).longValue());,2,0,0,4,8,1,4,2,0,8,43,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,219,        long result = 0;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,221,            Long count =  (Long) freqTable.get(v);,2,0,0,2,4,0,6,4,0,12,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,222,            if (count != null) {,2,1,0,1,3,0,0,0,0,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,223,                result = count.longValue();,2,0,0,1,2,0,4,0,0,7,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,227,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,225,        } catch (ClassCastException ex) {,0,0,0,1,4,0,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,228,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,238,        return getCount(Long.valueOf(v));,0,0,0,2,4,1,0,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,248,        return getCount(Long.valueOf(v));,0,0,0,2,4,1,8,0,0,8,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,258,        return getCount(Character.valueOf(v));,0,0,0,2,4,1,8,0,0,8,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,273,        final long sumFreq = getSumFreq();,10,2,0,1,2,1,2,0,0,16,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,274,        if (sumFreq == 0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,275,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,277,        return (double) getCount(v) / (double) sumFreq;        ,2,1,0,3,6,1,4,0,0,7,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,288,        return getPct(Long.valueOf(v));       ,0,0,0,2,4,1,8,0,0,8,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,299,        return getPct(Long.valueOf(v));         ,0,0,0,2,4,1,8,0,0,8,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,310,        return getPct(Character.valueOf(v));         ,0,0,0,2,4,1,8,0,0,8,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,324,        if (getSumFreq() == 0) {,0,0,0,2,5,0,0,0,0,7,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,325,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,327,        if (v instanceof Integer) {,2,0,0,1,3,0,0,2,0,4,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,328,            return getCumFreq(((Integer) v).longValue());,0,0,0,4,8,1,0,0,0,13,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,330,        Comparator c = freqTable.comparator();,2,0,0,1,2,0,4,2,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,331,        if (c == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,332,            c = new NaturalComparator();,2,0,0,1,2,0,0,2,0,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,334,        long result = 0;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,337,            Long value = (Long) freqTable.get(v);,2,0,0,2,4,0,6,4,0,12,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,338,            if (value != null) {,2,1,0,1,3,0,0,0,0,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,339,                result = value.longValue();,10,1,0,1,2,0,4,0,0,18,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,343,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,341,        } catch (ClassCastException ex) {,2,0,0,1,4,0,0,2,0,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,342,            return result;   // v is not comparable,2,0,0,0,0,1,0,0,0,2,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,345,"        if (c.compare(v, freqTable.firstKey()) < 0) {",0,1,0,3,7,0,10,0,0,11,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,346,"            return 0;  // v is comparable, but less than first value",0,0,0,0,0,1,0,0,0,1,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,349,"        if (c.compare(v, freqTable.lastKey()) >= 0) {",0,1,0,3,7,0,10,0,0,11,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,350,"            return getSumFreq();    // v is comparable, but greater than the last value",0,0,0,1,2,1,2,0,0,2,75,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,353,        Iterator values = valuesIterator();,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,354,        while (values.hasNext()) {,0,0,0,2,5,0,0,0,0,7,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,355,            Object nextValue = values.next();,2,0,0,1,2,0,4,2,0,8,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,356,"            if (c.compare(v, nextValue) > 0) {",0,1,0,2,5,0,8,0,0,9,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,357,                result += getCount(nextValue);,10,1,0,1,2,0,4,0,0,17,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,359,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,361,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,362,        return result;,12,1,0,0,0,1,0,0,0,15,14,1,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,374,        return getCumFreq(Long.valueOf(v));       ,0,0,0,2,4,1,8,0,0,8,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,386,        return getCumFreq(Long.valueOf(v));         ,0,0,0,2,4,1,0,0,0,7,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,398,        return getCumFreq(Character.valueOf(v));         ,0,0,0,2,4,1,8,0,0,8,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,415,        final long sumFreq = getSumFreq();,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,416,        if (sumFreq == 0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,417,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,419,        return (double) getCumFreq(v) / (double) sumFreq;        ,2,1,0,3,6,1,4,0,0,7,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,432,        return getCumPct(Long.valueOf(v));       ,0,0,0,2,4,1,8,0,0,8,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,445,        return getCumPct(Long.valueOf(v));         ,4,1,0,2,4,1,8,0,0,14,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,458,        return getCumPct(Character.valueOf(v));         ,0,0,0,2,4,1,8,0,0,8,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,465,"    private static class NaturalComparator implements Comparator, Serializable {",2,0,0,0,1,2,0,4,0,8,76,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,484,            return ((Comparable)o1).compareTo(o2);,0,0,0,3,6,1,0,0,0,10,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,270,        return (double)numerator / (double)denominator;,0,0,0,2,4,1,0,0,0,7,47,4,0.03846,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,604,                t /= 2; // cast out twos,6,0,0,0,0,1,0,4,0,12,24,1,0.02439,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,434,    private static final long[] factorials = new long[] ,2,0,0,2,4,3,0,0,0,5,51,2,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,561,        int u = p;,4,0,0,0,0,0,0,0,0,4,10,5,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,562,        int v = q;,4,0,0,0,0,0,0,0,0,4,10,5,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,563,        if ((u == 0) || (v == 0)) {,4,3,0,3,7,0,0,0,0,7,27,4,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,564,            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {,12,3,0,3,7,0,0,0,0,15,59,6,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,569,            return (Math.abs(u) + Math.abs(v));,0,1,0,3,6,1,12,0,0,13,35,7,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,576,        if (u > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,577,            u = -u;,0,0,0,0,0,0,0,0,0,0,7,4,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,579,        if (v > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,580,            v = -v;,0,0,0,0,0,0,0,0,0,0,7,4,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,583,        int k = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,584,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,6,7,0,3,7,0,0,0,0,13,69,4,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,590,        if (k == 31) {,0,0,0,1,3,0,0,0,0,4,14,4,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,597,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,8,3,0,3,6,0,0,0,0,12,46,5,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,603,            while ((t & 1) == 0) { // while t is even..,2,2,0,2,5,0,4,2,0,10,43,3,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,607,            if (t > 0) {,6,1,0,1,3,0,0,2,0,9,12,3,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,608,                u = -t;,4,0,0,0,0,0,0,0,0,6,7,8,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,610,                v = t;,6,0,0,0,0,0,6,0,0,13,6,3,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,613,            t = (v - u) / 2;,6,2,0,1,2,0,0,0,0,9,16,6,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,616,        } while (t != 0);,2,1,0,1,3,0,0,0,0,3,17,4,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,617,        return -u * (1 << k); // gcd is u*2^k,4,2,0,1,2,1,0,0,0,7,37,4,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,209,        super();,2,0,0,1,2,0,0,0,0,2,8,5,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,210,        if (den == 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,214,        if (den < 0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,223,"        int d = MathUtils.gcd(num, den);",2,0,0,1,2,0,8,0,0,10,32,5,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,224,        if (d > 1) {,2,1,0,1,3,0,0,0,0,3,12,4,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,230,        if (den < 0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,234,        this.numerator = num;,4,0,0,0,0,0,0,0,0,5,21,4,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,235,        this.denominator = den;,0,0,0,0,0,0,0,0,0,0,23,4,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,236,    },2,0,0,0,1,0,0,0,0,3,1,2,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,33,"    public static final Fraction TWO = new Fraction(2, 1);",2,0,0,1,2,3,0,4,0,9,54,2,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,36,"    public static final Fraction ONE = new Fraction(1, 1);",2,0,0,1,2,3,0,4,0,9,54,2,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,39,"    public static final Fraction ZERO = new Fraction(0, 1);",2,0,0,1,2,3,0,4,0,9,55,2,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,42,"    public static final Fraction MINUS_ONE = new Fraction(-1, 1);",2,0,0,1,2,3,0,4,0,10,61,2,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,65,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,66,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,79,        long s = (long)x + (long)y;,6,1,0,2,4,0,0,0,0,7,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,80,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,81,"            throw new ArithmeticException(""overflow: add"");",0,0,0,1,2,0,0,2,0,3,47,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,83,        return (int)s;,4,0,0,1,2,1,6,0,0,11,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,97,"        return addAndCheck(a, b, ""overflow: add"");",0,0,0,1,2,1,6,0,0,7,42,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,113,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,115,"            ret = addAndCheck(b, a, msg);",16,2,0,1,2,1,0,0,0,20,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,119,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,120,                if (b < 0) {,2,1,0,1,3,0,0,0,0,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,122,                    if (Long.MIN_VALUE - b <= a) {,0,0,0,1,3,0,0,0,0,1,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,123,                        ret = a + b;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,125,                        throw new ArithmeticException(msg);,4,0,0,1,2,0,0,0,0,5,35,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,129,                    ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,136,                if (a <= Long.MAX_VALUE - b) {,14,3,0,1,3,0,0,0,0,18,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,137,                    ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,139,                    throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,143,        return ret;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,172,        if (n < k) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,173,            throw new IllegalArgumentException(,8,2,0,0,1,1,0,2,0,13,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,176,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,177,            throw new IllegalArgumentException(,0,0,0,0,1,0,0,2,0,2,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,180,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,6,0,0,15,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,181,            return 1;,0,0,0,0,0,1,6,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,183,        if ((k == 1) || (k == n - 1)) {,6,4,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,184,            return n;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,187,        if (k > n / 2),6,2,0,1,2,0,0,0,0,10,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,188,"            return binomialCoefficient(n, n - k);",0,0,0,1,2,1,0,0,0,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,195,        long result = 1;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,196,        if (n <= 61) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,198,"            for (int j = 1, i = n - k + 1; j <= k; i++, j++) {",22,4,0,1,3,1,0,0,0,29,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,199,                result = result * i / j;,20,4,0,0,0,0,0,0,0,26,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,201,        } else if (n <= 66) {,2,1,0,1,4,0,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,204,"            for (int j = 1, i = n - k + 1; j <= k; i++, j++) {",16,3,0,1,3,0,0,0,0,21,50,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,211,"                long d = gcd(i, j);",4,1,1,1,2,0,6,0,0,16,19,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,212,                result = (result / (j / d)) * (i / d);,12,4,0,3,6,0,0,0,0,17,38,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,218,"            for (int j = 1, i = n - k + 1; j <= k; i++, j++) {",16,3,0,1,3,0,0,0,0,21,50,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,219,"                long d = gcd(i, j);",2,0,0,1,2,0,12,0,0,14,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,220,"                result = mulAndCheck((result / (j / d)), (i / d));",20,7,1,4,8,0,2,0,0,34,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,223,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,249,        if (n < k) {,6,1,0,1,3,0,0,0,0,7,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,250,            throw new IllegalArgumentException(,2,0,0,0,1,0,4,2,0,8,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,253,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,254,            throw new IllegalArgumentException(,2,0,0,0,1,0,0,2,0,5,35,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,257,        if ((n == k) || (k == 0)) {,8,4,0,3,7,0,4,0,0,17,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,258,            return 1d;,2,0,0,0,0,1,0,0,0,3,10,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,260,        if ((k == 1) || (k == n - 1)) {,6,4,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,261,            return n;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,263,        if (k > n/2) {,6,2,0,1,3,0,0,2,0,11,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,264,"            return binomialCoefficientDouble(n, n - k);",4,1,0,1,2,1,4,0,0,9,43,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,266,        if (n < 67) {,8,1,0,1,3,0,0,0,0,9,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,267,"            return binomialCoefficient(n,k);",0,0,0,1,2,1,6,0,0,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,270,        double result = 1d;,2,0,0,0,0,0,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,271,        for (int i = 1; i <= k; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,272,             result *= (double)(n - k + i) / (double)i;,10,3,0,3,6,0,0,0,0,14,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,275,        return Math.floor(result + 0.5);,2,1,0,1,2,1,4,0,0,7,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,297,        if (n < k) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,298,            throw new IllegalArgumentException(,0,0,0,0,1,0,0,2,0,2,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,301,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,302,            throw new IllegalArgumentException(,0,0,0,0,1,0,0,2,0,2,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,305,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,306,            return 0;,4,3,0,0,0,1,0,0,0,8,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,308,        if ((k == 1) || (k == n - 1)) {,14,5,0,3,7,0,0,0,0,21,31,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,309,            return Math.log((double) n);,4,0,0,2,4,4,4,4,0,15,28,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,316,        if (n < 67) {  ,6,1,0,1,3,0,0,0,0,7,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,317,"            return Math.log(binomialCoefficient(n,k));",0,0,0,2,4,1,10,0,0,10,42,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,324,        if (n < 1030) { ,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,325,"            return Math.log(binomialCoefficientDouble(n, k));",0,0,0,2,4,1,0,0,0,7,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,328,        if (k > n / 2) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,329,"            return binomialCoefficientLog(n, n - k);",4,1,0,1,2,1,4,0,0,9,40,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,335,        double logSum = 0;,6,0,1,0,0,1,0,0,0,9,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,338,        for (int i = n - k + 1; i <= n; i++) {,12,3,0,1,3,0,0,0,0,16,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,339,            logSum += Math.log((double) i);,0,0,0,2,4,0,0,0,0,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,343,        for (int i = 2; i <= k; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,344,            logSum -= Math.log((double) i);,4,0,0,2,4,0,4,0,0,9,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,347,        return logSum;      ,12,0,0,0,0,1,0,0,0,12,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,361,"        if (equals(x, y, eps)) {",2,0,0,2,5,0,8,0,0,11,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,362,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,363,        } else if (x < y) {,10,3,0,1,4,0,0,0,0,13,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,364,          return -1;,2,0,0,0,0,1,16,0,0,20,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,366,        return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,377,        return (Math.exp(x) + Math.exp(-x)) / 2.0;,2,1,0,3,6,1,4,0,0,8,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,389,        return ((Double.isNaN(x) && Double.isNaN(y)) || x == y);,0,0,0,4,8,1,0,0,0,13,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,405,"      return equals(x, y) || (Math.abs(y - x) <= eps);",6,3,0,3,6,1,10,0,0,19,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,419,        if ((x == null) || (y == null)) {,4,3,0,3,7,0,0,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,420,            return !((x == null) ^ (y == null));,4,3,0,3,6,1,0,0,0,8,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,422,        if (x.length != y.length) {,8,1,0,1,3,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,423,            return false;,2,0,0,0,0,4,0,0,0,6,13,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,425,        for (int i = 0; i < x.length; ++i) {,12,1,0,1,3,0,0,0,0,14,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,426,"            if (!equals(x[i], y[i])) {",6,1,1,4,9,1,2,0,0,19,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,427,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,430,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,463,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,464,"            throw new IllegalArgumentException(""must have n >= 0 for n!"");",2,1,0,1,2,0,0,2,0,6,62,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,466,        if (n > 20) {,4,1,1,1,3,0,0,0,0,8,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,467,            throw new ArithmeticException(,0,0,0,0,1,0,0,2,0,2,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,470,        return factorials[n];,2,0,1,1,2,2,0,0,0,7,21,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,494,        if (n < 0) {,0,0,0,1,3,0,8,0,0,8,12,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,495,"            throw new IllegalArgumentException(""must have n >= 0 for n!"");",0,0,0,1,2,0,0,0,0,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,497,        if (n < 21) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,498,            return factorial(n);,0,0,0,1,2,1,4,0,0,4,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,500,        return Math.floor(Math.exp(factorialLog(n)) + 0.5);,2,1,0,3,6,1,12,0,0,15,51,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,517,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,518,"            throw new IllegalArgumentException(""must have n > 0 for n!"");",2,0,0,1,2,0,0,2,0,5,61,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,520,        if (n < 21) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,521,            return Math.log(factorial(n));,0,0,0,2,4,1,8,0,0,8,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,523,        double logSum = 0;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,524,        for (int i = 2; i <= n; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,525,            logSum += Math.log((double)i);,0,0,0,2,4,0,0,0,0,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,527,        return logSum;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,565,                throw MathRuntimeException.createArithmeticException(,0,0,0,0,1,0,4,0,0,4,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,586,            u /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,587,            v /= 2;,8,2,1,0,0,0,0,0,0,16,7,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,588,            k++; // cast out twos.,6,0,0,0,0,0,0,0,0,9,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,591,            throw MathRuntimeException.createArithmeticException(,0,0,0,0,1,0,4,0,0,4,53,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,627,        return new Double(value).hashCode();,4,0,0,2,4,1,2,2,0,8,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,638,        return Arrays.hashCode(value);,2,0,0,1,2,2,6,0,0,9,30,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,649,        return (x >= ZB) ? PB : NB;,0,0,0,1,2,1,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,661,        if (Double.isNaN(x)) {,0,0,0,2,5,0,6,0,0,6,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,662,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,664,        return (x >= 0.0) ? 1.0 : -1.0;,2,1,0,1,2,1,0,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,675,        if (Float.isNaN(x)) {,0,0,0,2,5,0,0,0,0,7,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,676,            return Float.NaN;,4,0,0,0,0,1,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,678,        return (x >= 0.0F) ? 1.0F : -1.0F;,2,1,0,1,2,1,0,0,0,4,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,688,        return (x >= 0) ? 1 : -1;,2,1,0,1,2,1,0,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,698,        return (x >= 0L) ? 1L : -1L;,0,0,0,1,2,1,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,709,        return (x >= ZS) ? PS : NS;,0,0,0,1,2,1,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,736,        if (a==0 || b==0){,0,0,0,1,3,0,0,0,0,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,737,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,739,"        int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));",6,2,1,3,6,0,14,0,0,30,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,740,        if (lcm == Integer.MIN_VALUE){,6,1,0,1,3,0,0,0,0,7,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,741,"            throw new ArithmeticException(""overflow: lcm is 2^31"");",0,0,0,1,2,0,0,2,0,3,55,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,743,        return lcm;,4,1,0,0,0,1,0,0,0,5,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,763,        return Math.log(x)/Math.log(base);,0,1,0,2,4,1,12,0,0,13,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,777,        long m = ((long)x) * ((long)y);,16,2,0,4,8,1,0,0,0,20,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,778,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,14,3,0,1,3,0,0,0,0,19,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,779,"            throw new ArithmeticException(""overflow: mul"");",4,0,0,1,2,0,0,4,0,9,47,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,781,        return (int)m;,2,0,0,1,2,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,796,"        String msg = ""overflow: multiply"";",0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,797,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,799,"            ret = mulAndCheck(b, a);",4,0,0,1,2,0,6,0,0,11,24,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,801,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,802,                if (b < 0) {,2,1,0,1,3,0,6,2,0,11,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,804,                    if (a >= Long.MAX_VALUE / b) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,805,                        ret = a * b;,4,1,0,0,0,1,14,0,0,20,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,807,                        throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,809,                } else if (b > 0) {,0,0,0,1,4,0,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,811,                    if (Long.MIN_VALUE / b <= a) {,10,2,1,1,3,1,0,2,0,19,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,812,                        ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,814,                        throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,14,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,819,                    ret = 0;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,821,            } else if (a > 0) {,2,1,0,1,4,0,0,0,0,3,19,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,826,                if (a <= Long.MAX_VALUE / b) {,8,2,0,1,3,0,0,0,0,10,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,827,                    ret = a * b;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,829,                    throw new ArithmeticException(msg);,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,833,                ret = 0;,2,0,0,0,0,0,0,0,0,3,8,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,836,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,859,        if (Double.isNaN(d) || Double.isInfinite(d)) {,0,1,0,3,7,0,12,0,0,13,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,860,                return d;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,861,        } else if (d == 0) {,2,1,0,1,4,0,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,862,                return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,0,0,0,1,2,1,0,0,0,4,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,868,        long bits     = Double.doubleToLongBits(d);,2,0,0,1,2,0,6,0,0,8,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,869,        long sign     = bits & 0x8000000000000000L;,2,2,0,0,0,0,0,0,0,4,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,870,        long exponent = bits & 0x7ff0000000000000L;,4,1,0,0,0,0,0,0,0,5,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,871,        long mantissa = bits & 0x000fffffffffffffL;,0,0,0,0,0,0,0,0,0,0,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,873,        if (d * (direction - d) >= 0) {,6,3,0,2,5,0,0,0,0,9,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,875,                if (mantissa == 0x000fffffffffffffL) {,2,1,0,1,3,0,0,0,0,3,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,876,                        return Double.longBitsToDouble(sign |,6,2,1,0,1,1,4,0,0,17,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,879,                        return Double.longBitsToDouble(sign |,2,1,0,0,1,1,4,0,0,7,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,884,                if (mantissa == 0L) {,4,1,1,1,3,0,0,0,0,10,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,885,                        return Double.longBitsToDouble(sign |,2,1,0,0,1,1,4,0,0,7,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,889,                        return Double.longBitsToDouble(sign |,2,1,0,0,1,1,4,0,0,7,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,908,        if ((d == 0) || Double.isNaN(d) || Double.isInfinite(d)) {,2,2,0,4,9,0,12,0,0,16,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,909,            return d;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,913,        final long bits     = Double.doubleToLongBits(d);,4,0,0,1,2,1,6,0,0,11,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,914,        final long exponent = bits & 0x7ff0000000000000L;,0,0,0,0,0,0,0,0,0,0,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,915,        final long rest     = bits & 0x800fffffffffffffL;,4,1,0,0,0,1,0,0,0,6,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,918,        final long newBits = rest | (exponent + (((long) scaleFactor) << 52));,8,3,0,4,8,1,0,0,0,12,70,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,919,        return Double.longBitsToDouble(newBits);,0,0,0,1,2,1,6,0,0,6,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,943,         return a - TWO_PI * Math.floor((a + Math.PI - center) / TWO_PI);,14,5,0,2,4,1,4,0,0,23,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,956,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",4,0,0,1,2,1,14,0,0,18,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,973,            return (new BigDecimal,0,0,0,0,1,1,0,2,0,2,22,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,977,        } catch (NumberFormatException ex) {,4,0,0,1,4,0,0,2,0,7,36,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,978,            if (Double.isInfinite(x)) {,0,0,0,2,5,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,979,                return x;          ,10,2,0,0,0,1,0,0,0,12,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,981,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,996,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",4,0,0,1,2,1,6,0,0,10,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1012,        float sign = indicator(x);,2,0,0,1,2,0,4,0,0,6,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1013,"        float factor = (float)Math.pow(10.0f, scale) * sign;",8,1,0,2,4,0,16,0,0,26,52,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1014,"        return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor;",6,2,1,2,4,1,6,0,0,19,71,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1031,        switch (roundingMethod) {,2,0,0,1,3,0,0,0,0,2,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1033,            if (sign == -1) {,2,1,0,1,3,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1034,"                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",6,0,0,2,4,0,8,0,0,15,69,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1036,"                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));",6,0,0,2,4,0,8,0,0,15,68,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1038,            break;,0,0,0,0,0,0,8,0,0,8,6,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1040,"            unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",6,0,0,2,4,0,8,0,0,15,69,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1041,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1043,            if (sign == -1) {,2,1,0,1,3,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1044,"                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));",6,0,0,2,4,0,8,0,0,15,68,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1046,"                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",6,0,0,2,4,0,8,0,0,15,69,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1048,            break;,2,0,0,0,0,3,0,0,0,5,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1050,"            unscaled = nextAfter(unscaled, Double.NEGATIVE_INFINITY);",6,0,0,1,2,0,4,0,0,11,57,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1051,            double fraction = unscaled - Math.floor(unscaled);,8,1,0,1,2,0,6,0,0,16,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1052,            if (fraction > 0.5) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1053,                unscaled = Math.ceil(unscaled);,0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1055,                unscaled = Math.floor(unscaled);,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1057,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1060,            double fraction = unscaled - Math.floor(unscaled);,4,1,0,1,2,0,6,0,0,11,50,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1061,            if (fraction > 0.5) {,2,1,0,1,3,0,0,0,0,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1062,                unscaled = Math.ceil(unscaled);,2,0,0,1,2,0,6,0,0,9,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1063,            } else if (fraction < 0.5) {,2,1,0,1,4,0,0,0,0,3,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1064,                unscaled = Math.floor(unscaled);,2,0,0,1,2,0,6,0,0,9,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1067,                if (Math.floor(unscaled) / 2.0 == Math.floor(Math,0,3,0,1,4,0,12,0,0,15,49,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1069,                    unscaled = Math.floor(unscaled);,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1071,                    unscaled = Math.ceil(unscaled);,6,0,0,1,2,0,6,0,0,13,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1074,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1077,"            unscaled = nextAfter(unscaled, Double.POSITIVE_INFINITY);",10,0,0,1,2,0,4,0,0,16,57,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1078,            double fraction = unscaled - Math.floor(unscaled);,0,0,0,1,2,0,0,0,0,3,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1079,            if (fraction >= 0.5) {,2,1,0,1,3,0,0,0,0,3,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1080,                unscaled = Math.ceil(unscaled);,4,0,0,1,2,3,6,0,0,14,31,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1082,                unscaled = Math.floor(unscaled);,2,0,0,1,2,0,6,0,0,9,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1084,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1087,            if (unscaled != Math.floor(unscaled)) {,2,1,0,2,5,0,6,0,0,9,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1088,"                throw new ArithmeticException(""Inexact result from rounding"");",0,0,0,1,2,0,0,2,0,3,62,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1092,"            unscaled = Math.ceil(nextAfter(unscaled,  Double.POSITIVE_INFINITY));",8,1,1,2,4,0,8,0,0,23,69,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1093,            break;,4,1,1,0,0,0,0,0,0,10,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1095,"            throw new IllegalArgumentException(""Invalid rounding method."");",0,0,0,1,2,0,0,2,0,3,63,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1097,        return unscaled;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1111,        return (x == ZB) ? ZB : (x > ZB) ? PB : NB;,14,2,0,2,4,1,0,0,0,16,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1127,        if (Double.isNaN(x)) {,0,0,0,2,5,0,6,0,0,6,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1128,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1130,        return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;,6,2,0,2,4,1,8,0,0,18,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1145,        if (Float.isNaN(x)) {,0,0,0,2,5,0,6,0,0,6,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1146,            return Float.NaN;,4,0,0,0,0,1,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1148,        return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;,4,2,0,2,4,1,0,0,0,7,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1162,        return (x == 0) ? 0 : (x > 0) ? 1 : -1;,4,2,0,2,4,1,0,0,0,7,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1176,        return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;,0,0,0,2,4,1,0,0,0,7,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1191,        return (x == ZS) ? ZS : (x > ZS) ? PS : NS;,14,2,0,2,4,1,0,0,0,16,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1202,        return (Math.exp(x) - Math.exp(-x)) / 2.0;,2,2,0,3,6,1,10,0,0,15,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1216,        long s = (long)x - (long)y;,6,1,0,2,4,0,0,0,0,7,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1217,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,12,4,0,1,3,0,4,0,0,20,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1218,"            throw new ArithmeticException(""overflow: subtract"");",12,2,0,1,2,0,0,2,0,19,52,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1220,        return (int)s;,0,0,0,1,2,1,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1235,"        String msg = ""overflow: subtract"";",2,0,0,0,0,0,0,2,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1236,        if (b == Long.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1237,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1238,                ret = a - b;,6,1,0,0,0,0,0,0,0,8,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1240,                throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1244,"            ret = addAndCheck(a, -b, msg);",0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1246,        return ret;,10,2,0,0,0,1,0,0,0,13,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,100,        super();,2,0,0,1,2,1,4,2,0,9,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,101,        this.pattern   = null;,2,0,0,0,0,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,102,        this.arguments = new Object[0];,2,0,0,1,2,0,0,2,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,103,    },10,3,0,0,1,0,0,0,0,14,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,113,"      super(buildMessage(Locale.US, pattern, arguments));",4,0,0,2,4,0,6,0,0,10,51,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,114,      this.pattern   = pattern;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,115,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,4,1,0,3,6,0,4,2,0,12,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,116,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,126,        super(rootCause);,2,0,0,1,2,0,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,127,        this.pattern   = getMessage();,2,0,0,1,2,0,2,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,128,        this.arguments = new Object[0];,0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,129,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,142,"      super(buildMessage(Locale.US, pattern, arguments), rootCause);",0,0,0,2,4,0,0,0,0,6,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,143,      this.pattern   = pattern;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,144,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,4,1,0,3,6,0,4,2,0,12,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,145,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,42,    private static ResourceBundle cachedResources = null;,0,0,0,0,0,0,0,0,0,0,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,63,            if ((cachedResources == null) || (! cachedResources.getLocale().equals(locale))) {,4,2,0,5,11,3,8,2,0,20,82,1,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,65,                cachedResources =,2,0,0,0,0,0,0,0,0,3,17,8,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,69,            if (cachedResources.getLocale().getLanguage().equals(locale.getLanguage())) {,0,0,0,5,11,0,12,0,0,12,77,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,71,                return cachedResources.getString(s);,0,0,0,1,2,1,6,0,0,6,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,76,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,74,        } catch (MissingResourceException mre) {,2,0,0,1,4,0,0,2,0,4,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,80,        return s;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,92,"        return (pattern == null) ? """" : new MessageFormat(translate(pattern, locale), locale).format(arguments);        ",4,1,0,4,8,1,10,2,0,20,104,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,153,        return pattern;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,162,        return arguments.clone();,0,0,0,1,2,1,4,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,173,"        return buildMessage(locale, pattern, arguments);",0,0,0,1,2,1,8,0,0,8,48,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,178,        return getMessage(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,185,        printStackTrace(System.err);,8,3,0,1,2,0,2,0,0,14,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,186,    },4,0,0,0,1,0,0,0,0,6,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,194,        synchronized (out) {,2,0,0,1,3,0,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,195,"            PrintWriter pw = new PrintWriter(out, false);",4,0,0,1,2,0,0,4,0,9,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,196,            printStackTrace(pw);,0,0,0,1,2,0,4,0,0,4,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,198,            pw.flush();,0,0,0,1,2,0,4,0,0,4,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,199,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,200,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,91,34,"        super(""Convergence failed"");",0,0,0,1,2,0,0,0,0,1,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,91,35,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,91,45,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,91,46,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,91,53,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,91,54,    },8,2,0,0,1,0,0,0,0,10,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,91,65,"        super(cause, pattern, arguments);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,91,66,    },2,0,0,0,1,1,2,0,0,5,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,60,"        this(value, 1.0e-5, 100);",2,0,0,1,2,0,0,0,0,2,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,61,    },2,1,1,0,1,1,8,0,0,19,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,82,"        this(value, epsilon, Integer.MAX_VALUE, maxIterations);",12,0,0,1,2,0,6,0,0,19,55,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,83,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,102,"       this(value, 0, maxDenominator, 100);",2,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,103,    },2,0,0,0,1,0,0,0,0,3,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,138,    {,0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,139,        long overflow = Integer.MAX_VALUE;,6,0,0,0,0,0,0,0,0,6,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,140,        double r0 = value;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,141,        long a0 = (long)Math.floor(r0);,4,0,0,2,4,0,0,0,0,5,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,142,        if (a0 > overflow) {,4,1,0,1,3,0,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,143,"            throw new FractionConversionException(value, a0, 1l);",0,0,0,1,2,0,0,0,0,3,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,148,        if (Math.abs(a0 - value) < epsilon) {,6,2,0,2,5,0,4,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,149,            this.numerator = (int) a0;,4,0,0,1,2,0,0,0,0,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,150,            this.denominator = 1;,2,0,0,0,0,0,0,0,0,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,151,            return;,8,2,0,0,0,1,0,0,0,11,7,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,154,        long p0 = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,155,        long q0 = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,156,        long p1 = a0;,4,0,0,0,0,0,0,0,0,4,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,157,        long q1 = 1;,4,1,1,0,0,0,0,0,0,12,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,159,        long p2 = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,160,        long q2 = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,162,        int n = 0;,4,0,0,0,0,0,8,0,0,13,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,163,        boolean stop = false;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,165,            ++n;,2,0,0,0,0,0,0,0,0,3,4,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,166,            double r1 = 1.0 / (r0 - a0);,6,2,0,1,2,0,0,0,0,8,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,167,            long a1 = (long)Math.floor(r1);,0,0,0,2,4,0,0,0,0,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,168,            p2 = (a1 * p1) + p0;,8,2,0,1,2,0,0,0,0,11,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,169,            q2 = (a1 * q1) + q0;,8,2,0,1,2,0,0,0,0,11,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,170,            if ((p2 > overflow) || (q2 > overflow)) {,8,3,0,3,7,0,0,0,0,11,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,171,"                throw new FractionConversionException(value, p2, q2);",6,0,0,1,2,0,0,2,0,8,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,174,            double convergent = (double)p2 / (double)q2;,4,0,0,2,4,0,0,0,0,4,44,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,175,            if (n < maxIterations && Math.abs(convergent - value) > epsilon && q2 < maxDenominator) {,14,6,0,2,5,0,4,0,0,24,89,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,176,                p0 = p1;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,177,                p1 = p2;,10,2,0,0,0,1,0,0,0,14,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,178,                q0 = q1;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,179,                q1 = q2;,10,0,0,0,0,0,0,0,0,12,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,180,                a0 = a1;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,181,                r0 = r1;,6,0,1,0,0,0,4,0,0,20,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,183,                stop = true;,8,1,0,0,0,0,0,0,0,11,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,185,        } while (!stop);,2,0,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,187,        if (n >= maxIterations) {,4,1,0,1,3,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,188,"            throw new FractionConversionException(value, maxIterations);",4,0,0,1,2,0,0,2,0,6,60,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,191,        if (q2 < maxDenominator) {,0,0,0,1,3,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,192,            this.numerator = (int) p2;,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,193,            this.denominator = (int) q2;,4,0,0,1,2,0,0,0,0,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,195,            this.numerator = (int) p1;,6,0,0,1,2,2,0,4,0,13,26,1,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,196,            this.denominator = (int) q1;,8,0,0,1,2,0,0,0,0,10,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,199,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,211,"            throw MathRuntimeException.createArithmeticException(""zero denominator in fraction {0}/{1}"",",10,1,0,2,5,0,4,0,0,17,92,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,215,            if (num == Integer.MIN_VALUE || den == Integer.MIN_VALUE) {,16,3,0,1,3,0,0,0,0,20,59,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,216,"                throw MathRuntimeException.createArithmeticException(""overflow in fraction {0}/{1}, cannot negate"",",0,0,0,2,5,0,4,0,0,5,99,9,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,219,            num = -num;,4,0,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,220,            den = -den;,8,0,0,0,0,0,0,0,0,11,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,225,            num /= d;,26,9,0,0,0,0,0,0,0,39,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,226,            den /= d;,4,0,0,0,0,0,0,0,0,5,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,231,            num *= -1;,6,0,0,0,0,0,0,0,0,10,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,232,            den *= -1;,2,0,0,0,0,0,0,0,0,4,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,244,        if (numerator >= 0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,245,            ret = this;,2,0,0,0,0,0,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,247,            ret = negate();,2,0,0,1,2,0,2,0,0,5,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,249,        return ret;        ,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,259,        double nOd = doubleValue();,0,0,0,1,2,0,0,0,0,3,27,4,0.0,1,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,260,        double dOn = object.doubleValue();,0,0,0,1,2,0,0,0,0,3,34,4,0.0,1,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,261,        return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);,8,2,0,3,6,1,0,0,0,12,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,285,        if (this == other) { ,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,286,            ret = true;,2,0,0,0,0,0,0,0,0,4,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,287,        } else if (other == null) {,2,1,0,1,4,0,0,0,0,3,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,288,            ret = false;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,293,                Fraction rhs = (Fraction)other;,4,0,0,1,2,0,0,4,0,8,31,9,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,294,                ret = (numerator == rhs.numerator) &&,2,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,299,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,296,            } catch (ClassCastException ex) {,2,0,0,1,4,0,0,2,0,4,33,9,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,298,                ret = false;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,302,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,311,        return (float)doubleValue();,0,0,0,2,4,1,2,0,0,2,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,319,        return denominator;,2,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,327,        return numerator;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,335,        return 37 * (37 * 17 + getNumerator()) + getDenominator();,0,4,0,3,6,1,4,0,0,8,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,344,        return (int)doubleValue();,0,0,0,2,4,1,14,0,0,14,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,353,        return (long)doubleValue();,0,0,0,2,4,1,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,361,        if (numerator==Integer.MIN_VALUE) {,0,0,0,1,3,0,0,0,0,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,362,"            throw MathRuntimeException.createArithmeticException(""overflow in fraction {0}/{1}, cannot negate"",",4,0,0,2,5,0,4,0,0,10,99,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,365,"        return new Fraction(-numerator, denominator);",8,0,0,1,2,1,0,2,0,12,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,373,"        return new Fraction(denominator, numerator);",2,0,0,1,2,2,2,0,0,5,44,10,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,387,"        return addSub(fraction, true /* add */);",0,0,0,1,2,1,0,0,0,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,401,"        return addSub(fraction, false /* subtract */);",2,0,0,1,2,1,4,0,0,7,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,415,        if (fraction == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,416,"            throw new IllegalArgumentException(""The fraction must not be null"");",0,0,0,1,2,0,0,2,0,4,68,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,419,        if (numerator == 0) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,420,            return isAdd ? fraction : fraction.negate();,4,0,0,1,2,1,4,0,0,8,44,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,422,        if (fraction.numerator == 0) {,6,1,1,1,3,0,0,0,0,11,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,423,            return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,427,"        int d1 = MathUtils.gcd(denominator, fraction.denominator);",0,0,0,1,2,0,0,0,0,3,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,428,        if (d1==1) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,430,"            int uvp = MathUtils.mulAndCheck(numerator, fraction.denominator);",6,0,0,1,2,0,6,0,0,12,65,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,431,"            int upv = MathUtils.mulAndCheck(fraction.numerator, denominator);",6,0,0,1,2,0,6,0,0,12,65,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,432,            return new Fraction,2,1,0,0,0,1,4,2,0,9,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,440,        BigInteger uvp = BigInteger.valueOf(numerator),0,0,0,1,2,0,0,0,0,3,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,442,        BigInteger upv = BigInteger.valueOf(fraction.numerator),6,0,0,1,2,0,4,2,0,12,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,444,        BigInteger t = isAdd ? uvp.add(upv) : uvp.subtract(upv);,0,0,0,2,4,0,0,0,0,6,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,447,        int tmodd1 = t.mod(BigInteger.valueOf(d1)).intValue();,14,1,0,3,6,0,12,0,0,28,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,448,"        int d2 = (tmodd1==0)?d1:MathUtils.gcd(tmodd1, d1);",6,1,0,2,4,0,8,0,0,15,50,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,451,        BigInteger w = t.divide(BigInteger.valueOf(d2));,2,0,0,2,4,0,10,2,0,14,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,452,        if (w.bitLength() > 31) {,0,1,0,2,5,0,4,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,453,"            throw MathRuntimeException.createArithmeticException(""overflow, numerator too large after multiply: {0}"",",0,0,0,1,3,0,4,0,0,5,105,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,456,"        return new Fraction (w.intValue(), ",0,0,0,1,3,1,4,2,0,6,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,472,        if (fraction == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,473,"            throw new IllegalArgumentException(""The fraction must not be null"");",0,0,0,1,2,0,0,2,0,4,68,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,475,        if (numerator == 0 || fraction.numerator == 0) {,6,3,0,1,3,0,0,0,0,9,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,476,            return ZERO;,2,0,0,0,0,1,0,0,0,2,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,480,"        int d1 = MathUtils.gcd(numerator, fraction.denominator);",0,0,0,1,2,0,0,0,0,3,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,481,"        int d2 = MathUtils.gcd(fraction.numerator, denominator);",6,0,0,1,2,0,6,0,0,12,56,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,482,        return getReducedFraction,6,0,0,0,0,1,2,0,0,9,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,498,        if (fraction == null) {,0,0,0,1,3,0,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,499,"            throw new IllegalArgumentException(""The fraction must not be null"");",4,1,0,1,2,0,0,2,0,9,68,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,501,        if (fraction.numerator == 0) {,4,1,0,1,3,0,0,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,502,            throw MathRuntimeException.createArithmeticException(,0,0,0,0,1,0,4,0,0,4,53,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,506,        return multiply(fraction.reciprocal());,0,0,0,2,4,1,6,0,0,6,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,521,        if (denominator == 0) {,2,1,0,1,3,0,0,0,0,3,23,8,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,522,            throw MathRuntimeException.createArithmeticException(,0,0,0,0,1,0,0,0,0,1,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,526,        if (numerator==0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,527,            return ZERO; // normalize zero.,2,0,0,0,0,1,0,0,0,2,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,530,        if (denominator==Integer.MIN_VALUE && (numerator&1)==0) {,0,0,0,2,5,0,0,0,0,7,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,531,            numerator/=2; denominator/=2;,4,0,0,0,0,0,0,0,0,6,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,533,        if (denominator < 0) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,534,            if (numerator==Integer.MIN_VALUE ||,2,1,0,0,1,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,536,                throw MathRuntimeException.createArithmeticException(,0,0,0,0,1,0,4,0,0,4,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,540,            numerator = -numerator;,4,0,0,0,0,0,0,0,0,6,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,541,            denominator = -denominator;,4,0,0,0,0,0,0,0,0,6,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,544,"        int gcd = MathUtils.gcd(numerator, denominator);",2,0,0,1,2,0,8,0,0,10,48,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,545,        numerator /= gcd;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,546,        denominator /= gcd;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,547,"        return new Fraction(numerator, denominator);",6,0,0,1,2,1,0,2,0,8,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,30,public class Fraction extends Number implements Comparable<Fraction> {,2,0,0,0,1,1,0,6,0,9,70,1,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/FractionConversionException,91,41,"        super(""Unable to convert {0} to fraction after {1} iterations"", value, maxIterations);",6,1,0,3,6,0,0,0,0,8,86,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/FractionConversionException,91,42,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/FractionConversionException,91,52,"        super(""Overflow trying to convert {0} to fraction ({1}/{2})"", value, p, q);",6,0,0,5,10,0,0,0,0,7,75,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/FractionConversionException,91,53,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,182,            return n;,0,0,0,0,0,1,0,0,0,1,9,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,208,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,1.0,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,92,95,"        return addAndCheck(a, b, ""overflow: add"");",2,0,0,1,2,2,6,4,0,14,42,3,0.5,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,92,179,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,181,        if ((k == 1) || (k == n - 1)) {,10,4,0,3,7,1,0,0,0,15,31,2,0.5,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,184,"        long result = Math.round(binomialCoefficientDouble(n, k));",2,0,0,2,4,0,10,0,0,12,58,5,0.5,1,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,185,        if (result == Long.MAX_VALUE) {,6,1,0,1,3,0,0,0,0,7,31,4,0.5,1,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,111,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,113,"            ret = addAndCheck(b, a, msg);",8,1,0,1,2,0,8,0,0,19,29,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,117,            if (a < 0) {,4,1,0,1,3,0,10,0,0,15,12,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,134,                if (a <= Long.MAX_VALUE - b) {,8,2,0,1,3,0,0,0,0,10,30,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,135,                    ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,10,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,141,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,170,        if (n < k) {,4,1,0,1,3,0,0,0,0,5,12,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,174,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,178,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,236,"        return Math.floor(Math.exp(binomialCoefficientLog(n, k)) + 0.5);",0,0,0,3,6,1,0,0,0,10,64,4,0.11111,1,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,286,        double logSum = 0;,6,0,0,0,0,0,0,0,0,7,18,3,0.06667,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,92,289,        for (int i = k + 1; i <= n; i++) {,10,2,0,1,3,0,0,0,0,13,34,4,0.06667,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,92,290,            logSum += Math.log((double)i);,4,0,0,2,4,0,4,0,0,9,30,6,0.06667,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,92,294,        for (int i = 2; i <= n - k; i++) {,12,3,0,1,3,1,2,0,0,19,34,3,0.06667,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,92,295,            logSum -= Math.log((double)i);,4,0,0,2,4,0,4,0,0,9,30,6,0.06667,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,92,298,        return logSum;      ,0,0,0,0,0,1,0,0,0,1,14,4,0.06667,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,93,345,        long result = Math.round(factorialDouble(n));,2,0,0,2,4,0,8,0,0,10,45,5,1.0,1,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,346,        if (result == Long.MAX_VALUE) {,6,1,0,1,3,0,0,0,0,7,31,4,1.0,1,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,374,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,377,        return Math.floor(Math.exp(factorialLog(n)) + 0.5);,10,2,0,3,6,1,16,0,0,29,51,3,0.5,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,93,394,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,397,        double logSum = 0;,8,0,0,0,0,0,0,0,0,8,18,1,0.5,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,93,398,        for (int i = 2; i <= n; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,399,            logSum += Math.log((double)i);,4,0,0,2,4,0,4,0,0,9,30,6,0.5,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,401,        return logSum;,0,0,0,0,0,1,0,0,0,1,14,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,316,    private static final long[] factorials = new long[] ,2,0,0,2,4,3,0,0,0,5,51,2,0.00498,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,63,        super();,2,1,1,1,2,0,0,0,0,12,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,64,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,77,        long s = (long)x + (long)y;,6,1,0,2,4,0,0,0,0,7,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,78,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,79,"            throw new ArithmeticException(""overflow: add"");",0,0,0,1,2,0,0,0,0,3,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,81,        return (int)s;,2,0,0,1,2,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,95,"        return addAndCheck(a, b, ""overflow: add"");",0,0,0,1,2,1,6,0,0,7,42,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,111,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,113,"            ret = addAndCheck(b, a, msg);",2,0,0,1,2,0,8,0,0,11,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,117,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,118,                if (b < 0) {,2,1,0,1,3,0,0,0,0,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,120,                    if (Long.MIN_VALUE - b <= a) {,8,2,0,1,3,0,0,0,0,10,30,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,121,                        ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,123,                        throw new ArithmeticException(msg);,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,127,                    ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,134,                if (a <= Long.MAX_VALUE - b) {,12,2,0,1,3,0,0,0,0,15,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,135,                    ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,137,                    throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,141,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,170,        if (n < k) {,6,0,0,1,3,0,0,0,0,7,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,171,            throw new IllegalArgumentException(,0,0,0,0,1,0,0,2,0,2,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,174,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,175,            throw new IllegalArgumentException(,0,0,0,0,1,0,0,2,0,2,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,178,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,179,            return 1;,8,1,0,0,0,1,0,0,0,10,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,181,        if ((k == 1) || (k == n - 1)) {,0,0,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,182,            return n;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,185,"        long result = Math.round(binomialCoefficientDouble(n, k));",6,0,0,2,4,0,12,0,0,18,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,186,        if (result == Long.MAX_VALUE) {,6,1,0,1,3,0,0,0,0,7,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,187,            throw new ArithmeticException(,0,0,0,0,1,0,0,2,0,2,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,190,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,216,"        return Math.floor(Math.exp(binomialCoefficientLog(n, k)) + 0.5);",0,1,0,3,6,1,14,0,0,15,64,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,238,        if (n < k) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,239,            throw new IllegalArgumentException(,2,0,1,0,1,0,0,2,0,9,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,242,        if (n < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,243,            throw new IllegalArgumentException(,0,0,0,0,1,0,0,2,0,2,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,246,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,247,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,249,        if ((k == 1) || (k == n - 1)) {,0,0,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,250,            return Math.log((double)n);,0,0,0,2,4,1,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,252,        double logSum = 0;,2,0,0,0,0,0,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,255,        for (int i = k + 1; i <= n; i++) {,16,3,0,1,3,0,0,0,0,20,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,256,            logSum += Math.log((double)i);,0,0,0,2,4,0,0,0,0,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,260,        for (int i = 2; i <= n - k; i++) {,10,2,0,1,3,0,0,0,0,13,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,261,            logSum -= Math.log((double)i);,0,0,0,2,4,0,0,0,0,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,264,        return logSum;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,275,        return (Math.exp(x) + Math.exp(-x)) / 2.0;,6,2,0,3,6,1,12,0,0,21,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,287,        return ((Double.isNaN(x) && Double.isNaN(y)) || x == y);,6,5,0,4,8,1,18,0,0,29,56,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,301,        if ((x == null) || (y == null)) {,4,3,0,3,7,0,0,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,302,            return !((x == null) ^ (y == null));,4,3,0,3,6,1,0,0,0,8,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,304,        if (x.length != y.length) {,0,0,0,1,3,0,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,305,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,307,        for (int i = 0; i < x.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,308,"            if (!equals(x[i], y[i])) {",0,0,1,4,9,0,2,0,0,11,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,309,                return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,312,        return true;,4,0,0,0,0,1,0,0,0,6,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,347,            throw new ArithmeticException(,0,0,0,0,1,0,0,2,0,2,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,350,        return factorials[n];,2,1,1,1,2,1,0,0,0,7,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,375,"            throw new IllegalArgumentException(""must have n >= 0 for n!"");",0,0,0,1,2,0,0,2,0,3,62,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,395,"            throw new IllegalArgumentException(""must have n > 0 for n!"");",2,1,1,1,2,0,0,2,0,15,61,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,418,        if ((u == 0) || (v == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,419,            return (Math.abs(u) + Math.abs(v));,0,1,0,3,6,1,12,0,0,13,35,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,426,        if (u > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,427,            u = -u;,6,0,0,0,0,0,2,0,0,10,7,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,429,        if (v > 0) {,4,1,0,1,3,0,4,0,0,10,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,430,            v = -v;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,433,        int k = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,434,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,6,7,0,3,7,0,0,0,0,13,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,436,            u /= 2;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,437,            v /= 2;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,438,            k++; // cast out twos.,10,2,0,0,0,1,0,0,0,14,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,440,        if (k == 31) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,441,"            throw new ArithmeticException(""overflow: gcd is 2^31"");",0,0,0,1,2,0,0,2,0,3,55,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,445,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,8,3,0,3,6,0,0,0,0,12,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,451,            while ((t & 1) == 0) { // while t is even..,2,2,0,2,5,0,0,0,0,4,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,452,                t /= 2; // cast out twos,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,455,            if (t > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,456,                u = -t;,4,0,0,0,0,0,0,0,0,6,7,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,458,                v = t;,6,1,1,0,0,1,0,0,0,17,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,461,            t = (v - u) / 2;,6,2,0,1,2,0,0,0,0,9,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,464,        } while (t != 0);,2,1,0,1,3,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,465,        return -u * (1 << k); // gcd is u*2^k,4,2,1,1,2,1,0,0,0,22,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,475,        return new Double(value).hashCode();,2,0,0,2,4,1,2,2,0,6,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,486,        return Arrays.hashCode(value);,0,0,0,1,2,1,6,0,0,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,497,        return (x >= ZB) ? PB : NB;,10,1,0,1,2,1,0,0,0,12,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,509,        if (Double.isNaN(x)) {,6,1,0,2,5,0,6,0,0,13,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,510,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,512,        return (x >= 0.0) ? 1.0 : -1.0;,0,0,0,1,2,1,0,0,0,4,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,523,        if (Float.isNaN(x)) {,0,0,0,2,5,0,0,0,0,7,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,524,            return Float.NaN;,0,0,0,0,0,1,0,0,0,1,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,526,        return (x >= 0.0F) ? 1.0F : -1.0F;,14,2,0,1,2,1,0,0,0,19,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,536,        return (x >= 0) ? 1 : -1;,2,1,0,1,2,1,0,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,546,        return (x >= 0L) ? 1L : -1L;,2,1,0,1,2,1,0,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,557,        return (x >= ZS) ? PS : NS;,20,2,0,1,2,1,2,0,0,25,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,570,"        return Math.abs(mulAndCheck(a / gcd(a, b), b));",2,1,0,3,6,1,14,0,0,17,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,590,        return Math.log(x)/Math.log(base);,0,0,0,2,4,1,0,0,0,7,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,604,        long m = ((long)x) * ((long)y);,14,4,1,4,8,0,0,0,0,22,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,605,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,606,"            throw new ArithmeticException(""overflow: mul"");",0,0,0,1,2,0,0,0,0,3,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,608,        return (int)m;,2,0,0,1,2,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,623,"        String msg = ""overflow: multiply"";",2,0,0,0,0,0,0,2,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,624,        if (a > b) {,14,3,0,1,3,0,0,0,0,18,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,626,"            ret = mulAndCheck(b, a);",2,0,0,1,2,0,6,0,0,9,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,628,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,629,                if (b < 0) {,2,1,0,1,3,0,0,0,0,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,631,                    if (a >= Long.MAX_VALUE / b) {,8,1,0,1,3,1,0,2,0,12,30,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,632,                        ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,634,                        throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,636,                } else if (b > 0) {,6,1,0,1,4,0,0,0,0,8,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,638,                    if (Long.MIN_VALUE / b <= a) {,8,2,0,1,3,0,0,0,0,10,30,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,639,                        ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,641,                        throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,14,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,646,                    ret = 0;,2,0,0,0,0,0,0,0,0,3,8,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,648,            } else if (a > 0) {,2,1,0,1,4,0,0,0,0,3,19,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,653,                if (a <= Long.MAX_VALUE / b) {,8,2,0,1,3,0,0,0,0,10,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,654,                    ret = a * b;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,656,                    throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,660,                ret = 0;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,663,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,686,        if (Double.isNaN(d) || Double.isInfinite(d)) {,0,1,0,3,7,0,12,0,0,13,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,687,                return d;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,688,        } else if (d == 0) {,2,1,0,1,4,0,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,689,                return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,10,1,0,1,2,1,0,0,0,12,62,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,695,        long bits     = Double.doubleToLongBits(d);,2,0,0,1,2,0,6,0,0,8,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,696,        long sign     = bits & 0x8000000000000000L;,0,0,0,0,0,0,0,0,0,0,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,697,        long exponent = bits & 0x7ff0000000000000L;,4,1,0,0,0,0,0,0,0,5,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,698,        long mantissa = bits & 0x000fffffffffffffL;,0,0,0,0,0,0,0,0,0,0,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,700,        if (d * (direction - d) >= 0) {,6,3,0,2,5,0,0,0,0,9,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,702,                if (mantissa == 0x000fffffffffffffL) {,2,1,0,1,3,0,0,0,0,3,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,703,                        return Double.longBitsToDouble(sign |,0,0,0,0,1,1,0,0,0,2,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,706,                        return Double.longBitsToDouble(sign |,8,2,1,0,1,2,4,0,0,17,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,711,                if (mantissa == 0L) {,2,1,0,1,3,0,0,0,0,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,712,                        return Double.longBitsToDouble(sign |,2,1,0,0,1,1,4,0,0,7,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,716,                        return Double.longBitsToDouble(sign |,2,1,0,0,1,1,4,0,0,7,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,735,        if ((d == 0) || Double.isNaN(d) || Double.isInfinite(d)) {,2,2,0,4,9,0,12,0,0,16,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,736,            return d;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,740,        final long bits     = Double.doubleToLongBits(d);,6,0,0,1,2,1,6,0,0,13,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,741,        final long exponent = bits & 0x7ff0000000000000L;,4,1,0,0,0,1,0,0,0,6,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,742,        final long rest     = bits & 0x800fffffffffffffL;,0,0,0,0,0,0,0,0,0,0,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,745,        final long newBits = rest | (exponent + (((long) scaleFactor) << 52));,10,4,0,4,8,1,0,0,0,15,70,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,746,        return Double.longBitsToDouble(newBits);,0,0,0,1,2,1,6,0,0,6,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,770,         return a - TWO_PI * Math.floor((a + Math.PI - center) / TWO_PI);,14,5,0,2,4,1,4,0,0,23,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,783,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",4,0,0,1,2,1,6,0,0,10,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,800,            return (new BigDecimal,0,0,0,0,1,1,0,2,0,2,22,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,804,        } catch (NumberFormatException ex) {,2,0,0,1,4,0,0,2,0,4,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,805,            if (Double.isInfinite(x)) {,4,1,0,2,5,1,6,0,0,12,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,806,                return x;          ,2,0,0,0,0,1,8,2,0,12,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,808,                return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,823,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",4,0,0,1,2,1,6,0,0,10,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,839,        float sign = indicator(x);,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,840,"        float factor = (float)Math.pow(10.0f, scale) * sign;",4,1,0,2,4,0,6,0,0,11,52,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,841,"        return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor;",8,2,0,2,4,1,6,0,0,17,71,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,858,        switch (roundingMethod) {,0,0,0,1,3,0,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,860,            if (sign == -1) {,0,0,0,1,3,0,0,0,0,4,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,861,"                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",8,0,0,2,4,0,8,0,0,17,69,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,863,"                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));",6,0,0,2,4,0,8,0,0,15,68,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,865,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,867,"            unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",8,0,0,2,4,0,8,0,0,18,69,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,868,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,870,            if (sign == -1) {,2,1,0,1,3,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,871,"                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));",0,0,0,2,4,0,0,0,0,6,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,873,"                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",8,1,0,2,4,0,8,0,0,18,69,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,875,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,877,"            unscaled = nextAfter(unscaled, Double.NEGATIVE_INFINITY);",6,0,0,1,2,0,4,0,0,11,57,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,878,            double fraction = unscaled - Math.floor(unscaled);,6,1,0,1,2,0,6,0,0,14,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,879,            if (fraction > 0.5) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,880,                unscaled = Math.ceil(unscaled);,0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,882,                unscaled = Math.floor(unscaled);,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,884,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,887,            double fraction = unscaled - Math.floor(unscaled);,4,2,1,1,2,0,6,0,0,16,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,888,            if (fraction > 0.5) {,2,1,0,1,3,0,0,0,0,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,889,                unscaled = Math.ceil(unscaled);,2,0,0,1,2,0,6,0,0,9,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,890,            } else if (fraction < 0.5) {,4,1,0,1,4,0,0,0,0,6,28,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,891,                unscaled = Math.floor(unscaled);,2,0,0,1,2,0,6,0,0,9,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,894,                if (Math.floor(unscaled) / 2.0 == Math.floor(Math,0,0,0,1,4,0,0,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,896,                    unscaled = Math.floor(unscaled);,2,0,0,1,2,0,6,0,0,9,32,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,898,                    unscaled = Math.ceil(unscaled);,2,0,0,1,2,0,6,0,0,9,31,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,901,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,904,"            unscaled = nextAfter(unscaled, Double.POSITIVE_INFINITY);",10,3,0,1,2,0,4,0,0,18,57,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,905,            double fraction = unscaled - Math.floor(unscaled);,0,0,0,1,2,0,0,0,0,3,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,906,            if (fraction >= 0.5) {,2,1,0,1,3,0,0,0,0,3,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,907,                unscaled = Math.ceil(unscaled);,2,0,0,1,2,0,6,0,0,9,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,909,                unscaled = Math.floor(unscaled);,2,0,0,1,2,0,6,0,0,9,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,911,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,914,            if (unscaled != Math.floor(unscaled)) {,2,1,0,2,5,0,6,0,0,9,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,915,"                throw new ArithmeticException(""Inexact result from rounding"");",0,0,0,1,2,0,0,2,0,3,62,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,919,"            unscaled = Math.ceil(nextAfter(unscaled,  Double.POSITIVE_INFINITY));",8,1,0,2,4,0,8,0,0,18,69,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,920,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,922,"            throw new IllegalArgumentException(""Invalid rounding method."");",0,0,0,1,2,0,0,0,0,3,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,924,        return unscaled;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,938,        return (x == ZB) ? ZB : (x > ZB) ? PB : NB;,14,2,0,2,4,1,0,0,0,16,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,954,        if (Double.isNaN(x)) {,4,0,0,2,5,0,6,0,0,11,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,955,            return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,957,        return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;,4,2,0,2,4,1,0,0,0,7,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,972,        if (Float.isNaN(x)) {,0,0,0,2,5,0,0,0,0,7,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,973,            return Float.NaN;,4,0,0,0,0,1,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,975,        return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;,12,4,0,2,4,1,0,0,0,17,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,989,        return (x == 0) ? 0 : (x > 0) ? 1 : -1;,4,2,0,2,4,1,0,0,0,7,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,1003,        return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;,4,2,0,2,4,1,0,0,0,7,44,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,1018,        return (x == ZS) ? ZS : (x > ZS) ? PS : NS;,14,2,0,2,4,1,0,0,0,16,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,1029,        return (Math.exp(x) - Math.exp(-x)) / 2.0;,2,2,0,3,6,1,10,0,0,15,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,1043,        long s = (long)x - (long)y;,0,0,0,2,4,0,0,0,0,6,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,1044,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,1045,"            throw new ArithmeticException(""overflow: subtract"");",0,0,0,1,2,0,0,2,0,3,52,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,1047,        return (int)s;,8,0,0,1,2,1,0,0,0,8,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,1062,"        String msg = ""overflow: subtract"";",4,0,0,0,0,3,0,2,0,10,34,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,1063,        if (b == Long.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,1064,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,1065,                ret = a - b;,6,1,0,0,0,0,0,0,0,8,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,1067,                throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,1071,"            ret = addAndCheck(a, -b, msg);",8,1,0,1,2,0,6,0,0,17,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,1073,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,430,            u /= 2;,0,0,0,0,0,0,0,0,0,0,7,4,0.05,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,431,            v /= 2;,12,1,0,0,0,0,0,0,0,15,7,3,0.05,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,432,            k++; // cast out twos.,0,0,0,0,0,0,0,0,0,0,22,4,0.05,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,450,                u = -t;,6,0,0,0,0,0,0,4,0,12,7,3,0.03448,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,446,                t /= 2; // cast out twos,2,0,0,0,0,0,0,0,0,3,24,8,0.0303,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,412,        if (u * v == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.02222,1,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,413,            return (Math.abs(u) + Math.abs(v));,0,0,0,3,6,1,0,0,0,10,35,4,0.02222,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,420,        if (u > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.02222,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,421,            u = -u;,4,0,0,0,0,0,0,0,0,6,7,6,0.02222,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,423,        if (v > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.02222,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,424,            v = -v;,2,0,0,0,0,0,0,2,0,4,7,7,0.02222,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,427,        int k = 0;,0,0,0,0,0,0,8,0,0,8,10,5,0.02222,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,428,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,6,7,0,3,7,0,0,0,0,13,69,4,0.02222,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,434,        if (k == 31) {,0,0,0,1,3,0,0,0,0,4,14,4,0.02222,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,439,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,8,3,0,3,6,0,0,0,0,12,46,5,0.02222,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,445,            while ((t & 1) == 0) { // while t is even..,2,2,0,2,5,0,0,0,0,4,43,6,0.02222,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,449,            if (t > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.02222,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,452,                v = t;,4,0,0,0,0,0,0,0,0,5,6,8,0.02222,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,455,            t = (v - u) / 2;,6,2,0,1,2,0,0,0,0,9,16,6,0.02222,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,458,        } while (t != 0);,20,4,0,1,3,0,0,2,0,26,17,3,0.02222,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,459,        return -u * (1 << k); // gcd is u*2^k,4,2,0,1,2,1,0,0,0,7,37,4,0.02222,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,63,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,64,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,77,        long s = (long)x + (long)y;,6,1,0,2,4,0,0,0,0,7,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,78,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,79,"            throw new ArithmeticException(""overflow: add"");",0,0,0,1,2,0,0,2,0,3,47,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,81,        return (int)s;,0,0,0,1,2,1,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,95,"        return addAndCheck(a, b, ""overflow: add"");",4,1,0,1,2,2,12,2,0,21,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,111,        if (a > b) {,6,2,0,1,3,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,113,"            ret = addAndCheck(b, a, msg);",2,0,0,1,2,0,8,0,0,11,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,117,            if (a < 0) {,4,1,0,1,3,3,0,4,0,12,12,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,118,                if (b < 0) {,2,1,0,1,3,0,0,0,0,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,120,                    if (Long.MIN_VALUE - b <= a) {,12,3,0,1,3,0,0,0,0,15,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,121,                        ret = a + b;,8,2,0,0,0,0,0,0,0,11,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,123,                        throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,127,                    ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,134,                if (a <= Long.MAX_VALUE - b) {,8,2,0,1,3,0,0,0,0,10,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,135,                    ret = a + b;,10,1,0,0,0,0,0,0,0,13,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,137,                    throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,141,        return ret;,8,0,0,0,0,2,0,4,0,13,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,171,        if (n < k) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,172,            throw new IllegalArgumentException(,0,0,0,0,1,0,0,2,0,2,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,175,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,176,            throw new IllegalArgumentException(,0,0,0,0,1,0,0,2,0,2,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,179,        if ((n == k) || (k == 0)) {,4,0,0,3,7,0,0,0,0,5,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,180,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,182,        if ((k == 1) || (k == n - 1)) {,6,4,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,183,            return n;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,186,"        long result = Math.round(binomialCoefficientDouble(n, k));",2,0,0,2,4,0,10,0,0,12,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,187,        if (result == Long.MAX_VALUE) {,6,1,0,1,3,0,0,0,0,7,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,188,            throw new ArithmeticException(,0,0,0,0,1,0,0,2,0,2,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,191,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,217,"        return Math.floor(Math.exp(binomialCoefficientLog(n, k)) + 0.5);",0,3,0,3,6,1,20,0,0,23,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,239,        if (n < k) {,4,1,1,1,3,0,0,0,0,11,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,240,            throw new IllegalArgumentException(,0,0,0,0,1,0,0,2,0,2,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,243,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,244,            throw new IllegalArgumentException(,0,0,0,0,1,0,0,2,0,2,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,247,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,248,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,250,        if ((k == 1) || (k == n - 1)) {,6,4,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,251,            return Math.log((double)n);,2,0,0,2,4,1,4,0,0,6,27,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,253,        double logSum = 0;,2,0,0,0,0,0,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,256,        for (int i = k + 1; i <= n; i++) {,10,2,0,1,3,0,0,0,0,13,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,257,            logSum += Math.log((double)i);,4,0,0,2,4,0,4,0,0,9,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,261,        for (int i = 2; i <= n - k; i++) {,14,3,1,1,3,0,0,0,0,22,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,262,            logSum -= Math.log((double)i);,4,0,0,2,4,0,4,0,0,9,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,265,        return logSum;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,276,        return (Math.exp(x) + Math.exp(-x)) / 2.0;,2,3,0,3,6,1,18,0,0,24,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,288,        return ((Double.isNaN(x) && Double.isNaN(y)) || x == y);,4,3,0,4,8,1,12,0,0,19,56,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,302,        if ((x == null) || (y == null)) {,28,11,0,3,7,1,10,0,0,50,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,303,            return !((x == null) ^ (y == null));,4,3,0,3,6,1,0,0,0,8,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,305,        if (x.length != y.length) {,8,1,0,1,3,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,306,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,308,        for (int i = 0; i < x.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,309,"            if (!equals(x[i], y[i])) {",2,0,1,4,9,0,2,0,0,14,26,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,310,                return false;,4,3,0,0,0,1,12,0,0,20,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,313,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,339,        long result = Math.round(factorialDouble(n));,2,0,0,2,4,0,20,0,0,22,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,340,        if (result == Long.MAX_VALUE) {,10,1,0,1,3,1,0,2,0,14,31,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,341,            throw new ArithmeticException(,0,0,0,0,1,0,0,2,0,2,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,344,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,368,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,369,"            throw new IllegalArgumentException(""must have n >= 0 for n!"");",0,0,0,1,2,0,0,2,0,3,62,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,371,        return Math.floor(Math.exp(factorialLog(n)) + 0.5);,0,1,0,3,6,1,12,0,0,13,51,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,388,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,389,"            throw new IllegalArgumentException(""must have n > 0 for n!"");",0,0,0,1,2,0,4,2,0,7,61,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,391,        double logSum = 0;,4,0,0,0,0,0,0,0,0,5,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,392,        for (int i = 2; i <= n; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,393,            logSum += Math.log((double)i);,4,0,0,2,4,0,4,0,0,9,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,395,        return logSum;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,435,"            throw new ArithmeticException(""overflow: gcd is 2^31"");",2,0,0,1,2,0,0,2,0,5,55,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,469,        return new Double(value).hashCode();,2,0,0,2,4,1,2,2,0,6,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,480,        return Arrays.hashCode(value);,0,0,0,1,2,1,6,0,0,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,491,        return (x >= ZB) ? PB : NB;,18,2,0,1,2,1,0,0,0,21,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,503,        if (Double.isNaN(x)) {,0,0,0,2,5,0,6,0,0,6,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,504,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,506,        return (x >= 0.0) ? 1.0 : -1.0;,2,1,0,1,2,1,0,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,517,        if (Float.isNaN(x)) {,0,0,0,2,5,0,6,0,0,6,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,518,            return Float.NaN;,4,0,0,0,0,1,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,520,        return (x >= 0.0F) ? 1.0F : -1.0F;,2,1,0,1,2,1,0,0,0,4,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,530,        return (x >= 0) ? 1 : -1;,4,1,0,1,2,1,0,0,0,6,25,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,540,        return (x >= 0L) ? 1L : -1L;,2,1,0,1,2,1,0,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,551,        return (x >= ZS) ? PS : NS;,0,0,0,1,2,1,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,564,"        return Math.abs(mulAndCheck(a / gcd(a, b), b));",2,1,0,3,6,1,14,0,0,17,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,584,        return Math.log(x)/Math.log(base);,0,1,0,2,4,1,12,0,0,13,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,598,        long m = ((long)x) * ((long)y);,8,1,0,4,8,0,4,2,0,15,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,599,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,2,0,0,1,3,1,0,2,0,5,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,600,"            throw new ArithmeticException(""overflow: mul"");",0,0,0,1,2,0,0,2,0,3,47,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,602,        return (int)m;,2,0,0,1,2,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,617,"        String msg = ""overflow: multiply"";",2,0,0,0,0,0,0,2,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,618,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,620,"            ret = mulAndCheck(b, a);",2,0,0,1,2,0,6,0,0,9,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,622,            if (a < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,623,                if (b < 0) {,2,1,0,1,3,0,0,0,0,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,625,                    if (a >= Long.MAX_VALUE / b) {,8,2,0,1,3,0,0,0,0,10,30,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,626,                        ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,628,                        throw new ArithmeticException(msg);,4,0,0,1,2,0,0,2,0,7,35,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,630,                } else if (b > 0) {,4,1,0,1,4,0,6,0,0,12,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,632,                    if (Long.MIN_VALUE / b <= a) {,10,2,0,1,3,3,4,2,0,21,30,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,633,                        ret = a * b;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,635,                        throw new ArithmeticException(msg);,0,1,0,1,2,0,14,0,0,15,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,640,                    ret = 0;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,642,            } else if (a > 0) {,2,1,0,1,4,0,0,0,0,3,19,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,647,                if (a <= Long.MAX_VALUE / b) {,8,2,0,1,3,0,0,0,0,10,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,648,                    ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,650,                    throw new ArithmeticException(msg);,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,654,                ret = 0;,2,1,0,0,0,0,0,0,0,3,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,657,        return ret;,4,0,0,0,0,1,0,0,0,4,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,680,        if (Double.isNaN(d) || Double.isInfinite(d)) {,0,0,0,3,7,0,0,0,0,10,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,681,                return d;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,682,        } else if (d == 0) {,0,0,0,1,4,0,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,683,                return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,10,1,0,1,2,1,0,0,0,12,62,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,689,        long bits     = Double.doubleToLongBits(d);,2,0,0,1,2,0,6,0,0,8,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,690,        long sign     = bits & 0x8000000000000000L;,4,1,0,0,0,0,0,0,0,5,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,691,        long exponent = bits & 0x7ff0000000000000L;,4,1,0,0,0,0,0,0,0,5,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,692,        long mantissa = bits & 0x000fffffffffffffL;,4,1,0,0,0,0,0,0,0,5,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,694,        if (d * (direction - d) >= 0) {,8,3,0,2,5,0,0,0,0,12,31,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,696,                if (mantissa == 0x000fffffffffffffL) {,0,0,0,1,3,0,0,0,0,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,697,                        return Double.longBitsToDouble(sign |,2,0,1,0,1,2,0,2,0,9,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,700,                        return Double.longBitsToDouble(sign |,0,0,0,0,1,1,0,0,0,2,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,705,                if (mantissa == 0L) {,6,2,0,1,3,0,0,0,0,8,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,706,                        return Double.longBitsToDouble(sign |,2,1,0,0,1,1,4,0,0,7,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,710,                        return Double.longBitsToDouble(sign |,2,1,0,0,1,1,4,0,0,7,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,729,        if ((d == 0) || Double.isNaN(d) || Double.isInfinite(d)) {,8,3,0,4,9,0,12,0,0,25,58,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,730,            return d;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,734,        final long bits     = Double.doubleToLongBits(d);,2,0,0,1,2,1,6,0,0,9,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,735,        final long exponent = bits & 0x7ff0000000000000L;,4,1,0,0,0,1,0,0,0,6,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,736,        final long rest     = bits & 0x800fffffffffffffL;,6,2,1,0,0,1,0,0,0,14,49,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,739,        final long newBits = rest | (exponent + (((long) scaleFactor) << 52));,0,0,0,4,8,0,0,0,0,12,70,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,740,        return Double.longBitsToDouble(newBits);,0,0,0,1,2,1,0,0,0,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,764,         return a - TWO_PI * Math.floor((a + Math.PI - center) / TWO_PI);,14,5,0,2,4,1,4,0,0,23,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,777,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",0,0,0,1,2,1,0,0,0,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,794,            return (new BigDecimal,0,0,0,0,1,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,798,        } catch (NumberFormatException ex) {,10,0,0,1,4,3,0,2,0,16,36,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,799,            if (Double.isInfinite(x)) {,0,0,0,2,5,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,800,                return x;          ,2,0,0,0,0,1,0,0,0,2,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,802,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,817,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",0,0,0,1,2,1,0,0,0,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,833,        float sign = indicator(x);,2,0,0,1,2,0,4,0,0,6,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,834,"        float factor = (float)Math.pow(10.0f, scale) * sign;",4,1,0,2,4,0,6,0,0,11,52,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,835,"        return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor;",6,2,0,2,4,1,16,0,0,24,71,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,852,        switch (roundingMethod) {,2,0,0,1,3,0,0,0,0,2,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,854,            if (sign == -1) {,0,0,0,1,3,0,0,0,0,4,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,855,"                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",0,0,0,2,4,0,0,0,0,6,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,857,"                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));",0,0,0,2,4,0,0,0,0,6,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,859,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,861,"            unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",6,0,0,2,4,0,8,0,0,15,69,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,862,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,864,            if (sign == -1) {,2,1,0,1,3,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,865,"                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));",10,0,0,2,4,0,8,0,0,20,68,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,867,"                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",0,0,0,2,4,0,0,0,0,6,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,869,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,871,"            unscaled = nextAfter(unscaled, Double.NEGATIVE_INFINITY);",6,0,0,1,2,0,4,0,0,11,57,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,872,            double fraction = unscaled - Math.floor(unscaled);,6,2,0,1,2,0,10,0,0,18,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,873,            if (fraction > 0.5) {,2,1,0,1,3,0,0,0,0,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,874,                unscaled = Math.ceil(unscaled);,4,0,0,1,2,0,6,0,0,12,31,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,876,                unscaled = Math.floor(unscaled);,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,878,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,881,            double fraction = unscaled - Math.floor(unscaled);,0,0,0,1,2,0,0,0,0,3,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,882,            if (fraction > 0.5) {,2,1,0,1,3,0,0,0,0,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,883,                unscaled = Math.ceil(unscaled);,4,1,0,1,2,0,10,0,0,17,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,884,            } else if (fraction < 0.5) {,2,1,0,1,4,0,0,0,0,3,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,885,                unscaled = Math.floor(unscaled);,0,0,1,1,2,0,10,0,0,22,32,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,888,                if (Math.floor(unscaled) / 2.0 == Math.floor(Math,0,0,0,1,4,0,0,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,890,                    unscaled = Math.floor(unscaled);,2,0,0,1,2,0,6,0,0,9,32,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,892,                    unscaled = Math.ceil(unscaled);,4,0,0,1,2,0,6,0,0,12,31,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,895,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,898,"            unscaled = nextAfter(unscaled, Double.POSITIVE_INFINITY);",12,1,0,1,2,1,4,4,0,23,57,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,899,            double fraction = unscaled - Math.floor(unscaled);,0,0,0,1,2,0,0,0,0,3,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,900,            if (fraction >= 0.5) {,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,901,                unscaled = Math.ceil(unscaled);,2,0,0,1,2,0,6,0,0,9,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,903,                unscaled = Math.floor(unscaled);,2,0,0,1,2,0,6,0,0,9,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,905,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,908,            if (unscaled != Math.floor(unscaled)) {,2,1,0,2,5,0,6,0,0,9,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,909,"                throw new ArithmeticException(""Inexact result from rounding"");",0,0,0,1,2,0,0,2,0,3,62,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,913,"            unscaled = Math.ceil(nextAfter(unscaled,  Double.POSITIVE_INFINITY));",0,0,0,2,4,0,0,0,0,6,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,914,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,916,"            throw new IllegalArgumentException(""Invalid rounding method."");",0,0,0,1,2,0,0,2,0,3,63,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,918,        return unscaled;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,932,        return (x == ZB) ? ZB : (x > ZB) ? PB : NB;,14,2,0,2,4,1,0,0,0,16,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,948,        if (Double.isNaN(x)) {,2,0,0,2,5,0,6,0,0,9,22,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,949,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,951,        return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;,4,2,0,2,4,1,0,0,0,7,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,966,        if (Float.isNaN(x)) {,2,0,0,2,5,0,6,0,0,9,21,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,967,            return Float.NaN;,4,0,0,0,0,1,6,0,0,10,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,969,        return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;,4,2,0,2,4,1,0,0,0,7,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,983,        return (x == 0) ? 0 : (x > 0) ? 1 : -1;,4,2,0,2,4,1,0,0,0,7,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,997,        return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;,4,2,0,2,4,1,0,0,0,7,44,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1012,        return (x == ZS) ? ZS : (x > ZS) ? PS : NS;,14,2,0,2,4,1,0,0,0,16,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1023,        return (Math.exp(x) - Math.exp(-x)) / 2.0;,2,2,0,3,6,1,16,0,0,21,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1037,        long s = (long)x - (long)y;,2,0,0,2,4,0,6,0,0,8,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1038,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,0,0,0,1,3,0,0,0,0,4,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1039,"            throw new ArithmeticException(""overflow: subtract"");",0,0,0,1,2,0,4,2,0,7,52,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1041,        return (int)s;,2,0,0,1,2,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1056,"        String msg = ""overflow: subtract"";",2,0,0,0,0,0,0,2,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1057,        if (b == Long.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1058,            if (a < 0) {,8,3,0,1,3,0,0,0,0,12,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1059,                ret = a - b;,6,1,0,0,0,0,0,0,0,8,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1061,                throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1065,"            ret = addAndCheck(a, -b, msg);",4,0,0,1,2,0,6,0,0,12,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1067,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,36,    private static UnivariateRealSolverFactory factory = null;,2,0,0,0,0,2,0,2,0,6,58,2,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,128,"        return bracket( function, initial, lowerBound, upperBound,",0,0,0,0,1,1,10,0,0,10,58,5,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,171,        if (function == null) {,0,0,0,1,3,0,0,0,0,4,23,4,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,174,        if (maximumIterations <= 0)  {,4,1,0,1,3,1,2,0,0,8,30,3,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,178,        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {,0,0,0,1,3,0,0,0,0,4,79,4,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,119,        return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,132,        return Double.MAX_VALUE;,4,0,0,0,0,1,0,0,0,4,24,5,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,145,        double d = getDenominatorDegreesOfFreedom();,0,0,0,1,2,0,0,0,0,3,44,4,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,147,            ret = d / (d - 2.0);,6,2,0,1,2,0,0,0,0,9,20,4,0.5,1,1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,148,        return ret;,6,0,0,0,0,1,0,0,0,6,11,3,0.5,1,1
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,67,        UnivariateRealFunction rootFindingFunction =,2,0,0,0,0,0,0,2,0,4,44,4,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,80,        double lowerBound = getDomainLowerBound(p);,2,0,0,1,2,0,4,0,0,6,43,5,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,81,        double upperBound = getDomainUpperBound(p);,0,0,0,1,2,0,0,0,0,3,43,4,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,82,        double[] bracket = null;,2,0,0,1,2,0,0,0,0,2,24,5,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,84,            bracket = UnivariateRealSolverUtils.bracket(,2,0,0,0,1,0,4,0,0,7,44,6,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,68,            new UnivariateRealFunction() {,0,0,0,1,3,0,0,2,0,2,30,7,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,106,        return super.inverseCumulativeProbability(p);,4,0,0,1,2,1,0,0,0,4,45,5,0.33333,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,61,        if (p < 0.0 || p > 1.0) {,4,3,0,1,3,0,0,0,0,7,25,4,0.33333,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,100,        if (p == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.25,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,103,        if (p == 1) {,2,1,0,1,3,0,0,0,0,3,13,4,0.25,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,75,            double n = getNumeratorDegreesOfFreedom();,0,0,0,1,2,0,0,0,0,3,42,4,0.14286,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,76,            double m = getDenominatorDegreesOfFreedom();,2,0,0,1,2,0,2,0,0,4,44,7,0.14286,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,78,"            ret = Beta.regularizedBeta((n * x) / (m + n * x),",12,4,0,2,5,0,4,0,0,21,49,6,0.14286,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,72,        if (x <= 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.125,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,82,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.125,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,170,        return numeratorDegreesOfFreedom;,2,0,0,0,0,1,0,0,0,2,33,4,0.125,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,192,        return denominatorDegreesOfFreedom;,2,0,0,0,0,1,10,0,0,12,35,4,0.125,0,0
defect4j,math,org/apache/commons/math/complex/Complex,96,277,        if (isNaN()) {,0,0,0,2,5,0,2,0,0,2,14,5,1.0,0,0
defect4j,math,org/apache/commons/math/complex/Complex,96,280,        return 37 * (17 * MathUtils.hash(imaginary) + ,0,0,0,1,3,1,0,0,0,5,45,4,1.0,0,0
defect4j,math,org/apache/commons/math/complex/Complex,96,363,"        return createComplex(real * rhs.real - imaginary * rhs.imaginary,",12,3,0,0,1,1,2,0,0,17,65,5,0.05263,0,0
defect4j,math,org/apache/commons/math/complex/Complex,96,358,        if (Double.isInfinite(real) || Double.isInfinite(imaginary) ||,2,0,0,2,5,0,0,0,0,2,62,6,0.04348,0,0
defect4j,math,org/apache/commons/math/complex/Complex,96,258,                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); ,0,0,0,8,16,0,0,0,0,24,179,4,0.03448,1,0
defect4j,math,org/apache/commons/math/complex/Complex,96,355,        if (isNaN() || rhs.isNaN()) {,0,0,0,3,7,0,0,0,0,10,29,4,0.03448,0,0
defect4j,math,org/apache/commons/math/complex/Complex,96,255,                if (rhs.isNaN()) {,0,0,0,2,5,0,4,0,0,4,18,10,0.03125,0,0
defect4j,math,org/apache/commons/math/complex/Complex,96,263,            },0,0,0,0,1,0,0,0,0,1,1,4,0.03125,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,141,                throw new IllegalArgumentException,0,0,0,0,0,0,0,2,0,2,34,8,0.33333,1,1
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverImpl,97,169,        return absoluteAccuracy;,2,0,0,0,0,1,0,0,0,2,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,193,"                setResult(x1, i);",0,0,0,1,2,0,0,0,0,3,17,4,0.0625,1,1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,194,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0625,1,1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,182,                x0 = x1;,12,1,0,0,0,0,0,0,0,15,8,3,0.03846,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,183,                x1 = x2;,4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,184,                x2 = x0;,4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,185,                y0 = y1;,4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,186,                y1 = y2;,4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,187,                y2 = y0;,4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,151,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.03704,0,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverImpl,97,140,        this.result = result;,6,1,1,0,0,0,0,0,0,16,21,1,0.03704,0,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverImpl,97,141,        this.iterationCount = iterationCount;,4,0,0,0,0,0,0,0,0,5,37,4,0.03704,0,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverImpl,97,142,        this.resultComputed = true;,0,0,0,0,0,0,0,0,0,0,27,4,0.03704,0,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverImpl,97,143,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,147,"            ret = solve(min, yMin, max, yMax, min, yMin);",2,0,0,1,2,0,14,0,0,17,45,6,0.03571,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,175,        double delta = x1 - x0;,6,1,0,0,0,0,0,0,0,7,23,5,0.03571,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,176,        double oldDelta = delta;,4,0,0,0,0,0,0,0,0,4,24,5,0.03571,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,178,        int i = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.03571,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,179,        while (i < maximalIterationCount) {,4,1,0,1,3,0,0,0,0,5,35,4,0.03571,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,180,            if (Math.abs(y2) < Math.abs(y1)) {,2,1,0,3,7,0,12,0,0,16,34,0,0.03571,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,189,            if (Math.abs(y1) <= functionValueAccuracy) {,4,1,0,2,5,0,6,0,0,12,44,0,0.03571,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,986,        if (v.length != this.getColumnDimension()) {,0,0,0,2,5,0,0,0,0,7,44,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,989,        final int nRows = this.getRowDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,990,        final int nCols = this.getColumnDimension();,0,0,0,1,2,0,0,0,0,3,44,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,991,        final BigDecimal[] out = new BigDecimal[v.length];,0,0,0,2,4,0,0,0,0,6,50,4,0.33333,1,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,992,        for (int row = 0; row < nRows; row++) {,8,1,0,1,3,0,6,0,0,16,39,3,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,993,            BigDecimal sum = ZERO;,0,0,0,0,0,0,0,0,0,0,22,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,994,            for (int i = 0; i < nCols; i++) {,8,1,0,1,3,0,0,0,0,10,33,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,995,                sum = sum.add(data[row][i].multiply(v[i]));,2,0,1,5,10,0,6,0,0,19,43,8,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,997,            out[row] = sum;,2,0,1,1,2,0,0,0,0,7,15,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,774,        final int nRows = this.getRowDimension();,6,1,0,1,2,0,4,0,0,11,41,5,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,775,        final int nCols = this.getColumnDimension();,2,0,0,1,2,1,2,0,0,5,44,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,776,        if (v.length != nCols) {,0,0,0,1,3,0,0,0,0,4,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,779,        final double[] out = new double[v.length];,0,0,0,2,4,0,0,0,0,6,42,4,0.33333,1,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,780,        for (int row = 0; row < nRows; row++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,781,            final double[] dataRow = data[row];,8,0,1,2,4,1,12,0,0,25,35,1,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,782,            double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,7,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,783,            for (int i = 0; i < nCols; i++) {,8,1,0,1,3,0,0,0,0,10,33,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,784,                sum += dataRow[i] * v[i];,2,1,1,2,4,0,0,0,0,12,25,8,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,786,            out[row] = sum;,0,0,0,1,2,0,0,0,0,3,15,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,154,                if (d[r].length != nCols) {,4,1,1,2,5,0,0,0,0,9,27,8,0.05263,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,138,"    public BigMatrixImpl(BigDecimal[][] d, boolean copyArray) {",6,0,0,3,7,1,0,2,0,9,59,2,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,139,        if (copyArray) {,2,0,0,1,3,0,0,0,0,2,16,4,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,142,            if (d == null) {,2,1,0,1,3,0,0,0,0,3,16,6,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,145,            final int nRows = d.length;,0,0,0,0,0,0,0,0,0,0,27,4,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,146,            if (nRows == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,149,            final int nCols = d[0].length;,0,0,0,1,2,0,0,0,0,3,30,4,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,150,            if (nCols == 0) {,0,0,0,1,3,0,0,0,0,1,17,8,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,153,            for (int r = 1; r < nRows; r++) {,8,1,0,1,3,0,0,0,0,10,33,6,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,158,            data = d;,0,0,0,0,0,0,0,0,0,0,9,4,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,160,        lu = null;,0,0,0,0,0,0,0,0,0,0,10,4,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,161,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,947,        return data.length;,6,1,1,0,0,1,0,0,0,12,19,1,0.03226,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,956,        return data[0].length;,2,0,1,1,2,1,0,0,0,4,22,5,0.03226,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,56,    protected BigDecimal data[][] = null;,2,0,0,2,4,1,0,2,0,5,37,2,0.03125,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,61,    protected BigDecimal lu[][] = null;,2,0,0,2,4,1,0,2,0,5,35,2,0.03125,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,64,    protected int[] permutation = null;,2,0,0,1,2,1,0,0,0,3,35,2,0.03125,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,67,    protected int parity = 1;,2,0,0,0,0,1,0,0,0,3,25,2,0.03125,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,70,    private int roundingMode = BigDecimal.ROUND_HALF_UP;,6,0,0,0,0,1,0,0,0,7,52,2,0.03125,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,73,    private int scale = 64;,2,0,0,0,0,1,0,0,0,3,23,2,0.03125,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,76,    private static final BigDecimal TOO_SMALL = new BigDecimal(10E-12);,2,0,0,1,2,3,0,4,0,9,67,2,0.03125,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,79,    static final BigDecimal ZERO = new BigDecimal(0);,2,0,0,1,2,2,0,4,0,8,49,2,0.03125,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,81,    static final BigDecimal ONE = new BigDecimal(1);,12,3,0,1,2,2,0,4,0,21,48,1,0.03125,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,710,        if (a==0 || b==0){,6,3,0,1,3,0,0,0,0,10,18,3,1.0,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,99,711,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,713,"        int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));",4,1,0,3,6,0,14,0,0,19,50,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,714,        return lcm;,2,1,0,0,0,1,12,0,0,15,11,3,1.0,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,99,560,            u /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.14815,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,561,            v /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.14815,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,562,            k++; // cast out twos.,2,0,0,0,0,0,0,0,0,3,22,6,0.14815,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,578,                t /= 2; // cast out twos,2,0,0,0,0,0,0,0,0,3,24,8,0.08889,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,540,        int u = p;,8,0,0,0,0,0,0,0,0,9,10,3,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,541,        int v = q;,0,0,0,0,0,0,0,0,0,0,10,4,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,542,        if ((u == 0) || (v == 0)) {,0,0,0,3,7,0,0,0,0,10,27,4,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,550,        if (u > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,551,            u = -u;,4,0,0,0,0,0,0,0,0,6,7,6,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,553,        if (v > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,554,            v = -v;,4,0,0,0,0,0,0,0,0,6,7,6,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,557,        int k = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,558,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,6,7,0,3,7,0,0,0,0,13,69,4,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,564,        if (k == 31) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,571,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,8,3,0,3,6,0,0,0,0,12,46,5,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,577,            while ((t & 1) == 0) { // while t is even..,0,0,0,2,5,0,0,0,0,7,43,4,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,581,            if (t > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,582,                u = -t;,4,0,0,0,0,0,0,0,0,6,7,8,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,584,                v = t;,4,0,0,0,0,0,0,0,0,5,6,8,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,587,            t = (v - u) / 2;,8,2,0,1,2,0,0,0,0,12,16,3,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,590,        } while (t != 0);,2,1,0,1,3,0,0,0,0,3,17,4,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,591,        return -u * (1 << k); // gcd is u*2^k,4,2,0,1,2,1,0,0,0,7,37,4,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,748,        long m = ((long)x) * ((long)y);,2,1,1,4,8,0,0,0,0,8,31,6,0.03448,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,749,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,20,4,0,1,3,0,0,0,0,25,53,4,0.03448,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,752,        return (int)m;,0,0,0,1,2,1,0,0,0,4,14,4,0.03448,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,58,        return (EstimatedParameter[]) parameters.toArray(new EstimatedParameter[parameters.size()]);,4,1,0,5,10,1,10,4,0,19,92,3,1.0,0,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,162,        updateJacobian();,0,0,0,1,2,0,0,0,0,3,17,4,0.5,0,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,165,        final int rows = problem.getMeasurements().length;,4,0,0,1,2,1,4,0,0,9,50,4,0.5,0,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,166,        final int cols = problem.getAllParameters().length;,6,0,0,1,2,1,0,4,0,11,51,2,0.5,1,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,167,        final int max  = cols * rows;,6,1,0,0,0,1,0,0,0,8,29,4,0.5,0,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,168,        double[][] jTj = new double[cols][cols];,2,0,1,4,8,0,0,0,0,6,40,5,0.5,0,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,169,        for (int i = 0; i < cols; ++i) {,8,1,0,1,3,0,0,0,0,10,32,4,0.5,0,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,170,            for (int j = i; j < cols; ++j) {,10,1,0,1,3,0,0,0,0,12,32,6,0.5,0,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,171,                double sum = 0;,10,1,0,0,0,0,0,0,0,11,15,3,0.5,0,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,172,                for (int k = 0; k < max; k += cols) {,12,1,1,1,3,0,0,0,0,21,37,7,0.5,0,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,173,                    sum += jacobian[k + i] * jacobian[k + j];,10,3,1,2,4,0,0,0,0,18,41,10,0.5,0,0
defect4j,math,org/apache/commons/math/estimation/GaussNewtonEstimator,100,172,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,735,                for (int j = 0; j < nColB; j++) {,8,1,0,1,3,0,0,0,0,10,33,8,0.09091,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,736,                    bp[i][j] -= bp[col][j] * lu[i][col];,0,1,1,6,12,0,0,0,0,20,36,10,0.09091,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,747,                for (int j = 0; j < nColB; j++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.09091,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,748,                    bp[i][j] -= bp[col][j] * lu[i][col];,0,1,1,6,12,0,0,0,0,20,36,10,0.09091,0,0
defect4j,math,org/apache/commons/math/estimation/WeightedMeasurement,100,80,                             boolean ignored) {,0,0,0,0,2,0,0,0,0,2,18,4,0.09091,0,0
defect4j,math,org/apache/commons/math/estimation/WeightedMeasurement,100,81,    this.weight        = weight;,4,0,0,0,0,0,0,0,0,5,28,4,0.09091,0,0
defect4j,math,org/apache/commons/math/estimation/WeightedMeasurement,100,82,    this.measuredValue = measuredValue;,8,0,0,0,0,0,0,0,0,9,35,3,0.09091,0,0
defect4j,math,org/apache/commons/math/estimation/WeightedMeasurement,100,83,    this.ignored       = ignored;,0,0,0,0,0,0,0,0,0,0,29,4,0.09091,0,0
defect4j,math,org/apache/commons/math/estimation/WeightedMeasurement,100,84,  },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0
defect4j,math,org/apache/commons/math/estimation/WeightedMeasurement,100,146,    this.ignored = ignored;,4,0,0,0,0,0,0,0,0,5,23,4,0.09091,0,0
defect4j,math,org/apache/commons/math/estimation/WeightedMeasurement,100,147,  },4,1,0,0,1,0,0,0,0,6,1,5,0.09091,0,0
defect4j,math,org/apache/commons/math/estimation/GaussNewtonEstimator,100,156,                for (int i = 0; i < parameters.length; ++i) {,10,1,0,1,3,0,0,0,0,12,45,8,0.09091,0,0
defect4j,math,org/apache/commons/math/estimation/GaussNewtonEstimator,100,157,"                    parameters[i].setEstimate(parameters[i].getEstimate() + dX.getEntry(i, 0));",0,1,1,5,10,0,10,0,0,19,75,11,0.09091,0,0
defect4j,math,org/apache/commons/math/estimation/GaussNewtonEstimator,100,162,            },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0
defect4j,math,org/apache/commons/math/estimation/GaussNewtonEstimator,100,165,            previous = cost;,0,0,0,0,0,0,0,0,0,0,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/estimation/GaussNewtonEstimator,100,166,            updateResidualsAndCost();,0,0,0,1,2,0,2,0,0,2,25,7,0.09091,0,0
defect4j,math,org/apache/commons/math/estimation/GaussNewtonEstimator,100,168,        } while ((getCostEvaluations() < 2) ||,0,2,0,2,6,0,2,0,0,4,38,4,0.09091,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,591,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,720,        int nCol = this.getColumnDimension();,4,0,0,1,2,1,2,4,0,11,37,4,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,721,        int nColB = b.getColumnDimension();,2,0,0,1,2,0,4,0,0,6,35,5,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,722,        int nRowB = b.getRowDimension();,2,0,0,1,2,0,4,0,0,6,32,5,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,725,        double[][] bp = new double[nRowB][nColB];,2,0,1,4,8,0,0,0,0,6,41,5,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,726,        for (int row = 0; row < nRowB; row++) {,8,1,0,1,3,0,0,0,0,10,39,4,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,727,            for (int col = 0; col < nColB; col++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,728,"                bp[row][col] = b.getEntry(permutation[row], col);",0,0,1,4,8,0,6,0,0,17,49,8,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,733,        for (int col = 0; col < nCol; col++) {,12,1,0,1,3,0,0,2,0,16,38,3,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,734,            for (int i = col + 1; i < nCol; i++) {,10,2,0,1,3,0,0,0,0,13,38,6,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,742,        for (int col = nCol - 1; col >= 0; col--) {,8,2,0,1,3,0,0,0,0,11,43,4,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,743,            for (int j = 0; j < nColB; j++) {,8,1,0,1,3,0,0,0,0,10,33,6,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,744,                bp[col][j] /= lu[col][col];,0,0,1,4,8,0,0,0,0,13,27,8,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,746,            for (int i = 0; i < col; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,753,        RealMatrixImpl outMat = new RealMatrixImpl(bp);,4,0,0,1,2,0,0,4,0,8,47,4,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,754,        return outMat;,2,0,0,0,0,4,0,0,0,5,14,2,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,847,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08333,0,0
defect4j,math,org/apache/commons/math/estimation/EstimatedParameter,100,107,    return bound;,0,0,0,0,0,1,0,0,0,1,13,4,0.08333,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,48,    public SimpleEstimationProblem() {,2,0,0,1,3,1,0,0,0,3,34,2,0.08333,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,49,        parameters   = new ArrayList();,0,0,0,1,2,0,0,0,0,3,31,4,0.08333,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,50,        measurements = new ArrayList();,2,0,0,1,2,0,0,2,0,5,31,4,0.08333,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08333,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,68,        List unbound = new ArrayList(parameters.size());,0,0,0,2,4,0,0,0,0,6,48,4,0.08333,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,69,        for (Iterator iterator = parameters.iterator(); iterator.hasNext();) {,0,0,0,3,7,0,0,0,0,10,70,4,0.08333,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,70,            EstimatedParameter p = (EstimatedParameter) iterator.next();,0,0,0,2,4,0,0,0,0,6,60,4,0.08333,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,71,            if (! p.isBound()) {,0,0,0,2,5,0,4,0,0,5,20,6,0.08333,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,72,                unbound.add(p);,0,0,0,1,2,0,10,0,0,10,15,3,0.08333,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,74,        },0,0,0,0,1,0,0,0,0,1,1,4,0.08333,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,77,        return (EstimatedParameter[]) unbound.toArray(new EstimatedParameter[unbound.size()]);,0,0,0,5,10,1,8,4,0,12,86,5,0.08333,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,86,        return (WeightedMeasurement[]) measurements.toArray(new WeightedMeasurement[measurements.size()]);,0,0,0,5,10,1,8,4,0,12,98,5,0.08333,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,93,        parameters.add(p);,2,0,0,1,2,0,6,0,0,9,18,0,0.08333,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,94,    },12,3,0,0,1,0,0,0,0,16,1,7,0.08333,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,101,        measurements.add(m);,0,0,0,1,2,0,6,0,0,6,20,5,0.08333,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,102,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08333,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,349,            sign = 1;,2,0,0,0,0,0,0,0,0,3,9,7,0.33333,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,350,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.33333,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,58,"        this(DEFAULT_IMAGINARY_CHARACTER, getDefaultNumberFormat());",6,0,0,2,4,0,2,0,0,8,60,3,0.28571,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,59,    },0,0,0,0,1,0,0,0,0,1,1,4,0.28571,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,237,        return getDefaultNumberFormat(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,51,5,0.28571,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,361,"        parseAndIgnoreWhitespace(source, pos);",0,0,0,1,2,0,0,0,0,3,38,4,0.18182,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,364,"        Number im = parseNumber(source, getRealFormat(), pos);",2,0,0,2,4,0,8,2,0,12,54,4,0.18182,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,365,        if (im == null) {,2,1,0,1,3,0,2,0,0,5,17,3,0.18182,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,374,        int n = getImaginaryCharacter().length();,2,0,0,2,4,0,4,0,0,6,41,5,0.18182,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,375,        startIndex = pos.getIndex();,2,0,0,1,2,0,4,0,0,7,28,4,0.18182,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,376,        int endIndex = startIndex + n;,0,0,0,0,0,0,0,0,0,0,30,4,0.18182,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,377,        if (,0,0,0,0,1,0,0,0,0,1,4,4,0.18182,1,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,321,        int initialIndex = pos.getIndex();,0,0,0,1,2,0,0,0,0,3,34,4,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,324,"        parseAndIgnoreWhitespace(source, pos);",0,0,0,1,2,0,6,0,0,6,38,5,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,327,"        Number re = parseNumber(source, getRealFormat(), pos);",2,0,0,2,4,0,8,2,0,12,54,4,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,328,        if (re == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,337,        int startIndex = pos.getIndex();,0,0,0,1,2,0,0,0,0,3,32,4,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,338,"        char c = parseNextCharacter(source, pos);",2,0,0,1,2,0,6,0,0,8,41,5,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,339,        int sign = 0;,12,3,0,0,0,0,0,0,0,16,13,6,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,340,        switch (c) {,2,0,0,1,3,0,0,0,0,2,12,4,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,399,"        parseNextCharacter(source, pos);",0,0,0,1,2,0,6,0,0,6,32,5,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,400,        pos.setIndex(pos.getIndex() - 1);,0,0,0,2,4,0,0,0,0,6,33,4,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,401,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,411,         int index = pos.getIndex();,2,0,0,1,2,0,4,0,0,6,27,5,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,412,         int n = source.length();,0,0,0,1,2,0,0,0,0,3,24,4,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,413,         char ret = 0;,4,0,0,0,0,1,2,0,0,7,13,4,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,415,         if (index < n) {,4,1,0,1,3,0,0,0,0,5,16,4,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,418,                 c = source.charAt(index++);,0,0,0,1,2,0,0,0,0,3,27,4,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,419,             } while (Character.isWhitespace(c) && index < n);,6,3,0,2,5,0,6,0,0,15,49,4,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,420,             pos.setIndex(index);,0,0,0,1,2,0,6,0,0,6,20,7,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,422,             if (index < n) {,4,1,0,1,3,0,0,0,0,5,16,6,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,423,                 ret = c;,10,5,1,0,0,0,0,0,0,20,8,3,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,427,         return ret;,6,0,0,0,0,3,0,2,0,10,11,2,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,471,        int startIndex = pos.getIndex();,2,0,0,1,2,0,4,0,0,6,32,5,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,472,"        Number number = format.parse(source, pos);",2,0,0,1,2,0,8,2,0,12,42,4,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,473,        int endIndex = pos.getIndex();,0,0,0,1,2,0,0,0,0,3,30,4,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,476,        if (startIndex == endIndex) {,4,1,0,1,3,0,0,0,0,5,29,4,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,487,        return number;,2,0,0,0,0,1,0,0,0,2,14,4,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,258,        return imaginaryCharacter;,2,0,0,0,0,1,0,0,0,2,26,4,0.08696,0,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,367,        for (int i = 0; i < in.length; i ++) {,0,0,0,1,3,0,0,0,0,4,38,4,6.0,0,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,368,            if (in[i] < 0) {,2,2,1,2,5,0,0,0,0,8,16,3,6.0,0,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,372,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,6.0,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,72,        if (x <= 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,3.6,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,75,"            ret = Gamma.regularizedGammaP(getAlpha(), x / getBeta());",4,1,0,3,6,0,8,0,0,14,57,6,3.6,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,78,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,3.6,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,122,        return alpha;,0,0,0,0,0,1,0,0,0,1,13,4,3.6,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,142,        return beta;,2,0,0,0,0,1,0,0,0,2,12,4,3.6,0,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,82,        return getGamma().cumulativeProbability(x);,0,0,0,2,4,1,6,0,0,6,43,5,3.6,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,120,"        return regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",8,0,1,1,2,2,8,0,0,23,67,3,3.6,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,158,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,4,3,0,5,11,0,12,0,0,19,68,4,3.6,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,160,        } else if (x == 0.0) {,2,1,0,1,4,0,0,0,0,3,22,5,3.6,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,162,        } else if (a >= 1.0 && x > a) {,0,0,0,1,4,0,0,0,0,5,31,4,3.6,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,186,        return ret;,2,0,0,0,0,1,0,2,0,5,11,3,3.6,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,40,    private static double[] lanczos =,2,0,0,1,2,2,0,0,0,4,33,2,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,60,    private static final double HALF_LOG_2_PI = 0.5 * Math.log(2.0 * Math.PI);,0,0,0,1,2,0,0,0,0,3,74,4,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,90,        if (Double.isNaN(x) || (x <= 0.0)) {,2,2,0,3,7,0,6,0,0,10,36,4,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,93,            double g = 607.0 / 128.0;,2,1,0,0,0,0,0,0,0,3,25,7,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,95,            double sum = 0.0;,2,0,0,0,0,0,0,0,0,2,17,7,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,96,            for (int i = lanczos.length - 1; i > 0; --i) {,10,2,0,1,3,0,0,0,0,13,46,6,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,97,                sum = sum + (lanczos[i] / (x + i));,8,3,1,3,6,0,0,0,0,16,35,8,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,99,            sum = sum + lanczos[0];,4,1,1,1,2,0,0,0,0,8,23,6,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,101,            double tmp = x + g + .5;,6,1,0,0,0,0,0,0,0,7,24,7,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,102,            ret = ((x + .5) * Math.log(tmp)) - tmp +,12,4,0,3,6,0,4,0,0,21,40,6,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,106,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,1.63636,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,102,45,        super();,0,0,0,1,2,0,0,0,0,3,8,4,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,102,46,    },0,0,0,0,1,0,0,0,0,1,1,4,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,102,38,        super();,0,0,0,1,2,0,0,0,0,3,8,4,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,102,39,    },0,0,0,0,1,0,0,0,0,1,1,4,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,47,        super();,0,0,0,1,2,0,0,0,0,3,8,4,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,48,        setAlpha(alpha);,6,1,0,1,2,0,4,0,0,12,16,3,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,49,        setBeta(beta);,0,0,0,1,2,0,4,0,0,4,14,5,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,50,    },0,0,0,0,1,0,0,0,0,1,1,4,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,111,        if (alpha <= 0.0) {,4,2,1,1,3,0,0,0,0,11,19,3,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,114,        this.alpha = alpha;,0,0,0,0,0,0,0,0,0,0,19,4,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,115,    },0,0,0,0,1,0,0,0,0,1,1,4,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,131,        if (beta <= 0.0) {,2,1,0,1,3,0,0,0,0,3,18,4,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,134,        this.beta = beta;,0,0,0,0,0,0,0,0,0,0,17,4,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,135,    },0,0,0,0,1,0,0,0,0,1,1,4,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,43,"        this(df, new GammaDistributionImpl(df / 2.0, 2.0));",8,2,1,2,4,0,0,2,0,16,51,3,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,44,    },0,0,0,0,1,0,0,0,0,1,1,4,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,53,        super();,0,0,0,1,2,0,0,0,0,3,8,4,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,54,        setGamma(g);,0,0,0,1,2,0,0,0,0,3,12,4,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,55,        setDegreesOfFreedom(df);,0,0,0,1,2,0,4,0,0,4,24,5,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,56,    },0,0,0,0,1,0,4,0,0,4,1,5,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,63,        getGamma().setAlpha(degreesOfFreedom / 2.0);,2,1,0,2,4,0,4,0,0,7,44,5,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,64,    },0,0,0,0,1,0,0,0,0,1,1,4,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,180,        this.gamma = g;,0,0,0,0,0,0,0,0,0,0,15,4,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,182,    },0,0,0,0,1,0,0,0,0,1,1,4,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,189,        return gamma;,2,0,0,0,0,1,0,0,0,2,13,4,1.5,0,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,39,        this(new ChiSquaredDistributionImpl(1.0));,0,0,0,2,4,0,0,2,0,2,42,6,1.5,0,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,40,    },0,0,0,0,1,0,0,0,0,1,1,4,1.5,0,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,49,        super();,0,0,0,1,2,0,0,0,0,3,8,4,1.5,0,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,50,        setDistribution(x);,0,0,0,1,2,0,4,0,0,4,19,5,1.5,0,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,51,    },0,0,0,0,1,0,0,0,0,1,1,4,1.5,0,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,402,        distribution = value;,4,0,0,0,0,0,0,0,0,5,21,4,1.5,0,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,403,    },0,0,0,0,1,0,0,0,0,1,1,4,1.5,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,168,            double n = 0.0; // current element index,2,0,0,0,0,0,0,0,0,2,40,9,1.125,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,169,            double an = 1.0 / a; // n-th element in the series,4,1,0,0,0,0,0,0,0,5,50,9,1.125,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,170,            double sum = an; // partial sum,6,0,0,0,0,3,0,0,0,9,31,1,1.125,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,171,            while (Math.abs(an) > epsilon && n < maxIterations) {,6,3,0,2,5,0,6,0,0,15,53,8,1.125,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,173,                n = n + 1.0;,4,1,0,0,0,0,0,0,0,6,12,10,1.125,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,174,                an = an * (x / (a + n));,0,0,0,2,4,0,0,0,0,6,24,4,1.125,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,177,                sum = sum + an;,8,2,0,0,0,0,0,0,0,11,15,4,1.125,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,179,            if (n >= maxIterations) {,4,1,0,1,3,0,0,0,0,5,25,8,1.125,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,182,                ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;,8,4,0,4,8,0,14,0,0,28,59,10,1.125,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,161,            ret = 0.0;,0,0,0,0,0,0,0,0,0,0,10,4,0.25,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,109,            return 0.5 * (1.0 + Erf.erf((x - mean) /,4,4,0,1,4,1,4,0,0,12,40,4,0.14286,1,1
defect4j,math,org/apache/commons/math/special/Erf,103,56,"        double ret = Gamma.regularizedGammaP(0.5, x * x, 1.0e-15, 10000);",0,0,0,1,2,0,0,0,0,3,65,4,0.14286,0,0
defect4j,math,org/apache/commons/math/special/Erf,103,57,        if (x < 0) {,10,3,0,1,3,0,0,0,0,13,12,4,0.14286,0,0
defect4j,math,org/apache/commons/math/special/Erf,103,58,            ret = -ret;,4,0,0,0,0,0,0,0,0,6,11,6,0.14286,0,0
defect4j,math,org/apache/commons/math/special/Erf,103,60,        return ret;,0,0,0,0,0,1,0,0,0,1,11,4,0.14286,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,40,    private static double[] lanczos =,2,0,0,1,2,2,0,0,0,4,33,2,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,60,    private static final double HALF_LOG_2_PI = 0.5 * Math.log(2.0 * Math.PI);,6,2,0,1,2,3,4,0,0,15,74,2,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,90,        if (Double.isNaN(x) || (x <= 0.0)) {,2,2,0,3,7,0,6,0,0,10,36,4,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,93,            double g = 607.0 / 128.0;,2,1,0,0,0,0,0,0,0,3,25,7,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,95,            double sum = 0.0;,2,0,0,0,0,0,0,0,0,2,17,7,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,96,            for (int i = lanczos.length - 1; i > 0; --i) {,10,2,0,1,3,0,0,0,0,13,46,6,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,97,                sum = sum + (lanczos[i] / (x + i));,8,3,1,3,6,0,0,0,0,16,35,8,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,99,            sum = sum + lanczos[0];,0,0,0,1,2,0,0,0,0,3,23,4,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,101,            double tmp = x + g + .5;,6,1,0,0,0,0,0,0,0,7,24,7,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,102,            ret = ((x + .5) * Math.log(tmp)) - tmp +,6,5,0,3,6,0,6,0,0,18,40,6,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,106,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,158,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,0,0,0,5,11,0,0,0,0,16,68,4,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,160,        } else if (x == 0.0) {,2,1,0,1,4,0,0,0,0,3,22,5,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,162,        } else if (a >= 1.0 && x > a) {,6,3,0,1,4,0,0,0,0,9,31,6,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,168,            double n = 0.0; // current element index,4,0,0,0,0,0,0,0,0,4,40,3,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,169,            double an = 1.0 / a; // n-th element in the series,6,1,1,0,0,3,2,4,0,19,50,1,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,170,            double sum = an; // partial sum,4,1,0,0,0,0,4,0,0,10,31,3,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,171,            while (Math.abs(an) > epsilon && n < maxIterations) {,6,3,0,2,5,0,6,0,0,15,53,8,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,173,                n = n + 1.0;,4,1,0,0,0,0,0,0,0,6,12,10,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,174,                an = an * (x / (a + n));,0,0,0,2,4,0,0,0,0,6,24,4,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,177,                sum = sum + an;,0,0,0,0,0,0,0,0,0,0,15,4,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,179,            if (n >= maxIterations) {,4,1,0,1,3,0,0,0,0,5,25,8,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,182,                ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;,16,4,0,4,8,4,14,2,0,42,59,2,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,186,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.08333,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,45,        super();,2,0,0,1,2,3,0,0,0,5,8,2,0.05263,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,46,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,103,38,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.05263,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,103,39,    },8,1,0,0,1,0,0,0,0,10,1,12,0.05263,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,50,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.05263,1,1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,39,    private double mean = 0;,2,0,0,0,0,1,0,0,0,3,24,2,0.05263,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,42,    private double standardDeviation = 1;,2,0,0,0,0,1,0,0,0,3,37,2,0.05263,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,51,        setMean(mean);,0,0,0,1,2,0,4,0,0,4,14,5,0.05263,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,52,        setStandardDeviation(sd);,0,0,0,1,2,0,4,0,0,4,25,5,0.05263,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,53,    },2,1,0,0,1,0,0,0,0,3,1,6,0.05263,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,76,        this.mean = mean;,4,0,0,0,0,0,0,0,0,5,17,4,0.05263,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,77,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,93,        if (sd <= 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.05263,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,97,        standardDeviation = sd;,4,0,0,0,0,0,0,0,0,5,23,4,0.05263,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,98,    },4,0,0,0,1,0,0,0,0,5,1,12,0.05263,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,61,        if (p < 0.0 || p > 1.0) {,4,3,0,1,3,0,0,0,0,7,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,62,"            throw new IllegalArgumentException(""p must be between 0.0 and 1.0, inclusive."");",0,0,0,1,2,0,0,2,0,3,80,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,67,        UnivariateRealFunction rootFindingFunction =,2,0,0,0,0,0,0,2,0,4,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,80,        double lowerBound = getDomainLowerBound(p);,2,0,0,1,2,0,4,0,0,6,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,81,        double upperBound = getDomainUpperBound(p);,2,0,0,1,2,0,4,0,0,6,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,82,        double[] bracket = null;,2,0,0,1,2,0,0,0,0,2,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,84,            bracket = UnivariateRealSolverUtils.bracket(,0,0,0,0,1,0,0,0,0,1,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,104,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,87,        }  catch (ConvergenceException ex) {,2,0,0,1,4,0,0,2,0,4,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,96,            if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {,0,1,0,3,7,0,10,0,0,11,61,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,97,                return lowerBound;,2,0,0,0,0,1,0,0,0,2,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,99,            if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {,0,0,0,3,7,0,0,0,0,10,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,100,                return upperBound;,2,0,0,0,0,1,0,0,0,2,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,103,            throw new MathException(ex);,2,0,0,1,2,0,0,2,0,4,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,107,"        double root = UnivariateRealSolverUtils.solve(rootFindingFunction,",2,0,0,0,1,0,6,0,0,8,66,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,109,        return root;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,103,60,        if (x0 > x1) {,4,1,0,1,3,0,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,103,61,            throw new IllegalArgumentException,0,0,0,0,0,0,0,2,0,2,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,103,64,        return cumulativeProbability(x1) - cumulativeProbability(x0);,0,1,0,2,4,1,8,0,0,9,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,68,            new UnivariateRealFunction() {,0,0,0,1,3,0,0,2,0,2,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,72,                    return cumulativeProbability(x) - p;,0,0,0,1,2,1,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,73,                } catch (MathException ex) {,2,0,0,1,4,0,0,2,0,4,28,12,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,74,"                    throw new FunctionEvaluationException(x, ex.getPattern(), ex.getArguments(), ex);",10,0,0,3,6,3,8,2,0,24,81,1,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,123,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,124,        this.pattern   = null;,2,0,0,0,0,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,125,        this.arguments = new Object[0];,2,0,0,1,2,0,0,2,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,126,        this.rootCause = null;,2,0,0,0,0,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,127,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,137,        super(msg);,2,0,0,1,2,0,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,138,        this.pattern   = msg;,4,0,0,0,0,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,139,        this.arguments = new Object[0];,2,0,0,1,2,0,0,2,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,140,        this.rootCause = null;,2,0,0,0,0,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,141,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,151,"      super(buildMessage(pattern, arguments, Locale.US));",4,0,0,2,4,0,6,0,0,10,51,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,152,      this.pattern   = pattern;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,153,      this.arguments = arguments;,4,0,0,0,0,0,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,154,      this.rootCause = null;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,155,    },2,0,0,0,1,0,0,0,0,3,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,165,        super((rootCause == null ? null : rootCause.getMessage()));,2,1,0,3,6,0,4,0,0,8,59,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,166,        this.pattern   = getMessage();,2,0,0,1,2,0,2,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,167,        this.arguments = new Object[0];,0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,168,        this.rootCause = rootCause;,4,0,0,0,0,0,2,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,169,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,181,        super(msg);,2,0,0,1,2,0,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,182,        this.pattern   = msg;,10,2,0,0,0,0,0,0,0,14,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,183,        this.arguments = new Object[0];,4,3,1,1,2,1,0,2,0,15,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,184,        this.rootCause = rootCause;,4,0,0,0,0,0,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,185,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,197,"      super(buildMessage(pattern, arguments, Locale.US));",4,0,0,2,4,0,6,0,0,10,51,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,198,      this.pattern   = pattern;,18,5,0,0,0,0,0,0,0,24,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,199,      this.arguments = arguments;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,200,      this.rootCause = rootCause;,4,0,0,0,0,0,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,201,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,47,        boolean flag = false;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,49,"            Throwable.class.getDeclaredMethod(""getCause"", new Class[0]);",0,0,0,2,4,0,2,4,0,7,60,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,50,            flag = true;,2,0,0,0,0,0,0,0,0,4,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,53,        },4,2,0,0,1,0,0,0,0,6,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,51,        } catch (NoSuchMethodException ex) {,2,0,0,1,4,0,0,2,0,4,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,52,            flag = false;,2,0,0,0,0,0,0,0,0,4,13,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,54,        JDK_SUPPORTS_NESTED = flag;,4,0,0,0,0,0,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,57,    private static ResourceBundle cachedResources = null;,2,0,0,0,0,2,0,2,0,6,53,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,83,            if ((cachedResources == null) || (! cachedResources.getLocale().equals(locale))) {,2,2,0,5,11,0,8,0,0,13,82,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,85,                cachedResources =,2,0,0,0,0,0,0,0,0,3,17,8,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,89,            if (cachedResources.getLocale().getLanguage().equals(locale.getLanguage())) {,0,0,0,5,11,0,0,0,0,16,77,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,91,                return cachedResources.getString(s);,0,0,0,1,2,1,6,0,0,6,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,96,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,94,        } catch (MissingResourceException mre) {,4,1,1,1,4,0,0,2,0,12,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,100,        return s;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,113,"        MessageFormat mf = new MessageFormat(translate(pattern, locale));",0,0,0,2,4,0,0,0,0,6,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,114,        mf.setLocale(locale);,0,0,0,1,2,0,6,0,0,6,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,115,        return mf.format(arguments);        ,0,0,0,1,2,1,6,0,0,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,208,        return pattern;,10,1,0,0,0,1,0,0,0,12,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,216,        return arguments;,0,0,0,0,0,1,0,0,0,1,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,226,"        return (pattern == null) ? null : buildMessage(pattern, arguments, locale);",2,1,0,2,4,1,8,0,0,12,75,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,235,        return rootCause;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,242,        printStackTrace(System.err);,4,0,0,1,2,0,2,0,0,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,243,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,251,        synchronized (out) {,2,0,0,1,3,0,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,252,"            PrintWriter pw = new PrintWriter(out, false);",4,0,0,1,2,0,0,4,0,9,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,253,            printStackTrace(pw);,0,0,0,1,2,0,4,0,0,4,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,255,            pw.flush();,0,0,0,1,2,0,4,0,0,4,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,256,        },0,0,0,0,1,0,8,0,0,8,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,257,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,265,        synchronized (out) {,2,0,0,1,3,0,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,266,            super.printStackTrace(out);,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,267,            if (rootCause != null && JDK_SUPPORTS_NESTED == false) {,0,0,0,1,3,0,0,0,0,4,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,268,"                out.print(""Caused by: "");",0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,269,                rootCause.printStackTrace(out);,0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,271,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,272,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,60,"        this(0.0, 1.0);",2,0,0,1,2,0,6,0,0,8,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,61,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,68,        return mean;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,84,        return standardDeviation;,4,1,0,0,0,1,0,0,0,6,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,94,            throw new IllegalArgumentException(,0,0,0,0,1,0,0,2,0,2,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,129,        if (p == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,130,            return Double.NEGATIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,132,        if (p == 1) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,133,            return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,135,        return super.inverseCumulativeProbability(p);,0,0,0,1,2,1,0,0,0,4,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,150,        if (p < .5) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,151,            ret = -Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,8,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,153,            ret = getMean();,2,0,0,1,2,0,2,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,156,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,171,        if (p < .5) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,172,            ret = getMean();,0,0,0,1,2,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,174,            ret = Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,7,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,177,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,191,        if (p < .5) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,192,            ret = getMean() - getStandardDeviation();,10,2,0,2,4,1,22,0,0,36,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,193,        } else if (p > .5) {,2,1,0,1,4,0,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,194,            ret = getMean() + getStandardDeviation();,2,1,0,2,4,0,4,0,0,8,41,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,196,            ret = getMean();,2,0,0,1,2,0,2,0,0,5,16,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,199,        return ret;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,103,34,"        super(""Convergence failed"", new Object[0]);",4,0,0,2,4,0,0,2,0,8,43,1,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,103,35,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,103,44,"        super(pattern, arguments);",0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,103,45,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,103,52,        super(cause);,4,0,0,1,2,0,0,0,0,5,13,0,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,103,53,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,103,63,"        super(pattern, arguments, cause);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,103,64,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,103,77,"        super(msg, rootCause);",2,0,0,1,2,1,0,0,0,3,22,2,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,103,78,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,103,89,        super(msg);,2,0,0,1,2,0,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,103,90,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,51,        super();,2,1,0,1,2,0,0,0,0,3,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,52,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,79,"        return evaluate(x, DEFAULT_EPSILON, Integer.MAX_VALUE);",4,0,0,1,2,1,6,0,0,10,55,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,90,"        return evaluate(x, epsilon, Integer.MAX_VALUE);",4,0,0,1,2,1,6,0,0,10,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,101,"        return evaluate(x, DEFAULT_EPSILON, maxIterations);",0,0,0,1,2,1,8,0,0,8,51,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,133,        double p0 = 1.0;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,134,"        double p1 = getA(0, x);",4,0,0,1,2,0,4,0,0,9,23,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,135,        double q0 = 0.0;,4,0,1,0,0,0,0,0,0,9,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,136,        double q1 = 1.0;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,137,        double c = p1 / q1;,6,1,0,0,0,0,0,0,0,7,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,138,        int n = 0;,2,1,1,0,0,0,0,0,0,7,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,139,        double relativeError = Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,6,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,140,        while (n < maxIterations && relativeError > epsilon) {,8,3,0,1,3,0,0,0,0,11,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,141,            ++n;,2,0,0,0,0,0,0,0,0,3,4,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,142,"            double a = getA(n, x);",2,0,0,1,2,0,6,0,0,8,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,143,"            double b = getB(n, x);",2,0,0,1,2,0,6,0,0,8,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,144,            double p2 = a * p1 + b * p0;,10,3,0,0,0,0,0,0,0,13,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,145,            double q2 = a * q1 + b * q0;,10,3,0,0,0,0,0,0,0,13,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,146,            if (Double.isInfinite(p2) || Double.isInfinite(q2)) {,0,0,0,3,7,0,0,0,0,10,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,148,                if (a != 0.0) {,2,1,0,1,3,0,6,0,0,9,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,149,                    p2 = p1 + (b / a * p0);,10,3,0,1,2,0,0,0,0,14,23,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,150,                    q2 = q1 + (b / a * q0);,12,3,0,1,2,0,4,0,0,21,23,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,151,                } else if (b != 0) {,2,1,0,1,4,0,0,0,0,3,20,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,152,                    p2 = (a / b * p1) + p0;,10,3,0,1,2,0,0,0,0,14,23,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,153,                    q2 = (a / b * q1) + q0;,10,3,0,1,2,0,0,0,0,14,23,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,156,                    throw new ConvergenceException(,0,0,0,0,1,0,0,2,0,2,31,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,161,            double r = p2 / q2;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,162,            relativeError = Math.abs(r / c - 1.0);,6,2,0,1,2,0,4,0,0,13,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,165,            c = p2 / q2;,6,1,0,0,0,0,0,0,0,8,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,166,            p0 = p1;,4,0,0,0,0,0,0,0,0,5,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,167,            p1 = p2;,4,0,0,0,0,0,0,0,0,5,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,168,            q0 = q1;,4,0,0,0,0,0,0,0,0,5,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,169,            q1 = q2;,4,0,0,0,0,0,0,0,0,5,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,170,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,172,        if (n >= maxIterations) {,0,0,0,1,3,0,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,173,"            throw new MaxIterationsExceededException(maxIterations,",2,0,0,0,1,0,0,2,0,4,55,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,178,        return c;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,243,            ContinuedFraction cf = new ContinuedFraction() {,2,0,0,1,3,0,0,4,0,6,48,8,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,248,                    return ((2.0 * n) + 1.0) - a + x;,6,4,0,2,4,1,0,0,0,10,33,14,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,252,                    return n * (a - n);,6,2,0,1,2,1,0,0,0,8,19,14,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,67,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,68,    },2,0,0,0,1,0,0,0,0,3,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,91,            ret = Double.NaN;,6,0,0,0,0,0,0,0,0,7,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,120,"        return regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",4,0,0,1,2,1,8,0,0,12,67,5,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,159,            ret = Double.NaN;,10,2,0,0,0,0,0,0,0,13,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,165,"            ret = 1.0 - regularizedGammaQ(a, x, epsilon, maxIterations);",0,0,0,1,2,0,0,0,0,3,60,4,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,180,                throw new MaxIterationsExceededException(maxIterations);,2,0,0,1,2,0,0,2,0,4,56,11,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,200,"        return regularizedGammaQ(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",4,0,0,1,2,1,8,0,0,12,67,5,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,233,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,4,3,0,5,11,0,12,0,0,19,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,234,            ret = Double.NaN;,8,0,0,0,0,3,0,0,0,12,17,1,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,235,        } else if (x == 0.0) {,2,1,0,1,4,0,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,236,            ret = 1.0;,2,0,0,0,0,0,0,0,0,3,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,237,        } else if (x < a || a < 1.0) {,0,0,0,1,4,0,0,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,240,"            ret = 1.0 - regularizedGammaP(a, x, epsilon, maxIterations);",2,1,0,1,2,0,10,0,0,14,60,8,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,243,            ContinuedFraction cf = new ContinuedFraction() {,4,0,0,1,3,0,0,4,0,8,48,3,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,256,"            ret = 1.0 / cf.evaluate(x, epsilon, maxIterations);",4,1,0,1,2,0,10,0,0,16,51,3,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,257,            ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;,10,4,0,4,8,0,14,0,0,31,59,0,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,260,        return ret;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,103,36,"        super(""Maximal number of iterations ({0}) exceeded"",",2,0,0,2,5,0,8,0,0,12,52,3,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,103,38,        this.maxIterations = maxIterations;,4,0,0,0,0,0,0,0,0,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,103,39,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,103,50,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,103,51,        this.maxIterations = maxIterations;,4,0,0,0,0,0,0,0,0,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,103,52,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,103,58,        return maxIterations;,2,0,0,0,0,1,0,0,0,2,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/special/Erf,103,38,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/special/Erf,103,39,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,200,"        return regularizedGammaQ(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",4,0,0,1,2,1,8,0,0,12,67,5,0.16667,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,243,            ContinuedFraction cf = new ContinuedFraction() {,0,0,0,1,3,0,0,0,0,4,48,4,0.04,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,248,                    return ((2.0 * n) + 1.0) - a + x;,12,4,0,2,4,1,0,0,0,16,33,4,0.04,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,252,                    return n * (a - n);,6,2,0,1,2,1,0,0,0,8,19,14,0.04,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,237,        } else if (x < a || a < 1.0) {,6,3,0,1,4,0,0,0,0,9,30,6,0.04,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,243,            ContinuedFraction cf = new ContinuedFraction() {,2,0,0,1,3,0,0,4,0,6,48,8,0.04,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,256,"            ret = 1.0 / cf.evaluate(x, epsilon, maxIterations);",0,0,0,1,2,0,0,0,0,3,51,4,0.04,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,257,            ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;,8,4,0,4,8,0,14,0,0,28,59,8,0.04,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,235,        } else if (x == 0.0) {,0,0,0,1,4,0,0,0,0,5,22,4,0.03846,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,120,"        return regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",0,0,0,1,2,1,0,0,0,4,67,4,0.03704,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,168,            double n = 0.0; // current element index,2,0,0,0,0,0,0,0,0,2,40,9,0.03226,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,169,            double an = 1.0 / a; // n-th element in the series,4,1,0,0,0,0,0,0,0,5,50,9,0.03226,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,170,            double sum = an; // partial sum,4,0,0,0,0,0,0,0,0,4,31,9,0.03226,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,171,            while (Math.abs(an) > epsilon && n < maxIterations) {,6,3,0,2,5,0,6,0,0,15,53,8,0.03226,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,173,                n = n + 1.0;,10,1,0,0,0,0,0,2,0,14,12,1,0.03226,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,174,                an = an * (x / (a + n));,10,3,0,2,4,0,0,0,0,14,24,10,0.03226,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,177,                sum = sum + an;,6,1,0,0,0,0,0,0,0,8,15,10,0.03226,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,179,            if (n >= maxIterations) {,6,1,0,1,3,0,0,0,0,7,25,3,0.03226,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,182,                ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;,8,4,0,4,8,0,14,0,0,28,59,10,0.03226,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,233,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,4,3,0,5,11,0,12,0,0,19,68,4,0.03226,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,260,        return ret;,4,0,0,0,0,1,6,0,0,11,11,3,0.03226,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,89,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,60,    private double sumX = 0d;,2,0,0,0,0,1,0,0,0,3,25,2,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,63,    private double sumXX = 0d;,14,5,0,0,0,1,0,0,0,20,26,1,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,66,    private double sumY = 0d;,2,0,0,0,0,1,0,0,0,3,25,2,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,69,    private double sumYY = 0d;,2,0,0,0,0,1,0,0,0,3,26,2,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,72,    private double sumXY = 0d;,2,0,0,0,0,0,0,0,0,2,26,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,75,    private long n = 0;,0,0,0,0,0,0,0,0,0,0,19,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,78,    private double xbar = 0;,6,0,0,0,0,0,0,0,0,6,24,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,81,    private double ybar = 0;,0,0,0,0,0,0,0,0,0,0,24,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,90,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,106,        if (n == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,107,            xbar = x;,4,0,0,0,0,0,0,0,0,5,9,6,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,108,            ybar = y;,4,0,0,0,0,0,0,0,0,5,9,6,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,110,            double dx = x - xbar;,10,4,0,0,0,0,0,0,0,14,21,3,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,111,            double dy = y - ybar;,6,1,0,0,0,0,0,0,0,7,21,7,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,112,            sumXX += dx * dx * (double) n / (double) (n + 1.0);,10,3,0,3,6,0,0,0,0,14,51,6,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,113,            sumYY += dy * dy * (double) n / (double) (n + 1.0);,10,3,0,3,6,0,0,0,0,14,51,6,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,114,            sumXY += dx * dy * (double) n / (double) (n + 1.0);,10,3,0,3,6,0,0,0,0,14,51,6,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,115,            xbar += dx / (double) (n + 1.0);,6,2,0,2,4,0,0,0,0,9,32,6,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,116,            ybar += dy / (double) (n + 1.0);,6,2,0,2,4,0,0,0,0,9,32,6,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,118,        sumX += x;,4,0,0,0,0,0,0,0,0,5,10,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,119,        sumY += y;,4,0,0,0,0,0,0,0,0,5,10,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,120,        n++;,0,0,0,0,0,0,0,0,0,0,4,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,121,    },2,0,0,0,1,0,4,0,0,6,1,5,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,264,        return sumYY - sumXY * sumXY / sumXX;,12,5,0,0,0,1,8,0,0,25,37,3,0.125,1,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,140,        for (int i = 0; i < data.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,141,"            addData(data[i][0], data[i][1]);",0,0,1,5,10,0,2,0,0,10,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,143,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,149,        sumX = 0d;,2,0,0,0,0,0,0,0,0,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,150,        sumXX = 0d;,2,0,0,0,0,0,0,0,0,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,151,        sumY = 0d;,2,0,0,0,0,0,0,0,0,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,152,        sumYY = 0d;,2,0,0,0,0,0,0,0,0,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,153,        sumXY = 0d;,2,0,0,0,0,0,0,0,0,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,154,        n = 0;,2,0,0,0,0,0,0,0,0,3,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,155,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,163,        return n;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,184,        double b1 = getSlope();,2,0,0,1,2,0,2,0,0,4,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,185,        return getIntercept(b1) + b1 * x;,4,2,0,1,2,1,4,0,0,10,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,205,        return getIntercept(getSlope());,0,0,0,2,4,1,4,0,0,4,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,225,        if (n < 2) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,226,            return Double.NaN; //not enough data ,4,0,0,0,0,1,0,0,0,4,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,228,        if (Math.abs(sumXX) < 10 * Double.MIN_VALUE) {,4,2,0,2,5,0,18,0,0,24,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,229,            return Double.NaN; //not enough variation in x,0,0,0,0,0,1,0,0,0,1,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,231,        return sumXY / sumXX;,4,1,0,0,0,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,278,        if (n < 2) {,4,1,0,1,3,1,0,0,0,6,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,279,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,281,        return sumYY;,2,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,301,        return getRegressionSumSquares(getSlope());,0,0,0,2,4,1,4,0,0,4,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,315,        if (n < 3) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,316,            return Double.NaN;,6,0,0,0,0,1,0,0,0,7,18,0,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,318,        return getSumSquaredErrors() / (double) (n - 2);,2,2,0,3,6,1,2,0,0,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,336,        double b1 = getSlope();,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,337,        double result = Math.sqrt(getRSquare());,2,0,0,2,4,0,6,0,0,8,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,338,        if (b1 < 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,339,            result = -result;,6,0,0,0,0,0,0,0,0,8,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,341,        return result;,10,1,0,0,0,1,0,0,0,12,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,359,        double ssto = getTotalSumSquares();,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,360,        return (ssto - getSumSquaredErrors()) / ssto;,4,2,0,2,4,1,2,0,0,8,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,375,        return Math.sqrt(,0,0,0,0,1,1,4,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,390,        return Math.sqrt(getMeanSquareError() / sumXX);,2,1,0,2,4,1,6,0,0,9,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,417,        return getSlopeConfidenceInterval(0.05d);,0,0,0,1,2,1,2,0,0,2,41,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,453,        if (alpha >= 1 || alpha <= 0) {,12,5,0,1,3,0,0,0,0,17,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,454,            throw new IllegalArgumentException();,0,0,0,1,2,0,0,2,0,2,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,456,        return getSlopeStdErr() *,0,0,0,1,2,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,482,        return 2d* (1.0 - getTDistribution().cumulativeProbability(,0,2,0,1,4,1,4,0,0,6,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,497,        return (sumY - slope * sumX) / ((double) n);,8,3,0,3,6,1,0,0,0,11,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,507,        return slope * slope * sumXX;,6,1,0,0,0,1,0,0,0,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,517,        return DistributionFactory.newInstance().createTDistribution(n - 2);,2,1,0,2,4,1,6,0,0,9,68,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,290,            pos.setIndex(initialIndex);,0,0,0,1,2,0,6,0,0,6,27,6,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,291,            pos.setErrorIndex(startIndex);,0,3,0,1,2,0,12,0,0,15,30,3,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,292,            return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,168,        int startIndex = pos.getIndex();,0,0,0,1,2,0,0,0,0,3,32,4,0.5,1,1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,169,"        char c = parseNextCharacter(source, pos);",2,0,0,1,2,0,6,0,0,8,41,5,0.5,1,1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,170,        switch (c) {,2,0,0,1,3,0,0,0,0,2,12,4,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,177,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,188,"        parseAndIgnoreWhitespace(source, pos);",0,0,0,1,2,0,0,0,0,3,38,4,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,191,"        Number den = getDenominatorFormat().parse(source, pos);",0,0,0,2,4,0,0,0,0,6,55,4,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,192,        if (den == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,202,        int w = whole.intValue();,2,0,0,1,2,0,10,0,0,13,25,6,0.5,1,1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,203,        int n = num.intValue();,2,0,0,1,2,0,4,0,0,6,23,5,0.5,1,1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,204,        int d = den.intValue();,2,0,0,1,2,0,4,0,0,6,23,5,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,205,"        return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);",0,0,0,5,10,1,0,0,0,16,68,4,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,153,"        parseAndIgnoreWhitespace(source, pos);",0,0,0,1,2,0,6,0,0,6,38,5,0.33333,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,156,"        Number num = getNumeratorFormat().parse(source, pos);",0,0,0,2,4,0,0,0,0,6,53,4,0.33333,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,157,        if (num == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.33333,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,137,        int initialIndex = pos.getIndex();,2,0,0,1,2,0,4,0,0,6,34,5,0.25,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,140,"        parseAndIgnoreWhitespace(source, pos);",0,0,0,1,2,0,6,0,0,6,38,5,0.25,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,143,"        Number whole = getWholeFormat().parse(source, pos);",2,0,0,2,4,0,8,2,0,12,51,4,0.25,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,144,        if (whole == null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.25,0,0
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,249,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.2,0,0
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,276,        int startIndex = pos.getIndex();,2,0,0,1,2,0,4,0,0,6,32,5,0.16667,0,0
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,277,"        char c = parseNextCharacter(source, pos);",2,0,0,1,2,0,6,0,0,8,41,5,0.16667,0,0
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,278,        switch (c) {,2,0,0,1,3,0,0,0,0,2,12,4,0.16667,0,0
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,382,                 ret = c;,0,0,0,0,0,0,0,0,0,0,8,4,0.16667,0,0
