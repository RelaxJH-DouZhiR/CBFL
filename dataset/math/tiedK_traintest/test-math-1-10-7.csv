dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,math,org/apache/commons/math/util/FastMath,62,1450,"        split(x, xs);",0,0,0,1,2,0,6,0,0,6,13,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1451,        ys[0] = ys[1] = 0.0;,0,0,1,2,4,0,0,0,0,6,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1453,        for (int i = 19; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,31,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1454,"            splitMult(xs, ys, as);",0,0,0,1,2,0,8,0,0,8,22,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1455,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,0,0,20,29,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1457,            if ( (i & 1) == 0) {,0,0,0,2,5,0,0,0,0,7,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1458,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1461,"            split(FACT[i], as);",0,0,0,2,4,0,0,0,0,6,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1462,"            splitReciprocal(as, facts);",2,0,0,1,2,0,0,0,0,3,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1464,            if ( (i & 2) != 0 ) {,6,2,0,2,5,0,0,0,0,9,21,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1465,                facts[0] = -facts[0];,0,0,1,2,4,0,0,0,0,12,21,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1466,                facts[1] = -facts[1];,0,0,1,2,4,0,0,0,0,6,21,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1469,"            splitAdd(ys, facts, as);",0,0,0,1,2,0,8,0,0,8,24,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1470,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1473,        if (result != null) {,0,0,0,1,3,0,0,0,0,4,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1474,            result[0] = ys[0];,0,0,1,2,4,0,0,0,0,10,18,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1475,            result[1] = ys[1];,0,0,0,2,4,0,0,0,0,6,18,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1478,        return ys[0] + ys[1];,0,0,0,2,4,1,0,0,0,7,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1489,        final double xs[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1490,        final double ys[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1491,        final double facts[] = new double[2];,4,0,0,2,4,1,0,2,0,8,37,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1492,        final double as[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1493,"        split(x, xs);",0,0,0,1,2,0,0,0,0,3,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1494,        ys[0] = ys[1] = 0.0;,0,0,0,2,4,0,0,0,0,6,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1496,        for (int i = 19; i >= 0; i--) {,6,1,0,1,3,0,0,0,0,8,31,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1497,"            splitMult(xs, ys, as);",0,0,0,1,2,0,0,0,0,3,22,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1498,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1500,            if ( (i & 1) != 0) {,2,2,1,2,5,0,0,0,0,9,20,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1501,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1504,"            split(FACT[i], as);",2,0,1,2,4,0,4,0,0,10,19,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1505,"            splitReciprocal(as, facts);",0,0,1,1,2,0,6,0,0,11,27,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1507,            if ( (i & 2) != 0 ) {,2,2,0,2,5,0,0,0,0,4,21,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1508,                facts[0] = -facts[0];,0,0,1,2,4,0,0,0,0,6,21,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1509,                facts[1] = -facts[1];,0,0,0,2,4,0,0,0,0,6,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1512,"            splitAdd(ys, facts, as);",0,0,0,1,2,0,14,0,0,14,24,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1513,            ys[0] = as[0]; ys[1] = as[1];,0,0,0,4,8,0,0,0,0,12,29,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1516,        if (result != null) {,2,1,0,1,3,0,0,0,0,3,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1517,            result[0] = ys[0];,0,0,0,2,4,0,0,0,0,6,18,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1518,            result[1] = ys[1];,0,0,1,2,4,0,0,0,0,5,18,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1521,        return ys[0] + ys[1];,0,1,1,2,4,1,0,0,0,5,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1527,        final double result[] = new double[2];,4,0,0,2,4,2,2,0,0,8,38,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1530,        for (int i = 0; i < 7; i++) {,0,0,0,1,3,0,0,0,0,4,29,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1531,            double x = i / 8.0;,6,1,1,0,0,0,0,0,0,10,19,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1533,"            slowSin(x, result);",0,0,0,1,2,0,6,0,0,6,19,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1534,            SINE_TABLE_A[i] = result[0];,0,0,1,2,4,0,0,0,0,7,28,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1535,            SINE_TABLE_B[i] = result[1];,0,0,1,2,4,0,0,0,0,7,28,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1537,"            slowCos(x, result);",0,0,0,1,2,0,6,0,0,6,19,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1538,            COSINE_TABLE_A[i] = result[0];,10,4,1,2,4,0,0,0,0,21,30,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1539,            COSINE_TABLE_B[i] = result[1];,8,2,1,2,4,0,4,0,0,23,30,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1543,        for (int i = 7; i < 14; i++) {,0,0,0,1,3,0,0,0,0,4,30,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1544,            double xs[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1545,            double ys[] = new double[2];,2,1,0,2,4,0,0,0,0,3,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1546,            double as[] = new double[2];,0,0,0,2,4,0,0,0,0,6,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1547,            double bs[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1548,            double temps[] = new double[2];,4,1,1,2,4,0,0,0,0,13,31,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1550,            if ( (i & 1) == 0) {,0,1,1,2,5,0,0,0,0,5,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1552,                xs[0] = SINE_TABLE_A[i/2];,2,1,1,2,4,0,0,0,0,8,26,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1553,                xs[1] = SINE_TABLE_B[i/2];,4,1,1,2,4,0,0,0,0,11,26,0,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1554,                ys[0] = COSINE_TABLE_A[i/2];,2,1,1,2,4,0,0,0,0,8,28,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1555,                ys[1] = COSINE_TABLE_B[i/2];,2,1,0,2,4,0,0,0,0,3,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1558,"                splitMult(xs, ys, result);",0,0,0,1,2,0,8,0,0,8,26,9,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1559,                SINE_TABLE_A[i] = result[0] * 2.0;,0,1,1,2,4,0,0,0,0,8,34,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1560,                SINE_TABLE_B[i] = result[1] * 2.0;,0,1,1,2,4,0,0,0,0,8,34,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1563,"                splitMult(ys, ys, as);",0,0,0,1,2,0,0,0,0,3,22,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1564,"                splitMult(xs, xs, temps);",0,0,0,1,2,0,0,0,0,3,25,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1565,                temps[0] = -temps[0];,0,0,0,2,4,0,0,0,0,6,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1566,                temps[1] = -temps[1];,0,0,0,2,4,0,0,0,0,6,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1567,"                splitAdd(as, temps, result);",4,0,0,1,2,0,8,0,0,14,28,0,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1568,                COSINE_TABLE_A[i] = result[0];,2,0,1,2,4,2,0,0,0,11,30,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1569,                COSINE_TABLE_B[i] = result[1];,0,0,1,2,4,0,0,0,0,7,30,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1571,                xs[0] = SINE_TABLE_A[i/2];,2,1,1,2,4,0,0,0,0,8,26,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1572,                xs[1] = SINE_TABLE_B[i/2];,2,1,1,2,4,0,0,0,0,8,26,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1573,                ys[0] = COSINE_TABLE_A[i/2];,8,3,1,2,4,1,6,0,0,23,28,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1574,                ys[1] = COSINE_TABLE_B[i/2];,0,0,0,2,4,0,0,0,0,6,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1575,                as[0] = SINE_TABLE_A[i/2+1];,4,0,0,2,4,0,0,0,0,5,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1576,                as[1] = SINE_TABLE_B[i/2+1];,2,2,1,2,4,0,0,0,0,9,28,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1577,                bs[0] = COSINE_TABLE_A[i/2+1];,0,0,0,2,4,0,0,0,0,6,30,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1578,                bs[1] = COSINE_TABLE_B[i/2+1];,4,2,1,2,4,0,0,0,0,11,30,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1581,"                splitMult(xs, bs, temps);",0,0,0,1,2,0,8,0,0,8,25,9,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1582,"                splitMult(ys, as, result);",0,0,0,1,2,0,0,0,0,3,26,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1583,"                splitAdd(result, temps, result);",0,0,0,1,2,0,8,0,0,8,32,9,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1584,                SINE_TABLE_A[i] = result[0];,2,0,1,2,4,0,0,0,0,5,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1585,                SINE_TABLE_B[i] = result[1];,6,0,1,2,4,1,0,0,0,14,28,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1588,"                splitMult(ys, bs, result);",0,0,0,1,2,0,8,0,0,8,26,9,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1589,"                splitMult(xs, as, temps);",0,0,0,1,2,0,0,0,0,3,25,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1590,                temps[0] = -temps[0];,0,0,1,2,4,0,0,0,0,6,21,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1591,                temps[1] = -temps[1];,0,0,0,2,4,0,0,0,0,6,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1592,"                splitAdd(result, temps, result);",0,0,0,1,2,0,8,0,0,8,32,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1593,                COSINE_TABLE_A[i] = result[0];,0,0,1,2,4,0,0,0,0,7,30,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1594,                COSINE_TABLE_B[i] = result[1];,0,0,1,2,4,0,0,0,0,7,30,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1599,        for (int i = 0; i < 14; i++) {,0,0,0,1,3,0,0,0,0,4,30,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1600,            double xs[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1601,            double ys[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1602,            double as[] = new double[2];,2,1,1,2,4,0,0,0,0,8,28,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1604,            as[0] = COSINE_TABLE_A[i];,0,0,0,2,4,0,0,0,0,6,26,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1605,            as[1] = COSINE_TABLE_B[i];,0,0,1,2,4,0,0,0,0,7,26,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1607,"            splitReciprocal(as, ys);",0,0,0,1,2,0,0,0,0,3,24,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1609,            xs[0] = SINE_TABLE_A[i];,0,0,1,2,4,0,0,0,0,7,24,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1610,            xs[1] = SINE_TABLE_B[i];,0,0,1,2,4,0,0,0,0,7,24,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1612,"            splitMult(xs, ys, as);",12,1,0,1,2,0,18,0,0,33,22,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1614,            TANGENT_TABLE_A[i] = as[0];,4,0,0,2,4,0,0,0,0,5,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1615,            TANGENT_TABLE_B[i] = as[1];,0,0,1,2,4,0,0,0,0,7,27,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1618,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3016,        return (x < 0l) ? -x : x;,0,0,0,1,2,1,0,0,0,4,25,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3034,        return (x < 0.0) ? -x : x;,6,1,0,1,2,1,0,0,0,8,26,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3044,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,2,2,0,3,6,1,12,0,0,16,72,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3224,        return (a <= b) ? a : (Double.isNaN(a + b) ? Double.NaN : b);,16,2,0,3,6,1,4,0,0,22,61,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3260,        return (a <= b) ? b : (Double.isNaN(a + b) ? Double.NaN : a);,0,0,0,3,6,1,0,0,0,10,61,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,28,public class Incrementor {,6,1,0,0,1,2,4,0,0,13,26,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,44,        maximalCount = max;,4,0,0,0,0,0,0,0,0,5,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,45,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,53,        return maximalCount;,0,0,0,0,0,1,0,0,0,1,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,62,        return count;,6,0,0,0,0,1,0,0,0,7,13,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,84,        if (++count > maximalCount) {,4,1,0,1,3,0,0,0,0,6,29,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,87,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,93,        count = 0;,2,0,0,0,0,0,0,0,0,3,10,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,94,    },6,1,0,0,1,0,0,0,0,7,1,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,33,public final class MathUtils {,2,0,0,0,1,2,0,0,0,4,30,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,75,    private static final long[] FACTORIALS = new long[] {,2,0,0,2,5,3,8,0,0,13,53,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,417,"        return equals(x, y, 1);",0,0,0,1,2,1,6,0,0,6,23,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,479,        assert maxUlps > 0 && maxUlps < NAN_GAP;,6,3,0,0,0,0,0,0,0,9,40,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,481,        long xInt = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,482,        long yInt = Double.doubleToLongBits(y);,2,0,0,1,2,0,6,0,0,8,39,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,485,        if (xInt < 0) {,2,0,0,1,3,1,2,0,0,5,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,486,            xInt = SGN_MASK - xInt;,8,1,0,0,0,0,0,0,0,11,23,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,488,        if (yInt < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,489,            yInt = SGN_MASK - yInt;,6,1,0,0,0,0,0,0,0,8,23,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,492,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,0,0,0,1,2,0,0,0,0,3,61,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,494,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,2,1,0,2,4,1,12,0,0,17,55,4,1.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,62,28,public class JDKRandomGenerator extends Random implements RandomGenerator {,12,1,1,0,1,1,0,4,0,27,75,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,191,"        Arrays.sort(optima, new Comparator<UnivariateRealPointValuePair>() {",2,0,0,1,4,0,6,4,0,12,68,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,194,                    if (o1 == null) {,2,1,0,1,3,0,0,0,0,3,17,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,196,                    } else if (o2 == null) {,10,2,0,1,4,0,0,0,0,13,24,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,199,                    final double v1 = o1.getValue();,2,0,0,1,2,1,4,0,0,7,32,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,200,                    final double v2 = o2.getValue();,0,0,0,1,2,0,0,0,0,3,32,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,201,                    return (goal == GoalType.MINIMIZE) ?,6,1,0,1,2,1,0,0,0,7,36,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,72,                                             final RandomGenerator generator) {,2,0,0,0,2,1,0,2,0,5,34,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,73,        this.optimizer = optimizer;,4,0,0,0,0,0,0,0,0,5,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,74,        this.starts = starts;,6,0,0,0,0,0,0,0,0,7,21,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,75,        this.generator = generator;,0,0,0,0,0,0,0,0,0,0,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,76,    },0,0,0,0,1,0,4,0,0,4,1,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,146,"        return optimize(f, goal, min, max, 0);",0,0,0,1,2,1,10,0,0,10,38,5,1.0,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,154,        optima = new UnivariateRealPointValuePair[starts];,2,0,1,1,2,0,0,2,0,7,50,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,155,        totalEvaluations = 0;,12,2,0,0,0,0,0,0,0,16,21,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,158,        for (int i = 0; i < starts; ++i) {,8,1,0,1,3,0,0,0,0,10,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,160,                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);,2,0,0,3,6,0,0,0,0,3,82,2,1.0,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,161,                final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);,12,4,0,3,6,1,4,0,0,21,82,8,1.0,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,162,"                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2));",12,3,1,4,8,0,24,0,0,44,100,3,1.0,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,167,            },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,169,            final int usedEvaluations = optimizer.getEvaluations();,2,0,0,1,2,1,4,0,0,7,55,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,170,            optimizer.setMaxEvaluations(optimizer.getMaxEvaluations() - usedEvaluations);,2,1,0,2,4,0,8,0,0,11,77,7,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,171,            totalEvaluations += usedEvaluations;,0,0,0,0,0,0,0,0,0,0,36,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,174,        sortPairs(goal);,0,0,0,1,2,0,4,0,0,4,16,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,176,        if (optima[0] == null) {,0,1,1,2,5,0,0,0,0,3,24,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,182,        return optima[0];,0,0,1,1,2,1,0,0,0,2,17,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,191,"        Arrays.sort(optima, new Comparator<UnivariateRealPointValuePair>() {",0,0,0,1,4,0,6,4,0,10,68,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,205,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair,62,45,                                        final double value) {,6,1,0,0,2,1,0,0,0,8,21,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair,62,46,        this.point = point;,0,0,0,0,0,0,0,0,0,0,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair,62,47,        this.value = value;,4,0,0,0,0,0,0,0,0,5,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair,62,48,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair,62,56,        return point;,2,0,0,0,0,1,0,0,0,2,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair,62,65,        return value;,2,0,0,0,0,1,0,0,0,2,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,36,public abstract class AbstractUnivariateRealOptimizer,6,0,0,0,0,2,0,0,0,8,53,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,41,    private final Incrementor evaluations = new Incrementor();,0,0,0,1,2,0,0,0,0,3,58,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,55,        evaluations.setMaximalCount(maxEvaluations);,0,0,0,1,2,0,6,0,0,6,44,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,56,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,60,        return evaluations.getMaximalCount();,0,0,0,1,2,1,4,0,0,4,37,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,65,        return evaluations.getCount();,12,3,1,1,2,1,8,0,0,27,30,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,72,        return goal;,2,0,0,0,0,1,0,0,0,2,12,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,78,        return searchMin;,2,0,0,0,0,1,0,0,0,2,17,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,84,        return searchMax;,6,0,1,0,0,5,0,4,0,18,17,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,90,        return searchStart;,0,0,0,0,0,1,0,0,0,1,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,106,            evaluations.incrementCount();,0,0,0,1,2,0,0,0,0,3,29,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,109,        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,110,        return function.value(point);,0,0,0,1,2,1,0,0,0,4,29,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,120,        if (f == null) {,0,0,0,1,3,0,0,0,0,4,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,123,        if (goalType == null) {,0,0,0,1,3,0,0,0,0,4,23,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,128,        searchMin = min;,4,0,0,0,0,0,0,0,0,5,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,129,        searchMax = max;,4,0,0,0,0,0,0,0,0,5,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,130,        searchStart = startValue;,4,0,0,0,0,0,0,0,0,5,25,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,131,        goal = goalType;,4,0,0,0,0,0,0,0,0,5,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,132,        function = f;,0,0,0,0,0,0,0,0,0,0,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,133,        evaluations.resetCount();,0,0,0,1,2,0,4,0,0,4,25,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,136,        return doOptimize();,0,0,0,1,2,1,0,0,0,4,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,144,"        return optimize(f, goalType, min, max, min + 0.5 * (max - min));",0,0,0,2,4,1,0,0,0,7,64,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,158,        return checker;,2,0,0,0,0,1,0,0,0,2,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,62,27,public enum GoalType implements Serializable {,4,1,0,0,1,1,0,2,0,8,46,0,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,62,30,"    MAXIMIZE,",2,0,0,0,0,0,0,0,0,2,9,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,62,33,    MINIMIZE,2,0,0,0,0,0,0,0,0,2,8,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,76,                          double abs) {,4,1,1,0,2,0,0,0,0,9,13,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,77,        if (rel < MIN_RELATIVE_TOLERANCE) {,6,3,1,1,3,0,0,0,0,14,35,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,80,        if (abs <= 0) {,2,1,0,1,3,0,0,0,0,3,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,83,        relativeThreshold = rel;,8,2,1,0,0,0,0,0,0,22,24,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,84,        absoluteThreshold = abs;,4,0,0,0,0,0,0,0,0,5,24,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,85,    },2,0,0,0,1,0,0,0,0,3,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,47,    private static final double GOLDEN_SECTION = 0.5 * (3 - FastMath.sqrt(5));,0,0,0,2,4,0,0,0,0,6,74,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,51,    private static final double MIN_RELATIVE_TOLERANCE = 2 * FastMath.ulp(1d);,4,1,0,1,2,3,4,0,0,12,74,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,90,        final boolean isMinim = getGoalType() == GoalType.MINIMIZE;,0,0,0,1,2,0,0,0,0,3,59,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,91,        final double lo = getMin();,2,0,0,1,2,1,2,0,0,5,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,92,        final double mid = getStartValue();,2,0,0,1,2,1,2,0,0,5,35,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,93,        final double hi = getMax();,0,0,0,1,2,0,0,0,0,3,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,96,        final ConvergenceChecker<UnivariateRealPointValuePair> checker,0,0,0,0,0,0,0,0,0,0,62,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,101,        if (lo < hi) {,6,0,0,1,3,0,0,0,0,6,14,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,102,            a = lo;,4,0,0,0,0,0,0,0,0,5,7,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,103,            b = hi;,0,0,0,0,0,0,0,0,0,0,7,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,109,        double x = mid;,2,0,0,0,0,1,8,0,0,11,15,9,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,110,        double v = x;,4,0,0,0,0,0,0,0,0,4,13,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,111,        double w = x;,4,0,0,0,0,0,0,0,0,4,13,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,112,        double d = 0;,2,0,0,0,0,0,0,0,0,2,13,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,113,        double e = 0;,12,0,0,0,0,3,0,0,0,16,13,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,114,        double fx = computeObjectiveValue(x);,2,0,0,1,2,0,4,0,0,6,37,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,115,        if (!isMinim) {,0,0,0,1,3,0,0,0,0,4,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,118,        double fv = fx;,4,0,0,0,0,0,0,0,0,4,15,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,119,        double fw = fx;,4,0,0,0,0,0,0,0,0,4,15,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,121,        UnivariateRealPointValuePair previous = null;,0,0,0,0,0,0,0,0,0,0,45,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,122,        UnivariateRealPointValuePair current,2,0,0,0,0,0,0,2,0,4,36,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,125,        int iter = 0;,4,1,0,0,0,0,22,0,0,28,13,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,127,            final double m = 0.5 * (a + b);,0,0,0,1,2,0,0,0,0,3,31,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,128,            final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;,10,2,1,1,2,1,6,0,0,26,76,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,129,            final double tol2 = 2 * tol1;,4,1,0,0,0,1,0,0,0,6,29,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,132,            final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);,12,5,0,2,4,1,4,0,0,22,65,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,133,            if (!stop) {,2,0,0,1,3,0,0,0,0,3,12,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,134,                double p = 0;,2,0,0,0,0,0,0,0,0,2,13,9,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,135,                double q = 0;,0,0,0,0,0,0,0,0,0,0,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,136,                double r = 0;,0,0,0,0,0,0,0,0,0,0,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,137,                double u = 0;,8,1,0,0,0,0,0,0,0,9,13,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,139,                if (FastMath.abs(e) > tol1) { // Fit parabola.,2,1,0,2,5,0,6,0,0,9,46,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,140,                    r = (x - w) * (fx - fv);,10,3,0,2,4,0,0,0,0,14,24,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,141,                    q = (x - v) * (fx - fw);,10,3,0,2,4,0,0,0,0,14,24,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,142,                    p = (x - v) * q - (x - w) * r;,14,5,0,2,4,0,8,0,0,28,30,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,143,                    q = 2 * (q - r);,6,2,1,1,2,0,4,0,0,22,16,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,145,                    if (q > 0) {,2,1,0,1,3,0,0,0,0,3,12,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,146,                        p = -p;,0,0,0,0,0,0,0,0,0,0,7,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,148,                        q = -q;,8,2,0,0,0,0,6,0,0,18,7,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,151,                    r = e;,6,1,0,0,0,0,0,0,0,8,6,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,152,                    e = d;,0,0,0,0,0,0,0,0,0,0,6,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,154,                    if (p > q * (a - x) &&,8,5,0,1,3,0,0,0,0,13,22,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,158,                        d = p / q;,6,1,0,0,0,0,0,0,0,8,10,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,159,                        u = x + d;,6,1,0,0,0,0,0,0,0,8,10,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,162,                        if (u - a < tol2 || b - u < tol2) {,14,5,0,1,3,0,0,0,0,19,35,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,163,                            if (x <= m) {,4,1,1,1,3,0,0,0,0,8,13,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,164,                                d = tol1;,4,0,0,0,0,0,0,0,0,5,9,16,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,171,                        if (x < m) {,2,1,1,1,3,0,0,0,0,8,12,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,172,                            e = b - x;,10,3,1,0,0,0,0,0,0,17,10,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,174,                            e = a - x;,6,1,0,0,0,0,0,0,0,8,10,14,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,176,                        d = GOLDEN_SECTION * e;,6,1,0,0,0,0,0,0,0,8,23,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,180,                    if (x < m) {,0,0,0,1,3,0,0,0,0,4,12,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,183,                        e = a - x;,8,2,0,0,0,0,0,0,0,11,10,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,185,                    d = GOLDEN_SECTION * e;,6,1,0,0,0,0,0,0,0,8,23,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,189,                if (FastMath.abs(d) < tol1) {,2,1,0,2,5,0,6,0,0,9,29,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,190,                    if (d >= 0) {,2,1,1,1,3,0,0,0,0,9,13,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,191,                        u = x + tol1;,6,1,0,0,0,0,0,0,0,8,13,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,193,                        u = x - tol1;,6,1,0,0,0,0,0,0,0,8,13,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,196,                    u = x + d;,6,1,0,0,0,0,0,0,0,8,10,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,199,                double fu = computeObjectiveValue(u);,2,0,0,1,2,0,4,0,0,6,37,9,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,200,                if (!isMinim) {,6,0,0,1,3,0,0,0,0,9,15,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,205,                if (fu <= fx) {,4,1,0,1,3,0,10,0,0,15,15,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,206,                    if (u < x) {,4,1,0,1,3,0,0,0,0,5,12,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,207,                        b = x;,0,0,0,0,0,0,0,0,0,0,6,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,209,                        a = x;,0,0,0,0,0,0,0,0,0,0,6,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,211,                    v = w;,0,0,0,0,0,0,0,0,0,0,6,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,212,                    fv = fw;,4,0,0,0,0,0,0,0,0,5,8,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,213,                    w = x;,4,0,0,0,0,0,0,0,0,5,6,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,214,                    fw = fx;,0,0,0,0,0,0,0,0,0,0,8,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,215,                    x = u;,6,0,0,0,0,0,0,0,0,8,6,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,216,                    fx = fu;,4,0,0,0,0,0,0,0,0,5,8,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,218,                    if (u < x) {,4,1,0,1,3,0,0,0,0,5,12,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,219,                        a = u;,4,0,0,0,0,0,0,0,0,5,6,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,221,                        b = u;,4,0,0,0,0,0,0,0,0,5,6,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,223,                    if (fu <= fw ||,6,2,0,0,1,0,0,0,0,8,15,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,225,                        v = w;,4,0,0,0,0,0,0,0,0,5,6,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,226,                        fv = fw;,6,0,0,0,0,0,0,0,0,7,8,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,227,                        w = u;,4,0,0,0,0,0,0,0,0,5,6,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,228,                        fw = fu;,4,0,0,0,0,0,0,0,0,5,8,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,229,                    } else if (fu <= fv ||,0,0,0,0,2,0,0,0,0,2,22,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,232,                        v = u;,4,0,0,0,0,0,0,0,0,5,6,13,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,233,                        fv = fu;,4,0,0,0,0,0,12,0,0,17,8,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,237,                previous = current;,4,0,0,0,0,0,0,0,0,5,19,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,238,"                current = new UnivariateRealPointValuePair(x, isMinim ? fx : -fx);",0,0,0,1,2,0,0,0,0,3,66,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,241,                if (checker != null) {,8,1,1,1,3,0,0,0,0,12,22,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,246,            } else { // Default termination (Brent's criterion).,0,0,0,1,4,0,0,0,0,5,52,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,247,                return current;,2,0,0,0,0,1,0,0,0,2,15,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,249,            ++iter;,2,0,0,0,0,0,0,0,0,3,7,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,250,        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,33,public final class MathUtils {,0,0,0,0,1,0,0,0,0,1,30,4,0.00228,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,75,    private static final long[] FACTORIALS = new long[] {,2,0,0,2,5,3,0,0,0,5,53,2,0.00228,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,402,                            tmp = 0.1;,0,0,0,0,0,0,0,0,0,0,10,4,0.28571,1,1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,275,        updateJacobian();,0,0,0,1,2,0,2,0,0,2,17,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,278,        double[][] jTj = new double[cols][cols];,2,0,1,4,8,0,0,0,0,6,40,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,279,        for (int i = 0; i < cols; ++i) {,8,1,0,1,3,0,0,0,0,10,32,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,280,            for (int j = i; j < cols; ++j) {,10,1,0,1,3,0,0,0,0,12,32,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,281,                double sum = 0;,4,1,0,0,0,0,0,0,0,5,15,3,1.0,0,0
