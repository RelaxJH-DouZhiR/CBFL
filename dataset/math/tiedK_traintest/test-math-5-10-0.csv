dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,1,53,"        super(LocalizedFormats.FRACTION_CONVERSION_OVERFLOW, value, p, q);",10,0,0,1,2,0,0,0,0,10,66,4,1.33333,0,0
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,1,54,    },0,0,0,0,1,0,0,0,0,1,1,4,1.33333,0,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,1,48,                                Object ... args) {,8,0,0,0,2,0,0,2,0,10,18,2,0.8,0,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,1,49,"        getContext().addMessage(pattern, args);",4,0,0,2,4,0,8,0,0,13,39,0,0.8,0,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,1,50,    },0,0,0,0,1,0,0,0,0,1,1,4,0.8,0,0
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,306,"                throw new FractionConversionException(value, p2, q2);",6,0,0,1,2,0,0,2,0,8,53,9,0.5,1,1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,332,            numerator   = BigInteger.valueOf(p1);,2,0,0,1,2,0,6,0,0,9,37,6,0.5,0,0
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,333,            denominator = BigInteger.valueOf(q1);,2,0,0,1,2,0,6,0,0,9,37,6,0.5,0,0
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,356,"        this(value, 0, maxDenominator, 100);",0,0,0,1,2,0,0,0,0,3,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,357,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,144,"       this(value, 0, maxDenominator, 100);",4,0,0,1,2,0,0,0,0,4,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,145,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,215,"                throw new FractionConversionException(value, p2, q2);",6,0,0,1,2,0,0,2,0,8,53,9,0.5,1,1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,239,            this.numerator = (int) p1;,4,0,0,1,2,0,0,0,0,5,26,6,0.5,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,240,            this.denominator = (int) q1;,0,0,0,1,2,0,0,0,0,3,28,4,0.5,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,69,        this(LocalizedFormats.ILLEGAL_STATE);,12,5,0,1,2,0,0,0,0,18,37,3,0.23529,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,70,    },0,0,0,0,1,0,0,0,0,1,1,4,0.23529,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,74,        return context;,4,0,0,0,0,1,0,0,0,5,15,3,0.23529,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,45,                                     Object ... args) {,6,2,0,0,2,0,8,2,0,19,18,2,0.22222,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,46,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.22222,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,47,"        context.addMessage(pattern, args);",0,0,0,1,2,0,0,0,0,3,34,4,0.22222,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.22222,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,193,        return inverseCumulativeProbability(random.nextDouble());,2,0,0,2,4,2,8,0,0,11,57,3,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,86,        final int indexRm1 = iRm1[index];,4,2,1,1,2,1,8,0,0,19,33,3,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,87,        final int indexRm2 = iRm2[index];,4,0,1,1,2,1,0,0,0,14,33,3,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,89,        final int v0       = v[index];,2,0,1,1,2,1,0,0,0,7,30,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,90,        final int vM1      = v[i1[index]];,2,0,1,2,4,1,0,0,0,10,34,3,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,91,        final int vM2      = v[i2[index]];,2,0,1,2,4,1,0,0,0,9,34,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,92,        final int vM3      = v[i3[index]];,2,0,1,2,4,1,0,0,0,9,34,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,94,        final int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);,2,3,1,4,8,1,0,0,0,14,71,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,95,        final int z1 = (v0 ^ (v0 << 25))  ^ (vM1 ^ (vM1 >>> 27));,10,5,0,4,8,1,0,0,0,16,57,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,96,        final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));,0,0,0,3,6,0,0,0,0,9,49,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,97,        final int z3 = z1      ^ z2;,6,1,0,0,0,1,0,0,0,8,28,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,98,        int z4 = z0 ^ (z1 ^ (z1 << 9)) ^ (z2 ^ (z2 << 21)) ^ (z3 ^ (z3 >>> 21));,0,0,0,6,12,0,0,0,0,18,72,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,100,        v[index]     = z3;,2,0,1,1,2,0,0,0,0,7,18,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,101,        v[indexRm1]  = z4;,2,0,1,1,2,0,0,0,0,7,18,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,102,        v[indexRm2] &= 0x80000000;,0,0,1,1,2,0,0,0,0,5,26,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,103,        index        = indexRm1;,4,0,0,0,0,0,0,0,0,5,24,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,108,        z4 = z4 ^ ((z4 <<  7) & 0xe46e1700);,6,3,0,2,4,0,0,0,0,10,36,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,109,        z4 = z4 ^ ((z4 << 15) & 0x9b868000);,8,3,0,2,4,0,0,0,0,12,36,3,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,111,        return z4 >>> (32 - bits);,4,2,0,1,2,1,0,0,0,6,26,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,90,        final long high = ((long) next(26)) << 26;,0,0,0,3,6,0,0,0,0,9,42,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,91,        final int  low  = next(26);,0,0,0,1,2,0,0,0,0,3,27,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,92,        return (high | low) * 0x1.0p-52d;,0,0,0,1,2,1,0,0,0,4,33,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,130,            double k = FastMath.sqrt((1.0 - p) / p);,8,2,0,2,4,0,10,0,0,20,40,3,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,131,            double tmp = mu - k * sigma;,8,2,0,0,0,0,0,0,0,10,28,7,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,132,            if (tmp > lower) {,0,0,0,1,3,0,0,0,0,4,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,135,            k = 1.0 / k;,4,1,0,0,0,0,0,0,0,6,12,6,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,136,            tmp = mu + k * sigma;,10,2,0,0,0,0,0,0,0,13,21,3,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,137,            if (tmp < upper) {,4,1,0,1,3,0,0,0,0,5,18,6,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,138,                upper = ((int) Math.ceil(tmp)) - 1;,2,1,0,3,6,0,6,0,0,10,35,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,385,        return Math.sqrt(a);,2,0,0,1,2,3,0,6,0,10,20,1,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,125,        final double mu = getNumericalMean();,2,0,0,1,2,1,2,0,0,5,37,4,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,126,        final double sigma = FastMath.sqrt(getNumericalVariance());,2,0,0,2,4,1,6,0,0,9,59,4,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,127,        final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||,6,1,1,2,5,1,12,0,0,24,79,3,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,129,        if (chebyshevApplies) {,2,0,0,1,3,0,0,0,0,2,23,4,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,142,"        return solveInverseCumulativeProbability(p, lower, upper);",0,0,0,1,2,1,8,0,0,8,58,5,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,158,        while (lower + 1 < upper) {,4,2,0,1,3,0,0,0,0,6,27,4,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,176,        return upper;,2,0,0,0,0,1,0,0,0,2,13,4,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,268,        return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();,0,0,0,6,12,1,0,0,0,19,90,4,0.16667,1,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,279,        if (!numericalVarianceIsCalculated) {,2,0,0,1,3,0,0,0,0,3,37,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,280,            numericalVariance = calculateNumericalVariance();,0,0,0,1,2,0,0,0,0,3,49,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,281,            numericalVarianceIsCalculated = true;,2,0,0,0,0,0,0,0,0,4,37,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,283,        return numericalVariance;,2,0,0,0,0,1,0,0,0,2,25,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,292,        final double N = getPopulationSize();,4,0,0,1,2,2,6,0,0,12,37,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,293,        final double m = getNumberOfSuccesses();,2,0,0,1,2,1,2,0,0,5,40,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,294,        final double n = getSampleSize();,2,0,0,1,2,1,2,0,0,5,33,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,295,        return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));,18,6,0,5,10,1,0,0,0,24,55,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,308,"        return FastMath.max(0,",0,0,0,0,1,1,0,0,0,2,22,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,321,"        return FastMath.min(getNumberOfSuccesses(), getSampleSize());",0,0,0,3,6,1,8,0,0,8,61,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,105,        int lower = getSupportLowerBound();,2,0,0,1,2,0,2,0,0,4,35,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,106,        if (p == 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,109,        if (lower == Integer.MIN_VALUE) {,0,0,0,1,3,0,0,0,0,4,33,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,114,"            lower -= 1; // this ensures cumulativeProbability(lower) < p, which",2,0,0,1,2,0,0,0,0,3,67,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,118,        int upper = getSupportUpperBound();,2,0,0,1,2,0,2,0,0,4,35,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,119,        if (p == 1.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,101,        if (p < 0.0 || p > 1.0) {,0,0,0,1,3,0,0,0,0,4,25,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,816,        final int len = a.length;,6,3,0,0,0,0,2,4,0,15,25,3,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,817,        if (len != b.length) {,8,1,0,1,3,0,4,4,0,17,22,3,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,823,        final double[] prodHigh = new double[len];,2,0,1,2,4,1,0,0,0,5,42,4,0.09091,1,1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,824,        double prodLowSum = 0;,2,0,0,0,0,0,0,0,0,2,22,5,0.09091,1,1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,826,        for (int i = 0; i < len; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,827,            final double ai = a[i];,2,0,1,1,2,1,0,0,0,7,23,6,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,828,            final double ca = SPLIT_FACTOR * ai;,0,0,0,0,0,0,0,0,0,0,36,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,829,            final double aHigh = ca - (ca - ai);,8,2,0,1,2,1,0,0,0,11,36,6,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,830,            final double aLow = ai - aHigh;,0,0,0,0,0,0,0,0,0,0,31,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,832,            final double bi = b[i];,0,0,0,1,2,0,0,0,0,3,23,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,833,            final double cb = SPLIT_FACTOR * bi;,6,1,0,0,0,1,0,0,0,8,36,6,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,834,            final double bHigh = cb - (cb - bi);,0,0,0,1,2,0,0,0,0,3,36,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,835,            final double bLow = bi - bHigh;,6,1,1,0,0,1,0,0,0,13,31,3,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,836,            prodHigh[i] = ai * bi;,4,1,1,1,2,0,0,0,0,10,22,6,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,837,            final double prodLow = aLow * bLow - (((prodHigh[i] -,0,0,0,1,5,0,0,0,0,6,53,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,841,            prodLowSum += prodLow;,6,0,0,0,0,0,0,0,0,7,22,3,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,845,        final double prodHighCur = prodHigh[0];,2,0,1,1,2,1,0,0,0,5,39,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,846,        double prodHighNext = prodHigh[1];,2,0,1,1,2,0,0,0,0,4,34,5,0.09091,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,3,38,"        super(value, 0, false);",2,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,3,39,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,3,48,"        super(specific, value, 0, false);",4,0,0,1,2,0,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,3,49,    },4,3,1,0,1,0,0,0,0,11,1,11,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,50,        this(boundIsAllowed ?,2,0,0,0,1,0,0,0,0,2,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,68,"        super(specific, wrong, min);",6,0,0,1,2,0,0,0,0,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,70,        this.min = min;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,71,        this.boundIsAllowed = boundIsAllowed;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,72,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,78,        return boundIsAllowed;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,85,        return min;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,3,46,"        super(pattern, wrong, arguments);",4,1,0,1,2,0,0,0,0,5,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,3,47,        argument = wrong;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,3,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,3,54,        return argument;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,3,44,                                        Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,3,45,        context = new ExceptionContext(this);,4,0,0,1,2,3,0,2,0,10,37,1,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,3,46,"        context.addMessage(pattern, args);",0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,3,47,    },2,1,1,0,1,0,0,0,0,12,1,10,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,3,51,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,3,57,        return context.getMessage();,0,0,0,1,2,1,4,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,3,63,        return context.getLocalizedMessage();,0,0,0,1,2,1,4,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,3,44,"        super(specific, wrong, expected);",0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,3,45,        dimension = expected;,4,0,0,0,0,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,3,46,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,3,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);",8,0,0,1,2,0,0,0,0,8,67,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,3,57,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,3,63,        return dimension;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,61,"        this(wrong, previous, index, MathArrays.OrderDirection.INCREASING, true);",12,0,0,1,2,0,0,0,0,13,73,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,62,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,80,        super(direction == MathArrays.OrderDirection.INCREASING ?,8,1,0,0,1,0,0,0,0,9,57,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,89,        this.direction = direction;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,90,        this.strict = strict;,16,7,0,0,0,0,10,0,0,35,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,91,        this.index = index;,4,0,0,0,0,0,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,92,        this.previous = previous;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,93,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,99,        return direction;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,105,        return strict;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,113,        return index;,2,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,119,        return previous;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,292,    public static enum OrderDirection {,0,0,0,0,1,0,0,0,0,1,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,294,"        INCREASING,",12,0,0,0,0,0,0,0,0,12,11,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,296,        DECREASING,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,45,                                     Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,46,        context = new ExceptionContext(this);,12,1,0,1,2,0,0,2,0,18,37,1,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,47,"        context.addMessage(pattern, args);",0,0,0,1,2,0,8,0,0,8,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,60,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,61,        context = new ExceptionContext(this);,4,1,1,1,2,1,4,2,0,19,37,1,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,62,"        context.addMessage(pattern, args);",0,0,0,1,2,0,8,0,0,8,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,63,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,69,        this(LocalizedFormats.ILLEGAL_STATE);,4,0,0,1,2,0,0,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,70,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,74,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,80,        return context.getMessage();,0,0,0,1,2,1,4,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,86,        return context.getLocalizedMessage();,0,0,0,1,2,1,4,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,3,37,"        super(value, 0, true);",6,3,0,1,2,0,0,0,0,9,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,3,38,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,3,47,"        super(specific, value, 0, true);",4,0,0,1,2,0,0,0,0,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,3,48,    },4,0,0,0,1,0,0,0,0,5,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,3,43,    public MathArithmeticException() {,2,0,0,1,3,1,0,0,0,3,34,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,3,44,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,3,45,        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,4,0,0,1,2,0,4,0,0,8,58,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,3,46,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,3,56,                                   Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,3,57,        context = new ExceptionContext(this);,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,3,58,"        context.addMessage(pattern, args);",4,0,0,1,2,0,2,0,0,6,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,3,59,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,3,63,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,3,69,        return context.getMessage();,0,0,0,1,2,1,4,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,3,75,        return context.getLocalizedMessage();,0,0,0,1,2,1,4,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,3,37,    public MathInternalError() {,0,0,0,1,3,0,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,3,38,"        getContext().addMessage(LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",4,0,0,2,4,0,6,0,0,10,69,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,3,39,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,3,46,"        super(cause, LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",8,0,0,1,2,0,0,0,0,8,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,3,47,    },0,1,0,0,1,0,12,0,0,13,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,3,56,"        super(pattern, args);",4,0,0,1,2,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,3,57,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,3,41,        this(LocalizedFormats.NULL_NOT_ALLOWED);,6,1,0,1,2,0,0,0,0,7,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,3,42,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,3,50,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,3,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,3,37,        this(LocalizedFormats.NO_DATA);,4,0,0,1,2,0,0,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,3,38,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,3,45,        super(specific);,2,0,0,1,2,0,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,3,46,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,315,            switch (dir) {,2,0,0,1,3,0,0,0,0,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,52,    private MathArrays() {},2,0,0,2,4,1,0,0,0,3,23,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,86,        double[] newArr = new double[arr.length];,6,0,0,2,4,0,0,0,0,6,41,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,87,        for (int i = 0; i < arr.length; i++) {,10,1,0,1,3,0,0,0,0,12,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,88,            newArr[i] = arr[i] * val;,2,1,1,2,4,0,0,0,0,12,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,90,        return newArr;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,103,        for (int i = 0; i < arr.length; i++) {,0,0,0,1,3,0,0,0,0,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,104,            arr[i] *= val;,2,0,1,1,2,0,0,0,0,8,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,106,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,120,        if (a.length != b.length) {,8,1,0,1,3,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,121,"            throw new DimensionMismatchException(a.length, b.length);",0,0,0,1,2,0,0,0,0,3,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,124,        final double[] result = a.clone();,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,125,        for (int i = 0; i < a.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,126,            result[i] += b[i];,2,0,0,2,4,0,6,0,0,9,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,128,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,142,        if (a.length != b.length) {,10,3,0,1,3,0,0,0,0,13,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,143,"            throw new DimensionMismatchException(a.length, b.length);",0,0,0,1,2,0,0,0,0,3,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,146,        final double[] result = a.clone();,2,0,0,2,4,1,4,0,0,7,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,147,        for (int i = 0; i < a.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,148,            result[i] -= b[i];,4,1,1,2,4,0,0,0,0,14,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,150,        return result;,6,0,0,0,0,1,0,4,0,10,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,164,        if (a.length != b.length) {,0,0,0,1,3,0,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,165,"            throw new DimensionMismatchException(a.length, b.length);",8,0,0,1,2,0,0,2,0,10,57,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,168,        final double[] result = a.clone();,4,0,0,2,4,2,4,0,0,10,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,169,        for (int i = 0; i < a.length; i++) {,14,1,0,1,3,0,8,0,0,25,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,170,            result[i] *= b[i];,0,0,0,2,4,0,0,0,0,6,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,172,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,186,        if (a.length != b.length) {,0,0,0,1,3,0,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,187,"            throw new DimensionMismatchException(a.length, b.length);",0,0,0,1,2,0,0,0,0,3,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,190,        final double[] result = a.clone();,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,191,        for (int i = 0; i < a.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,192,            result[i] /= b[i];,6,2,1,2,4,1,6,0,0,24,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,194,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,205,        double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,206,        for (int i = 0; i < p1.length; i++) {,10,1,0,1,3,0,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,207,            sum += FastMath.abs(p1[i] - p2[i]);,4,0,0,3,6,0,0,0,0,5,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,209,        return sum;,2,0,0,0,0,1,0,2,0,4,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,220,      int sum = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,221,      for (int i = 0; i < p1.length; i++) {,10,1,0,1,3,0,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,222,          sum += FastMath.abs(p1[i] - p2[i]);,0,0,0,3,6,0,0,0,0,9,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,224,      return sum;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,235,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,236,        for (int i = 0; i < p1.length; i++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,237,            final double dp = p1[i] - p2[i];,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,238,            sum += dp * dp;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,240,        return FastMath.sqrt(sum);,2,0,0,1,2,1,12,0,0,15,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,251,      double sum = 0;,8,1,0,0,0,0,0,0,0,10,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,252,      for (int i = 0; i < p1.length; i++) {,6,1,0,1,3,0,0,0,0,7,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,253,          final double dp = p1[i] - p2[i];,2,1,1,2,4,1,0,0,0,12,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,254,          sum += dp * dp;,2,0,0,0,0,0,4,0,0,6,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,256,      return FastMath.sqrt(sum);,0,0,1,1,2,1,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,267,        double max = 0;,2,0,0,0,0,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,268,        for (int i = 0; i < p1.length; i++) {,10,1,0,1,3,0,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,269,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",2,1,1,4,8,0,10,0,0,22,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,271,        return max;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,282,        int max = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,283,        for (int i = 0; i < p1.length; i++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,284,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",2,1,1,4,8,0,10,0,0,22,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,286,        return max;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,311,        T previous = val[0];,2,0,1,1,2,0,0,2,0,6,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,312,        final int max = val.length;,8,0,0,0,0,1,0,0,0,9,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,313,        for (int i = 1; i < max; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,315,            switch (dir) {,2,0,0,1,3,0,0,0,0,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,317,                comp = previous.compareTo(val[i]);,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,318,                if (strict) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,319,                    if (comp >= 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,320,                        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,323,                    if (comp > 0) {,2,1,0,1,3,0,0,0,0,3,15,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,324,                        return false;,0,0,0,0,0,1,0,0,0,1,13,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,329,                comp = val[i].compareTo(previous);,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,330,                if (strict) {,2,0,0,1,3,0,0,0,0,2,13,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,331,                    if (comp >= 0) {,2,1,0,1,3,0,0,0,0,3,16,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,332,                        return false;,0,0,0,0,0,1,0,0,0,1,13,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,335,                    if (comp > 0) {,2,1,0,1,3,0,0,0,0,3,15,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,336,                       return false;,0,0,0,0,0,1,0,0,0,1,13,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,342,                throw new MathInternalError();,0,0,0,1,2,0,0,2,0,2,30,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,345,            previous = val[i];,2,0,1,1,2,0,0,0,0,7,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,347,        return true;,2,0,0,0,0,1,0,0,0,3,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,359,"        return checkOrder(val, dir, strict, false);",0,0,0,1,2,1,0,0,0,4,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,376,        double previous = val[0];,2,0,1,1,2,0,0,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,377,        final int max = val.length;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,381,        for (index = 1; index < max; index++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,382,            switch (dir) {,2,0,0,1,3,0,0,0,0,2,14,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,384,                if (strict) {,2,0,0,1,3,0,0,0,0,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,385,                    if (val[index] <= previous) {,2,1,1,2,5,0,0,0,0,12,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,386,                        break ITEM;,2,0,0,0,0,0,0,0,0,2,11,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,389,                    if (val[index] < previous) {,2,1,1,2,5,0,0,0,0,7,28,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,390,                        break ITEM;,2,0,0,0,0,0,0,0,0,2,11,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,395,                if (strict) {,2,0,0,1,3,0,8,0,0,10,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,396,                    if (val[index] >= previous) {,2,1,1,2,5,0,0,0,0,7,29,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,397,                        break ITEM;,2,0,0,0,0,0,0,0,0,2,11,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,400,                    if (val[index] > previous) {,2,1,1,2,5,0,0,0,0,7,28,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,401,                        break ITEM;,6,0,1,0,0,1,0,0,0,11,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,407,                throw new MathInternalError();,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,410,            previous = val[index];,8,1,1,1,2,0,8,0,0,27,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,413,        if (index == max) {,4,1,0,1,3,0,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,415,            return true;,0,0,0,0,0,1,0,0,0,1,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,419,        if (abort) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,420,"            throw new NonMonotonicSequenceException(val[index], previous, index, dir, strict);",8,0,1,2,4,0,0,2,0,14,82,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,422,            return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,437,"        checkOrder(val, dir, strict, true);",0,0,0,1,2,0,8,0,0,9,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,438,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,448,"        checkOrder(val, OrderDirection.INCREASING, true);",2,0,0,1,2,0,0,0,0,2,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,449,    },2,0,1,0,1,0,0,0,0,5,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,461,        MathUtils.checkNotNull(in);,0,0,0,1,2,0,8,4,0,13,27,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,462,        for (int i = 1; i < in.length; i++) {,20,2,0,1,3,1,0,0,0,25,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,463,            if (in[i].length != in[0].length) {,14,2,1,3,7,0,0,0,0,23,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,464,                throw new DimensionMismatchException(,0,0,0,0,1,0,0,2,0,2,37,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,469,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,481,        for (int i = 0; i < in.length; i++) {,10,1,0,1,3,0,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,482,            if (in[i] <= 0) {,0,0,0,2,5,0,0,0,0,7,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,483,                throw new NotStrictlyPositiveException(in[i]);,0,0,1,2,4,0,0,2,0,6,46,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,486,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,497,        for (int i = 0; i < in.length; i++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,498,            if (in[i] < 0) {,0,0,0,2,5,0,0,0,0,7,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,499,                throw new NotPositiveException(in[i]);,2,0,1,2,4,0,0,4,0,10,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,502,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,513,        for (int i = 0; i < in.length; i ++) {,12,1,0,1,3,1,2,0,0,17,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,514,            for (int j = 0; j < in[i].length; j++) {,0,0,0,2,5,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,515,                if (in[i][j] < 0) {,0,1,1,3,7,0,0,0,0,7,19,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,516,                    throw new NotPositiveException(in[i][j]);,2,1,0,3,6,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,520,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,583,        double rdwarf = 3.834e-20;,2,0,0,0,0,0,0,0,0,2,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,584,        double rgiant = 1.304e+19;,4,0,0,0,0,1,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,585,        double s1 = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,586,        double s2 = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,587,        double s3 = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,588,        double x1max = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,589,        double x3max = 0;,2,1,0,0,0,0,4,0,0,7,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,590,        double floatn = v.length;,8,0,1,0,0,1,0,0,0,13,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,591,        double agiant = rgiant / floatn;,6,1,0,0,0,0,0,0,0,7,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,592,        for (int i = 0; i < v.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,593,            double xabs = Math.abs(v[i]);,6,1,1,2,4,0,4,0,0,15,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,594,            if (xabs < rdwarf || xabs > agiant) {,8,3,0,1,3,0,0,0,0,11,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,595,                if (xabs > rdwarf) {,4,1,0,1,3,0,0,0,0,5,20,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,596,                    if (xabs > x1max) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,597,                        double r = x1max / xabs;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,598,                        s1= 1 + s1 * r * r;,8,2,0,0,0,0,0,0,0,11,19,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,599,                        x1max = xabs;,4,0,0,0,0,0,0,0,0,5,13,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,600,                    } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,601,                        double r = xabs / x1max;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,602,                        s1 += r * r;,6,1,0,0,0,0,0,0,0,8,12,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,603,                    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,605,                    if (xabs > x3max) {,4,1,0,1,3,0,0,0,0,5,19,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,606,                        double r = x3max / xabs;,6,1,0,0,0,0,0,0,0,7,24,13,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,607,                        s3= 1 + s3 * r * r;,8,2,0,0,0,0,0,0,0,11,19,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,608,                        x3max = xabs;,6,0,1,0,0,0,0,0,0,10,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,609,                    } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,610,                        if (xabs != 0) {,2,1,0,1,3,0,0,0,0,3,16,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,611,                            double r = xabs / x3max;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,612,                            s3 += r * r;,6,1,0,0,0,0,0,0,0,8,12,14,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,613,                        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,617,                s2 += xabs * xabs;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,621,        if (s1 != 0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,622,            norm = x1max * Math.sqrt(s1 + (s2 / x1max) / x1max);,12,4,0,2,4,0,4,0,0,21,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,624,            if (s2 == 0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,625,                norm = x3max * Math.sqrt(s3);,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,627,                if (s2 >= x3max) {,0,0,0,1,3,0,0,0,0,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,628,                    norm = Math.sqrt(s2 * (1 + (x3max / s2) * (x3max * s3)));,12,5,0,4,8,0,4,0,0,22,57,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,630,                    norm = Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));,12,4,0,4,8,0,4,0,0,21,56,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,634,        return norm;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,655,"        sortInPlace(x, OrderDirection.INCREASING, yList);",4,0,0,1,2,0,6,0,0,10,49,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,656,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,682,        if (x == null) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,683,            throw new NullArgumentException();,0,0,0,1,2,0,0,2,0,2,34,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,686,        final int yListLen = yList.length;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,687,        final int len = x.length;,8,0,0,0,0,2,0,0,0,10,25,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,689,        for (int j = 0; j < yListLen; j++) {,2,0,0,1,3,3,0,4,0,9,36,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,690,            final double[] y = yList[j];,2,0,1,2,4,1,0,0,0,7,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,691,            if (y == null) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,692,                throw new NullArgumentException();,2,0,0,1,2,0,0,2,0,4,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,694,            if (y.length != len) {,14,4,1,1,3,0,0,0,0,24,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,695,"                throw new DimensionMismatchException(y.length, len);",6,0,0,1,2,0,0,2,0,8,52,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,700,"        final List<Pair<Double, Integer>> list",2,0,0,0,0,1,0,8,0,11,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,702,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,703,"            list.add(new Pair<Double, Integer>(x[i], i));",2,0,1,3,6,0,4,6,0,16,45,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,707,"        final Comparator<Pair<Double, Integer>> comp",2,0,0,0,0,1,0,8,0,11,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,722,"        Collections.sort(list, comp);",0,0,0,1,2,0,8,0,0,8,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,727,        final int[] indices = new int[len];,0,0,0,2,4,0,0,0,0,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,728,        for (int i = 0; i < len; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,729,"            final Pair<Double, Integer> e = list.get(i);",2,0,0,1,2,1,6,6,0,15,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,730,            x[i] = e.getKey();,0,0,1,2,4,0,4,0,0,9,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,731,            indices[i] = e.getValue();,0,0,1,2,4,0,4,0,0,7,26,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,736,        for (int j = 0; j < yListLen; j++) {,16,2,0,1,3,0,0,0,0,20,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,738,            final double[] yInPlace = yList[j];,0,0,0,2,4,0,0,0,0,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,739,            final double[] yOrig = yInPlace.clone();,2,0,0,2,4,1,4,0,0,7,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,741,            for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,742,                yInPlace[i] = yOrig[indices[i]];,6,1,1,3,6,0,4,0,0,23,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,745,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,754,"         return copyOf(source, source.length);",2,0,0,1,2,1,0,0,0,3,37,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,764,"         return copyOf(source, source.length);",2,0,1,1,2,2,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,777,         final int[] output = new int[len];,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,778,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",4,0,0,2,4,0,14,0,0,18,73,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,779,         return output;,4,0,0,0,0,1,0,0,0,5,14,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,792,         final double[] output = new double[len];,2,0,1,2,4,1,0,0,0,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,793,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",8,1,0,2,4,1,14,0,0,24,73,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,794,         return output;,6,2,0,0,0,1,8,0,0,16,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,818,"            throw new DimensionMismatchException(len, b.length);",6,0,0,1,2,0,0,2,0,8,52,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,847,        double sHighPrev = prodHighCur + prodHighNext;,0,0,0,0,0,0,0,0,0,0,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,848,        double sPrime = sHighPrev - prodHighNext;,8,1,0,0,0,0,0,0,0,10,41,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,849,        double sLowSum = (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);,0,0,0,3,6,0,0,0,0,9,80,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,851,        final int lenMinusOne = len - 1;,4,1,0,0,0,1,8,0,0,14,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,852,        for (int i = 1; i < lenMinusOne; i++) {,8,1,0,1,3,0,0,0,0,10,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,853,            prodHighNext = prodHigh[i + 1];,6,1,1,1,2,0,0,0,0,11,31,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,854,            final double sHighCur = sHighPrev + prodHighNext;,6,1,0,0,0,1,0,0,0,8,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,855,            sPrime = sHighCur - prodHighNext;,6,1,0,0,0,0,0,0,0,8,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,856,            sLowSum += (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);,12,4,0,3,6,0,0,0,0,17,71,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,857,            sHighPrev = sHighCur;,4,0,0,0,0,0,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,860,        double result = sHighPrev + (prodLowSum + sLowSum);,12,2,0,1,2,0,0,0,0,15,51,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,862,        if (Double.isNaN(result)) {,0,0,0,2,5,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,865,            result = 0;,2,0,0,0,0,0,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,866,            for (int i = 0; i < len; ++i) {,0,0,0,1,3,0,0,0,0,4,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,867,                result += a[i] * b[i];,0,0,0,2,4,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,871,        return result;,6,3,1,0,0,1,8,0,0,21,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,910,        final double ca1        = SPLIT_FACTOR * a1;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,911,        final double a1High     = ca1 - (ca1 - a1);,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,912,        final double a1Low      = a1 - a1High;,8,1,0,0,0,1,0,0,0,11,38,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,913,        final double cb1        = SPLIT_FACTOR * b1;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,914,        final double b1High     = cb1 - (cb1 - b1);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,915,        final double b1Low      = b1 - b1High;,16,4,0,0,0,1,0,0,0,22,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,918,        final double prod1High  = a1 * b1;,6,1,0,0,0,1,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,919,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,20,8,0,3,6,1,0,0,0,29,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,922,        final double ca2        = SPLIT_FACTOR * a2;,8,1,0,0,0,1,0,2,0,13,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,923,        final double a2High     = ca2 - (ca2 - a2);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,924,        final double a2Low      = a2 - a2High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,925,        final double cb2        = SPLIT_FACTOR * b2;,10,2,1,0,0,1,0,0,0,18,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,926,        final double b2High     = cb2 - (cb2 - b2);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,927,        final double b2Low      = b2 - b2High;,8,0,0,0,0,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,930,        final double prod2High  = a2 * b2;,6,1,0,0,0,1,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,931,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,20,8,0,3,6,1,0,0,0,29,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,934,        final double s12High    = prod1High + prod2High;,0,0,0,0,0,0,0,0,0,0,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,935,        final double s12Prime   = s12High - prod2High;,6,1,0,0,0,1,0,0,0,8,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,936,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,0,0,0,3,6,0,0,0,0,9,86,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,940,        double result = s12High + (prod1Low + prod2Low + s12Low);,12,2,0,1,2,0,0,0,0,14,57,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,942,        if (Double.isNaN(result)) {,0,0,0,2,5,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,945,            result = a1 * b1 + a2 * b2;,10,3,0,0,0,0,0,0,0,14,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,948,        return result;,2,0,0,0,0,1,0,0,0,2,14,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,990,        final double ca1        = SPLIT_FACTOR * a1;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,991,        final double a1High     = ca1 - (ca1 - a1);,10,2,0,1,2,1,0,0,0,13,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,992,        final double a1Low      = a1 - a1High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,993,        final double cb1        = SPLIT_FACTOR * b1;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,994,        final double b1High     = cb1 - (cb1 - b1);,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,995,        final double b1Low      = b1 - b1High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,998,        final double prod1High  = a1 * b1;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,999,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1002,        final double ca2        = SPLIT_FACTOR * a2;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1003,        final double a2High     = ca2 - (ca2 - a2);,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1004,        final double a2Low      = a2 - a2High;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1005,        final double cb2        = SPLIT_FACTOR * b2;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1006,        final double b2High     = cb2 - (cb2 - b2);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1007,        final double b2Low      = b2 - b2High;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1010,        final double prod2High  = a2 * b2;,12,1,0,0,0,2,0,4,0,19,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1011,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,20,8,0,3,6,1,0,0,0,29,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1014,        final double ca3        = SPLIT_FACTOR * a3;,0,0,0,0,0,0,0,0,0,0,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1015,        final double a3High     = ca3 - (ca3 - a3);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1016,        final double a3Low      = a3 - a3High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1017,        final double cb3        = SPLIT_FACTOR * b3;,0,0,0,0,0,0,0,0,0,0,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1018,        final double b3High     = cb3 - (cb3 - b3);,14,5,0,1,2,1,0,0,0,21,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1019,        final double b3Low      = b3 - b3High;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1022,        final double prod3High  = a3 * b3;,38,12,1,0,0,1,0,0,0,58,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1023,        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);,20,8,0,3,6,1,0,0,0,29,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1026,        final double s12High    = prod1High + prod2High;,0,0,0,0,0,0,0,0,0,0,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1027,        final double s12Prime   = s12High - prod2High;,6,1,0,0,0,1,0,0,0,8,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1028,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,14,4,0,3,6,1,0,0,0,20,86,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1031,        final double s123High   = s12High + prod3High;,6,1,0,0,0,1,0,0,0,8,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1032,        final double s123Prime  = s123High - prod3High;,0,0,0,0,0,0,0,0,0,0,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1033,        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);,4,1,0,3,6,0,0,0,0,5,87,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1037,        double result = s123High + (prod1Low + prod2Low + prod3Low + s12Low + s123Low);,14,2,0,1,2,0,0,0,0,16,79,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1039,        if (Double.isNaN(result)) {,2,0,0,2,5,0,6,0,0,8,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1042,            result = a1 * b1 + a2 * b2 + a3 * b3;,14,5,0,0,0,0,0,0,0,20,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1045,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1092,        final double ca1        = SPLIT_FACTOR * a1;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1093,        final double a1High     = ca1 - (ca1 - a1);,14,4,0,1,2,1,6,0,0,25,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1094,        final double a1Low      = a1 - a1High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1095,        final double cb1        = SPLIT_FACTOR * b1;,10,1,0,0,0,1,4,0,0,16,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1096,        final double b1High     = cb1 - (cb1 - b1);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1097,        final double b1Low      = b1 - b1High;,6,1,0,0,0,0,0,0,0,8,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1100,        final double prod1High  = a1 * b1;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1101,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,20,8,0,3,6,1,0,0,0,29,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1104,        final double ca2        = SPLIT_FACTOR * a2;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1105,        final double a2High     = ca2 - (ca2 - a2);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1106,        final double a2Low      = a2 - a2High;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1107,        final double cb2        = SPLIT_FACTOR * b2;,10,2,0,0,0,1,8,0,0,21,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1108,        final double b2High     = cb2 - (cb2 - b2);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1109,        final double b2Low      = b2 - b2High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1112,        final double prod2High  = a2 * b2;,6,1,0,0,0,1,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1113,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1116,        final double ca3        = SPLIT_FACTOR * a3;,8,3,1,0,0,1,0,0,0,21,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1117,        final double a3High     = ca3 - (ca3 - a3);,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1118,        final double a3Low      = a3 - a3High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1119,        final double cb3        = SPLIT_FACTOR * b3;,12,4,1,0,0,2,0,0,0,21,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1120,        final double b3High     = cb3 - (cb3 - b3);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1121,        final double b3Low      = b3 - b3High;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1124,        final double prod3High  = a3 * b3;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1125,        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1128,        final double ca4        = SPLIT_FACTOR * a4;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1129,        final double a4High     = ca4 - (ca4 - a4);,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1130,        final double a4Low      = a4 - a4High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1131,        final double cb4        = SPLIT_FACTOR * b4;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1132,        final double b4High     = cb4 - (cb4 - b4);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1133,        final double b4Low      = b4 - b4High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1136,        final double prod4High  = a4 * b4;,6,1,0,0,0,1,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1137,        final double prod4Low   = a4Low * b4Low - (((prod4High - a4High * b4High) - a4Low * b4High) - a4High * b4Low);,20,8,0,3,6,1,0,0,0,29,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1140,        final double s12High    = prod1High + prod2High;,6,1,0,0,0,1,0,0,0,8,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1141,        final double s12Prime   = s12High - prod2High;,6,1,0,0,0,1,0,0,0,8,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1142,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,0,0,0,3,6,0,0,0,0,9,86,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1145,        final double s123High   = s12High + prod3High;,6,1,0,0,0,1,0,0,0,8,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1146,        final double s123Prime  = s123High - prod3High;,12,4,0,0,0,1,0,0,0,17,47,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1147,        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);,12,4,1,3,6,1,0,2,0,25,87,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1150,        final double s1234High  = s123High + prod4High;,0,0,0,0,0,0,0,0,0,0,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1151,        final double s1234Prime = s1234High - prod4High;,0,0,0,0,0,0,0,0,0,0,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1152,        final double s1234Low   = (prod4High - (s1234High - s1234Prime)) + (s123High - s1234Prime);,12,4,0,3,6,1,0,0,0,17,91,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1156,        double result = s1234High + (prod1Low + prod2Low + prod3Low + prod4Low + s12Low + s123Low + s1234Low);,0,0,0,1,2,0,0,0,0,3,102,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1158,        if (Double.isNaN(result)) {,0,0,0,2,5,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1161,            result = a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4;,18,7,0,0,0,0,0,0,0,26,47,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1164,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1178,        if ((x == null) || (y == null)) {,4,3,0,3,7,0,0,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1179,            return !((x == null) ^ (y == null));,0,0,0,3,6,1,0,0,0,10,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1181,        if (x.length != y.length) {,8,1,0,1,3,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1182,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1184,        for (int i = 0; i < x.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1185,"            if (!Precision.equals(x[i], y[i])) {",0,2,1,4,9,0,0,0,0,14,36,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1186,                return false;,4,0,0,0,0,1,0,0,0,6,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1189,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1204,        if ((x == null) || (y == null)) {,0,0,0,3,7,0,0,0,0,10,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1205,            return !((x == null) ^ (y == null));,12,7,1,3,6,1,0,0,0,24,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1207,        if (x.length != y.length) {,0,0,0,1,3,0,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1208,            return false;,4,2,0,0,0,1,0,0,0,9,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1210,        for (int i = 0; i < x.length; ++i) {,12,3,0,1,3,0,0,0,0,16,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1211,"            if (!Precision.equalsIncludingNaN(x[i], y[i])) {",0,0,1,4,9,0,4,0,0,13,48,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1212,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1215,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1229,        if ((x == null) || (y == null)) {,4,3,0,3,7,0,0,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1230,            return !((x == null) ^ (y == null));,4,3,0,3,6,1,0,0,0,8,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1232,        if (x.length != y.length) {,0,0,0,1,3,0,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1233,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1235,        for (int i = 0; i < x.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1236,"            if (!Precision.equals(x[i], y[i])) {",0,0,1,4,9,0,4,0,0,13,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1237,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1240,        return true;,4,1,0,0,0,1,0,0,0,6,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1255,        if ((x == null) || (y == null)) {,2,1,0,3,7,0,0,0,0,3,33,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1256,            return !((x == null) ^ (y == null));,4,3,0,3,6,1,0,0,0,8,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1258,        if (x.length != y.length) {,12,2,1,1,3,0,0,0,0,17,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1259,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1261,        for (int i = 0; i < x.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1262,"            if (!Precision.equalsIncludingNaN(x[i], y[i])) {",0,0,1,4,9,0,4,0,0,13,48,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1263,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1266,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1293,         if (Double.isInfinite(normalizedSum)) {,0,0,0,2,5,0,6,0,0,6,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1294,             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);,6,1,1,1,2,0,6,2,0,20,76,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1296,         if (Double.isNaN(normalizedSum)) {,0,0,0,2,5,0,6,0,0,6,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1297,             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);,4,0,0,1,2,0,0,2,0,6,71,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1299,         double sum = 0d;,4,0,0,0,0,0,6,2,0,12,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1300,         final int len = values.length;,6,0,0,0,0,1,0,0,0,7,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1301,         double[] out = new double[len];,2,0,1,2,4,0,0,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1302,         for (int i = 0; i < len; i++) {,2,0,0,1,3,1,0,0,0,3,31,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1303,             if (Double.isInfinite(values[i])) {,0,0,1,3,7,0,4,0,0,8,35,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1304,"                 throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);",6,0,1,2,4,0,0,2,0,12,94,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1306,             if (!Double.isNaN(values[i])) {,0,0,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1307,                 sum += values[i];,2,0,1,1,2,0,0,0,0,7,17,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1310,         if (sum == 0) {,4,1,0,1,3,0,0,0,0,7,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1311,             throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);,4,0,0,1,2,0,0,2,0,6,71,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1313,         for (int i = 0; i < len; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1314,             if (Double.isNaN(values[i])) {,0,0,1,3,7,0,4,0,0,8,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1315,                 out[i] = Double.NaN;,4,0,1,1,2,0,0,0,0,9,20,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1317,                 out[i] = values[i] * normalizedSum / sum;,4,2,1,2,4,0,0,0,0,15,41,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1320,         return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1335,"         T[] array = (T[]) Array.newInstance(field.getRuntimeClass(), length);",0,0,0,5,10,0,0,0,0,15,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1336,"         Arrays.fill(array, field.getZero());",2,0,1,2,4,0,10,0,0,16,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1337,         return array;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1355,         if (columns < 0) {,1,0,0,1,3,0,0,0,0,1,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1356,"             T[] dummyRow = buildArray(field, 0);",4,0,0,2,4,0,4,2,0,10,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1357,"             array = (T[][]) Array.newInstance(dummyRow.getClass(), rows);",0,0,0,5,10,0,0,0,0,15,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1358,         } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1359,"             array = (T[][]) Array.newInstance(field.getRuntimeClass(),",4,0,0,4,9,0,8,2,0,16,58,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1363,             for (int i = 0; i < rows; ++i) {,8,1,0,1,3,0,0,0,0,10,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1364,"                 Arrays.fill(array[i], field.getZero());",0,0,0,3,6,0,0,0,0,9,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1367,         return array;,2,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1395,         MathUtils.checkNotNull(x);,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1396,         MathUtils.checkNotNull(h);,0,0,0,1,2,0,6,0,0,6,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1398,         final int xLen = x.length;,6,0,0,0,0,1,0,0,0,7,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1399,         final int hLen = h.length;,8,1,0,0,0,1,0,0,0,10,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1401,         if (xLen == 0 || hLen == 0) {,4,3,0,1,3,0,0,0,0,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1402,             throw new NoDataException();,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1406,         final int totalLength = xLen + hLen - 1;,6,2,0,0,0,1,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1407,         final double[] y = new double[totalLength];,2,0,1,2,4,1,0,0,0,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1410,         for (int n = 0; n < totalLength; n++) {,10,1,0,1,3,0,6,0,0,19,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1411,             double yn = 0;,2,0,0,0,0,0,0,0,0,2,14,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1412,"             int k = FastMath.max(0, n + 1 - xLen);",6,2,0,1,2,0,4,0,0,12,38,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1413,             int j = n - k;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1414,             while (k < hLen && j >= 0) {,0,0,0,1,3,0,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1415,                 yn += x[j--] * h[k++];,6,1,1,2,4,0,0,0,0,14,22,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1417,             y[n] = yn;,0,0,0,1,2,0,0,0,0,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1420,         return y;,2,0,0,0,0,1,6,0,0,8,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,709,"            new Comparator<Pair<Double, Integer>>() {",0,0,0,1,3,0,0,8,0,8,41,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,712,                return o1.getKey().compareTo(o2.getKey());,0,0,0,3,6,1,10,0,0,10,42,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,714,"        } : new Comparator<Pair<Double,Integer>>() {",0,0,0,1,4,0,0,8,0,8,44,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,717,                return o2.getKey().compareTo(o1.getKey());,0,0,0,3,6,1,0,0,0,10,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,113,        Line line1 = (Line) getHyperplane();,0,0,0,2,4,0,0,0,0,6,36,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,114,        Line line2 = (Line) subLine.getHyperplane();,0,0,0,2,4,0,0,0,0,6,44,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,117,        Vector2D v2D = line1.intersection(line2);,2,0,0,1,2,0,6,2,0,10,41,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,120,        Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));,2,0,0,3,6,0,10,2,0,14,71,4,0.14286,1,1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,56,"        this(new Line(start, end), buildIntervalSet(start, end));",4,0,0,3,6,0,6,2,0,12,57,4,0.14286,1,1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,57,    },0,0,0,0,1,0,0,0,0,1,1,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,113,        Vector3D v1D = line.intersection(subLine.line);,6,0,0,1,2,0,4,2,0,12,47,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,116,        Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));,2,0,0,2,4,0,10,2,0,14,65,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,156,        return distance(p) < 1.0e-10;,0,0,0,1,2,1,0,0,0,4,29,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,164,        final Vector3D d = p.subtract(zero);,2,0,0,1,2,1,6,2,0,11,36,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,165,"        final Vector3D n = new Vector3D(1.0, d, -d.dotProduct(direction), direction);",6,0,0,2,4,1,6,4,0,18,77,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,166,        return n.getNorm();,0,0,0,1,2,1,0,0,0,4,19,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,195,        final double cos = direction.dotProduct(line.direction);,6,0,0,1,2,1,4,0,0,11,56,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,196,        final double n = 1 - cos * cos;,6,2,0,0,0,1,0,0,0,9,31,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,197,        if (n < Precision.EPSILON) {,6,1,0,1,3,0,4,0,0,11,28,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,202,        final Vector3D delta0 = line.zero.subtract(zero);,6,0,0,1,2,1,4,2,0,13,49,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,203,        final double a        = delta0.dotProduct(direction);,2,0,0,1,2,1,6,0,0,9,53,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,204,        final double b        = delta0.dotProduct(line.direction);,6,0,0,1,2,1,4,0,0,11,58,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,206,"        return new Vector3D(1, zero, (a - b * cos) / n, direction);",12,3,0,2,4,1,0,2,0,17,59,5,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,216,        final Vector3D closest = closestPoint(line);,2,0,0,1,2,1,4,2,0,9,44,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,217,        return line.contains(closest) ? closest : null;,2,0,0,1,2,1,6,0,0,8,47,5,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,56,"        super(new Line(start, end), buildIntervalSet(start, end));",4,0,0,3,6,0,6,2,0,12,58,4,0.125,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,57,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,137,"        final Line line = new Line(start, end);",0,0,0,1,2,0,0,0,0,3,39,4,0.125,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,138,"        return new IntervalsSet(line.toSubSpace(start).getX(),",0,0,0,2,5,1,8,2,0,10,54,5,0.125,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,114,        return point.subtract(zero).dotProduct(direction);,0,0,0,2,4,1,10,0,0,10,50,5,0.125,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,129,        return new Vector1D(getAbscissa((Vector3D) point));,2,0,0,3,6,1,2,4,0,8,51,5,0.125,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,118,        final SubHyperplane<Euclidean1D> upperCut =,0,0,0,0,0,0,0,0,0,0,43,4,0.12121,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,120,"        return new BSPTree<Euclidean1D>(lowerCut,",2,0,0,0,1,1,0,4,0,6,41,5,0.12121,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,107,        final SubHyperplane<Euclidean1D> lowerCut =,2,0,0,0,0,1,0,4,0,7,43,4,0.11429,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,109,        if (Double.isInfinite(upper) && (upper > 0)) {,10,3,0,3,7,0,6,0,0,20,46,3,0.11429,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,139,"        final Line line = new Line(start, end);",0,0,0,1,2,0,0,0,0,3,39,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,140,"        return new IntervalsSet(line.toSubSpace(start).getX(),",0,0,0,2,5,1,8,2,0,10,54,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/complex/Complex,5,304,        if (real == 0.0 && imaginary == 0.0) {,2,1,0,1,3,0,0,0,0,4,38,3,0.25,0,0
defect4j,math,org/apache/commons/math3/complex/Complex,5,300,        if (isNaN) {,2,0,0,1,3,0,0,0,0,2,12,4,0.2,0,0
defect4j,math,org/apache/commons/math3/complex/Complex,5,348,                return (real == c.real) && (imaginary == c.imaginary);,12,3,0,2,4,1,0,0,0,15,54,8,0.02439,0,0
defect4j,math,org/apache/commons/math3/complex/Complex,5,344,            Complex c = (Complex)other;,4,0,0,1,2,0,0,4,0,8,27,6,0.02273,0,0
defect4j,math,org/apache/commons/math3/complex/Complex,5,345,            if (c.isNaN) {,4,0,0,1,3,0,0,0,0,4,14,7,0.02273,0,0
defect4j,math,org/apache/commons/math3/complex/Complex,5,343,        if (other instanceof Complex){,0,0,0,1,3,0,0,0,0,4,30,4,0.02174,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,451,                if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) {,12,1,0,2,5,3,2,2,0,21,62,1,21.33333,1,1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,233,        if (mti >= N) { // generate N words at one time,0,0,0,1,3,0,0,0,0,4,47,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,234,            int mtNext = mt[0];,0,0,0,1,2,0,0,0,0,3,19,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,235,            for (int k = 0; k < N - M; ++k) {,10,2,0,1,3,0,0,0,0,13,33,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,236,                int mtCurr = mtNext;,4,0,0,0,0,0,0,0,0,4,20,9,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,237,                mtNext = mt[k + 1];,4,1,1,1,2,0,0,0,0,8,19,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,238,                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);,6,3,0,2,4,0,0,0,0,10,50,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,239,                mt[k] = mt[k + M] ^ (y >>> 1) ^ MAG01[y & 0x1];,8,4,1,4,8,0,0,0,0,21,47,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,241,            for (int k = N - M; k < N - 1; ++k) {,0,0,0,1,3,0,0,0,0,4,37,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,242,                int mtCurr = mtNext;,4,0,0,0,0,0,0,0,0,4,20,9,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,243,                mtNext = mt[k + 1];,4,1,1,1,2,0,0,0,0,8,19,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,244,                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);,0,0,0,2,4,0,0,0,0,6,50,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,245,                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];,10,5,1,5,10,0,0,0,0,24,53,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,247,            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);,4,3,1,3,6,0,0,0,0,10,49,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,248,            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];,14,8,1,4,8,0,0,0,0,35,51,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,250,            mti = 0;,2,0,0,0,0,0,0,0,0,3,8,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,253,        y = mt[mti++];,4,0,1,1,2,0,0,0,0,8,14,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,256,        y ^=  y >>> 11;,4,1,0,0,0,0,0,0,0,6,15,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,257,        y ^= (y <<   7) & 0x9d2c5680;,4,2,0,1,2,0,0,0,0,7,29,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,258,        y ^= (y <<  15) & 0xefc60000;,4,2,0,1,2,0,0,0,0,7,29,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,259,        y ^=  y >>> 18;,4,1,0,0,0,0,0,0,0,6,15,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,261,        return y >>> (32 - bits);,4,2,0,1,2,1,0,0,0,6,25,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,843,"        DoubleIndex(double value, int index) {",6,0,0,1,3,0,0,0,0,6,38,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,844,            this.value = value;,0,0,0,0,0,0,0,0,0,0,19,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,845,            this.index = index;,0,0,0,0,0,0,0,0,0,0,19,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,846,        },6,1,0,0,1,1,0,0,0,8,1,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,850,"            return Double.compare(value, o.value);",4,0,1,1,2,1,10,0,0,19,38,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,833,    private static class DoubleIndex implements Comparable<DoubleIndex> {,2,0,0,0,1,2,0,4,0,8,69,2,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,892,        public FitnessFunction() {,2,0,0,1,3,1,0,0,0,3,26,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,893,            valueRange = 1;,2,0,0,0,0,0,0,0,0,3,15,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,894,            isRepairMode = true;,2,0,0,0,0,0,0,0,0,4,20,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,895,        },0,0,0,0,1,0,0,0,0,1,1,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,903,            if (isRepairMode) {,4,0,1,1,3,1,0,0,0,7,19,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,904,                double[] repaired = repair(point);,2,0,0,2,4,0,4,0,0,6,34,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,905,                value = CMAESOptimizer.this.computeObjectiveValue(repaired) +,0,0,0,1,2,0,0,0,0,3,61,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,907,            } else {,0,0,0,0,2,0,0,0,0,2,8,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,910,            return isMinimize ? value : -value;,0,0,0,0,0,1,0,0,0,1,35,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,936,            this.valueRange = valueRange;,0,0,0,0,0,0,0,0,0,0,29,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,937,        },0,0,0,0,1,0,0,0,0,1,1,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,944,            final double[] lB = CMAESOptimizer.this.getLowerBound();,4,0,0,2,4,1,2,0,0,7,56,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,945,            final double[] uB = CMAESOptimizer.this.getUpperBound();,4,0,0,2,4,1,2,0,0,7,56,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,947,            final double[] repaired = new double[x.length];,0,0,0,2,4,0,0,0,0,6,47,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,948,            for (int i = 0; i < x.length; i++) {,14,3,0,1,3,0,0,0,0,18,36,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,949,                if (x[i] < lB[i]) {,0,0,0,3,7,0,0,0,0,10,19,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,951,                } else if (x[i] > uB[i]) {,0,0,0,3,8,0,0,0,0,11,26,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,954,                    repaired[i] = x[i];,4,0,1,2,4,0,0,2,0,16,19,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,957,            return repaired;,8,1,0,0,0,2,0,0,0,10,16,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,966,            double penalty = 0;,10,2,0,0,0,1,0,0,0,13,19,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,967,            for (int i = 0; i < x.length; i++) {,14,2,1,1,3,1,6,0,0,28,36,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,968,                double diff = Math.abs(x[i] - repaired[i]);,6,2,1,3,6,0,4,0,0,25,43,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,969,                penalty += diff * valueRange;,6,1,0,0,0,0,0,0,0,8,29,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,971,            return isMinimize ? penalty : -penalty;,6,0,0,0,0,1,0,0,0,7,39,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,881,    private class FitnessFunction {,2,0,0,0,1,1,0,0,0,3,31,2,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,370,        isMinimize = getGoalType().equals(GoalType.MINIMIZE);,6,0,0,2,4,0,4,0,0,11,53,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,371,        final FitnessFunction fitfun = new FitnessFunction();,2,0,0,1,2,1,0,4,0,7,53,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,372,        final double[] guess = getStartPoint();,0,0,0,2,4,0,0,0,0,6,39,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,374,        dimension = guess.length;,8,0,0,0,0,0,0,0,0,9,25,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,375,        initializeCMA(guess);,0,0,0,1,2,0,4,0,0,4,21,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,376,        iterations = 0;,6,3,0,0,0,0,0,0,0,10,15,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,377,        double bestValue = fitfun.value(guess);,2,0,0,1,2,0,6,0,0,8,39,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,378,"        push(fitnessHistory, bestValue);",10,2,0,1,2,0,6,0,0,19,32,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,379,        PointValuePair optimum,2,0,0,0,0,0,0,2,0,4,22,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,382,        PointValuePair lastResult = null;,0,0,0,0,0,0,0,0,0,0,33,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,387,        for (iterations = 1; iterations <= maxIterations; iterations++) {,8,1,0,1,3,0,0,0,0,11,65,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,390,"            final RealMatrix arz = randn1(dimension, lambda);",2,0,0,1,2,1,6,2,0,11,49,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,391,"            final RealMatrix arx = zeros(dimension, lambda);",2,0,0,1,2,1,6,2,0,11,48,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,392,            final double[] fitness = new double[lambda];,4,0,1,2,4,1,0,0,0,8,44,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,394,            for (int k = 0; k < lambda; k++) {,8,1,0,1,3,0,0,0,0,10,34,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,395,                RealMatrix arxk = null;,4,0,0,0,0,0,0,2,0,7,23,0,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,396,                for (int i = 0; i < checkFeasableCount + 1; i++) {,0,0,0,1,3,0,0,0,0,4,50,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,397,                    if (diagonalOnly <= 0) {,0,0,0,1,3,0,0,0,0,4,24,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,404,                    if (i >= checkFeasableCount ||,4,2,0,0,1,0,0,0,0,6,30,11,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,411,"                copyColumn(arxk, 0, arx, k);",0,0,0,1,2,0,0,0,0,3,28,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,413,                    fitness[k] = fitfun.value(arx.getColumn(k)); // compute fitness,8,1,0,3,6,0,0,0,0,9,63,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,416,                },0,0,0,0,1,0,0,0,0,1,1,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,419,            final int[] arindex = sortedIndices(fitness);,2,0,0,2,4,1,4,0,0,7,45,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,421,            final RealMatrix xold = xmean; // for speed up of Eq. (2) and (3),12,1,0,2,4,5,0,2,0,20,65,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,422,"            final RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu));",2,0,0,2,4,1,12,2,0,17,78,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,423,            xmean = bestArx.multiply(weights);,2,0,0,1,2,0,6,0,0,9,34,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,424,"            final RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu));",2,0,0,2,4,1,12,2,0,17,78,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,425,            final RealMatrix zmean = bestArz.multiply(weights);,8,2,0,1,2,1,6,2,0,20,51,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,426,"            final boolean hsig = updateEvolutionPaths(zmean, xold);",0,0,0,1,2,0,0,0,0,3,55,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,427,            if (diagonalOnly <= 0) {,2,1,0,1,3,0,0,0,0,3,24,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,433,"            sigma *= Math.exp(Math.min(1, (normps/chiN - 1) * cs / damps));",0,0,0,3,6,0,0,0,0,9,63,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,434,            final double bestFitness = fitness[arindex[0]];,4,0,1,2,4,1,0,0,0,9,47,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,435,            final double worstFitness = fitness[arindex[arindex.length - 1]];,6,1,1,2,4,1,0,0,0,12,65,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,436,            if (bestValue > bestFitness) {,0,0,0,1,3,0,0,0,0,4,30,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,437,                bestValue = bestFitness;,6,0,0,0,0,0,0,0,0,7,24,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,438,                lastResult = optimum;,8,1,0,0,0,0,0,0,0,10,21,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,439,"                optimum = new PointValuePair(fitfun.repair(bestArx.getColumn(0)),",0,0,0,2,5,0,0,0,0,7,65,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,441,                if (getConvergenceChecker() != null &&,2,2,0,1,3,0,2,0,0,8,38,0,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,450,            if (stopFitness != 0) { // only if stopFitness is defined,14,2,0,1,3,1,6,0,0,25,57,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,455,            final double[] sqrtDiagC = sqrt(diagC).getColumn(0);,2,0,0,3,6,1,6,0,0,9,52,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,456,            final double[] pcCol = pc.getColumn(0);,0,0,0,2,4,0,0,0,0,6,39,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,457,            for (int i = 0; i < dimension; i++) {,8,1,0,1,3,0,0,0,0,10,37,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,458,"                if (sigma * Math.max(Math.abs(pcCol[i]), sqrtDiagC[i]) > stopTolX) {",4,2,1,5,11,0,8,0,0,22,68,9,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,459,                    break;,6,2,1,0,0,0,0,2,0,13,6,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,465,            for (int i = 0; i < dimension; i++) {,8,1,0,1,3,0,0,0,0,10,37,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,466,                if (sigma * sqrtDiagC[i] > stopTolUpX) {,4,2,1,2,5,0,0,0,0,10,40,9,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,470,            final double historyBest = min(fitnessHistory);,2,0,0,1,2,1,4,0,0,7,47,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,471,            final double historyWorst = max(fitnessHistory);,2,0,0,1,2,1,14,0,0,17,48,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,472,            if (iterations > 2 &&,0,0,0,0,1,0,0,0,0,1,21,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,477,            if (iterations > fitnessHistory.length &&,6,2,0,0,1,0,0,0,0,8,41,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,482,            if (max(diagD) / min(diagD) > 1e7) {,0,0,0,3,7,0,0,0,0,10,36,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,486,            if (getConvergenceChecker() != null) {,0,1,0,2,5,0,2,0,0,4,38,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,497,            if (bestValue == fitness[arindex[(int)(0.1+lambda/4.)]]) {,0,0,0,5,11,0,0,0,0,16,58,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,500,"            if (iterations > 2 && Math.max(historyWorst, bestFitness) -",2,3,0,1,3,0,8,0,0,13,59,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,505,"            push(fitnessHistory,bestFitness);",0,0,0,1,2,0,6,0,0,6,33,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,506,            fitfun.setValueRange(worstFitness-bestFitness);,10,2,0,1,2,0,0,0,0,13,47,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,507,            if (generateStatistics) {,0,0,0,1,3,0,0,0,0,4,25,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,514,        return optimum;,10,0,0,0,0,2,0,0,0,12,15,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,546,    },0,0,0,0,1,0,0,0,0,1,1,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,566,    },0,0,0,0,1,0,0,0,0,1,1,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,574,        if (lambda <= 0) {,2,1,0,1,3,0,0,0,0,3,18,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,578,        final double[][] sigmaArray = new double[guess.length][1];,0,0,0,4,8,0,0,0,0,12,58,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,579,        for (int i = 0; i < guess.length; i++) {,6,1,0,1,3,0,0,0,0,8,40,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,580,            sigmaArray[i][0] = inputSigma[i];,0,0,0,3,6,0,0,0,0,9,33,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,582,"        final RealMatrix insigma = new Array2DRowRealMatrix(sigmaArray, false);",0,0,0,1,2,0,0,0,0,3,71,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,583,        sigma = max(insigma); // overall standard deviation,2,0,0,1,2,0,12,0,0,15,51,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,586,        stopTolUpX = 1e3 * max(insigma);,2,1,0,1,2,0,4,0,0,8,32,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,587,        stopTolX = 1e-11 * max(insigma);,0,0,0,1,2,0,0,0,0,3,32,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,588,        stopTolFun = 1e-12;,2,0,0,0,0,0,0,0,0,3,19,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,589,        stopTolHistFun = 1e-13;,2,0,0,0,0,0,0,0,0,3,23,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,592,        mu = lambda / 2; // number of parents/points for recombination,4,1,0,0,0,0,0,0,0,6,62,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,593,        logMu2 = Math.log(mu + 0.5);,4,1,0,1,2,0,4,0,0,10,28,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,594,"        weights = log(sequence(1, mu, 1)).scalarMultiply(-1).scalarAdd(logMu2);",0,0,0,4,8,0,0,0,0,12,71,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,595,        double sumw = 0;,2,0,0,0,0,0,0,0,0,2,16,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,596,        double sumwq = 0;,2,0,0,0,0,0,0,0,0,2,17,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,597,        for (int i = 0; i < mu; i++) {,0,0,0,1,3,0,0,0,0,4,30,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,598,"            double w = weights.getEntry(i, 0);",0,0,0,1,2,0,0,0,0,3,34,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,599,            sumw += w;,4,0,0,0,0,0,0,0,0,5,10,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,600,            sumwq += w * w;,8,1,0,0,0,0,4,0,0,15,15,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,602,        weights = weights.scalarMultiply(1 / sumw);,8,2,1,1,2,0,4,0,0,18,43,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,603,        mueff = sumw * sumw / sumwq; // variance-effectiveness of sum w_i x_i,8,2,0,0,0,0,0,0,0,11,69,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,606,        cc = (4 + mueff / dimension) /,0,0,0,1,2,0,0,0,0,3,30,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,608,        cs = (mueff + 2) / (dimension + mueff + 3.);,8,3,0,2,4,0,0,0,0,12,44,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,609,"        damps = (1 + 2 * Math.max(0, Math.sqrt((mueff - 1) /",4,7,0,1,5,0,8,0,0,20,52,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,613,        ccov1 = 2 / ((dimension + 1.3) * (dimension + 1.3) + mueff);,8,5,0,3,6,0,0,0,0,14,60,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,614,"        ccovmu = Math.min(1 - ccov1, 2 * (mueff - 2 + 1 / mueff) /",2,2,1,1,3,0,0,0,0,13,58,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,616,"        ccov1Sep = Math.min(1, ccov1 * (dimension + 1.5) / 3);",6,3,0,2,4,0,4,0,0,14,54,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,617,"        ccovmuSep = Math.min(1 - ccov1, ccovmu * (dimension + 1.5) / 3);",8,4,0,2,4,0,4,0,0,17,64,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,618,        chiN = Math.sqrt(dimension) *,2,1,0,1,2,0,6,0,0,10,29,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,621,        xmean = MatrixUtils.createColumnRealMatrix(guess); // objective variables,2,0,0,1,2,0,6,0,0,9,73,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,622,        diagD = insigma.scalarMultiply(1 / sigma);,0,0,0,1,2,0,0,0,0,3,42,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,623,        diagC = square(diagD);,2,0,0,1,2,0,4,0,0,7,22,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,624,"        pc = zeros(dimension, 1); // evolution paths for C and sigma",0,0,0,1,2,0,0,0,0,3,60,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,625,"        ps = zeros(dimension, 1); // B defines the coordinate system",2,0,0,1,2,0,4,0,0,7,60,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,626,        normps = ps.getFrobeniusNorm();,2,0,0,1,2,0,10,0,0,13,31,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,628,"        B = eye(dimension, dimension);",2,0,0,1,2,0,6,0,0,9,30,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,629,"        D = ones(dimension, 1); // diagonal D defines the scaling",0,0,0,1,2,0,0,0,0,3,57,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,630,"        BD = times(B, repmat(diagD.transpose(), dimension, 1));",2,0,0,3,6,0,12,0,0,15,55,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,631,        C = B.multiply(diag(square(D)).multiply(B.transpose())); // covariance,0,0,0,5,10,0,0,0,0,15,70,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,632,        historySize = 10 + (int) (3 * 10 * dimension / (double) lambda);,0,0,0,3,6,0,0,0,0,9,64,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,633,        fitnessHistory = new double[historySize]; // history of fitness values,0,0,0,1,2,0,0,0,0,3,70,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,634,        for (int i = 0; i < historySize; i++) {,8,1,0,1,3,0,0,0,0,10,39,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,635,            fitnessHistory[i] = Double.MAX_VALUE;,4,0,1,1,2,0,0,0,0,9,37,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,637,    },2,0,0,0,1,0,0,0,0,2,1,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,648,        ps = ps.scalarMultiply(1 - cs).add(,4,1,0,1,3,0,6,0,0,12,35,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,651,        normps = ps.getFrobeniusNorm();,2,0,0,1,2,0,4,0,0,7,31,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,652,        final boolean hsig = normps /,4,1,0,0,0,1,0,0,0,6,29,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,655,        pc = pc.scalarMultiply(1 - cc);,4,1,0,1,2,0,4,0,0,10,31,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,656,        if (hsig) {,4,0,0,1,3,3,0,0,0,7,11,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,657,            pc = pc.add(xmean.subtract(xold).scalarMultiply(Math.sqrt(cc * (2 - cc) * mueff) / sigma));,10,3,0,5,10,0,16,0,0,30,91,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,659,        return hsig;,2,0,0,0,0,1,0,0,0,2,12,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,804,        for (int i = vals.length-1; i > 0; i--) {,14,4,0,1,3,0,0,0,0,19,41,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,805,            vals[i] = vals[i-1];,2,1,1,2,4,0,0,0,0,10,20,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,807,        vals[0] = val;,4,0,1,1,2,0,0,0,0,7,14,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,808,    },0,0,0,0,1,0,0,0,0,1,1,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,817,        final DoubleIndex[] dis = new DoubleIndex[doubles.length];,6,0,0,2,4,1,0,4,0,11,58,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,818,        for (int i = 0; i < doubles.length; i++) {,10,1,0,1,3,0,0,0,0,12,42,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,819,"            dis[i] = new DoubleIndex(doubles[i], i);",2,0,1,3,6,0,0,2,0,13,40,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,821,        Arrays.sort(dis);,2,0,0,1,2,3,6,0,0,11,17,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,822,        final int[] indices = new int[doubles.length];,0,0,0,2,4,0,0,0,0,6,46,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,823,        for (int i = 0; i < doubles.length; i++) {,0,0,0,1,3,0,0,0,0,4,42,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,824,            indices[i] = dis[i].index;,8,1,1,2,4,0,0,0,0,19,26,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,826,        return indices;,2,0,0,0,0,1,0,0,0,2,15,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,982,        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,6,2,1,6,12,0,0,0,0,14,77,0,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,983,        for (int r = 0; r < m.getRowDimension(); r++) {,6,1,0,2,5,0,4,0,0,12,47,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,984,            for (int c = 0; c < m.getColumnDimension(); c++) {,12,4,0,2,5,1,4,0,0,22,50,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,985,"                d[r][c] = Math.log(m.getEntry(r, c));",6,1,0,4,8,0,0,0,0,8,37,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,988,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,996,        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,2,0,0,6,12,1,8,0,0,11,77,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,997,        for (int r = 0; r < m.getRowDimension(); r++) {,6,1,0,2,5,0,4,0,0,12,47,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,998,            for (int c = 0; c < m.getColumnDimension(); c++) {,0,0,0,2,5,0,0,0,0,7,50,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,999,"                d[r][c] = Math.sqrt(m.getEntry(r, c));",0,0,1,4,8,0,12,0,0,19,38,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1002,"        return new Array2DRowRealMatrix(d, false);",0,0,0,1,2,1,0,0,0,4,42,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1010,        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,2,0,0,6,12,1,8,0,0,11,77,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1011,        for (int r = 0; r < m.getRowDimension(); r++) {,10,1,0,2,5,0,4,0,0,17,47,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1012,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,4,0,0,12,50,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1013,"                double e = m.getEntry(r, c);",2,0,0,1,2,0,8,0,0,10,28,9,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1014,                d[r][c] = e * e;,0,0,0,2,4,0,0,0,0,6,16,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1017,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1026,        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,2,0,0,6,12,1,8,0,0,11,77,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1027,        for (int r = 0; r < m.getRowDimension(); r++) {,6,1,0,2,5,0,4,0,0,12,47,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1028,            for (int c = 0; c < m.getColumnDimension(); c++) {,0,0,0,2,5,0,0,0,0,7,50,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1029,"                d[r][c] = m.getEntry(r, c) * n.getEntry(r, c);",0,0,0,4,8,0,0,0,0,12,46,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1032,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1056,        final double[][] d = new double[m.getRowDimension()][cols.length];,6,0,0,5,10,1,4,0,0,11,66,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1057,        for (int r = 0; r < m.getRowDimension(); r++) {,6,1,0,2,5,0,4,0,0,12,47,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1058,            for (int c = 0; c < cols.length; c++) {,0,0,0,1,3,0,0,0,0,4,39,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1059,"                d[r][c] = m.getEntry(r, cols[c]);",0,0,0,4,8,0,0,0,0,12,33,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1062,"        return new Array2DRowRealMatrix(d, false);",2,1,1,1,2,1,0,0,0,8,42,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1102,        if (m.getColumnDimension() == 1) {,0,1,0,2,5,0,4,0,0,5,34,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1103,            final double[][] d = new double[m.getRowDimension()][m.getRowDimension()];,2,0,0,6,12,1,8,0,0,11,74,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1104,            for (int i = 0; i < m.getRowDimension(); i++) {,0,0,0,2,5,0,0,0,0,7,47,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1105,"                d[i][i] = m.getEntry(i, 0);",2,1,1,3,6,0,6,0,0,16,27,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1107,"            return new Array2DRowRealMatrix(d, false);",0,0,0,1,2,1,0,0,0,4,42,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1127,        for (int i = 0; i < m1.getRowDimension(); i++) {,8,1,0,2,5,0,4,0,0,15,48,0,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1128,"            m2.setEntry(i, col2, m1.getEntry(i, col1));",0,0,0,2,4,0,16,0,0,16,43,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1130,    },0,0,0,0,1,0,0,0,0,1,1,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1138,        final double[][] d = new double[n][m];,2,0,1,4,8,1,0,0,0,7,38,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1139,        for (int r = 0; r < n; r++) {,2,0,0,1,3,0,0,0,0,3,29,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1140,"            Arrays.fill(d[r], 1);",2,1,1,2,4,0,4,0,0,11,21,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1142,"        return new Array2DRowRealMatrix(d, false);",0,0,0,1,2,1,0,0,0,4,42,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1152,        final double[][] d = new double[n][m];,2,0,1,4,8,1,0,0,0,7,38,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1153,        for (int r = 0; r < n; r++) {,8,1,0,1,3,0,0,0,0,10,29,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1154,            if (r < m) {,4,2,1,1,3,0,0,0,0,10,12,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1155,                d[r][r] = 1;,6,0,1,2,4,1,0,0,0,14,12,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1158,"        return new Array2DRowRealMatrix(d, false);",0,0,0,1,2,1,0,0,0,4,42,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1167,"        return new Array2DRowRealMatrix(n, m);",4,0,1,1,2,1,0,2,0,10,38,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1177,        final int rd = mat.getRowDimension();,0,0,0,1,2,0,0,0,0,3,37,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1178,        final int cd = mat.getColumnDimension();,2,0,0,1,2,1,4,0,0,7,40,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1179,        final double[][] d = new double[n * rd][m * cd];,10,2,0,4,8,1,0,0,0,13,48,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1180,        for (int r = 0; r < n * rd; r++) {,0,0,0,1,3,0,0,0,0,4,34,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1181,            for (int c = 0; c < m * cd; c++) {,10,2,0,1,3,0,0,0,0,13,34,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1182,"                d[r][c] = mat.getEntry(r % rd, c % cd);",10,2,1,3,6,3,4,0,0,26,39,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1185,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1195,        final int size = (int) ((end - start) / step + 1);,8,3,0,3,6,1,0,0,0,12,50,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1196,        final double[][] d = new double[size][1];,10,1,1,4,8,2,4,0,0,19,41,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1197,        double value = start;,4,0,0,0,0,0,0,0,0,4,21,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1198,        for (int r = 0; r < size; r++) {,16,3,0,1,3,1,4,0,0,25,32,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1199,            d[r][0] = value;,2,0,1,2,4,0,0,0,0,7,16,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1200,            value += step;,4,0,0,0,0,0,6,0,0,11,14,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1202,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1210,        double max = -Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,7,31,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1211,        for (int r = 0; r < m.getRowDimension(); r++) {,0,0,0,2,5,0,0,0,0,7,47,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1212,            for (int c = 0; c < m.getColumnDimension(); c++) {,12,3,1,2,5,0,4,0,0,22,50,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1213,"                double e = m.getEntry(r, c);",2,0,0,1,2,0,8,0,0,10,28,9,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1214,                if (max < e) {,0,0,0,1,3,0,0,0,0,4,14,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1215,                    max = e;,4,0,0,0,0,0,0,0,0,5,8,10,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1219,        return max;,4,0,1,0,0,1,0,0,0,6,11,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1227,        double min = Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,6,30,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1228,        for (int r = 0; r < m.getRowDimension(); r++) {,0,0,0,2,5,0,0,0,0,7,47,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1229,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,4,0,0,12,50,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1230,"                double e = m.getEntry(r, c);",2,0,0,1,2,0,8,0,0,10,28,9,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1231,                if (min > e) {,10,2,0,1,3,0,0,0,0,13,14,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1232,                    min = e;,12,1,0,0,0,0,0,0,0,16,8,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1236,        return min;,0,0,0,0,0,1,0,0,0,1,11,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1244,        double max = -Double.MAX_VALUE;,12,2,1,0,0,0,0,0,0,21,31,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1245,        for (int r = 0; r < m.length; r++) {,0,0,0,1,3,0,0,0,0,4,36,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1246,            if (max < m[r]) {,2,1,1,2,5,0,0,0,0,7,17,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1247,                max = m[r];,2,0,1,1,2,0,0,0,0,7,11,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1250,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1258,        double min = Double.MAX_VALUE;,0,0,0,0,0,0,0,0,0,0,30,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1259,        for (int r = 0; r < m.length; r++) {,10,1,0,1,3,0,0,0,0,12,36,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1260,            if (min > m[r]) {,2,1,1,2,5,0,0,0,0,7,17,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1261,                min = m[r];,2,0,1,1,2,0,0,0,0,7,11,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1264,        return min;,2,0,0,0,0,1,0,0,0,2,11,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1309,        final double[][] d = new double[size][popSize];,12,5,1,4,8,1,0,0,0,23,47,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1310,        for (int r = 0; r < size; r++) {,8,1,0,1,3,0,0,0,0,10,32,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1311,            for (int c = 0; c < popSize; c++) {,0,0,0,1,3,0,0,0,0,4,35,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1312,                d[r][c] = random.nextGaussian();,2,0,1,3,6,0,8,0,0,18,32,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1315,"        return new Array2DRowRealMatrix(d, false);",0,0,0,1,2,1,0,0,0,4,42,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,79,public class CMAESOptimizer,0,0,0,0,0,0,0,0,0,0,27,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,762,         final int[] output = new int[len];,4,1,1,2,4,1,0,0,0,17,34,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,763,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",4,0,0,2,4,0,14,0,0,18,73,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,764,         return output;,2,0,0,0,0,1,0,0,0,2,14,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,79,"        MatrixUtils.checkAdditionCompatible(this, m);",0,0,0,1,2,0,6,0,0,6,45,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,81,        final int rowCount    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,42,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,82,        final int columnCount = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,45,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,83,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0,0,0,1,2,0,0,0,0,3,59,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,84,        for (int row = 0; row < rowCount; ++row) {,0,0,0,1,3,0,0,0,0,4,42,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,85,            for (int col = 0; col < columnCount; ++col) {,8,1,0,1,3,0,0,0,0,10,45,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,86,"                out.setEntry(row, col, getEntry(row, col) + m.getEntry(row, col));",0,1,0,3,6,0,22,0,0,23,66,9,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,90,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,96,"        MatrixUtils.checkSubtractionCompatible(this, m);",2,1,0,1,2,0,14,0,0,17,48,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,98,        final int rowCount    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,42,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,99,        final int columnCount = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,45,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,100,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,101,        for (int row = 0; row < rowCount; ++row) {,8,1,0,1,3,0,0,0,0,10,42,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,102,            for (int col = 0; col < columnCount; ++col) {,8,1,0,1,3,0,0,0,0,10,45,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,103,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));",0,1,0,3,6,0,22,0,0,23,66,9,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,107,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,112,        final int rowCount    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,42,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,113,        final int columnCount = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,45,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,114,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,115,        for (int row = 0; row < rowCount; ++row) {,8,1,0,1,3,0,0,0,0,10,42,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,116,            for (int col = 0; col < columnCount; ++col) {,0,0,0,1,3,0,0,0,0,4,45,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,117,"                out.setEntry(row, col, getEntry(row, col) + d);",2,1,0,2,4,0,14,0,0,17,47,9,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,121,        return out;,2,0,1,0,0,1,0,0,0,8,11,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,280,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,1,0,0,0,6,63,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,466,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,6,0,0,6,43,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,467,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,468,"        final RealMatrix out = createMatrix(nRows, 1);",0,0,0,1,2,0,0,0,0,3,46,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,469,        for (int i = 0; i < nRows; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,470,"            out.setEntry(i, 0, getEntry(i, column));",0,0,0,2,4,0,12,0,0,12,40,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,473,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,559,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,6,0,0,6,43,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,560,        final int nRows = getRowDimension();,0,0,0,1,2,0,0,0,0,3,36,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,561,        final double[] out = new double[nRows];,2,0,1,2,4,1,0,0,0,5,39,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,562,        for (int i = 0; i < nRows; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,563,"            out[i] = getEntry(i, column);",2,0,1,2,4,1,12,0,0,20,29,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,566,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,280,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,1,2,2,0,4,63,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,289,                sum = 0;,2,0,0,0,0,0,0,0,0,3,8,10,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,290,            },0,0,0,0,1,0,0,0,0,1,1,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,294,                sum += value * value;,6,1,0,0,0,0,0,0,0,8,21,10,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,295,            },2,1,0,0,1,0,0,0,0,3,1,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,299,                return FastMath.sqrt(sum);,0,0,0,1,2,1,0,0,0,4,26,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,338,        if (columnData == null) {,0,0,0,1,3,0,0,0,0,4,25,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,341,        final int nRows = columnData.length;,6,0,0,0,0,1,0,0,0,7,36,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,342,"        final RealMatrix m = createRealMatrix(nRows, 1);",2,0,0,1,2,1,4,2,0,9,48,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,343,        for (int i = 0; i < nRows; ++i) {,14,1,0,1,3,0,0,0,0,17,33,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,344,"            m.setEntry(i, 0, columnData[i]);",6,0,1,2,4,0,6,0,0,17,32,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,346,        return m;,0,0,1,0,0,1,4,0,0,9,9,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,571,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0,2,0,3,7,0,8,0,0,10,61,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,576,    },2,0,0,0,1,0,0,2,0,5,1,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,588,        if ((left.getRowDimension()    != right.getRowDimension()) ||,2,0,0,3,7,0,0,0,0,2,61,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,593,    },0,0,0,0,1,0,0,0,0,1,1,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1109,            final double[][] d = new double[m.getRowDimension()][1];,2,0,0,5,10,1,4,0,0,7,56,6,17.30769,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1110,            for (int i = 0; i < m.getColumnDimension(); i++) {,10,1,0,2,5,0,4,0,0,17,50,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1111,"                d[i][0] = m.getEntry(i, i);",0,0,0,3,6,0,0,0,0,9,27,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1113,"            return new Array2DRowRealMatrix(d, false);",24,7,0,1,2,2,0,2,0,35,42,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,579,            realEigenvalues[i] = main[i];,0,0,1,2,4,0,0,0,0,9,29,6,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,580,            e[i] = secondary[i];,0,0,0,2,4,0,0,0,0,6,20,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,612,                    double delta = FastMath.abs(realEigenvalues[m]) +,4,2,1,2,4,0,4,0,0,14,49,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,614,                    if (FastMath.abs(e[m]) + delta == delta) {,0,0,0,3,7,0,0,0,0,10,42,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,615,                        break;,0,0,0,0,0,0,0,0,0,0,6,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,619,                    if (its == maxIter) {,4,1,0,1,3,0,0,0,0,5,21,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,623,                    its++;,0,0,0,0,0,0,0,0,0,0,6,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,624,                    double q = (realEigenvalues[j + 1] - realEigenvalues[j]) / (2 * e[j]);,4,4,1,5,10,0,0,0,0,18,70,11,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,625,                    double t = FastMath.sqrt(1 + q * q);,6,2,0,1,2,0,4,0,0,12,36,11,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,626,                    if (q < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,627,                        q = realEigenvalues[m] - realEigenvalues[j] + e[j] / (q - t);,0,0,0,4,8,0,0,0,0,12,61,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,629,                        q = realEigenvalues[m] - realEigenvalues[j] + e[j] / (q + t);,0,0,0,4,8,0,0,0,0,12,61,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,631,                    double u = 0.0;,2,0,0,0,0,0,0,0,0,2,15,11,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,632,                    double s = 1.0;,2,0,0,0,0,0,0,0,0,2,15,11,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,633,                    double c = 1.0;,2,0,0,0,0,0,0,0,0,2,15,11,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,635,                    for (i = m - 1; i >= j; i--) {,0,0,0,1,3,0,0,0,0,4,30,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,636,                        double p = s * e[i];,0,0,0,1,2,0,0,0,0,3,20,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,637,                        double h = c * e[i];,0,0,0,1,2,0,0,0,0,3,20,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,638,                        if (FastMath.abs(p) >= FastMath.abs(q)) {,0,1,0,3,7,0,12,0,0,13,41,12,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,639,                            c = q / p;,6,1,0,0,0,0,0,0,0,8,10,14,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,640,                            t = FastMath.sqrt(c * c + 1.0);,0,0,0,1,2,0,0,0,0,3,31,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,641,                            e[i + 1] = p * t;,6,2,1,1,2,0,0,0,0,11,17,14,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,642,                            s = 1.0 / t;,8,2,0,0,0,0,0,0,0,11,12,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,643,                            c = c * s;,0,0,0,0,0,0,0,0,0,0,10,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,645,                            s = p / q;,0,0,0,0,0,0,0,0,0,0,10,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,646,                            t = FastMath.sqrt(s * s + 1.0);,6,2,0,1,2,0,4,0,0,13,31,14,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,647,                            e[i + 1] = q * t;,14,3,1,1,2,0,0,0,0,22,17,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,648,                            c = 1.0 / t;,0,0,0,0,0,0,0,0,0,0,12,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,649,                            s = s * c;,0,0,0,0,0,0,0,0,0,0,10,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,651,                        if (e[i + 1] == 0.0) {,2,2,1,2,5,0,0,0,0,6,22,12,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,656,                        q = realEigenvalues[i + 1] - u;,0,0,0,1,2,0,0,0,0,3,31,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,657,                        t = (realEigenvalues[i] - q) * s + 2.0 * c * h;,2,0,0,2,4,0,0,0,0,2,47,7,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,658,                        u = s * t;,6,1,0,0,0,0,0,0,0,8,10,12,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,659,                        realEigenvalues[i + 1] = q + u;,8,2,1,1,2,1,4,2,0,20,31,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,660,                        q = c * t - h;,8,2,0,0,0,0,0,0,0,11,14,12,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,661,                        for (int ia = 0; ia < n; ia++) {,16,2,0,1,3,0,0,0,0,21,32,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,662,                            p = z[ia][i + 1];,4,1,1,2,4,0,0,0,0,10,17,14,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,663,                            z[ia][i + 1] = s * z[ia][i] + c * p;,8,4,1,4,8,0,0,0,0,23,36,14,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,664,                            z[ia][i] = c * z[ia][i] - s * p;,12,4,1,4,8,0,0,0,0,29,32,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,667,                    if (t == 0.0 && i >= j) {,6,3,0,1,3,0,0,0,0,9,25,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,670,                    realEigenvalues[j] -= u;,4,0,1,1,2,0,10,2,0,21,24,1,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,671,                    e[j] = q;,6,2,0,1,2,0,0,0,0,9,9,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,672,                    e[m] = 0.0;,0,0,1,1,2,0,0,0,0,5,11,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,682,                if (realEigenvalues[j] > p) {,6,1,1,2,5,2,0,4,0,17,29,2,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,683,                    k = j;,4,0,0,0,0,0,0,0,0,5,6,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,684,                    p = realEigenvalues[j];,4,0,0,1,2,1,0,4,0,9,23,7,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,688,                realEigenvalues[k] = realEigenvalues[i];,0,0,1,2,4,0,0,0,0,9,40,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,689,                realEigenvalues[i] = p;,0,0,0,1,2,0,0,0,0,3,23,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,690,                for (int j = 0; j < n; j++) {,2,2,0,1,3,0,0,0,0,4,29,5,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,691,                    p = z[j][i];,4,0,1,2,4,0,0,0,0,12,12,0,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,692,                    z[j][i] = z[j][k];,4,0,1,4,8,0,0,0,0,22,18,5,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,693,                    z[j][k] = p;,2,0,1,2,4,0,0,0,0,9,12,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,104,                final double[] hK = householderVectors[k - 1];,0,0,0,2,4,0,0,0,0,6,46,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,105,                qta[k][k] = 1;,0,0,1,2,4,0,0,0,0,7,14,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,106,                if (hK[k] != 0.0) {,4,1,1,2,5,0,0,0,0,14,19,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,107,                    final double inv = 1.0 / (secondary[k - 1] * hK[k]);,4,3,1,3,6,1,0,0,0,14,52,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,108,                    double beta = 1.0 / secondary[k - 1];,4,2,1,1,2,0,0,0,0,8,37,11,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,109,                    qta[k][k] = 1 + beta * hK[k];,2,2,1,3,6,0,0,0,0,15,29,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,110,                    for (int i = k + 1; i < m; ++i) {,10,2,0,1,3,0,0,0,0,13,33,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,111,                        qta[k][i] = beta * hK[i];,2,1,1,3,6,0,0,0,0,14,25,12,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,113,                    for (int j = k + 1; j < m; ++j) {,0,0,0,1,3,0,0,0,0,4,33,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,114,                        beta = 0;,2,0,0,0,0,0,0,2,0,6,9,5,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,115,                        for (int i = k + 1; i < m; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,116,                            beta += qta[j][i] * hK[i];,2,1,1,3,6,0,0,0,0,14,26,14,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,118,                        beta *= inv;,4,0,0,0,0,0,0,0,0,5,12,12,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,119,                        qta[j][k] = beta * hK[k];,0,0,0,3,6,0,0,0,0,9,25,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,120,                        for (int i = k + 1; i < m; ++i) {,10,2,0,1,3,0,0,0,0,13,33,12,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,121,                            qta[j][i] += beta * hK[i];,2,1,1,3,6,0,0,0,0,14,26,14,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,198,            final double[] hK = householderVectors[k];,6,0,1,2,4,1,2,2,0,15,42,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,199,            main[k] = hK[k];,0,0,1,2,4,0,0,0,0,9,16,6,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,200,            double xNormSqr = 0;,6,1,0,0,0,0,0,2,0,9,20,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,201,            for (int j = k + 1; j < m; ++j) {,10,2,0,1,3,0,0,0,0,13,33,6,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,202,                final double c = hK[j];,4,0,1,1,2,2,4,0,0,14,23,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,203,                xNormSqr += c * c;,0,0,0,0,0,0,0,0,0,0,18,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,205,            final double a = (hK[k + 1] > 0) ? -FastMath.sqrt(xNormSqr) : FastMath.sqrt(xNormSqr);,8,3,1,4,8,1,12,0,0,27,86,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,206,            secondary[k] = a;,0,0,0,1,2,0,0,0,0,3,17,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,207,            if (a != 0.0) {,2,1,0,1,3,0,0,0,0,3,15,6,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,210,                hK[k + 1] -= a;,0,0,0,1,2,0,0,0,0,3,15,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,211,                final double beta = -1 / (a * hK[k + 1]);,0,0,0,2,4,0,0,0,0,6,41,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,217,"                Arrays.fill(z, k + 1, m, 0);",2,1,0,1,2,0,8,0,0,11,28,9,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,218,                for (int i = k + 1; i < m; ++i) {,8,1,0,1,3,1,0,0,0,11,33,0,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,219,                    final double[] hI = householderVectors[i];,8,1,1,2,4,2,0,0,0,15,42,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,220,                    final double hKI = hK[i];,2,0,1,1,2,1,0,0,0,7,25,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,221,                    double zI = hI[i] * hKI;,4,1,1,1,2,0,0,0,0,9,24,11,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,222,                    for (int j = i + 1; j < m; ++j) {,10,2,0,1,3,0,0,0,0,13,33,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,223,                        final double hIJ = hI[j];,4,0,1,1,2,1,4,0,0,14,25,1,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,224,                        zI   += hIJ * hK[j];,4,1,1,1,2,0,0,0,0,10,20,12,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,225,                        z[j] += hIJ * hKI;,4,1,1,1,2,0,0,0,0,10,18,12,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,227,                    z[i] = beta * (z[i] + zI);,4,2,1,3,6,0,0,0,0,15,26,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,231,                double gamma = 0;,2,0,0,0,0,0,0,0,0,2,17,9,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,232,                for (int i = k + 1; i < m; ++i) {,10,2,0,1,3,0,0,0,0,13,33,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,233,                    gamma += z[i] * hK[i];,4,1,1,2,4,0,0,0,0,14,22,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,235,                gamma *= beta / 2;,4,1,0,0,0,0,0,0,0,6,18,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,238,                for (int i = k + 1; i < m; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,239,                    z[i] -= gamma * hK[i];,0,0,0,2,4,0,0,0,0,6,22,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,244,                for (int i = k + 1; i < m; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,245,                    final double[] hI = householderVectors[i];,2,0,1,2,4,1,0,0,0,7,42,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,246,                    for (int j = i; j < m; ++j) {,16,2,0,1,3,0,0,0,0,20,29,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,247,                        hI[j] -= hK[i] * z[j] + z[i] * hK[j];,0,3,1,5,10,0,0,0,0,24,37,12,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,400,"                final double mij = matrix.getEntry(i, j);",4,0,0,1,2,1,8,0,0,14,41,0,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,401,"                final double mji = matrix.getEntry(j, i);",8,3,0,1,2,1,8,0,0,20,41,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,402,                if (FastMath.abs(mij - mji) >,4,2,0,1,3,0,4,0,0,10,29,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,104,        if (Double.isNaN(nextGaussian)) {,2,1,0,2,5,0,6,0,0,9,33,4,17.06667,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,106,            final double x = nextDouble();,2,0,0,1,2,1,2,0,0,5,30,6,17.06667,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,107,            final double y = nextDouble();,0,0,0,1,2,0,0,0,0,3,30,4,17.06667,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,108,            final double alpha = 2 * FastMath.PI * x;,8,1,0,0,0,1,0,0,0,10,41,6,17.06667,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,109,            final double r      = FastMath.sqrt(-2 * FastMath.log(y));,2,1,0,2,4,1,10,0,0,15,58,6,17.06667,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,110,            random       = r * FastMath.cos(alpha);,4,1,0,1,2,0,6,0,0,12,39,6,17.06667,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,111,            nextGaussian = r * FastMath.sin(alpha);,0,0,0,1,2,0,0,0,0,3,39,4,17.06667,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,112,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,17.06667,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,114,            random = nextGaussian;,0,0,0,0,0,0,0,0,0,0,22,4,17.06667,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,115,            nextGaussian = Double.NaN;,6,0,0,0,0,0,0,0,0,7,26,6,17.06667,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,118,        return random;,2,0,0,0,0,1,0,0,0,2,14,4,17.06667,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,560,            for (int i = 0; i < init.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,6,17.06667,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,561,                if (inputSigma[i] > uB[i] - lB[i]) {,0,0,0,4,9,0,0,0,0,13,36,4,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1184,                double xa = x - 1.0;,0,0,1,0,0,0,0,0,0,10,20,8,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1185,                double xb = xa - x + 1.0;,0,0,0,0,0,0,0,0,0,0,25,4,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1186,                double tmp = xa * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,31,9,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1187,                double aa = xa + tmp - tmp;,8,2,0,0,0,0,0,0,0,10,27,9,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1188,                double ab = xa - aa;,14,2,0,0,0,0,0,0,0,17,20,3,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1189,                xa = aa;,10,2,1,0,0,0,0,0,0,18,8,5,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1190,                xb = ab;,0,0,0,0,0,0,0,0,0,0,8,4,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1192,                final double[] lnCoef_last = LN_QUICK_COEF[LN_QUICK_COEF.length - 1];,6,1,1,2,4,1,0,0,0,10,69,8,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1193,                double ya = lnCoef_last[0];,8,1,1,1,2,0,0,0,0,12,27,5,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1194,                double yb = lnCoef_last[1];,2,0,1,1,2,0,0,0,0,4,27,9,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1196,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,18,3,0,1,3,0,0,0,0,24,53,3,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1198,                    aa = ya * xa;,16,2,1,0,0,0,0,0,0,23,13,3,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1199,                    ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,10,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1201,                    tmp = aa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,24,4,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1202,                    ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1203,                    yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1206,                    final double[] lnCoef_i = LN_QUICK_COEF[i];,2,0,1,2,4,1,0,0,0,7,43,10,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1207,                    aa = ya + lnCoef_i[0];,0,0,0,1,2,0,0,0,0,3,22,4,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1208,                    ab = yb + lnCoef_i[1];,4,1,1,1,2,0,0,0,0,8,22,10,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1210,                    tmp = aa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,24,4,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1211,                    ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1212,                    yb = aa - ya + ab;,16,3,0,0,0,0,0,0,0,22,18,3,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1216,                aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1217,                ab = ya * xb + yb * xa + yb * xb;,0,0,0,0,0,0,0,0,0,0,33,4,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1219,                tmp = aa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,8,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1220,                ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1221,                yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1223,                return ya + yb;,4,1,0,0,0,1,0,0,0,5,15,8,17.06667,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,90,        final long high = ((long) next(26)) << 26;,2,1,0,3,6,1,2,0,0,6,42,4,16.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,91,        final int  low  = next(26);,2,0,0,1,2,1,2,0,0,5,27,4,16.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,92,        return (high | low) * 0x1.0p-52d;,4,2,0,1,2,1,0,0,0,6,33,4,16.0,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,534,        for (OptimizationData data : optData) {,6,0,0,1,3,0,0,2,0,8,39,3,16.0,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,535,            if (data instanceof Sigma) {,2,0,0,1,3,0,0,2,0,5,28,3,16.0,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,536,                inputSigma = ((Sigma) data).getSigma();,4,0,0,3,6,0,6,2,0,13,39,3,16.0,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,537,                continue;,6,0,0,0,0,3,0,0,0,11,9,1,16.0,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,539,            if (data instanceof PopulationSize) {,0,0,0,1,3,0,0,0,0,4,37,4,16.0,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,540,                lambda = ((PopulationSize) data).getPopulationSize();,4,0,0,3,6,0,2,2,0,9,53,8,16.0,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,541,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,16.0,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,545,        checkParameters();,0,0,0,1,2,0,2,0,0,2,18,5,16.0,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,552,        final double[] init = getStartPoint();,2,0,0,2,4,1,2,0,0,5,38,4,16.0,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,553,        final double[] lB = getLowerBound();,2,0,0,2,4,1,2,0,0,5,36,4,16.0,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,554,        final double[] uB = getUpperBound();,2,0,0,2,4,1,2,0,0,5,36,4,16.0,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,556,        if (inputSigma != null) {,0,0,0,1,3,0,0,0,0,4,25,4,16.0,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,557,            if (inputSigma.length != init.length) {,0,0,0,1,3,0,0,0,0,4,39,4,16.0,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,304,            return sigma.clone();,0,0,0,1,2,1,4,0,0,4,21,6,16.0,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,338,            return lambda;,4,0,0,0,0,2,4,0,0,9,14,1,16.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,7,3367,        y += 1.0;,2,0,0,0,0,0,0,0,0,3,9,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,7,3369,        if (y == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,7,3373,        return y;,4,0,0,0,0,2,4,0,0,9,9,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,351,"                    handler.handleStep(interpolator, isLastStep);",6,1,0,1,2,0,8,0,0,15,45,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,352,                },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,218,                switch (allowed) {,0,0,0,1,3,0,0,0,0,4,18,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,224,                    return xB;,2,0,0,0,0,1,0,0,0,2,10,9,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,239,                final int p = agingA - MAXIMAL_AGING;,6,1,0,0,0,1,0,0,0,8,37,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,240,                final double weightA = (1 << p) - 1;,4,2,0,1,2,1,0,0,0,7,36,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,241,                final double weightB = p + 1;,4,1,0,0,0,1,0,0,0,6,29,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,242,                targetY = (weightA * yA - weightB * REDUCTION_FACTOR * yB) / (weightA + weightB);,16,5,0,2,4,0,0,0,0,22,81,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,243,            } else if (agingB >= MAXIMAL_AGING) {,4,1,0,1,4,0,0,0,0,5,37,7,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,342,                xA = nextX;,8,1,0,0,0,0,0,0,0,10,11,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,343,                yA = nextY;,4,0,0,0,0,0,0,0,0,5,11,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,344,                absYA = FastMath.abs(yA);,2,0,0,1,2,0,6,0,0,9,25,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,345,                agingA = 0;,2,0,0,0,0,0,0,0,0,3,11,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,346,                ++agingB;,0,0,0,0,0,0,0,0,0,0,9,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,349,                signChangeIndex++;,2,0,0,0,0,0,0,0,0,3,18,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,218,                switch (allowed) {,2,0,0,1,3,0,0,0,0,2,18,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,348,"            handler.resetState(t, y);",0,0,0,1,2,0,0,0,0,3,25,4,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,182,            y[2] = computeObjectiveValue(x[2]);,0,0,1,3,6,0,2,0,0,7,35,6,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,183,"            if (Precision.equals(y[2], 0.0, 1)) {",0,0,0,3,7,0,0,0,0,10,37,4,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,188,            if (y[1] * y[2] < 0) {,0,0,0,3,7,0,0,0,0,10,22,4,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,190,                nbPoints        = 3;,0,0,0,0,0,0,0,0,0,0,20,4,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,191,                signChangeIndex = 2;,2,0,0,0,0,0,0,0,0,3,20,8,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,300,            if ((nbPoints > 2) && (end - start != nbPoints)) {,8,4,0,3,7,0,0,0,0,12,50,6,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,309,            } else  if (nbPoints == x.length) {,6,1,0,1,4,0,0,0,0,7,35,7,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,326,"            System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);",6,2,0,1,2,0,10,0,0,18,89,7,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,327,            x[signChangeIndex] = nextX;,2,0,1,1,2,0,0,0,0,7,27,6,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,328,"            System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);",0,0,0,1,2,0,0,0,0,3,89,4,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,329,            y[signChangeIndex] = nextY;,2,0,1,1,2,0,0,0,0,7,27,6,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,330,            ++nbPoints;,2,0,0,0,0,0,0,0,0,3,11,6,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,333,            if (nextY * yA <= 0) {,4,2,0,1,3,0,0,0,0,6,22,6,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,335,                xB = nextX;,6,1,0,0,0,0,0,0,0,8,11,3,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,336,                yB = nextY;,4,0,0,0,0,0,0,0,0,5,11,8,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,337,                absYB = FastMath.abs(yB);,4,0,0,1,2,0,8,0,0,14,25,3,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,338,                ++agingA;,2,0,1,0,0,0,0,0,0,12,9,5,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,339,                agingB = 0;,2,0,0,0,0,0,0,0,0,3,11,8,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,353,        },0,0,0,0,1,0,0,0,0,1,1,4,0.1,0,0
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,367,"                    System.arraycopy(eventY, 0, y, 0, y.length);",4,0,0,1,2,0,8,0,0,12,44,9,0.07692,0,0
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,368,"                    computeDerivatives(eventT, y, yDot);",0,0,0,1,2,0,8,0,0,8,36,9,0.07692,0,0
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,369,                    resetOccurred = true;,4,0,0,0,0,3,0,0,0,9,21,1,0.07692,0,0
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,370,                    for (final EventState remaining : occuringEvents) {,4,0,0,1,3,1,0,2,0,7,51,8,0.07692,1,0
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,373,                    return eventT;,0,0,0,0,0,1,0,0,0,1,14,4,0.07692,0,0
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,363,"                boolean needReset = currentEvent.reset(eventT, eventY);",2,0,0,1,2,0,8,0,0,10,55,7,0.06667,1,0
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,364,                if (needReset) {,2,0,0,1,3,0,0,0,0,2,16,6,0.06667,0,0
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,343,        if (!(pendingEvent && (FastMath.abs(pendingEventTime - t) <= convergence))) {,0,0,0,4,9,0,0,0,0,13,77,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,347,        if (nextAction == EventHandler.Action.RESET_STATE) {,8,1,0,1,3,0,0,0,0,9,52,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,350,        pendingEvent      = false;,2,0,0,0,0,0,0,0,0,4,26,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,351,        pendingEventTime  = Double.NaN;,0,0,0,0,0,0,0,0,0,0,31,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,353,        return (nextAction == EventHandler.Action.RESET_STATE) ||,8,2,0,1,2,1,0,0,0,10,57,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,150,        final double[] x = new double[maximalOrder + 1];,6,1,0,2,4,4,0,0,0,11,48,1,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,151,        final double[] y = new double[maximalOrder + 1];,8,1,0,2,4,1,0,0,0,11,48,3,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,152,        x[0] = getMin();,0,0,1,2,4,0,2,0,0,5,16,4,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,153,        x[1] = getStartValue();,0,0,1,2,4,0,2,0,0,5,23,4,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,154,        x[2] = getMax();,0,0,1,2,4,0,2,0,0,5,16,4,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,155,"        verifySequence(x[0], x[1], x[2]);",0,0,1,4,8,0,2,0,0,8,33,5,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,158,        y[1] = computeObjectiveValue(x[1]);,0,0,0,3,6,0,0,0,0,9,35,4,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,159,"        if (Precision.equals(y[1], 0.0, 1)) {",0,0,1,3,7,0,4,0,0,6,37,5,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,165,        y[0] = computeObjectiveValue(x[0]);,0,0,0,3,6,0,0,0,0,9,35,4,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,166,"        if (Precision.equals(y[0], 0.0, 1)) {",0,0,1,3,7,0,4,0,0,6,37,5,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,173,        if (y[0] * y[1] < 0) {,0,2,1,3,7,0,0,0,0,6,22,4,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,199,        final double[] tmpX = new double[x.length];,0,0,0,2,4,0,0,0,0,6,43,4,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,202,        double xA    = x[signChangeIndex - 1];,4,1,1,1,2,0,0,0,0,7,38,5,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,203,        double yA    = y[signChangeIndex - 1];,6,2,1,1,2,0,0,0,0,10,38,1,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,204,        double absYA = FastMath.abs(yA);,2,0,0,1,2,0,6,0,0,8,32,5,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,205,        int agingA   = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,206,        double xB    = x[signChangeIndex];,2,0,1,1,2,0,0,0,0,6,34,5,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,207,        double yB    = y[signChangeIndex];,2,0,1,1,2,0,0,0,0,6,34,5,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,208,        double absYB = FastMath.abs(yB);,0,0,0,1,2,0,0,0,0,3,32,4,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,209,        int agingB   = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,215,            final double xTol = getAbsoluteAccuracy() +,2,1,0,1,2,1,2,0,0,6,43,6,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,217,"            if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {",6,4,0,6,13,0,10,0,0,20,87,6,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,237,            if (agingA >= MAXIMAL_AGING) {,4,1,0,1,3,0,0,0,0,5,30,6,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,251,                targetY = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,256,            int start = 0;,2,0,0,0,0,0,0,0,0,2,14,7,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,257,            int end   = nbPoints;,4,0,0,0,0,0,0,0,0,4,21,7,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,261,"                System.arraycopy(x, start, tmpX, start, end - start);",4,1,0,1,2,0,12,0,0,17,53,9,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,262,"                nextX = guessX(targetY, tmpX, y, start, end);",2,0,0,1,2,0,18,0,0,21,45,3,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,264,                if (!((nextX > xA) && (nextX < xB))) {,8,3,0,4,9,0,0,0,0,12,38,8,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,283,            } while (Double.isNaN(nextX) && (end - start > 1));,0,0,0,3,7,0,0,0,0,10,51,4,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,285,            if (Double.isNaN(nextX)) {,0,0,0,2,5,0,0,0,0,7,26,4,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,293,            final double nextY = computeObjectiveValue(nextX);,2,0,0,1,2,1,4,0,0,7,50,6,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,294,"            if (Precision.equals(nextY, 0.0, 1)) {",0,0,0,2,5,0,0,0,0,7,38,4,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,375,        for (int i = start; i < end - 1; ++i) {,10,2,0,1,3,0,0,0,0,13,39,4,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,376,            final int delta = i + 1 - start;,6,2,0,0,0,1,0,0,0,9,32,6,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,377,            for (int j = end - 1; j > i; --j) {,0,0,0,1,3,0,0,0,0,4,35,4,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,378,                x[j] = (x[j] - x[j-1]) / (y[j] - y[j - delta]);,6,5,1,7,14,0,0,0,0,28,47,8,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,383,        double x0 = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,384,        for (int j = end - 1; j >= start; --j) {,0,0,0,1,3,0,0,0,0,4,40,4,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,385,            x0 = x[j] + x0 * (targetY - y[j]);,6,3,1,3,6,0,0,0,0,18,34,6,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,388,        return x0;,0,0,0,0,0,1,0,0,0,1,10,4,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,398,        this.allowed = allowedSolution;,4,0,0,0,0,0,0,0,0,5,31,4,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,399,"        return super.solve(maxEval, f, min, max);",10,0,0,1,2,1,0,0,0,10,41,5,0.0625,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,157,        final double randomValue = random.nextDouble();,0,0,0,1,2,0,0,0,0,3,47,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,158,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,160,        for (int i = 0; i < probabilities.length; i++) {,10,1,0,1,3,0,0,0,0,12,48,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,161,            sum += probabilities[i];,2,0,1,1,2,0,0,0,0,7,24,6,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,162,            if (randomValue < sum) {,4,1,0,1,3,0,0,0,0,5,24,6,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,163,                return singletons.get(i);,0,0,0,1,2,1,6,0,0,6,25,9,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,86,        final int indexRm1 = iRm1[index];,2,0,1,1,2,1,0,0,0,7,33,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,87,        final int indexRm2 = iRm2[index];,2,0,1,1,2,1,0,0,0,7,33,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,89,        final int v0       = v[index];,2,0,1,1,2,1,0,0,0,7,30,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,90,        final int vM1      = v[i1[index]];,2,0,0,2,4,0,0,0,0,3,34,2,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,91,        final int vM2      = v[i2[index]];,6,0,1,2,4,1,6,0,0,19,34,3,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,92,        final int vM3      = v[i3[index]];,2,0,1,2,4,1,0,0,0,9,34,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,94,        final int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);,2,3,1,4,8,1,0,0,0,14,71,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,95,        final int z1 = (v0 ^ (v0 << 25))  ^ (vM1 ^ (vM1 >>> 27));,10,5,0,4,8,1,0,0,0,16,57,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,96,        final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));,0,0,0,3,6,0,0,0,0,9,49,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,97,        final int z3 = z1      ^ z2;,6,1,0,0,0,1,0,0,0,8,28,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,98,        int z4 = z0 ^ (z1 ^ (z1 << 9)) ^ (z2 ^ (z2 << 21)) ^ (z3 ^ (z3 >>> 21));,16,7,0,6,12,0,6,0,0,29,72,3,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,100,        v[index]     = z3;,4,0,1,1,2,0,0,0,0,9,18,3,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,101,        v[indexRm1]  = z4;,2,0,1,1,2,0,0,0,0,7,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,102,        v[indexRm2] &= 0x80000000;,0,0,1,1,2,0,0,0,0,5,26,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,103,        index        = indexRm1;,0,0,0,0,0,0,0,0,0,0,24,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,108,        z4 = z4 ^ ((z4 <<  7) & 0xe46e1700);,6,3,0,2,4,0,0,0,0,10,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,109,        z4 = z4 ^ ((z4 << 15) & 0x9b868000);,6,3,0,2,4,0,0,0,0,10,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,111,        return z4 >>> (32 - bits);,4,2,0,1,2,1,0,0,0,6,26,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,90,        final long high = ((long) next(26)) << 26;,2,1,0,3,6,1,2,0,0,6,42,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,91,        final int  low  = next(26);,2,0,0,1,2,1,2,0,0,5,27,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,92,        return (high | low) * 0x1.0p-52d;,4,2,0,1,2,1,0,0,0,6,33,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,66,"        this(new Well19937c(), singletons, probabilities);",0,0,0,2,4,0,0,0,0,6,50,4,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,67,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,87,        super(rng);,2,0,0,1,2,0,0,0,0,2,11,4,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,88,        if (singletons.length != probabilities.length) {,8,1,0,1,3,0,0,0,0,9,48,4,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,92,"        List<Pair<Double, Double>> samples = new ArrayList<Pair<Double, Double>>(singletons.length);",6,0,0,1,2,0,0,16,0,22,92,4,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,94,        for (int i = 0; i < singletons.length; i++) {,10,1,0,1,3,0,0,0,0,12,45,4,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,95,"            samples.add(new Pair<Double, Double>(singletons[i], probabilities[i]));",0,0,1,4,8,0,4,6,0,18,71,7,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,98,"        innerDistribution = new DiscreteDistribution<Double>(rng, samples);",6,0,0,1,2,0,0,4,0,11,67,4,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,99,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,50,    @Deprecated,2,0,0,0,0,0,0,0,0,2,11,3,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,60,    private double solverAbsoluteAccuracy = SOLVER_DEFAULT_ABSOLUTE_ACCURACY;,4,0,0,0,0,1,0,0,0,5,73,2,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,76,    protected AbstractRealDistribution(RandomGenerator rng) {,4,0,0,1,3,1,0,2,0,7,57,2,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,77,        random = rng;,4,0,0,0,0,0,0,0,0,5,13,4,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,78,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08333,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1249,         if (Double.isInfinite(normalizedSum)) {,0,0,0,2,5,0,0,0,0,7,39,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1252,         if (Double.isNaN(normalizedSum)) {,0,0,0,2,5,0,0,0,0,7,34,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1255,         double sum = 0d;,2,0,0,0,0,0,0,0,0,2,16,5,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1256,         final int len = values.length;,6,0,0,0,0,1,0,0,0,7,30,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1257,         double[] out = new double[len];,0,0,0,2,4,0,0,0,0,6,31,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1258,         for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1259,             if (Double.isInfinite(values[i])) {,0,0,0,3,7,0,0,0,0,10,35,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1262,             if (!Double.isNaN(values[i])) {,0,0,1,3,7,0,4,0,0,9,31,6,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1263,                 sum += values[i];,0,0,0,1,2,0,0,0,0,3,17,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1266,         if (sum == 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1269,         for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1270,             if (Double.isNaN(values[i])) {,0,0,1,3,7,0,4,0,0,8,30,7,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1273,                 out[i] = values[i] * normalizedSum / sum;,4,2,1,2,4,0,0,0,0,15,41,8,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1276,         return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,45,"    public Pair(K k, V v) {",6,0,0,1,3,1,0,4,0,11,23,2,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,46,        key = k;,4,0,0,0,0,0,0,0,0,5,8,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,47,        value = v;,4,0,0,0,0,0,0,0,0,5,10,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,65,        return key;,2,0,0,0,0,1,0,0,0,2,11,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,74,        return value;,4,0,0,0,0,1,0,0,0,4,13,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,86,"        throws NotPositiveException, MathArithmeticException, MathIllegalArgumentException {",6,1,0,0,1,0,0,0,0,7,84,5,0.04762,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,87,        random = rng;,4,0,0,0,0,0,0,0,0,5,13,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,89,        singletons = new ArrayList<T>(samples.size());,0,0,0,2,4,0,0,0,0,6,46,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,90,        final double[] probs = new double[samples.size()];,2,0,0,3,6,1,4,0,0,7,50,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,92,        for (int i = 0; i < samples.size(); i++) {,6,1,0,2,5,0,4,0,0,12,42,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,93,"            final Pair<T, Double> sample = samples.get(i);",2,0,0,1,2,1,6,6,0,15,46,6,0.04762,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,94,            singletons.add(sample.getKey());,0,0,0,2,4,0,8,0,0,8,32,7,0.04762,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,95,            if (sample.getValue() < 0) {,0,0,0,2,5,0,0,0,0,7,28,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,98,            probs[i] = sample.getValue();,0,0,1,2,4,0,4,0,0,9,29,6,0.04762,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,101,"        probabilities = MathArrays.normalizeArray(probs, 1.0);",2,0,0,1,2,0,6,0,0,9,54,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,102,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,57,"        super(K, M1, M2, M3);",0,0,0,1,2,0,0,0,0,3,21,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,58,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,72,"        this(k, m1, m2, m3, null);",10,0,0,1,2,1,0,0,0,12,26,1,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,73,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,94,"    protected AbstractWell(final int k, final int m1, final int m2, final int m3, final int[] seed) {",16,0,0,2,5,6,0,0,0,23,97,2,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,99,        final int w = 32;,2,0,0,0,0,1,0,0,0,3,17,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,100,        final int r = (k + w - 1) / w;,8,3,0,1,2,1,0,0,0,12,30,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,101,        this.v      = new int[r];,4,0,1,1,2,0,6,0,0,14,25,3,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,102,        this.index  = 0;,2,0,0,0,0,0,0,0,0,3,16,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,106,        iRm1 = new int[r];,0,0,0,1,2,0,0,0,0,3,18,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,107,        iRm2 = new int[r];,2,0,1,1,2,0,0,0,0,5,18,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,108,        i1   = new int[r];,2,0,1,1,2,0,0,0,0,5,18,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,109,        i2   = new int[r];,8,1,1,1,2,1,0,0,0,13,18,3,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,110,        i3   = new int[r];,2,0,1,1,2,0,0,0,0,5,18,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,111,        for (int j = 0; j < r; ++j) {,16,2,0,1,3,0,0,0,0,20,29,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,112,            iRm1[j] = (j + r - 1) % r;,6,3,1,2,4,0,0,0,0,14,26,6,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,113,            iRm2[j] = (j + r - 2) % r;,6,3,1,2,4,0,0,0,0,14,26,6,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,114,            i1[j]   = (j + m1)    % r;,6,2,1,2,4,0,0,0,0,13,26,6,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,115,            i2[j]   = (j + m2)    % r;,20,10,1,2,4,1,4,0,0,45,26,3,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,116,            i3[j]   = (j + m3)    % r;,6,2,1,2,4,0,0,0,0,13,26,6,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,120,        setSeed(seed);,0,0,0,1,2,0,4,0,0,4,14,5,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,122,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,154,        if (seed == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,155,            setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0,1,0,3,6,0,10,0,0,11,68,7,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,156,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,159,"        System.arraycopy(seed, 0, v, 0, Math.min(seed.length, v.length));",8,0,0,2,4,0,12,0,0,20,65,5,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,161,        if (seed.length < v.length) {,8,1,0,1,3,0,0,0,0,9,29,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,162,            for (int i = seed.length; i < v.length; ++i) {,0,0,0,1,3,0,0,0,0,4,46,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,163,                final long l = v[i - seed.length];,8,1,1,1,2,1,0,0,0,12,34,8,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,164,                v[i] = (int) ((1812433253l * (l ^ (l >> 30)) + i) & 0xffffffffL);,0,0,0,6,12,0,0,0,0,18,65,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,168,        index = 0;,2,0,0,0,0,0,6,0,0,10,10,3,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,169,        clear();  // Clear normal deviate cache,0,0,0,1,2,0,2,0,0,2,39,5,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,170,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,179,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",4,2,0,7,14,0,2,0,0,8,71,5,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,180,    },6,1,0,0,1,1,4,0,0,12,1,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,40,    public BitsStreamGenerator() {,2,0,0,1,3,1,0,0,0,3,30,2,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,41,        nextGaussian = Double.NaN;,6,0,0,0,0,0,0,0,0,7,26,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,42,    },4,0,0,0,1,0,0,0,0,4,1,5,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,170,        nextGaussian = Double.NaN;,6,0,0,0,0,0,0,0,0,7,26,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,171,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,131,    public RandomDataGenerator() {,0,0,0,1,3,0,0,0,0,4,30,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,118,    private RandomGenerator rand = null;,0,0,0,0,0,0,0,0,0,0,36,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,121,    private SecureRandom secRand = null;,2,0,0,0,0,1,0,2,0,5,36,2,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,132,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,114,    public RandomDataImpl() {,2,0,0,1,3,1,0,0,0,3,25,2,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,115,        delegate = new RandomDataGenerator();,2,0,0,1,2,0,0,2,0,5,37,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,116,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,674,"            = new Comparator<Pair<Double, double[]>>() {",0,0,0,2,5,0,0,0,0,7,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,678,                switch (dir) {,2,0,0,1,3,0,0,0,0,2,14,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,680,                    val = o1.getKey().compareTo(o2.getKey());,2,0,0,3,6,0,10,0,0,13,41,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,681,                break;,2,0,0,0,0,3,0,0,0,5,6,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,683,                    val = o2.getKey().compareTo(o1.getKey());,6,0,0,3,6,0,10,0,0,17,41,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,684,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,687,                    throw new MathInternalError();,0,0,0,1,2,0,0,2,0,2,30,13,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,689,                return val;,2,0,0,0,0,1,0,0,0,2,11,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,51,    private MathArrays() {},2,0,0,2,4,1,0,0,0,3,23,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,88,        if (a.length != b.length) {,0,0,0,1,3,0,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,89,"            throw new DimensionMismatchException(a.length, b.length);",6,0,0,1,2,1,0,4,0,12,57,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,92,        final double[] result = a.clone();,2,0,0,2,4,1,4,0,0,8,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,93,        for (int i = 0; i < a.length; i++) {,12,1,0,1,3,3,0,0,0,17,36,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,94,            result[i] += b[i];,0,0,0,2,4,0,0,0,0,6,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,96,        return result;,4,1,0,0,0,1,0,0,0,5,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,110,        if (a.length != b.length) {,8,1,0,1,3,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,111,"            throw new DimensionMismatchException(a.length, b.length);",8,0,0,1,2,0,0,2,0,10,57,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,114,        final double[] result = a.clone();,4,1,0,2,4,1,4,0,0,10,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,115,        for (int i = 0; i < a.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,116,            result[i] -= b[i];,0,0,1,2,4,0,0,0,0,9,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,118,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,132,        if (a.length != b.length) {,8,1,0,1,3,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,133,"            throw new DimensionMismatchException(a.length, b.length);",8,0,0,1,2,0,0,2,0,10,57,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,136,        final double[] result = a.clone();,6,1,0,2,4,1,4,0,0,12,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,137,        for (int i = 0; i < a.length; i++) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,138,            result[i] *= b[i];,0,0,1,2,4,0,0,0,0,9,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,140,        return result;,2,0,0,0,0,1,0,0,0,3,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,154,        if (a.length != b.length) {,8,1,0,1,3,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,155,"            throw new DimensionMismatchException(a.length, b.length);",8,0,0,1,2,0,0,2,0,10,57,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,158,        final double[] result = a.clone();,2,0,0,2,4,1,4,0,0,7,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,159,        for (int i = 0; i < a.length; i++) {,12,2,0,1,3,0,0,0,0,15,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,160,            result[i] /= b[i];,0,0,1,2,4,0,0,0,0,9,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,162,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,173,        double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,174,        for (int i = 0; i < p1.length; i++) {,10,1,0,1,3,0,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,175,            sum += FastMath.abs(p1[i] - p2[i]);,2,1,1,3,6,0,4,0,0,16,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,177,        return sum;,4,1,1,0,0,1,0,0,0,10,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,188,      int sum = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,189,      for (int i = 0; i < p1.length; i++) {,10,1,0,1,3,0,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,190,          sum += FastMath.abs(p1[i] - p2[i]);,2,1,1,3,6,0,4,0,0,16,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,192,      return sum;,4,0,0,0,0,1,0,0,0,5,11,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,203,        double sum = 0;,2,0,1,0,0,0,8,0,0,14,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,204,        for (int i = 0; i < p1.length; i++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,205,            final double dp = p1[i] - p2[i];,2,1,1,2,4,1,0,0,0,12,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,206,            sum += dp * dp;,10,2,0,0,0,0,0,0,0,13,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,208,        return FastMath.sqrt(sum);,0,0,0,1,2,1,6,0,0,6,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,219,      double sum = 0;,4,1,0,0,0,0,0,0,0,5,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,220,      for (int i = 0; i < p1.length; i++) {,10,1,0,1,3,0,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,221,          final double dp = p1[i] - p2[i];,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,222,          sum += dp * dp;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,224,      return FastMath.sqrt(sum);,0,0,0,1,2,1,6,0,0,6,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,235,        double max = 0;,4,0,0,0,0,0,0,0,0,5,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,236,        for (int i = 0; i < p1.length; i++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,237,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",2,1,1,4,8,0,10,0,0,22,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,239,        return max;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,250,        int max = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,251,        for (int i = 0; i < p1.length; i++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,252,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",2,1,1,4,8,0,10,0,0,22,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,254,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,279,        T previous = val[0];,2,0,1,1,2,0,0,2,0,6,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,280,        final int max = val.length;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,281,        for (int i = 1; i < max; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,283,            switch (dir) {,4,0,0,1,3,0,4,0,0,9,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,285,                comp = previous.compareTo(val[i]);,2,0,1,2,4,0,4,0,0,11,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,286,                if (strict) {,2,0,0,1,3,0,0,0,0,2,13,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,287,                    if (comp >= 0) {,2,1,0,1,3,0,0,0,0,3,16,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,288,                        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,291,                    if (comp > 0) {,2,1,0,1,3,0,0,0,0,3,15,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,292,                        return false;,0,0,0,0,0,1,0,0,0,1,13,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,297,                comp = val[i].compareTo(previous);,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,298,                if (strict) {,2,0,0,1,3,0,0,0,0,2,13,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,299,                    if (comp >= 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,300,                        return false;,0,0,0,0,0,1,0,0,0,1,13,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,303,                    if (comp > 0) {,2,1,0,1,3,0,0,0,0,3,15,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,304,                       return false;,0,0,0,0,0,1,0,0,0,1,13,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,310,                throw new MathInternalError();,0,0,0,1,2,0,0,2,0,2,30,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,313,            previous = val[i];,0,0,0,1,2,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,315,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,329,"        return checkOrder(val, dir, strict, false);",0,0,0,1,2,1,0,0,0,4,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,346,        double previous = val[0];,2,0,1,1,2,0,0,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,347,        final int max = val.length;,6,0,0,0,0,1,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,351,        for (index = 1; index < max; index++) {,8,1,0,1,3,0,0,0,0,11,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,352,            switch (dir) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,354,                if (strict) {,2,0,0,1,3,0,0,0,0,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,355,                    if (val[index] <= previous) {,2,1,1,2,5,0,0,0,0,7,29,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,356,                        break ITEM;,2,0,0,0,0,0,6,0,0,8,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,359,                    if (val[index] < previous) {,0,0,0,2,5,0,0,0,0,7,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,360,                        break ITEM;,4,0,0,0,0,0,0,0,0,5,11,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,365,                if (strict) {,2,0,0,1,3,0,8,0,0,10,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,366,                    if (val[index] >= previous) {,2,1,1,2,5,0,0,0,0,7,29,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,367,                        break ITEM;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,370,                    if (val[index] > previous) {,2,1,1,2,5,0,0,0,0,7,28,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,371,                        break ITEM;,6,1,0,0,0,0,0,0,0,8,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,377,                throw new MathInternalError();,0,0,0,1,2,0,0,4,0,5,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,380,            previous = val[index];,0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,383,        if (index == max) {,4,1,0,1,3,0,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,385,            return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,389,        if (abort) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,390,"            throw new NonMonotonicSequenceException(val[index], previous, index, dir, strict);",0,0,0,2,4,0,0,0,0,6,82,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,392,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,407,"        checkOrder(val, dir, strict, true);",0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,408,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,418,"        checkOrder(val, OrderDirection.INCREASING, true);",6,1,1,1,2,0,4,0,0,17,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,419,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,431,        MathUtils.checkNotNull(in);,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,432,        for (int i = 1; i < in.length; i++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,433,            if (in[i].length != in[0].length) {,4,1,1,3,7,0,0,0,0,11,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,434,                throw new DimensionMismatchException(,0,0,0,0,1,0,0,0,0,1,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,439,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,451,        for (int i = 0; i < in.length; i++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,452,            if (in[i] <= 0) {,0,0,0,2,5,0,0,0,0,7,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,453,                throw new NotStrictlyPositiveException(in[i]);,0,0,0,2,4,0,0,0,0,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,456,    },0,0,0,0,1,0,6,0,0,6,1,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,467,        for (int i = 0; i < in.length; i++) {,2,0,0,1,3,1,2,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,468,            if (in[i] < 0) {,0,1,1,2,5,0,0,0,0,9,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,469,                throw new NotPositiveException(in[i]);,0,0,1,2,4,0,0,2,0,6,38,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,472,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,483,        for (int i = 0; i < in.length; i ++) {,12,1,1,1,3,0,0,0,0,17,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,484,            for (int j = 0; j < in[i].length; j++) {,8,1,1,2,5,0,0,0,0,14,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,485,                if (in[i][j] < 0) {,0,1,1,3,7,0,0,0,0,7,19,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,486,                    throw new NotPositiveException(in[i][j]);,0,0,1,3,6,0,0,2,0,8,41,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,490,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,553,        double rdwarf = 3.834e-20;,2,0,0,0,0,0,0,0,0,2,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,554,        double rgiant = 1.304e+19;,2,0,0,0,0,1,0,0,0,3,26,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,555,        double s1 = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,556,        double s2 = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,557,        double s3 = 0;,2,0,0,0,0,0,8,0,0,10,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,558,        double x1max = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,559,        double x3max = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,560,        double floatn = v.length;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,561,        double agiant = rgiant / floatn;,8,1,0,0,0,0,0,0,0,11,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,562,        for (int i = 0; i < v.length; i++) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,563,            double xabs = Math.abs(v[i]);,2,0,1,2,4,0,4,0,0,10,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,564,            if (xabs < rdwarf || xabs > agiant) {,12,4,1,1,3,1,0,0,0,21,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,565,                if (xabs > rdwarf) {,4,1,0,1,3,0,0,0,0,5,20,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,566,                    if (xabs > x1max) {,4,1,0,1,3,0,0,0,0,5,19,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,567,                        double r = x1max / xabs;,6,1,0,0,0,0,0,0,0,7,24,13,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,568,                        s1= 1 + s1 * r * r;,8,2,0,0,0,0,0,0,0,11,19,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,569,                        x1max = xabs;,4,0,0,0,0,0,0,0,0,5,13,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,570,                    } else {,2,0,0,0,2,0,0,2,0,4,8,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,571,                        double r = xabs / x1max;,6,1,0,0,0,0,0,0,0,7,24,13,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,572,                        s1 += r * r;,6,1,0,0,0,0,0,0,0,8,12,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,573,                    },4,1,0,0,1,0,0,0,0,6,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,575,                    if (xabs > x3max) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,576,                        double r = x3max / xabs;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,577,                        s3= 1 + s3 * r * r;,12,4,1,0,0,0,4,0,0,32,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,578,                        x3max = xabs;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,579,                    } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,580,                        if (xabs != 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,581,                            double r = xabs / x3max;,6,1,0,0,0,0,0,0,0,7,24,15,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,582,                            s3 += r * r;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,583,                        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,587,                s2 += xabs * xabs;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,591,        if (s1 != 0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,592,            norm = x1max * Math.sqrt(s1 + (s2 / x1max) / x1max);,12,4,0,2,4,0,4,0,0,21,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,594,            if (s2 == 0) {,10,6,1,1,3,0,0,0,0,20,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,595,                norm = x3max * Math.sqrt(s3);,4,1,0,1,2,0,6,0,0,12,29,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,597,                if (s2 >= x3max) {,4,1,0,1,3,0,0,0,0,5,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,598,                    norm = Math.sqrt(s2 * (1 + (x3max / s2) * (x3max * s3)));,6,1,0,4,8,0,4,0,0,12,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,600,                    norm = Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));,2,1,0,4,8,0,10,0,0,14,56,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,604,        return norm;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,625,"        sortInPlace(x, OrderDirection.INCREASING, yList);",6,0,1,1,2,1,6,0,0,15,49,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,626,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,649,        if (x == null) {,4,1,1,1,3,0,0,0,0,8,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,650,            throw new NullArgumentException();,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,653,        final int len = x.length;,6,0,0,0,0,1,0,0,0,7,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,654,"        final List<Pair<Double, double[]>> list",2,0,0,1,2,0,0,6,0,8,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,657,        final int yListLen = yList.length;,2,0,0,0,0,0,0,0,0,3,34,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,658,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,659,            final double[] yValues = new double[yListLen];,0,0,0,2,4,0,0,0,0,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,660,            for (int j = 0; j < yListLen; j++) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,661,                double[] y = yList[j];,2,0,1,2,4,0,0,0,0,6,22,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,662,                if (y == null) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,663,                    throw new NullArgumentException();,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,665,                if (y.length != len) {,6,1,0,1,3,0,0,0,0,7,22,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,666,"                    throw new DimensionMismatchException(y.length, len);",0,0,0,1,2,0,0,0,0,3,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,668,                yValues[j] = y[i];,0,0,0,2,4,0,0,0,0,6,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,670,"            list.add(new Pair<Double, double[]>(x[i], yValues));",2,0,1,4,8,0,4,4,0,14,52,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,673,"        final Comparator<Pair<Double, double[]>> comp",2,0,0,1,2,1,8,6,0,17,45,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,693,"        Collections.sort(list, comp);",0,0,0,1,2,0,8,0,0,8,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,695,        for (int i = 0; i < len; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,696,"            final Pair<Double, double[]> e = list.get(i);",2,0,0,2,4,1,6,4,0,13,45,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,697,            x[i] = e.getKey();,0,0,1,2,4,0,4,0,0,9,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,698,            final double[] yValues = e.getValue();,2,0,0,2,4,1,4,0,0,7,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,699,            for (int j = 0; j < yListLen; j++) {,8,1,0,1,3,0,0,0,0,10,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,700,                yList[j][i] = yValues[j];,0,0,1,3,6,0,0,0,0,11,25,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,703,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,712,"         return copyOf(source, source.length);",0,0,0,1,2,1,0,0,0,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,722,"         return copyOf(source, source.length);",4,0,0,1,2,1,4,0,0,8,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,735,         final int[] output = new int[len];,2,0,1,2,4,1,0,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,736,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",4,0,0,2,4,0,14,0,0,18,73,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,737,         return output;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,750,         final double[] output = new double[len];,4,0,0,2,4,0,0,0,0,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,751,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",4,0,0,2,4,0,14,0,0,18,73,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,752,         return output;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,774,        final int len = a.length;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,775,        if (len != b.length) {,6,1,0,1,3,0,0,0,0,7,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,776,"            throw new DimensionMismatchException(len, b.length);",0,0,0,1,2,0,0,0,0,3,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,779,        final double[] prodHigh = new double[len];,4,0,1,2,4,1,0,0,0,8,42,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,780,        double prodLowSum = 0;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,782,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,783,            final double ai = a[i];,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,784,            final double ca = SPLIT_FACTOR * ai;,10,2,0,0,0,1,10,0,0,23,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,785,            final double aHigh = ca - (ca - ai);,14,3,0,1,2,1,0,0,0,19,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,786,            final double aLow = ai - aHigh;,6,1,0,0,0,1,0,0,0,8,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,788,            final double bi = b[i];,10,2,1,1,2,1,0,0,0,17,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,789,            final double cb = SPLIT_FACTOR * bi;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,790,            final double bHigh = cb - (cb - bi);,14,3,0,1,2,1,0,0,0,18,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,791,            final double bLow = bi - bHigh;,6,1,0,0,0,1,0,0,0,8,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,792,            prodHigh[i] = ai * bi;,0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,793,            final double prodLow = aLow * bLow - (((prodHigh[i] -,6,5,1,1,5,1,0,0,0,16,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,797,            prodLowSum += prodLow;,6,0,0,0,0,0,0,0,0,8,22,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,801,        final double prodHighCur = prodHigh[0];,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,802,        double prodHighNext = prodHigh[1];,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,803,        double sHighPrev = prodHighCur + prodHighNext;,2,0,0,0,0,0,0,0,0,2,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,804,        double sPrime = sHighPrev - prodHighNext;,14,3,0,0,0,0,0,0,0,17,41,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,805,        double sLowSum = (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);,0,0,0,3,6,0,0,0,0,9,80,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,807,        final int lenMinusOne = len - 1;,4,1,0,0,0,1,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,808,        for (int i = 1; i < lenMinusOne; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,809,            prodHighNext = prodHigh[i + 1];,4,1,1,1,2,0,0,0,0,8,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,810,            final double sHighCur = sHighPrev + prodHighNext;,6,1,0,0,0,1,0,0,0,8,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,811,            sPrime = sHighCur - prodHighNext;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,812,            sLowSum += (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);,12,4,0,3,6,0,0,0,0,17,71,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,813,            sHighPrev = sHighCur;,4,0,0,0,0,0,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,816,        double result = sHighPrev + (prodLowSum + sLowSum);,8,2,0,1,2,0,8,0,0,18,51,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,818,        if (Double.isNaN(result)) {,0,0,0,2,5,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,821,            result = 0;,6,0,0,0,0,0,0,0,0,8,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,822,            for (int i = 0; i < len; ++i) {,8,1,0,1,3,0,0,0,0,10,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,823,                result += a[i] * b[i];,2,1,1,2,4,0,0,0,0,12,22,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,827,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,866,        final double ca1        = SPLIT_FACTOR * a1;,0,0,0,0,0,0,0,0,0,0,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,867,        final double a1High     = ca1 - (ca1 - a1);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,868,        final double a1Low      = a1 - a1High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,869,        final double cb1        = SPLIT_FACTOR * b1;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,870,        final double b1High     = cb1 - (cb1 - b1);,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,871,        final double b1Low      = b1 - b1High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,874,        final double prod1High  = a1 * b1;,12,2,0,0,0,2,0,0,0,16,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,875,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,20,8,0,3,6,1,4,0,0,33,110,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,878,        final double ca2        = SPLIT_FACTOR * a2;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,879,        final double a2High     = ca2 - (ca2 - a2);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,880,        final double a2Low      = a2 - a2High;,8,2,1,0,0,1,6,0,0,27,38,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,881,        final double cb2        = SPLIT_FACTOR * b2;,0,0,0,0,0,0,0,0,0,0,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,882,        final double b2High     = cb2 - (cb2 - b2);,8,2,1,1,2,1,0,0,0,16,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,883,        final double b2Low      = b2 - b2High;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,886,        final double prod2High  = a2 * b2;,6,1,0,0,0,1,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,887,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,20,8,1,3,6,1,0,0,0,32,110,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,890,        final double s12High    = prod1High + prod2High;,6,1,0,0,0,1,0,0,0,8,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,891,        final double s12Prime   = s12High - prod2High;,0,0,0,0,0,0,0,0,0,0,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,892,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,22,6,0,3,6,1,0,0,0,30,86,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,896,        double result = s12High + (prod1Low + prod2Low + s12Low);,10,2,0,1,2,0,0,0,0,12,57,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,898,        if (Double.isNaN(result)) {,0,0,0,2,5,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,901,            result = a1 * b1 + a2 * b2;,10,3,0,0,0,0,0,0,0,14,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,904,        return result;,8,3,1,0,0,2,0,0,0,20,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,946,        final double ca1        = SPLIT_FACTOR * a1;,10,2,0,0,0,1,0,0,0,13,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,947,        final double a1High     = ca1 - (ca1 - a1);,6,1,0,1,2,0,0,0,0,7,43,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,948,        final double a1Low      = a1 - a1High;,8,1,0,0,0,1,0,0,0,10,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,949,        final double cb1        = SPLIT_FACTOR * b1;,16,4,0,0,0,1,0,0,0,23,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,950,        final double b1High     = cb1 - (cb1 - b1);,22,4,0,1,2,1,0,0,0,29,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,951,        final double b1Low      = b1 - b1High;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,954,        final double prod1High  = a1 * b1;,8,1,0,0,0,3,6,8,0,26,34,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,955,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,958,        final double ca2        = SPLIT_FACTOR * a2;,10,1,0,0,0,1,0,0,0,12,44,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,959,        final double a2High     = ca2 - (ca2 - a2);,4,0,0,1,2,0,0,2,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,960,        final double a2Low      = a2 - a2High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,961,        final double cb2        = SPLIT_FACTOR * b2;,0,0,0,0,0,0,0,0,0,0,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,962,        final double b2High     = cb2 - (cb2 - b2);,8,0,0,1,2,0,0,0,0,10,43,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,963,        final double b2Low      = b2 - b2High;,8,2,1,0,0,1,0,0,0,16,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,966,        final double prod2High  = a2 * b2;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,967,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,28,9,0,3,6,1,0,0,0,40,110,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,970,        final double ca3        = SPLIT_FACTOR * a3;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,971,        final double a3High     = ca3 - (ca3 - a3);,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,972,        final double a3Low      = a3 - a3High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,973,        final double cb3        = SPLIT_FACTOR * b3;,0,0,0,0,0,0,0,0,0,0,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,974,        final double b3High     = cb3 - (cb3 - b3);,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,975,        final double b3Low      = b3 - b3High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,978,        final double prod3High  = a3 * b3;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,979,        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,982,        final double s12High    = prod1High + prod2High;,6,1,0,0,0,1,0,0,0,8,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,983,        final double s12Prime   = s12High - prod2High;,0,0,0,0,0,0,0,0,0,0,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,984,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,12,4,0,3,6,1,8,0,0,25,86,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,987,        final double s123High   = s12High + prod3High;,18,4,0,0,0,1,0,0,0,23,46,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,988,        final double s123Prime  = s123High - prod3High;,6,1,0,0,0,1,0,0,0,8,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,989,        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);,0,0,0,3,6,0,0,0,0,9,87,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,993,        double result = s123High + (prod1Low + prod2Low + prod3Low + s12Low + s123Low);,2,1,0,1,2,0,0,0,0,3,79,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,995,        if (Double.isNaN(result)) {,6,0,0,2,5,0,6,0,0,12,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,998,            result = a1 * b1 + a2 * b2 + a3 * b3;,0,0,0,0,0,0,0,0,0,0,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1001,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1048,        final double ca1        = SPLIT_FACTOR * a1;,10,2,0,0,0,1,0,0,0,13,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1049,        final double a1High     = ca1 - (ca1 - a1);,2,1,1,1,2,0,0,0,0,8,43,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1050,        final double a1Low      = a1 - a1High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1051,        final double cb1        = SPLIT_FACTOR * b1;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1052,        final double b1High     = cb1 - (cb1 - b1);,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1053,        final double b1Low      = b1 - b1High;,8,2,0,0,0,1,6,0,0,17,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1056,        final double prod1High  = a1 * b1;,6,1,0,0,0,1,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1057,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,20,8,0,3,6,1,0,0,0,29,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1060,        final double ca2        = SPLIT_FACTOR * a2;,6,1,0,0,0,1,4,0,0,12,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1061,        final double a2High     = ca2 - (ca2 - a2);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1062,        final double a2Low      = a2 - a2High;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1063,        final double cb2        = SPLIT_FACTOR * b2;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1064,        final double b2High     = cb2 - (cb2 - b2);,18,4,0,1,2,1,0,0,0,24,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1065,        final double b2Low      = b2 - b2High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1068,        final double prod2High  = a2 * b2;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1069,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1072,        final double ca3        = SPLIT_FACTOR * a3;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1073,        final double a3High     = ca3 - (ca3 - a3);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1074,        final double a3Low      = a3 - a3High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1075,        final double cb3        = SPLIT_FACTOR * b3;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1076,        final double b3High     = cb3 - (cb3 - b3);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1077,        final double b3Low      = b3 - b3High;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1080,        final double prod3High  = a3 * b3;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1081,        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1084,        final double ca4        = SPLIT_FACTOR * a4;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1085,        final double a4High     = ca4 - (ca4 - a4);,10,3,0,1,2,1,0,0,0,14,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1086,        final double a4Low      = a4 - a4High;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1087,        final double cb4        = SPLIT_FACTOR * b4;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1088,        final double b4High     = cb4 - (cb4 - b4);,10,2,0,1,2,2,6,0,0,20,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1089,        final double b4Low      = b4 - b4High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1092,        final double prod4High  = a4 * b4;,6,1,0,0,0,1,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1093,        final double prod4Low   = a4Low * b4Low - (((prod4High - a4High * b4High) - a4Low * b4High) - a4High * b4Low);,20,8,0,3,6,1,0,0,0,29,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1096,        final double s12High    = prod1High + prod2High;,6,1,0,0,0,1,0,0,0,8,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1097,        final double s12Prime   = s12High - prod2High;,6,1,0,0,0,0,6,0,0,14,46,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1098,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,7,0,0,3,6,0,0,2,0,9,86,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1101,        final double s123High   = s12High + prod3High;,0,0,0,0,0,0,0,0,0,0,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1102,        final double s123Prime  = s123High - prod3High;,6,1,0,0,0,1,0,0,0,8,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1103,        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);,12,4,0,3,6,1,0,0,0,17,87,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1106,        final double s1234High  = s123High + prod4High;,6,1,0,0,0,1,0,0,0,8,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1107,        final double s1234Prime = s1234High - prod4High;,6,1,0,0,0,1,0,0,0,8,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1108,        final double s1234Low   = (prod4High - (s1234High - s1234Prime)) + (s123High - s1234Prime);,20,4,0,3,6,4,0,4,0,33,91,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1112,        double result = s1234High + (prod1Low + prod2Low + prod3Low + prod4Low + s12Low + s123Low + s1234Low);,18,2,0,1,2,0,0,0,0,20,102,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1114,        if (Double.isNaN(result)) {,0,0,0,2,5,0,6,0,0,6,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1117,            result = a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4;,0,0,0,0,0,0,0,0,0,0,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1120,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1134,        if ((x == null) || (y == null)) {,0,0,0,3,7,0,0,0,0,10,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1135,            return !((x == null) ^ (y == null));,4,3,0,3,6,1,0,0,0,8,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1137,        if (x.length != y.length) {,8,1,0,1,3,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1138,            return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1140,        for (int i = 0; i < x.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1141,"            if (!Precision.equals(x[i], y[i])) {",0,0,1,4,9,0,4,0,0,13,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1142,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1145,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1160,        if ((x == null) || (y == null)) {,6,1,0,3,7,0,0,0,0,7,33,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1161,            return !((x == null) ^ (y == null));,4,3,0,3,6,1,4,2,0,14,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1163,        if (x.length != y.length) {,10,1,0,1,3,0,0,0,0,11,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1164,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1166,        for (int i = 0; i < x.length; ++i) {,12,1,0,1,3,0,0,2,0,17,36,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1167,"            if (!Precision.equalsIncludingNaN(x[i], y[i])) {",0,0,1,4,9,0,4,0,0,13,48,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1168,                return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1171,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1185,        if ((x == null) || (y == null)) {,4,3,0,3,7,0,0,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1186,            return !((x == null) ^ (y == null));,8,4,1,3,6,1,0,0,0,18,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1188,        if (x.length != y.length) {,8,1,0,1,3,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1189,            return false;,4,0,0,0,0,1,0,0,0,6,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1191,        for (int i = 0; i < x.length; ++i) {,12,1,0,1,3,0,10,2,0,28,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1192,"            if (!Precision.equals(x[i], y[i])) {",0,0,1,4,9,0,4,0,0,13,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1193,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1196,        return true;,2,0,0,0,0,1,0,0,0,4,12,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1211,        if ((x == null) || (y == null)) {,6,3,0,3,7,1,0,4,0,14,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1212,            return !((x == null) ^ (y == null));,14,4,0,3,6,1,0,0,0,20,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1214,        if (x.length != y.length) {,32,10,0,1,3,0,0,0,0,43,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1215,            return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1217,        for (int i = 0; i < x.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1218,"            if (!Precision.equalsIncludingNaN(x[i], y[i])) {",0,0,0,4,9,0,0,0,0,13,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1219,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1222,        return true;,8,3,0,0,0,1,0,0,0,13,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1250,             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);,4,0,0,1,2,0,0,2,0,6,76,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1253,             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);,0,0,0,1,2,0,0,0,0,3,71,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1260,"                 throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);",16,1,1,2,4,0,0,2,0,29,94,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1267,             throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);,4,0,0,1,2,0,0,2,0,6,71,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1271,                 out[i] = Double.NaN;,4,0,1,1,2,0,0,0,0,9,20,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1290,"         T[] array = (T[]) Array.newInstance(field.getRuntimeClass(), length);",0,0,0,5,10,0,0,0,0,15,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1291,"         Arrays.fill(array, field.getZero());",0,0,0,2,4,0,10,0,0,10,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1292,         return array;,6,1,0,0,0,1,6,0,0,13,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1309,         if (columns < 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1310,"             T[] dummyRow = buildArray(field, 0);",0,0,0,2,4,0,0,0,0,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1311,"             array = (T[][]) Array.newInstance(dummyRow.getClass(), rows);",4,0,0,5,10,3,10,2,0,20,61,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1312,         } else {,6,1,0,0,2,0,0,0,0,7,8,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1313,"             array = (T[][]) Array.newInstance(field.getRuntimeClass(),",8,0,0,4,9,0,8,2,0,19,58,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1317,             for (int i = 0; i < rows; ++i) {,8,1,0,1,3,0,0,0,0,10,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1318,"                 Arrays.fill(array[i], field.getZero());",0,0,1,3,6,0,8,0,0,12,39,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1321,         return array;,4,1,0,0,0,1,0,0,0,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,8,37,    public MathInternalError() {,2,0,0,1,3,1,0,0,0,3,28,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,8,38,"        getContext().addMessage(LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",4,0,0,2,4,0,6,0,0,10,69,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,8,39,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,8,46,"        super(cause, LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",14,1,0,1,2,0,4,0,0,20,58,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,8,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,8,56,"        super(pattern, args);",4,0,1,1,2,0,0,0,0,9,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,8,57,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,8,45,                                     Object ... args) {,0,0,0,0,2,0,0,0,0,2,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,8,46,        context = new ExceptionContext(this);,12,1,0,1,2,0,0,2,0,17,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,8,47,"        context.addMessage(pattern, args);",0,0,0,1,2,0,8,0,0,8,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,8,48,    },4,2,0,0,1,1,0,0,0,7,1,7,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,8,60,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,8,61,        context = new ExceptionContext(this);,8,1,0,1,2,0,0,2,0,12,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,8,62,"        context.addMessage(pattern, args);",0,0,0,1,2,0,8,0,0,8,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,8,63,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,8,69,        this(LocalizedFormats.ILLEGAL_STATE);,4,0,0,1,2,0,0,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,8,70,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,8,74,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,8,80,        return context.getMessage();,0,0,0,1,2,1,4,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,8,86,        return context.getLocalizedMessage();,0,0,0,1,2,1,4,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,56,"        this(entry.getKey(), entry.getValue());",0,0,0,3,6,0,8,0,0,8,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,57,    },4,0,0,0,1,0,0,0,0,5,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,84,        return key;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,94,        return value;,2,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,106,        if (this == o) {,8,2,0,1,3,0,0,0,0,11,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,107,            return true;,0,0,0,0,0,1,0,0,0,1,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,109,        if (!(o instanceof Pair)) {,6,0,1,2,5,0,0,2,0,15,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,110,            return false;,2,0,0,0,0,2,0,0,0,4,13,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,112,"            Pair<?, ?> oP = (Pair<?, ?>) o;",4,0,0,1,2,0,0,4,0,8,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,113,            return (key == null ?,2,1,0,0,1,1,0,0,0,3,21,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,129,        int result = key == null ? 0 : key.hashCode();,4,1,0,1,2,0,4,0,0,9,46,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,131,        final int h = value == null ? 0 : value.hashCode();,4,1,0,1,2,1,4,0,0,10,51,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,132,        result = 37 * result + h ^ (h >>> 16);,8,4,1,1,2,0,0,0,0,18,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,134,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,8,44,"        super(specific, wrong, expected);",0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,8,45,        dimension = expected;,4,0,0,0,0,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,8,46,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,8,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);",0,0,0,1,2,0,0,0,0,3,67,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,8,57,    },12,2,1,0,1,0,4,0,0,21,1,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,8,63,        return dimension;,4,1,0,0,0,1,0,0,0,6,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,8,46,"        super(pattern, wrong, arguments);",16,1,0,1,2,0,0,0,0,18,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,8,47,        argument = wrong;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,8,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,8,54,        return argument;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,8,44,                                        Object ... args) {,0,0,0,0,2,0,0,0,0,2,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,8,45,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,8,46,"        context.addMessage(pattern, args);",0,0,0,1,2,0,8,0,0,8,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,8,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,8,51,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,8,57,        return context.getMessage();,0,0,0,1,2,1,4,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,8,63,        return context.getLocalizedMessage();,0,0,0,1,2,1,0,0,0,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,8,43,    public MathArithmeticException() {,0,0,0,1,3,0,0,0,0,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,8,44,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,8,45,        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,4,0,0,1,2,0,4,0,0,8,58,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,8,46,    },6,0,0,0,1,0,4,2,0,12,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,8,56,                                   Object ... args) {,0,0,0,0,2,0,0,0,0,2,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,8,57,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,8,58,"        context.addMessage(pattern, args);",0,0,0,1,2,0,8,0,0,8,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,8,59,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,8,63,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,8,69,        return context.getMessage();,2,0,0,1,2,2,10,0,0,13,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,8,75,        return context.getLocalizedMessage();,0,0,0,1,2,1,4,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,8,37,"        super(value, 0, true);",0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,8,38,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,8,47,"        super(specific, value, 0, true);",4,0,0,1,2,0,0,0,0,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,8,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,8,50,        this(boundIsAllowed ?,0,0,0,0,1,0,0,0,0,1,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,8,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,8,68,"        super(specific, wrong, min);",6,0,0,1,2,0,0,0,0,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,8,70,        this.min = min;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,8,71,        this.boundIsAllowed = boundIsAllowed;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,8,72,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,8,78,        return boundIsAllowed;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,8,85,        return min;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,8,38,"        super(value, 0, false);",2,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,8,39,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,8,48,"        super(specific, value, 0, false);",4,0,0,1,2,0,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,8,49,    },6,1,0,0,1,0,0,0,0,8,1,10,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,8,61,"        this(wrong, previous, index, MathArrays.OrderDirection.INCREASING, true);",0,0,0,1,2,0,0,0,0,3,73,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,8,62,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,8,80,        super(direction == MathArrays.OrderDirection.INCREASING ?,8,1,0,0,1,0,0,0,0,9,57,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,8,89,        this.direction = direction;,4,0,0,0,0,0,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,8,90,        this.strict = strict;,4,0,0,0,0,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,8,91,        this.index = index;,4,0,0,0,0,0,8,0,0,13,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,8,92,        this.previous = previous;,6,0,0,0,0,0,6,0,0,13,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,8,93,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,8,99,        return direction;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,8,105,        return strict;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,8,113,        return index;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,8,119,        return previous;,0,0,0,0,0,1,0,0,0,1,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,8,41,        this(LocalizedFormats.NULL_NOT_ALLOWED);,0,0,0,1,2,0,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,8,42,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,8,50,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,8,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,260,    public static enum OrderDirection {,0,0,0,0,1,0,0,0,0,1,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,262,"        INCREASING,",8,1,0,0,0,0,0,0,0,10,11,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,264,        DECREASING,2,0,0,0,0,0,2,0,0,4,10,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,283,            switch (dir) {,2,0,0,1,3,0,0,0,0,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,69,"        this(new Well19937c(), samples);",0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,70,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,96,                throw new NotPositiveException(sample.getValue());,0,0,0,2,4,0,4,2,0,6,50,9,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,110,        random.setSeed(seed);,0,0,0,1,2,0,6,0,0,6,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,111,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,123,        double probability = 0;,2,0,0,0,0,0,0,0,0,2,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,125,        for (int i = 0; i < probabilities.length; i++) {,10,1,0,1,3,0,0,0,0,12,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,126,            if ((x == null && singletons.get(i) == null) ||,2,4,0,2,5,0,6,0,0,12,47,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,128,                probability += probabilities[i];,2,2,1,1,2,0,20,0,0,29,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,132,        return probability;,2,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,142,"        final List<Pair<T, Double>> samples = new ArrayList<Pair<T, Double>>(probabilities.length);",0,0,0,1,2,0,0,0,0,3,91,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,144,        for (int i = 0; i < probabilities.length; i++) {,2,0,1,1,3,0,0,0,0,5,48,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,145,"            samples.add(new Pair<T, Double>(singletons.get(i), probabilities[i]));",12,2,1,4,8,1,16,6,0,42,70,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,148,        return samples;,2,0,1,0,0,1,0,0,0,5,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,170,        return singletons.get(singletons.size() - 1);,0,1,0,2,4,1,16,0,0,17,45,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,182,        if (sampleSize <= 0) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,183,"            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,",0,0,0,0,1,0,0,0,0,1,74,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,187,"        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);",0,0,0,6,12,0,0,0,0,18,99,4,0.0,1,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,189,        for (int i = 0; i < sampleSize; i++) {,8,1,0,1,3,0,0,0,0,10,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,190,            out[i] = sample();,2,0,1,2,4,0,2,0,0,14,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,193,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,89,"            throw new DimensionMismatchException(probabilities.length, singletons.length);",8,0,0,1,2,0,0,2,0,10,78,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,106,        return innerDistribution.probability(x);,0,0,0,1,2,1,6,0,0,6,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,119,        return probability(x);,0,0,0,1,2,1,4,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,126,        double probability = 0;,2,0,0,0,0,0,0,0,0,2,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,128,"        for (final Pair<Double, Double> sample : innerDistribution.getSamples()) {",2,0,1,2,5,1,4,6,0,16,74,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,129,            if (sample.getKey() <= x) {,6,2,1,2,5,1,4,0,0,17,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,130,                probability += sample.getValue();,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,132,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,134,        return probability;,2,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,143,        double mean = 0;,22,9,0,0,0,0,0,0,0,32,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,145,"        for (final Pair<Double, Double> sample : innerDistribution.getSamples()) {",2,0,0,2,5,1,4,6,0,13,74,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,146,            mean += sample.getValue() * sample.getKey();,0,0,0,2,4,0,0,0,0,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,147,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,149,        return mean;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,158,        double mean = 0;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,159,        double meanOfSquares = 0;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,161,"        for (final Pair<Double, Double> sample : innerDistribution.getSamples()) {",0,0,0,2,5,0,0,0,0,7,74,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,162,            mean += sample.getValue() * sample.getKey();,0,0,0,2,4,0,0,0,0,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,163,            meanOfSquares += sample.getValue() * sample.getKey() * sample.getKey();,2,1,0,3,6,0,12,0,0,16,71,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,164,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,166,        return meanOfSquares - mean * mean;,6,2,0,0,0,1,0,0,0,8,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,177,        double min = Double.POSITIVE_INFINITY;,6,0,0,0,0,0,0,0,0,6,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,178,"        for (final Pair<Double, Double> sample : innerDistribution.getSamples()) {",2,0,0,2,5,1,4,6,0,13,74,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,179,            if (sample.getKey() < min && sample.getValue() > 0) {,2,3,0,3,7,0,8,0,0,13,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,180,                min = sample.getKey();,0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,182,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,184,        return min;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,195,        double max = Double.NEGATIVE_INFINITY;,8,1,0,0,0,0,8,0,0,17,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,196,"        for (final Pair<Double, Double> sample : innerDistribution.getSamples()) {",4,0,0,2,5,1,4,6,0,16,74,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,197,            if (sample.getKey() > max && sample.getValue() > 0) {,10,2,0,3,7,0,0,0,0,13,53,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,198,                max = sample.getKey();,2,0,0,1,2,0,4,0,0,7,22,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,200,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,202,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,213,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,224,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,235,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,243,        return innerDistribution.sample();,0,0,0,1,2,1,0,0,0,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,67,    protected AbstractRealDistribution() {,2,0,0,1,3,1,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,70,        random = null;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,71,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,91,"        return probability(x0, x1);",0,0,0,1,2,1,6,0,0,6,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,112,        if (x0 > x1) {,4,1,0,1,3,0,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,113,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT,",6,0,0,0,1,0,0,2,0,9,89,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,116,        return cumulativeProbability(x1) - cumulativeProbability(x0);,0,1,0,2,4,1,8,0,0,9,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,157,        if (p < 0.0 || p > 1.0) {,4,3,0,1,3,0,0,0,0,7,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,158,"            throw new OutOfRangeException(p, 0, 1);",2,0,0,1,2,0,0,2,0,4,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,161,        double lowerBound = getSupportLowerBound();,2,0,0,1,2,0,2,0,0,4,43,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,162,        if (p == 0.0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,163,            return lowerBound;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,166,        double upperBound = getSupportUpperBound();,2,0,0,1,2,0,2,0,0,4,43,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,167,        if (p == 1.0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,168,            return upperBound;,4,0,0,0,0,1,0,0,0,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,171,        final double mu = getNumericalMean();,6,1,0,1,2,1,2,0,0,12,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,172,        final double sig = FastMath.sqrt(getNumericalVariance());,0,0,0,2,4,0,0,0,0,6,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,174,        chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||,2,1,0,2,5,0,12,0,0,17,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,177,        if (lowerBound == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,178,            if (chebyshevApplies) {,0,0,0,1,3,0,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,179,                lowerBound = mu - sig * FastMath.sqrt((1. - p) / p);,10,4,0,2,4,0,4,0,0,19,52,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,181,                lowerBound = -1.0;,2,0,1,0,0,0,0,0,0,7,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,182,                while (cumulativeProbability(lowerBound) >= p) {,0,0,0,2,5,0,0,0,0,7,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,183,                    lowerBound *= 2.0;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,188,        if (upperBound == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,189,            if (chebyshevApplies) {,2,0,0,1,3,0,0,0,0,2,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,190,                upperBound = mu + sig * FastMath.sqrt(p / (1. - p));,10,4,0,2,4,0,4,0,0,19,52,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,192,                upperBound = 1.0;,2,0,0,0,0,0,0,0,0,3,17,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,193,                while (cumulativeProbability(upperBound) < p) {,2,1,0,2,5,0,4,0,0,7,47,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,194,                    upperBound *= 2.0;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,199,        final UnivariateFunction toSolve = new UnivariateFunction() {,0,0,0,1,3,0,0,0,0,4,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,206,"        double x = UnivariateSolverUtils.solve(toSolve,",8,1,0,0,1,0,6,0,0,15,47,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,211,        if (!isSupportConnected()) {,0,0,0,2,5,0,2,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,213,            final double dx = getSolverAbsoluteAccuracy();,0,0,0,1,2,0,0,0,0,3,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,214,            if (x - dx >= getSupportLowerBound()) {,4,2,0,2,5,0,2,0,0,8,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,215,                double px = cumulativeProbability(x);,4,0,0,1,2,0,4,0,0,9,37,0,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,216,                if (cumulativeProbability(x - dx) == px) {,8,1,0,2,5,0,0,0,0,11,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,217,                    upperBound = x;,4,0,0,0,0,0,0,0,0,5,15,10,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,218,                    while (upperBound - lowerBound > dx) {,6,2,0,1,3,0,0,0,0,8,38,10,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,219,                        final double midPoint = 0.5 * (lowerBound + upperBound);,6,2,0,1,2,1,0,0,0,9,56,12,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,220,                        if (cumulativeProbability(midPoint) < px) {,2,1,0,2,5,0,4,0,0,7,43,12,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,221,                            lowerBound = midPoint;,6,0,0,0,0,0,0,0,0,7,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,223,                            upperBound = midPoint;,4,0,0,0,0,0,0,0,0,5,22,14,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,225,                    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,226,                    return upperBound;,2,1,1,0,0,1,0,0,0,8,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,230,        return x;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,241,        return solverAbsoluteAccuracy;,2,0,0,0,0,1,0,2,0,4,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,246,        random.setSeed(seed);,0,0,0,1,2,0,16,0,0,16,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,247,        randomData.reSeed(seed);,0,0,0,1,2,0,6,0,0,6,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,248,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,259,        return inverseCumulativeProbability(random.nextDouble());,0,0,0,2,4,1,0,0,0,7,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,269,        if (sampleSize <= 0) {,16,6,0,1,3,0,0,0,0,22,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,270,"            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,",0,0,0,0,1,0,0,0,0,1,74,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,273,        double[] out = new double[sampleSize];,2,0,1,2,4,0,0,0,0,4,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,274,        for (int i = 0; i < sampleSize; i++) {,8,1,0,1,3,0,0,0,0,10,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,275,            out[i] = sample();,0,0,1,2,4,0,2,0,0,7,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,277,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,287,        return 0d;,0,0,0,0,0,1,0,0,0,1,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,8,50,        this(boundIsAllowed ?,2,0,0,0,1,0,0,0,0,2,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,8,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,8,67,"        super(specific, wrong, max);",6,0,0,1,2,0,0,0,0,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,8,69,        this.max = max;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,8,70,        this.boundIsAllowed = boundIsAllowed;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,8,71,    },0,0,0,0,1,0,4,0,0,4,1,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,8,77,        return boundIsAllowed;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,8,84,        return max;,2,0,0,0,0,1,0,0,0,2,11,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,8,46,"        this(LocalizedFormats.OUT_OF_RANGE_SIMPLE, wrong, lo, hi);",10,0,0,1,2,0,0,0,0,10,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,8,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,8,62,"        super(specific, wrong, lo, hi);",8,0,0,1,2,0,0,0,0,8,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,8,63,        this.lo = lo;,4,0,0,0,0,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,8,64,        this.hi = hi;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,8,65,    },6,1,0,0,1,0,0,0,0,8,1,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,8,71,        return lo;,4,0,0,0,0,4,6,0,0,13,10,1,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,8,77,        return hi;,2,0,0,0,0,1,0,0,0,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,199,        final UnivariateFunction toSolve = new UnivariateFunction() {,2,0,0,1,3,1,0,4,0,7,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,202,                return cumulativeProbability(x) - p;,2,1,0,1,2,1,4,0,0,7,36,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,64,"        super(K, M1, M2, M3, seed);",10,0,0,1,2,0,0,0,0,10,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,65,    },2,0,0,0,1,0,0,0,0,3,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,72,"        super(K, M1, M2, M3, seed);",10,0,0,1,2,0,0,0,0,10,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,73,    },2,2,0,0,1,0,0,0,0,4,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,79,"        super(K, M1, M2, M3, seed);",10,0,0,1,2,0,0,0,0,10,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,80,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,83,"        this(k, m1, m2, m3, new int[] { seed });",10,0,0,3,6,0,0,0,0,10,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,84,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,132,"        this(k, m1, m2, m3, new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",6,1,0,7,14,3,4,0,0,14,83,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,133,    },6,1,0,0,1,0,0,0,0,8,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,142,        setSeed(new int[] { seed });,0,0,0,3,6,0,0,0,0,9,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,143,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,66,        return next(1) != 0;,0,1,0,1,2,1,2,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,71,        int i = 0;,4,1,0,0,0,0,0,0,0,5,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,72,        final int iEnd = bytes.length - 3;,6,1,0,0,0,1,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,73,        while (i < iEnd) {,4,1,0,1,3,0,0,0,0,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,74,            final int random = next(32);,2,0,0,1,2,1,2,0,0,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,75,            bytes[i]     = (byte) (random & 0xff);,2,1,1,3,6,0,0,0,0,8,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,76,            bytes[i + 1] = (byte) ((random >>  8) & 0xff);,6,4,1,4,8,0,0,0,0,14,46,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,77,            bytes[i + 2] = (byte) ((random >> 16) & 0xff);,0,0,0,4,8,0,0,0,0,12,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,78,            bytes[i + 3] = (byte) ((random >> 24) & 0xff);,4,3,1,4,8,0,0,0,0,10,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,79,            i += 4;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,80,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,81,        int random = next(32);,8,1,1,1,2,0,2,0,0,15,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,82,        while (i < bytes.length) {,6,1,0,1,3,0,0,0,0,7,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,83,            bytes[i++] = (byte) (random & 0xff);,4,1,1,3,6,0,0,0,0,9,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,84,            random     = random >> 8;,4,1,0,0,0,0,0,0,0,5,25,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,86,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,97,        return next(23) * 0x1.0p-23f;,0,1,0,1,2,1,2,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,104,        if (Double.isNaN(nextGaussian)) {,0,0,0,2,5,0,6,0,0,6,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,106,            final double x = nextDouble();,2,0,0,1,2,1,2,0,0,5,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,107,            final double y = nextDouble();,2,0,0,1,2,1,2,0,0,5,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,108,            final double alpha = 2 * FastMath.PI * x;,0,0,0,0,0,0,0,0,0,0,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,109,            final double r      = FastMath.sqrt(-2 * FastMath.log(y));,2,1,0,2,4,1,10,0,0,15,58,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,110,            random       = r * FastMath.cos(alpha);,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,111,            nextGaussian = r * FastMath.sin(alpha);,4,1,0,1,2,0,6,0,0,12,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,112,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,114,            random = nextGaussian;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,115,            nextGaussian = Double.NaN;,8,0,0,0,0,0,0,0,0,9,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,118,        return random;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,124,        return next(32);,0,0,0,1,2,1,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,143,        if (n > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,144,            if ((n & -n) == n) {,6,2,1,2,5,0,8,0,0,20,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,145,                return (int) ((n * (long) next(31)) >> 31);,2,2,0,5,10,1,2,0,0,6,43,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,150,                bits = next(31);,2,0,0,1,2,0,2,0,0,5,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,151,                val = bits % n;,6,1,0,0,0,0,0,0,0,8,15,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,152,            } while (bits - val + (n - 1) < 0);,0,0,0,2,5,0,0,0,0,7,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,153,            return val;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,155,        throw new NotStrictlyPositiveException(n);,12,1,0,1,2,0,0,2,0,16,42,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,160,        final long high  = ((long) next(32)) << 32;,4,1,0,3,6,2,2,0,0,9,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,161,        final long  low  = ((long) next(32)) & 0xffffffffL;,2,1,0,3,6,1,2,0,0,6,51,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,162,        return high | low;,4,1,0,0,0,1,0,0,0,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,141,    public RandomDataGenerator(RandomGenerator rand) {,4,0,0,1,3,1,0,2,0,7,50,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,142,        this.rand = rand;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,143,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,162,        if (len <= 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,163,"            throw new NotStrictlyPositiveException(LocalizedFormats.LENGTH, len);",0,0,0,1,2,0,0,0,0,3,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,167,        RandomGenerator ran = getRan();,0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,170,        StringBuilder outBuffer = new StringBuilder();,6,2,0,1,2,0,0,4,0,12,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,173,        byte[] randomBytes = new byte[(len / 2) + 1];,4,2,0,3,6,0,0,0,0,6,45,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,174,        ran.nextBytes(randomBytes);,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,177,        for (int i = 0; i < randomBytes.length; i++) {,18,3,0,1,3,0,0,0,0,23,46,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,178,            Integer c = Integer.valueOf(randomBytes[i]);,2,0,1,2,4,0,4,2,0,12,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,185,            String hex = Integer.toHexString(c.intValue() + 128);,2,1,0,2,4,0,8,2,0,13,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,188,            if (hex.length() == 1) {,0,1,0,2,5,0,4,0,0,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,189,"                hex = ""0"" + hex;",4,1,0,0,0,0,0,0,0,7,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,191,            outBuffer.append(hex);,0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,193,"        return outBuffer.toString().substring(0, len);",0,0,0,2,4,1,8,0,0,8,46,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,198,        if (lower >= upper) {,4,1,0,1,3,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,199,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",12,3,0,0,1,0,14,2,0,32,87,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,202,        double r = getRan().nextDouble();,2,0,0,2,4,0,4,0,0,6,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,203,        double scaled = r * upper + (1.0 - r) * lower + r;,6,1,0,1,2,1,0,0,0,8,50,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,204,        return (int) FastMath.floor(scaled);,0,0,0,2,4,1,6,0,0,6,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,209,        if (lower >= upper) {,4,1,0,1,3,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,210,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",4,0,0,0,1,0,0,2,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,213,        double r = getRan().nextDouble();,2,0,0,2,4,0,4,0,0,6,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,214,        double scaled = r * upper + (1.0 - r) * lower + r;,12,5,0,1,2,0,0,0,0,17,50,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,215,        return (long)FastMath.floor(scaled);,4,1,0,2,4,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,236,        if (len <= 0) {,0,0,0,1,3,0,0,2,0,2,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,237,"            throw new NotStrictlyPositiveException(LocalizedFormats.LENGTH, len);",6,0,0,1,2,0,0,2,0,8,69,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,241,        SecureRandom secRan = getSecRan();,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,242,        MessageDigest alg = null;,2,0,0,0,0,0,0,2,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,244,"            alg = MessageDigest.getInstance(""SHA-1"");",0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,248,        },2,0,0,0,1,0,0,0,0,2,1,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,245,        } catch (NoSuchAlgorithmException ex) {,0,0,0,1,4,0,0,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,247,            throw new MathInternalError(ex);,2,0,0,1,2,0,0,2,0,4,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,249,        alg.reset();,0,0,0,1,2,0,4,0,0,4,12,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,252,        int numIter = (len / 40) + 1;,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,254,        StringBuilder outBuffer = new StringBuilder();,2,0,0,1,2,0,8,4,0,14,46,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,255,        for (int iter = 1; iter < numIter + 1; iter++) {,8,2,0,1,3,0,0,0,0,11,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,256,            byte[] randomBytes = new byte[40];,2,0,0,2,4,0,0,0,0,2,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,257,            secRan.nextBytes(randomBytes);,14,1,0,1,2,1,14,4,0,36,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,258,            alg.update(randomBytes);,2,0,0,1,2,1,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,261,            byte[] hash = alg.digest();,6,0,0,2,4,0,4,0,0,10,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,264,            for (int i = 0; i < hash.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,265,                Integer c = Integer.valueOf(hash[i]);,0,0,0,2,4,0,0,0,0,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,272,                String hex = Integer.toHexString(c.intValue() + 128);,0,1,0,2,4,0,4,0,0,5,53,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,275,                if (hex.length() == 1) {,2,1,0,2,5,0,4,2,0,9,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,276,"                    hex = ""0"" + hex;",4,1,0,0,0,0,0,0,0,7,16,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,278,                outBuffer.append(hex);,0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,281,"        return outBuffer.toString().substring(0, len);",0,0,0,2,4,1,0,0,0,7,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,286,        if (lower >= upper) {,4,1,0,1,3,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,287,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",4,0,0,0,1,0,0,2,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,290,        SecureRandom sec = getSecRan();,2,0,0,1,2,0,2,2,0,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,291,        final double r = sec.nextDouble();,2,0,0,1,2,1,4,0,0,7,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,292,        final double scaled = r * upper + (1.0 - r) * lower + r;,12,5,0,1,2,1,0,0,0,18,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,293,        return (int)FastMath.floor(scaled);,0,0,0,2,4,1,0,0,0,7,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,298,        if (lower >= upper) {,6,1,0,1,3,0,0,0,0,9,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,299,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",4,0,0,0,1,0,0,2,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,302,        SecureRandom sec = getSecRan();,2,0,0,1,2,0,2,2,0,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,303,        final double r = sec.nextDouble();,8,1,0,1,2,1,4,0,0,15,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,304,        final double scaled = r * upper + (1.0 - r) * lower + r;,0,0,0,1,2,0,0,0,0,3,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,305,        return (long)FastMath.floor(scaled);,6,0,0,2,4,2,6,4,0,17,36,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,323,"        return new PoissonDistribution(getRan(), mean,",6,0,0,1,3,1,2,2,0,10,46,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,330,        if (sigma <= 0) {,4,1,0,1,3,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,331,"            throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sigma);",6,0,0,1,2,0,0,2,0,8,83,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,333,        return sigma * getRan().nextGaussian() + mu;,16,4,0,2,4,1,4,0,0,24,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,348,"        return new ExponentialDistribution(getRan(), mean,",2,0,0,1,3,1,2,2,0,6,50,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,375,"        return new GammaDistribution(getRan(),shape, scale,",0,0,0,1,3,1,0,0,0,5,51,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,392,"        return new HypergeometricDistribution(getRan(),populationSize,",2,0,0,1,3,1,2,2,0,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,407,"        return new PascalDistribution(getRan(), r, p).sample();",10,1,0,3,6,1,4,2,0,18,55,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,418,"        return new TDistribution(getRan(), df,",4,0,0,1,3,1,2,4,0,10,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,432,"        return new WeibullDistribution(getRan(), shape, scale,",4,0,0,1,3,1,2,2,0,8,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,446,"        return new ZipfDistribution(getRan(), numberOfElements, exponent).sample();",4,0,0,3,6,1,4,2,0,10,75,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,457,"        return new BetaDistribution(getRan(), alpha, beta,",4,3,1,1,3,1,2,2,0,19,50,1,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,469,"        return new BinomialDistribution(getRan(), numberOfTrials, probabilityOfSuccess).sample();",4,0,0,3,6,1,4,2,0,10,89,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,480,"        return new CauchyDistribution(getRan(), median, scale,",0,0,0,1,3,1,0,0,0,5,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,491,"        return new ChiSquaredDistribution(getRan(), df,",0,0,0,1,3,1,0,0,0,5,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,505,"        return new FDistribution(getRan(), numeratorDf, denominatorDf,",6,2,1,1,3,1,2,2,0,21,62,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,524,"        return nextUniform(lower, upper, false);",6,4,0,1,2,1,6,0,0,17,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,545,        if (lower >= upper) {,6,1,0,1,3,0,0,0,0,7,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,546,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",4,0,0,0,1,0,0,2,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,550,        if (Double.isInfinite(lower)) {,0,0,0,2,5,0,6,0,0,6,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,551,"            throw new NotFiniteNumberException(LocalizedFormats.INFINITE_BOUND, lower);",6,0,0,1,2,0,0,2,0,8,75,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,553,        if (Double.isInfinite(upper)) {,0,0,0,2,5,0,6,0,0,6,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,554,"            throw new NotFiniteNumberException(LocalizedFormats.INFINITE_BOUND, upper);",6,0,0,1,2,0,0,2,0,8,75,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,557,        if (Double.isNaN(lower) || Double.isNaN(upper)) {,0,0,0,3,7,0,0,0,0,10,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,558,            throw new NotANumberException();,0,0,0,1,2,0,0,2,0,2,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,561,        final RandomGenerator generator = getRan();,2,0,0,1,2,1,2,2,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,564,        double u = generator.nextDouble();,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,565,        while (!lowerInclusive && u <= 0.0) {,4,2,0,1,3,0,0,0,0,7,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,566,            u = generator.nextDouble();,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,569,        return u * upper + (1.0 - u) * lower;,8,4,0,1,2,1,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,585,        if (k > n) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,586,"            throw new NumberIsTooLargeException(LocalizedFormats.PERMUTATION_EXCEEDS_N,",4,0,0,0,1,0,0,2,0,6,75,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,589,        if (k <= 0) {,8,5,0,1,3,0,0,0,0,13,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,590,"            throw new NotStrictlyPositiveException(LocalizedFormats.PERMUTATION_SIZE,",4,0,0,0,1,0,0,2,0,6,73,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,594,        int[] index = getNatural(n);,2,0,0,2,4,0,4,0,0,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,595,"        shuffle(index, n - k);",14,2,0,1,2,0,4,0,0,22,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,596,        int[] result = new int[k];,2,0,1,2,4,0,0,0,0,4,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,597,        for (int i = 0; i < k; i++) {,12,1,0,1,3,0,0,0,0,15,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,598,            result[i] = index[n - i - 1];,12,3,1,2,4,0,0,0,0,23,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,601,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,619,        int len = c.size();,2,0,0,1,2,0,4,0,0,6,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,620,        if (k > len) {,14,2,0,1,3,0,0,0,0,17,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,621,"            throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE,",4,0,0,0,1,0,0,2,0,6,89,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,624,        if (k <= 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,625,"            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, k);",0,0,0,1,2,0,0,0,0,3,78,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,628,        Object[] objects = c.toArray();,2,0,0,2,4,0,4,2,0,8,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,629,"        int[] index = nextPermutation(len, k);",6,0,1,2,4,0,8,2,0,18,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,630,        Object[] result = new Object[k];,8,0,1,2,4,0,0,6,0,16,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,631,        for (int i = 0; i < k; i++) {,8,1,0,1,3,0,0,0,0,10,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,632,            result[i] = objects[index[i]];,0,0,1,3,6,0,0,0,0,11,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,634,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,648,       getRan().setSeed(seed);,0,0,0,2,4,0,6,0,0,6,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,649,    },2,1,0,0,1,0,0,0,0,3,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,659,        getSecRan().setSeed(System.currentTimeMillis());,0,0,0,3,6,0,0,0,0,9,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,660,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,671,        getSecRan().setSeed(seed);,0,0,0,2,4,0,6,0,0,6,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,672,    },8,2,0,0,1,0,0,0,0,10,1,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,679,        getRan().setSeed(System.currentTimeMillis() + System.identityHashCode(this));,6,2,0,4,8,0,12,0,0,20,77,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,680,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,700,"        secRand = SecureRandom.getInstance(algorithm, provider);",0,0,0,1,2,0,0,0,0,3,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,701,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,714,        if (rand == null) {,4,1,0,1,3,1,0,0,0,6,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,715,            initRan();,0,0,0,1,2,0,2,0,0,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,717,        return rand;,12,1,0,0,0,2,0,0,0,15,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,725,        rand = new Well19937c(System.currentTimeMillis() + System.identityHashCode(this));,2,1,0,3,6,0,8,2,0,14,82,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,726,    },6,0,0,0,1,0,0,2,0,8,1,11,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,738,        if (secRand == null) {,8,0,0,1,3,0,0,0,0,8,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,739,            secRand = new SecureRandom();,2,0,0,1,2,0,0,2,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,740,            secRand.setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0,1,0,3,6,0,12,0,0,13,76,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,742,        return secRand;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,753,        int target = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,754,        for (int i = list.length - 1; i >= end; i--) {,12,2,0,1,3,0,0,0,0,15,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,755,            if (i == 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,756,                target = 0;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,759,"                target = nextInt(0, i);",4,1,0,1,2,0,8,0,0,14,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,761,            int temp = list[target];,2,0,1,1,2,0,0,0,0,6,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,762,            list[target] = list[i];,0,0,1,2,4,0,0,0,0,9,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,763,            list[i] = temp;,2,0,1,1,2,0,0,0,0,7,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,765,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,774,        int[] natural = new int[n];,2,0,1,2,4,0,0,0,0,4,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,775,        for (int i = 0; i < n; i++) {,8,1,0,1,3,0,0,0,0,10,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,776,            natural[i] = i;,2,0,1,1,2,0,0,0,0,7,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,778,        return natural;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotFiniteNumberException,8,40,"        this(LocalizedFormats.NOT_FINITE_NUMBER, wrong, args);",0,0,0,1,2,0,0,0,0,3,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotFiniteNumberException,8,41,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotFiniteNumberException,8,53,"        super(specific, wrong, args);",6,0,0,1,2,0,0,0,0,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotFiniteNumberException,8,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotANumberException,8,35,"        super(LocalizedFormats.NAN_NOT_ALLOWED, Double.NaN);",0,0,0,1,2,0,0,0,0,3,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotANumberException,8,36,    },8,1,0,0,1,0,0,0,0,10,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,126,    public RandomDataImpl(RandomGenerator rand) {,4,0,0,1,3,1,0,2,0,7,45,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,127,        delegate = new RandomDataGenerator(rand);,6,0,0,1,2,0,6,4,0,17,41,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,128,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,136,        return delegate;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,156,        return delegate.nextHexString(len);,0,0,0,1,2,1,6,0,0,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,161,"       return delegate.nextInt(lower, upper);",6,1,0,1,2,1,8,0,0,16,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,166,"        return delegate.nextLong(lower, upper);",3,1,1,1,2,1,8,0,0,14,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,186,        return delegate.nextSecureHexString(len);,0,0,0,1,2,1,6,0,0,6,41,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,191,"        return delegate.nextSecureInt(lower, upper);",0,0,0,1,2,1,8,0,0,8,44,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,196,"        return delegate.nextSecureLong(lower,upper);",0,0,0,1,2,1,8,0,0,8,44,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,213,        return delegate.nextPoisson(mean);,0,0,0,1,2,1,0,0,0,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,218,"        return delegate.nextGaussian(mu,sigma);",0,0,0,1,2,1,8,0,0,8,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,233,        return delegate.nextExponential(mean);,0,0,0,1,2,1,6,0,0,6,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,248,"        return delegate.nextUniform(lower, upper);",0,0,0,1,2,1,0,0,0,4,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,265,"        return delegate.nextUniform(lower, upper, lowerInclusive);",0,0,0,1,2,1,10,2,0,12,58,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,279,"        return delegate.nextBeta(alpha, beta);",0,0,0,1,2,1,8,0,0,8,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,293,"        return delegate.nextBinomial(numberOfTrials, probabilityOfSuccess);",22,6,1,1,2,4,2,2,0,38,67,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,307,"        return delegate.nextCauchy(median, scale);",0,0,0,1,2,1,0,0,0,4,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,320,       return delegate.nextChiSquare(df);,0,0,0,1,2,1,6,0,0,6,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,336,"        return delegate.nextF(numeratorDf, denominatorDf);",0,0,0,1,2,1,8,0,0,8,50,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,363,"        return delegate.nextGamma(shape, scale);",0,0,0,1,2,1,8,0,0,8,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,383,"        return delegate.nextHypergeometric(populationSize, numberOfSuccesses, sampleSize);",0,0,0,1,2,1,0,0,0,4,82,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,401,"        return delegate.nextPascal(r, p);",0,0,0,1,2,1,8,0,0,8,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,415,        return delegate.nextT(df);,0,0,0,1,2,1,6,0,0,6,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,431,"        return delegate.nextWeibull(shape, scale);",0,0,0,1,2,1,8,0,0,8,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,447,"        return delegate.nextZipf(numberOfElements, exponent);",0,0,0,1,2,1,8,0,0,8,53,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,461,        delegate.reSeed(seed);,0,0,0,1,2,0,6,0,0,6,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,462,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,472,        delegate.reSeedSecure();,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,473,    },4,0,0,0,1,0,0,0,0,4,1,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,485,        delegate.reSeedSecure(seed);,2,1,1,1,2,0,6,0,0,12,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,486,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,493,        delegate.reSeed();,0,0,1,1,2,0,4,0,0,11,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,494,    },4,1,0,0,1,0,0,0,0,5,1,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,518,"       delegate.setSecureAlgorithm(algorithm, provider);",0,0,0,1,2,0,0,0,0,3,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,519,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,532,"        return delegate.nextPermutation(n, k);",0,0,0,1,2,1,8,0,0,8,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,550,"        return delegate.nextSample(c, k);",0,0,0,1,2,1,8,0,0,8,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,565,"        return distribution.inverseCumulativeProbability(nextUniform(0, 1));",0,0,0,2,4,1,6,0,0,6,68,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,581,"        return distribution.inverseCumulativeProbability(nextUniform(0, 1));",0,0,0,2,4,1,6,0,0,6,68,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,95,        return direction;,4,0,0,0,0,1,0,0,0,5,17,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,54,"    public Line(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException {",8,0,0,1,3,3,0,4,0,15,87,2,0.03846,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,55,"        reset(p1, p2);",0,0,0,1,2,0,6,0,0,6,14,5,0.03846,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,56,    },4,1,0,0,1,0,0,0,0,5,1,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,74,        final Vector3D delta = p2.subtract(p1);,2,0,0,1,2,1,6,2,0,11,39,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,75,        final double norm2 = delta.getNormSq();,2,0,0,1,2,1,4,0,0,7,39,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,76,        if (norm2 == 0.0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,79,"        this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta);",4,1,0,2,4,0,6,2,0,14,65,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,80,"        zero = new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta);",8,1,0,2,4,0,6,2,0,19,67,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,81,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,249,        return x * x + y * y + z * z;,12,5,0,0,0,1,0,0,0,17,29,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,151,"    public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2) {",0,0,0,1,3,0,0,0,0,4,65,4,0.03571,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,152,"        this.x = MathArrays.linearCombination(a1, u1.x, a2, u2.x);",0,0,0,1,2,0,0,0,0,3,58,4,0.03571,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,153,"        this.y = MathArrays.linearCombination(a1, u1.y, a2, u2.y);",10,0,0,1,2,0,8,0,0,19,58,4,0.03571,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,154,"        this.z = MathArrays.linearCombination(a1, u1.z, a2, u2.z);",10,0,0,1,2,0,8,0,0,19,58,4,0.03571,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,155,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,286,        final Vector3D v3 = (Vector3D) v;,4,0,0,1,2,1,0,4,0,9,33,4,0.03333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,287,"        return new Vector3D(x - v3.x, y - v3.y, z - v3.z);",0,0,0,1,2,1,0,0,0,4,50,4,0.03333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,95,"    public Vector3D(double x, double y, double z) {",0,0,0,1,3,0,0,0,0,4,47,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,96,        this.x = x;,4,0,0,0,0,0,0,0,0,5,11,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,97,        this.y = y;,4,0,0,0,0,0,0,0,0,5,11,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,98,        this.z = z;,20,7,0,0,0,0,0,0,0,28,11,3,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,99,    },2,0,0,0,1,1,0,0,0,3,1,3,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,137,"    public Vector3D(double a, Vector3D u) {",6,0,0,1,3,1,0,2,0,9,39,2,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,138,        this.x = a * u.x;,14,1,0,0,0,0,0,0,0,17,17,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,139,        this.y = a * u.y;,0,0,0,0,0,0,0,0,0,0,17,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,140,        this.z = a * u.z;,8,1,0,0,0,0,0,0,0,10,17,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,141,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,41,"    public static final Vector3D ZERO   = new Vector3D(0, 0, 0);",2,0,0,1,2,3,0,4,0,9,60,2,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,44,"    public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);",0,0,0,1,2,0,0,0,0,3,60,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,47,"    public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);",0,0,0,1,2,0,0,0,0,3,62,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,50,"    public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);",2,0,0,1,2,3,6,4,0,15,60,1,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,53,"    public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);",2,0,0,1,2,3,0,4,0,10,62,2,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,56,"    public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);",6,0,0,1,2,3,0,4,0,14,60,1,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,59,"    public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);",0,0,0,1,2,0,0,0,0,3,62,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,63,"    public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);",14,0,0,1,2,3,0,4,0,21,84,2,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,67,    public static final Vector3D POSITIVE_INFINITY =,0,0,0,0,0,0,0,0,0,0,48,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,71,    public static final Vector3D NEGATIVE_INFINITY =,2,0,0,0,0,3,0,2,0,7,48,2,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,453,        final Vector3D v3 = (Vector3D) v;,4,0,0,1,2,1,0,4,0,9,33,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,454,"        return MathArrays.linearCombination(x, v3.x, y, v3.y, z, v3.z);",12,0,0,1,2,1,10,0,0,22,63,5,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,9,97,    private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);,8,0,0,1,2,0,0,0,0,9,77,3,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,9,115,    private static final double LN_QUICK_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,9,128,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,51,2,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,9,141,    private static final double SINE_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,44,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,9,160,    private static final double SINE_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,44,2,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,9,179,    private static final double COSINE_TABLE_A[] =,2,0,0,1,2,3,0,0,0,5,46,2,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,9,198,    private static final double COSINE_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,46,2,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,9,218,    private static final double TANGENT_TABLE_A[] =,2,0,0,1,2,3,0,0,0,5,47,2,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,9,237,    private static final double TANGENT_TABLE_B[] =,4,0,0,1,2,3,0,0,0,8,47,0,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,9,256,    private static final long RECIP_2PI[] = new long[] {,0,0,0,2,5,0,0,0,0,7,52,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,9,277,    private static final long PI_O_4_BITS[] = new long[] {,2,0,0,2,5,3,0,0,0,5,54,2,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,9,285,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0,0,0,2,4,0,0,0,0,6,126,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,9,288,"    private static final double CBRTTWO[] = { 0.6299605249474366,",2,0,0,1,3,3,0,0,0,5,61,2,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,9,379,        return Math.sqrt(a);,0,0,0,1,2,1,6,0,0,6,20,5,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,866,        final double ca1        = SPLIT_FACTOR * a1;,0,0,0,0,0,0,0,0,0,0,44,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,867,        final double a1High     = ca1 - (ca1 - a1);,8,2,0,1,2,1,0,0,0,11,43,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,868,        final double a1Low      = a1 - a1High;,8,1,0,0,0,4,0,0,0,13,38,1,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,869,        final double cb1        = SPLIT_FACTOR * b1;,6,1,0,0,0,1,0,0,0,8,44,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,870,        final double b1High     = cb1 - (cb1 - b1);,8,2,0,1,2,1,0,0,0,11,43,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,871,        final double b1Low      = b1 - b1High;,18,3,0,0,0,1,10,0,0,32,38,3,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,874,        final double prod1High  = a1 * b1;,6,1,0,0,0,1,0,0,0,8,34,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,875,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,878,        final double ca2        = SPLIT_FACTOR * a2;,6,1,0,0,0,1,0,0,0,8,44,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,879,        final double a2High     = ca2 - (ca2 - a2);,8,2,0,1,2,1,0,0,0,11,43,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,880,        final double a2Low      = a2 - a2High;,8,1,0,0,0,1,2,0,0,12,38,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,881,        final double cb2        = SPLIT_FACTOR * b2;,0,0,0,0,0,0,0,0,0,0,44,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,882,        final double b2High     = cb2 - (cb2 - b2);,0,0,0,1,2,0,0,0,0,3,43,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,883,        final double b2Low      = b2 - b2High;,6,1,0,0,0,1,0,0,0,8,38,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,886,        final double prod2High  = a2 * b2;,6,1,0,0,0,1,0,0,0,8,34,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,887,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,20,8,0,3,6,1,0,0,0,29,110,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,890,        final double s12High    = prod1High + prod2High;,6,1,0,0,0,1,0,0,0,8,48,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,891,        final double s12Prime   = s12High - prod2High;,6,1,0,0,0,1,0,0,0,8,46,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,892,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,12,4,0,3,6,1,0,0,0,17,86,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,896,        double result = s12High + (prod1Low + prod2Low + s12Low);,10,2,0,1,2,0,0,0,0,12,57,5,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,898,        if (Double.isNaN(result)) {,0,0,0,2,5,0,6,0,0,6,27,5,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,904,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,946,        final double ca1        = SPLIT_FACTOR * a1;,8,1,0,0,0,1,0,2,0,12,44,3,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,947,        final double a1High     = ca1 - (ca1 - a1);,0,0,0,1,2,0,0,0,0,3,43,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,948,        final double a1Low      = a1 - a1High;,8,2,0,0,0,1,0,0,0,11,38,3,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,949,        final double cb1        = SPLIT_FACTOR * b1;,6,1,0,0,0,1,0,0,0,8,44,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,950,        final double b1High     = cb1 - (cb1 - b1);,8,0,0,1,2,0,8,0,0,16,43,6,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,951,        final double b1Low      = b1 - b1High;,6,1,0,0,0,1,10,0,0,18,38,3,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,954,        final double prod1High  = a1 * b1;,0,0,0,0,0,0,8,0,0,8,34,10,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,955,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,958,        final double ca2        = SPLIT_FACTOR * a2;,0,0,0,0,0,0,0,0,0,0,44,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,959,        final double a2High     = ca2 - (ca2 - a2);,8,2,0,1,2,1,0,0,0,11,43,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,960,        final double a2Low      = a2 - a2High;,0,0,0,0,0,0,0,0,0,0,38,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,961,        final double cb2        = SPLIT_FACTOR * b2;,6,1,0,0,0,1,0,0,0,8,44,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,962,        final double b2High     = cb2 - (cb2 - b2);,8,2,0,1,2,1,0,0,0,11,43,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,963,        final double b2Low      = b2 - b2High;,0,0,0,0,0,0,0,0,0,0,38,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,966,        final double prod2High  = a2 * b2;,6,1,0,0,0,1,0,0,0,8,34,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,967,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,20,8,0,3,6,1,0,0,0,29,110,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,970,        final double ca3        = SPLIT_FACTOR * a3;,14,6,1,0,0,1,0,2,0,28,44,3,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,971,        final double a3High     = ca3 - (ca3 - a3);,8,2,0,1,2,1,0,0,0,11,43,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,972,        final double a3Low      = a3 - a3High;,10,2,1,0,0,2,0,0,0,19,38,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,973,        final double cb3        = SPLIT_FACTOR * b3;,10,1,0,0,0,1,0,0,0,13,44,3,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,974,        final double b3High     = cb3 - (cb3 - b3);,8,2,0,1,2,1,0,0,0,11,43,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,975,        final double b3Low      = b3 - b3High;,6,1,0,0,0,1,0,0,0,8,38,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,978,        final double prod3High  = a3 * b3;,6,1,0,0,0,1,0,0,0,8,34,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,979,        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);,20,8,0,3,6,1,0,0,0,29,110,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,982,        final double s12High    = prod1High + prod2High;,0,0,0,0,0,0,0,0,0,0,48,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,983,        final double s12Prime   = s12High - prod2High;,0,0,0,0,0,0,0,0,0,0,46,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,984,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,12,4,0,3,6,1,0,0,0,17,86,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,987,        final double s123High   = s12High + prod3High;,6,1,0,0,0,1,0,0,0,8,46,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,988,        final double s123Prime  = s123High - prod3High;,0,0,0,0,0,0,0,0,0,0,47,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,989,        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);,12,4,0,3,6,1,0,0,0,17,87,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,993,        double result = s123High + (prod1Low + prod2Low + prod3Low + s12Low + s123Low);,14,2,0,1,2,0,0,0,0,16,79,5,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,995,        if (Double.isNaN(result)) {,10,2,0,2,5,0,6,0,0,18,27,3,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,1001,        return result;,4,0,0,0,0,1,0,0,0,5,14,0,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2477,            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,0,0,0,5,10,0,0,0,0,15,91,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2479,            ya = epsA * denom;,6,1,0,0,0,0,0,0,0,8,18,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2480,            yb = epsB * denom;,6,1,0,0,0,0,0,0,0,8,18,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2481,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1387,        double[] tmp1 = new double[getSize()];,2,0,0,3,6,0,2,0,0,4,38,5,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1388,"        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2",2,1,0,1,2,0,12,0,0,15,54,3,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1389,        double[] tmp2 = new double[getSize()];,0,0,0,3,6,0,0,0,0,9,38,4,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1390,"        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2",0,0,0,1,2,0,12,0,0,12,54,5,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1391,"        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2",0,0,0,1,2,0,0,0,0,3,60,4,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1392,"        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)",0,0,0,2,4,0,6,0,0,6,70,5,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1394,        if (x[xOffset] >= 0) {,6,1,1,2,5,3,0,0,0,14,22,2,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1397,"            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x",0,0,0,1,2,0,10,0,0,10,52,7,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1398,"            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)",0,0,0,2,4,0,10,0,0,10,57,7,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1399,"            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))",0,0,0,3,6,0,6,0,0,6,64,7,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1400,            for (int i = 0; i < tmp2.length; ++i) {,10,1,0,1,3,0,0,0,0,12,39,6,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1401,                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x)),6,3,1,4,8,0,0,0,0,25,64,3,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1420,    },6,3,0,0,1,0,14,0,0,23,1,6,0.5,1,1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,756,        y.compiler.checkCompatibility(x.compiler);,18,1,0,1,2,0,2,0,0,22,42,3,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,757,        final DerivativeStructure result = new DerivativeStructure(y.compiler);,6,0,0,1,2,1,0,4,0,11,71,4,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,758,"        y.compiler.atan2(y.data, 0, x.data, 0, result.data, 0);",16,0,0,1,2,0,2,0,0,18,55,5,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,759,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1347,                double v = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1348,                q[n - 1] = -n * q[n - 2];,0,0,0,2,4,0,0,0,0,6,25,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1349,                for (int k = n - 1; k >= 0; k -= 2) {,10,2,0,1,3,0,6,2,0,21,37,3,0.33333,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1350,                    v = v * x2 + q[k];,6,2,1,1,2,0,0,0,0,13,18,10,0.33333,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1351,                    if (k > 2) {,6,1,0,1,3,0,0,0,0,8,12,3,0.33333,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1353,                    } else if (k == 2) {,0,0,0,1,4,0,0,0,0,5,20,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1357,                if ((n & 0x1) == 0) {,0,0,0,2,5,0,0,0,0,7,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1358,                    v *= x;,4,0,0,0,0,0,0,0,0,5,7,10,0.33333,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1361,                coeff *= f;,4,0,0,0,0,0,0,0,0,5,11,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1362,                function[n] = coeff * v;,0,0,0,1,2,0,0,0,0,3,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2423,"        return atan(x, 0.0, false);",0,0,0,1,2,1,4,0,0,5,27,5,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1327,        double[] function = new double[1 + order];,0,0,0,2,4,0,0,0,0,6,42,4,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1328,        final double x = operand[operandOffset];,2,0,1,1,2,1,0,0,0,7,40,4,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1329,        function[0] = FastMath.atan(x);,0,0,1,2,4,0,6,0,0,9,31,4,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1330,        if (order > 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1338,            final double[] q = new double[order];,0,0,0,2,4,0,0,0,0,6,37,4,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1339,            q[0] = 1;,0,0,1,1,2,0,0,0,0,3,9,6,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1340,            final double x2    = x * x;,10,2,0,0,0,1,4,0,0,18,27,1,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1341,            final double f     = 1.0 / (1 + x2);,4,2,0,1,2,1,0,0,0,7,36,6,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1342,            double coeff = f;,0,0,0,0,0,0,0,0,0,0,17,4,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1343,            function[1] = coeff * q[0];,2,1,1,2,4,0,0,0,0,8,27,6,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1344,            for (int n = 2; n <= order; ++n) {,12,1,0,1,3,0,0,0,0,15,34,3,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1368,"        compose(operand, operandOffset, function, result, resultOffset);",4,0,0,1,2,0,12,0,0,17,64,4,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1370,    },2,1,0,0,1,0,0,0,0,3,1,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2455,            final double oneOverXa = 1 / xa;,4,1,0,0,0,1,0,0,0,6,32,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2456,            idx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);,0,0,0,4,8,0,0,0,0,12,89,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2433,        boolean negate = false;,2,0,0,0,0,0,0,0,0,3,23,5,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2436,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,0,0,0,1,3,1,0,0,0,5,56,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2440,        if (xa < 0) {,4,1,0,1,3,0,0,6,0,12,13,3,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2447,        if (xa > 1.633123935319537E16) { // Very large input,0,0,0,1,3,0,0,0,0,4,52,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2452,        if (xa < 1) {,0,0,0,1,3,0,0,0,0,4,13,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2458,        double epsA = xa - TANGENT_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,40,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2459,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,6,2,1,2,4,0,0,0,0,13,50,5,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2460,        epsB += xb - TANGENT_TABLE_B[idx];,4,1,1,1,2,0,0,0,0,10,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2462,        double temp = epsA + epsB;,10,1,0,0,0,0,10,4,0,26,26,3,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2463,        epsB = -(temp - epsA - epsB);,8,1,0,1,2,0,0,0,0,11,29,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2464,        epsA = temp;,10,2,0,0,0,0,0,0,0,14,12,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2467,        temp = xa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2468,        double ya = xa + temp - temp;,0,0,0,0,0,0,0,0,0,0,29,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2469,        double yb = xb + xa - ya;,0,0,0,0,0,0,0,0,0,0,25,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2470,        xa = ya;,0,0,0,0,0,0,0,0,0,0,8,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2471,        xb += yb;,4,0,0,0,0,0,0,0,0,5,9,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2474,        if (idx == 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2509,        epsA = ya;,8,0,0,0,0,0,10,0,0,19,10,3,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2510,        epsB = yb;,0,0,0,0,0,0,0,0,0,0,10,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2513,        final double epsA2 = epsA * epsA;,6,1,0,0,0,1,0,0,0,8,33,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2524,        yb = 0.07490822288864472;,0,0,0,0,0,0,0,0,0,0,25,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2525,        yb = yb * epsA2 + -0.09088450866185192;,12,4,1,0,0,0,0,0,0,21,39,3,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2526,        yb = yb * epsA2 + 0.11111095942313305;,6,2,0,0,0,0,0,0,0,9,38,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2527,        yb = yb * epsA2 + -0.1428571423679182;,0,0,0,0,0,0,0,0,0,0,38,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2528,        yb = yb * epsA2 + 0.19999999999923582;,6,2,1,0,0,0,0,0,0,12,38,1,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2529,        yb = yb * epsA2 + -0.33333333333333287;,2,0,1,0,0,1,0,0,0,5,39,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2530,        yb = yb * epsA2 * epsA;,8,1,0,0,0,0,0,0,0,10,23,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2533,        ya = epsA;,6,0,0,0,0,1,0,0,0,8,10,2,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2535,        temp = ya + yb;,6,1,0,0,0,0,0,0,0,8,15,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2536,        yb = -(temp - ya - yb);,2,0,0,1,2,0,0,0,0,3,23,2,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2537,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2540,        yb += epsB / (1d + epsA * epsA);,0,0,0,1,2,0,0,0,0,3,32,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2543,        double za = EIGHTHS[idx] + ya;,4,1,1,1,2,0,0,0,0,9,30,5,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2544,        double zb = -(za - EIGHTHS[idx] - ya);,6,1,1,2,4,0,0,0,0,12,38,5,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2545,        temp = za + yb;,2,1,0,0,0,0,0,0,0,3,15,8,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2546,        zb += -(temp - za - yb);,0,0,0,1,2,0,0,0,0,3,24,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2547,        za = temp;,0,0,0,0,0,0,6,0,0,6,10,5,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2549,        double result = za + zb;,0,0,0,0,0,0,0,0,0,0,24,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2550,        double resultb = -(result - za - zb);,0,0,0,1,2,0,0,0,0,3,37,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2552,        if (leftPlane) {,2,0,0,1,3,0,0,0,0,2,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2566,        if (negate ^ leftPlane) {,0,0,0,1,3,0,0,0,0,4,25,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2570,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,178,        final int dim = getDimension();,8,5,1,1,2,2,2,0,0,25,31,3,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,179,        if (vals.length != dim) {,6,1,0,1,3,0,0,0,0,8,25,3,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,183,"        return FastMath.pow(2 * FastMath.PI, -dim / 2) *",6,3,0,1,2,1,4,0,0,14,48,4,0.5,1,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,229,        final double[] centered = new double[values.length];,6,0,0,2,4,1,0,0,0,7,52,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,230,        for (int i = 0; i < centered.length; i++) {,10,1,0,1,3,0,0,0,0,12,43,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,231,            centered[i] = values[i] - getMeans()[i];,0,1,1,4,8,0,2,0,0,14,40,6,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,233,        final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered);,2,0,0,2,4,1,6,0,0,9,77,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,234,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,235,        for (int i = 0; i < preMultiplied.length; i++) {,10,1,0,1,3,0,0,0,0,12,48,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,236,            sum += preMultiplied[i] * centered[i];,2,1,1,2,4,0,0,0,0,12,38,6,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,238,        return FastMath.exp(-0.5 * sum);,0,0,0,1,2,1,0,0,0,4,32,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,831,"        return exp(x, 0.0, null);",0,0,0,1,2,1,0,0,0,4,25,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,850,        if (x < 0.0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,851,            intVal = (int) -x;,0,0,0,1,2,0,0,0,0,3,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,853,            if (intVal > 746) {,2,1,0,1,3,0,0,0,0,3,19,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,861,            if (intVal > 709) {,0,0,0,1,3,0,0,0,0,4,19,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,871,            if (intVal == 709) {,2,1,0,1,3,0,0,0,0,3,20,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,881,            intVal++;,0,0,0,0,0,0,0,0,0,0,9,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,883,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,884,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,886,            intVal = -intVal;,0,0,0,0,0,0,0,0,0,0,17,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,888,            intVal = (int) x;,0,0,0,1,2,0,0,0,0,3,17,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,890,            if (intVal > 709) {,0,0,0,1,3,0,0,0,0,4,19,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,898,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,899,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,906,        final int intFrac = (int) ((x - intVal) * 1024.0);,0,0,0,3,6,0,0,0,0,9,50,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,907,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,16,1,1,1,2,1,0,0,0,21,64,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,908,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,2,0,0,1,2,3,0,4,0,9,64,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,914,        final double epsilon = x - (intVal + intFrac / 1024.0);,12,4,0,1,2,1,4,0,0,22,55,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,923,        double z = 0.04168701738764507;,2,0,0,0,0,0,0,0,0,2,31,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,924,        z = z * epsilon + 0.1666666505023083;,12,3,0,0,0,0,0,0,0,16,37,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,925,        z = z * epsilon + 0.5000000000042687;,6,2,0,0,0,0,0,0,0,9,37,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,926,        z = z * epsilon + 1.0;,0,0,1,0,0,0,2,0,0,7,22,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,927,        z = z * epsilon + -3.940510424527919E-20;,0,0,0,0,0,0,0,0,0,0,41,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,934,        double tempA = intPartA * fracPartA;,4,0,0,0,0,0,0,0,0,5,36,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,935,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,0,0,0,0,0,0,0,0,0,0,82,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,941,        final double tempC = tempB + tempA;,6,1,0,0,0,1,0,0,0,8,35,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,943,        if (extra != 0.0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,946,            result = tempC*z + tempB + tempA;,0,0,0,0,0,0,0,0,0,0,33,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,949,        if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,955,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1179,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,8,7,0,1,3,0,8,0,0,24,45,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1246,            double tmp = epsilon * HEX_40000000;,2,0,0,0,0,3,0,0,0,5,36,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1247,            double aa = epsilon + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,32,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1248,            double ab = epsilon - aa;,6,1,0,0,0,0,4,0,0,11,25,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1249,            double xa = aa;,4,0,0,0,0,0,0,0,0,4,15,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1250,            double xb = ab;,0,0,0,0,0,0,0,0,0,0,15,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1253,            final double numer = bits & 0x3ffffffffffL;,0,0,0,0,0,0,0,0,0,0,43,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1254,            final double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,16,4,0,1,2,1,0,0,0,22,65,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1255,            aa = numer - xa*denom - xb * denom;,2,0,0,0,0,0,4,4,0,10,35,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1256,            xb += aa / denom;,0,0,0,0,0,0,0,0,0,0,17,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1259,            final double[] lnCoef_last = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];,6,1,1,2,4,1,0,0,0,10,71,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1260,            double ya = lnCoef_last[0];,8,0,1,1,2,1,2,2,0,18,27,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1261,            double yb = lnCoef_last[1];,10,2,1,1,2,0,0,0,0,14,27,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1263,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,55,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1265,                aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1266,                ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1268,                tmp = aa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1269,                ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1270,                yb = aa - ya + ab;,2,1,1,0,0,0,0,0,0,8,18,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1273,                final double[] lnCoef_i = LN_HI_PREC_COEF[i];,0,0,0,2,4,0,0,0,0,6,45,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1274,                aa = ya + lnCoef_i[0];,6,1,1,1,2,0,0,2,0,12,22,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1275,                ab = yb + lnCoef_i[1];,4,1,1,1,2,0,0,0,0,8,22,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1277,                tmp = aa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1278,                ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1279,                yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1283,            aa = ya * xa;,6,1,0,0,0,0,0,0,0,8,13,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1284,            ab = ya * xb + yb * xa + yb * xb;,20,5,0,0,0,3,4,0,0,33,33,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1292,            lnza = aa + ab;,6,1,0,0,0,0,0,0,0,8,15,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1293,            lnzb = -(lnza - aa - ab);,8,1,0,1,2,0,0,0,0,11,25,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1294,        } else {,2,0,0,0,2,0,0,0,0,2,8,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1348,            hiPrec[0] = a;,2,0,1,1,2,0,0,0,0,5,14,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1349,            hiPrec[1] = b;,0,0,0,1,2,0,0,0,0,3,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1443,        final double lns[] = new double[2];,2,0,0,2,4,1,0,0,0,3,35,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1445,        if (y == 0.0) {,4,2,0,1,3,0,0,0,0,6,15,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1449,        if (x != x) { // X is NaN,6,0,0,1,3,0,0,0,0,6,25,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1454,        if (x == 0) {,4,1,1,1,3,3,10,0,0,23,13,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1479,        if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1490,        if (y == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1502,        if (x == Double.NEGATIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1526,        if (y == Double.NEGATIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1540,        if (x < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1557,        if (y < 8e298 && y > -8e298) {,4,3,0,1,3,0,0,0,0,8,30,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1558,            double tmp1 = y * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,31,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1559,            ya = y + tmp1 - tmp1;,0,0,0,0,0,0,0,0,0,0,21,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1560,            yb = y - ya;,0,0,0,0,0,0,0,0,0,0,12,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1561,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1569,"        final double lores = log(x, lns);",0,0,0,1,2,0,0,0,0,3,33,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1570,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,10,1,0,2,5,0,6,0,0,18,73,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1574,        double lna = lns[0];,8,1,1,1,2,1,0,0,0,12,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1575,        double lnb = lns[1];,0,0,0,1,2,0,0,0,0,3,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1578,        double tmp1 = lna * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,33,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1579,        double tmp2 = lna + tmp1 - tmp1;,0,0,0,0,0,0,0,0,0,0,32,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1580,        lnb += lna - tmp2;,6,1,0,0,0,0,0,0,0,8,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1581,        lna = tmp2;,6,0,0,0,0,0,0,0,0,7,11,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1584,        final double aa = lna * ya;,8,1,0,0,0,1,0,0,0,12,27,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1585,        final double ab = lna * yb + lnb * ya + lnb * yb;,14,5,0,0,0,1,0,0,0,20,49,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1587,        lna = aa+ab;,10,1,0,0,0,0,0,0,0,13,12,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1588,        lnb = -(lna - aa - ab);,0,0,0,1,2,0,0,0,0,3,23,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1590,        double z = 1.0 / 120.0;,4,1,0,0,0,3,0,0,0,8,23,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1591,        z = z * lnb + (1.0 / 24.0);,0,0,0,1,2,0,0,0,0,3,27,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1592,        z = z * lnb + (1.0 / 6.0);,0,0,0,1,2,0,0,0,0,3,26,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1593,        z = z * lnb + 0.5;,0,0,0,0,0,0,0,0,0,0,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1594,        z = z * lnb + 1.0;,8,2,0,0,0,0,0,0,0,11,18,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1595,        z = z * lnb;,0,0,0,0,0,0,0,0,0,0,12,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1597,"        final double result = exp(lna, z, null);",0,0,0,1,2,0,0,0,0,3,40,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1599,        return result;,2,0,0,0,0,1,4,0,0,6,14,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1613,        if (e == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6142,        return EXP_INT_A.clone();,10,3,0,1,2,1,4,0,0,17,25,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6150,        return EXP_INT_B.clone();,0,0,0,1,2,1,4,0,0,4,25,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6158,        return EXP_FRAC_A.clone();,2,0,0,1,2,4,4,0,0,9,26,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6166,        return EXP_FRAC_B.clone();,0,0,0,1,2,1,4,0,0,4,26,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3744,    private static class ExpFracTable {,8,1,0,0,1,2,0,0,0,12,35,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3770,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,4,0,0,1,2,0,4,0,0,9,56,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3771,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,2,0,0,1,2,0,4,0,0,7,56,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3773,        },6,0,1,0,1,0,0,0,0,17,1,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3705,    private static class ExpIntTable {,2,0,0,0,1,2,0,0,0,4,34,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3737,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,2,0,0,1,2,0,4,0,0,7,54,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3738,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,2,0,0,1,2,0,4,0,0,7,54,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3740,        },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,373,        final int nRows = getRowDimension();,4,0,0,1,2,1,2,2,0,9,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,374,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,375,        if (v.length != nRows) {,6,1,0,1,3,0,0,0,0,7,24,4,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,379,        final double[] out = new double[nCols];,0,0,0,2,4,0,0,0,0,6,39,4,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,380,        for (int col = 0; col < nCols; ++col) {,8,1,0,1,3,0,0,0,0,10,39,4,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,381,            double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,7,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,382,            for (int i = 0; i < nRows; ++i) {,18,3,0,1,3,2,0,0,0,24,33,1,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,383,                sum += data[i][col] * v[i];,2,1,1,3,6,0,0,0,0,14,27,8,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,385,            out[col] = sum;,0,0,0,1,2,0,0,0,0,3,15,4,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,388,        return out;,4,0,0,0,0,1,0,0,0,5,11,0,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,164,        return MathArrays.copyOf(means);,0,0,0,1,2,1,6,0,0,6,32,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1130,        if (x==0) { // Handle special case of +0/-0,0,0,0,1,3,0,0,0,0,4,43,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1133,        long bits = Double.doubleToLongBits(x);,0,0,0,1,2,0,0,0,0,3,39,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1136,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,0,0,0,2,5,0,0,0,0,7,50,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1147,        if (x == Double.POSITIVE_INFINITY) {,2,2,1,1,3,0,0,0,0,13,36,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1156,        int exp = (int)(bits >> 52)-1023;,0,0,0,2,4,0,0,0,0,6,33,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1158,        if ((bits & 0x7ff0000000000000L) == 0) {,0,0,0,2,5,0,0,0,0,7,40,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1178,        if (exp == -1 || exp == 0) {,4,3,0,1,3,0,0,0,0,8,28,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1228,        final double[] lnm = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,0,0,0,5,10,0,0,0,0,15,79,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1239,        final double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,8,4,0,3,6,1,0,0,0,13,95,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1241,        double lnza = 0.0;,0,0,0,0,0,0,0,0,0,0,18,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1242,        double lnzb = 0.0;,0,0,0,0,0,0,0,0,0,0,18,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1244,        if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1320,        double a = LN_2_A*exp;,6,1,0,0,0,0,0,0,0,7,22,5,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1321,        double b = 0.0;,2,0,0,0,0,0,0,0,0,2,15,5,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1322,        double c = a+lnm[0];,0,0,0,1,2,0,0,0,0,3,20,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1323,        double d = -(c-a-lnm[0]);,0,0,0,2,4,0,0,0,0,6,25,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1324,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1325,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1327,        c = a + lnza;,8,1,0,0,0,0,0,0,0,10,13,3,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1328,        d = -(c - a - lnza);,8,1,0,1,2,0,0,0,0,11,20,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1329,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1330,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1332,        c = a + LN_2_B*exp;,10,4,0,0,0,0,0,0,0,15,19,3,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1333,        d = -(c - a - LN_2_B*exp);,12,2,1,1,2,0,0,0,0,20,26,3,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1334,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1335,        b = b + d;,4,0,0,0,0,0,0,4,0,9,10,6,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1337,        c = a + lnm[1];,4,1,1,1,2,0,0,0,0,8,15,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1338,        d = -(c - a - lnm[1]);,6,1,1,2,4,0,0,0,0,11,22,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1339,        a = c;,8,0,0,0,0,0,0,0,0,9,6,3,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1340,        b = b + d;,10,1,0,0,0,0,0,0,0,13,10,3,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1342,        c = a + lnzb;,6,1,0,0,0,0,0,0,0,8,13,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1343,        d = -(c - a - lnzb);,2,0,0,1,2,1,0,0,0,3,20,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1344,        a = c;,12,2,1,0,0,1,0,0,0,25,6,3,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1345,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1347,        if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1352,        return a + b;,0,0,0,0,0,1,0,0,0,1,13,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3777,    private static class lnMant {,4,0,0,0,1,3,0,0,0,7,29,1,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3791,                LN_MANT = FastMathLiteralArrays.loadLnMant();,2,0,0,1,2,0,4,0,0,7,45,7,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3793,        },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,29,    private static final double[] EXP_INT_A = new double[] {,4,0,0,2,5,0,0,0,0,4,56,5,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,1535,    private static final double[] EXP_INT_B = new double[] {,2,0,0,2,5,3,0,0,0,5,56,2,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,3043,    private static final double[] EXP_FRAC_A = new double[] {,2,0,0,2,5,3,0,0,0,5,57,2,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,4074,    private static final double[] EXP_FRAC_B = new double[] {,0,0,0,2,5,0,0,0,0,7,57,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,5103,    private static final double[][] LN_MANT = new double[][] {,2,0,0,4,9,3,0,0,0,5,58,2,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6174,        return LN_MANT.clone();,2,0,0,1,2,4,4,0,0,9,23,1,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,53,        return dimension;,0,0,0,0,0,1,0,0,0,1,17,4,0.125,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,76,"        this(new Well19937c(), means, covariances);",4,0,0,2,4,0,0,2,0,6,43,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,77,    },12,2,0,0,1,0,6,0,0,20,1,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,103,"        super(rng, means.length);",6,0,0,1,2,0,0,0,0,6,25,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,105,        final int dim = means.length;,6,0,0,0,0,1,0,0,0,7,29,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,107,        if (covariances.length != dim) {,0,0,0,1,3,0,0,0,0,4,32,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,111,        for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,112,            if (dim != covariances[i].length) {,4,1,1,2,5,0,0,0,0,9,35,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,117,        this.means = MathArrays.copyOf(means);,4,0,0,1,2,0,6,0,0,12,38,0,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,119,        covarianceMatrix = new Array2DRowRealMatrix(covariances);,4,0,0,1,2,0,0,2,0,7,57,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,122,        final EigenDecomposition covMatDec = new EigenDecomposition(covarianceMatrix);,6,1,0,1,2,1,0,4,0,12,78,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,125,        covarianceMatrixInverse = covMatDec.getSolver().getInverse();,2,0,0,2,4,0,6,0,0,9,61,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,127,        covarianceMatrixDeterminant = covMatDec.getDeterminant();,2,0,0,1,2,0,4,0,0,7,57,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,130,        final double[] covMatEigenvalues = covMatDec.getRealEigenvalues();,2,0,0,2,4,1,4,0,0,7,66,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,132,        for (int i = 0; i < covMatEigenvalues.length; i++) {,10,1,0,1,3,0,6,0,0,18,52,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,133,            if (covMatEigenvalues[i] < 0) {,0,1,1,2,5,0,0,0,0,5,31,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,139,"        final Array2DRowRealMatrix covMatEigenvectors = new Array2DRowRealMatrix(dim, dim);",6,0,0,1,2,1,0,4,0,11,83,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,140,        for (int v = 0; v < dim; v++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,141,            final double[] evec = covMatDec.getEigenvector(v).toArray();,2,0,0,3,6,1,8,0,0,11,60,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,142,"            covMatEigenvectors.setColumn(v, evec);",0,0,0,1,2,0,8,0,0,8,38,7,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,145,        final RealMatrix tmpMatrix = covMatEigenvectors.transpose();,2,0,0,1,2,1,4,2,0,9,60,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,148,        for (int row = 0; row < dim; row++) {,8,1,0,1,3,0,0,0,0,10,37,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,149,            final double factor = FastMath.sqrt(covMatEigenvalues[row]);,2,0,1,2,4,1,4,0,0,11,60,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,150,            for (int col = 0; col < dim; col++) {,8,1,0,1,3,0,0,0,0,10,37,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,151,"                tmpMatrix.multiplyEntry(row, col, factor);",0,0,0,1,2,0,0,0,0,3,42,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,155,        samplingMatrix = covMatEigenvectors.multiply(tmpMatrix);,0,0,0,1,2,0,0,0,0,3,56,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,156,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,41,                                                   int n) {,2,0,0,0,2,0,0,0,0,2,8,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,42,        random = rng;,4,0,0,0,0,0,0,0,0,5,13,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,43,        dimension = n;,14,2,0,0,0,0,0,0,0,19,14,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,44,    },10,5,0,0,1,0,0,0,0,16,1,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,97,    private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);,6,0,0,1,2,3,4,0,0,13,77,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,115,    private static final double LN_QUICK_COEF[][] = {,8,0,0,2,5,5,0,0,0,13,49,1,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,128,    private static final double LN_HI_PREC_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,51,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,141,    private static final double SINE_TABLE_A[] =,2,0,0,1,2,3,0,0,0,5,44,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,160,    private static final double SINE_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,44,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,179,    private static final double COSINE_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,46,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,198,    private static final double COSINE_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,46,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,218,    private static final double TANGENT_TABLE_A[] =,2,0,0,1,2,3,0,0,0,5,47,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,237,    private static final double TANGENT_TABLE_B[] =,2,0,0,1,2,0,0,0,0,3,47,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,256,    private static final long RECIP_2PI[] = new long[] {,2,0,0,2,5,3,0,0,0,5,52,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,277,    private static final long PI_O_4_BITS[] = new long[] {,0,0,0,2,5,0,0,0,0,7,54,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,285,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0,0,0,2,4,0,0,0,0,6,126,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,288,"    private static final double CBRTTWO[] = { 0.6299605249474366,",2,0,0,1,3,3,0,0,0,5,61,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,379,        return Math.sqrt(a);,0,0,0,1,2,1,6,0,0,6,20,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2999,        return (x < 0l) ? -x : x;,0,0,0,1,2,1,0,0,0,4,25,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3017,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,12,2,0,2,4,1,6,2,0,23,61,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3421,        return (a <= b) ? a : b;,8,1,0,1,2,1,8,0,0,17,24,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,719,"         return copyOf(source, source.length);",8,1,1,1,2,1,8,0,0,22,37,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,747,         final double[] output = new double[len];,6,1,0,2,4,0,0,0,0,7,40,7,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,748,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",0,0,0,2,4,0,0,0,0,6,73,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,749,         return output;,0,0,0,0,0,1,0,0,0,1,14,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/Precision,11,70,        EPSILON = Double.longBitsToDouble((EXPONENT_OFFSET - 53l) << 52);,0,0,0,2,4,0,0,0,0,6,65,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/Precision,11,77,        SAFE_MIN = Double.longBitsToDouble((EXPONENT_OFFSET - 1022l) << 52);,10,3,0,2,4,0,4,0,0,19,68,1,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/Precision,11,78,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/Precision,11,272,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",6,3,0,2,4,1,10,0,0,19,53,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/Precision,11,331,        long xInt = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/Precision,11,332,        long yInt = Double.doubleToLongBits(y);,2,0,0,1,2,0,6,0,0,8,39,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/Precision,11,335,        if (xInt < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/Precision,11,338,        if (yInt < 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/Precision,11,342,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,8,2,0,1,2,1,4,0,0,15,61,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/Precision,11,344,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,2,1,0,2,4,1,12,0,0,17,55,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/MathUtils,11,264,        if (o == null) {,0,0,0,1,3,0,0,0,0,4,16,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/MathUtils,11,267,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,43,        return getDefaultNumberFormat(Locale.getDefault());,0,0,0,2,4,1,0,0,0,7,51,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,54,        final NumberFormat nf = NumberFormat.getInstance(locale);,2,0,0,1,2,1,6,2,0,11,57,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,55,        nf.setMaximumFractionDigits(10);,0,0,0,1,2,0,4,0,0,4,32,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,56,        return nf;,2,0,0,0,0,1,0,0,0,2,10,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,40,    public BitsStreamGenerator() {,0,0,0,1,3,0,0,0,0,4,30,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,41,        nextGaussian = Double.NaN;,14,1,0,0,0,0,0,0,0,18,26,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,42,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,170,        nextGaussian = Double.NaN;,6,0,0,0,0,0,0,0,0,7,26,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,171,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,72,"        this(k, m1, m2, m3, null);",8,0,0,1,2,0,0,0,0,8,26,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,73,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,94,"    protected AbstractWell(final int k, final int m1, final int m2, final int m3, final int[] seed) {",12,0,0,2,5,6,0,0,0,18,97,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,99,        final int w = 32;,4,1,0,0,0,1,0,0,0,6,17,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,100,        final int r = (k + w - 1) / w;,0,0,0,1,2,0,0,0,0,3,30,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,101,        this.v      = new int[r];,2,0,1,1,2,0,0,0,0,5,25,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,102,        this.index  = 0;,2,0,0,0,0,0,0,0,0,3,16,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,106,        iRm1 = new int[r];,4,0,0,1,2,0,0,0,0,4,18,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,107,        iRm2 = new int[r];,0,0,0,1,2,0,0,0,0,3,18,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,108,        i1   = new int[r];,0,0,0,1,2,0,0,0,0,3,18,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,109,        i2   = new int[r];,2,0,1,1,2,0,6,0,0,11,18,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,110,        i3   = new int[r];,2,0,1,1,2,0,0,0,0,5,18,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,111,        for (int j = 0; j < r; ++j) {,8,6,1,1,3,0,0,0,0,30,29,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,112,            iRm1[j] = (j + r - 1) % r;,6,3,1,2,4,0,0,0,0,14,26,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,113,            iRm2[j] = (j + r - 2) % r;,6,3,1,2,4,0,0,0,0,14,26,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,114,            i1[j]   = (j + m1)    % r;,6,2,1,2,4,0,0,0,0,13,26,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,115,            i2[j]   = (j + m2)    % r;,6,2,1,2,4,0,0,0,0,13,26,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,116,            i3[j]   = (j + m3)    % r;,6,2,1,2,4,0,0,0,0,13,26,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,120,        setSeed(seed);,0,0,0,1,2,0,4,0,0,4,14,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,122,    },4,1,0,0,1,0,6,0,0,12,1,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,154,        if (seed == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,155,            setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0,1,0,3,6,0,10,0,0,11,68,7,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,156,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,159,"        System.arraycopy(seed, 0, v, 0, Math.min(seed.length, v.length));",8,0,0,2,4,0,12,0,0,20,65,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,161,        if (seed.length < v.length) {,8,1,0,1,3,0,0,0,0,9,29,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,162,            for (int i = seed.length; i < v.length; ++i) {,14,1,0,1,3,0,0,0,0,16,46,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,163,                final long l = v[i - seed.length];,8,1,1,1,2,1,0,0,0,12,34,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,164,                v[i] = (int) ((1812433253l * (l ^ (l >> 30)) + i) & 0xffffffffL);,6,5,1,6,12,0,0,0,0,16,65,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,168,        index = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,169,        clear();  // Clear normal deviate cache,2,0,0,1,2,0,2,0,0,6,39,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,170,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,179,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",12,6,0,7,14,1,2,0,0,21,71,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,180,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,11,57,"        super(K, M1, M2, M3);",12,1,0,1,2,0,6,0,0,19,21,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,11,58,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,11,30,public class DefaultRealMatrixPreservingVisitor implements RealMatrixPreservingVisitor {,0,0,0,0,1,0,0,0,0,1,88,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,11,34,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,11,41,        return 0;,6,1,0,0,0,1,0,0,0,7,9,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,56,    protected AbstractRealMatrix() {},0,0,0,2,4,0,0,0,0,6,33,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,67,        throws NotStrictlyPositiveException {,0,0,0,0,1,0,0,0,0,1,37,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,68,        if (rowDimension < 1) {,10,2,0,1,3,0,0,0,0,13,23,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,71,        if (columnDimension < 1) {,0,0,0,1,3,0,0,0,0,4,26,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,74,    },4,0,0,0,1,0,0,0,0,5,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,47,    private static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance(Locale.US);,6,0,0,1,2,3,4,2,0,15,95,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,50,        DEFAULT_FORMAT.getFormat().setMinimumFractionDigits(1);,8,1,0,2,4,0,6,0,0,16,55,1,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,141,"        MatrixUtils.checkMultiplicationCompatible(this, m);",12,2,0,1,2,0,6,0,0,21,51,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,143,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,144,        final int nCols = m.getColumnDimension();,2,0,0,1,2,1,4,0,0,7,41,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,145,        final int nSum  = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,39,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,146,"        final RealMatrix out = createMatrix(nRows, nCols);",4,0,0,1,2,2,12,2,0,20,50,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,147,        for (int row = 0; row < nRows; ++row) {,8,1,0,1,3,0,0,0,0,10,39,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,148,            for (int col = 0; col < nCols; ++col) {,0,0,0,1,3,0,0,0,0,4,39,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,149,                double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,9,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,150,                for (int i = 0; i < nSum; ++i) {,16,2,0,1,3,0,4,0,0,24,32,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,151,"                    sum += getEntry(row, i) * m.getEntry(i, col);",2,1,0,2,4,0,14,0,0,18,45,10,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,153,"                out.setEntry(row, col, sum);",2,1,1,1,2,0,10,0,0,22,28,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,157,        return out;,2,0,0,0,0,1,6,0,0,8,11,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,572,"        MatrixUtils.checkColumnIndex(this, column);",2,0,0,1,2,0,14,0,0,16,43,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,573,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,574,        if (array.length != nRows) {,8,1,0,1,3,0,4,0,0,13,28,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,577,        for (int i = 0; i < nRows; ++i) {,12,2,0,1,3,0,0,0,0,16,33,1,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,578,"            setEntry(i, column, array[i]);",0,0,1,2,4,0,6,0,0,10,30,7,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,580,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,598,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,599,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,600,"        final RealMatrix out = createMatrix(nCols, nRows);",2,0,0,1,2,1,6,2,0,11,50,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,601,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,0,0,0,0,5,63,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,611,        return out;,4,0,0,0,0,1,6,0,0,10,11,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,616,        return getColumnDimension() == getRowDimension();,0,0,0,2,4,1,0,0,0,7,49,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,873,        return walkInRowOrder(visitor);,8,0,0,1,2,1,4,0,0,13,31,1,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealLinearOperator,11,53,public abstract class RealLinearOperator {,2,0,0,0,1,2,0,0,0,4,42,1,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,61,"        super(rowDimension, columnDimension);",4,0,0,1,2,0,0,0,0,4,37,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,62,        data = new double[rowDimension][columnDimension];,0,0,0,2,4,0,0,0,0,6,49,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,63,    },2,0,0,0,1,1,0,0,0,3,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,79,"        throws DimensionMismatchException, NoDataException, NullArgumentException {",0,0,0,0,1,0,0,0,0,1,75,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,80,        copyIn(d);,0,0,0,1,2,0,4,0,0,4,10,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,81,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,145,"        return new Array2DRowRealMatrix(rowDimension, columnDimension);",4,0,0,1,2,1,0,2,0,6,63,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,254,        return copyOut();,0,0,0,1,2,1,2,0,0,2,17,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,272,        if (data == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,273,            if (row > 0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,276,            if (column > 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,279,            MathUtils.checkNotNull(subMatrix);,2,1,0,1,2,0,6,0,0,9,34,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,280,            final int nRows = subMatrix.length;,8,0,1,0,0,1,0,0,0,14,35,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,281,            if (nRows == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,285,            final int nCols = subMatrix[0].length;,6,0,1,1,2,1,0,0,0,16,38,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,286,            if (nCols == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,289,            data = new double[subMatrix.length][nCols];,8,0,1,2,4,0,0,0,0,13,43,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,290,            for (int i = 0; i < data.length; ++i) {,0,0,0,1,3,0,0,0,0,4,39,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,291,                if (subMatrix[i].length != nCols) {,4,1,1,2,5,0,0,0,0,9,35,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,294,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",4,1,1,3,6,0,8,0,0,19,64,9,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,296,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,300,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,306,"        MatrixUtils.checkMatrixIndex(this, row, column);",2,0,0,1,2,0,8,0,0,11,48,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,307,        return data[row][column];,0,0,1,2,4,1,0,0,0,6,25,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,314,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,1,2,0,8,0,0,8,48,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,315,        data[row][column] = value;,6,0,1,2,4,0,0,0,0,14,26,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,316,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,332,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,1,2,0,8,0,0,8,48,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,333,        data[row][column] *= factor;,0,0,0,2,4,0,0,0,0,6,28,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,334,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,339,        return (data == null) ? 0 : data.length;,6,1,0,1,2,1,0,0,0,7,40,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,345,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,4,3,1,5,10,1,0,0,0,11,66,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,410,        final int rows    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,38,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,411,        final int columns = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,412,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",4,2,0,1,2,0,8,0,0,14,58,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,413,        for (int i = 0; i < rows; ++i) {,8,1,0,1,3,0,0,0,0,10,32,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,414,            final double[] rowI = data[i];,2,0,1,2,4,1,0,0,0,7,30,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,415,            for (int j = 0; j < columns; ++j) {,8,1,0,1,3,0,0,0,0,10,35,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,416,"                visitor.visit(i, j, rowI[j]);",4,1,1,2,4,0,8,0,0,18,29,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,419,        return visitor.end();,0,0,0,1,2,1,4,0,0,4,21,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,528,        final int nRows = this.getRowDimension();,4,0,1,1,2,2,2,4,0,14,41,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,529,        final double[][] out = new double[nRows][this.getColumnDimension()];,2,0,1,5,10,1,2,0,0,7,68,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,531,        for (int i = 0; i < nRows; i++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,532,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",6,0,1,4,8,1,4,0,0,25,56,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,534,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,547,"        setSubMatrix(in, 0, 0);",2,1,0,1,2,0,4,0,0,7,23,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,548,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,60,public abstract class RealVector {,0,0,0,0,1,0,0,0,0,1,34,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1159,    @Deprecated,2,0,0,0,0,0,0,0,0,3,11,1,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,85,    public ArrayRealVector(double[] d) {,0,0,0,2,5,0,0,0,0,7,36,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,86,        data = d.clone();,0,0,0,1,2,0,0,0,0,3,17,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,87,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,202,"    public ArrayRealVector(ArrayRealVector v, boolean deep) {",6,0,0,1,3,1,0,2,0,9,57,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,203,        data = deep ? v.data.clone() : v.data;,12,0,0,1,2,0,2,0,0,15,38,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,204,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,43,    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();,16,2,0,1,2,4,4,4,0,33,86,0,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,289,"        return new ArrayRealVector(this, true);",0,0,0,1,2,1,0,2,0,3,39,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,450,        return data;,2,0,0,0,0,1,0,0,0,2,12,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,726,        return data.clone();,6,1,0,1,2,2,12,0,0,20,20,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,82,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",0,0,0,1,2,0,8,0,0,8,64,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,83,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,106,"                            final String separator, final NumberFormat format) {",0,0,0,0,2,0,0,0,0,2,52,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,107,        this.prefix      = prefix;,4,0,0,0,0,0,0,0,0,5,26,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,108,        this.suffix      = suffix;,6,0,1,0,0,0,0,0,0,12,26,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,109,        this.separator   = separator;,4,0,0,0,0,0,0,0,0,5,29,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,110,        trimmedPrefix    = prefix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,111,        trimmedSuffix    = suffix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,112,        trimmedSeparator = separator.trim();,2,0,0,1,2,0,6,2,0,11,36,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,113,        this.format      = format;,0,0,0,0,0,0,0,0,0,0,26,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,114,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,162,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,40,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,171,        return new RealVectorFormat(CompositeFormat.getDefaultNumberFormat(locale));,0,0,0,2,4,1,6,2,0,8,76,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,601,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,0,2,2,0,4,63,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,606,"                out.setEntry(column, row, value);",0,0,0,1,2,0,10,0,0,10,33,11,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,607,            },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,62,    public TriDiagonalTransformer(RealMatrix matrix) {,8,0,1,1,3,1,6,2,0,24,50,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,63,        if (!matrix.isSquare()) {,0,0,0,2,5,0,0,0,0,7,25,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,68,        final int m = matrix.getRowDimension();,2,0,0,1,2,1,4,0,0,7,39,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,69,        householderVectors = matrix.getData();,12,1,0,1,2,0,4,0,0,19,38,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,70,        main      = new double[m];,2,0,1,1,2,0,0,0,0,5,26,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,71,        secondary = new double[m - 1];,4,1,0,1,2,0,0,0,0,6,30,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,72,        cachedQ   = null;,2,0,0,0,0,0,8,0,0,11,17,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,73,        cachedQt  = null;,0,0,0,0,0,0,0,0,0,0,17,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,74,        cachedT   = null;,0,0,0,0,0,0,0,0,0,0,17,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,77,        transform();,0,0,0,1,2,0,2,0,0,2,12,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,78,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,86,        if (cachedQ == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,87,            cachedQ = getQT().transpose();,2,0,0,2,4,0,4,0,0,7,30,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,89,        return cachedQ;,2,0,0,0,0,1,0,0,0,2,15,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,98,        if (cachedQt == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,99,            final int m = householderVectors.length;,0,0,0,0,0,0,0,0,0,0,40,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,100,            double[][] qta = new double[m][m];,2,0,1,4,8,0,0,0,0,6,34,7,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,103,            for (int k = m - 1; k >= 1; --k) {,8,2,0,1,3,0,0,0,0,11,34,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,126,            qta[0][0] = 1;,2,0,0,2,4,0,0,0,0,2,14,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,127,            cachedQt = MatrixUtils.createRealMatrix(qta);,0,0,0,1,2,0,0,0,0,3,45,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,131,        return cachedQt;,4,0,0,0,0,1,0,0,0,4,16,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,175,        return main;,2,0,0,0,0,1,0,0,0,2,12,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,185,        return secondary;,2,0,0,0,0,1,0,0,0,2,17,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,193,        final int m = householderVectors.length;,6,0,0,0,0,1,0,0,0,7,40,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,194,        final double[] z = new double[m];,2,0,1,2,4,1,0,0,0,5,33,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,195,        for (int k = 0; k < m - 1; k++) {,10,3,0,1,3,0,0,0,0,14,33,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,252,        main[m - 1] = householderVectors[m - 1][m - 1];,6,3,1,3,6,0,0,0,0,14,47,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,253,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,99,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_PREFIX, DEFAULT_ROW_SUFFIX,",0,0,0,0,1,0,0,0,0,1,76,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,101,    },2,0,0,0,1,0,0,0,0,2,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,115,"        this(prefix, suffix, rowPrefix, rowSuffix, rowSeparator, columnSeparator,",14,0,0,0,1,0,0,0,0,15,73,0,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,117,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,133,                            final NumberFormat format) {,8,4,0,0,2,1,0,2,0,15,28,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,134,        this.prefix            = prefix;,4,0,0,0,0,0,0,0,0,5,32,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,135,        this.suffix            = suffix;,0,0,0,0,0,0,0,0,0,0,32,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,136,        this.rowPrefix         = rowPrefix;,6,0,0,0,0,1,2,0,0,10,35,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,137,        this.rowSuffix         = rowSuffix;,4,0,0,0,0,0,0,0,0,5,35,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,138,        this.rowSeparator      = rowSeparator;,6,0,0,0,0,0,4,0,0,12,38,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,139,        this.columnSeparator   = columnSeparator;,4,0,0,0,0,0,0,0,0,5,41,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,140,        this.format            = format;,0,0,0,0,0,0,0,0,0,0,32,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,142,        this.format.setGroupingUsed(false);,8,1,0,1,2,0,2,0,0,13,35,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,143,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,207,        return format;,2,0,0,0,0,1,0,0,0,2,14,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,215,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,40,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,224,        return new RealMatrixFormat(CompositeFormat.getDefaultNumberFormat(locale));,0,0,0,2,4,1,6,2,0,8,76,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,430,                final ArrayRealVector[] eigenvectors) {,0,0,0,1,4,0,0,0,0,5,39,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,431,            this.realEigenvalues = realEigenvalues;,4,0,0,0,0,0,0,0,0,5,39,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,432,            this.imagEigenvalues = imagEigenvalues;,0,0,0,0,0,0,0,0,0,0,39,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,433,            this.eigenvectors = eigenvectors;,4,0,0,0,0,0,0,0,0,5,33,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,434,        },4,0,0,0,1,0,0,0,0,5,1,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,413,    private static class Solver implements DecompositionSolver {,0,0,0,0,1,0,0,0,0,1,60,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,516,            for (int i = 0; i < realEigenvalues.length; ++i) {,12,1,0,1,3,0,0,0,0,15,50,0,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,517,                if (realEigenvalues[i] == 0 &&,0,0,0,1,3,0,0,0,0,4,30,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,522,            return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,532,            if (!isNonSingular()) {,0,0,0,2,5,0,0,0,0,7,23,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,536,            final int m = realEigenvalues.length;,8,0,0,0,0,1,0,0,0,9,37,1,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,537,            final double[][] invData = new double[m][m];,2,0,1,4,8,1,0,0,0,7,44,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,539,            for (int i = 0; i < m; ++i) {,0,0,0,1,3,0,0,0,0,4,29,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,540,                final double[] invI = invData[i];,2,0,1,2,4,1,0,0,0,7,33,7,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,541,                for (int j = 0; j < m; ++j) {,0,0,0,1,3,0,0,0,0,4,29,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,542,                    double invIJ = 0;,2,0,0,0,0,0,0,0,0,2,17,10,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,543,                    for (int k = 0; k < m; ++k) {,8,1,0,1,3,0,0,0,0,10,29,9,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,544,                        final double[] vK = eigenvectors[k].getDataRef();,2,0,1,3,6,1,2,0,0,9,49,11,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,545,                        invIJ += vK[i] * vK[j] / realEigenvalues[k];,2,2,1,3,6,0,0,0,0,17,44,11,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,547,                    invI[j] = invIJ;,8,0,1,1,2,0,0,0,0,14,16,1,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,550,            return MatrixUtils.createRealMatrix(invData);,0,0,0,1,2,1,6,0,0,6,45,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,52,    public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();,0,0,0,1,2,0,0,0,0,3,85,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,58,"    public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(""["", ""]"", """", """", ""; "", "", "");",2,0,0,2,4,3,0,4,0,15,104,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,130,        if (data == null ||,2,2,0,0,1,0,0,0,0,4,19,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,134,        return (data.length * data[0].length <= 4096) ?,10,2,1,2,4,1,0,2,0,22,47,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,391,        final int rows = matrix.getRowDimension();,4,0,1,1,2,1,4,0,0,13,42,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,392,        if (rows != matrix.getColumnDimension()) {,0,0,0,2,5,0,0,0,0,7,42,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,399,        for (int i = 0; i < rows; i++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,400,            for (int j = i + 1; j < rows; j++) {,10,2,1,1,3,0,0,0,0,18,36,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,413,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,440,"        return isSymmetricInternal(matrix, eps, false);",0,0,0,1,2,1,6,0,0,7,47,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,455,"        checkRowIndex(m, row);",0,0,0,1,2,0,0,0,0,3,22,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,456,"        checkColumnIndex(m, column);",0,0,0,1,2,0,0,0,0,3,28,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,457,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,468,        if (row < 0 ||,2,2,0,0,1,0,0,0,0,4,14,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,473,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,484,        if (column < 0 || column >= m.getColumnDimension()) {,4,3,0,2,5,0,4,0,0,11,53,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,488,    },4,0,0,0,1,3,0,0,0,8,1,0,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,607,        if (left.getColumnDimension() != right.getRowDimension()) {,0,1,0,3,7,0,8,0,0,9,59,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,611,    },4,0,0,0,1,0,0,0,0,6,1,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,118,        throws MathArithmeticException {,0,0,0,0,1,0,0,0,0,1,32,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,81,    private byte maxIter = 30;,2,0,0,0,0,1,0,0,0,3,26,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,119,        final double symTol = 10 * matrix.getRowDimension() * matrix.getColumnDimension() * Precision.EPSILON;,0,0,0,2,4,0,0,0,0,6,102,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,120,"        isSymmetric = MatrixUtils.isSymmetric(matrix, symTol);",0,0,0,1,2,0,0,0,0,3,54,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,121,        if (isSymmetric) {,6,1,0,1,3,0,0,0,0,7,18,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,122,            transformToTridiagonal(matrix);,0,0,0,1,2,0,4,0,0,4,31,7,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,123,            findEigenVectors(transformer.getQ().getData());,0,0,0,3,6,0,8,0,0,8,47,7,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,128,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,272,        for (int i = 0; i < imagEigenvalues.length; i++) {,10,1,0,1,3,0,0,0,0,12,50,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,273,"            if (!Precision.equals(imagEigenvalues[i], 0.0, EPSILON)) {",0,0,1,3,7,0,6,0,0,11,58,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,277,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,290,        return realEigenvalues.clone();,0,0,0,1,2,1,4,0,0,4,31,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,348,        return eigenvectors[i].copy();,0,0,1,2,4,1,2,0,0,6,30,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,357,        double determinant = 1;,0,0,0,0,0,0,0,0,0,0,23,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,358,        for (double lambda : realEigenvalues) {,0,0,0,1,3,0,0,0,0,4,39,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,359,            determinant *= lambda;,0,0,0,0,0,0,0,0,0,0,22,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,361,        return determinant;,4,0,0,0,0,1,0,0,0,5,19,0,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,406,        if (hasComplexEigenvalues()) {,2,0,0,2,5,0,2,0,0,5,30,0,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,409,"        return new Solver(realEigenvalues, imagEigenvalues, eigenvectors);",8,0,0,1,2,1,0,2,0,11,66,0,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,561,        transformer = new TriDiagonalTransformer(matrix);,4,0,0,1,2,0,0,2,0,7,49,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,562,        main = transformer.getMainDiagonalRef();,0,0,0,1,2,0,0,0,0,3,40,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,563,        secondary = transformer.getSecondaryDiagonalRef();,2,0,0,1,2,0,4,0,0,7,50,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,564,    },2,1,0,0,1,0,0,0,0,3,1,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,573,        final double[][]z = householderMatrix.clone();,0,0,0,3,6,0,0,0,0,9,46,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,574,        final int n = main.length;,6,0,0,0,0,1,0,0,0,7,26,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,575,        realEigenvalues = new double[n];,0,0,0,1,2,0,0,0,0,3,32,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,576,        imagEigenvalues = new double[n];,2,0,1,1,2,0,0,0,0,5,32,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,577,        final double[] e = new double[n];,2,0,1,2,4,1,0,0,0,5,33,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,578,        for (int i = 0; i < n - 1; i++) {,8,2,0,1,3,0,0,0,0,11,33,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,582,        realEigenvalues[n - 1] = main[n - 1];,10,3,1,2,4,0,6,0,0,25,37,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,583,        e[n - 1] = 0;,0,0,0,1,2,0,0,0,0,3,13,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,586,        double maxAbsoluteValue = 0;,2,0,0,0,0,0,6,0,0,8,28,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,587,        for (int i = 0; i < n; i++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,588,            if (FastMath.abs(realEigenvalues[i]) > maxAbsoluteValue) {,2,1,0,3,7,0,14,0,0,18,58,11,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,589,                maxAbsoluteValue = FastMath.abs(realEigenvalues[i]);,4,1,1,2,4,0,4,0,0,14,52,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,591,            if (FastMath.abs(e[i]) > maxAbsoluteValue) {,2,1,1,3,7,0,4,0,0,11,44,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,596,        if (maxAbsoluteValue != 0) {,2,0,0,1,3,0,0,0,0,2,28,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,597,            for (int i=0; i < n; i++) {,0,0,0,1,3,0,0,0,0,4,27,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,598,                if (FastMath.abs(realEigenvalues[i]) <= Precision.EPSILON * maxAbsoluteValue) {,0,0,0,3,7,0,0,0,0,10,79,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,601,                if (FastMath.abs(e[i]) <= Precision.EPSILON * maxAbsoluteValue) {,0,0,0,3,7,0,0,0,0,10,65,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,602,                    e[i]=0;,0,0,1,1,2,0,0,0,0,5,7,10,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,607,        for (int j = 0; j < n; j++) {,10,2,0,1,3,0,0,0,0,13,29,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,608,            int its = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,611,                for (m = j; m < n - 1; m++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,618,                if (m != j) {,10,2,0,1,3,0,0,0,0,13,13,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,674,            } while (m != j);,0,0,0,1,3,0,0,0,0,4,17,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,678,        for (int i = 0; i < n; i++) {,8,1,0,1,3,0,0,0,0,10,29,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,679,            int k = i;,0,0,0,0,0,0,0,0,0,0,10,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,680,            double p = realEigenvalues[i];,2,0,1,1,2,0,0,0,0,6,30,7,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,681,            for (int j = i + 1; j < n; j++) {,10,2,0,1,3,0,0,0,0,13,33,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,687,            if (k != i) {,0,0,0,1,3,0,0,0,0,4,13,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,699,        maxAbsoluteValue = 0;,2,0,0,0,0,0,0,0,0,3,21,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,700,        for (int i = 0; i < n; i++) {,8,1,0,1,3,0,0,0,0,10,29,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,701,            if (FastMath.abs(realEigenvalues[i]) > maxAbsoluteValue) {,2,1,1,3,7,0,4,0,0,11,58,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,702,                maxAbsoluteValue=FastMath.abs(realEigenvalues[i]);,2,0,1,2,4,0,4,0,0,11,50,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,706,        if (maxAbsoluteValue != 0.0) {,0,0,0,1,3,0,0,0,0,4,30,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,707,            for (int i=0; i < n; i++) {,0,0,0,1,3,0,0,0,0,4,27,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,708,                if (FastMath.abs(realEigenvalues[i]) < Precision.EPSILON * maxAbsoluteValue) {,6,2,1,3,7,0,4,0,0,16,78,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,713,        eigenvectors = new ArrayRealVector[n];,6,1,1,1,2,0,2,2,0,28,38,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,714,        final double[] tmp = new double[n];,0,0,0,2,4,0,0,0,0,6,35,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,715,        for (int i = 0; i < n; i++) {,10,1,0,1,3,3,0,0,0,15,29,1,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,716,            for (int j = 0; j < n; j++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,717,                tmp[j] = z[j][i];,0,0,1,3,6,0,0,0,0,11,17,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,719,            eigenvectors[i] = new ArrayRealVector(tmp);,4,1,1,2,4,0,0,2,0,12,43,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,721,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,246,        random.setSeed(seed);,0,0,0,1,2,0,6,0,0,6,21,5,0.42857,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,247,        randomData.reSeed(seed);,0,0,0,1,2,0,0,0,0,3,24,4,0.42857,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,248,    },0,0,0,0,1,0,0,0,0,1,1,4,0.42857,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,461,        delegate.reSeed(seed);,0,0,0,1,2,0,6,0,0,6,22,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,462,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,648,       getRan().setSeed(seed);,2,0,0,2,4,0,20,0,0,22,23,3,0.33333,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,649,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,374,        if (shape < 1) {,0,0,0,1,3,0,0,0,0,4,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,413,        final double d = shape - 0.333333333333333333;,4,1,0,0,0,1,0,0,0,6,46,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,414,        final double c = 1 / (3 * FastMath.sqrt(d));,0,0,0,2,4,0,0,0,0,6,44,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,417,            final double x = random.nextGaussian();,6,1,0,1,2,1,8,0,0,17,39,3,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,418,            final double v = (1 + c * x) * (1 + c * x) * (1 + c * x);,14,7,0,3,6,1,0,0,0,22,57,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,420,            if (v <= 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,424,            final double x2 = x * x;,6,1,0,0,0,1,0,0,0,8,24,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,425,            final double u = random.nextDouble();,2,0,0,1,2,1,4,0,0,7,37,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,428,            if (u < 1 - 0.0331 * x2 * x2) {,6,3,0,1,3,0,0,0,0,9,31,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,429,                return scale * d * v;,6,1,0,0,0,1,0,0,0,7,21,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,432,            if (FastMath.log(u) < 0.5 * x2 + d * (1 - v + FastMath.log(v))) {,0,0,0,4,9,0,0,0,0,13,65,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,433,                return scale * d * v;,6,1,0,0,0,1,0,0,0,7,21,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,311,        final double n = random.nextGaussian();,8,1,0,1,2,2,4,0,0,15,39,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,312,        return FastMath.exp(scale + shape * n);,0,0,0,1,2,1,0,0,0,4,39,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,79,"        super(K, M1, M2, M3, seed);",10,0,0,1,2,0,0,0,0,10,27,4,0.31034,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,80,    },2,0,0,0,1,0,0,0,0,2,1,6,0.31034,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,714,        if (rand == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.31034,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,715,            initRan();,0,0,0,1,2,0,2,0,0,2,10,7,0.31034,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,717,        return rand;,2,0,0,0,0,1,0,0,0,2,12,4,0.31034,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,725,        rand = new Well19937c(System.currentTimeMillis() + System.identityHashCode(this));,6,2,1,3,6,0,8,2,0,24,82,3,0.31034,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,726,    },0,0,0,0,1,0,0,0,0,1,1,4,0.31034,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,132,"        this(k, m1, m2, m3, new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",12,2,0,7,14,0,0,0,0,14,83,4,0.25,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,133,    },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,86,        final int indexRm1 = iRm1[index];,2,0,1,1,2,1,0,0,0,7,33,4,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,87,        final int indexRm2 = iRm2[index];,2,0,1,1,2,1,0,0,0,7,33,4,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,89,        final int v0       = v[index];,4,0,1,1,2,4,0,4,0,16,30,1,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,90,        final int vM1      = v[i1[index]];,8,2,1,2,4,1,4,0,0,22,34,3,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,91,        final int vM2      = v[i2[index]];,2,0,1,2,4,1,0,0,0,9,34,4,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,92,        final int vM3      = v[i3[index]];,2,0,1,2,4,1,0,0,0,9,34,4,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,94,        final int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);,4,3,1,4,8,1,0,0,0,16,71,1,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,95,        final int z1 = (v0 ^ (v0 << 25))  ^ (vM1 ^ (vM1 >>> 27));,10,5,0,4,8,1,0,0,0,16,57,4,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,96,        final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));,8,4,0,3,6,1,0,0,0,13,49,4,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,97,        final int z3 = z1      ^ z2;,12,2,0,0,0,1,0,0,0,16,28,3,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,98,        int z4 = z0 ^ (z1 ^ (z1 << 9)) ^ (z2 ^ (z2 << 21)) ^ (z3 ^ (z3 >>> 21));,16,7,0,6,12,0,0,0,0,23,72,5,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,100,        v[index]     = z3;,2,0,1,1,2,0,0,0,0,7,18,4,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,101,        v[indexRm1]  = z4;,2,0,1,1,2,0,0,0,0,7,18,4,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,102,        v[indexRm2] &= 0x80000000;,0,0,1,1,2,0,0,0,0,5,26,4,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,103,        index        = indexRm1;,0,0,0,0,0,0,0,0,0,0,24,4,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,108,        z4 = z4 ^ ((z4 <<  7) & 0xe46e1700);,6,3,0,2,4,0,0,0,0,10,36,4,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,109,        z4 = z4 ^ ((z4 << 15) & 0x9b868000);,6,3,0,2,4,0,0,0,0,10,36,4,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,111,        return z4 >>> (32 - bits);,0,0,0,1,2,1,0,0,0,4,26,4,0.225,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,63,        super(optimizer);,2,0,0,1,2,0,0,0,0,2,17,4,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,64,        degree = -1; // To avoid compilation error until the instance variable is removed.,2,0,0,0,0,0,0,0,0,4,82,4,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,65,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,110,"        return fit(new PolynomialFunction.Parametric(), guess);",4,0,0,2,4,1,4,0,0,8,55,5,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,69,        super();,2,0,0,1,2,0,2,0,0,4,8,5,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,70,        MathUtils.checkNotNull(c);,0,0,0,1,2,0,6,0,0,6,26,5,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,71,        int n = c.length;,6,0,0,0,0,0,0,0,0,6,17,5,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,72,        if (n == 0) {,4,1,0,1,3,0,4,0,0,9,13,3,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,75,        while ((n > 1) && (c[n - 1] == 0)) {,4,4,1,4,9,0,0,0,0,10,36,4,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,78,        this.coefficients = new double[n];,2,0,1,1,2,0,0,0,0,5,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,79,"        System.arraycopy(c, 0, this.coefficients, 0, n);",0,0,0,1,2,0,0,0,0,3,48,4,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,80,    },4,1,1,0,1,0,4,0,0,18,1,3,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,94,"       return evaluate(coefficients, x);",0,0,0,1,2,1,0,0,0,4,33,4,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,395,    public static class Parametric implements ParametricUnivariateFunction {,2,0,0,0,1,2,0,2,0,6,72,2,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,130,        MathUtils.checkNotNull(coefficients);,0,0,0,1,2,0,6,0,0,6,37,5,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,131,        int n = coefficients.length;,6,0,0,0,0,0,0,0,0,6,28,5,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,132,        if (n == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,135,        double result = coefficients[n - 1];,6,1,1,1,2,0,0,0,0,11,36,3,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,136,        for (int j = n - 2; j >= 0; j--) {,8,2,0,1,3,0,0,0,0,11,34,4,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,139,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.125,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,153,"        return fit(Integer.MAX_VALUE, f, initialGuess);",6,0,0,1,2,1,12,0,0,19,47,3,0.05,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,210,        public OldTheoreticalValuesFunction(final ParametricUnivariateFunction f) {,4,0,0,1,3,2,0,2,0,8,75,3,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,211,            this.f = f;,4,0,0,0,0,0,0,0,0,5,11,5,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,212,        },0,0,0,0,1,0,0,0,0,1,1,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,176,        double[] target  = new double[observations.size()];,2,0,0,3,6,0,4,0,0,6,51,5,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,177,        double[] weights = new double[observations.size()];,2,0,0,3,6,0,4,0,0,6,51,5,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,178,        int i = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,179,        for (WeightedObservedPoint point : observations) {,4,0,0,1,3,0,0,2,0,6,50,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,180,            target[i]  = point.getY();,0,0,1,2,4,0,4,0,0,9,26,6,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,181,            weights[i] = point.getWeight();,0,0,1,2,4,0,4,0,0,9,31,6,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,182,            ++i;,2,0,0,0,0,0,0,0,0,3,4,6,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,183,        },0,0,0,0,1,0,0,0,0,1,1,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,187,        if (optimizer == null) {,2,1,0,1,3,0,0,0,0,3,24,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,189,"            optimum = oldOptimizer.optimize(maxEval, new OldTheoreticalValuesFunction(f),",4,0,0,1,3,0,6,2,0,13,77,6,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,59,        return weight;,0,0,0,0,0,1,0,0,0,1,14,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,423,"        return optimizeInternal(maxEval,",2,0,0,0,1,3,4,0,0,8,32,1,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,62,@Deprecated,2,0,0,0,0,0,0,0,0,2,11,2,0.04348,1,1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,109,"        observations.add(new WeightedObservedPoint(weight, x, y));",6,0,0,2,4,0,4,2,0,12,58,5,0.04167,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,110,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04167,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,73,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.04167,0,0
defect4j,math,org/apache/commons/math3/fitting/PolynomialFitter,14,37,        super(optimizer);,2,0,0,1,2,0,0,0,0,2,17,4,0.125,0,0
defect4j,math,org/apache/commons/math3/fitting/PolynomialFitter,14,38,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0
defect4j,math,org/apache/commons/math3/fitting/PolynomialFitter,14,68,"        return fit(new PolynomialFunction.Parametric(), guess);",4,0,0,2,4,1,4,0,0,8,55,5,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,69,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,70,        MathUtils.checkNotNull(c);,0,0,0,1,2,0,6,0,0,6,26,5,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,71,        int n = c.length;,6,0,0,0,0,0,0,0,0,6,17,5,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,72,        if (n == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,75,        while ((n > 1) && (c[n - 1] == 0)) {,6,4,1,4,9,0,4,0,0,16,36,3,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,78,        this.coefficients = new double[n];,0,0,0,1,2,0,0,0,0,3,34,4,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,79,"        System.arraycopy(c, 0, this.coefficients, 0, n);",2,0,0,1,2,0,8,0,0,10,48,5,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,80,    },2,0,0,0,1,0,0,0,0,2,1,4,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,94,"       return evaluate(coefficients, x);",0,0,0,1,2,1,0,0,0,4,33,4,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,395,    public static class Parametric implements ParametricUnivariateFunction {,2,0,0,0,1,2,0,2,0,6,72,2,0.09091,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,130,        MathUtils.checkNotNull(coefficients);,0,0,0,1,2,0,6,0,0,6,37,5,0.09091,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,131,        int n = coefficients.length;,6,0,0,0,0,0,0,0,0,6,28,5,0.09091,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,132,        if (n == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,135,        double result = coefficients[n - 1];,4,1,1,1,2,0,0,0,0,7,36,5,0.09091,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,136,        for (int j = n - 2; j >= 0; j--) {,8,2,0,1,3,0,0,0,0,11,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,139,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,136,"        return fit(Integer.MAX_VALUE, f, initialGuess);",4,0,0,1,2,1,6,0,0,10,47,5,0.04348,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,98,"        super(rows, columns);",0,0,0,1,2,0,0,0,0,3,21,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,99,        this.rows = rows;,0,0,0,0,0,0,0,0,0,0,17,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,100,        this.columns = columns;,6,0,0,0,0,1,0,0,0,7,23,6,0.04348,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,103,        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;,8,3,0,1,2,0,0,0,0,12,49,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,104,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,6,0,0,1,2,1,0,4,0,11,55,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,107,"        blocks = createBlocksLayout(rows, columns);",0,0,0,1,2,0,0,0,0,3,43,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,258,        final int blockRows = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,14,8,0,1,2,1,6,0,0,30,62,3,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,259,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,8,3,0,1,2,1,0,0,0,12,65,4,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,261,        final double[][] blocks = new double[blockRows * blockColumns][];,6,1,0,4,8,1,0,0,0,8,65,4,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,262,        int blockIndex = 0;,2,0,0,0,0,0,0,0,0,2,19,5,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,263,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,8,1,0,1,3,0,0,0,0,10,52,4,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,264,            final int pStart = iBlock * BLOCK_SIZE;,6,1,0,0,0,1,0,0,0,8,39,6,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,265,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",6,1,0,1,2,1,6,0,0,14,57,6,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,266,            final int iHeight = pEnd - pStart;,0,0,0,0,0,0,0,0,0,0,34,4,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,267,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,8,1,0,1,3,0,6,0,0,16,55,3,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,268,                final int qStart = jBlock * BLOCK_SIZE;,6,1,0,0,0,1,6,0,0,14,39,3,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,269,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",6,1,0,1,2,1,6,0,0,14,60,8,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,270,                final int jWidth = qEnd - qStart;,6,1,0,0,0,1,0,0,0,8,33,8,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,271,                blocks[blockIndex] = new double[iHeight * jWidth];,4,1,1,2,4,0,0,0,0,10,50,8,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,272,                ++blockIndex;,0,0,0,0,0,0,0,0,0,0,13,4,0.04,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,159,        double[] target  = new double[observations.size()];,2,0,0,3,6,0,4,0,0,6,51,5,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,160,        double[] weights = new double[observations.size()];,2,0,0,3,6,0,4,0,0,6,51,5,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,161,        int i = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,162,        for (WeightedObservedPoint point : observations) {,4,0,0,1,3,0,0,2,0,6,50,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,163,            target[i]  = point.getY();,0,0,1,2,4,0,4,0,0,9,26,6,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,164,            weights[i] = point.getWeight();,0,0,1,2,4,0,4,0,0,9,31,6,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,165,            ++i;,2,0,0,0,0,0,0,0,0,3,4,6,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,166,        },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,169,        final TheoreticalValuesFunction model = new TheoreticalValuesFunction(f);,4,0,0,1,2,1,0,4,0,9,73,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,172,        final PointVectorValuePair optimum,2,0,0,0,0,1,0,2,0,5,34,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,57,        return weight;,2,0,0,0,0,1,0,0,0,2,14,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,218,            return new ModelFunctionJacobian(new MultivariateMatrixFunction() {,0,0,0,1,4,1,0,4,0,4,67,6,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,191,        public TheoreticalValuesFunction(final ParametricUnivariateFunction f) {,0,0,0,1,3,0,0,0,0,4,72,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,192,            this.f = f;,0,0,0,0,0,0,0,0,0,0,11,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,193,        },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,199,            return new ModelFunction(new MultivariateVectorFunction() {,0,0,0,1,4,1,0,4,0,4,59,6,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,218,            return new ModelFunctionJacobian(new MultivariateMatrixFunction() {,0,0,0,1,4,1,0,4,0,4,67,6,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,199,            return new ModelFunction(new MultivariateVectorFunction() {,0,0,0,1,4,1,0,4,0,4,59,6,0.03846,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1542,"                return pow(-x, y);",4,0,0,1,2,1,4,0,0,10,18,3,1.0,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,131,    public MersenneTwister(long seed) {,4,0,0,1,3,1,0,0,0,5,35,2,0.02174,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,132,        mt = new int[N];,2,0,1,1,2,0,0,0,0,5,16,4,0.02174,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,133,        setSeed(seed);,0,0,0,1,2,0,4,0,0,4,14,5,0.02174,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,134,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02174,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,94,"    private static final int[] MAG01 = { 0x0, 0x9908b0df };",2,0,0,2,4,3,0,0,0,5,55,2,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,144,        long longMT = seed;,4,0,0,0,0,0,0,0,0,4,19,5,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,146,        mt[0]= (int) longMT;,6,0,1,2,4,0,0,0,0,10,20,3,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,147,        for (mti = 1; mti < N; ++mti) {,8,1,0,1,3,0,0,0,0,11,31,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,150,            longMT = (1812433253l * (longMT ^ (longMT >> 30)) + mti) & 0xffffffffL;,0,0,0,3,6,0,0,0,0,9,71,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,151,            mt[mti]= (int) longMT;,4,1,0,2,4,0,0,2,0,7,22,2,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,154,        clear(); // Clear normal deviate cache,0,0,0,1,2,0,2,0,0,2,38,5,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,155,    },4,0,0,0,1,0,8,0,0,12,1,7,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,167,        if (seed == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,172,        setSeed(19650218);,0,0,0,1,2,0,0,0,0,3,18,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,173,        int i = 1;,2,0,0,0,0,0,0,0,0,2,10,5,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,174,        int j = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,176,"        for (int k = FastMath.max(N, seed.length); k != 0; k--) {",10,1,0,2,5,0,6,0,0,18,57,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,177,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,2,3,1,5,10,0,0,0,0,13,73,7,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,178,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,6,5,1,5,10,0,0,0,0,15,73,7,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,179,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1664525l)) + seed[j] + j; // non linear,10,5,1,5,10,0,0,0,0,19,76,7,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,180,            mt[i]   = (int) (l & 0xffffffffl);,2,1,1,3,6,0,0,0,0,8,34,6,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,181,            i++; j++;,4,0,0,0,0,0,0,0,0,6,9,6,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,182,            if (i >= N) {,4,1,0,1,3,0,0,0,0,5,13,6,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,183,                mt[0] = mt[N - 1];,2,1,1,2,4,0,0,0,0,8,18,8,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,184,                i = 1;,2,0,0,0,0,0,0,0,0,3,6,8,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,186,            if (j >= seed.length) {,6,1,0,1,3,0,0,0,0,7,23,6,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,187,                j = 0;,0,0,0,0,0,0,0,0,0,0,6,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,191,        for (int k = N - 1; k != 0; k--) {,8,2,0,1,3,0,0,0,0,11,34,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,192,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,2,3,1,5,10,0,0,0,0,13,73,7,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,193,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,0,0,0,5,10,0,0,0,0,15,73,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,194,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1566083941l)) - i; // non linear,10,5,0,4,8,0,0,0,0,15,69,7,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,195,            mt[i]   = (int) (l & 0xffffffffL);,2,1,1,3,6,0,0,0,0,8,34,6,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,196,            i++;,2,0,0,0,0,0,0,0,0,3,4,6,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,197,            if (i >= N) {,0,0,0,1,3,0,0,0,0,4,13,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,198,                mt[0] = mt[N - 1];,0,0,0,2,4,0,0,0,0,6,18,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,199,                i = 1;,2,0,0,0,0,0,0,0,0,3,6,8,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,203,        mt[0] = 0x80000000; // MSB is 1; assuring non-zero initial array,0,0,0,1,2,0,0,0,0,3,64,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,205,        clear(); // Clear normal deviate cache,2,0,0,1,2,0,2,0,0,4,38,3,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,207,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,216,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",5,2,0,7,14,3,2,0,0,12,71,1,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,217,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1541,            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {,8,3,0,1,3,0,0,0,0,12,46,6,0.0137,1,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1087,            switch (rmode) {,4,0,0,1,3,2,0,2,0,8,16,2,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,202,"        this(field, (long) x);",0,0,0,2,4,0,0,0,0,6,22,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,203,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,209,"    protected Dfp(final DfpField field, long x) {",14,0,0,1,3,3,0,4,0,22,45,2,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,212,        mant = new int[field.getRadixDigits()];,2,0,0,2,4,0,4,0,0,7,39,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,213,        nans = FINITE;,0,0,0,0,0,0,0,0,0,0,14,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,214,        this.field = field;,4,0,0,0,0,0,0,0,0,5,19,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,216,        boolean isLongMin = false;,2,0,0,0,0,0,0,0,0,3,26,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,217,        if (x == Long.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,26,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,225,        if (x < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,226,            sign = -1;,12,2,0,0,0,0,0,0,0,16,10,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,227,            x = -x;,4,0,0,0,0,0,0,0,0,6,7,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,229,            sign = 1;,2,0,0,0,0,0,0,0,0,3,9,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,232,        exp = 0;,2,0,0,0,0,0,0,0,0,3,8,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,233,        while (x != 0) {,2,0,0,1,3,0,0,0,0,2,16,9,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,234,"            System.arraycopy(mant, mant.length - exp, mant, mant.length - 1 - exp, exp);",0,0,0,1,2,0,0,0,0,3,76,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,235,            mant[mant.length - 1] = (int) (x % RADIX);,12,5,1,3,6,0,0,0,0,20,42,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,236,            x /= RADIX;,0,0,0,0,0,0,0,0,0,0,11,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,237,            exp++;,2,0,0,0,0,0,0,0,0,3,6,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,240,        if (isLongMin) {,2,0,0,1,3,0,0,0,0,2,16,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,250,    },2,0,0,0,1,2,0,0,0,4,1,1,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,322,    public Dfp(final Dfp d) {,4,0,0,1,3,2,0,2,0,8,25,2,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,323,        mant  = d.mant.clone();,6,0,0,1,2,0,2,0,0,9,23,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,324,        sign  = d.sign;,6,0,0,0,0,0,0,0,0,7,15,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,325,        exp   = d.exp;,10,1,0,0,0,1,0,0,0,13,14,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,326,        nans  = d.nans;,6,0,0,0,0,0,0,0,0,7,15,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,327,        field = d.field;,6,0,0,0,0,0,0,0,0,7,16,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,328,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,334,"    protected Dfp(final DfpField field, final String s) {",0,0,0,1,3,0,0,0,0,4,53,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,337,        mant = new int[field.getRadixDigits()];,2,0,0,2,4,0,4,0,0,7,39,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,338,        sign = 1;,2,0,0,0,0,0,0,0,0,3,9,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,339,        exp = 0;,2,0,0,0,0,0,0,0,0,3,8,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,340,        nans = FINITE;,8,0,0,0,0,0,0,0,0,10,14,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,341,        this.field = field;,0,0,0,0,0,0,0,0,0,0,19,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,343,        boolean decimalFound = false;,0,0,0,0,0,0,0,0,0,0,29,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,344,        final int rsize = 4;   // size of radix in decimal digits,2,0,0,0,0,1,0,0,0,3,57,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,345,        final int offset = 4;  // Starting offset into Striped,2,0,0,0,0,1,0,0,0,3,54,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,346,        final char[] striped = new char[getRadixDigits() * rsize + offset * 2];,0,0,0,3,6,0,0,0,0,9,71,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,349,        if (s.equals(POS_INFINITY_STRING)) {,0,0,0,2,5,0,0,0,0,7,36,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,355,        if (s.equals(NEG_INFINITY_STRING)) {,0,0,0,2,5,0,6,0,0,6,36,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,361,        if (s.equals(NAN_STRING)) {,2,3,0,2,5,0,12,0,0,17,27,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,368,"        int p = s.indexOf(""e"");",0,0,0,1,2,0,0,0,0,3,23,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,369,        if (p == -1) { // try upper case?,2,1,0,1,3,0,0,0,0,4,33,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,370,"            p = s.indexOf(""E"");",2,0,0,1,2,0,4,0,0,8,19,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,374,        int sciexp = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,375,        if (p != -1) {,2,1,0,1,3,0,0,0,0,4,14,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,398,            fpdecimal = s;,4,0,0,0,0,0,0,0,0,5,14,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,402,"        if (fpdecimal.indexOf(""-"") !=  -1) {",0,0,0,2,5,0,0,0,0,7,36,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,407,        p = 0;,4,0,0,0,0,1,2,0,0,8,6,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,410,        int decimalPos = 0;,2,0,0,0,0,0,0,0,0,2,19,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,412,            if (fpdecimal.charAt(p) >= '1' && fpdecimal.charAt(p) <= '9') {,0,3,0,3,7,0,12,0,0,17,63,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,413,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,416,            if (decimalFound && fpdecimal.charAt(p) == '0') {,0,0,0,2,5,0,0,0,0,7,49,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,417,                decimalPos--;,0,0,0,0,0,0,0,0,0,0,13,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,420,            if (fpdecimal.charAt(p) == '.') {,0,0,0,2,5,0,0,0,0,7,33,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,421,                decimalFound = true;,0,0,0,0,0,0,0,0,0,0,20,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,424,            p++;,0,0,0,0,0,3,0,0,0,3,4,2,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,426,            if (p == fpdecimal.length()) {,0,0,0,2,5,0,0,0,0,7,30,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,432,        int q = offset;,0,0,0,0,0,0,0,0,0,0,15,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,433,        striped[0] = '0';,0,0,1,1,2,0,0,0,0,4,17,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,434,        striped[1] = '0';,0,0,1,1,2,0,0,0,0,4,17,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,435,        striped[2] = '0';,0,0,1,1,2,0,0,0,0,4,17,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,436,        striped[3] = '0';,0,0,1,1,2,0,0,0,0,4,17,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,437,        int significantDigits=0;,0,0,0,0,0,0,0,0,0,0,24,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,439,            if (p == (fpdecimal.length())) {,2,0,0,3,7,0,0,0,0,2,32,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,440,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,444,            if (q == mant.length*rsize+offset+1) {,0,0,0,1,3,0,0,0,0,4,38,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,445,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,448,            if (fpdecimal.charAt(p) == '.') {,0,0,0,2,5,0,0,0,0,7,33,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,449,                decimalFound = true;,4,1,0,0,0,0,0,0,0,7,20,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,450,                decimalPos = significantDigits;,0,0,0,0,0,0,0,0,0,0,31,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,451,                p++;,14,4,0,0,0,1,0,0,0,20,4,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,452,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,455,            if (fpdecimal.charAt(p) < '0' || fpdecimal.charAt(p) > '9') {,0,0,0,3,7,0,0,0,0,10,61,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,460,            striped[q] = fpdecimal.charAt(p);,0,0,0,2,4,0,0,0,0,6,33,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,461,            q++;,4,1,0,0,0,0,4,0,0,10,4,1,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,462,            p++;,2,1,0,0,0,0,0,0,0,3,4,7,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,463,            significantDigits++;,2,0,0,0,0,0,0,0,0,3,20,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,468,        if (decimalFound && q != offset) {,6,2,0,1,3,0,0,0,0,8,34,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,470,                q--;,2,0,0,0,0,0,0,0,0,3,4,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,471,                if (q == offset) {,0,0,1,1,3,0,0,0,0,7,18,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,474,                if (striped[q] == '0') {,0,0,1,2,5,0,0,0,0,7,24,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,475,                    significantDigits--;,2,0,0,0,0,0,0,0,0,3,20,10,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,483,        if (decimalFound && significantDigits == 0) {,6,2,0,1,3,0,4,0,0,13,45,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,488,        if (!decimalFound) {,2,0,0,1,3,0,0,0,0,3,20,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,493,        q = offset;  // set q to point to first sig digit,0,0,0,0,0,0,0,0,0,0,49,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,494,        p = significantDigits-1+offset;,0,0,0,0,0,0,0,0,0,0,31,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,496,        while (p > q) {,0,0,0,1,3,0,0,0,0,4,15,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,497,            if (striped[p] != '0') {,0,1,1,2,5,0,0,0,0,6,24,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,498,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,504,        int i = ((rsize * 100) - decimalPos - sciexp % rsize) % rsize;,16,4,0,2,4,4,0,0,0,24,62,1,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,505,        q -= i;,4,0,0,0,0,0,0,0,0,5,7,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,506,        decimalPos += i;,4,0,0,0,0,0,0,0,0,5,16,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,509,        while ((p - q) < (mant.length * rsize)) {,0,0,0,3,7,0,0,0,0,10,41,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,510,            for (i = 0; i < rsize; i++) {,8,1,0,1,3,0,0,0,0,11,29,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,511,                striped[++p] = '0';,2,0,1,1,2,0,0,0,0,7,19,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,517,        for (i = mant.length - 1; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,14,40,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,518,            mant[i] = (striped[q]   - '0') * 1000 +,0,0,0,3,6,0,0,0,0,9,39,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,522,            q += 4;,4,0,0,0,0,0,4,2,0,12,7,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,526,        exp = (decimalPos+sciexp) / rsize;,8,2,0,1,2,0,0,0,0,11,34,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,528,        if (q < striped.length) {,0,0,0,1,3,0,0,0,0,4,25,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,530,            round((striped[q] - '0')*1000);,0,0,0,3,6,0,0,0,0,9,31,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,533,    },8,2,0,0,1,0,0,0,0,11,1,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,597,        if (field.getRadixDigits() != d.field.getRadixDigits()) {,0,0,0,3,7,0,0,0,0,10,57,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,604,        return new Dfp(d);,0,0,0,1,2,1,0,0,0,4,18,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,635,        return field;,0,0,0,0,0,1,0,0,0,1,13,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,642,        return field.getRadixDigits();,0,0,0,1,2,1,0,0,0,4,30,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,649,        return field.getZero();,0,0,0,1,2,1,4,0,0,4,23,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,669,        for (int i = mant.length - 1; i > 0; i--) {,12,2,0,1,3,3,0,0,0,19,43,1,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,670,            mant[i] = mant[i-1];,0,0,0,2,4,0,0,0,0,6,20,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,672,        mant[0] = 0;,2,0,0,1,2,0,0,0,0,3,12,2,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,673,        exp--;,2,0,0,0,0,0,0,0,0,3,6,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,674,    },2,1,1,0,1,0,4,0,0,16,1,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,681,        for (int i = 0; i < mant.length - 1; i++) {,10,2,0,1,3,0,0,0,0,13,43,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,682,            mant[i] = mant[i+1];,0,0,0,2,4,0,0,0,0,6,20,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,684,        mant[mant.length - 1] = 0;,0,0,0,1,2,0,0,0,0,3,26,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,685,        exp++;,2,1,0,0,0,0,14,0,0,18,6,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,686,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,697,        int lostdigit = 0;,2,0,0,0,0,0,0,0,0,2,18,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,698,        boolean inexact = false;,2,0,0,0,0,0,0,0,0,3,24,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,700,        int diff = exp - e;,0,0,0,0,0,0,0,0,0,0,19,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,702,        int adiff = diff;,0,0,0,0,0,0,0,0,0,0,17,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,703,        if (adiff < 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,704,            adiff = -adiff;,4,0,0,0,0,0,0,0,0,6,15,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,707,        if (diff == 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,708,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,711,        if (adiff > (mant.length + 1)) {,0,0,0,2,5,0,0,0,0,7,32,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,713,"            Arrays.fill(mant, 0);",0,0,0,1,2,0,0,0,0,3,21,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,714,            exp = e;,4,0,0,0,0,0,0,0,0,5,8,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,716,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,0,0,0,1,2,0,0,0,0,3,46,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,717,"            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",4,0,0,1,2,0,4,0,0,8,54,7,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,719,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,722,        for (int i = 0; i < adiff; i++) {,10,1,0,1,3,3,0,0,0,15,33,1,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,723,            if (diff < 0) {,2,1,0,1,3,0,0,0,0,3,15,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,728,                if (lostdigit != 0) {,2,1,0,1,3,0,0,0,0,3,21,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,729,                    inexact = true;,2,0,0,0,0,0,0,0,0,4,15,10,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,732,                lostdigit = mant[0];,2,5,1,1,2,0,0,0,0,25,20,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,734,                shiftRight();,0,0,0,1,2,0,0,0,0,3,13,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,740,        if (inexact) {,2,0,0,1,3,0,0,0,0,2,14,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,741,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,0,0,0,1,2,0,0,0,0,3,46,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,742,"            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",8,1,0,1,2,0,4,0,0,13,54,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,745,        return lostdigit;,4,0,0,0,0,1,0,0,0,5,17,0,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,756,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,4,1,0,3,7,0,6,0,0,11,57,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,765,        if (isNaN() || x.isNaN()) {,0,1,0,3,7,0,6,0,0,7,27,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,771,"        return compare(this, x) < 0;",0,0,0,1,2,1,0,0,0,4,28,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,781,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,0,0,0,3,7,0,0,0,0,10,57,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,790,        if (isNaN() || x.isNaN()) {,0,1,0,3,7,0,6,0,0,7,27,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,796,"        return compare(this, x) > 0;",0,1,0,1,2,1,4,0,0,5,28,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,879,        return (nans == QNAN) || (nans == SNAN);,0,0,0,2,4,1,0,0,0,7,40,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,904,        if (other instanceof Dfp) {,2,0,0,1,3,0,4,2,0,8,27,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,905,            final Dfp x = (Dfp) other;,0,0,0,1,2,0,0,0,0,3,26,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,906,            if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {,4,2,0,5,11,0,12,0,0,18,81,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,910,"            return compare(this, x) == 0;",0,1,0,1,2,1,4,0,0,5,29,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,931,        if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {,4,2,0,5,11,0,12,0,0,18,81,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,935,        return greaterThan(x) || lessThan(x);,0,1,0,2,4,1,8,0,0,9,37,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,946,        if (a.mant[a.mant.length - 1] == 0 && b.mant[b.mant.length - 1] == 0 &&,0,0,0,2,5,0,0,0,0,7,71,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,948,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,951,        if (a.sign != b.sign) {,0,0,0,1,3,0,0,0,0,4,23,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,960,        if (a.nans == INFINITE && b.nans == FINITE) {,12,3,0,1,3,0,0,0,0,15,45,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,964,        if (a.nans == FINITE && b.nans == INFINITE) {,16,3,1,1,3,0,0,0,0,24,45,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,968,        if (a.nans == INFINITE && b.nans == INFINITE) {,0,0,0,1,3,0,0,0,0,4,47,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,973,        if (b.mant[b.mant.length-1] != 0 && a.mant[b.mant.length-1] != 0) {,0,0,0,3,7,0,0,0,0,10,67,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,974,            if (a.exp < b.exp) {,8,1,0,1,3,0,0,0,0,9,20,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,975,                return -a.sign;,0,0,0,0,0,1,0,0,0,1,15,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,978,            if (a.exp > b.exp) {,0,0,0,1,3,0,0,0,0,4,20,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,979,                return a.sign;,0,0,0,0,0,1,0,0,0,1,14,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,984,        for (int i = a.mant.length - 1; i >= 0; i--) {,12,2,0,1,3,0,0,0,0,15,46,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,985,            if (a.mant[i] > b.mant[i]) {,0,0,0,3,7,0,0,0,0,10,28,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,986,                return a.sign;,4,0,0,0,0,1,0,0,0,4,14,9,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,989,            if (a.mant[i] < b.mant[i]) {,10,1,1,3,7,1,8,4,0,28,28,1,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,990,                return -a.sign;,10,1,0,0,0,1,0,0,0,12,15,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,994,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1231,        extra = RADIX-extra;,0,0,0,0,0,0,0,0,0,0,20,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1232,        for (int i = 0; i < mant.length; i++) {,12,1,0,1,3,3,0,0,0,17,39,1,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1233,            mant[i] = RADIX-mant[i]-1;,0,0,0,2,4,0,8,0,0,9,26,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1236,        int rh = extra / RADIX;,6,1,0,0,0,0,0,0,0,7,23,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1237,        extra = extra - rh * RADIX;,8,2,0,0,0,0,6,0,0,17,27,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1238,        for (int i = 0; i < mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1239,            final int r = mant[i] + rh;,0,0,0,1,2,0,0,0,0,3,27,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1240,            rh = r / RADIX;,0,0,0,0,0,0,0,0,0,0,15,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1241,            mant[i] = r - rh * RADIX;,10,3,1,1,2,1,8,0,0,28,25,0,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1244,        return extra;,0,0,0,0,0,1,0,0,0,1,13,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1254,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,12,2,0,3,7,2,6,0,0,23,57,1,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1262,        if (nans != FINITE || x.nans != FINITE) {,18,4,0,1,3,0,4,2,0,30,41,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1293,        Dfp a = newInstance(this);,0,0,0,1,2,0,0,0,0,3,26,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1294,        Dfp b = newInstance(x);,2,0,0,1,2,0,4,2,0,8,23,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1297,        Dfp result = newInstance(getZero());,2,0,0,2,4,0,4,2,0,8,36,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1300,        final byte asign = a.sign;,6,0,0,0,0,1,0,0,0,7,26,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1301,        final byte bsign = b.sign;,10,1,1,0,0,2,6,0,0,21,26,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1303,        a.sign = 1;,12,1,0,0,0,0,0,0,0,15,11,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1304,        b.sign = 1;,0,0,0,0,0,0,0,0,0,0,11,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1307,        byte rsign = bsign;,4,0,0,0,0,0,0,0,0,4,19,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1308,"        if (compare(a, b) > 0) {",0,1,0,2,5,0,6,0,0,7,24,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1309,            rsign = asign;,4,0,0,0,0,0,0,0,0,5,14,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1315,        if (b.mant[mant.length-1] == 0) {,14,3,0,2,5,0,0,0,0,18,33,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1316,            b.exp = a.exp;,0,0,0,0,0,0,0,0,0,0,14,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1319,        if (a.mant[mant.length-1] == 0) {,8,2,0,2,5,0,0,0,0,10,33,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1324,        int aextradigit = 0;,2,0,1,0,0,0,0,0,0,7,20,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1325,        int bextradigit = 0;,2,0,0,0,0,0,0,0,0,2,20,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1326,        if (a.exp < b.exp) {,10,1,0,1,3,1,0,0,0,12,20,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1327,            aextradigit = a.align(b.exp);,8,0,1,1,2,0,4,0,0,16,29,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1329,            bextradigit = b.align(a.exp);,6,0,0,1,2,0,4,0,0,11,29,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1333,        if (asign != bsign) {,0,0,0,1,3,0,0,0,0,4,21,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1334,            if (asign == rsign) {,8,1,0,1,3,0,0,0,0,9,21,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1335,                bextradigit = b.complement(bextradigit);,8,0,0,1,2,1,6,0,0,16,40,2,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1337,                aextradigit = a.complement(aextradigit);,0,0,0,1,2,0,0,0,0,3,40,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1342,        int rh = 0; /* acts as a carry */,0,0,0,0,0,0,0,0,0,0,33,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1343,        for (int i = 0; i < mant.length; i++) {,12,1,0,1,3,0,0,0,0,14,39,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1344,            final int r = a.mant[i]+b.mant[i]+rh;,14,1,1,2,4,1,0,0,0,20,37,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1345,            rh = r / RADIX;,6,1,0,0,0,0,0,0,0,8,15,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1346,            result.mant[i] = r - rh * RADIX;,10,2,1,1,2,0,0,0,0,15,32,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1348,        result.exp = a.exp;,2,2,0,0,0,0,0,0,0,4,19,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1349,        result.sign = rsign;,0,0,0,0,0,0,0,0,0,0,20,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1354,        if (rh != 0 && (asign == bsign)) {,6,3,0,2,5,0,0,0,0,9,34,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1355,            final int lostdigit = result.mant[0];,10,0,0,1,2,1,0,0,0,11,37,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1356,            result.shiftRight();,0,0,0,1,2,0,4,0,0,4,20,7,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1357,            result.mant[mant.length-1] = rh;,0,0,0,1,2,0,0,0,0,3,32,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1358,            final int excp = result.round(lostdigit);,4,0,0,1,2,1,6,0,0,11,41,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1359,            if (excp != 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1360,"                result = dotrap(excp, ADD_TRAP, x, result);",4,1,0,1,2,0,22,0,0,29,43,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1365,        for (int i = 0; i < mant.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1366,            if (result.mant[mant.length-1] != 0) {,0,0,0,2,5,0,0,0,0,7,38,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1367,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1369,            result.shiftLeft();,0,0,0,1,2,0,0,0,0,3,19,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1370,            if (i == 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1371,                result.mant[0] = aextradigit+bextradigit;,0,0,0,1,2,0,0,0,0,3,41,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1372,                aextradigit = 0;,2,0,0,0,0,0,0,0,0,3,16,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1373,                bextradigit = 0;,6,2,0,0,0,0,8,0,0,18,16,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1378,        if (result.mant[mant.length-1] == 0) {,10,2,0,2,5,0,0,0,0,12,38,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1379,            result.exp = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1381,            if (asign != bsign) {,4,1,0,1,3,0,0,0,0,5,21,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1383,                result.sign = 1;  // Per IEEE 854-1987 Section 6.3,4,0,0,0,0,0,0,0,0,5,50,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1388,        final int excp = result.round(aextradigit + bextradigit);,0,0,0,1,2,0,0,0,0,3,57,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1389,        if (excp != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1390,"            result = dotrap(excp, ADD_TRAP, x, result);",2,0,0,1,2,0,10,0,0,13,43,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1393,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1400,        Dfp result = newInstance(this);,0,0,0,1,2,0,0,0,0,3,31,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1401,        result.sign = (byte) - result.sign;,8,0,0,1,2,0,0,0,0,10,35,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1402,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1410,        return add(x.negate());,0,0,0,2,4,1,0,0,0,7,23,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1418,        boolean inc = false;,0,0,0,0,0,0,0,0,0,0,20,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1419,        switch (field.getRoundingMode()) {,0,0,0,2,5,0,0,0,0,7,34,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1437,                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 1);  // round half-even,6,6,1,3,6,0,0,0,0,15,72,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1438,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1454,        if (inc) {,2,0,0,1,3,0,0,0,0,2,10,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1456,            int rh = 1;,2,0,0,0,0,0,0,0,0,2,11,7,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1457,            for (int i = 0; i < mant.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1458,                final int r = mant[i] + rh;,24,10,1,1,2,1,0,0,0,40,27,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1459,                rh = r / RADIX;,6,1,0,0,0,0,0,0,0,8,15,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1460,                mant[i] = r - rh * RADIX;,10,2,1,1,2,0,0,0,0,19,25,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1463,            if (rh != 0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1470,        if (exp < MIN_EXP) {,0,0,0,1,3,0,0,0,0,4,20,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1476,        if (exp > MAX_EXP) {,6,2,0,1,3,0,0,0,0,8,20,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1482,        if (n != 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1484,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,0,0,0,1,2,0,0,0,0,3,46,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1485,            return DfpField.FLAG_INEXACT;,0,0,0,0,0,1,0,0,0,1,29,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1488,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1499,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,4,1,0,3,7,0,6,0,0,11,57,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1506,        Dfp result = newInstance(getZero());,6,0,0,2,4,0,10,2,0,18,36,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1509,        if (nans != FINITE || x.nans != FINITE) {,10,3,0,1,3,0,0,0,0,13,41,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1546,        int[] product = new int[mant.length*2];  // Big enough to hold even the largest result,6,1,0,2,4,0,0,0,0,7,86,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1548,        for (int i = 0; i < mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1549,            int rh = 0;  // acts as a carry,0,0,0,0,0,0,0,0,0,0,31,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1550,            for (int j=0; j<mant.length; j++) {,4,0,0,1,3,0,0,0,0,5,35,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1551,                int r = mant[i] * x.mant[j];    // multiply the 2 digits,6,1,0,2,4,0,0,0,0,8,56,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1552,                r = r + product[i+j] + rh;  // add to the product digit with carry in,22,3,1,1,2,0,0,0,0,30,69,0,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1554,                rh = r / RADIX;,2,0,0,0,0,1,12,2,0,17,15,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1555,                product[i+j] = r - rh * RADIX;,16,3,1,1,2,0,4,0,0,27,30,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1557,            product[i+mant.length] = rh;,10,1,1,1,2,0,0,0,0,15,28,0,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1561,"        int md = mant.length * 2 - 1;  // default, in case result is zero",6,2,0,0,0,0,0,0,0,8,65,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1562,        for (int i = mant.length * 2 - 1; i >= 0; i--) {,14,4,0,1,3,0,0,0,0,19,48,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1563,            if (product[i] != 0) {,0,1,1,2,5,0,0,0,0,5,22,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1564,                md = i;,2,1,1,0,0,0,0,0,0,7,7,7,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1565,                break;,4,0,0,0,0,0,0,0,0,5,6,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1570,        for (int i = 0; i < mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1571,            result.mant[mant.length - i - 1] = product[md - i];,16,2,1,2,4,0,0,0,0,22,51,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1575,        result.exp = exp + x.exp + md - 2 * mant.length + 1;,10,1,0,0,0,0,0,0,0,12,52,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1576,        result.sign = (byte)((sign == x.sign)?1:-1);,12,1,0,3,6,0,0,0,0,16,44,0,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1578,        if (result.mant[mant.length-1] == 0) {,8,2,0,2,5,0,0,0,0,10,38,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1580,            result.exp = 0;,10,2,0,0,0,0,0,0,0,14,15,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1584,        if (md > (mant.length-1)) {,0,0,0,2,5,0,0,0,0,7,27,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1585,            excp = result.round(product[md-mant.length]);,8,1,1,2,4,0,4,0,0,16,45,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1590,        if (excp != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1591,"            result = dotrap(excp, MULTIPLY_TRAP, x, result);",2,0,0,1,2,0,10,0,0,13,48,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1594,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1683,        int trial=0;    // trial quotient digit,0,0,0,0,0,0,0,0,0,0,39,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1686,        int md=0;       // most sig digit in result,0,0,0,0,0,0,0,0,0,0,43,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1690,        if (field.getRadixDigits() != divisor.field.getRadixDigits()) {,4,1,0,3,7,0,6,0,0,11,63,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1697,        Dfp result = newInstance(getZero());,2,0,0,2,4,0,4,2,0,8,36,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1700,        if (nans != FINITE || divisor.nans != FINITE) {,10,3,0,1,3,0,0,0,0,13,47,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1731,        if (divisor.mant[mant.length-1] == 0) {,8,2,0,2,5,0,0,0,0,10,39,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1740,        dividend = new int[mant.length+1];  // one extra digit needed,16,2,0,1,2,0,0,0,0,20,61,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1741,"        quotient = new int[mant.length+2];  // two extra digits needed 1 for overflow, 1 for rounding",4,0,0,1,2,0,0,0,0,6,93,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1742,        remainder = new int[mant.length+1]; // one extra digit needed,6,1,0,1,2,0,0,0,0,8,61,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1746,        dividend[mant.length] = 0;,0,0,0,1,2,0,0,0,0,3,26,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1747,        quotient[mant.length] = 0;,6,0,0,1,2,0,8,0,0,15,26,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1748,        quotient[mant.length+1] = 0;,4,1,1,1,2,0,0,0,0,8,28,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1749,        remainder[mant.length] = 0;,0,0,0,1,2,0,0,0,0,3,27,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1754,        for (int i = 0; i < mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1755,            dividend[i] = mant[i];,2,0,0,2,4,0,0,0,0,2,22,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1756,            quotient[i] = 0;,0,0,1,1,2,0,0,0,0,5,16,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1757,            remainder[i] = 0;,0,0,1,1,2,0,0,0,0,5,17,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1761,        nsqd = 0;,2,0,0,0,0,0,0,0,0,3,9,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1762,        for (qd = mant.length+1; qd >= 0; qd--) {,16,6,1,1,3,0,0,0,0,37,41,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1766,            final int divMsb = dividend[mant.length]*RADIX+dividend[mant.length-1];,12,3,1,2,4,1,0,0,0,20,71,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1767,            int min = divMsb       / (divisor.mant[mant.length-1]+1);,12,3,0,2,4,0,0,0,0,15,57,7,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1768,            int max = (divMsb + 1) / divisor.mant[mant.length-1];,0,0,0,2,4,0,0,0,0,6,53,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1770,            trialgood = false;,2,0,0,0,0,0,0,0,0,4,18,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1771,            while (!trialgood) {,8,4,0,1,3,0,0,0,0,13,20,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1773,                trial = (min+max)/2;,14,4,0,1,2,0,0,0,0,20,20,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1776,                int rh = 0;,2,0,0,0,0,0,0,0,0,2,11,9,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1777,                for (int i = 0; i < mant.length + 1; i++) {,10,2,0,1,3,0,0,0,0,13,43,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1778,                    int dm = (i<mant.length)?divisor.mant[i]:0;,0,0,0,2,4,0,0,0,0,1,43,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1779,                    final int r = (dm * trial) + rh;,0,0,0,1,2,0,0,0,0,3,32,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1780,                    rh = r / RADIX;,6,1,0,0,0,0,0,0,0,8,15,10,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1781,                    remainder[i] = r - rh * RADIX;,6,2,1,1,2,0,0,0,0,18,30,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1785,                rh = 1;  // carry in to aid the subtraction,0,0,0,0,0,0,0,0,0,0,43,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1786,                for (int i = 0; i < mant.length + 1; i++) {,10,2,1,1,3,0,6,0,0,23,43,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1787,                    final int r = ((RADIX-1) - remainder[i]) + dividend[i] + rh;,0,0,0,4,8,0,0,0,0,12,60,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1788,                    rh = r / RADIX;,0,0,0,0,0,0,0,0,0,0,15,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1789,                    remainder[i] = r - rh * RADIX;,0,0,0,1,2,0,0,0,0,3,30,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1793,                if (rh == 0) {,2,1,0,1,3,0,0,0,0,3,14,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1795,                    max = trial-1;,12,2,0,0,0,3,14,0,0,32,14,2,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1796,                    continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1800,                minadj = (remainder[mant.length] * RADIX)+remainder[mant.length-1];,0,0,0,3,6,0,0,0,0,9,67,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1801,                minadj = minadj / (divisor.mant[mant.length-1]+1);,0,0,0,2,4,0,0,0,0,6,50,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1803,                if (minadj >= 2) {,4,1,0,1,3,0,0,0,0,6,18,0,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1804,                    min = trial+minadj;  // update the minimum,8,1,0,0,0,0,0,0,0,10,42,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1805,                    continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1810,                trialgood = false;  // assume false,2,0,0,0,0,0,0,0,0,4,35,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1811,                for (int i = mant.length - 1; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,44,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1812,                    if (divisor.mant[i] > remainder[i]) {,8,2,1,3,7,0,4,0,0,20,37,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1813,                        trialgood = true;,2,0,0,0,0,0,0,0,0,4,17,12,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1815,                    if (divisor.mant[i] < remainder[i]) {,2,1,1,3,7,0,0,0,0,12,37,12,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1816,                        break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1820,                if (remainder[mant.length] != 0) {,0,0,0,2,5,0,0,0,0,7,34,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1821,                    trialgood = false;,6,7,1,0,0,0,0,0,0,30,18,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1824,                if (trialgood == false) {,2,1,0,1,3,0,0,0,0,4,25,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1825,                    min = trial+1;,4,1,0,0,0,0,0,0,0,6,14,10,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1827,            },0,0,0,0,1,0,0,0,0,1,1,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1830,            quotient[qd] = trial;,0,0,0,1,2,0,0,0,0,3,21,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1831,            if (trial != 0 || nsqd != 0) {,4,3,0,1,3,0,0,0,0,7,30,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1832,                nsqd++;,2,0,0,0,0,0,0,0,0,3,7,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1835,            if (field.getRoundingMode() == DfpField.RoundingMode.ROUND_DOWN && nsqd == mant.length) {,0,0,0,2,5,0,0,0,0,7,89,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1840,            if (nsqd > mant.length) {,12,2,0,1,3,1,2,0,0,17,25,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1842,                break;,2,0,1,0,0,0,0,0,0,7,6,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1846,            dividend[0] = 0;,6,1,1,1,2,0,0,0,0,10,16,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1847,            for (int i = 0; i < mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1848,                dividend[i + 1] = remainder[i];,0,0,0,2,4,0,0,0,0,6,31,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1853,        md = mant.length;  // default,6,0,0,0,0,0,0,0,0,7,29,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1854,        for (int i = mant.length + 1; i >= 0; i--) {,12,3,1,1,3,0,0,0,0,27,44,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1855,            if (quotient[i] != 0) {,0,0,1,2,5,0,0,0,0,7,23,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1856,                md = i;,0,0,0,0,0,0,0,0,0,0,7,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1857,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1862,        for (int i=0; i<mant.length; i++) {,12,1,0,1,3,0,0,0,0,14,35,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1863,            result.mant[mant.length-i-1] = quotient[md-i];,14,2,1,2,4,0,0,0,0,19,46,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1867,        result.exp = exp - divisor.exp + md - mant.length;,0,0,0,0,0,0,0,0,0,0,50,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1868,        result.sign = (byte) ((sign == divisor.sign) ? 1 : -1);,0,0,0,3,6,0,0,0,0,9,55,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1870,"        if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero",8,2,0,2,5,0,0,0,0,10,76,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1871,            result.exp = 0;,4,0,0,0,0,0,0,0,0,5,15,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1874,        if (md > (mant.length-1)) {,6,2,0,2,5,0,0,0,0,8,27,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1875,            excp = result.round(quotient[md-mant.length]);,0,0,0,2,4,0,0,0,0,6,46,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1880,        if (excp != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1881,"            result = dotrap(excp, DIVIDE_TRAP, divisor, result);",0,0,0,1,2,0,0,0,0,3,52,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1884,        return result;,4,0,0,0,0,1,0,0,0,5,14,0,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1895,        if (nans != FINITE) {,4,1,0,1,3,0,0,0,0,5,21,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1906,        if (divisor == 0) {,22,10,0,1,3,0,0,0,0,33,19,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1916,        if (divisor < 0 || divisor >= RADIX) {,6,3,0,1,3,0,0,0,0,9,38,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1924,        Dfp result = newInstance(this);,2,0,0,1,2,0,2,2,0,6,31,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1926,        int rl = 0;,0,0,0,0,0,0,0,0,0,0,11,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1927,        for (int i = mant.length-1; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,42,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1928,            final int r = rl*RADIX + result.mant[i];,0,0,0,1,2,0,0,0,0,3,40,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1929,            final int rh = r / divisor;,6,1,0,0,0,1,0,0,0,8,27,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1930,            rl = r - rh * divisor;,8,2,0,0,0,0,4,0,0,15,22,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1931,            result.mant[i] = rh;,10,0,1,1,2,0,0,0,0,15,20,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1934,        if (result.mant[mant.length-1] == 0) {,0,0,0,2,5,0,0,0,0,7,38,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1936,            result.shiftLeft();,6,1,0,1,2,1,0,0,0,8,19,9,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1937,            final int r = rl * RADIX;        // compute the next digit and put it in,6,1,0,0,0,1,0,0,0,8,72,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1938,            final int rh = r / divisor;,14,1,0,0,0,1,0,2,0,18,27,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1939,            rl = r - rh * divisor;,8,2,0,0,0,0,0,0,0,11,22,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1940,            result.mant[0] = rh;,6,1,0,1,2,0,4,0,0,12,20,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1943,        final int excp = result.round(rl * RADIX / divisor);  // do the rounding,8,2,0,1,2,1,4,0,0,15,72,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1944,        if (excp != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1945,"            result = dotrap(excp, DIVIDE_TRAP, result, result);",2,0,0,1,2,0,10,0,0,13,51,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1948,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1963,        if (nans == FINITE && mant[mant.length-1] == 0) {,10,5,1,2,5,1,0,0,0,21,49,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1968,        if (nans != FINITE) {,6,1,1,1,3,0,0,0,0,12,21,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1988,        if (sign == -1) {,4,1,0,1,3,0,0,0,0,7,17,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1999,        Dfp x = newInstance(this);,2,1,0,1,2,0,0,0,0,3,26,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2002,        if (x.exp < -1 || x.exp > 1) {,8,3,0,1,3,0,0,0,0,12,30,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2007,        switch (x.mant[mant.length-1] / 2000) {,0,0,0,2,5,0,0,0,0,7,39,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2009,                x.mant[mant.length-1] = x.mant[mant.length-1]/2+1;,0,0,0,2,4,0,0,0,0,6,50,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2010,                break;,0,1,1,0,0,0,0,0,0,8,6,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2018,                x.mant[mant.length-1] = 3000;,8,1,0,1,2,0,0,0,0,10,29,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2021,        Dfp dx = newInstance(x);,0,0,0,1,2,0,0,0,0,3,24,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2026,        Dfp px  = getZero();,2,0,0,1,2,0,2,2,0,6,20,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2027,        Dfp ppx = getZero();,16,2,0,1,2,0,2,2,0,24,20,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2028,        while (x.unequal(px)) {,0,0,0,2,5,0,6,0,0,6,23,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2029,            dx = newInstance(x);,4,1,0,1,2,0,8,0,0,14,20,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2030,            dx.sign = -1;,4,0,0,0,0,0,0,0,0,6,13,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2031,            dx = dx.add(this.divide(x));,0,0,0,2,4,0,0,0,0,6,28,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2032,            dx = dx.divide(2);,6,0,0,1,2,0,4,0,0,11,18,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2033,            ppx = px;,4,0,0,0,0,0,0,0,0,5,9,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2034,            px = x;,0,0,0,0,0,0,0,0,0,0,7,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2035,            x = x.add(dx);,0,0,0,1,2,0,0,0,0,3,14,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2037,            if (x.equals(ppx)) {,0,0,0,2,5,0,0,0,0,7,20,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2044,            if (dx.mant[mant.length-1] == 0) {,8,2,0,2,5,0,0,0,0,10,34,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2045,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2049,        return x;,4,0,0,0,0,1,0,0,0,5,9,0,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2058,        if (nans != FINITE) {,10,2,0,1,3,0,0,0,0,13,21,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2067,        if (exp > mant.length || exp < -1) {,8,3,0,1,3,0,0,0,0,12,36,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2071,        return dfp2string();,8,2,0,1,2,2,2,0,0,13,20,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2160,        char buffer[] = new char[mant.length*4 + 20];,0,0,0,2,4,0,0,0,0,6,45,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2161,        int p = 1;,0,0,0,0,0,0,0,0,0,0,10,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2163,        int e = exp;,0,0,0,0,0,0,0,0,0,0,12,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2164,        boolean pointInserted = false;,2,0,0,0,0,0,0,0,0,3,30,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2166,        buffer[0] = ' ';,0,0,0,1,2,0,0,0,0,3,16,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2168,        if (e <= 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2169,            buffer[p++] = '0';,2,0,1,1,2,0,0,0,0,7,18,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2170,            buffer[p++] = '.';,0,0,0,1,2,0,0,0,0,3,18,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2171,            pointInserted = true;,10,2,0,0,0,0,0,0,0,14,21,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2174,        while (e < 0) {,6,3,0,1,3,0,0,0,0,9,15,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2182,        for (int i = mant.length - 1; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,44,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2183,            buffer[p++] = (char) ((mant[i] / 1000) + '0');,0,0,0,5,10,0,0,0,0,15,46,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2184,            buffer[p++] = (char) (((mant[i] / 100) % 10) + '0');,0,0,0,6,12,0,0,0,0,18,52,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2185,            buffer[p++] = (char) (((mant[i] / 10) % 10) + '0');,8,4,1,6,12,0,0,0,0,22,51,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2186,            buffer[p++] = (char) (((mant[i]) % 10) + '0');,2,2,1,6,12,0,0,0,0,13,46,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2187,            if (--e == 0) {,2,1,0,1,3,0,0,0,0,4,15,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2188,                buffer[p++] = '.';,2,0,1,1,2,0,0,0,0,7,18,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2189,                pointInserted = true;,2,0,0,0,0,0,0,0,0,4,21,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2193,        while (e > 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2201,        if (!pointInserted) {,0,0,0,1,3,0,0,0,0,4,21,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2207,        q = 1;,2,0,0,0,0,0,0,0,0,3,6,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2208,        while (buffer[q] == '0') {,0,1,1,2,5,0,4,0,0,15,26,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2209,            q++;,2,0,0,0,0,0,0,0,0,3,4,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2211,        if (buffer[q] == '.') {,0,1,1,2,5,0,0,0,0,6,23,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2212,            q--;,10,3,0,0,0,0,18,0,0,33,4,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2216,        while (buffer[p-1] == '0') {,10,3,1,2,5,0,0,0,0,17,28,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2217,            p--;,4,0,0,0,0,1,0,0,0,6,4,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2221,        if (sign < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2225,"        return new String(buffer, q, p - q);",8,1,0,1,2,1,0,2,0,11,36,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2237,        Dfp def = result;,4,0,0,0,0,0,0,2,0,6,17,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2239,        switch (type) {,2,0,0,1,3,0,0,0,0,2,15,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2288,            default: def = result; break;,8,0,0,0,0,1,0,0,0,11,29,0,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2291,"        return trap(type, what, oper, def, result);",0,0,0,1,2,1,0,0,0,4,43,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2307,        return def;,0,0,0,0,0,1,0,0,0,1,11,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,30,    public enum RoundingMode {,0,0,0,0,1,0,0,0,0,1,26,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,33,"        ROUND_DOWN,",2,0,0,0,0,0,0,0,0,2,11,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,36,"        ROUND_UP,",0,0,0,0,0,0,0,0,0,0,9,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,39,"        ROUND_HALF_UP,",2,0,0,0,0,0,0,0,0,2,14,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,42,"        ROUND_HALF_DOWN,",2,0,0,0,0,0,0,0,0,2,16,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,47,"        ROUND_HALF_EVEN,",14,1,0,0,0,0,0,0,0,16,16,1,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,50,"        ROUND_HALF_ODD,",0,0,0,0,0,0,0,0,0,0,15,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,53,"        ROUND_CEIL,",2,0,0,0,0,0,0,0,0,2,11,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,56,        ROUND_FLOOR;,2,0,0,0,0,0,0,0,0,2,12,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,177,"        this(decimalDigits, true);",2,0,0,1,2,0,0,0,0,3,26,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,178,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,191,"    private DfpField(final int decimalDigits, final boolean computeConstants) {",6,0,0,1,3,3,0,0,0,9,75,2,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,193,        this.radixDigits = (decimalDigits < 13) ? 4 : (decimalDigits + 3) / 4;,0,0,0,2,4,0,0,0,0,6,70,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,194,        this.rMode       = RoundingMode.ROUND_HALF_EVEN;,6,0,0,0,0,0,0,0,0,7,48,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,195,        this.ieeeFlags   = 0;,0,0,0,0,0,0,0,0,0,0,21,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,196,"        this.zero        = new Dfp(this, 0);",2,0,0,1,2,0,0,2,0,5,36,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,197,"        this.one         = new Dfp(this, 1);",2,0,0,1,2,0,0,2,0,5,36,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,198,"        this.two         = new Dfp(this, 2);",2,0,0,1,2,0,0,2,0,5,36,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,200,        if (computeConstants) {,2,0,0,1,3,0,0,0,0,2,23,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,202,            synchronized (DfpField.class) {,0,0,0,1,3,0,0,0,0,4,31,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,208,                computeStringConstants((decimalDigits < 67) ? 200 : (3 * decimalDigits));,6,2,0,3,6,0,2,0,0,10,73,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,211,"                sqr2           = new Dfp(this, sqr2String);",4,0,0,1,2,0,0,2,0,7,43,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,212,                sqr2Split      = split(sqr2String);,0,0,0,1,2,0,0,0,0,3,35,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,213,"                sqr2Reciprocal = new Dfp(this, sqr2ReciprocalString);",4,0,0,1,2,0,0,2,0,7,53,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,214,"                sqr3           = new Dfp(this, sqr3String);",8,0,0,1,2,0,0,4,0,13,43,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,215,"                sqr3Reciprocal = new Dfp(this, sqr3ReciprocalString);",0,0,0,1,2,0,0,0,0,3,53,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,216,"                pi             = new Dfp(this, piString);",4,0,0,1,2,0,0,2,0,7,41,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,217,                piSplit        = split(piString);,2,0,0,1,2,0,4,0,0,7,33,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,218,"                e              = new Dfp(this, eString);",4,0,0,1,2,0,0,2,0,7,40,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,219,                eSplit         = split(eString);,0,0,0,1,2,0,0,0,0,3,32,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,220,"                ln2            = new Dfp(this, ln2String);",0,0,0,1,2,0,0,0,0,3,42,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,221,                ln2Split       = split(ln2String);,8,1,0,1,2,0,4,0,0,14,34,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,222,"                ln5            = new Dfp(this, ln5String);",2,1,1,1,2,1,0,0,0,13,42,2,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,223,                ln5Split       = split(ln5String);,2,0,0,1,2,0,4,0,0,7,34,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,224,"                ln10           = new Dfp(this, ln10String);",4,0,0,1,2,0,0,2,0,7,43,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,226,            },2,0,0,0,1,0,0,0,0,2,1,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,229,            sqr2           = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,230,            sqr2Split      = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,231,            sqr2Reciprocal = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,232,            sqr3           = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,233,            sqr3Reciprocal = null;,0,0,0,0,0,0,0,0,0,0,22,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,234,            pi             = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,235,            piSplit        = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,236,            e              = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,237,            eSplit         = null;,4,0,0,0,0,0,0,0,0,7,22,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,238,            ln2            = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,239,            ln2Split       = null;,0,0,0,0,0,0,0,0,0,0,22,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,240,            ln5            = null;,0,0,0,0,0,0,0,0,0,0,22,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,241,            ln5Split       = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,242,            ln10           = null;,0,0,0,0,0,0,0,0,0,0,22,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,245,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,251,        return radixDigits;,2,0,0,0,0,1,0,0,0,2,19,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,269,        return rMode;,0,0,0,0,0,1,0,0,0,1,13,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,331,        ieeeFlags |= bits & (FLAG_INVALID | FLAG_DIV_ZERO | FLAG_OVERFLOW | FLAG_UNDERFLOW | FLAG_INEXACT);,14,2,0,1,2,0,0,0,0,17,99,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,332,    },0,0,1,0,1,0,6,0,0,17,1,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,403,        return zero;,2,0,0,0,0,1,0,0,0,2,12,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,530,      Dfp result[] = new Dfp[2];,8,1,0,2,4,0,0,4,0,14,26,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,531,      boolean leading = true;,2,0,0,0,0,0,0,0,0,3,23,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,532,      int sp = 0;,2,0,0,0,0,0,6,0,0,8,11,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,533,      int sig = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,535,      char[] buf = new char[a.length()];,2,0,0,3,6,0,4,0,0,6,34,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,537,      for (int i = 0; i < buf.length; i++) {,10,1,0,1,3,0,0,0,0,12,38,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,538,        buf[i] = a.charAt(i);,0,0,1,2,4,0,6,0,0,11,21,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,540,        if (buf[i] >= '1' && buf[i] <= '9') {,6,4,1,3,7,0,0,0,0,21,37,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,541,            leading = false;,2,0,0,0,0,0,0,0,0,4,16,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,544,        if (buf[i] == '.') {,0,1,1,2,5,0,0,0,0,6,20,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,545,          sig += (400 - sig) % 4;,4,2,0,1,2,0,0,0,0,7,23,8,0.01351,0,0
