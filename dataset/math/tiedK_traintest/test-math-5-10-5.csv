dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,math,org/apache/commons/math/util/FastMath,56,2296,        int shift = exponent - (idx << 6);,6,2,0,1,2,0,0,0,0,8,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2298,        if (shift != 0) {,2,1,0,1,3,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2299,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,0,0,0,3,6,0,0,0,0,9,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2300,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,4,1,0,2,4,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2301,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,8,5,1,5,10,0,0,0,0,20,70,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2302,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,0,0,0,5,10,0,4,0,0,4,72,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2304,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,0,0,0,2,4,0,0,0,0,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2305,            shpiA = RECIP_2PI[idx];,8,0,1,1,2,0,0,0,0,15,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2306,            shpiB = RECIP_2PI[idx+1];,0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2310,        long a = inbits >>> 32;,4,2,0,0,0,0,0,0,0,7,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2311,        long b = inbits & 0xffffffffL;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2313,        long c = shpiA >>> 32;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2314,        long d = shpiA & 0xffffffffL;,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2316,        long ac = a * c;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2317,        long bd = b * d;,6,1,0,0,0,0,0,0,0,7,16,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2318,        long bc = b * c;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2319,        long ad = a * d;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2321,        long prodB = bd + (ad << 32);,6,2,0,1,2,0,0,0,0,8,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2322,        long prodA = ac + (ad >>> 32);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2324,        boolean bita = (bd & 0x8000000000000000L) != 0;,10,3,0,1,2,0,0,0,0,14,47,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2325,        boolean bitb = (ad & 0x80000000L ) != 0;,0,0,0,1,2,0,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2326,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,6,52,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2329,        if ( (bita && bitb) ||,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2331,            prodA++;,2,0,0,0,0,0,0,0,0,3,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2334,        bita = (prodB & 0x8000000000000000L) != 0;,12,4,0,1,2,1,0,0,0,18,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2335,        bitb = (bc & 0x80000000L ) != 0;,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2337,        prodB = prodB + (bc << 32);,6,2,0,1,2,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2338,        prodA = prodA + (bc >>> 32);,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2340,        bitsum = (prodB & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2343,        if ( (bita && bitb) ||,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2345,            prodA++;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2349,        c = shpiB >>> 32;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2350,        d = shpiB & 0xffffffffL;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2351,        ac = a * c;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2352,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2353,        ad = a * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2356,        ac = ac + ((bc + ad) >>> 32);,10,4,0,2,4,0,0,0,0,15,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2358,        bita = (prodB & 0x8000000000000000L) != 0;,10,3,0,1,2,0,0,0,0,15,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2359,        bitb = (ac & 0x8000000000000000L ) != 0;,4,2,0,1,2,0,0,0,0,8,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2360,        prodB += ac;,4,0,0,0,0,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2361,        bitsum = (prodB & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2363,        if ( (bita && bitb) ||,14,3,0,1,3,0,0,2,0,21,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2365,            prodA++;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2369,        c = shpi0 >>> 32;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2370,        d = shpi0 & 0xffffffffL;,28,8,1,0,0,0,6,0,0,47,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2372,        bd = b * d;,12,2,0,0,0,0,0,0,0,15,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2373,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2374,        ad = a * d;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2376,        prodA += bd + ((bc + ad) << 32);,8,3,0,2,4,0,0,0,0,12,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2388,        int intPart = (int)(prodA >>> 62);,4,1,0,2,4,0,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2391,        prodA <<= 2;,8,2,0,0,0,0,0,0,0,12,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2392,        prodA |= prodB >>> 62;,4,2,0,0,0,0,0,0,0,7,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2393,        prodB <<= 2;,4,3,0,0,0,0,12,0,0,21,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2396,        a = prodA >>> 32;,4,1,0,0,0,0,0,0,0,6,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2397,        b = prodA & 0xffffffffL;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2399,        c = PI_O_4_BITS[0] >>> 32;,8,2,1,1,2,0,0,0,0,14,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2400,        d = PI_O_4_BITS[0] & 0xffffffffL;,2,1,1,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2402,        ac = a * c;,2,0,0,0,0,0,0,0,0,3,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2403,        bd = b * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2404,        bc = b * c;,14,5,0,0,0,0,0,0,0,20,11,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2405,        ad = a * d;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2407,        long prod2B = bd + (ad << 32);,6,2,0,1,2,0,0,0,0,8,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2408,        long prod2A = ac + (ad >>> 32);,6,2,0,1,2,0,0,0,0,9,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2410,        bita = (bd & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2411,        bitb = (ad & 0x80000000L ) != 0;,6,2,0,1,2,0,12,4,0,25,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2412,        bitsum = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2415,        if ( (bita && bitb) ||,10,3,0,1,3,0,0,0,0,14,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2417,            prod2A++;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2420,        bita = (prod2B & 0x8000000000000000L) != 0;,6,3,0,1,2,0,0,0,0,11,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2421,        bitb = (bc & 0x80000000L ) != 0;,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2423,        prod2B = prod2B + (bc << 32);,6,1,0,1,2,0,0,0,0,8,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2424,        prod2A = prod2A + (bc >>> 32);,10,2,0,1,2,0,0,0,0,13,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2426,        bitsum = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2429,        if ( (bita && bitb) ||,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2431,            prod2A++;,2,0,0,0,0,0,0,0,0,3,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2435,        c = PI_O_4_BITS[1] >>> 32;,2,1,1,1,2,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2436,        d = PI_O_4_BITS[1] & 0xffffffffL;,2,1,1,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2437,        ac = a * c;,8,1,0,0,0,0,2,0,0,13,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2438,        bc = b * c;,6,2,0,0,0,0,2,0,0,10,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2439,        ad = a * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2442,        ac = ac + ((bc + ad) >>> 32);,0,0,0,2,4,0,0,0,0,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2444,        bita = (prod2B & 0x8000000000000000L) != 0;,8,3,0,1,2,1,0,0,0,13,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2445,        bitb = (ac & 0x8000000000000000L ) != 0;,8,4,0,1,2,0,0,0,0,13,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2446,        prod2B += ac;,8,2,0,0,0,0,0,0,0,10,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2447,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2449,        if ( (bita && bitb) ||,10,1,0,1,3,0,0,0,0,13,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2451,            prod2A++;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2455,        a = prodB >>> 32;,4,1,0,0,0,0,0,0,0,6,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2456,        b = prodB & 0xffffffffL;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2457,        c = PI_O_4_BITS[0] >>> 32;,2,1,1,1,2,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2458,        d = PI_O_4_BITS[0] & 0xffffffffL;,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2459,        ac = a * c;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2460,        bc = b * c;,6,3,0,0,0,0,0,0,0,9,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2461,        ad = a * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2464,        ac = ac + ((bc + ad) >>> 32);,0,0,0,2,4,0,0,0,0,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2466,        bita = (prod2B & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2467,        bitb = (ac & 0x8000000000000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2468,        prod2B += ac;,4,0,0,0,0,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2469,        bitsum = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2471,        if ( (bita && bitb) ||,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2473,            prod2A++;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2477,        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits,0,0,0,1,2,0,0,0,0,3,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2478,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits,10,5,0,4,8,0,0,0,0,15,102,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2480,        double sumA = tmpA + tmpB;,6,1,0,0,0,0,0,0,0,7,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2481,        double sumB = -(sumA - tmpA - tmpB);,8,1,0,1,2,0,0,0,0,10,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2484,        result[0] = intPart;,2,0,1,1,2,0,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2485,        result[1] = sumA * 2.0;,2,1,1,1,2,0,0,0,0,6,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2486,        result[2] = sumB * 2.0;,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2487,    },2,1,1,0,1,0,0,0,0,11,1,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2495,        boolean negative = false;,4,0,0,0,0,0,0,0,0,5,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2496,        int quadrant = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2498,        double xb = 0.0;,4,0,0,0,0,0,0,0,0,4,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2501,        xa = x;,4,0,0,0,0,0,0,0,0,5,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2502,        if (x < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2503,            negative = true;,2,0,0,0,0,0,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2504,            xa = -xa;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2508,        if (xa == 0.0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2509,            long bits = Double.doubleToLongBits(x);,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2510,            if (bits < 0) {,2,1,0,1,3,0,0,0,0,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2511,                return -0.0;,2,1,1,0,0,2,0,0,0,7,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2513,            return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2516,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,0,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2517,            return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2521,        if (xa > 3294198.0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2525,            double reduceResults[] = new double[3];,0,0,0,2,4,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2526,"            reducePayneHanek(xa, reduceResults);",0,0,0,1,2,0,6,0,0,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2527,            quadrant = ((int) reduceResults[0]) & 3;,4,1,0,3,6,1,0,0,0,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2528,            xa = reduceResults[1];,8,4,1,1,2,0,0,0,0,15,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2529,            xb = reduceResults[2];,6,0,1,1,2,0,0,0,0,9,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2530,        } else if (xa > 1.5707963267948966) {,2,1,0,1,4,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2535,            int k = (int)(xa * 0.6366197723675814);,2,0,1,2,4,1,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2541,                double a = -k * 1.570796251296997;,6,2,0,0,0,0,0,0,0,10,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2542,                remA = xa + a;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2543,                remB = -(remA - xa - a);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2545,                a = -k * 7.549789948768648E-8;,6,2,0,0,0,0,12,0,0,23,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2546,                double b = remA;,4,0,0,0,0,0,0,0,0,4,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2547,                remA = a + b;,4,0,0,0,0,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2548,                remB += -(remA - b - a);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2550,                a = -k * 6.123233995736766E-17;,6,1,0,0,0,0,0,0,0,9,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2551,                b = remA;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2552,                remA = a + b;,12,5,0,0,0,0,4,0,0,22,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2553,                remB += -(remA - b - a);,2,1,0,1,2,0,4,0,0,7,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2555,                if (remA > 0.0),2,1,0,1,2,0,0,0,0,3,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2556,                    break;,0,0,0,0,0,0,12,0,0,12,6,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2561,                k--;,0,0,0,0,0,0,0,0,0,0,4,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2562,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2563,            quadrant = k & 3;,4,1,0,0,0,0,0,0,0,6,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2564,            xa = remA;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2565,            xb = remB;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2568,        if (negative) {,2,0,0,1,3,0,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2569,            quadrant ^= 2;  // Flip bit 1,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2572,        switch (quadrant) {,4,1,1,1,3,1,0,0,0,10,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2574,"                return sinQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2576,"                return cosQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2578,"                return -sinQ(xa, xb);",6,1,0,1,2,2,0,0,0,8,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2580,"                return -cosQ(xa, xb);",0,0,0,1,2,1,6,0,0,7,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2582,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2592,        int quadrant = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2595,        double xa = x;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2596,        if (x < 0) {,8,2,0,1,3,0,0,0,0,10,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2597,            xa = -xa;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2600,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2601,            return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2605,        double xb = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2606,        if (xa > 3294198.0) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2610,            double reduceResults[] = new double[3];,2,0,0,2,4,0,0,0,0,2,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2611,"            reducePayneHanek(xa, reduceResults);",0,0,0,1,2,0,6,0,0,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2612,            quadrant = ((int) reduceResults[0]) & 3;,0,0,0,3,6,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2613,            xa = reduceResults[1];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2614,            xb = reduceResults[2];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2615,        } else if (xa > 1.5707963267948966) {,2,1,0,1,4,0,0,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2620,            int k = (int)(xa * 0.6366197723675814);,4,1,0,2,4,0,6,0,0,11,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2626,                double a = -k * 1.570796251296997;,8,1,0,0,0,1,4,0,0,16,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2627,                remA = xa + a;,6,1,0,0,0,0,0,0,0,8,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2628,                remB = -(remA - xa - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2630,                a = -k * 7.549789948768648E-8;,4,1,0,0,0,0,0,0,0,7,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2631,                double b = remA;,6,0,0,0,0,0,0,0,0,6,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2632,                remA = a + b;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2633,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2635,                a = -k * 6.123233995736766E-17;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2636,                b = remA;,4,0,0,0,0,0,0,0,0,5,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2637,                remA = a + b;,8,1,1,0,0,1,0,0,0,14,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2638,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2640,                if (remA > 0.0),2,1,0,1,2,0,0,0,0,3,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2641,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2646,                k--;,0,0,0,0,0,0,0,0,0,0,4,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2647,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2648,            quadrant = k & 3;,4,1,0,0,0,0,0,0,0,6,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2649,            xa = remA;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2650,            xb = remB;,4,0,0,0,0,0,0,0,0,6,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2656,        switch (quadrant) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2658,"                return cosQ(xa, xb);",0,0,0,1,2,1,6,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2660,"                return -sinQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2662,"                return -cosQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2664,"                return sinQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2666,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2676,        boolean negative = false;,2,0,0,0,0,0,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2677,        int quadrant = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2680,        double xa = x;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2681,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2682,            negative = true;,2,0,0,0,0,0,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2683,            xa = -xa;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2687,        if (xa == 0.0) {,6,1,0,1,3,0,0,0,0,8,16,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2688,            long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2689,            if (bits < 0) {,6,3,1,1,3,0,0,0,0,18,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2690,                return -0.0;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2692,            return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2695,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2696,            return Double.NaN;,12,4,0,0,0,1,0,0,0,19,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2700,        double xb = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2701,        if (xa > 3294198.0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2705,            double reduceResults[] = new double[3];,0,0,0,2,4,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2706,"            reducePayneHanek(xa, reduceResults);",2,1,0,1,2,0,0,0,0,3,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2707,            quadrant = ((int) reduceResults[0]) & 3;,2,1,1,3,6,0,0,0,0,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2708,            xa = reduceResults[1];,0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2709,            xb = reduceResults[2];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2710,        } else if (xa > 1.5707963267948966) {,0,0,0,1,4,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2715,            int k = (int)(xa * 0.6366197723675814);,4,1,0,2,4,0,0,0,0,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2721,                double a = -k * 1.570796251296997;,4,1,0,0,0,0,0,0,0,6,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2722,                remA = xa + a;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2723,                remB = -(remA - xa - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2725,                a = -k * 7.549789948768648E-8;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2726,                double b = remA;,10,1,0,0,0,0,0,0,0,12,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2727,                remA = a + b;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2728,                remB += -(remA - b - a);,6,1,0,1,2,0,0,0,0,7,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2730,                a = -k * 6.123233995736766E-17;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2731,                b = remA;,10,3,0,0,0,0,0,0,0,14,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2732,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2733,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2735,                if (remA > 0.0),0,0,0,1,2,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2736,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2741,                k--;,4,1,0,0,0,0,0,0,0,7,4,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2742,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2743,            quadrant = k & 3;,20,5,0,0,0,0,0,0,0,29,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2744,            xa = remA;,6,1,0,0,0,0,0,0,0,8,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2745,            xb = remB;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2748,        if (xa > 1.5) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2750,            final double pi2a = 1.5707963267948966;,4,2,0,0,0,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2751,            final double pi2b = 6.123233995736766E-17;,8,1,0,0,0,1,0,0,0,11,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2753,            final double a = pi2a - xa;,6,1,0,0,0,1,0,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2754,            double b = -(a - pi2a + xa);,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2755,            b += pi2b - xb;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2757,            xa = a + b;,6,1,0,0,0,0,0,0,0,8,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2758,            xb = -(xa - a - b);,12,2,0,1,2,0,0,0,0,16,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2759,            quadrant ^= 1;,2,0,0,0,0,0,0,0,0,3,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2760,            negative ^= true;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2764,        if ((quadrant & 1) == 0) {,2,2,0,2,5,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2765,"            result = tanQ(xa, xb, false);",2,0,0,1,2,0,6,0,0,10,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2767,"            result = -tanQ(xa, xb, true);",2,0,0,1,2,0,6,0,0,11,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2770,        if (negative) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2771,            result = -result;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2774,        return result;,4,0,1,0,0,2,0,2,0,11,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2783,"        return atan(x, 0.0, false);",2,1,0,1,2,1,4,0,0,8,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2793,        boolean negate = false;,4,0,0,0,0,1,6,0,0,13,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2796,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,2,1,0,1,3,1,0,0,0,3,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2797,"            return leftPlane ? copySign(Math.PI, xa) : xa;",8,0,0,1,2,1,4,0,0,12,46,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2800,        if (xa < 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2802,            xa = -xa;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2803,            xb = -xb;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2804,            negate = true;,2,0,0,0,0,0,0,0,0,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2807,        if (xa > 1.633123935319537E16) { // Very large input,0,0,0,1,3,0,0,0,0,4,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2808,            return (negate ^ leftPlane) ? (-Math.PI/2.0) : (Math.PI/2.0);,12,3,0,3,6,1,0,0,0,16,61,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2812,        if (xa < 1.0) {,2,1,0,1,3,0,4,0,0,7,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2813,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,0,0,0,4,8,0,0,0,0,12,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2815,            double temp = 1.0/xa;,4,1,0,0,0,0,6,0,0,11,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2816,            idx = (int) (-((-1.7168146928204136 * temp * temp + 8.0) * temp) + 13.07);,8,4,0,4,8,0,0,0,0,15,74,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2818,        double epsA = xa - TANGENT_TABLE_A[idx];,4,1,1,1,2,0,0,0,0,9,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2819,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,0,0,0,2,4,0,0,0,0,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2820,        epsB += xb - TANGENT_TABLE_B[idx];,4,1,1,1,2,0,0,0,0,10,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2822,        double temp = epsA + epsB;,0,0,0,0,0,0,0,0,0,0,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2823,        epsB = -(temp - epsA - epsB);,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2824,        epsA = temp;,8,1,0,0,0,0,0,0,0,10,12,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2827,        temp = xa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2828,        double ya = xa + temp - temp;,22,6,0,0,0,0,0,0,0,31,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2829,        double yb = xb + xa - ya;,10,2,0,0,0,0,0,0,0,13,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2830,        xa = ya;,6,0,1,0,0,1,0,0,0,10,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2831,        xb += yb;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2834,        if (idx == 0) {,14,2,0,1,3,1,0,4,0,21,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2837,            double denom = 1.0 / (1.0 + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,10,5,1,5,10,0,2,0,0,25,87,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2839,            ya = epsA * denom;,6,1,0,0,0,0,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2840,            yb = epsB * denom;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2841,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2842,            double temp2 = xa * TANGENT_TABLE_A[idx];,12,2,1,1,2,0,0,0,0,19,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2843,            double za = 1.0 + temp2;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2844,            double zb = -(za - 1.0 - temp2);,8,1,1,1,2,0,0,0,0,13,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2845,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,0,0,0,2,4,0,0,0,0,6,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2846,            temp = za + temp2;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2847,            zb += -(temp - za - temp2);,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2848,            za = temp;,2,0,0,0,0,0,6,0,0,8,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2850,            zb += xb * TANGENT_TABLE_B[idx];,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2851,            ya = epsA / za;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2853,            temp = ya * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2854,            final double yaa = (ya + temp) - temp;,10,3,0,1,2,1,0,0,0,14,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2855,            final double yab = ya - yaa;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2857,            temp = za * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2858,            final double zaa = (za + temp) - temp;,0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2859,            final double zab = za - zaa;,4,2,0,0,0,0,0,0,0,7,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2862,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,26,9,0,1,2,0,0,0,0,36,65,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2864,            yb += -epsA * zb / za / za;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2865,            yb += epsB / za;,12,2,0,0,0,0,0,0,0,15,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2869,        epsA = ya;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2870,        epsB = yb;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2873,        double epsA2 = epsA*epsA;,6,1,0,0,0,0,0,0,0,7,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2884,        yb = 0.07490822288864472;,2,0,0,0,0,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2885,        yb = yb * epsA2 + -0.09088450866185192;,18,5,0,0,0,0,0,0,0,26,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2886,        yb = yb * epsA2 + 0.11111095942313305;,6,2,0,0,0,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2887,        yb = yb * epsA2 + -0.1428571423679182;,14,4,1,0,0,0,0,0,0,24,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2888,        yb = yb * epsA2 + 0.19999999999923582;,6,2,0,0,0,0,0,0,0,10,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2889,        yb = yb * epsA2 + -0.33333333333333287;,6,2,0,0,0,0,0,0,0,10,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2890,        yb = yb * epsA2 * epsA;,12,1,0,0,0,1,8,0,0,24,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2893,        ya = epsA;,6,0,0,0,0,0,0,0,0,7,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2895,        temp = ya + yb;,6,1,0,0,0,0,2,2,0,12,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2896,        yb = -(temp - ya - yb);,8,1,0,1,2,0,0,4,0,15,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2897,        ya = temp;,16,0,0,0,0,0,0,0,0,18,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2900,        yb += epsB / (1.0 + epsA * epsA);,8,3,0,1,2,0,0,0,0,12,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2906,        double za = EIGHTHS[idx] + ya;,10,2,1,1,2,0,0,0,0,17,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2907,        double zb = -(za - EIGHTHS[idx] - ya);,0,0,0,2,4,0,0,0,0,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2908,        temp = za + yb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2909,        zb += -(temp - za - yb);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2910,        za = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2912,        result = za + zb;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2913,        resultb = -(result - za - zb);,10,2,0,1,2,0,0,0,0,15,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2915,        if (leftPlane) {,6,1,0,1,3,0,0,0,0,8,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2917,            final double pia = 1.5707963267948966*2.0;,2,0,0,0,0,0,0,0,0,3,42,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2918,            final double pib = 6.123233995736766E-17*2.0;,0,0,0,0,0,0,0,0,0,0,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2920,            za = pia - result;,2,2,1,0,0,0,0,0,0,6,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2921,            zb = -(za - pia + result);,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2922,            zb += pib - resultb;,28,10,0,0,0,0,4,0,0,43,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2924,            result = za + zb;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2925,            resultb = -(result - za - zb);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2929,        if (negate ^ leftPlane) {,0,0,0,1,3,0,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2930,            result = -result;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2933,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2943,        if (x !=x || y != y) {,8,3,0,1,3,0,0,0,0,11,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2944,            return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2947,        if (y == 0.0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2948,            double result = x*y;,2,0,1,0,0,0,0,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2949,            double invx = 1.0/x;,4,1,0,0,0,0,0,0,0,5,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2950,            double invy = 1.0/y;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2952,            if (invx == 0.0) { // X is infinite,2,1,0,1,3,0,0,0,0,3,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2953,                if (x > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2954,                    return y; // return +/- 0.0,6,0,0,0,0,2,8,0,0,15,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2956,"                    return copySign(Math.PI, y);",4,0,0,1,2,1,4,0,0,8,28,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2960,            if (x < 0.0 || invx < 0.0) {,0,0,0,1,3,0,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2961,                if (y < 0.0 || invy < 0.0) {,0,0,0,1,3,0,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2962,                    return -Math.PI;,4,0,0,0,0,1,0,0,0,5,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2964,                    return Math.PI;,4,0,0,0,0,1,0,0,0,5,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2967,                return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2973,        if (y == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2974,            if (x == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2975,                return Math.PI/4.0;,6,0,0,0,0,1,0,2,0,8,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2978,            if (x == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2979,                return Math.PI*3.0/4.0;,4,2,0,0,0,1,0,0,0,6,23,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2982,            return Math.PI/2.0;,8,1,0,0,0,2,0,2,0,12,19,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2985,        if (y == Double.NEGATIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2986,            if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2987,                return -Math.PI/4.0;,4,1,0,0,0,1,0,0,0,6,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2990,            if (x == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2991,                return -Math.PI*3.0/4.0;,0,0,0,0,0,1,0,0,0,1,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2994,            return -Math.PI/2.0;,2,1,1,0,0,1,0,0,0,6,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2997,        if (x == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2998,            if (y > 0.0 || 1/y > 0.0) {,0,0,0,1,3,0,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2999,                return 0.0;,2,0,0,0,0,1,0,0,0,3,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3002,            if (y < 0.0 || 1/y < 0.0) {,10,1,0,1,3,0,0,0,0,12,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3003,                return -0.0;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3007,        if (x == Double.NEGATIVE_INFINITY),0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3009,            if (y > 0.0 || 1/y > 0.0) {,0,0,0,1,3,0,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3010,                return Math.PI;,4,1,0,0,0,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3013,            if (y < 0.0 || 1/y < 0.0) {,0,0,0,1,3,0,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3014,                return -Math.PI;,0,0,0,0,0,1,0,0,0,1,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3020,        if (x == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3021,            if (y > 0.0 || 1/y > 0.0) {,4,4,0,1,3,0,0,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3022,                return Math.PI/2.0;,4,1,0,0,0,1,0,0,0,5,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3025,            if (y < 0.0 || 1/y < 0.0) {,4,4,0,1,3,0,0,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3026,                return -Math.PI/2.0;,4,1,0,0,0,1,0,0,0,6,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3031,        final double r = y/x;,8,2,1,0,0,1,0,0,0,14,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3032,        if (Double.isInfinite(r)) { // bypass calculations that can create NaN,0,0,0,2,5,0,0,0,0,7,70,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3033,"            return atan(r, 0, x < 0);",8,2,0,1,2,1,4,0,0,15,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3036,        double ra = doubleHighPart(r);,2,0,0,1,2,0,4,0,0,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3037,        double rb = r - ra;,2,1,0,0,0,0,0,0,0,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3040,        final double xa = doubleHighPart(x);,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3041,        final double xb = x - xa;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3043,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,30,11,0,1,2,0,0,0,0,43,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3045,        double temp = ra + rb;,6,1,0,0,0,0,0,0,0,7,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3046,        rb = -(temp - ra - rb);,8,1,0,1,2,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3047,        ra = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3049,        if (ra == 0) { // Fix up the sign so atan works correctly,2,1,0,1,3,0,0,0,0,3,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3050,"            ra = copySign(0.0, y);",0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3054,"        double result = atan(ra, rb, x < 0);",4,1,0,1,2,0,6,0,0,11,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3056,        return result;,2,0,1,0,0,1,12,0,0,19,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3064,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3065,          return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3068,      if (x > 1.0 || x < -1.0) {,0,0,0,1,3,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3069,          return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3072,      if (x == 1.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3073,          return Math.PI/2.0;,0,0,0,0,0,1,0,0,0,1,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3076,      if (x == -1.0) {,2,1,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3077,          return -Math.PI/2.0;,4,1,0,0,0,1,0,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3080,      if (x == 0.0) { // Matches +/- 0.0; return correct sign,2,1,0,1,3,1,0,0,0,3,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3081,          return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3087,      double temp = x * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3088,      final double xa = x + temp - temp;,8,4,0,0,0,1,20,0,0,33,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3089,      final double xb = x - xa;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3092,      double ya = xa*xa;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3093,      double yb = xa*xb*2.0 + xb*xb;,2,0,0,0,0,0,0,0,0,3,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3096,      ya = -ya;,4,0,0,0,0,0,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3097,      yb = -yb;,4,0,0,0,0,0,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3099,      double za = 1.0 + ya;,4,1,0,0,0,0,0,0,0,5,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3100,      double zb = -(za - 1.0 - ya);,6,1,0,1,2,0,0,0,0,8,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3102,      temp = za + yb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3103,      zb += -(temp - za - yb);,8,1,0,1,2,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3104,      za = temp;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3108,      y = sqrt(za);,2,0,0,1,2,1,2,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3109,      temp = y * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3110,      ya = y + temp - temp;,8,2,0,0,0,0,0,0,0,11,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3111,      yb = y - ya;,6,1,0,0,0,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3114,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,22,8,0,2,4,0,0,0,0,32,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3117,      double dx = zb / (2.0*y);,20,6,0,1,2,0,0,0,0,27,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3120,      double r = x/y;,6,1,0,0,0,0,4,0,0,11,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3121,      temp = r * HEX_40000000;,8,1,1,0,0,0,0,0,0,15,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3122,      double ra = r + temp - temp;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3123,      double rb = r - ra;,6,1,0,0,0,0,0,0,0,7,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3125,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,0,0,0,1,2,0,0,0,0,3,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3126,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,8,1,0,0,0,0,0,0,0,11,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3128,      temp = ra + rb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3129,      rb = -(temp - ra - rb);,2,0,0,1,2,0,4,0,0,6,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3130,      ra = temp;,8,0,0,0,0,0,0,0,0,10,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3132,"      return atan(ra, rb, false);",0,0,0,1,2,1,6,0,0,7,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3140,      if (x != x) {,0,0,0,1,3,0,4,0,0,4,13,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3141,          return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3144,      if (x > 1.0 || x < -1.0) {,0,0,0,1,3,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3145,          return Double.NaN;,8,1,0,0,0,1,0,0,0,10,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3148,      if (x == -1.0) {,4,2,0,1,3,1,0,0,0,8,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3149,          return Math.PI;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3152,      if (x == 1.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3153,          return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3156,      if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3157,          return Math.PI/2.0;,4,1,0,0,0,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3163,      double temp = x * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3164,      final double xa = x + temp - temp;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3165,      final double xb = x - xa;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3168,      double ya = xa*xa;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3169,      double yb = xa*xb*2.0 + xb*xb;,10,3,0,0,0,0,0,0,0,13,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3172,      ya = -ya;,8,0,0,0,0,0,0,0,0,11,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3173,      yb = -yb;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3175,      double za = 1.0 + ya;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3176,      double zb = -(za - 1.0 - ya);,6,1,0,1,2,0,0,0,0,8,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3178,      temp = za + yb;,8,2,0,0,0,0,0,0,0,11,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3179,      zb += -(temp - za - yb);,8,1,0,1,2,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3180,      za = temp;,20,4,0,0,0,0,0,0,0,27,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3183,      double y = sqrt(za);,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3184,      temp = y * HEX_40000000;,8,1,0,0,0,1,4,0,0,15,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3185,      ya = y + temp - temp;,8,2,0,0,0,0,0,0,0,11,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3186,      yb = y - ya;,20,5,0,0,0,0,0,0,0,27,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3189,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,20,8,0,2,4,0,0,0,0,30,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3192,      yb += zb / (2.0*y);,6,2,0,1,2,0,0,0,0,9,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3193,      y = ya+yb;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3194,      yb = -(y - ya - yb);,8,1,0,1,2,0,0,0,0,11,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3197,      double r = y/x;,6,1,0,0,0,0,0,0,0,7,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3200,      if (Double.isInfinite(r)) { // x is effectively zero,2,1,0,2,5,0,6,0,0,9,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3201,          return Math.PI/2; // so return the appropriate value,4,1,0,0,0,2,0,0,0,5,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3204,      double ra = doubleHighPart(r);,2,0,0,1,2,0,4,0,0,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3205,      double rb = r - ra;,6,1,0,0,0,0,0,0,0,7,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3207,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,22,9,0,1,2,0,0,0,0,32,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3208,      rb += yb / x;  // Add in effect additional bits of sqrt.,0,0,0,0,0,0,0,0,0,0,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3210,      temp = ra + rb;,4,4,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3211,      rb = -(temp - ra - rb);,16,2,0,1,2,0,2,4,0,26,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3212,      ra = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3214,"      return atan(ra, rb, x<0);",2,1,0,1,2,1,6,0,0,10,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3223,      long inbits = Double.doubleToLongBits(x);,10,1,0,1,2,0,6,0,0,18,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3224,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,2,0,0,3,6,0,8,0,0,11,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3225,      boolean subnormal = false;,0,0,0,0,0,0,0,0,0,0,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3227,      if (exponent == -1023) {,2,1,0,1,3,0,4,0,0,8,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3228,          if (x == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3229,              return x;,14,2,0,0,0,1,0,0,0,17,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3233,          subnormal = true;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3234,          x *= 1.8014398509481984E16;  // 2^54,2,0,0,0,0,0,0,0,0,3,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3235,          inbits = Double.doubleToLongBits(x);,6,2,1,1,2,0,6,0,0,24,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3236,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0,0,0,3,6,0,0,0,0,9,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3239,      if (exponent == 1024) {,12,3,0,1,3,0,0,0,0,16,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3241,          return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3245,      int exp3 = exponent / 3;,12,2,0,0,0,0,0,0,0,16,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3248,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,8,6,0,1,3,0,4,0,0,18,68,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3252,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,4,2,0,2,4,1,4,0,0,11,98,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3255,      double est = -0.010714690733195933;,4,2,0,0,0,0,0,0,0,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3256,      est = est * mant + 0.0875862700108075;,6,2,0,0,0,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3257,      est = est * mant + -0.3058015757857271;,12,3,0,0,0,1,0,0,0,18,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3258,      est = est * mant + 0.7249995199969751;,10,2,0,0,0,0,2,2,0,17,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3259,      est = est * mant + 0.5039018405998233;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3261,      est *= CBRTTWO[exponent % 3 + 2];,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3266,      final double xs = x / (p2*p2*p2);,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3267,      est += (xs - est*est*est) / (3*est*est);,0,0,0,2,4,0,0,0,0,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3268,      est += (xs - est*est*est) / (3*est*est);,0,0,0,2,4,0,0,0,0,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3271,      double temp = est * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3272,      double ya = est + temp - temp;,8,2,0,0,0,0,0,0,0,10,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3273,      double yb = est - ya;,6,1,0,0,0,0,0,0,0,7,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3275,      double za = ya * ya;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3276,      double zb = ya * yb * 2.0 + yb * yb;,12,3,1,0,0,1,0,0,0,20,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3277,      temp = za * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3278,      double temp2 = za + temp - temp;,0,0,0,0,0,0,0,0,0,0,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3279,      zb += za - temp2;,10,2,0,0,0,0,0,0,0,13,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3280,      za = temp2;,6,1,0,0,0,1,0,0,0,8,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3282,      zb = za * yb + ya * zb + zb * yb;,22,7,0,0,0,0,0,0,0,31,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3283,      za = za * ya;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3285,      double na = xs - za;,8,1,0,0,0,0,0,0,0,9,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3286,      double nb = -(na - xs + za);,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3287,      nb -= zb;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3289,      est += (na+nb)/(3*est*est);,10,3,0,2,4,0,0,0,0,14,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3292,      est *= p2;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3294,      if (subnormal) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3295,          est *= 3.814697265625E-6;  // 2^-18,10,1,0,0,0,0,0,0,0,13,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3298,      return est;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3308,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0,0,0,2,5,1,0,0,0,8,79,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3309,            return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3313,        final double facta = 0.01745329052209854;,2,0,0,0,0,1,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3314,        final double factb = 1.997844754509471E-9;,0,0,0,0,0,0,0,0,0,0,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3316,        double xa = doubleHighPart(x);,2,0,0,1,2,0,4,0,0,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3317,        double xb = x - xa;,4,0,0,0,0,1,4,0,0,10,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3319,        double result = xb * factb + xb * facta + xa * factb + xa * facta;,18,7,0,0,0,0,0,0,0,25,66,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3320,        if (result == 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3321,            result = result * x; // ensure correct sign if calculation underflows,0,0,0,0,0,0,0,0,0,0,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3323,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3333,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0,0,0,2,5,1,0,0,0,8,79,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3334,            return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3338,        final double facta = 57.2957763671875;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3339,        final double factb = 3.145894820876798E-6;,6,0,0,0,0,1,0,0,0,7,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3341,        double xa = doubleHighPart(x);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3342,        double xb = x - xa;,6,1,0,0,0,0,0,0,0,7,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3344,        return xb * factb + xb * facta + xa * factb + xa * facta;,0,0,0,0,0,1,0,0,0,1,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3353,        return (x < 0) ? -x : x;,0,0,0,1,2,1,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3362,        return (x < 0l) ? -x : x;,0,0,0,1,2,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3371,        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0,0,0,0,2,4,1,0,0,0,7,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3380,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,0,0,0,2,4,1,0,0,0,7,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3389,        if (Double.isInfinite(x)) {,0,0,0,2,5,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3390,            return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3392,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,2,2,0,3,6,1,12,0,0,16,72,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3401,        if (Float.isInfinite(x)) {,4,0,0,2,5,0,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3402,            return Float.POSITIVE_INFINITY;,6,2,0,0,0,1,8,0,0,18,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3404,        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));,0,0,0,3,6,1,0,0,0,10,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3416,        if ((n > -1023) && (n < 1024)) {,8,2,0,3,7,1,0,0,0,11,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3417,            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);,10,5,0,4,8,1,4,0,0,21,62,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3421,        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {,2,2,0,4,9,0,12,0,0,16,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3422,            return d;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3424,        if (n < -2098) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3425,            return (d > 0) ? 0.0 : -0.0;,2,1,0,1,2,1,0,0,0,4,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3427,        if (n > 2097) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3428,            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,10,1,0,1,2,1,0,0,0,11,69,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3432,        final long bits = Double.doubleToLongBits(d);,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3433,        final long sign = bits & 0x8000000000000000L;,12,4,0,0,0,1,2,2,0,21,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3434,        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;,12,3,0,3,6,0,0,0,0,15,48,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3435,        long mantissa   = bits & 0x000fffffffffffffL;,0,0,0,0,0,0,0,0,0,0,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3438,        int scaledExponent = exponent + n;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3440,        if (n < 0) {,4,2,0,1,3,0,0,0,0,7,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3442,            if (scaledExponent > 0) {,0,0,0,1,3,0,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3444,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,8,2,0,4,8,2,4,0,0,15,82,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3445,            } else if (scaledExponent > -53) {,0,0,0,1,4,0,0,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3449,                mantissa = mantissa | (1L << 52);,14,3,0,1,2,0,0,0,0,19,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3452,                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));,12,3,0,2,4,1,0,0,0,17,73,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3453,                mantissa = mantissa >>> (1 - scaledExponent);,4,0,0,1,2,0,0,0,0,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3454,                if (mostSignificantLostBit != 0) {,0,0,0,1,3,0,0,0,0,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3456,                    mantissa++;,4,0,0,0,0,0,0,0,0,4,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3458,                return Double.longBitsToDouble(sign | mantissa);,6,2,0,1,2,1,4,0,0,12,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3462,                return (sign == 0L) ? 0.0 : -0.0;,0,0,0,1,2,1,0,0,0,4,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3466,            if (exponent == 0) {,2,1,0,1,3,0,0,0,0,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3469,                while ((mantissa >>> 52) != 1) {,0,0,0,2,5,0,0,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3470,                    mantissa = mantissa << 1;,6,1,0,0,0,0,0,0,0,8,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3471,                    --scaledExponent;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3473,                ++scaledExponent;,4,0,0,0,0,0,0,0,0,5,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3474,                mantissa = mantissa & 0x000fffffffffffffL;,4,1,0,0,0,0,0,0,0,6,42,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3476,                if (scaledExponent < 2047) {,4,2,0,1,3,0,0,0,0,7,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3477,                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,6,2,0,4,8,1,4,0,0,12,82,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3479,                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0,0,0,1,2,1,0,0,0,4,74,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3482,            } else if (scaledExponent < 2047) {,10,2,0,1,4,0,0,0,0,13,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3483,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0,0,0,4,8,1,0,0,0,13,82,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3485,                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,18,2,0,1,2,1,0,0,0,22,74,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3500,        if ((n > -127) && (n < 128)) {,4,0,0,3,7,0,0,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3501,            return f * Float.intBitsToFloat((n + 127) << 23);,0,0,0,2,4,1,0,0,0,7,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3505,        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {,2,2,0,4,9,0,12,0,0,16,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3506,            return f;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3508,        if (n < -277) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3509,            return (f > 0) ? 0.0f : -0.0f;,0,0,0,1,2,1,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3511,        if (n > 276) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3512,            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,10,1,0,1,2,1,0,0,0,11,67,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3516,        final int bits = Float.floatToIntBits(f);,6,1,0,1,2,1,10,0,0,18,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3517,        final int sign = bits & 0x80000000;,0,0,0,0,0,0,4,0,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3518,        int  exponent  = (bits >>> 23) & 0xff;,6,2,0,1,2,0,4,0,0,12,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3519,        int mantissa   = bits & 0x007fffff;,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3522,        int scaledExponent = exponent + n;,6,1,0,0,0,0,0,0,0,7,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3524,        if (n < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3526,            if (scaledExponent > 0) {,2,1,0,1,3,0,0,0,0,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3528,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0,0,0,2,4,1,0,0,0,7,70,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3529,            } else if (scaledExponent > -24) {,2,1,0,1,4,0,0,0,0,4,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3533,                mantissa = mantissa | (1 << 23);,8,2,0,1,2,0,0,0,0,12,32,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3536,                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));,10,1,0,2,4,0,0,0,0,12,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3537,                mantissa = mantissa >>> (1 - scaledExponent);,6,2,1,1,2,0,8,0,0,21,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3538,                if (mostSignificantLostBit != 0) {,0,0,0,1,3,0,0,0,0,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3540,                    mantissa++;,6,0,0,0,0,0,0,0,0,8,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3542,                return Float.intBitsToFloat(sign | mantissa);,14,4,0,1,2,1,0,0,0,19,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3546,                return (sign == 0) ? 0.0f : -0.0f;,0,0,0,1,2,1,0,0,0,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3550,            if (exponent == 0) {,2,1,0,1,3,0,0,0,0,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3553,                while ((mantissa >>> 23) != 1) {,0,0,0,2,5,0,0,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3554,                    mantissa = mantissa << 1;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3555,                    --scaledExponent;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3557,                ++scaledExponent;,2,0,0,0,0,0,0,0,0,3,17,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3558,                mantissa = mantissa & 0x007fffff;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3560,                if (scaledExponent < 255) {,2,1,0,1,3,0,0,0,0,3,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3561,                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,6,2,0,2,4,1,4,0,0,12,70,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3563,                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,10,1,0,1,2,1,0,0,0,11,71,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3566,            } else if (scaledExponent < 255) {,2,1,0,1,4,0,0,0,0,3,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3567,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0,0,0,2,4,1,0,0,0,7,70,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3569,                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0,0,0,1,2,1,0,0,0,4,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3609,        if (Double.isNaN(d) || Double.isNaN(direction)) {,0,1,0,3,7,0,12,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3610,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3611,        } else if (d == direction) {,4,1,0,1,4,0,0,0,0,5,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3612,            return direction;,4,2,0,0,0,1,0,0,0,7,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3613,        } else if (Double.isInfinite(d)) {,2,0,0,2,6,0,0,0,0,2,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3614,            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;,22,4,0,1,2,2,0,0,0,28,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3615,        } else if (d == 0) {,4,1,0,1,4,0,0,2,0,7,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3616,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,10,1,0,1,2,1,0,0,0,12,62,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3621,        final long bits = Double.doubleToLongBits(d);,2,0,0,1,2,1,6,0,0,9,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3622,        final long sign = bits & 0x8000000000000000L;,4,1,0,0,0,1,0,0,0,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3623,        if ((direction < d) ^ (sign == 0L)) {,6,3,0,3,7,0,0,0,0,9,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3624,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));,4,3,0,3,6,1,4,0,0,11,74,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3626,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));,4,3,0,3,6,1,4,0,0,11,74,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3665,        if (Double.isNaN(f) || Double.isNaN(direction)) {,0,1,0,3,7,0,12,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3666,            return Float.NaN;,0,0,0,0,0,1,0,0,0,1,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3667,        } else if (f == direction) {,12,2,0,1,4,0,0,0,0,15,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3668,            return (float) direction;,8,1,0,1,2,2,0,0,0,10,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3669,        } else if (Float.isInfinite(f)) {,0,0,0,2,6,0,6,0,0,6,33,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3670,            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;,20,2,0,1,2,2,2,0,0,27,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3671,        } else if (f == 0f) {,0,0,0,1,4,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3672,            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;,0,0,0,1,2,1,0,0,0,4,60,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3677,        final int bits = Float.floatToIntBits(f);,8,2,0,1,2,0,0,0,0,11,41,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3678,        final int sign = bits & 0x80000000;,10,2,0,0,0,2,0,0,0,14,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3679,        if ((direction < f) ^ (sign == 0)) {,6,3,0,3,7,0,0,0,0,9,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3680,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));,4,3,0,3,6,1,4,0,0,11,62,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3682,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));,4,3,0,3,6,1,4,0,0,11,62,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3694,        if (x != x) { // NaN,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3695,            return x;,16,1,0,0,0,1,0,0,0,18,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3698,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,8,3,0,1,3,0,0,0,0,12,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3699,            return x;,10,1,0,0,0,1,0,0,0,11,9,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3702,        y = (long) x;,6,0,0,1,2,0,0,2,0,10,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3703,        if (x < 0 && y != x) {,6,3,0,1,3,0,0,0,0,9,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3704,            y--;,0,0,0,0,0,0,0,0,0,0,4,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3707,        if (y == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3708,            return x*y;,8,5,0,0,0,1,0,0,0,13,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3711,        return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3721,        if (x != x) { // NaN,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3722,            return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3725,        y = floor(x);,4,0,0,1,2,0,4,0,0,9,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3726,        if (y == x) {,8,1,0,1,3,0,0,0,0,9,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3727,            return y;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3730,        y += 1.0;,6,0,0,0,0,1,4,0,0,12,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3732,        if (y == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3733,            return x*y;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3736,        return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3744,        double y = floor(x);,6,1,0,1,2,0,4,0,0,11,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3745,        double d = x - y;,14,1,0,0,0,0,8,0,0,24,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3747,        if (d > 0.5) {,2,1,0,1,3,0,0,2,0,5,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3748,            if (y == -1.0) {,2,1,0,1,3,0,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3749,                return -0.0; // Preserve sign of operand,0,0,0,0,0,1,0,0,0,1,40,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3751,            return y+1.0;,2,1,0,0,0,1,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3753,        if (d < 0.5) {,6,1,0,1,3,0,0,0,0,7,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3754,            return y;,4,0,0,0,0,1,0,0,0,4,9,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3758,        long z = (long) y;,4,0,0,1,2,0,0,0,0,4,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3759,        return (z & 1) == 0 ? y : y + 1.0;,6,3,0,1,2,1,0,0,0,9,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3767,        return (long) floor(x + 0.5);,10,2,0,2,4,1,8,0,0,20,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3775,        return (int) floor(x + 0.5f);,2,1,0,2,4,1,2,0,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3793,        return (a <= b) ? a : b;,8,1,0,1,2,1,0,0,0,9,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3802,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3803,            return b;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3805,        if (a < b) {,4,1,0,1,3,0,14,0,0,19,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3806,            return a;,6,2,1,0,0,1,0,0,0,12,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3809,        if (a != b) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3810,            return Float.NaN;,10,1,0,0,0,1,0,0,0,12,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3814,        int bits = Float.floatToRawIntBits(a);,0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3815,        if (bits == 0x80000000) {,0,0,0,1,3,0,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3816,            return a;,10,1,0,0,0,1,0,0,0,12,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3818,        return b;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3827,        if (a > b) {,0,0,0,1,3,0,4,0,0,4,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3828,            return b;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3830,        if (a < b) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3831,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3834,        if (a != b) {,6,1,0,1,3,0,0,0,0,7,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3835,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3839,        long bits = Double.doubleToRawLongBits(a);,0,0,0,1,2,0,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3840,        if (bits == 0x8000000000000000L) {,2,1,0,1,3,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3841,            return a;,10,1,0,0,0,1,0,0,0,13,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3843,        return b;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3852,        return (a <= b) ? b : a;,0,0,0,1,2,1,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3861,        return (a <= b) ? b : a;,2,0,0,1,2,1,2,4,0,8,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3870,        if (a > b) {,6,2,0,1,3,0,0,0,0,9,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3871,            return a;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3873,        if (a < b) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3874,            return b;,4,0,0,0,0,1,0,0,0,5,9,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3877,        if (a != b) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3878,            return Float.NaN;,6,0,0,0,0,1,0,0,0,6,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3882,        int bits = Float.floatToRawIntBits(a);,2,0,0,1,2,0,10,0,0,12,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3883,        if (bits == 0x80000000) {,2,1,0,1,3,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3884,            return b;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3886,        return a;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3895,        if (a > b) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3896,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3898,        if (a < b) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3899,            return b;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3902,        if (a != b) {,6,1,0,1,3,0,0,0,0,7,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3903,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3907,        long bits = Double.doubleToRawLongBits(a);,0,0,0,1,2,0,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3908,        if (bits == 0x8000000000000000L) {,10,3,0,1,3,0,0,0,0,13,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3909,            return b;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3911,        return a;,4,0,0,0,0,1,0,0,0,5,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3929,        if (Double.isInfinite(x) || Double.isInfinite(y)) {,0,0,0,3,7,0,0,0,0,10,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3930,            return Double.POSITIVE_INFINITY;,6,0,0,0,0,2,0,2,0,9,32,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3931,        } else if (Double.isNaN(x) || Double.isNaN(y)) {,0,1,0,3,8,0,12,0,0,13,48,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3932,            return Double.NaN;,4,0,0,0,0,1,6,0,0,11,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3935,            final int expX = getExponent(x);,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3936,            final int expY = getExponent(y);,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3937,            if (expX > expY + 27) {,0,0,0,1,3,0,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3939,                return abs(x);,6,1,1,1,2,1,4,0,0,14,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3940,            } else if (expY > expX + 27) {,4,0,0,1,4,0,0,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3942,                return abs(y);,0,0,0,1,2,1,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3946,                final int middleExp = (expX + expY) / 2;,6,2,1,1,2,1,4,0,0,18,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3949,"                final double scaledX = scalb(x, -middleExp);",4,0,0,1,2,1,4,0,0,10,44,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3950,"                final double scaledY = scalb(y, -middleExp);",0,0,0,1,2,0,0,0,0,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3953,                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);,10,3,0,1,2,1,2,0,0,16,67,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3956,"                return scalb(scaledH, middleExp);",0,0,0,1,2,1,0,0,0,4,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3984,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation",0,0,0,1,2,1,8,0,0,8,90,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3996,        long m = Double.doubleToLongBits(magnitude);,2,0,0,1,2,0,6,0,0,8,44,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3997,        long s = Double.doubleToLongBits(sign);,2,0,0,1,2,0,6,0,0,8,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3998,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0,0,0,3,7,0,0,0,0,10,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3999,            return magnitude;,2,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,4001,        return -magnitude; // flip sign,2,0,0,0,0,1,0,0,0,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,4013,        int m = Float.floatToIntBits(magnitude);,20,6,0,1,2,0,6,0,0,32,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,4014,        int s = Float.floatToIntBits(sign);,6,0,0,1,2,0,6,0,0,13,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,4015,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,6,1,0,3,7,0,0,0,0,8,69,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,4016,            return magnitude;,0,0,0,0,0,1,8,0,0,8,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,4018,        return -magnitude; // flip sign,0,0,0,0,0,1,0,0,0,1,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,4031,        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;,0,3,0,4,8,1,6,0,0,10,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,4044,        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;,0,0,0,3,6,1,0,0,0,10,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,69,"        this(random, EmptyClusterStrategy.LARGEST_VARIANCE);",6,0,0,1,2,0,0,0,0,6,52,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,70,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,134,        return clusters;,0,0,0,0,0,1,0,0,0,1,16,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,175,            int sum = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.5,1,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,176,            for (int i = 0; i < pointSet.size(); i++) {,8,1,0,2,5,0,10,0,0,20,43,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,177,                final T p = pointSet.get(i);,2,0,0,1,2,1,6,2,0,11,28,8,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,178,"                final Cluster<T> nearest = getNearestCluster(resultSet, p);",0,0,0,1,2,0,0,0,0,3,59,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,179,                final double d = p.distanceFrom(nearest.getCenter());,2,0,0,2,4,1,8,0,0,11,53,8,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,180,                sum += d * d;,6,1,0,0,0,0,0,0,0,8,13,8,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,181,                dx2[i] = sum;,2,0,1,1,2,0,0,0,0,7,13,8,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,186,            final double r = random.nextDouble() * sum;,4,1,0,1,2,1,4,0,0,10,43,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,187,            for (int i = 0 ; i < dx2.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,188,                if (dx2[i] >= r) {,2,1,1,2,5,0,0,0,0,7,18,8,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,189,                    final T p = pointSet.remove(i);,2,0,0,1,2,1,6,2,0,11,31,10,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,190,                    resultSet.add(new Cluster<T>(p));,8,2,0,2,4,0,4,4,0,20,33,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,191,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,194,        },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,44,public final class MathUtils {,0,0,0,0,1,0,0,0,0,1,30,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,89,    private static final long[] FACTORIALS = new long[] {,2,0,0,2,5,3,0,0,0,5,53,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1873,      double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1874,      for (int i = 0; i < p1.length; i++) {,16,2,0,1,3,1,0,0,0,20,37,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1875,          final double dp = p1[i] - p2[i];,2,1,1,2,4,1,0,0,0,12,32,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1876,          sum += dp * dp;,6,1,0,0,0,0,0,0,0,8,15,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1878,      return FastMath.sqrt(sum);,0,0,0,1,2,1,0,0,0,4,26,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,55,    private static final double EXP_INT_TABLE_A[] = new double[1500];,2,0,0,2,4,3,0,0,0,5,65,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,60,    private static final double EXP_INT_TABLE_B[] = new double[1500];,2,0,0,2,4,3,0,0,0,5,65,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,65,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,4,0,0,2,4,3,0,0,0,8,66,1,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,70,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,0,0,0,2,4,0,0,0,0,6,66,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,73,    private static final double FACT[] = new double[20];,2,0,0,2,4,3,0,0,0,5,52,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,76,    private static final double LN_MANT[][] = new double[1024][];,0,0,0,4,8,0,0,0,0,12,61,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,85,    private static final double LN_SPLIT_COEF[][] = {,6,1,0,2,5,3,0,0,0,10,49,1,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,105,    private static final double LN_QUICK_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,118,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,51,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,128,    private static final double SINE_TABLE_A[] = new double[14];,0,0,0,2,4,0,0,0,0,6,60,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,131,    private static final double SINE_TABLE_B[] = new double[14];,2,0,0,2,4,3,0,0,0,5,60,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,134,    private static final double COSINE_TABLE_A[] = new double[14];,2,0,0,2,4,3,0,0,0,5,62,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,137,    private static final double COSINE_TABLE_B[] = new double[14];,2,0,0,2,4,3,0,0,0,5,62,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,140,    private static final double TANGENT_TABLE_A[] = new double[14];,0,0,0,2,4,0,0,0,0,6,63,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,143,    private static final double TANGENT_TABLE_B[] = new double[14];,0,0,0,2,4,0,0,0,0,6,63,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,146,    private static final long RECIP_2PI[] = new long[] {,2,0,0,2,5,3,0,0,0,5,52,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,167,    private static final long PI_O_4_BITS[] = new long[] {,0,0,0,2,5,0,0,0,0,7,54,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,175,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",10,1,0,2,4,3,0,0,0,14,126,1,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,178,"    private static final double CBRTTWO[] = { 0.6299605249474366,",2,0,0,1,3,0,0,0,0,2,61,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,208,        FACT[0] = 1.0;,0,0,1,1,2,0,0,0,0,3,14,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,209,        for (i = 1; i < FACT.length; i++) {,0,0,0,1,3,0,0,0,0,4,35,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,210,            FACT[i] = FACT[i-1] * i;,6,2,1,2,4,0,0,0,0,21,24,1,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,213,        double tmp[] = new double[2];,6,0,0,2,4,0,0,0,0,7,29,1,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,214,        double recip[] = new double[2];,0,0,0,2,4,0,0,0,0,6,31,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,217,        for (i = 0; i < 750; i++) {,0,0,0,1,3,0,0,0,0,4,27,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,218,"            expint(i, tmp);",0,0,0,1,2,0,6,0,0,6,15,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,219,            EXP_INT_TABLE_A[i+750] = tmp[0];,4,1,1,2,4,0,0,8,0,18,32,1,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,220,            EXP_INT_TABLE_B[i+750] = tmp[1];,0,0,0,2,4,0,2,0,0,2,32,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,222,            if (i != 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,224,"                splitReciprocal(tmp, recip);",0,0,0,1,2,0,0,0,0,3,28,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,225,                EXP_INT_TABLE_A[750-i] = recip[0];,0,0,0,2,4,0,0,0,0,6,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,226,                EXP_INT_TABLE_B[750-i] = recip[1];,2,1,0,2,4,0,6,0,0,10,34,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,231,        for (i = 0; i < EXP_FRAC_TABLE_A.length; i++) {,10,1,0,1,3,0,0,0,0,13,47,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,232,"            slowexp(i/1024.0, tmp);",0,0,0,1,2,0,0,0,0,3,23,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,233,            EXP_FRAC_TABLE_A[i] = tmp[0];,2,0,1,2,4,1,2,0,0,12,29,1,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,234,            EXP_FRAC_TABLE_B[i] = tmp[1];,0,0,0,2,4,0,0,0,0,6,29,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,238,        for (i = 0; i < LN_MANT.length; i++) {,0,0,0,1,3,0,0,0,0,4,38,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,239,            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,0,0,0,4,8,0,0,0,0,12,79,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,240,            LN_MANT[i] = slowLog(d);,0,0,0,2,4,0,0,0,0,6,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,244,        buildSinCosTables();,2,0,0,1,2,0,6,0,0,10,20,1,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,245,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,277,        return Math.sqrt(a);,0,0,0,1,2,1,0,0,0,4,20,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,987,        final double xs[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,988,        final double ys[] = new double[2];,10,2,0,2,4,2,0,0,0,14,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,989,        final double facts[] = new double[2];,8,1,0,2,4,0,0,0,0,10,37,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,990,        final double as[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,991,"        split(x, xs);",0,0,0,1,2,0,6,0,0,6,13,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,992,        ys[0] = ys[1] = 0.0;,0,0,1,2,4,0,0,0,0,6,20,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,994,        for (int i = 19; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,31,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,995,"            splitMult(xs, ys, as);",2,0,0,1,2,0,0,0,0,3,22,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,996,            ys[0] = as[0];,0,0,0,2,4,0,0,0,0,6,14,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,997,            ys[1] = as[1];,0,0,1,2,4,0,0,0,0,5,14,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,999,"            split(FACT[i], as);",0,0,1,2,4,0,4,0,0,8,19,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1000,"            splitReciprocal(as, facts);",0,0,0,1,2,0,6,0,0,6,27,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1002,"            splitAdd(ys, facts, as);",0,0,0,1,2,0,8,0,0,8,24,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1003,            ys[0] = as[0];,0,0,0,2,4,0,0,0,0,6,14,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1004,            ys[1] = as[1];,0,0,1,2,4,0,0,0,0,5,14,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1007,        if (result != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1008,            result[0] = ys[0];,0,0,0,2,4,0,0,0,0,6,18,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1009,            result[1] = ys[1];,0,0,0,2,4,0,0,0,0,6,18,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1012,        return ys[0] + ys[1];,0,1,1,2,4,1,0,0,0,5,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1021,        if (d < 8e298 && d > -8e298) {,0,0,0,1,3,0,0,0,0,4,30,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1022,            final double a = d * HEX_40000000;,6,1,0,0,0,1,0,0,0,8,34,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1023,            split[0] = (d + a) - a;,0,0,0,2,4,0,0,0,0,6,23,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1024,            split[1] = d - split[0];,0,0,0,2,4,0,0,0,0,6,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1025,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1030,    },6,1,0,0,1,0,0,0,0,8,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1037,        final double c = a[0] + a[1];,0,0,0,2,4,0,0,0,0,6,29,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1038,        final double d = -(c - a[0] - a[1]);,0,0,0,3,6,0,0,0,0,9,36,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1040,        if (c < 8e298 && c > -8e298) {,0,0,0,1,3,0,0,0,0,4,30,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1041,            double z = c * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,28,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1042,            a[0] = (c + z) - z;,10,4,1,2,4,0,0,0,0,17,19,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1043,            a[1] = c - a[0] + d;,0,0,0,2,4,0,0,0,0,6,20,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1044,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1045,            double z = c * 9.31322574615478515625E-10;,4,1,0,0,0,0,0,0,0,5,42,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1046,            a[0] = (c + z - c) * HEX_40000000;,8,3,1,2,4,0,0,0,0,14,34,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1047,            a[1] = c - a[0] + d;,0,0,0,2,4,0,0,0,0,6,20,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1049,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1057,        ans[0] = a[0] * b[0];,0,0,0,3,6,0,0,0,0,9,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1058,        ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];,0,5,1,7,14,0,0,0,0,20,49,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1061,        resplit(ans);,0,0,0,1,2,0,0,0,0,3,13,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1062,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1070,        ans[0] = a[0] + b[0];,0,1,1,3,6,0,0,0,0,8,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1071,        ans[1] = a[1] + b[1];,0,1,1,3,6,0,0,0,0,8,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1073,        resplit(ans);,0,0,0,1,2,0,4,0,0,4,13,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1074,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1095,        final double b = 1.0/4194304.0;,4,1,0,0,0,1,0,0,0,6,31,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1096,        final double a = 1.0 - b;,4,1,0,0,0,1,0,0,0,6,25,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1098,        if (in[0] == 0.0) {,0,0,0,2,5,0,0,0,0,7,19,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1103,        result[0] = a / in[0];,0,0,0,2,4,0,0,0,0,6,22,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1104,        result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);,0,0,0,9,18,0,0,0,0,27,60,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1106,        if (result[1] != result[1]) { // can happen if result[1] is NAN,0,1,1,4,9,0,0,0,0,5,63,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1107,            result[1] = 0.0;,0,0,1,1,2,0,0,0,0,3,16,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1111,        resplit(result);,0,0,0,1,2,0,6,0,0,6,16,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1113,        for (int i = 0; i < 2; i++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1115,            double err = 1.0 - result[0] * in[0] - result[0] * in[1] -,0,0,0,4,8,0,0,0,0,12,58,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1118,            err = err * (result[0] + result[1]);,0,0,0,3,6,0,0,0,0,9,36,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1120,            result[1] += err;,0,0,1,1,2,0,18,0,0,22,17,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1122,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1130,        final double xs[] = new double[2];,14,9,0,2,4,1,0,0,0,25,34,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1131,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1132,        final double zs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1135,"        split(a[0], xs);",0,0,1,2,4,0,4,0,0,6,16,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1136,"        split(b[0], ys);",0,0,1,2,4,0,4,0,0,6,16,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1137,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,0,0,0,3,22,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1139,        result[0] = zs[0];,0,0,0,2,4,0,0,0,0,6,18,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1140,        result[1] = zs[1];,0,0,1,2,4,0,0,0,0,5,18,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1143,"        split(b[1], ys);",0,0,1,2,4,0,4,0,0,6,16,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1144,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,8,0,0,8,22,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1146,        double tmp = result[0] + zs[0];,0,0,0,2,4,0,0,0,0,6,31,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1147,        result[1] = result[1] - (tmp - result[0] - zs[0]);,6,1,0,5,10,0,0,0,0,8,50,9,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1148,        result[0] = tmp;,4,0,1,1,2,1,0,6,0,14,16,1,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1149,        tmp = result[0] + zs[1];,0,0,0,2,4,0,0,0,0,6,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1150,        result[1] = result[1] - (tmp - result[0] - zs[1]);,0,0,0,5,10,0,0,0,0,15,50,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1151,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1154,"        split(a[1], xs);",4,0,1,2,4,0,4,0,0,11,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1155,"        split(b[0], ys);",0,0,1,2,4,0,4,0,0,6,16,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1156,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,8,0,0,8,22,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1158,        tmp = result[0] + zs[0];,0,0,0,2,4,0,0,0,0,6,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1159,        result[1] = result[1] - (tmp - result[0] - zs[0]);,2,2,1,5,10,0,0,0,0,13,50,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1160,        result[0] = tmp;,16,5,1,1,2,0,0,0,0,25,16,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1161,        tmp = result[0] + zs[1];,0,0,0,2,4,0,0,0,0,6,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1162,        result[1] = result[1] - (tmp - result[0] - zs[1]);,0,0,0,5,10,0,0,0,0,15,50,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1163,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1166,"        split(a[1], xs);",0,0,1,2,4,0,4,0,0,6,16,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1167,"        split(b[1], ys);",0,0,0,2,4,0,0,0,0,6,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1168,"        splitMult(xs, ys, zs);",10,1,0,1,2,0,8,0,0,21,22,1,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1170,        tmp = result[0] + zs[0];,8,2,1,2,4,0,4,0,0,23,24,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1171,        result[1] = result[1] - (tmp - result[0] - zs[0]);,2,2,1,5,10,0,0,0,0,13,50,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1172,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1173,        tmp = result[0] + zs[1];,2,1,1,2,4,0,2,0,0,10,24,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1174,        result[1] = result[1] - (tmp - result[0] - zs[1]);,2,0,0,5,10,0,0,0,0,3,50,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1175,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1176,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1185,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1186,        final double as[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1187,        final double ys[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1196,        xs[0] = 2.718281828459045;,0,0,1,1,2,0,0,0,0,3,26,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1197,        xs[1] = 1.4456468917292502E-16;,0,0,0,1,2,0,0,0,0,3,31,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1199,"        split(1.0, ys);",0,0,0,1,2,0,0,0,0,3,15,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1201,        while (p > 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1202,            if ((p & 1) != 0) {,0,0,0,2,5,0,0,0,0,7,19,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1203,"                quadMult(ys, xs, as);",10,1,0,1,2,0,0,0,0,12,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1204,                ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1207,"            quadMult(xs, xs, as);",0,0,0,1,2,0,8,0,0,8,21,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1208,            xs[0] = as[0]; xs[1] = as[1];,0,0,0,4,8,0,0,0,0,12,29,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1210,            p >>= 1;,0,0,0,0,0,0,0,0,0,0,8,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1213,        if (result != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1214,            result[0] = ys[0];,0,0,0,2,4,0,0,0,0,6,18,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1215,            result[1] = ys[1];,0,0,0,2,4,0,0,0,0,6,18,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1217,            resplit(result);,0,0,0,1,2,0,4,2,0,6,16,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1220,        return ys[0] + ys[1];,0,0,0,2,4,1,0,0,0,7,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1716,        double x[] = new double[2];,0,0,0,2,4,0,0,0,0,6,27,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1717,        double x2[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1718,        double y[] = new double[2];,4,0,0,2,4,1,2,0,0,7,27,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1719,        double a[] = new double[2];,2,0,0,2,4,3,0,0,0,5,27,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1721,"        split(xi, x);",10,0,0,1,2,0,6,0,0,17,13,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1724,        x[0] += 1.0;,0,0,1,1,2,0,0,0,0,3,12,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1725,        resplit(x);,0,0,0,1,2,0,4,0,0,4,11,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1726,"        splitReciprocal(x, a);",0,0,0,1,2,0,0,0,0,3,22,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1727,        x[0] -= 2.0;,0,0,0,1,2,0,0,0,0,3,12,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1728,        resplit(x);,0,0,0,1,2,0,0,0,0,3,11,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1729,"        splitMult(x, a, y);",0,0,0,1,2,0,8,0,0,8,19,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1730,        x[0] = y[0];,0,0,1,2,4,0,0,0,0,5,12,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1731,        x[1] = y[1];,0,0,1,2,4,0,0,0,0,5,12,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1734,"        splitMult(x, x, x2);",0,0,0,1,2,0,8,0,0,8,20,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1740,        y[0] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][0];,4,1,1,3,6,0,0,0,0,10,48,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1741,        y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];,4,1,1,3,6,0,0,0,0,10,48,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1743,        for (int i = LN_SPLIT_COEF.length-2; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,51,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1744,"            splitMult(y, x2, a);",0,0,1,1,2,0,8,0,0,15,20,1,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1745,            y[0] = a[0];,0,0,1,2,4,0,0,0,0,10,12,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1746,            y[1] = a[1];,4,0,0,2,4,0,0,0,0,5,12,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1747,"            splitAdd(y, LN_SPLIT_COEF[i], a);",0,0,1,2,4,0,6,0,0,10,33,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1748,            y[0] = a[0];,2,0,0,2,4,0,6,0,0,8,12,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1749,            y[1] = a[1];,2,0,1,2,4,3,0,0,0,10,12,1,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1752,"        splitMult(y, x, a);",0,0,0,1,2,0,14,0,0,14,19,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1753,        y[0] = a[0];,0,0,0,2,4,0,0,0,0,6,12,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1754,        y[1] = a[1];,6,0,1,2,4,5,0,2,0,18,12,1,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1756,        return y;,4,0,0,0,0,1,0,0,0,5,9,0,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1766,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1767,        final double ys[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1768,        final double facts[] = new double[2];,2,0,0,2,4,1,0,0,0,3,37,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1769,        final double as[] = new double[2];,2,0,0,2,4,0,0,0,0,2,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1770,"        split(x, xs);",0,0,0,1,2,0,0,0,0,3,13,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1771,        ys[0] = ys[1] = 0.0;,2,0,1,2,4,0,0,0,0,8,20,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1773,        for (int i = 19; i >= 0; i--) {,6,1,0,1,3,0,0,0,0,8,31,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1774,"            splitMult(xs, ys, as);",10,1,0,1,2,0,8,0,0,20,22,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1775,            ys[0] = as[0]; ys[1] = as[1];,0,0,0,4,8,0,0,0,0,12,29,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1777,            if ( (i & 1) == 0) {,4,0,0,2,5,1,0,4,0,9,20,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1778,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1781,"            split(FACT[i], as);",8,1,1,2,4,1,8,0,0,22,19,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1782,"            splitReciprocal(as, facts);",6,4,0,1,2,0,0,0,0,10,27,14,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1784,            if ( (i & 2) != 0 ) {,2,2,0,2,5,0,0,0,0,4,21,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1785,                facts[0] = -facts[0];,0,0,0,2,4,0,0,0,0,6,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1786,                facts[1] = -facts[1];,0,0,0,2,4,0,0,0,0,6,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1789,"            splitAdd(ys, facts, as);",8,2,0,1,2,0,8,0,0,18,24,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1790,            ys[0] = as[0]; ys[1] = as[1];,0,0,0,4,8,0,0,0,0,12,29,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1793,        if (result != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1794,            result[0] = ys[0];,0,0,0,2,4,0,0,0,0,6,18,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1795,            result[1] = ys[1];,0,0,1,2,4,0,0,0,0,5,18,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1798,        return ys[0] + ys[1];,0,1,1,2,4,1,0,0,0,5,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1809,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1810,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1811,        final double facts[] = new double[2];,6,1,1,2,4,1,0,0,0,14,37,0,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1812,        final double as[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1813,"        split(x, xs);",0,0,0,1,2,0,0,0,0,3,13,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1814,        ys[0] = ys[1] = 0.0;,0,0,1,2,4,0,0,0,0,6,20,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1816,        for (int i = 19; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,31,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1817,"            splitMult(xs, ys, as);",0,0,0,1,2,0,0,0,0,3,22,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1818,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1820,            if ( (i & 1) != 0) {,2,2,0,2,5,0,0,0,0,4,20,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1821,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1824,"            split(FACT[i], as);",6,1,1,2,4,0,4,0,0,15,19,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1825,"            splitReciprocal(as, facts);",0,0,0,1,2,0,0,0,0,3,27,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1827,            if ( (i & 2) != 0 ) {,2,2,0,2,5,0,0,0,0,4,21,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1828,                facts[0] = -facts[0];,0,0,0,2,4,0,0,0,0,6,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1829,                facts[1] = -facts[1];,0,0,1,2,4,0,0,0,0,6,21,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1832,"            splitAdd(ys, facts, as);",0,0,0,1,2,0,8,0,0,8,24,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1833,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1836,        if (result != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1837,            result[0] = ys[0];,0,0,0,2,4,0,0,0,0,6,18,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1838,            result[1] = ys[1];,0,0,0,2,4,0,0,0,0,6,18,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1841,        return ys[0] + ys[1];,0,0,0,2,4,1,0,0,0,7,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1847,        final double result[] = new double[2];,2,0,0,2,4,1,0,0,0,3,38,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1850,        for (int i = 0; i < 7; i++) {,6,1,0,1,3,0,0,0,0,8,29,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1851,            double x = i / 8.0;,6,1,0,0,0,0,4,0,0,12,19,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1853,"            slowSin(x, result);",2,0,0,1,2,0,6,0,0,9,19,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1854,            SINE_TABLE_A[i] = result[0];,0,0,1,2,4,0,0,0,0,5,28,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1855,            SINE_TABLE_B[i] = result[1];,0,0,0,2,4,0,0,0,0,6,28,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1857,"            slowCos(x, result);",0,0,0,1,2,0,6,0,0,6,19,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1858,            COSINE_TABLE_A[i] = result[0];,6,0,0,2,4,0,8,0,0,15,30,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1859,            COSINE_TABLE_B[i] = result[1];,0,0,1,2,4,0,0,0,0,7,30,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1863,        for (int i = 7; i < 14; i++) {,0,0,0,1,3,0,0,0,0,4,30,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1864,            double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,28,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1865,            double ys[] = new double[2];,2,0,0,2,4,0,6,0,0,8,28,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1866,            double as[] = new double[2];,0,0,1,2,4,0,0,0,0,5,28,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1867,            double bs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,28,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1868,            double temps[] = new double[2];,2,0,1,2,4,0,0,0,0,7,31,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1870,            if ( (i & 1) == 0) {,12,3,0,2,5,0,0,0,0,16,20,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1872,                xs[0] = SINE_TABLE_A[i/2];,0,0,0,2,4,0,0,0,0,6,26,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1873,                xs[1] = SINE_TABLE_B[i/2];,0,0,0,2,4,0,0,0,0,6,26,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1874,                ys[0] = COSINE_TABLE_A[i/2];,0,0,0,2,4,0,0,0,0,6,28,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1875,                ys[1] = COSINE_TABLE_B[i/2];,2,1,1,2,4,0,0,0,0,8,28,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1878,"                splitMult(xs, ys, result);",0,0,0,1,2,0,8,0,0,8,26,9,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1879,                SINE_TABLE_A[i] = result[0] * 2.0;,2,1,1,2,4,0,8,0,0,19,34,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1880,                SINE_TABLE_B[i] = result[1] * 2.0;,0,1,1,2,4,0,0,0,0,8,34,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1883,"                splitMult(ys, ys, as);",0,0,0,1,2,0,0,0,0,3,22,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1884,"                splitMult(xs, xs, temps);",0,0,0,1,2,0,0,0,0,3,25,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1885,                temps[0] = -temps[0];,0,0,0,2,4,0,0,0,0,6,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1886,                temps[1] = -temps[1];,0,0,0,2,4,0,0,0,0,6,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1887,"                splitAdd(as, temps, result);",0,0,0,1,2,0,8,0,0,8,28,9,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1888,                COSINE_TABLE_A[i] = result[0];,2,1,0,2,4,0,0,0,0,3,30,9,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1889,                COSINE_TABLE_B[i] = result[1];,2,0,1,2,4,0,0,0,0,9,30,1,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1891,                xs[0] = SINE_TABLE_A[i/2];,0,0,0,2,4,0,0,0,0,6,26,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1892,                xs[1] = SINE_TABLE_B[i/2];,0,0,0,2,4,0,0,0,0,6,26,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1893,                ys[0] = COSINE_TABLE_A[i/2];,0,0,0,2,4,0,0,0,0,6,28,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1894,                ys[1] = COSINE_TABLE_B[i/2];,2,1,1,2,4,0,0,0,0,8,28,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1895,                as[0] = SINE_TABLE_A[i/2+1];,0,0,0,2,4,0,0,0,0,6,28,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1896,                as[1] = SINE_TABLE_B[i/2+1];,2,2,1,2,4,0,0,0,0,9,28,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1897,                bs[0] = COSINE_TABLE_A[i/2+1];,0,0,0,2,4,0,0,0,0,6,30,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1898,                bs[1] = COSINE_TABLE_B[i/2+1];,4,2,1,2,4,0,0,0,0,12,30,0,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1901,"                splitMult(xs, bs, temps);",0,0,0,1,2,0,0,0,0,3,25,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1902,"                splitMult(ys, as, result);",2,0,0,1,2,0,0,0,0,3,26,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1903,"                splitAdd(result, temps, result);",0,0,0,1,2,0,0,0,0,3,32,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1904,                SINE_TABLE_A[i] = result[0];,0,0,0,2,4,0,0,0,0,6,28,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1905,                SINE_TABLE_B[i] = result[1];,0,0,0,2,4,0,0,0,0,6,28,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1908,"                splitMult(ys, bs, result);",0,0,0,1,2,0,0,0,0,3,26,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1909,"                splitMult(xs, as, temps);",0,0,0,1,2,0,8,0,0,8,25,9,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1910,                temps[0] = -temps[0];,0,0,0,2,4,0,0,0,0,6,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1911,                temps[1] = -temps[1];,4,1,1,2,4,0,0,0,0,11,21,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1912,"                splitAdd(result, temps, result);",0,0,0,1,2,0,8,0,0,8,32,9,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1913,                COSINE_TABLE_A[i] = result[0];,0,0,1,2,4,0,0,0,0,7,30,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1914,                COSINE_TABLE_B[i] = result[1];,0,0,0,2,4,0,0,0,0,6,30,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1919,        for (int i = 0; i < 14; i++) {,0,0,0,1,3,0,0,0,0,4,30,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1920,            double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,28,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1921,            double ys[] = new double[2];,2,0,1,2,4,0,0,0,0,8,28,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1922,            double as[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1924,            as[0] = COSINE_TABLE_A[i];,6,1,1,2,4,1,0,0,0,15,26,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1925,            as[1] = COSINE_TABLE_B[i];,0,0,0,2,4,0,0,0,0,6,26,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1927,"            splitReciprocal(as, ys);",0,0,0,1,2,0,0,0,0,3,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1929,            xs[0] = SINE_TABLE_A[i];,0,0,1,2,4,0,0,0,0,7,24,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1930,            xs[1] = SINE_TABLE_B[i];,0,0,0,2,4,0,0,0,0,6,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1932,"            splitMult(xs, ys, as);",0,0,0,1,2,0,8,0,0,8,22,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1934,            TANGENT_TABLE_A[i] = as[0];,0,0,1,2,4,0,0,0,0,7,27,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1935,            TANGENT_TABLE_B[i] = as[1];,0,0,0,2,4,0,0,0,0,6,27,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1938,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,43,    public EuclideanIntegerPoint(final int[] point) {,0,0,1,2,5,0,4,0,0,8,49,7,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,44,        this.point = point;,4,0,0,0,0,0,0,0,0,5,19,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,45,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,52,        return point;,2,0,0,0,0,1,0,0,0,2,13,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,57,"        return MathUtils.distance(point, p.getPoint());",0,0,0,2,4,1,10,0,0,10,47,5,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,77,        if (!(other instanceof EuclideanIntegerPoint)) {,2,0,0,2,5,0,0,2,0,5,48,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,80,        final int[] otherPoint = ((EuclideanIntegerPoint) other).getPoint();,4,0,0,4,8,1,2,2,0,9,68,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,81,        if (point.length != otherPoint.length) {,8,1,0,1,3,0,0,0,0,9,40,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,84,        for (int i = 0; i < point.length; i++) {,10,1,0,1,3,0,0,0,0,12,40,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,85,            if (point[i] != otherPoint[i]) {,0,1,1,3,7,0,0,0,0,9,32,6,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,86,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,39,    public static enum EmptyClusterStrategy {,2,0,0,0,1,2,0,0,0,4,41,2,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,42,"        LARGEST_VARIANCE,",4,1,0,0,0,0,0,0,0,5,17,1,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,45,"        LARGEST_POINTS_NUMBER,",2,0,0,0,0,0,0,0,0,2,22,3,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,48,"        FARTHEST_POINT,",2,0,0,0,0,0,0,0,0,2,15,3,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,51,        ERROR,0,0,0,0,0,0,0,0,0,0,5,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,78,"    public KMeansPlusPlusClusterer(final Random random, final EmptyClusterStrategy emptyStrategy) {",6,0,0,1,3,3,0,4,0,13,95,2,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,79,        this.random        = random;,0,0,0,0,0,0,0,0,0,0,28,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,80,        this.emptyStrategy = emptyStrategy;,4,0,0,0,0,0,0,0,0,5,35,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,81,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,95,"        List<Cluster<T>> clusters = chooseInitialCenters(points, k, random);",0,0,0,1,2,0,0,0,0,3,68,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,96,"        assignPointsToClusters(clusters, points);",0,0,0,1,2,0,6,0,0,6,41,5,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,99,        final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;,10,1,0,1,2,1,0,0,0,12,72,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,100,        for (int count = 0; count < max; count++) {,0,0,0,1,3,0,0,0,0,4,43,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,146,        for (final T p : points) {,4,0,0,1,3,1,0,2,0,7,26,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,147,"            Cluster<T> cluster = getNearestCluster(clusters, p);",2,0,0,1,2,0,6,4,0,12,52,6,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,148,            cluster.addPoint(p);,0,0,0,1,2,0,6,0,0,6,20,7,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,149,        },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,150,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,164,        final List<T> pointSet = new ArrayList<T>(points);,10,0,0,1,2,1,6,8,0,26,50,3,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,165,        final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();,2,0,0,1,2,1,0,12,0,15,63,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,168,        final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));,0,0,0,3,6,0,0,0,0,9,70,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,169,        resultSet.add(new Cluster<T>(firstPoint));,2,0,0,2,4,0,4,4,0,10,42,5,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,171,        final double[] dx2 = new double[pointSet.size()];,0,0,0,3,6,0,0,0,0,9,49,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,172,        while (resultSet.size() < k) {,0,0,0,2,5,0,0,0,0,7,30,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,196,        return resultSet;,0,0,0,0,0,1,0,0,0,1,17,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,321,        double minDistance = Double.MAX_VALUE;,6,0,0,0,0,0,0,2,0,9,38,3,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,322,        Cluster<T> minCluster = null;,2,0,0,0,0,0,0,4,0,6,29,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,323,        for (final Cluster<T> c : clusters) {,12,2,0,1,3,1,0,4,0,19,37,3,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,324,            final double distance = point.distanceFrom(c.getCenter());,2,0,0,2,4,1,8,0,0,11,58,6,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,325,            if (distance < minDistance) {,4,1,0,1,3,0,0,0,0,5,29,6,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,326,                minDistance = distance;,0,0,0,0,0,0,0,0,0,0,23,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,327,                minCluster = c;,0,0,0,0,0,0,0,0,0,0,15,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,329,        },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,330,        return minCluster;,2,0,0,0,0,1,0,0,0,2,18,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,57,45,    public Cluster(final T center) {,0,0,0,1,3,0,0,0,0,4,32,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,57,46,        this.center = center;,6,0,0,0,0,0,8,0,0,16,21,0,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,57,47,        points = new ArrayList<T>();,2,0,1,1,2,0,0,4,0,14,28,3,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,57,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,57,55,        points.add(point);,2,0,1,1,2,0,6,2,0,18,18,3,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,57,56,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,57,71,        return center;,2,0,0,0,0,1,0,0,0,2,14,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1914,    public static enum OrderDirection {,8,1,0,0,1,0,0,0,0,11,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1916,"        INCREASING,",0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1918,        DECREASING,2,0,0,0,0,0,0,0,0,2,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,102,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,103,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,116,        long s = (long)x + (long)y;,6,1,0,2,4,0,0,0,0,7,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,117,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,0,0,0,1,3,0,0,0,0,4,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,118,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);",8,0,0,1,2,0,0,2,0,10,79,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,120,        return (int)s;,0,0,0,1,2,1,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,134,"        return addAndCheck(a, b, LocalizedFormats.OVERFLOW_IN_ADDITION);",0,0,0,1,2,1,0,0,0,4,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,150,        if (a > b) {,4,1,1,1,3,0,0,0,0,15,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,152,"            ret = addAndCheck(b, a, pattern);",0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,156,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,157,                if (b < 0) {,2,1,0,1,3,0,0,0,0,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,159,                    if (Long.MIN_VALUE - b <= a) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,160,                        ret = a + b;,16,2,0,0,0,0,0,0,0,20,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,162,"                        throw new MathArithmeticException(pattern, a, b);",6,0,0,1,2,0,0,2,0,8,49,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,166,                    ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,173,                if (a <= Long.MAX_VALUE - b) {,8,2,0,1,3,0,0,0,0,10,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,174,                    ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,176,"                    throw new MathArithmeticException(pattern, a, b);",10,1,0,1,2,0,0,0,0,12,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,180,        return ret;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,209,"        checkBinomial(n, k);",0,0,0,1,2,0,6,0,0,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,210,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,211,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,213,        if ((k == 1) || (k == n - 1)) {,0,0,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,214,            return n;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,217,        if (k > n / 2),0,0,0,1,2,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,218,"            return binomialCoefficient(n, n - k);",4,1,0,1,2,1,4,0,0,9,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,225,        long result = 1;,6,0,0,0,0,0,0,2,0,8,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,226,        if (n <= 61) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,228,            int i = n - k + 1;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,229,            for (int j = 1; j <= k; j++) {,16,3,0,1,3,1,0,0,0,21,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,230,                result = result * i / j;,8,1,0,0,0,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,231,                i++;,2,0,0,0,0,0,0,0,0,3,4,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,233,        } else if (n <= 66) {,2,1,0,1,4,0,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,236,            int i = n - k + 1;,6,2,0,0,0,0,0,0,0,8,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,237,            for (int j = 1; j <= k; j++) {,10,1,1,1,3,0,0,0,0,15,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,244,"                final long d = gcd(i, j);",8,1,0,1,2,0,0,0,0,10,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,245,                result = (result / (j / d)) * (i / d);,0,0,0,3,6,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,246,                i++;,2,0,0,0,0,0,0,0,0,3,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,248,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,252,            int i = n - k + 1;,8,2,0,0,0,0,0,0,0,10,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,253,            for (int j = 1; j <= k; j++) {,14,1,0,1,3,0,0,0,0,16,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,254,"                final long d = gcd(i, j);",0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,255,"                result = mulAndCheck(result / (j / d), i / d);",12,3,0,2,4,0,2,0,0,18,46,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,256,                i++;,2,0,0,0,0,0,0,0,0,3,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,259,        return result;,6,1,1,0,0,1,0,0,0,13,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,285,"        checkBinomial(n, k);",0,0,0,1,2,0,6,0,0,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,286,        if ((n == k) || (k == 0)) {,6,3,1,3,7,0,0,0,0,12,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,287,            return 1d;,4,0,0,0,0,1,6,0,0,10,10,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,289,        if ((k == 1) || (k == n - 1)) {,0,0,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,290,            return n;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,292,        if (k > n/2) {,10,2,0,1,3,0,4,0,0,17,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,293,"            return binomialCoefficientDouble(n, n - k);",0,0,0,1,2,1,0,0,0,4,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,295,        if (n < 67) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,296,"            return binomialCoefficient(n,k);",0,0,0,1,2,1,0,0,0,4,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,299,        double result = 1d;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,300,        for (int i = 1; i <= k; i++) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,301,             result *= (double)(n - k + i) / (double)i;,20,7,1,3,6,0,0,0,0,31,42,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,304,        return FastMath.floor(result + 0.5);,0,0,0,1,2,1,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,326,"        checkBinomial(n, k);",0,0,0,1,2,0,6,0,0,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,327,        if ((n == k) || (k == 0)) {,0,0,0,3,7,0,0,0,0,10,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,328,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,330,        if ((k == 1) || (k == n - 1)) {,6,4,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,331,            return FastMath.log(n);,0,0,1,1,2,1,6,0,0,11,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,338,        if (n < 67) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,339,"            return FastMath.log(binomialCoefficient(n,k));",0,0,0,2,4,1,10,0,0,10,46,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,346,        if (n < 1030) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,347,"            return FastMath.log(binomialCoefficientDouble(n, k));",0,0,0,2,4,1,0,0,0,7,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,350,        if (k > n / 2) {,4,2,1,1,3,0,8,0,0,18,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,351,"            return binomialCoefficientLog(n, n - k);",4,1,0,1,2,1,4,0,0,9,40,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,357,        double logSum = 0;,10,1,0,0,0,0,0,0,0,11,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,360,        for (int i = n - k + 1; i <= n; i++) {,0,0,0,1,3,0,0,0,0,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,361,            logSum += FastMath.log(i);,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,365,        for (int i = 2; i <= k; i++) {,8,1,1,1,3,0,0,0,0,13,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,366,            logSum -= FastMath.log(i);,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,369,        return logSum;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,381,        if (n < k) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,382,"            throw new NumberIsTooLargeException(LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER,",4,0,0,0,1,0,0,2,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,385,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,386,"            throw new NotPositiveException(LocalizedFormats.BINOMIAL_NEGATIVE_PARAMETER, n);",0,0,1,1,2,0,0,0,0,7,80,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,388,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,401,"        if (equals(x, y, eps)) {",0,0,0,2,5,0,8,0,0,8,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,402,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,403,        } else if (x < y) {,0,0,0,1,4,0,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,404,          return -1;,6,0,0,0,0,1,4,0,0,11,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,406,        return 1;,4,0,0,0,0,1,4,0,0,8,9,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,417,        return (FastMath.exp(x) + FastMath.exp(-x)) / 2.0;,2,2,0,3,6,1,10,0,0,15,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,429,"        return equals(x, y, 1);",0,0,0,1,2,1,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,442,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, 1);",0,2,0,4,8,1,18,0,0,20,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,456,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",0,0,0,2,4,1,0,0,0,7,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,471,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",0,0,0,3,6,1,0,0,0,10,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,495,        assert maxUlps > 0 && maxUlps < NAN_GAP;,6,3,0,0,0,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,497,        int xInt = Float.floatToIntBits(x);,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,498,        int yInt = Float.floatToIntBits(y);,2,0,0,1,2,0,6,0,0,8,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,501,        if (xInt < 0) {,6,1,0,1,3,0,0,0,0,8,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,502,            xInt = SGN_MASK_FLOAT - xInt;,6,1,0,0,0,0,0,0,0,8,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,504,        if (yInt < 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,505,            yInt = SGN_MASK_FLOAT - yInt;,4,0,0,0,0,0,0,2,0,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,508,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,0,0,0,1,2,0,0,0,0,3,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,510,        return isEqual && !Float.isNaN(x) && !Float.isNaN(y);,0,0,0,2,4,1,0,0,0,7,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,526,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, maxUlps);",16,5,0,4,8,1,20,0,0,44,67,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,540,        if ((x == null) || (y == null)) {,0,0,0,3,7,0,0,0,0,10,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,541,            return !((x == null) ^ (y == null));,4,3,0,3,6,1,0,0,0,8,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,543,        if (x.length != y.length) {,8,1,0,1,3,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,544,            return false;,2,3,1,0,0,1,0,0,0,14,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,546,        for (int i = 0; i < x.length; ++i) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,547,"            if (!equals(x[i], y[i])) {",2,0,1,4,9,0,2,0,0,13,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,548,                return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,551,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,566,        if ((x == null) || (y == null)) {,18,7,0,3,7,1,0,0,0,26,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,567,            return !((x == null) ^ (y == null));,4,3,0,3,6,1,0,0,0,8,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,569,        if (x.length != y.length) {,8,1,0,1,3,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,570,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,572,        for (int i = 0; i < x.length; ++i) {,20,4,0,1,3,0,8,0,0,34,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,573,"            if (!equalsIncludingNaN(x[i], y[i])) {",0,0,1,4,9,0,2,0,0,11,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,574,                return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,577,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,589,"        return equals(x, y, 1);",0,0,0,1,2,1,6,0,0,6,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,602,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, 1);",0,0,0,4,8,1,0,0,0,13,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,617,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",10,2,0,2,4,1,0,0,0,13,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,632,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",6,3,0,3,6,1,10,0,0,19,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,655,        assert maxUlps > 0 && maxUlps < NAN_GAP;,6,3,0,0,0,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,657,        long xInt = Double.doubleToLongBits(x);,4,0,1,1,2,0,6,0,0,12,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,658,        long yInt = Double.doubleToLongBits(y);,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,661,        if (xInt < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,662,            xInt = SGN_MASK - xInt;,6,1,0,0,0,0,0,0,0,8,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,664,        if (yInt < 0) {,6,1,0,1,3,0,0,2,0,9,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,665,            yInt = SGN_MASK - yInt;,6,1,0,0,0,0,0,0,0,8,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,668,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,8,2,0,1,2,1,4,0,0,15,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,670,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,0,0,0,2,4,1,0,0,0,7,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,686,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, maxUlps);",0,2,0,4,8,1,20,0,0,22,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,700,        if ((x == null) || (y == null)) {,4,3,0,3,7,0,0,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,701,            return !((x == null) ^ (y == null));,4,3,0,3,6,1,0,0,0,8,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,703,        if (x.length != y.length) {,8,1,0,1,3,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,704,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,706,        for (int i = 0; i < x.length; ++i) {,6,1,0,1,3,0,0,0,0,8,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,707,"            if (!equals(x[i], y[i])) {",0,0,0,4,9,0,0,0,0,13,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,708,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,711,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,726,        if ((x == null) || (y == null)) {,4,3,0,3,7,0,0,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,727,            return !((x == null) ^ (y == null));,4,3,0,3,6,1,0,0,0,8,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,729,        if (x.length != y.length) {,10,1,1,1,3,0,0,0,0,14,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,730,            return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,732,        for (int i = 0; i < x.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,733,"            if (!equalsIncludingNaN(x[i], y[i])) {",4,2,1,4,9,1,8,0,0,24,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,734,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,737,        return true;,4,1,0,0,0,1,10,0,0,16,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,765,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,766,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",6,1,0,0,1,0,0,0,0,8,77,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,769,        if (n > 20) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,770,            throw new MathArithmeticException();,2,1,1,1,2,0,10,2,0,19,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,772,        return FACTORIALS[n];,0,0,1,1,2,1,0,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,789,        if (n < 0) {,6,2,0,1,3,0,6,0,0,15,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,790,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",4,0,0,0,1,0,0,2,0,6,77,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,793,        if (n < 21) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,794,            return factorial(n);,6,0,0,1,2,1,4,2,0,12,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,796,        return FastMath.floor(FastMath.exp(factorialLog(n)) + 0.5);,0,1,0,3,6,1,12,0,0,13,59,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,807,        if (n < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,808,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",4,0,0,0,1,0,0,2,0,6,77,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,811,        if (n < 21) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,812,            return FastMath.log(factorial(n));,0,0,0,2,4,1,8,0,0,8,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,814,        double logSum = 0;,2,0,0,0,0,0,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,815,        for (int i = 2; i <= n; i++) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,816,            logSum += FastMath.log(i);,4,0,0,1,2,0,6,0,0,13,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,818,        return logSum;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,851,        int u = p;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,852,        int v = q;,4,0,0,0,0,0,0,0,0,4,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,853,        if ((u == 0) || (v == 0)) {,4,3,0,3,7,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,854,            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {,12,3,0,3,7,0,0,0,0,15,59,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,855,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,",4,0,0,0,1,0,0,2,0,6,72,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,858,            return FastMath.abs(u) + FastMath.abs(v);,0,1,0,2,4,1,12,0,0,13,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,865,        if (u > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,866,            u = -u;,2,1,0,0,0,0,0,0,0,3,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,868,        if (v > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,869,            v = -v;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,872,        int k = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,873,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,8,7,0,3,7,0,0,0,0,15,69,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,875,            u /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,876,            v /= 2;,4,0,0,0,0,0,0,0,0,6,7,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,877,            k++; // cast out twos.,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,879,        if (k == 31) {,4,0,1,1,3,0,0,0,0,7,14,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,880,"            throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,",4,0,0,0,1,0,0,2,0,6,72,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,885,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,0,0,0,3,6,0,0,0,0,9,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,891,            while ((t & 1) == 0) { // while t is even..,0,0,0,2,5,0,0,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,892,                t /= 2; // cast out twos,6,1,0,0,0,0,6,0,0,14,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,895,            if (t > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,896,                u = -t;,7,1,0,0,0,0,0,0,0,10,7,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,898,                v = t;,4,0,0,0,0,0,4,0,0,9,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,901,            t = (v - u) / 2;,8,3,0,1,2,0,0,0,0,12,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,904,        } while (t != 0);,4,2,0,1,3,0,8,0,0,14,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,905,        return -u * (1 << k); // gcd is u*2^k,4,2,0,1,2,1,0,0,0,7,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,938,        long u = p;,6,0,0,0,0,3,0,0,0,9,11,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,939,        long v = q;,4,0,0,0,0,0,0,0,0,4,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,940,        if ((u == 0) || (v == 0)) {,6,3,0,3,7,0,0,0,0,10,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,941,            if ((u == Long.MIN_VALUE) || (v == Long.MIN_VALUE)){,0,0,0,3,7,0,0,0,0,10,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,942,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,",4,0,0,0,1,0,8,2,0,14,72,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,945,            return FastMath.abs(u) + FastMath.abs(v);,4,1,0,2,4,1,0,0,0,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,952,        if (u > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,953,            u = -u;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,955,        if (v > 0) {,4,0,0,1,3,0,0,2,0,6,12,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,956,            v = -v;,6,1,0,0,0,0,0,0,0,9,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,959,        int k = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,960,        while ((u & 1) == 0 && (v & 1) == 0 && k < 63) { // while u and v are,6,7,0,3,7,0,0,0,0,13,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,962,            u /= 2;,2,0,0,0,0,0,0,0,0,2,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,963,            v /= 2;,8,1,0,0,0,0,0,0,0,11,7,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,964,            k++; // cast out twos.,0,0,0,0,0,0,6,0,0,6,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,966,        if (k == 63) {,4,2,1,1,3,0,0,0,0,11,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,967,"            throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,",4,0,0,0,1,0,0,2,0,6,72,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,972,        long t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,8,2,0,3,6,1,0,0,0,11,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,978,            while ((t & 1) == 0) { // while t is even..,2,2,0,2,5,0,0,0,0,4,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,979,                t /= 2; // cast out twos,2,0,0,0,0,0,0,0,0,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,982,            if (t > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,983,                u = -t;,10,2,0,0,0,0,0,0,0,15,7,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,985,                v = t;,4,0,0,0,0,0,0,0,0,5,6,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,988,            t = (v - u) / 2;,0,0,0,1,2,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,991,        } while (t != 0);,2,1,0,1,3,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,992,        return -u * (1L << k); // gcd is u*2^k,6,2,1,1,2,2,0,0,0,14,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1002,        return new Double(value).hashCode();,0,0,0,2,4,1,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1013,        return Arrays.hashCode(value);,0,0,0,1,2,1,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1024,        return (x >= ZB) ? PB : NB;,0,0,0,1,2,1,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1036,        if (Double.isNaN(x)) {,8,1,0,2,5,0,4,0,0,14,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1037,            return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1039,        return (x >= 0.0) ? 1.0 : -1.0;,2,1,0,1,2,1,0,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1050,        if (Float.isNaN(x)) {,0,0,0,2,5,0,6,0,0,6,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1051,            return Float.NaN;,0,0,0,0,0,1,0,0,0,1,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1053,        return (x >= 0.0F) ? 1.0F : -1.0F;,6,1,0,1,2,1,0,0,0,9,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1063,        return (x >= 0) ? 1 : -1;,10,2,1,1,2,2,0,0,0,19,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1073,        return (x >= 0L) ? 1L : -1L;,2,1,0,1,2,1,0,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1084,        return (x >= ZS) ? PS : NS;,8,1,0,1,2,1,0,0,0,9,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1110,        if (a == 0 || b == 0){,8,3,0,1,3,0,0,0,0,13,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1111,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1113,"        int lcm = FastMath.abs(mulAndCheck(a / gcd(a, b), b));",4,1,0,3,6,0,14,0,0,19,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1114,        if (lcm == Integer.MIN_VALUE) {,0,0,0,1,3,0,0,0,0,4,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1115,"            throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_32_BITS,",10,1,1,0,1,0,0,4,0,20,72,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1118,        return lcm;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1144,        if (a == 0 || b == 0){,4,3,0,1,3,0,0,0,0,7,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1145,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1147,"        long lcm = FastMath.abs(mulAndCheck(a / gcd(a, b), b));",4,1,0,3,6,0,14,2,0,21,55,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1148,        if (lcm == Long.MIN_VALUE){,6,1,0,1,3,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1149,"            throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_64_BITS,",0,0,0,0,1,0,0,0,0,1,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1152,        return lcm;,4,0,0,0,0,1,0,2,0,6,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1172,        return FastMath.log(x)/FastMath.log(base);,8,3,0,2,4,1,12,0,0,24,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1186,        long m = ((long)x) * ((long)y);,6,1,0,4,8,0,0,0,0,7,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1187,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1188,            throw new MathArithmeticException();,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1190,        return (int)m;,2,0,0,1,2,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1205,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1207,"            ret = mulAndCheck(b, a);",2,0,0,1,2,0,6,0,0,9,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1209,            if (a < 0) {,2,1,0,1,3,0,4,0,0,7,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1210,                if (b < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1212,                    if (a >= Long.MAX_VALUE / b) {,1,0,0,1,3,0,0,0,0,1,30,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1213,                        ret = a * b;,2,0,0,0,0,0,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1215,                        throw new MathArithmeticException();,10,1,0,1,2,0,0,2,0,16,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1217,                } else if (b > 0) {,4,1,0,1,4,0,0,0,0,5,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1219,                    if (Long.MIN_VALUE / b <= a) {,6,1,0,1,3,0,0,0,0,8,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1220,                        ret = a * b;,8,1,0,0,0,0,0,0,0,10,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1222,                        throw new MathArithmeticException();,0,0,0,1,2,0,0,2,0,2,36,15,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1227,                    ret = 0;,2,0,0,0,0,0,0,0,0,3,8,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1229,            } else if (a > 0) {,0,0,0,1,4,0,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1234,                if (a <= Long.MAX_VALUE / b) {,8,2,0,1,3,0,0,0,0,10,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1235,                    ret = a * b;,14,2,0,0,0,0,0,0,0,19,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1237,                    throw new MathArithmeticException();,4,0,0,1,2,0,0,2,0,7,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1241,                ret = 0;,2,0,0,0,0,0,0,0,0,3,8,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1244,        return ret;,4,0,1,0,0,1,0,0,0,7,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1259,"        return FastMath.scalb(d, scaleFactor);",0,0,0,1,2,1,12,0,0,12,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1282,         return a - TWO_PI * FastMath.floor((a + FastMath.PI - center) / TWO_PI);,14,5,0,2,4,1,4,0,0,23,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1307,         if (Double.isInfinite(normalizedSum)) {,0,0,0,2,5,0,6,0,0,6,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1308,             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);,8,1,0,1,2,0,0,2,0,11,76,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1310,         if (Double.isNaN(normalizedSum)) {,0,0,0,2,5,0,0,0,0,7,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1311,             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);,0,0,0,1,2,0,0,0,0,3,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1313,         double sum = 0d;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1314,         final int len = values.length;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1315,         double[] out = new double[len];,0,0,0,2,4,0,0,0,0,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1316,         for (int i = 0; i < len; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1317,             if (Double.isInfinite(values[i])) {,0,0,1,3,7,0,4,0,0,8,35,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1318,"                 throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);",0,0,0,2,4,0,0,0,0,6,94,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1320,             if (!Double.isNaN(values[i])) {,0,0,1,3,7,0,4,0,0,9,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1321,                 sum += values[i];,4,0,0,1,2,0,0,2,0,6,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1324,         if (sum == 0) {,6,1,0,1,3,0,0,0,0,9,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1325,             throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);,0,0,0,1,2,0,0,0,0,3,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1327,         for (int i = 0; i < len; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1328,             if (Double.isNaN(values[i])) {,0,0,1,3,7,0,4,0,0,8,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1329,                 out[i] = Double.NaN;,4,0,1,1,2,0,0,0,0,9,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1331,                 out[i] = values[i] * normalizedSum / sum;,4,2,1,2,4,0,0,0,0,15,41,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1334,         return out;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1347,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",4,0,0,1,2,1,6,0,0,10,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1364,            return (new BigDecimal,0,0,0,0,1,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1368,        } catch (NumberFormatException ex) {,2,0,0,1,4,0,0,2,0,4,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1369,            if (Double.isInfinite(x)) {,2,0,1,2,5,0,6,0,0,11,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1370,                return x;,2,0,0,0,0,1,0,0,0,2,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1372,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1374,        } catch (RuntimeException ex) {,0,0,0,1,4,0,0,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1375,            throw new MathRuntimeException(ex);,2,0,0,1,2,0,0,2,0,4,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1389,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",4,0,0,1,2,1,6,0,0,10,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1405,        float sign = indicator(x);,2,0,0,1,2,0,4,0,0,6,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1406,"        float factor = (float)FastMath.pow(10.0f, scale) * sign;",4,0,0,2,4,0,0,0,0,5,56,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1407,"        return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor;",6,2,0,2,4,1,6,0,0,14,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1424,        switch (roundingMethod) {,0,0,0,1,3,0,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1426,            if (sign == -1) {,2,0,0,1,3,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1427,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",0,0,0,2,4,0,0,0,0,6,82,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1429,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",6,0,0,2,4,0,10,0,0,17,81,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1431,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1433,"            unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",6,0,0,2,4,0,10,0,0,17,82,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1434,            break;,2,0,0,0,0,0,0,0,0,3,6,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1436,            if (sign == -1) {,8,2,0,1,3,0,0,0,0,11,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1437,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",0,0,0,2,4,0,0,0,0,6,81,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1439,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",0,0,0,2,4,0,0,0,0,6,82,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1441,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1443,"            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);",8,0,0,1,2,0,22,4,0,36,66,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1444,            double fraction = unscaled - FastMath.floor(unscaled);,4,1,0,1,2,0,6,0,0,11,54,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1445,            if (fraction > 0.5) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1446,                unscaled = FastMath.ceil(unscaled);,2,0,0,1,2,0,6,0,0,9,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1448,                unscaled = FastMath.floor(unscaled);,2,0,0,1,2,0,6,0,0,9,36,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1450,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1453,            double fraction = unscaled - FastMath.floor(unscaled);,10,2,0,1,2,0,6,0,0,18,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1454,            if (fraction > 0.5) {,2,1,0,1,3,0,0,0,0,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1455,                unscaled = FastMath.ceil(unscaled);,2,0,0,1,2,0,6,0,0,9,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1456,            } else if (fraction < 0.5) {,2,1,0,1,4,0,0,0,0,3,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1457,                unscaled = FastMath.floor(unscaled);,4,1,0,1,2,0,6,0,0,12,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1460,                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math,0,0,0,1,4,0,0,0,0,5,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1462,                    unscaled = FastMath.floor(unscaled);,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1464,                    unscaled = FastMath.ceil(unscaled);,2,0,0,1,2,0,6,0,0,9,35,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1467,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1470,"            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);",0,0,0,1,2,0,0,0,0,3,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1471,            double fraction = unscaled - FastMath.floor(unscaled);,8,1,0,1,2,0,6,0,0,15,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1472,            if (fraction >= 0.5) {,6,1,0,1,3,0,0,0,0,8,22,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1473,                unscaled = FastMath.ceil(unscaled);,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1475,                unscaled = FastMath.floor(unscaled);,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1477,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1480,            if (unscaled != FastMath.floor(unscaled)) {,0,0,0,2,5,0,0,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1481,                throw new MathArithmeticException();,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1485,"            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));",8,1,1,2,4,0,10,0,0,25,82,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1486,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1488,"            throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,",6,0,0,0,1,0,0,2,0,8,80,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1499,        return unscaled;,4,1,0,0,0,1,0,0,0,5,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1513,        return (x == ZB) ? ZB : (x > ZB) ? PB : NB;,0,0,0,2,4,1,0,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1529,        if (Double.isNaN(x)) {,0,0,0,2,5,0,6,0,0,6,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1530,            return Double.NaN;,4,0,0,0,0,1,4,0,0,8,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1532,        return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;,10,6,1,2,4,1,0,0,0,22,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1547,        if (Float.isNaN(x)) {,0,0,0,2,5,0,6,0,0,6,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1548,            return Float.NaN;,4,0,0,0,0,1,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1550,        return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;,6,2,0,2,4,4,0,0,0,12,54,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1564,        return (x == 0) ? 0 : (x > 0) ? 1 : -1;,4,2,0,2,4,1,0,0,0,7,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1578,        return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;,18,4,0,2,4,1,0,2,0,25,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1589,        return (x == ZS) ? ZS : (x > ZS) ? PS : NS;,0,0,0,2,4,1,0,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1600,        return (FastMath.exp(x) - FastMath.exp(-x)) / 2.0;,2,2,0,3,6,1,10,0,0,15,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1614,        long s = (long)x - (long)y;,6,1,0,2,4,0,0,0,0,7,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1615,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,16,5,1,1,3,0,0,0,0,28,53,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1616,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y);",8,0,0,1,2,0,0,2,0,10,82,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1618,        return (int)s;,0,0,0,1,2,1,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1633,        if (b == Long.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1634,            if (a < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1635,                ret = a - b;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1637,"                throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, a, -b);",10,1,0,1,2,0,4,2,0,18,80,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1641,"            ret = addAndCheck(a, -b, LocalizedFormats.OVERFLOW_IN_ADDITION);",8,0,0,1,2,0,4,0,0,14,64,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1643,        return ret;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1655,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1656,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",12,1,0,1,2,0,0,2,0,17,61,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1659,        int result = 1;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1660,        int k2p    = k;,4,0,0,0,0,0,0,0,0,4,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1661,        while (e != 0) {,16,6,0,1,3,0,0,0,0,23,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1662,            if ((e & 0x1) != 0) {,2,2,0,2,5,0,0,0,0,4,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1663,                result *= k2p;,4,0,0,0,0,0,0,0,0,5,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1665,            k2p *= k2p;,12,2,0,0,0,0,0,0,0,16,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1666,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1669,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1681,        if (e < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1682,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0,0,0,1,2,0,0,0,0,3,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1685,        int result = 1;,6,1,1,0,0,0,0,0,0,10,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1686,        int k2p    = k;,8,1,1,0,0,0,0,0,0,12,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1687,        while (e != 0) {,4,1,0,1,3,0,0,0,0,6,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1688,            if ((e & 0x1) != 0) {,2,2,0,2,5,0,0,0,0,4,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1689,                result *= k2p;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1691,            k2p *= k2p;,4,0,0,0,0,0,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1692,            e = e >> 1;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1695,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1707,        if (e < 0) {,6,1,0,1,3,0,0,0,0,8,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1708,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0,0,0,1,2,0,0,0,0,3,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1711,        long result = 1l;,14,4,0,0,0,0,6,0,0,25,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1712,        long k2p    = k;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1713,        while (e != 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1714,            if ((e & 0x1) != 0) {,6,2,1,2,5,1,0,0,0,16,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1715,                result *= k2p;,4,0,0,0,0,0,0,0,0,5,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1717,            k2p *= k2p;,4,0,0,0,0,0,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1718,            e = e >> 1;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1721,        return result;,10,1,0,0,0,1,0,0,0,12,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1733,        if (e < 0) {,4,2,1,1,3,0,0,0,0,10,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1734,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1737,        long result = 1l;,4,0,1,0,0,0,0,0,0,9,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1738,        long k2p    = k;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1739,        while (e != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1740,            if ((e & 0x1) != 0) {,2,2,0,2,5,0,0,0,0,4,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1741,                result *= k2p;,4,0,0,0,0,0,0,0,0,5,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1743,            k2p *= k2p;,4,0,0,0,0,0,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1744,            e = e >> 1;,4,1,0,0,0,0,4,0,0,11,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1747,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1759,        if (e < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1760,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1763,        return k.pow(e);,4,1,0,1,2,1,6,0,0,12,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1775,        if (e < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1776,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1779,        BigInteger result = BigInteger.ONE;,6,0,0,0,0,0,0,2,0,8,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1780,        BigInteger k2p    = k;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1781,        while (e != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1782,            if ((e & 0x1) != 0) {,4,3,1,2,5,1,0,0,0,11,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1783,                result = result.multiply(k2p);,2,0,0,1,2,0,6,0,0,9,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1785,            k2p = k2p.multiply(k2p);,2,0,0,1,2,0,6,0,0,9,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1786,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1789,        return result;,12,1,0,0,0,1,0,0,0,14,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1802,        if (e.compareTo(BigInteger.ZERO) < 0) {,0,0,0,2,5,0,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1803,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1806,        BigInteger result = BigInteger.ONE;,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1807,        BigInteger k2p    = k;,4,0,0,0,0,0,0,2,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1808,        while (!BigInteger.ZERO.equals(e)) {,4,0,0,2,5,0,4,0,0,9,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1809,            if (e.testBit(0)) {,0,0,0,2,5,0,0,0,0,7,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1810,                result = result.multiply(k2p);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1812,            k2p = k2p.multiply(k2p);,2,0,0,1,2,0,6,0,0,9,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1813,            e = e.shiftRight(1);,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1816,        return result;,10,2,0,0,0,1,0,0,0,12,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1827,        double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1828,        for (int i = 0; i < p1.length; i++) {,10,1,0,1,3,0,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1829,            sum += FastMath.abs(p1[i] - p2[i]);,2,1,1,3,6,0,4,0,0,16,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1831,        return sum;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1842,      int sum = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1843,      for (int i = 0; i < p1.length; i++) {,10,1,0,1,3,0,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1844,          sum += FastMath.abs(p1[i] - p2[i]);,20,7,1,3,6,1,10,0,0,50,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1846,      return sum;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1857,        double sum = 0;,4,0,0,0,0,0,0,0,0,4,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1858,        for (int i = 0; i < p1.length; i++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1859,            final double dp = p1[i] - p2[i];,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1860,            sum += dp * dp;,14,7,0,0,0,0,0,0,0,22,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1862,        return FastMath.sqrt(sum);,0,0,0,1,2,1,6,0,0,6,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1889,        double max = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1890,        for (int i = 0; i < p1.length; i++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1891,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",2,1,1,4,8,0,10,0,0,22,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1893,        return max;,8,2,1,0,0,2,0,0,0,13,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1904,        int max = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1905,        for (int i = 0; i < p1.length; i++) {,14,4,0,1,3,0,0,0,0,20,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1906,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",2,1,1,4,8,0,10,0,0,22,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1908,        return max;,2,0,0,0,0,1,4,0,0,6,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1934,        double previous = val[0];,2,0,1,1,2,0,0,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1935,        boolean ok = true;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1937,        int max = val.length;,6,0,0,0,0,0,0,0,0,6,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1938,        for (int i = 1; i < max; i++) {,36,9,0,1,3,0,0,0,0,49,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1939,            switch (dir) {,2,0,0,1,3,0,0,0,0,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1941,                if (strict) {,8,3,0,1,3,0,0,0,0,12,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1942,                    if (val[i] <= previous) {,2,1,1,2,5,0,0,0,0,7,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1943,                        ok = false;,2,0,0,0,0,0,0,0,0,4,11,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1946,                    if (val[i] < previous) {,0,0,0,2,5,0,0,0,0,7,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1947,                        ok = false;,12,4,0,0,0,0,0,0,0,18,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1952,                if (strict) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1953,                    if (val[i] >= previous) {,8,2,1,2,5,0,0,0,0,14,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1954,                        ok = false;,2,0,0,0,0,0,0,0,0,4,11,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1957,                    if (val[i] > previous) {,0,0,0,2,5,0,0,0,0,7,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1958,                        ok = false;,2,0,0,0,0,0,4,0,0,7,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1964,                throw new IllegalArgumentException();,0,0,0,1,2,0,0,2,0,2,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1967,            if (!ok &&,2,1,0,0,1,0,0,0,0,4,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1969,"                throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);",8,0,1,2,4,0,0,2,0,14,75,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1971,            previous = val[i];,8,4,1,1,2,0,0,0,0,17,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1974,        return ok;,2,0,0,0,0,1,0,0,0,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1988,"        checkOrder(val, dir, strict, true);",6,0,0,1,2,0,8,0,0,16,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1989,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1999,"        checkOrder(val, OrderDirection.INCREASING, true);",4,0,0,1,2,0,4,0,0,9,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2000,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2010,        if (Double.isInfinite(x) || Double.isNaN(x)) {,0,0,0,3,7,0,0,0,0,10,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2011,            throw new NotFiniteNumberException(x);,2,0,0,1,2,0,0,2,0,5,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2013,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2023,        for (int i = 0; i < val.length; i++) {,0,0,0,1,3,0,0,0,0,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2024,            final double x = val[i];,8,0,0,1,2,1,0,0,0,9,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2025,            if (Double.isInfinite(x) || Double.isNaN(x)) {,0,1,0,3,7,0,12,0,0,13,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2026,"                throw new NotFiniteNumberException(LocalizedFormats.ARRAY_ELEMENT, x, i);",8,0,0,1,2,0,0,2,0,10,73,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2029,    },6,2,0,0,1,0,0,0,0,9,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2092,        double rdwarf = 3.834e-20;,2,0,0,0,0,0,6,0,0,8,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2093,        double rgiant = 1.304e+19;,2,0,0,0,0,0,0,0,0,2,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2094,        double s1 = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2095,        double s2 = 0;,10,1,0,0,0,0,0,0,0,13,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2096,        double s3 = 0;,8,2,0,0,0,1,0,0,0,11,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2097,        double x1max = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2098,        double x3max = 0;,4,0,0,0,0,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2099,        double floatn = (double) v.length;,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2100,        double agiant = rgiant / floatn;,16,2,0,0,0,0,0,0,0,19,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2101,        for (int i = 0; i < v.length; i++) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2102,            double xabs = Math.abs(v[i]);,2,0,1,2,4,0,4,0,0,10,29,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2103,            if (xabs < rdwarf || xabs > agiant) {,8,3,0,1,3,0,0,0,0,11,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2104,                if (xabs > rdwarf) {,4,1,0,1,3,0,0,0,0,5,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2105,                    if (xabs > x1max) {,4,1,0,1,3,0,0,0,0,5,19,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2106,                        double r = x1max / xabs;,6,1,0,0,0,0,0,0,0,7,24,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2107,                        s1= 1 + s1 * r * r;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2108,                        x1max = xabs;,4,0,0,0,0,0,0,0,0,5,13,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2109,                    } else {,8,1,0,0,2,0,4,2,0,16,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2110,                        double r = xabs / x1max;,6,1,0,0,0,0,0,0,0,7,24,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2111,                        s1 += r * r;,4,0,1,0,0,0,0,0,0,9,12,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2112,                    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2114,                    if (xabs > x3max) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2115,                        double r = x3max / xabs;,6,1,0,0,0,0,0,0,0,7,24,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2116,                        s3= 1 + s3 * r * r;,8,2,0,0,0,0,0,0,0,11,19,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2117,                        x3max = xabs;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2118,                    } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2119,                        if (xabs != 0) {,2,1,0,1,3,0,0,0,0,3,16,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2120,                            double r = xabs / x3max;,6,1,0,0,0,0,0,0,0,7,24,15,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2121,                            s3 += r * r;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2122,                        },2,1,1,0,1,0,0,0,0,14,1,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2126,                s2 += xabs * xabs;,6,1,0,0,0,0,0,0,0,8,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2130,        if (s1 != 0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2131,            norm = x1max * Math.sqrt(s1 + (s2 / x1max) / x1max);,0,0,0,2,4,0,0,0,0,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2133,            if (s2 == 0) {,8,1,0,1,3,0,0,0,0,10,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2134,                norm = x3max * Math.sqrt(s3);,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2136,                if (s2 >= x3max) {,4,1,0,1,3,0,0,0,0,5,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2137,                    norm = Math.sqrt(s2 * (1 + (x3max / s2) * (x3max * s3)));,12,5,0,4,8,0,4,0,0,22,57,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2139,                    norm = Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));,12,4,0,4,8,0,4,0,0,21,56,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2143,        return norm;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2158,"        sortInPlace(x, OrderDirection.INCREASING, yList);",0,0,0,1,2,0,0,0,0,3,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2159,    },2,0,0,0,1,1,6,0,0,10,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2174,        if (x == null ||,0,0,0,0,1,0,0,0,0,1,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2176,            throw new NullArgumentException();,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2179,        final int len = x.length;,8,0,0,0,0,1,6,0,0,15,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2180,"        final List<Pair<Double, double[]>> list",2,0,0,1,2,1,0,6,0,9,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2183,        final int yListLen = yList.length;,8,0,0,0,0,1,0,0,0,10,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2184,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2185,            final double[] yValues = new double[yListLen];,8,0,1,2,4,1,0,0,0,12,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2186,            for (int j = 0; j < yListLen; j++) {,16,2,0,1,3,0,0,0,0,21,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2187,                double[] y = yList[j];,2,0,1,2,4,0,0,0,0,6,22,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2188,                if (y.length != len) {,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2189,"                    throw new DimensionMismatchException(y.length, len);",0,0,0,1,2,0,0,0,0,3,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2191,                yValues[j] = y[i];,2,1,1,2,4,0,0,0,0,12,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2193,"            list.add(new Pair<Double, double[]>(x[i], yValues));",2,0,1,4,8,0,4,4,0,14,52,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2196,"        final Comparator<Pair<Double, double[]>> comp",4,0,0,1,2,2,2,6,0,14,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2216,"        Collections.sort(list, comp);",0,0,0,1,2,0,8,0,0,8,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2218,        for (int i = 0; i < len; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2219,"            final Pair<Double, double[]> e = list.get(i);",2,0,0,2,4,1,6,4,0,13,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2220,            x[i] = e.getKey();,8,6,0,2,4,0,0,0,0,15,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2221,            final double[] yValues = e.getValue();,0,0,0,2,4,0,0,0,0,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2222,            for (int j = 0; j < yListLen; j++) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2223,                yList[j][i] = yValues[j];,6,4,1,3,6,0,4,0,0,26,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2226,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2235,"         return copyOf(source, source.length);",18,3,0,1,2,2,4,2,0,30,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2245,"         return copyOf(source, source.length);",4,0,0,1,2,1,4,0,0,8,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2258,         final int[] output = new int[len];,4,0,1,2,4,1,0,0,0,7,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2259,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",8,1,0,2,4,0,14,0,0,23,73,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2260,         return output;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2273,         final double[] output = new double[len];,0,0,0,2,4,0,0,0,0,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2274,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",4,0,0,2,4,0,14,0,0,18,73,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2275,         return output;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2289,        if (o == null) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2290,"            throw new NullArgumentException(pattern, args);",4,0,0,1,2,0,0,2,0,6,47,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2292,    },2,0,1,0,1,0,4,0,0,10,1,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2301,        if (o == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2302,            throw new NullArgumentException();,0,0,0,1,2,0,0,2,0,2,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2304,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1939,            switch (dir) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,58,    public MathRuntimeException() {},0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,48,"    private List<SerializablePair<Localizable, Object[]>> messages",12,2,0,1,2,1,4,8,0,28,62,1,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,53,"    private Map<String, Object> context = new HashMap<String, Object>();",2,0,0,1,2,1,0,12,0,15,68,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,66,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,67,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,71,"        messages.add(new SerializablePair<Localizable, Object[]>(pattern, (Object[]) null));",2,0,0,5,10,0,4,8,0,15,84,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,72,    },8,1,0,0,1,0,0,0,0,10,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,77,"        messages.add(new SerializablePair<Localizable, Object[]>(pattern,",2,0,0,1,4,0,4,6,0,12,65,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,79,    },2,0,0,0,1,0,0,0,0,2,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,83,"        context.put(key, value);",6,0,0,1,2,0,8,0,0,15,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,84,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,88,        return context.get(key);,0,0,0,1,2,1,10,0,0,10,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,93,        return context.keySet();,0,0,0,1,2,1,4,0,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,103,"        return buildMessage(locale, "": "");",4,2,1,1,2,1,4,0,0,13,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,115,"        return buildMessage(locale, separator);",0,0,0,1,2,1,6,0,0,6,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,121,        return getMessage(Locale.US);,4,0,0,1,2,1,2,0,0,6,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,127,        return getMessage(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,139,        final StringBuilder sb = new StringBuilder();,2,0,1,1,2,1,0,4,0,14,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,140,        int count = 0;,4,1,1,0,0,0,0,0,0,8,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,141,        final int len = messages.size();,2,0,0,1,2,1,4,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,142,"        for (SerializablePair<Localizable, Object[]> pair : messages) {",0,0,0,2,5,0,0,0,0,7,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,143,"            final MessageFormat fmt = new MessageFormat(pair.getKey().getLocalizedString(locale),",2,0,1,2,5,1,0,0,0,7,85,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,145,            sb.append(fmt.format(pair.getValue()));,0,0,0,3,6,0,0,0,0,9,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,146,            if (++count < len) {,4,1,0,1,3,0,0,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,148,                sb.append(separator);,30,3,0,1,2,0,6,2,0,48,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,150,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,152,        return sb.toString();,2,0,0,1,2,2,4,0,0,7,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,163,        serializeMessages(out);,0,0,0,1,2,0,4,0,0,4,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,164,        serializeContext(out);,0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,165,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,176,        deSerializeMessages(in);,0,0,0,1,2,0,4,0,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,177,        deSerializeContext(in);,6,1,0,1,2,1,10,0,0,18,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,178,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,189,        final int len = messages.size();,2,0,0,1,2,1,4,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,190,        out.writeInt(len);,18,5,0,1,2,0,0,0,0,24,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,192,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,193,"            SerializablePair<Localizable, Object[]> pair = messages.get(i);",0,0,0,2,4,0,0,0,0,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,195,            out.writeObject(pair.getKey());,0,0,0,2,4,0,8,0,0,8,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,196,            final Object[] args = pair.getValue();,2,0,0,2,4,1,4,2,0,9,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,197,            final int aLen = args.length;,12,1,0,0,0,1,0,0,0,14,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,199,            out.writeInt(aLen);,0,0,0,1,2,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,200,            for (int j = 0; j < aLen; j++) {,0,0,0,1,3,0,0,0,0,4,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,201,                if (args[j] instanceof Serializable) {,0,0,1,2,5,0,0,2,0,6,38,9,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,203,                    out.writeObject(args[j]);,0,0,0,2,4,0,0,0,0,6,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,206,                    out.writeObject(nonSerializableReplacement(args[j]));,0,0,1,3,6,0,6,0,0,10,53,11,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,210,    },0,1,1,0,1,0,0,0,0,10,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,223,        final int len = in.readInt();,2,0,0,1,2,1,4,0,0,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,224,"        messages = new ArrayList<SerializablePair<Localizable, Object[]>>(len);",0,0,0,2,4,0,0,0,0,6,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,226,        for (int i = 0; i < len; i++) {,12,3,1,1,3,0,0,0,0,27,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,228,            final Localizable key = (Localizable) in.readObject();,14,4,1,2,4,1,4,4,0,38,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,230,            final int aLen = in.readInt();,2,0,0,1,2,1,4,0,0,7,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,231,            final Object[] args = new Object[aLen];,2,0,1,2,4,1,0,4,0,9,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,232,            for (int j = 0; j < aLen; j++) {,0,0,0,1,3,0,0,0,0,4,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,234,                args[j] = in.readObject();,0,0,1,2,4,0,4,0,0,9,26,8,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,236,"            messages.add(new SerializablePair<Localizable, Object[]>(key, args));",4,0,0,3,6,0,4,6,0,14,69,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,238,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,249,        final int len = context.keySet().size();,2,0,0,2,4,1,6,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,250,        out.writeInt(len);,0,0,0,1,2,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,251,        for (String key : context.keySet()) {,4,0,1,2,5,1,4,6,0,17,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,253,            out.writeObject(key);,0,0,0,1,2,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,254,            final Object value = context.get(key);,2,0,0,1,2,1,6,2,0,11,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,255,            if (value instanceof Serializable) {,2,0,0,1,3,0,0,2,0,4,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,257,                out.writeObject(value);,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,260,                out.writeObject(nonSerializableReplacement(value));,0,0,0,2,4,0,0,0,0,6,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,262,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,263,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,276,        final int len = in.readInt();,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,277,"        context = new HashMap<String, Object>();",2,0,0,1,2,0,0,6,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,278,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,280,            final String key = (String) in.readObject();,2,0,0,2,4,1,4,4,0,11,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,282,            final Object value = in.readObject();,2,0,0,1,2,1,4,2,0,9,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,283,"            context.put(key, value);",0,0,0,1,2,0,8,0,0,8,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,285,    },6,0,0,0,1,0,0,0,0,6,1,8,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,295,"        return ""[Object could not be serialized: "" + obj.getClass().getName() + ""]"";",0,0,0,3,6,1,0,0,0,10,76,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotPositiveException,57,37,"        super(value, 0, true);",0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotPositiveException,57,38,    },8,2,0,0,1,0,0,0,0,10,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotPositiveException,57,47,"        super(specific, value, 0, true);",4,0,0,1,2,1,0,0,0,5,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotPositiveException,57,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,57,50,        this(boundIsAllowed ?,2,0,0,0,1,0,0,0,0,2,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,57,54,    },2,0,0,0,1,0,0,0,0,2,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,57,68,"        super(specific, wrong, min);",0,0,0,1,2,0,4,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,57,70,        this.min = min;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,57,71,        this.boundIsAllowed = boundIsAllowed;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,57,72,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,57,78,        return boundIsAllowed;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,57,85,        return min;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,57,46,"        super(pattern, wrong, arguments);",6,0,0,1,2,0,6,0,0,12,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,57,47,        argument = wrong;,6,1,1,0,0,0,6,0,0,15,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,57,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,57,54,        return argument;,8,1,0,0,0,1,0,0,0,10,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,57,40,                                        Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,57,41,"        addMessage(pattern, args);",0,0,0,1,2,0,6,0,0,6,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,57,42,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,57,41,"        this(LocalizedFormats.NULL_NOT_ALLOWED, null);",12,2,0,1,2,0,0,0,0,15,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,57,42,    },2,0,0,0,1,1,2,0,0,5,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,57,50,"        super(pattern, arguments);",0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,57,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,57,44,"        super(specific, wrong, expected);",0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,57,45,        dimension = expected;,4,0,0,0,0,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,57,46,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,57,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);",8,0,0,1,2,0,0,0,0,8,67,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,57,57,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,57,63,        return dimension;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotFiniteNumberException,57,40,"        this(LocalizedFormats.NOT_FINITE_NUMBER, wrong, args);",12,1,1,1,2,0,2,0,0,28,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotFiniteNumberException,57,41,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotFiniteNumberException,57,53,"        super(specific, wrong, args);",6,0,0,1,2,0,0,0,0,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotFiniteNumberException,57,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,61,"        this(wrong, previous, index, MathUtils.OrderDirection.INCREASING, true);",0,0,0,1,2,0,0,0,0,3,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,62,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,80,        super(direction == MathUtils.OrderDirection.INCREASING ?,0,0,0,0,1,0,0,0,0,1,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,89,        this.direction = direction;,4,0,0,0,0,0,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,90,        this.strict = strict;,4,0,0,0,0,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,91,        this.index = index;,6,0,1,0,0,1,0,0,0,12,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,92,        this.previous = previous;,10,1,1,0,0,1,0,0,0,18,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,93,    },8,2,0,0,1,0,0,0,0,10,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,99,        return direction;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,105,        return strict;,12,3,0,0,0,1,0,0,0,15,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,113,        return index;,2,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,119,        return previous;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,57,38,    public MathArithmeticException() {,6,0,0,1,3,1,12,0,0,19,34,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,57,39,        addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,4,0,0,1,2,0,2,0,0,6,50,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,57,40,    },2,1,0,0,1,0,0,0,0,3,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,57,50,                                   Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,57,51,"        addMessage(pattern, args);",0,0,0,1,2,0,6,0,0,6,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,57,52,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,57,50,        this(boundIsAllowed ?,0,0,0,0,1,0,0,0,0,1,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,57,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,57,67,"        super(specific, wrong, max);",8,0,1,1,2,1,0,0,0,11,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,57,69,        this.max = max;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,57,70,        this.boundIsAllowed = boundIsAllowed;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,57,71,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,57,77,        return boundIsAllowed;,12,1,0,0,0,1,0,0,0,14,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,57,84,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,250,    private FastMath() {,2,0,0,1,3,1,0,0,0,3,20,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,251,    },2,1,0,0,1,0,0,0,0,4,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,263,        if (d > -MathUtils.SAFE_MIN && d < MathUtils.SAFE_MIN){,0,0,0,1,3,0,0,0,0,4,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,264,            return d; // These are un-normalised - don't try to convert,8,1,0,0,0,1,0,0,0,10,59,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,266,        long xl = Double.doubleToLongBits(d);,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,267,        xl = xl & MASK_30BITS; // Drop low order bits,12,1,0,0,0,0,0,0,0,15,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,268,        return Double.longBitsToDouble(xl);,0,0,0,1,2,1,6,0,0,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,285,      if (x != x) {,10,2,0,1,3,0,0,0,0,12,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,286,          return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,289,      if (x > 20.0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,290,          return exp(x)/2.0;,6,1,0,1,2,2,0,0,0,8,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,293,      if (x < -20) {,2,1,0,1,3,0,0,0,0,3,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,294,          return exp(-x)/2.0;,10,2,0,1,2,1,0,0,0,13,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,297,      double hiPrec[] = new double[2];,2,0,0,2,4,0,0,0,0,2,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,298,      if (x < 0.0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,299,          x = -x;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,301,"      exp(x, 0.0, hiPrec);",4,1,0,1,2,0,0,0,0,5,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,303,      double ya = hiPrec[0] + hiPrec[1];,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,304,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,0,0,0,3,6,0,0,0,0,9,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,306,      double temp = ya * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,307,      double yaa = ya + temp - temp;,14,3,0,0,0,0,0,0,0,18,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,308,      double yab = ya - yaa;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,311,      double recip = 1.0/ya;,4,1,0,0,0,0,0,0,0,5,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,312,      temp = recip * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,313,      double recipa = recip + temp - temp;,2,0,0,0,0,1,4,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,314,      double recipb = recip - recipa;,14,2,0,0,0,0,0,0,0,17,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,317,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0,0,0,1,2,0,0,0,0,3,76,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,319,      recipb += -yb * recip * recip;,14,2,0,0,0,0,0,0,0,19,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,322,      temp = ya + recipa;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,323,      yb += -(temp - ya - recipa);,2,1,1,1,2,1,0,0,0,7,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,324,      ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,325,      temp = ya + recipb;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,326,      yb += -(temp - ya - recipb);,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,327,      ya = temp;,2,1,0,0,0,0,0,0,0,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,329,      double result = ya + yb;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,330,      result *= 0.5;,12,1,0,0,0,1,6,2,0,25,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,331,      return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,339,      boolean negate = false;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,340,      if (x != x) {,14,2,0,1,3,0,0,0,0,17,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,341,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,344,      if (x > 20.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,345,          return exp(x)/2.0;,0,0,0,1,2,1,0,0,0,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,348,      if (x < -20) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,349,          return -exp(-x)/2.0;,0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,352,      if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,353,          return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,356,      if (x < 0.0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,357,          x = -x;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,358,          negate = true;,6,1,1,0,0,0,0,0,0,10,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,363,      if (x > 0.25) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,364,          double hiPrec[] = new double[2];,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,365,"          exp(x, 0.0, hiPrec);",2,0,0,1,2,0,12,0,0,15,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,367,          double ya = hiPrec[0] + hiPrec[1];,10,2,0,2,4,0,0,0,0,14,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,368,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0,0,0,3,6,0,0,0,0,9,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,370,          double temp = ya * HEX_40000000;,4,0,0,0,0,0,0,0,0,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,371,          double yaa = ya + temp - temp;,0,0,1,0,0,0,0,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,372,          double yab = ya - yaa;,6,1,0,0,0,0,0,0,0,7,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,375,          double recip = 1.0/ya;,6,1,0,0,0,0,0,0,0,8,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,376,          temp = recip * HEX_40000000;,4,0,0,0,0,0,0,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,377,          double recipa = recip + temp - temp;,8,2,0,0,0,0,0,0,0,10,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,378,          double recipb = recip - recipa;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,381,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,10,1,0,1,2,0,0,0,0,12,76,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,383,          recipb += -yb * recip * recip;,8,1,0,0,0,0,0,0,0,11,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,385,          recipa = -recipa;,0,0,1,0,0,0,0,0,0,6,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,386,          recipb = -recipb;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,389,          temp = ya + recipa;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,390,          yb += -(temp - ya - recipa);,8,1,0,1,2,0,0,0,0,11,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,391,          ya = temp;,6,1,0,0,0,0,6,0,0,14,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,392,          temp = ya + recipb;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,393,          yb += -(temp - ya - recipb);,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,394,          ya = temp;,8,0,0,0,0,0,0,0,0,9,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,396,          result = ya + yb;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,397,          result *= 0.5;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,398,      },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,400,          double hiPrec[] = new double[2];,2,0,0,2,4,0,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,401,"          expm1(x, hiPrec);",6,0,0,1,2,1,8,0,0,16,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,403,          double ya = hiPrec[0] + hiPrec[1];,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,404,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0,0,0,3,6,0,0,0,0,9,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,407,          double denom = 1.0 + ya;,4,1,0,0,0,0,0,0,0,5,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,408,          double denomr = 1.0 / denom;,4,0,1,0,0,0,4,0,0,12,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,409,          double denomb = -(denom - 1.0 - ya) + yb;,2,0,0,1,2,0,0,0,0,2,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,410,          double ratio = ya * denomr;,6,1,0,0,0,0,0,0,0,7,27,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,411,          double temp = ratio * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,412,          double ra = ratio + temp - temp;,0,0,0,0,0,0,0,0,0,0,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,413,          double rb = ratio - ra;,2,0,0,0,0,0,6,0,0,9,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,415,          temp = denom * HEX_40000000;,8,1,0,0,0,0,0,0,0,11,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,416,          double za = denom + temp - temp;,8,3,0,0,0,0,0,0,0,12,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,417,          double zb = denom - za;,10,1,0,0,0,0,0,0,0,11,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,419,          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;,22,9,0,1,2,0,0,0,0,32,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,422,          rb += yb*denomr;                        // numerator,12,2,0,0,0,1,0,0,0,16,52,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,423,          rb += -ya * denomb * denomr * denomr;   // denominator,0,0,0,0,0,0,0,0,0,0,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,426,          temp = ya + ra;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,427,          yb += -(temp - ya - ra);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,428,          ya = temp;,22,3,0,0,0,0,0,0,0,30,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,429,          temp = ya + rb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,430,          yb += -(temp - ya - rb);,10,1,0,1,2,0,0,0,0,12,24,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,431,          ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,433,          result = ya + yb;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,434,          result *= 0.5;,2,0,0,0,0,0,4,0,0,7,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,437,      if (negate) {,2,0,0,1,3,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,438,          result = -result;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,441,      return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,449,      boolean negate = false;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,451,      if (x != x) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,452,          return x;,10,3,1,0,0,1,0,0,0,26,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,455,      if (x > 20.0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,456,          return 1.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,459,      if (x < -20) {,0,0,0,1,3,0,12,0,0,12,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,460,          return -1.0;,0,0,0,0,0,1,0,0,0,1,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,463,      if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,464,          return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,467,      if (x < 0.0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,468,          x = -x;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,469,          negate = true;,2,0,0,0,0,0,0,0,0,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,473,      if (x >= 0.5) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,474,          double hiPrec[] = new double[2];,4,0,0,2,4,0,6,0,0,11,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,476,"          exp(x*2.0, 0.0, hiPrec);",2,1,0,1,2,0,4,0,0,7,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,478,          double ya = hiPrec[0] + hiPrec[1];,4,2,1,2,4,0,0,0,0,13,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,479,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0,0,0,3,6,0,0,0,0,9,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,482,          double na = -1.0 + ya;,4,1,0,0,0,0,0,0,0,6,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,483,          double nb = -(na + 1.0 - ya);,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,484,          double temp = na + yb;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,485,          nb += -(temp - na - yb);,8,1,0,1,2,0,0,0,0,11,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,486,          na = temp;,8,0,0,0,0,0,0,0,0,9,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,489,          double da = 1.0 + ya;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,490,          double db = -(da - 1.0 - ya);,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,491,          temp = da + yb;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,492,          db += -(temp - da - yb);,8,1,0,1,2,0,0,0,0,11,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,493,          da = temp;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,495,          temp = da * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,496,          double daa = da + temp - temp;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,497,          double dab = da - daa;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,500,          double ratio = na/da;,6,1,0,0,0,0,0,0,0,8,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,501,          temp = ratio * HEX_40000000;,16,6,0,0,0,0,0,0,0,23,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,502,          double ratioa = ratio + temp - temp;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,503,          double ratiob = ratio - ratioa;,2,1,0,0,0,0,0,0,0,3,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,506,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0,0,0,1,2,0,0,0,0,3,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,509,          ratiob += nb / da;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,511,          ratiob += -db * na / da / da;,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,513,          result = ratioa + ratiob;,6,1,0,0,0,0,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,514,      },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,516,          double hiPrec[] = new double[2];,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,518,"          expm1(x*2.0, hiPrec);",4,0,0,1,2,0,6,0,0,10,21,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,520,          double ya = hiPrec[0] + hiPrec[1];,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,521,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0,0,0,3,6,0,0,0,0,9,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,524,          double na = ya;,4,0,0,0,0,0,0,0,0,4,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,525,          double nb = yb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,528,          double da = 2.0 + ya;,4,1,0,0,0,0,0,0,0,5,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,529,          double db = -(da - 2.0 - ya);,8,1,0,1,2,0,0,2,0,12,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,530,          double temp = da + yb;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,531,          db += -(temp - da - yb);,14,1,0,1,2,0,0,0,0,18,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,532,          da = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,534,          temp = da * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,535,          double daa = da + temp - temp;,16,3,0,0,0,0,0,0,0,20,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,536,          double dab = da - daa;,14,5,1,0,0,0,8,0,0,33,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,539,          double ratio = na/da;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,540,          temp = ratio * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,541,          double ratioa = ratio + temp - temp;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,542,          double ratiob = ratio - ratioa;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,545,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0,0,0,1,2,0,0,0,0,3,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,548,          ratiob += nb / da;,10,1,0,0,0,0,2,2,0,16,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,550,          ratiob += -db * na / da / da;,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,552,          result = ratioa + ratiob;,2,1,0,0,0,0,0,0,0,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,555,      if (negate) {,0,0,0,1,3,0,6,0,0,6,13,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,556,          result = -result;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,559,      return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,567,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,0,0,0,2,4,1,0,0,0,7,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,576,        boolean negative = false;,2,0,0,0,0,0,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,577,        if (a < 0) {,8,2,0,1,3,0,0,0,0,10,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,578,            negative = true;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,579,            a = -a;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,583,        if (a > 0.167) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,584,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,6,1,0,2,4,0,0,0,0,7,54,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,586,            final double a2 = a * a;,4,0,0,0,0,0,0,0,0,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,587,            if (a > 0.097) {,4,1,0,1,3,0,0,0,0,7,16,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,588,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0 - a2 * (1.0 / 15.0 - a2 * (1.0 / 17.0) * 15.0 / 16.0) * 13.0 / 14.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,20,33,0,9,18,0,0,0,0,54,264,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,589,            } else if (a > 0.036) {,0,0,0,1,4,0,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,590,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,0,0,0,7,14,0,0,0,0,21,196,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,591,            } else if (a > 0.0036) {,0,0,0,1,4,0,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,592,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,0,0,0,5,10,0,0,0,0,15,129,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,594,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0) * 3.0 / 4.0) / 2.0);,4,1,0,3,6,0,0,0,0,5,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,598,        return negative ? -absAsinh : absAsinh;,0,0,0,0,0,1,0,0,0,1,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,608,        boolean negative = false;,4,0,0,0,0,0,0,0,0,5,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,609,        if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,610,            negative = true;,2,0,0,0,0,0,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,611,            a = -a;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,615,        if (a > 0.15) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,616,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,6,4,0,3,6,0,4,0,0,15,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,618,            final double a2 = a * a;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,619,            if (a > 0.087) {,4,0,0,1,3,0,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,620,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0 + a2 * (1.0 / 15.0 + a2 * (1.0 / 17.0)))))))));,0,0,0,9,18,0,0,0,0,27,175,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,621,            } else if (a > 0.031) {,0,0,0,1,4,0,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,622,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0)))))));,26,19,1,7,14,1,0,2,0,52,135,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,623,            } else if (a > 0.003) {,2,0,0,1,4,1,2,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,624,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0)))));,0,0,0,5,10,0,0,0,0,15,95,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,626,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0)));,14,8,0,3,6,1,0,0,0,24,57,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,630,        return negative ? -absAtanh : absAtanh;,8,1,1,0,0,1,0,0,0,11,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,640,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,2,0,0,3,6,2,6,0,0,8,87,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,649,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,0,0,0,3,6,2,0,0,0,11,91,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,657,"        return nextAfter(a, Double.POSITIVE_INFINITY);",6,0,0,1,2,1,4,0,0,11,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,665,"        return nextAfter(a, Float.POSITIVE_INFINITY);",0,0,0,1,2,1,0,0,0,4,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,673,        return Math.random();,0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,697,"        return exp(x, 0.0, null);",8,1,0,1,2,1,0,0,0,11,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,716,        if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,717,            intVal = (int) -x;,10,2,1,1,2,0,0,0,0,19,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,719,            if (intVal > 746) {,2,1,0,1,3,0,0,0,0,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,720,                if (hiPrec != null) {,4,1,0,1,3,0,0,0,0,5,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,721,                    hiPrec[0] = 0.0;,6,1,1,1,2,0,0,0,0,10,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,722,                    hiPrec[1] = 0.0;,2,0,1,1,2,0,0,0,0,5,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,724,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,727,            if (intVal > 709) {,2,1,0,1,3,0,0,0,0,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,729,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",0,0,0,1,2,0,0,0,0,3,79,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,730,                if (hiPrec != null) {,4,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,731,                    hiPrec[0] /= 285040095144011776.0;,0,0,1,1,2,0,0,0,0,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,732,                    hiPrec[1] /= 285040095144011776.0;,2,0,0,1,2,0,0,0,0,2,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,734,                return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,737,            if (intVal == 709) {,14,3,0,1,3,0,0,0,0,20,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,739,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",4,2,0,1,2,1,6,0,0,13,79,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,740,                if (hiPrec != null) {,4,1,0,1,3,0,4,0,0,10,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,741,                    hiPrec[0] /= 4.455505956692756620;,0,0,1,1,2,0,0,0,0,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,742,                    hiPrec[1] /= 4.455505956692756620;,0,0,1,1,2,0,0,0,0,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,744,                return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,747,            intVal++;,6,1,0,0,0,1,0,0,0,8,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,749,            intPartA = EXP_INT_TABLE_A[750-intVal];,4,1,1,1,2,0,0,0,0,8,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,750,            intPartB = EXP_INT_TABLE_B[750-intVal];,6,2,1,1,2,1,0,0,0,12,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,752,            intVal = -intVal;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,754,            intVal = (int) x;,4,0,0,1,2,0,0,0,0,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,756,            if (intVal > 709) {,2,0,0,1,3,0,0,2,0,4,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,757,                if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,758,                    hiPrec[0] = Double.POSITIVE_INFINITY;,6,1,0,1,2,0,0,0,0,8,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,759,                    hiPrec[1] = 0.0;,0,0,1,1,2,0,0,0,0,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,761,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,764,            intPartA = EXP_INT_TABLE_A[750+intVal];,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,765,            intPartB = EXP_INT_TABLE_B[750+intVal];,4,1,1,1,2,0,0,0,0,8,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,772,        final int intFrac = (int) ((x - intVal) * 1024.0);,2,0,0,3,6,1,2,0,0,5,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,773,        final double fracPartA = EXP_FRAC_TABLE_A[intFrac];,14,6,1,1,2,1,0,0,0,31,51,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,774,        final double fracPartB = EXP_FRAC_TABLE_B[intFrac];,0,0,0,1,2,0,0,0,0,3,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,780,        final double epsilon = x - (intVal + intFrac / 1024.0);,0,0,0,1,2,0,0,0,0,3,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,789,        double z = 0.04168701738764507;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,790,        z = z * epsilon + 0.1666666505023083;,0,0,0,0,0,0,0,0,0,0,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,791,        z = z * epsilon + 0.5000000000042687;,6,2,0,0,0,0,0,0,0,9,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,792,        z = z * epsilon + 1.0;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,793,        z = z * epsilon + -3.940510424527919E-20;,6,2,0,0,0,0,0,0,0,10,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,800,        double tempA = intPartA * fracPartA;,8,2,0,0,0,0,4,0,0,14,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,801,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,0,0,0,0,0,0,0,0,0,0,82,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,807,        final double tempC = tempB + tempA;,0,0,0,0,0,0,6,0,0,6,35,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,809,        if (extra != 0.0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,810,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,24,8,1,0,0,0,0,0,0,48,63,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,812,            result = tempC*z + tempB + tempA;,22,5,0,0,0,1,0,0,0,30,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,815,        if (hiPrec != null) {,2,1,0,1,3,0,6,0,0,9,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,817,            hiPrec[0] = tempA;,4,0,1,1,2,0,0,0,0,7,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,818,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,0,0,0,1,2,0,0,0,0,3,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,821,        return result;,4,1,0,0,0,1,0,0,0,5,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,829,"      return expm1(x, null);",0,0,0,1,2,1,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,838,        if (x != x || x == 0.0) { // NaN or zero,0,0,0,1,3,0,0,0,0,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,839,            return x;,6,1,0,0,0,1,0,0,0,8,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,842,        if (x <= -1.0 || x >= 1.0) {,12,2,0,1,3,0,0,0,0,17,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,845,            double hiPrec[] = new double[2];,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,846,"            exp(x, 0.0, hiPrec);",6,4,0,1,2,0,6,0,0,16,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,847,            if (x > 0.0) {,10,2,0,1,3,0,0,0,0,13,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,848,                return -1.0 + hiPrec[0] + hiPrec[1];,0,1,1,2,4,1,0,0,0,7,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,850,                final double ra = -1.0 + hiPrec[0];,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,851,                double rb = -(ra + 1.0 - hiPrec[0]);,6,1,0,2,4,0,0,0,0,8,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,852,                rb += hiPrec[1];,0,0,0,1,2,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,853,                return ra + rb;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,860,        boolean negative = false;,0,0,0,0,0,0,8,0,0,8,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,862,        if (x < 0.0) {,6,2,0,1,3,0,0,0,0,8,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,863,            x = -x;,10,1,0,0,0,0,0,0,0,14,7,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,864,            negative = true;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,868,            int intFrac = (int) (x * 1024.0);,12,7,0,2,4,0,0,0,0,19,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,869,            double tempA = EXP_FRAC_TABLE_A[intFrac] - 1.0;,2,1,1,1,2,0,0,0,0,7,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,870,            double tempB = EXP_FRAC_TABLE_B[intFrac];,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,872,            double temp = tempA + tempB;,6,2,1,0,0,1,0,0,0,13,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,873,            tempB = -(temp - tempA - tempB);,8,1,0,1,2,0,0,0,0,11,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,874,            tempA = temp;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,876,            temp = tempA * HEX_40000000;,2,1,0,0,0,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,877,            baseA = tempA + temp - temp;,8,2,0,0,0,0,0,0,0,11,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,878,            baseB = tempB + (tempA - baseA);,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,880,            epsilon = x - intFrac/1024.0;,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,885,        double zb = 0.008336750013465571;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,886,        zb = zb * epsilon + 0.041666663879186654;,0,0,0,0,0,0,0,0,0,0,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,887,        zb = zb * epsilon + 0.16666666666745392;,0,0,0,0,0,0,0,0,0,0,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,888,        zb = zb * epsilon + 0.49999999999999994;,4,1,0,0,0,0,0,0,0,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,889,        zb = zb * epsilon;,2,0,0,0,0,0,0,0,0,2,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,890,        zb = zb * epsilon;,4,0,0,0,0,0,0,0,0,6,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,892,        double za = epsilon;,4,0,0,0,0,0,0,0,0,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,893,        double temp = za + zb;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,894,        zb = -(temp - za - zb);,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,895,        za = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,897,        temp = za * HEX_40000000;,16,2,1,0,0,0,0,0,0,23,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,898,        temp = za + temp - temp;,10,2,0,0,0,0,0,0,0,13,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,899,        zb += za - temp;,16,6,1,0,0,0,0,0,0,25,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,900,        za = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,903,        double ya = za * baseA;,6,1,0,0,0,0,0,0,0,7,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,905,        temp = ya + za * baseB;,2,0,0,0,0,0,0,0,0,3,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,906,        double yb = -(temp - ya - za * baseB);,10,2,0,1,2,0,2,0,0,16,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,907,        ya = temp;,6,0,0,0,0,0,6,0,0,13,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,909,        temp = ya + zb * baseA;,8,2,0,0,0,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,910,        yb += -(temp - ya - zb * baseA);,10,2,0,1,2,0,0,0,0,14,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,911,        ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,913,        temp = ya + zb * baseB;,4,1,1,0,0,0,0,0,0,9,23,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,914,        yb += -(temp - ya - zb*baseB);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,915,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,919,        temp = ya + baseA;,6,1,0,0,0,0,0,0,0,8,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,920,        yb += -(temp - baseA - ya);,8,1,0,1,2,0,0,0,0,11,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,921,        ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,923,        temp = ya + za;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,925,        yb += -(temp - ya - za);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,926,        ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,928,        temp = ya + baseB;,12,3,0,0,0,0,0,0,0,16,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,930,        yb += -(temp - ya - baseB);,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,931,        ya = temp;,6,1,0,0,0,0,0,0,0,8,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,933,        temp = ya + zb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,935,        yb += -(temp - ya - zb);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,936,        ya = temp;,6,1,0,0,0,1,0,0,0,9,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,938,        if (negative) {,6,1,0,1,3,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,940,            double denom = 1.0 + ya;,4,1,0,0,0,0,0,0,0,5,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,941,            double denomr = 1.0 / denom;,16,2,0,0,0,0,0,4,0,23,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,942,            double denomb = -(denom - 1.0 - ya) + yb;,8,2,0,1,2,0,0,0,0,11,41,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,943,            double ratio = ya * denomr;,6,1,0,0,0,0,0,0,0,7,27,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,944,            temp = ratio * HEX_40000000;,14,2,0,0,0,0,0,0,0,18,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,945,            final double ra = ratio + temp - temp;,2,0,0,0,0,0,0,0,0,2,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,946,            double rb = ratio - ra;,10,3,1,0,0,0,14,0,0,32,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,948,            temp = denom * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,949,            za = denom + temp - temp;,8,2,0,0,0,0,0,0,0,11,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,950,            zb = denom - za;,6,1,0,0,0,0,0,0,0,8,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,952,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,0,0,0,1,2,0,0,0,0,3,60,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,963,            rb += yb * denomr;                      // numerator,2,1,0,0,0,0,0,0,0,3,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,964,            rb += -ya * denomb * denomr * denomr;   // denominator,8,2,0,0,0,1,0,0,0,11,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,967,            ya = -ra;,6,1,0,0,0,0,0,0,0,8,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,968,            yb = -rb;,6,1,0,0,0,0,0,0,0,8,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,971,        if (hiPrecOut != null) {,2,1,0,1,3,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,972,            hiPrecOut[0] = ya;,4,0,1,1,2,0,0,0,0,10,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,973,            hiPrecOut[1] = yb;,2,0,0,1,2,0,4,0,0,6,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,976,        return ya + yb;,4,1,0,0,0,1,0,0,0,6,15,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1026,            final double a = d * 9.31322574615478515625E-10;,0,0,0,0,0,0,0,0,0,0,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1027,            split[0] = (d + a - d) * HEX_40000000;,6,3,0,2,4,0,0,0,0,9,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1028,            split[1] = d - split[0];,0,0,0,2,4,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1099,            in[0] = in[1];,0,0,1,2,4,0,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1100,            in[1] = 0.0;,0,0,0,1,2,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1231,"        return log(x, null);",0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1241,        if (x==0) { // Handle special case of +0/-0,0,0,0,1,3,0,0,0,0,4,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1242,            return Double.NEGATIVE_INFINITY;,18,1,1,0,0,1,4,0,0,28,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1244,        long bits = Double.doubleToLongBits(x);,6,1,0,1,2,0,0,0,0,8,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1247,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,0,0,0,2,5,0,0,0,0,7,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1248,            if (x != 0.0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1249,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1250,                    hiPrec[0] = Double.NaN;,14,4,1,1,2,0,0,0,0,23,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1253,                return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1258,        if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1259,            if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1260,                hiPrec[0] = Double.POSITIVE_INFINITY;,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1263,            return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1267,        int exp = (int)(bits >> 52)-1023;,0,0,0,2,4,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1269,        if ((bits & 0x7ff0000000000000L) == 0) {,2,2,0,2,5,0,0,0,0,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1271,            if (x == 0) {,6,3,0,1,3,0,0,0,0,10,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1273,                if (hiPrec != null) {,6,1,0,1,3,0,0,0,0,7,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1274,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1277,                return Double.NEGATIVE_INFINITY;,8,1,0,0,0,1,0,0,0,10,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1281,            bits <<= 1;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1282,            while ( (bits & 0x0010000000000000L) == 0) {,0,0,0,2,5,0,0,0,0,7,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1283,                exp--;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1284,                bits <<= 1;,2,0,0,0,0,0,0,0,0,3,11,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1289,        if (exp == -1 || exp == 0) {,4,3,0,1,3,0,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1290,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,6,5,0,1,3,0,0,0,0,11,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1295,                double xa = x - 1.0;,8,1,0,0,0,0,0,0,0,11,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1296,                double xb = xa - x + 1.0;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1297,                double tmp = xa * HEX_40000000;,2,1,0,0,0,0,4,0,0,7,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1298,                double aa = xa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1299,                double ab = xa - aa;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1300,                xa = aa;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1301,                xb = ab;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1303,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,2,0,0,2,4,1,4,0,0,7,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1304,                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];,0,0,0,2,4,0,0,0,0,6,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1306,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1308,                    aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1309,                    ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1311,                    tmp = aa * HEX_40000000;,8,2,0,0,0,0,0,0,0,10,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1312,                    ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1313,                    yb = aa - ya + ab;,8,1,0,0,0,0,0,0,0,11,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1316,                    aa = ya + LN_QUICK_COEF[i][0];,4,1,1,2,4,0,0,0,0,10,30,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1317,                    ab = yb + LN_QUICK_COEF[i][1];,4,1,1,2,4,0,0,0,0,10,30,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1319,                    tmp = aa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1320,                    ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1321,                    yb = aa - ya + ab;,6,1,0,0,0,0,0,0,0,8,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1325,                aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1326,                ab = ya * xb + yb * xa + yb * xb;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1328,                tmp = aa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1329,                ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1330,                yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1332,                return ya + yb;,8,1,0,0,0,1,6,0,0,15,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1337,        double lnm[] = LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,4,2,1,5,10,0,0,0,0,8,66,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1348,        double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,4,0,0,3,6,0,0,0,0,5,89,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1350,        double lnza = 0.0;,4,2,1,0,0,0,4,0,0,14,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1351,        double lnzb = 0.0;,2,0,1,0,0,0,0,0,0,13,18,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1353,        if (hiPrec != null) {,0,0,0,1,3,0,12,0,0,12,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1355,            double tmp = epsilon * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1356,            double aa = epsilon + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1357,            double ab = epsilon - aa;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1358,            double xa = aa;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1359,            double xb = ab;,4,0,0,0,0,0,0,0,0,4,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1362,            double numer = bits & 0x3ffffffffffL;,4,1,0,0,0,0,0,0,0,5,37,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1363,            double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,4,0,0,1,2,0,4,0,0,8,59,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1364,            aa = numer - xa*denom - xb * denom;,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1365,            xb += aa / denom;,14,2,0,0,0,0,6,0,0,26,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1368,            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];,8,2,0,2,4,1,0,0,0,11,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1369,            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];,6,1,1,2,4,0,0,0,0,9,57,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1371,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,14,2,0,1,3,0,0,0,0,19,55,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1373,                aa = ya * xa;,8,1,0,0,0,0,0,2,0,12,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1374,                ab = ya * xb + yb * xa + yb * xb;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1376,                tmp = aa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1377,                ya = aa + tmp - tmp;,28,11,1,0,0,0,0,0,0,44,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1378,                yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1381,                aa = ya + LN_HI_PREC_COEF[i][0];,8,0,0,2,4,0,4,0,0,12,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1382,                ab = yb + LN_HI_PREC_COEF[i][1];,4,1,1,2,4,0,0,0,0,10,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1384,                tmp = aa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1385,                ya = aa + tmp - tmp;,2,0,0,0,0,0,0,0,0,2,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1386,                yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1390,            aa = ya * xa;,6,1,0,0,0,0,0,0,0,8,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1391,            ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1399,            lnza = aa + ab;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1400,            lnzb = -(lnza - aa - ab);,0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1401,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1404,            lnza = -0.16624882440418567;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1405,            lnza = lnza * epsilon + 0.19999954120254515;,8,3,0,0,0,0,0,0,0,12,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1406,            lnza = lnza * epsilon + -0.2499999997677497;,0,0,0,0,0,0,0,0,0,0,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1407,            lnza = lnza * epsilon + 0.3333333333332802;,6,2,0,0,0,0,0,0,0,9,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1408,            lnza = lnza * epsilon + -0.5;,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1409,            lnza = lnza * epsilon + 1.0;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1410,            lnza = lnza * epsilon;,18,8,0,0,0,0,0,0,0,27,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1427,        double a = LN_2_A*exp;,20,5,0,0,0,1,0,0,0,27,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1428,        double b = 0.0;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1429,        double c = a+lnm[0];,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1430,        double d = -(c-a-lnm[0]);,8,1,1,2,4,0,4,2,0,18,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1431,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1432,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1434,        c = a + lnza;,6,1,0,0,0,0,0,0,0,8,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1435,        d = -(c - a - lnza);,16,3,0,1,2,0,0,0,0,21,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1436,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1437,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1439,        c = a + LN_2_B*exp;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1440,        d = -(c - a - LN_2_B*exp);,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1441,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1442,        b = b + d;,12,2,0,0,0,0,0,0,0,15,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1444,        c = a + lnm[1];,8,1,0,1,2,0,0,0,0,11,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1445,        d = -(c - a - lnm[1]);,0,0,0,2,4,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1446,        a = c;,12,1,1,0,0,0,0,0,0,20,6,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1447,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1449,        c = a + lnzb;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1450,        d = -(c - a - lnzb);,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1451,        a = c;,20,5,1,0,0,0,0,0,0,32,6,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1452,        b = b + d;,8,1,0,0,0,0,10,0,0,21,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1454,        if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1455,            hiPrec[0] = a;,2,0,1,1,2,0,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1456,            hiPrec[1] = b;,12,3,1,1,2,0,0,0,0,19,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1459,        return a + b;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1467,        double xpa = 1.0 + x;,14,4,0,0,0,0,0,0,0,20,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1468,        double xpb = -(xpa - 1.0 - x);,12,2,0,1,2,0,0,0,0,16,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1470,        if (x == -1) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1471,            return x/0.0;   // -Infinity,2,1,0,0,0,1,0,0,0,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1474,        if (x > 0 && 1/x == 0) { // x = Infinity,0,0,0,1,3,0,0,0,0,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1475,            return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1478,        if (x>1e-6 || x<-1e-6) {,0,0,0,1,3,0,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1479,            double hiPrec[] = new double[2];,2,0,0,2,4,0,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1481,"            final double lores = log(xpa, hiPrec);",4,1,0,1,2,1,6,0,0,12,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1482,            if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0,0,0,2,5,0,6,0,0,6,73,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1483,                return lores;,2,0,0,0,0,1,0,0,0,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1488,            double fx1 = xpb/xpa;,6,1,0,0,0,0,0,2,0,9,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1490,            double epsilon = 0.5 * fx1 + 1.0;,6,2,0,0,0,0,4,0,0,12,33,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1491,            epsilon = epsilon * fx1;,2,0,0,0,0,0,0,0,0,2,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1493,            return epsilon + hiPrec[1] + hiPrec[0];,0,0,0,2,4,1,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1497,        double y = x * 0.333333333333333 - 0.5;,4,2,0,0,0,0,0,0,0,6,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1498,        y = y * x + 1.0;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1499,        y = y * x;,6,2,0,0,0,1,0,0,0,10,10,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1501,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1509,        final double hiPrec[] = new double[2];,14,2,0,2,4,0,0,0,0,16,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1511,"        final double lores = log(x, hiPrec);",0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1512,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0,0,0,2,5,0,0,0,0,7,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1513,            return lores;,2,0,0,0,0,1,0,0,0,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1516,        final double tmp = hiPrec[0] * HEX_40000000;,4,1,1,1,2,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1517,        final double lna = hiPrec[0] + tmp - tmp;,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1518,        final double lnb = hiPrec[0] - lna + hiPrec[1];,0,0,0,2,4,0,0,0,0,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1520,        final double rln10a = 0.4342944622039795;,6,1,0,0,0,2,2,0,0,11,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1521,        final double rln10b = 1.9699272335463627E-8;,2,0,0,0,0,1,0,0,0,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1523,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,26,8,0,0,0,1,0,0,0,34,65,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1534,        final double lns[] = new double[2];,6,1,0,2,4,1,6,0,0,14,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1536,        if (y == 0.0) {,8,2,0,1,3,0,0,0,0,11,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1537,            return 1.0;,2,0,0,0,0,1,0,0,0,3,11,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1540,        if (x != x) { // X is NaN,4,1,0,1,3,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1541,            return x;,8,1,0,0,0,1,0,0,0,11,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1545,        if (x == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1546,            long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1547,            if ((bits & 0x8000000000000000L) != 0) {,2,2,0,2,5,0,0,0,0,4,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1549,                long yi = (long) y;,0,0,0,1,2,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1551,                if (y < 0 && y == yi && (yi & 1) == 1) {,8,6,0,2,5,0,0,0,0,14,40,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1552,                    return Double.NEGATIVE_INFINITY;,30,8,0,0,0,1,0,0,0,39,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1555,                if (y < 0 && y == yi && (yi & 1) == 1) {,8,6,0,2,5,0,0,0,0,14,40,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1556,                    return -0.0;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1559,                if (y > 0 && y == yi && (yi & 1) == 1) {,0,0,0,2,5,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1560,                    return -0.0;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1564,            if (y < 0) {,6,2,0,1,3,0,0,0,0,8,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1565,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1567,            if (y > 0) {,4,1,0,1,3,0,0,0,0,6,12,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1568,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1571,            return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1574,        if (x == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1575,            if (y != y) { // y is NaN,2,0,0,1,3,0,0,0,0,4,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1576,                return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1578,            if (y < 0.0) {,12,2,0,1,3,1,0,0,0,16,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1579,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1581,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1585,        if (y == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1586,            if (x * x == 1.0),0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1587,              return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1589,            if (x * x > 1.0) {,6,1,0,1,3,0,0,0,0,8,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1590,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1592,                return 0.0;,0,0,0,0,0,1,10,0,0,11,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1596,        if (x == Double.NEGATIVE_INFINITY) {,12,4,0,1,3,0,4,0,0,20,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1597,            if (y != y) { // y is NaN,4,1,0,1,3,0,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1598,                return y;,6,3,0,0,0,1,12,0,0,22,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1601,            if (y < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1602,                long yi = (long) y;,0,0,0,1,2,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1603,                if (y == yi && (yi & 1) == 1) {,0,0,0,2,5,0,0,0,0,7,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1604,                    return -0.0;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1607,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1610,            if (y > 0)  {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1611,                long yi = (long) y;,16,2,0,1,2,0,0,0,0,18,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1612,                if (y == yi && (yi & 1) == 1) {,10,4,0,2,5,0,0,0,0,16,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1613,                    return Double.NEGATIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1616,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1620,        if (y == Double.NEGATIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1622,            if (x * x == 1.0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1623,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1626,            if (x * x < 1.0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1627,                return Double.POSITIVE_INFINITY;,2,0,1,0,0,1,0,0,0,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1629,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1634,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1636,            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {,8,3,0,1,3,0,0,0,0,12,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1637,"                return pow(-x, y);",0,0,0,1,2,1,0,0,0,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1640,            if (y == (long) y) {,0,0,0,2,5,0,0,0,0,7,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1642,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",14,4,0,4,8,1,8,0,0,30,53,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1644,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1651,        if (y < 8e298 && y > -8e298) {,16,9,1,1,3,0,2,0,0,34,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1652,            double tmp1 = y * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1653,            ya = y + tmp1 - tmp1;,10,2,0,0,0,0,0,0,0,13,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1654,            yb = y - ya;,6,1,0,0,0,0,0,0,0,8,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1655,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1656,            double tmp1 = y * 9.31322574615478515625E-10;,0,0,0,0,0,0,0,0,0,0,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1657,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,4,1,0,0,0,0,0,0,0,5,48,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1658,            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;,0,0,0,1,2,0,0,0,0,3,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1659,            yb = y - ya;,10,1,0,0,0,0,0,0,0,12,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1663,"        final double lores = log(x, lns);",0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1664,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,6,2,0,2,5,0,0,0,0,8,73,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1665,            return lores;,2,0,0,0,0,1,0,0,0,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1668,        double lna = lns[0];,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1669,        double lnb = lns[1];,10,1,0,1,2,0,0,0,0,14,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1672,        double tmp1 = lna * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1673,        double tmp2 = lna + tmp1 - tmp1;,8,2,0,0,0,0,0,0,0,10,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1674,        lnb += lna - tmp2;,4,3,0,0,0,0,4,0,0,11,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1675,        lna = tmp2;,6,1,0,0,0,0,0,0,0,9,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1678,        final double aa = lna * ya;,6,1,0,0,0,1,0,0,0,8,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1679,        final double ab = lna * yb + lnb * ya + lnb * yb;,14,5,0,0,0,1,0,0,0,20,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1681,        lna = aa+ab;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1682,        lnb = -(lna - aa - ab);,6,1,1,1,2,0,0,0,0,11,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1684,        double z = 1.0 / 120.0;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1685,        z = z * lnb + (1.0 / 24.0);,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1686,        z = z * lnb + (1.0 / 6.0);,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1687,        z = z * lnb + 0.5;,18,4,0,0,0,0,1,0,0,27,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1688,        z = z * lnb + 1.0;,8,3,0,0,0,0,0,0,0,12,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1689,        z = z * lnb;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1691,"        final double result = exp(lna, z, null);",2,0,0,1,2,1,6,0,0,10,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1693,        return result;,6,0,0,0,0,2,8,0,0,15,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1948,        double x2 = x*x;,8,1,0,0,0,0,0,2,0,11,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1950,        double p = 2.7553817452272217E-6;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1951,        p = p * x2 + -1.9841269659586505E-4;,14,4,0,0,0,0,0,0,0,22,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1952,        p = p * x2 + 0.008333333333329196;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1953,        p = p * x2 + -0.16666666666666666;,4,1,0,0,0,1,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1956,        p = p * x2 * x;,8,1,0,0,0,0,0,0,0,10,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1958,        return p;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1968,        double x2 = x*x;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1970,        double p = 2.479773539153719E-5;,4,0,0,0,0,1,2,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1971,        p = p * x2 + -0.0013888888689039883;,6,2,0,0,0,0,0,0,0,10,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1972,        p = p * x2 + 0.041666666666621166;,6,2,0,0,0,0,0,0,0,9,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1973,        p = p * x2 + -0.49999999999999994;,14,6,0,0,0,0,0,0,0,24,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1974,        p *= x2;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1976,        return p;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1987,        int idx = (int) ((xa * 8.0) + 0.5);,12,4,1,3,6,1,0,2,0,21,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1988,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,10,2,1,1,2,1,6,0,0,25,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1991,        final double sintA = SINE_TABLE_A[idx];,4,0,1,1,2,1,4,0,0,14,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1992,        final double sintB = SINE_TABLE_B[idx];,4,1,1,1,2,0,0,0,0,9,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1993,        final double costA = COSINE_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1994,        final double costB = COSINE_TABLE_B[idx];,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1997,        double sinEpsA = epsilon;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1998,        double sinEpsB = polySine(epsilon);,6,1,0,1,2,0,4,0,0,11,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1999,        final double cosEpsA = 1.0;,20,3,0,0,0,1,0,0,0,26,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2000,        final double cosEpsB = polyCosine(epsilon);,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2003,        final double temp = sinEpsA * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2004,        double temp2 = (sinEpsA + temp) - temp;,16,3,0,1,2,0,0,0,0,20,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2005,        sinEpsB +=  sinEpsA - temp2;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2006,        sinEpsA = temp2;,4,0,0,0,0,0,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2032,        double a = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2033,        double b = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2035,        double t = sintA;,4,0,0,0,0,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2036,        double c = a + t;,6,2,0,0,0,0,0,0,0,9,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2037,        double d = -(c - a - t);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2038,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2039,        b = b + d;,8,1,0,0,0,0,0,0,0,10,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2041,        t = costA * sinEpsA;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2042,        c = a + t;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2043,        d = -(c - a - t);,0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2044,        a = c;,4,3,0,0,0,0,4,0,0,11,6,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2045,        b = b + d;,6,1,1,0,0,0,4,0,0,21,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2047,        b = b + sintA * cosEpsB + costA * sinEpsB;,4,0,0,0,0,0,0,0,0,5,42,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2062,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,20,7,1,0,0,0,0,0,0,31,68,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2089,        if (xb != 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2090,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,12,5,1,2,5,1,0,0,0,23,44,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2092,            c = a + t;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2093,            d = -(c - a - t);,0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2094,            a = c;,14,1,0,0,0,0,6,0,0,25,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2095,            b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2098,        result = a + b;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2100,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2111,        final double pi2a = 1.5707963267948966;,0,0,0,0,0,0,0,0,0,0,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2112,        final double pi2b = 6.123233995736766E-17;,0,0,0,0,0,0,0,0,0,0,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2114,        final double a = pi2a - xa;,6,1,0,0,0,1,0,0,0,8,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2115,        double b = -(a - pi2a + xa);,20,6,0,1,2,0,0,0,0,28,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2116,        b += pi2b - xb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2118,"        return sinQ(a, b);",0,0,0,1,2,1,6,0,0,6,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2131,        int idx = (int) ((xa * 8.0) + 0.5);,4,2,0,3,6,0,0,0,0,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2132,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,4,1,1,1,2,1,0,0,0,10,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2135,        final double sintA = SINE_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2136,        final double sintB = SINE_TABLE_B[idx];,2,0,1,1,2,1,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2137,        final double costA = COSINE_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2138,        final double costB = COSINE_TABLE_B[idx];,2,0,1,1,2,1,0,0,0,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2141,        double sinEpsA = epsilon;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2142,        double sinEpsB = polySine(epsilon);,4,1,0,1,2,0,4,0,0,9,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2143,        final double cosEpsA = 1.0;,2,0,0,0,0,1,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2144,        final double cosEpsB = polyCosine(epsilon);,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2147,        double temp = sinEpsA * HEX_40000000;,8,2,0,0,0,0,0,0,0,10,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2148,        double temp2 = (sinEpsA + temp) - temp;,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2149,        sinEpsB +=  sinEpsA - temp2;,6,1,0,0,0,0,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2150,        sinEpsA = temp2;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2175,        double a = 0;,4,0,0,0,0,0,0,0,0,4,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2176,        double b = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2179,        double t = sintA;,10,1,0,0,0,0,0,0,0,12,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2180,        double c = a + t;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2181,        double d = -(c - a - t);,8,1,0,1,2,0,0,0,0,10,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2182,        a = c;,8,3,0,0,0,0,0,0,0,13,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2183,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2185,        t = costA*sinEpsA;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2186,        c = a + t;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2187,        d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2188,        a = c;,0,0,0,0,0,0,4,0,0,4,6,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2189,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2191,        b = b + sintA*cosEpsB + costA*sinEpsB;,2,0,0,0,0,0,0,0,0,2,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2192,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,20,6,0,0,0,0,6,0,0,33,62,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2194,        double sina = a + b;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2195,        double sinb = -(sina - a - b);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2199,        a = b = c = d = 0.0;,8,0,0,0,0,0,0,0,0,12,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2201,        t = costA*cosEpsA;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2202,        c = a + t;,20,2,0,0,0,0,0,0,0,26,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2203,        d = -(c - a - t);,12,2,0,1,2,0,0,0,0,17,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2204,        a = c;,8,7,0,0,0,0,0,0,0,15,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2205,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2207,        t = -sintA*sinEpsA;,6,1,0,0,0,0,0,0,0,9,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2208,        c = a + t;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2209,        d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2210,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2211,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2213,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,6,1,0,0,0,0,0,0,0,8,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2214,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,0,0,0,1,2,0,0,0,0,3,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2216,        double cosa = a + b;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2217,        double cosb = -(cosa - a - b);,8,1,0,1,2,0,0,0,0,10,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2219,        if (cotanFlag) {,2,0,0,1,3,0,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2221,            tmp = cosa; cosa = sina; sina = tmp;,12,0,0,0,0,0,0,0,0,15,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2222,            tmp = cosb; cosb = sinb; sinb = tmp;,2,0,1,0,0,0,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2236,        double est = sina/cosa;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2239,        temp = est * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2240,        double esta = (est + temp) - temp;,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2241,        double estb =  est - esta;,6,1,0,0,0,0,0,0,0,7,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2243,        temp = cosa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2244,        double cosaa = (cosa + temp) - temp;,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2245,        double cosab =  cosa - cosaa;,6,1,0,0,0,0,0,0,0,7,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2248,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,22,9,0,1,2,0,0,0,0,31,114,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2249,        err += sinb/cosa;                     // Change in est due to sinb,0,0,0,0,0,0,0,0,0,0,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2250,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,12,3,0,0,0,0,4,0,0,22,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2252,        if (xb != 0.0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2255,            double xbadj = xb + est*est*xb;,18,3,0,0,0,1,0,0,0,23,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2256,            if (cotanFlag) {,4,0,0,1,3,0,0,0,0,4,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2257,                xbadj = -xbadj;,8,0,0,0,0,0,0,0,0,11,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2260,            err += xbadj;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2263,        return est+err;,6,1,0,0,0,1,0,0,0,7,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2280,        long inbits = Double.doubleToLongBits(x);,4,0,0,1,2,0,0,0,0,5,41,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2281,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,4,3,0,3,6,0,0,0,0,7,53,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2284,        inbits &= 0x000fffffffffffffL;,2,0,0,0,0,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2285,        inbits |= 0x0010000000000000L;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2288,        exponent++;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2289,        inbits <<= 11;,2,0,0,0,0,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2295,        int idx = exponent >> 6;,4,0,0,0,0,0,0,0,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2296,        int shift = exponent - (idx << 6);,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2298,        if (shift != 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2299,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,0,0,0,3,6,0,0,0,0,9,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2300,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,0,0,0,2,4,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2301,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,12,5,1,5,10,1,6,0,0,31,70,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2302,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,2,0,0,5,10,0,0,0,0,2,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2304,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,0,0,0,2,4,0,0,0,0,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2305,            shpiA = RECIP_2PI[idx];,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2306,            shpiB = RECIP_2PI[idx+1];,8,1,1,1,2,0,0,0,0,12,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2310,        long a = inbits >>> 32;,4,1,0,0,0,0,0,0,0,5,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2311,        long b = inbits & 0xffffffffL;,6,1,0,0,0,0,0,2,0,10,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2313,        long c = shpiA >>> 32;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2314,        long d = shpiA & 0xffffffffL;,6,1,0,0,0,0,0,0,0,8,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2316,        long ac = a * c;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2317,        long bd = b * d;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2318,        long bc = b * c;,8,2,0,0,0,1,4,0,0,15,16,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2319,        long ad = a * d;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2321,        long prodB = bd + (ad << 32);,6,2,0,1,2,0,0,0,0,8,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2322,        long prodA = ac + (ad >>> 32);,2,0,0,1,2,0,0,0,0,2,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2324,        boolean bita = (bd & 0x8000000000000000L) != 0;,2,0,0,1,2,0,6,0,0,8,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2325,        boolean bitb = (ad & 0x80000000L ) != 0;,0,0,0,1,2,0,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2326,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2329,        if ( (bita && bitb) ||,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2331,            prodA++;,28,7,0,0,0,1,4,0,0,43,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2334,        bita = (prodB & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2335,        bitb = (bc & 0x80000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2337,        prodB = prodB + (bc << 32);,6,2,0,1,2,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2338,        prodA = prodA + (bc >>> 32);,10,2,0,1,2,1,0,0,0,14,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2340,        bitsum = (prodB & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2343,        if ( (bita && bitb) ||,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2345,            prodA++;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2349,        c = shpiB >>> 32;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2350,        d = shpiB & 0xffffffffL;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2351,        ac = a * c;,14,3,0,0,0,0,0,0,0,18,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2352,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2353,        ad = a * d;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2356,        ac = ac + ((bc + ad) >>> 32);,0,0,0,2,4,0,0,0,0,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2358,        bita = (prodB & 0x8000000000000000L) != 0;,4,2,0,1,2,0,10,0,0,18,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2359,        bitb = (ac & 0x8000000000000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2360,        prodB += ac;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2361,        bitsum = (prodB & 0x8000000000000000L) != 0;,6,2,0,1,2,0,0,0,0,9,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2363,        if ( (bita && bitb) ||,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2365,            prodA++;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2369,        c = shpi0 >>> 32;,10,2,0,0,0,0,6,0,0,20,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2370,        d = shpi0 & 0xffffffffL;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2372,        bd = b * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2373,        bc = b * c;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2374,        ad = a * d;,8,2,0,0,0,0,0,0,0,11,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2376,        prodA += bd + ((bc + ad) << 32);,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2388,        int intPart = (int)(prodA >>> 62);,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2391,        prodA <<= 2;,4,1,0,0,0,0,0,0,0,6,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2392,        prodA |= prodB >>> 62;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2393,        prodB <<= 2;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2396,        a = prodA >>> 32;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2397,        b = prodA & 0xffffffffL;,6,1,0,0,0,0,0,0,0,8,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2399,        c = PI_O_4_BITS[0] >>> 32;,2,1,1,1,2,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2400,        d = PI_O_4_BITS[0] & 0xffffffffL;,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2402,        ac = a * c;,2,0,1,0,0,0,0,0,0,4,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2403,        bd = b * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2404,        bc = b * c;,12,3,0,0,0,2,0,0,0,19,11,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2405,        ad = a * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2407,        long prod2B = bd + (ad << 32);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2408,        long prod2A = ac + (ad >>> 32);,6,2,0,1,2,0,0,0,0,8,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2410,        bita = (bd & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2411,        bitb = (ad & 0x80000000L ) != 0;,8,1,0,1,2,0,0,0,0,9,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2412,        bitsum = (prod2B & 0x8000000000000000L) != 0;,6,1,0,1,2,0,0,0,0,8,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2415,        if ( (bita && bitb) ||,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2417,            prod2A++;,2,0,0,0,0,0,0,0,0,3,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2420,        bita = (prod2B & 0x8000000000000000L) != 0;,12,3,0,1,2,0,0,0,0,18,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2421,        bitb = (bc & 0x80000000L ) != 0;,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2423,        prod2B = prod2B + (bc << 32);,6,2,0,1,2,0,0,0,0,9,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2424,        prod2A = prod2A + (bc >>> 32);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2426,        bitsum = (prod2B & 0x8000000000000000L) != 0;,2,0,0,1,2,1,4,2,0,9,45,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2429,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2431,            prod2A++;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2435,        c = PI_O_4_BITS[1] >>> 32;,2,1,1,1,2,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2436,        d = PI_O_4_BITS[1] & 0xffffffffL;,2,1,1,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2437,        ac = a * c;,6,1,0,0,0,1,0,0,0,8,11,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2438,        bc = b * c;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2439,        ad = a * d;,10,1,0,0,0,0,0,0,0,12,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2442,        ac = ac + ((bc + ad) >>> 32);,0,0,0,2,4,0,0,0,0,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2444,        bita = (prod2B & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2445,        bitb = (ac & 0x8000000000000000L ) != 0;,0,0,0,1,2,0,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2446,        prod2B += ac;,4,0,0,0,0,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2447,        bitsum = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2449,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2451,            prod2A++;,4,0,0,0,0,0,0,0,0,5,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2455,        a = prodB >>> 32;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2456,        b = prodB & 0xffffffffL;,10,3,0,0,0,0,0,0,0,14,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2457,        c = PI_O_4_BITS[0] >>> 32;,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2458,        d = PI_O_4_BITS[0] & 0xffffffffL;,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2459,        ac = a * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2460,        bc = b * c;,4,1,0,0,0,0,0,0,0,5,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2461,        ad = a * d;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2464,        ac = ac + ((bc + ad) >>> 32);,18,4,0,2,4,0,0,2,0,25,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2466,        bita = (prod2B & 0x8000000000000000L) != 0;,4,1,0,1,2,0,0,0,0,5,43,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2467,        bitb = (ac & 0x8000000000000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2468,        prod2B += ac;,4,0,1,0,0,0,0,0,0,8,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2469,        bitsum = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2471,        if ( (bita && bitb) ||,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2473,            prod2A++;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2477,        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits,0,0,0,1,2,0,0,0,0,3,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2478,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits,0,0,0,4,8,0,0,0,0,12,102,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2480,        double sumA = tmpA + tmpB;,6,1,0,0,0,0,0,0,0,7,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2481,        double sumB = -(sumA - tmpA - tmpB);,8,1,0,1,2,0,0,0,0,10,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2484,        result[0] = intPart;,2,0,1,1,2,0,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2485,        result[1] = sumA * 2.0;,2,1,1,1,2,0,0,0,0,6,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2486,        result[2] = sumB * 2.0;,2,1,0,1,2,0,0,0,0,3,23,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2487,    },2,1,0,0,1,0,0,0,0,3,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2495,        boolean negative = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2496,        int quadrant = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2498,        double xb = 0.0;,6,2,0,0,0,0,0,0,0,9,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2501,        xa = x;,6,1,0,0,0,0,0,0,0,9,7,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2502,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2503,            negative = true;,8,3,1,0,0,0,0,0,0,14,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2504,            xa = -xa;,6,0,0,0,0,0,0,0,0,8,9,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2508,        if (xa == 0.0) {,6,1,0,1,3,0,0,0,0,8,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2509,            long bits = Double.doubleToLongBits(x);,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2510,            if (bits < 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2511,                return -0.0;,8,2,0,0,0,2,0,0,0,11,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2513,            return 0.0;,0,0,1,0,0,1,4,0,0,13,11,14,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2516,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2517,            return Double.NaN;,12,2,0,0,0,1,0,0,0,14,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2521,        if (xa > 3294198.0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2525,            double reduceResults[] = new double[3];,2,0,0,2,4,0,0,0,0,2,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2526,"            reducePayneHanek(xa, reduceResults);",0,0,0,1,2,0,6,0,0,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2527,            quadrant = ((int) reduceResults[0]) & 3;,6,2,1,3,6,0,0,0,0,11,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2528,            xa = reduceResults[1];,6,1,0,1,2,0,0,0,0,7,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2529,            xb = reduceResults[2];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2530,        } else if (xa > 1.5707963267948966) {,2,1,0,1,4,0,0,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2535,            int k = (int)(xa * 0.6366197723675814);,4,1,0,2,4,0,0,0,0,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2541,                double a = -k * 1.570796251296997;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2542,                remA = xa + a;,6,1,0,0,0,0,0,0,0,8,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2543,                remB = -(remA - xa - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2545,                a = -k * 7.549789948768648E-8;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2546,                double b = remA;,4,0,0,0,0,0,0,0,0,4,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2547,                remA = a + b;,8,1,0,0,0,0,0,0,0,10,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2548,                remB += -(remA - b - a);,10,1,0,1,2,1,2,0,0,16,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2550,                a = -k * 6.123233995736766E-17;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2551,                b = remA;,10,1,0,0,0,0,0,0,0,13,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2552,                remA = a + b;,8,1,0,0,0,0,0,2,0,12,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2553,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2555,                if (remA > 0.0),0,0,0,1,2,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2556,                    break;,8,1,0,0,0,0,0,0,0,9,6,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2561,                k--;,4,2,0,0,0,0,0,0,0,7,4,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2562,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2563,            quadrant = k & 3;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2564,            xa = remA;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2565,            xb = remB;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2568,        if (negative) {,12,4,0,1,3,0,12,0,0,29,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2569,            quadrant ^= 2;  // Flip bit 1,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2572,        switch (quadrant) {,2,0,0,1,3,0,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2574,"                return sinQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2576,"                return cosQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2578,"                return -sinQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2580,"                return -cosQ(xa, xb);",0,0,0,1,2,1,0,0,0,1,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2582,                return Double.NaN;,4,2,0,0,0,1,8,0,0,14,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2592,        int quadrant = 0;,6,0,0,0,0,0,0,0,0,6,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2595,        double xa = x;,4,0,0,0,0,0,0,0,0,4,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2596,        if (x < 0) {,6,1,0,1,3,1,0,0,0,8,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2597,            xa = -xa;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2600,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,4,0,1,3,0,2,0,0,16,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2601,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2605,        double xb = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2606,        if (xa > 3294198.0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2610,            double reduceResults[] = new double[3];,2,0,0,2,4,0,0,0,0,2,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2611,"            reducePayneHanek(xa, reduceResults);",0,0,0,1,2,0,6,0,0,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2612,            quadrant = ((int) reduceResults[0]) & 3;,0,0,0,3,6,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2613,            xa = reduceResults[1];,0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2614,            xb = reduceResults[2];,6,2,1,1,2,0,0,0,0,11,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2615,        } else if (xa > 1.5707963267948966) {,2,0,0,1,4,0,0,0,0,3,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2620,            int k = (int)(xa * 0.6366197723675814);,4,1,0,2,4,0,0,0,0,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2626,                double a = -k * 1.570796251296997;,4,1,0,0,0,0,0,0,0,6,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2627,                remA = xa + a;,2,0,0,0,0,0,0,0,0,3,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2628,                remB = -(remA - xa - a);,16,3,0,1,2,0,8,0,0,29,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2630,                a = -k * 7.549789948768648E-8;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2631,                double b = remA;,14,2,0,0,0,0,0,0,0,16,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2632,                remA = a + b;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2633,                remB += -(remA - b - a);,14,2,0,1,2,1,0,0,0,19,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2635,                a = -k * 6.123233995736766E-17;,4,1,0,0,0,0,0,0,0,7,31,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2636,                b = remA;,4,0,0,0,0,0,0,0,0,5,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2637,                remA = a + b;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2638,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2640,                if (remA > 0.0),2,1,0,1,2,0,0,0,0,3,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2641,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2646,                k--;,8,3,0,0,0,0,0,0,0,13,4,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2647,            },8,2,1,0,1,0,0,0,0,16,1,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2648,            quadrant = k & 3;,10,3,0,0,0,0,0,0,0,15,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2649,            xa = remA;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2650,            xb = remB;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2656,        switch (quadrant) {,2,0,0,1,3,0,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2658,"                return cosQ(xa, xb);",16,6,0,1,2,3,10,0,0,34,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2660,"                return -sinQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2662,"                return -cosQ(xa, xb);",4,0,0,1,2,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2664,"                return sinQ(xa, xb);",0,0,0,1,2,1,6,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2666,                return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2676,        boolean negative = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2677,        int quadrant = 0;,8,1,0,0,0,0,12,0,0,22,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2680,        double xa = x;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2681,        if (x < 0) {,2,0,0,1,3,0,6,0,0,9,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2682,            negative = true;,4,0,0,0,0,1,0,0,0,7,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2683,            xa = -xa;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2687,        if (xa == 0.0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2688,            long bits = Double.doubleToLongBits(x);,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2689,            if (bits < 0) {,10,2,0,1,3,0,0,0,0,13,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2690,                return -0.0;,8,0,0,0,0,1,2,0,0,11,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2692,            return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2695,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,0,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2696,            return Double.NaN;,8,1,0,0,0,1,0,0,0,9,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2700,        double xb = 0;,8,1,1,0,0,0,0,0,0,15,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2701,        if (xa > 3294198.0) {,6,2,0,1,3,0,8,0,0,16,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2705,            double reduceResults[] = new double[3];,0,0,0,2,4,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2706,"            reducePayneHanek(xa, reduceResults);",0,0,0,1,2,0,6,0,0,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2707,            quadrant = ((int) reduceResults[0]) & 3;,2,0,0,3,6,0,6,0,0,8,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2708,            xa = reduceResults[1];,0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2709,            xb = reduceResults[2];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2710,        } else if (xa > 1.5707963267948966) {,0,0,0,1,4,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2715,            int k = (int)(xa * 0.6366197723675814);,0,0,0,2,4,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2721,                double a = -k * 1.570796251296997;,8,1,0,0,0,0,0,0,0,11,34,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2722,                remA = xa + a;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2723,                remB = -(remA - xa - a);,8,2,0,1,2,1,0,0,0,11,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2725,                a = -k * 7.549789948768648E-8;,4,1,0,0,0,0,0,0,0,7,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2726,                double b = remA;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2727,                remA = a + b;,8,1,0,0,0,0,4,0,0,15,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2728,                remB += -(remA - b - a);,22,5,1,1,2,0,0,0,0,38,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2730,                a = -k * 6.123233995736766E-17;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2731,                b = remA;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2732,                remA = a + b;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2733,                remB += -(remA - b - a);,4,1,1,1,2,0,0,0,0,10,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2735,                if (remA > 0.0),4,1,0,1,2,0,0,0,0,6,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2736,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2741,                k--;,2,0,0,0,0,0,0,0,0,3,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2742,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2743,            quadrant = k & 3;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2744,            xa = remA;,6,0,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2745,            xb = remB;,6,0,0,0,0,1,0,0,0,8,10,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2748,        if (xa > 1.5) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2750,            final double pi2a = 1.5707963267948966;,0,0,0,0,0,0,0,0,0,0,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2751,            final double pi2b = 6.123233995736766E-17;,4,1,0,0,0,1,0,0,0,7,42,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2753,            final double a = pi2a - xa;,6,1,0,0,0,1,0,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2754,            double b = -(a - pi2a + xa);,14,3,0,1,2,0,0,0,0,19,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2755,            b += pi2b - xb;,4,0,0,0,0,0,0,2,0,6,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2757,            xa = a + b;,12,3,0,0,0,0,0,0,0,17,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2758,            xb = -(xa - a - b);,0,0,0,1,2,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2759,            quadrant ^= 1;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2760,            negative ^= true;,4,1,0,0,0,0,0,0,0,6,17,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2764,        if ((quadrant & 1) == 0) {,0,0,0,2,5,0,0,0,0,7,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2765,"            result = tanQ(xa, xb, false);",20,5,0,1,2,1,14,0,0,44,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2767,"            result = -tanQ(xa, xb, true);",0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2770,        if (negative) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2771,            result = -result;,10,2,0,0,0,0,0,0,0,16,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2774,        return result;,6,2,0,0,0,1,0,0,0,8,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2783,"        return atan(x, 0.0, false);",0,0,0,1,2,1,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2793,        boolean negate = false;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2796,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,0,0,0,1,3,1,0,0,0,5,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2797,"            return leftPlane ? copySign(Math.PI, xa) : xa;",8,0,0,1,2,1,4,0,0,12,46,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2800,        if (xa < 0) {,8,2,0,1,3,0,0,0,0,11,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2802,            xa = -xa;,6,0,0,0,0,0,10,4,0,22,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2803,            xb = -xb;,4,0,0,0,0,0,4,2,0,12,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2804,            negate = true;,2,0,0,0,0,0,0,0,0,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2807,        if (xa > 1.633123935319537E16) { // Very large input,8,2,0,1,3,0,0,0,0,11,52,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2808,            return (negate ^ leftPlane) ? (-Math.PI/2.0) : (Math.PI/2.0);,16,3,0,3,6,1,6,0,0,27,61,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2812,        if (xa < 1.0) {,16,2,0,1,3,0,4,0,0,22,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2813,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,0,0,0,4,8,0,0,0,0,12,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2815,            double temp = 1.0/xa;,4,1,0,0,0,0,0,0,0,5,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2816,            idx = (int) (-((-1.7168146928204136 * temp * temp + 8.0) * temp) + 13.07);,8,4,0,4,8,0,0,0,0,15,74,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2818,        double epsA = xa - TANGENT_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2819,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,6,2,1,2,4,0,0,0,0,13,50,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2820,        epsB += xb - TANGENT_TABLE_B[idx];,4,1,1,1,2,0,0,0,0,10,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2822,        double temp = epsA + epsB;,16,3,0,0,0,0,12,0,0,33,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2823,        epsB = -(temp - epsA - epsB);,16,2,0,1,2,0,0,0,0,21,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2824,        epsA = temp;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2827,        temp = xa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2828,        double ya = xa + temp - temp;,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2829,        double yb = xb + xa - ya;,8,2,0,0,0,0,0,0,0,10,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2830,        xa = ya;,0,0,0,0,0,0,6,0,0,6,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2831,        xb += yb;,4,0,0,0,0,0,0,0,0,5,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2834,        if (idx == 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2837,            double denom = 1.0 / (1.0 + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,6,5,1,5,10,0,0,0,0,19,87,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2839,            ya = epsA * denom;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2840,            yb = epsB * denom;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2841,        } else {,6,1,0,0,2,0,0,0,0,7,8,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2842,            double temp2 = xa * TANGENT_TABLE_A[idx];,4,1,1,1,2,0,0,0,0,9,41,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2843,            double za = 1.0 + temp2;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2844,            double zb = -(za - 1.0 - temp2);,10,3,0,1,2,0,0,0,0,14,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2845,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,8,2,0,2,4,1,0,0,0,11,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2846,            temp = za + temp2;,6,1,0,0,0,0,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2847,            zb += -(temp - za - temp2);,6,1,0,1,2,0,0,0,0,7,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2848,            za = temp;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2850,            zb += xb * TANGENT_TABLE_B[idx];,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2851,            ya = epsA / za;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2853,            temp = ya * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2854,            final double yaa = (ya + temp) - temp;,0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2855,            final double yab = ya - yaa;,10,2,1,0,0,2,0,0,0,17,28,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2857,            temp = za * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2858,            final double zaa = (za + temp) - temp;,8,2,0,1,2,1,0,0,0,11,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2859,            final double zab = za - zaa;,10,2,0,0,0,1,0,0,0,14,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2862,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,0,0,0,1,2,0,0,0,0,3,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2864,            yb += -epsA * zb / za / za;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2865,            yb += epsB / za;,6,1,0,0,0,0,6,0,0,14,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2869,        epsA = ya;,10,1,0,0,0,0,0,0,0,13,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2870,        epsB = yb;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2873,        double epsA2 = epsA*epsA;,8,2,0,0,0,1,0,0,0,11,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2884,        yb = 0.07490822288864472;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2885,        yb = yb * epsA2 + -0.09088450866185192;,0,0,0,0,0,0,0,0,0,0,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2886,        yb = yb * epsA2 + 0.11111095942313305;,6,2,0,0,0,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2887,        yb = yb * epsA2 + -0.1428571423679182;,6,2,0,0,0,0,0,0,0,10,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2888,        yb = yb * epsA2 + 0.19999999999923582;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2889,        yb = yb * epsA2 + -0.33333333333333287;,0,0,0,0,0,0,0,0,0,0,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2890,        yb = yb * epsA2 * epsA;,8,1,0,0,0,0,0,0,0,10,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2893,        ya = epsA;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2895,        temp = ya + yb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2896,        yb = -(temp - ya - yb);,8,1,0,1,2,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2897,        ya = temp;,8,1,0,0,0,0,0,0,0,10,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2900,        yb += epsB / (1.0 + epsA * epsA);,8,3,0,1,2,0,0,0,0,12,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2906,        double za = EIGHTHS[idx] + ya;,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2907,        double zb = -(za - EIGHTHS[idx] - ya);,0,0,0,2,4,0,0,0,0,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2908,        temp = za + yb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2909,        zb += -(temp - za - yb);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2910,        za = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2912,        result = za + zb;,6,1,0,0,0,0,0,0,0,8,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2913,        resultb = -(result - za - zb);,32,8,0,1,2,0,0,0,0,43,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2915,        if (leftPlane) {,6,0,0,1,3,0,0,0,0,8,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2917,            final double pia = 1.5707963267948966*2.0;,2,1,0,0,0,1,0,0,0,4,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2918,            final double pib = 6.123233995736766E-17*2.0;,4,1,0,0,0,1,0,0,0,6,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2920,            za = pia - result;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2921,            zb = -(za - pia + result);,20,3,1,1,2,1,0,0,0,28,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2922,            zb += pib - resultb;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2924,            result = za + zb;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2925,            resultb = -(result - za - zb);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2929,        if (negate ^ leftPlane) {,0,0,0,1,3,0,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2930,            result = -result;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2933,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2943,        if (x !=x || y != y) {,8,3,0,1,3,0,0,0,0,11,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2944,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2947,        if (y == 0.0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2948,            double result = x*y;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2949,            double invx = 1.0/x;,4,1,0,0,0,0,0,0,0,5,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2950,            double invy = 1.0/y;,4,1,0,0,0,0,0,0,0,5,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2952,            if (invx == 0.0) { // X is infinite,0,0,0,1,3,0,0,0,0,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2953,                if (x > 0) {,2,1,0,1,3,0,0,0,0,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2954,                    return y; // return +/- 0.0,0,0,0,0,0,2,0,0,0,2,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2956,"                    return copySign(Math.PI, y);",4,0,0,1,2,1,4,0,0,8,28,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2960,            if (x < 0.0 || invx < 0.0) {,4,3,0,1,3,0,0,0,0,7,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2961,                if (y < 0.0 || invy < 0.0) {,4,3,0,1,3,0,0,0,0,7,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2962,                    return -Math.PI;,4,0,0,0,0,1,6,0,0,11,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2964,                    return Math.PI;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2967,                return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2973,        if (y == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2974,            if (x == Double.POSITIVE_INFINITY) {,8,7,0,1,3,0,0,0,0,15,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2975,                return Math.PI/4.0;,22,5,1,0,0,1,12,0,0,45,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2978,            if (x == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2979,                return Math.PI*3.0/4.0;,0,0,0,0,0,1,0,0,0,1,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2982,            return Math.PI/2.0;,4,1,0,0,0,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2985,        if (y == Double.NEGATIVE_INFINITY) {,6,2,1,1,3,0,0,0,0,13,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2986,            if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2987,                return -Math.PI/4.0;,4,1,0,0,0,1,4,0,0,10,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2990,            if (x == Double.NEGATIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2991,                return -Math.PI*3.0/4.0;,4,2,0,0,0,1,0,0,0,6,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2994,            return -Math.PI/2.0;,0,0,0,0,0,1,0,0,0,1,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2997,        if (x == Double.POSITIVE_INFINITY) {,8,1,0,1,3,0,0,0,0,9,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2998,            if (y > 0.0 || 1/y > 0.0) {,4,4,0,1,3,0,0,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2999,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3002,            if (y < 0.0 || 1/y < 0.0) {,4,4,0,1,3,0,0,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3003,                return -0.0;,4,1,0,0,0,1,18,0,0,25,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3007,        if (x == Double.NEGATIVE_INFINITY),6,1,0,1,2,0,0,0,0,7,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3009,            if (y > 0.0 || 1/y > 0.0) {,6,4,1,1,3,0,0,0,0,15,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3010,                return Math.PI;,2,0,0,0,0,1,0,0,0,2,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3013,            if (y < 0.0 || 1/y < 0.0) {,4,1,0,1,3,0,0,0,0,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3014,                return -Math.PI;,4,0,0,0,0,1,0,0,0,5,16,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3020,        if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3021,            if (y > 0.0 || 1/y > 0.0) {,0,0,0,1,3,0,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3022,                return Math.PI/2.0;,6,1,0,0,0,2,0,0,0,8,19,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3025,            if (y < 0.0 || 1/y < 0.0) {,4,4,0,1,3,0,0,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3026,                return -Math.PI/2.0;,0,0,0,0,0,1,0,0,0,1,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3031,        final double r = y/x;,6,1,0,0,0,1,0,0,0,8,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3032,        if (Double.isInfinite(r)) { // bypass calculations that can create NaN,0,0,0,2,5,0,0,0,0,7,70,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3033,"            return atan(r, 0, x < 0);",2,1,0,1,2,1,4,0,0,7,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3036,        double ra = doubleHighPart(r);,2,0,0,1,2,0,4,0,0,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3037,        double rb = r - ra;,2,0,0,0,0,1,2,0,0,5,19,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3040,        final double xa = doubleHighPart(x);,2,0,0,1,2,1,4,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3041,        final double xb = x - xa;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3043,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,0,0,0,1,2,0,0,0,0,3,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3045,        double temp = ra + rb;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3046,        rb = -(temp - ra - rb);,8,1,0,1,2,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3047,        ra = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3049,        if (ra == 0) { // Fix up the sign so atan works correctly,0,0,0,1,3,0,0,0,0,4,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3050,"            ra = copySign(0.0, y);",0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3054,"        double result = atan(ra, rb, x < 0);",4,1,0,1,2,0,6,0,0,11,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3056,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3064,      if (x != x) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3065,          return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3068,      if (x > 1.0 || x < -1.0) {,12,4,0,1,3,0,0,0,0,18,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3069,          return Double.NaN;,8,1,0,0,0,1,0,0,0,9,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3072,      if (x == 1.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3073,          return Math.PI/2.0;,4,1,0,0,0,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3076,      if (x == -1.0) {,2,1,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3077,          return -Math.PI/2.0;,4,1,0,0,0,1,0,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3080,      if (x == 0.0) { // Matches +/- 0.0; return correct sign,0,0,0,1,3,1,8,0,0,8,55,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3081,          return x;,2,0,0,0,0,1,6,0,0,8,9,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3087,      double temp = x * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3088,      final double xa = x + temp - temp;,12,3,0,0,0,1,0,0,0,16,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3089,      final double xb = x - xa;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3092,      double ya = xa*xa;,6,1,0,0,0,0,0,0,0,7,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3093,      double yb = xa*xb*2.0 + xb*xb;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3096,      ya = -ya;,2,0,1,0,0,1,0,0,0,7,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3097,      yb = -yb;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3099,      double za = 1.0 + ya;,4,1,0,0,0,0,0,0,0,5,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3100,      double zb = -(za - 1.0 - ya);,8,1,1,1,2,0,0,0,0,12,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3102,      temp = za + yb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3103,      zb += -(temp - za - yb);,8,1,0,1,2,0,0,2,0,13,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3104,      za = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3108,      y = sqrt(za);,4,0,0,1,2,0,4,0,0,9,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3109,      temp = y * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3110,      ya = y + temp - temp;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3111,      yb = y - ya;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3114,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0,0,0,2,4,0,0,0,0,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3117,      double dx = zb / (2.0*y);,6,2,0,1,2,0,0,0,0,8,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3120,      double r = x/y;,6,1,0,0,0,0,0,0,0,7,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3121,      temp = r * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3122,      double ra = r + temp - temp;,12,5,0,0,0,0,0,0,0,18,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3123,      double rb = r - ra;,6,1,0,0,0,0,0,0,0,7,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3125,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,0,0,0,1,2,0,0,0,0,3,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3126,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,10,3,0,0,0,0,0,0,0,15,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3128,      temp = ra + rb;,8,2,0,0,0,0,0,0,0,11,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3129,      rb = -(temp - ra - rb);,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3130,      ra = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3132,"      return atan(ra, rb, false);",8,1,0,1,2,1,6,0,0,17,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3140,      if (x != x) {,6,1,0,1,3,0,0,0,0,8,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3141,          return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3144,      if (x > 1.0 || x < -1.0) {,4,3,0,1,3,0,4,0,0,12,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3145,          return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3148,      if (x == -1.0) {,2,1,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3149,          return Math.PI;,4,0,0,0,0,1,0,0,0,4,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3152,      if (x == 1.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3153,          return 0.0;,6,1,0,0,0,1,0,0,0,7,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3156,      if (x == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3157,          return Math.PI/2.0;,0,0,0,0,0,1,0,0,0,1,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3163,      double temp = x * HEX_40000000;,12,2,0,0,0,0,0,0,0,14,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3164,      final double xa = x + temp - temp;,8,2,0,0,0,1,0,0,0,11,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3165,      final double xb = x - xa;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3168,      double ya = xa*xa;,6,1,0,0,0,0,0,0,0,7,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3169,      double yb = xa*xb*2.0 + xb*xb;,10,3,0,0,0,0,0,0,0,13,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3172,      ya = -ya;,4,0,0,0,0,0,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3173,      yb = -yb;,4,0,0,0,0,0,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3175,      double za = 1.0 + ya;,8,1,0,0,0,0,0,0,0,10,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3176,      double zb = -(za - 1.0 - ya);,6,1,0,1,2,0,0,0,0,8,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3178,      temp = za + yb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3179,      zb += -(temp - za - yb);,18,2,0,1,2,0,0,0,0,23,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3180,      za = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3183,      double y = sqrt(za);,2,0,0,1,2,0,12,0,0,14,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3184,      temp = y * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3185,      ya = y + temp - temp;,8,2,0,0,0,0,0,0,0,11,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3186,      yb = y - ya;,6,1,0,0,0,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3189,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0,0,0,2,4,0,0,0,0,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3192,      yb += zb / (2.0*y);,6,2,0,1,2,0,0,0,0,9,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3193,      y = ya+yb;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3194,      yb = -(y - ya - yb);,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3197,      double r = y/x;,10,2,0,0,0,0,0,0,0,12,15,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3200,      if (Double.isInfinite(r)) { // x is effectively zero,2,0,0,2,5,0,10,0,0,12,52,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3201,          return Math.PI/2; // so return the appropriate value,4,1,0,0,0,2,0,0,0,5,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3204,      double ra = doubleHighPart(r);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3205,      double rb = r - ra;,8,1,0,0,0,0,4,0,0,15,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3207,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,24,9,0,1,2,1,4,2,0,41,83,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3208,      rb += yb / x;  // Add in effect additional bits of sqrt.,6,1,0,0,0,0,0,0,0,8,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3210,      temp = ra + rb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3211,      rb = -(temp - ra - rb);,18,2,1,1,2,0,4,0,0,34,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3212,      ra = temp;,4,0,0,0,0,2,6,0,0,12,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3214,"      return atan(ra, rb, x<0);",6,1,0,1,2,1,6,0,0,14,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3223,      long inbits = Double.doubleToLongBits(x);,4,0,0,1,2,0,6,0,0,11,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3224,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0,0,0,3,6,0,0,0,0,9,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3225,      boolean subnormal = false;,0,0,0,0,0,0,0,0,0,0,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3227,      if (exponent == -1023) {,10,2,0,1,3,0,0,0,0,14,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3228,          if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3229,              return x;,2,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3233,          subnormal = true;,10,1,0,0,0,0,0,0,0,14,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3234,          x *= 1.8014398509481984E16;  // 2^54,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3235,          inbits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,9,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3236,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,4,3,0,3,6,0,0,0,0,8,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3239,      if (exponent == 1024) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3241,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3245,      int exp3 = exponent / 3;,4,1,0,0,0,0,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3248,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,10,4,0,1,3,0,4,0,0,18,68,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3252,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,0,0,0,2,4,0,0,0,0,6,98,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3255,      double est = -0.010714690733195933;,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3256,      est = est * mant + 0.0875862700108075;,6,2,0,0,0,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3257,      est = est * mant + -0.3058015757857271;,0,0,0,0,0,0,0,0,0,0,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3258,      est = est * mant + 0.7249995199969751;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3259,      est = est * mant + 0.5039018405998233;,18,6,0,0,0,0,0,0,0,26,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3261,      est *= CBRTTWO[exponent % 3 + 2];,4,2,1,1,2,0,0,0,0,9,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3266,      final double xs = x / (p2*p2*p2);,10,2,0,1,2,1,0,0,0,13,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3267,      est += (xs - est*est*est) / (3*est*est);,0,0,0,2,4,0,0,0,0,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3268,      est += (xs - est*est*est) / (3*est*est);,0,0,0,2,4,0,0,0,0,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3271,      double temp = est * HEX_40000000;,10,2,0,0,0,0,0,0,0,12,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3272,      double ya = est + temp - temp;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3273,      double yb = est - ya;,6,1,0,0,0,0,0,0,0,7,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3275,      double za = ya * ya;,0,0,0,0,0,0,2,0,0,2,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3276,      double zb = ya * yb * 2.0 + yb * yb;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3277,      temp = za * HEX_40000000;,12,2,0,0,0,0,0,0,0,16,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3278,      double temp2 = za + temp - temp;,0,0,0,0,0,0,0,0,0,0,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3279,      zb += za - temp2;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3280,      za = temp2;,4,0,0,0,0,0,0,0,0,5,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3282,      zb = za * yb + ya * zb + zb * yb;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3283,      za = za * ya;,6,1,0,0,0,0,0,0,0,8,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3285,      double na = xs - za;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3286,      double nb = -(na - xs + za);,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3287,      nb -= zb;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3289,      est += (na+nb)/(3*est*est);,20,5,1,2,4,0,6,2,0,36,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3292,      est *= p2;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3294,      if (subnormal) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3295,          est *= 3.814697265625E-6;  // 2^-18,2,0,0,0,0,0,6,0,0,9,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3298,      return est;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3308,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,2,0,0,2,5,1,0,0,0,3,79,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3309,            return x;,6,0,0,0,0,1,18,0,0,26,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3313,        final double facta = 0.01745329052209854;,0,0,0,0,0,0,0,0,0,0,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3314,        final double factb = 1.997844754509471E-9;,8,0,0,0,0,1,0,0,0,9,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3316,        double xa = doubleHighPart(x);,2,0,0,1,2,0,4,0,0,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3317,        double xb = x - xa;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3319,        double result = xb * factb + xb * facta + xa * factb + xa * facta;,18,7,0,0,0,0,6,0,0,31,66,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3320,        if (result == 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3321,            result = result * x; // ensure correct sign if calculation underflows,6,1,0,0,0,0,0,0,0,8,69,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3323,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3333,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0,0,0,2,5,1,0,0,0,8,79,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3334,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3338,        final double facta = 57.2957763671875;,2,0,0,0,0,1,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3339,        final double factb = 3.145894820876798E-6;,8,0,0,0,0,2,0,0,0,10,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3341,        double xa = doubleHighPart(x);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3342,        double xb = x - xa;,10,4,0,0,0,0,2,0,0,16,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3344,        return xb * factb + xb * facta + xa * factb + xa * facta;,16,7,0,0,0,1,0,0,0,23,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3353,        return (x < 0) ? -x : x;,6,1,0,1,2,1,0,0,0,8,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3362,        return (x < 0l) ? -x : x;,0,0,0,1,2,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3371,        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0,8,2,0,2,4,1,0,0,0,11,64,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3380,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,8,2,0,2,4,1,0,0,0,11,61,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3389,        if (Double.isInfinite(x)) {,0,0,0,2,5,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3390,            return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3392,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,2,2,0,3,6,1,12,0,0,16,72,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3401,        if (Float.isInfinite(x)) {,0,0,0,2,5,0,0,0,0,7,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3402,            return Float.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3404,        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));,2,2,0,3,6,1,12,0,0,16,66,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3416,        if ((n > -1023) && (n < 1024)) {,0,0,0,3,7,0,0,0,0,10,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3417,            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);,4,3,0,4,8,1,4,0,0,11,62,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3421,        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {,0,0,0,4,9,0,0,0,0,13,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3422,            return d;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3424,        if (n < -2098) {,2,1,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3425,            return (d > 0) ? 0.0 : -0.0;,0,0,0,1,2,1,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3427,        if (n > 2097) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3428,            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,10,2,0,1,2,2,0,0,0,13,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3432,        final long bits = Double.doubleToLongBits(d);,2,0,0,1,2,1,6,0,0,9,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3433,        final long sign = bits & 0x8000000000000000L;,0,0,0,0,0,0,0,0,0,0,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3434,        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;,4,2,0,3,6,0,0,0,0,6,48,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3435,        long mantissa   = bits & 0x000fffffffffffffL;,8,4,0,0,0,0,0,0,0,12,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3438,        int scaledExponent = exponent + n;,6,1,0,0,0,0,0,0,0,7,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3440,        if (n < 0) {,4,1,0,1,3,1,0,0,0,6,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3442,            if (scaledExponent > 0) {,6,1,0,1,3,0,0,0,0,7,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3444,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,14,4,0,4,8,1,4,0,0,22,82,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3445,            } else if (scaledExponent > -53) {,2,1,0,1,4,0,0,0,0,4,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3449,                mantissa = mantissa | (1L << 52);,4,2,0,1,2,0,0,0,0,7,33,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3452,                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));,0,0,0,2,4,0,0,0,0,6,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3453,                mantissa = mantissa >>> (1 - scaledExponent);,10,4,0,1,2,0,0,0,0,15,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3454,                if (mostSignificantLostBit != 0) {,2,1,0,1,3,0,0,0,0,3,34,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3456,                    mantissa++;,2,0,0,0,0,0,0,0,0,3,11,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3458,                return Double.longBitsToDouble(sign | mantissa);,4,1,0,1,2,1,4,0,0,9,48,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3462,                return (sign == 0L) ? 0.0 : -0.0;,0,0,0,1,2,1,0,0,0,4,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3466,            if (exponent == 0) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3469,                while ((mantissa >>> 52) != 1) {,2,2,0,2,5,0,0,0,0,4,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3470,                    mantissa = mantissa << 1;,4,1,0,0,0,0,0,0,0,6,25,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3471,                    --scaledExponent;,2,0,0,0,0,0,2,2,0,6,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3473,                ++scaledExponent;,12,1,0,0,0,0,0,0,0,15,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3474,                mantissa = mantissa & 0x000fffffffffffffL;,0,0,0,0,0,0,0,0,0,0,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3476,                if (scaledExponent < 2047) {,2,1,0,1,3,0,0,0,0,3,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3477,                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,8,2,0,4,8,1,4,0,0,14,82,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3479,                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,10,1,0,1,2,1,0,0,0,11,74,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3482,            } else if (scaledExponent < 2047) {,10,2,0,1,4,1,0,8,0,21,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3483,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,6,2,0,4,8,1,4,0,0,12,82,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3485,                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0,0,0,1,2,1,0,0,0,4,74,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3500,        if ((n > -127) && (n < 128)) {,8,3,0,3,7,0,0,0,0,13,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3501,            return f * Float.intBitsToFloat((n + 127) << 23);,4,3,0,2,4,1,4,0,0,11,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3505,        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {,2,2,0,4,9,0,12,0,0,16,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3506,            return f;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3508,        if (n < -277) {,4,1,0,1,3,0,0,0,0,6,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3509,            return (f > 0) ? 0.0f : -0.0f;,10,2,0,1,2,1,0,0,0,14,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3511,        if (n > 276) {,4,2,0,1,3,0,0,0,0,6,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3512,            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,10,1,0,1,2,1,0,0,0,11,67,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3516,        final int bits = Float.floatToIntBits(f);,2,0,0,1,2,1,6,0,0,9,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3517,        final int sign = bits & 0x80000000;,4,1,0,0,0,1,0,0,0,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3518,        int  exponent  = (bits >>> 23) & 0xff;,4,2,0,1,2,0,0,0,0,6,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3519,        int mantissa   = bits & 0x007fffff;,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3522,        int scaledExponent = exponent + n;,12,2,0,0,0,0,0,0,0,15,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3524,        if (n < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3526,            if (scaledExponent > 0) {,2,1,0,1,3,0,0,0,0,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3528,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0,0,0,2,4,1,0,0,0,7,70,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3529,            } else if (scaledExponent > -24) {,12,2,0,1,4,0,0,0,0,17,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3533,                mantissa = mantissa | (1 << 23);,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3536,                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));,6,2,0,2,4,1,0,0,0,10,71,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3537,                mantissa = mantissa >>> (1 - scaledExponent);,6,2,0,1,2,0,0,0,0,9,45,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3538,                if (mostSignificantLostBit != 0) {,0,0,0,1,3,0,0,0,0,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3540,                    mantissa++;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3542,                return Float.intBitsToFloat(sign | mantissa);,4,1,0,1,2,1,4,0,0,9,45,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3546,                return (sign == 0) ? 0.0f : -0.0f;,4,1,0,1,2,2,2,0,0,9,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3550,            if (exponent == 0) {,2,1,0,1,3,0,0,0,0,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3553,                while ((mantissa >>> 23) != 1) {,4,3,0,2,5,0,0,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3554,                    mantissa = mantissa << 1;,2,0,0,0,0,1,2,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3555,                    --scaledExponent;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3557,                ++scaledExponent;,8,3,0,0,0,1,4,0,0,16,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3558,                mantissa = mantissa & 0x007fffff;,4,1,0,0,0,0,0,0,0,6,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3560,                if (scaledExponent < 255) {,2,1,0,1,3,0,0,0,0,3,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3561,                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,6,2,0,2,4,1,4,0,0,12,70,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3563,                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,10,3,0,1,2,1,0,0,0,13,71,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3566,            } else if (scaledExponent < 255) {,6,1,0,1,4,0,0,2,0,9,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3567,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,6,2,0,2,4,1,4,0,0,12,70,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3569,                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,16,2,0,1,2,2,0,0,0,19,71,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3609,        if (Double.isNaN(d) || Double.isNaN(direction)) {,0,0,0,3,7,0,0,0,0,10,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3610,            return Double.NaN;,12,2,0,0,0,1,0,0,0,16,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3611,        } else if (d == direction) {,0,0,0,1,4,0,0,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3612,            return direction;,2,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3613,        } else if (Double.isInfinite(d)) {,0,0,0,2,6,0,6,0,0,6,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3614,            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;,0,0,0,1,2,1,0,0,0,4,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3615,        } else if (d == 0) {,2,1,0,1,4,0,0,0,0,3,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3616,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,12,2,1,1,2,1,0,0,0,18,62,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3621,        final long bits = Double.doubleToLongBits(d);,2,0,0,1,2,1,6,0,0,9,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3622,        final long sign = bits & 0x8000000000000000L;,6,3,0,0,0,1,12,0,0,22,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3623,        if ((direction < d) ^ (sign == 0L)) {,6,3,0,3,7,0,0,0,0,9,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3624,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));,8,4,1,3,6,1,4,0,0,20,74,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3626,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));,6,3,0,3,6,1,4,0,0,13,74,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3665,        if (Double.isNaN(f) || Double.isNaN(direction)) {,0,1,0,3,7,0,12,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3666,            return Float.NaN;,12,4,0,0,0,1,8,2,0,26,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3667,        } else if (f == direction) {,0,0,0,1,4,0,0,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3668,            return (float) direction;,2,0,0,1,2,1,0,0,0,2,25,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3669,        } else if (Float.isInfinite(f)) {,0,0,0,2,6,0,6,0,0,6,33,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3670,            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;,12,1,0,1,2,1,6,0,0,21,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3671,        } else if (f == 0f) {,2,1,0,1,4,0,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3672,            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;,10,1,0,1,2,1,0,0,0,12,60,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3677,        final int bits = Float.floatToIntBits(f);,2,0,0,1,2,1,6,0,0,9,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3678,        final int sign = bits & 0x80000000;,6,1,0,0,0,2,4,2,0,15,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3679,        if ((direction < f) ^ (sign == 0)) {,6,3,0,3,7,0,0,0,0,9,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3680,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));,6,4,0,3,6,1,4,0,0,15,62,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3682,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));,12,4,0,3,6,1,4,0,0,20,62,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3694,        if (x != x) { // NaN,6,1,0,1,3,0,0,0,0,7,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3695,            return x;,2,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3698,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,0,0,0,1,3,0,0,0,0,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3699,            return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3702,        y = (long) x;,2,0,0,1,2,0,6,0,0,8,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3703,        if (x < 0 && y != x) {,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3704,            y--;,2,0,0,0,0,0,0,0,0,3,4,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3707,        if (y == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3708,            return x*y;,4,3,0,0,0,1,4,0,0,11,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3711,        return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3721,        if (x != x) { // NaN,8,1,0,1,3,0,0,0,0,9,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3722,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3725,        y = floor(x);,10,3,0,1,2,0,8,0,0,22,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3726,        if (y == x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3727,            return y;,8,2,0,0,0,1,4,0,0,14,9,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3730,        y += 1.0;,8,1,1,0,0,1,0,0,0,12,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3732,        if (y == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3733,            return x*y;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3736,        return y;,4,1,0,0,0,1,0,0,0,5,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3744,        double y = floor(x);,0,0,0,1,2,0,0,0,0,1,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3745,        double d = x - y;,6,1,0,0,0,0,0,0,0,7,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3747,        if (d > 0.5) {,4,1,0,1,3,0,0,0,0,5,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3748,            if (y == -1.0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3749,                return -0.0; // Preserve sign of operand,8,3,1,0,0,1,0,0,0,15,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3751,            return y+1.0;,4,2,0,0,0,1,0,0,0,6,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3753,        if (d < 0.5) {,4,1,0,1,3,0,0,2,0,7,14,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3754,            return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3758,        long z = (long) y;,4,0,0,1,2,0,0,0,0,4,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3759,        return (z & 1) == 0 ? y : y + 1.0;,0,0,0,1,2,1,0,0,0,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3767,        return (long) floor(x + 0.5);,0,0,0,2,4,1,0,0,0,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3775,        return (int) floor(x + 0.5f);,0,0,0,2,4,1,0,0,0,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3784,        return (a <= b) ? a : b;,8,1,0,1,2,1,0,0,0,9,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3793,        return (a <= b) ? a : b;,8,1,0,1,2,1,0,0,0,9,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3802,        if (a > b) {,8,2,0,1,3,0,16,0,0,26,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3803,            return b;,8,1,0,0,0,1,0,0,0,10,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3805,        if (a < b) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3806,            return a;,0,0,1,0,0,1,4,0,0,13,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3809,        if (a != b) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3810,            return Float.NaN;,4,0,0,0,0,1,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3814,        int bits = Float.floatToRawIntBits(a);,2,0,0,1,2,0,6,0,0,8,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3815,        if (bits == 0x80000000) {,0,0,0,1,3,0,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3816,            return a;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3818,        return b;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3827,        if (a > b) {,14,2,0,1,3,0,0,0,0,16,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3828,            return b;,8,1,0,0,0,1,0,0,0,10,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3830,        if (a < b) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3831,            return a;,0,0,0,0,0,1,0,2,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3834,        if (a != b) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3835,            return Double.NaN;,8,1,0,0,0,1,0,0,0,11,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3839,        long bits = Double.doubleToRawLongBits(a);,0,0,0,1,2,0,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3840,        if (bits == 0x8000000000000000L) {,8,1,0,1,3,0,0,0,0,10,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3841,            return a;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3843,        return b;,14,4,0,0,0,3,8,0,0,28,9,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3852,        return (a <= b) ? b : a;,8,1,0,1,2,1,0,0,0,9,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3861,        return (a <= b) ? b : a;,0,0,0,1,2,1,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3870,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3871,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3873,        if (a < b) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3874,            return b;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3877,        if (a != b) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3878,            return Float.NaN;,4,0,0,0,0,1,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3882,        int bits = Float.floatToRawIntBits(a);,2,0,0,1,2,0,6,0,0,8,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3883,        if (bits == 0x80000000) {,2,1,0,1,3,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3884,            return b;,12,2,0,0,0,1,8,2,0,25,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3886,        return a;,2,0,0,0,0,1,0,2,0,4,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3895,        if (a > b) {,6,1,0,1,3,0,0,0,0,7,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3896,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3898,        if (a < b) {,10,2,0,1,3,0,0,0,0,13,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3899,            return b;,6,1,0,0,0,1,0,0,0,7,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3902,        if (a != b) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3903,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3907,        long bits = Double.doubleToRawLongBits(a);,0,0,0,1,2,0,2,0,0,2,42,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3908,        if (bits == 0x8000000000000000L) {,0,0,0,1,3,0,0,0,0,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3909,            return b;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3911,        return a;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3929,        if (Double.isInfinite(x) || Double.isInfinite(y)) {,10,1,0,3,7,0,0,0,0,12,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3930,            return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,6,0,0,10,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3931,        } else if (Double.isNaN(x) || Double.isNaN(y)) {,0,0,0,3,8,0,0,0,0,11,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3932,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3935,            final int expX = getExponent(x);,2,0,0,1,2,0,4,4,0,11,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3936,            final int expY = getExponent(y);,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3937,            if (expX > expY + 27) {,4,2,0,1,3,0,0,0,0,6,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3939,                return abs(x);,4,4,0,1,2,1,0,0,0,8,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3940,            } else if (expY > expX + 27) {,4,0,0,1,4,0,0,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3942,                return abs(y);,0,0,0,1,2,1,4,0,0,4,14,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3946,                final int middleExp = (expX + expY) / 2;,12,4,0,1,2,1,4,0,0,21,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3949,"                final double scaledX = scalb(x, -middleExp);",10,1,0,1,2,0,0,0,0,12,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3950,"                final double scaledY = scalb(y, -middleExp);",4,0,0,1,2,1,4,0,0,10,44,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3953,                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);,0,0,0,1,2,0,0,0,0,3,67,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3956,"                return scalb(scaledH, middleExp);",0,0,0,1,2,1,6,0,0,6,33,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3984,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation",6,2,0,1,2,2,10,0,0,20,90,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3996,        long m = Double.doubleToLongBits(magnitude);,0,0,0,1,2,0,0,0,0,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3997,        long s = Double.doubleToLongBits(sign);,2,0,0,1,2,0,6,0,0,8,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3998,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,10,7,0,3,7,1,4,0,0,22,69,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3999,            return magnitude;,0,0,0,0,0,1,0,0,0,1,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,4001,        return -magnitude; // flip sign,0,0,0,0,0,1,0,0,0,1,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,4013,        int m = Float.floatToIntBits(magnitude);,2,0,0,1,2,0,6,0,0,8,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,4014,        int s = Float.floatToIntBits(sign);,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,4015,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,2,0,0,3,7,1,6,0,0,9,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,4016,            return magnitude;,4,1,0,0,0,1,6,0,0,11,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,4018,        return -magnitude; // flip sign,0,0,0,0,0,1,0,0,0,1,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,4031,        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;,2,0,0,4,8,1,0,0,0,2,66,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,4044,        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;,0,3,1,3,6,1,8,0,0,24,55,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2197,"            = new Comparator<Pair<Double, double[]>>() {",0,0,0,2,5,0,0,6,0,6,44,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2201,                switch (dir) {,2,0,0,1,3,0,0,0,0,2,14,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2203,                    val = o1.getKey().compareTo(o2.getKey());,2,0,0,3,6,0,10,0,0,13,41,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2204,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2206,                    val = o2.getKey().compareTo(o1.getKey());,2,0,0,3,6,0,10,0,0,13,41,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2207,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2210,                    throw new IllegalArgumentException();,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2212,                return val;,4,1,0,0,0,1,0,0,0,5,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,62,        int[] centroid = new int[getPoint().length];,10,1,0,3,6,1,2,0,0,14,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,63,        for (EuclideanIntegerPoint p : points) {,4,0,0,1,3,0,0,2,0,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,64,            for (int i = 0; i < centroid.length; i++) {,10,1,0,1,3,0,0,0,0,12,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,65,                centroid[i] += p.getPoint()[i];,0,0,1,3,6,0,4,0,0,11,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,67,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,68,        for (int i = 0; i < centroid.length; i++) {,10,1,0,1,3,0,0,0,0,12,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,69,            centroid[i] /= points.size();,0,0,1,2,4,0,4,0,0,9,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,71,        return new EuclideanIntegerPoint(centroid);,2,0,0,1,2,1,0,2,0,4,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,78,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,82,            return false;,2,1,0,0,0,1,4,0,0,7,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,89,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,95,        int hashCode = 0;,4,0,0,0,0,0,0,0,0,4,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,96,        for (Integer i : point) {,4,0,0,1,3,0,0,2,0,6,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,97,            hashCode += i.hashCode() * 13 + 7;,2,2,0,1,2,0,4,0,0,9,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,99,        return hashCode;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,108,"        final StringBuilder buff = new StringBuilder(""("");",8,0,0,1,3,0,0,0,0,8,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,109,        final int[] coordinates = getPoint();,10,1,0,2,4,1,2,0,0,15,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,110,        for (int i = 0; i < coordinates.length; i++) {,10,1,0,1,3,0,0,0,0,12,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,111,            buff.append(coordinates[i]);,0,0,0,2,4,0,0,0,0,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,112,            if (i < coordinates.length - 1) {,10,4,0,1,3,0,0,0,0,14,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,113,"                buff.append("","");",0,0,0,1,2,0,4,0,0,5,17,9,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,116,"        buff.append("")"");",0,0,0,1,3,0,4,0,0,5,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,117,        return buff.toString();,0,0,0,1,2,1,8,0,0,8,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,30,"public class EuclideanIntegerPoint implements Clusterable<EuclideanIntegerPoint>, Serializable {",0,0,0,0,1,0,0,0,0,1,96,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,101,            boolean clusteringChanged = false;,10,1,0,0,0,0,0,0,0,13,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,102,            List<Cluster<T>> newClusters = new ArrayList<Cluster<T>>();,0,0,0,1,2,0,0,0,0,1,59,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,103,            for (final Cluster<T> cluster : clusters) {,4,0,0,1,3,1,0,4,0,9,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,105,                if (cluster.getPoints().isEmpty()) {,0,0,0,3,7,0,6,0,0,6,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,106,                    switch (emptyStrategy) {,2,0,0,1,3,0,0,0,0,2,24,10,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,108,                            newCenter = getPointFromLargestVarianceCluster(clusters);,2,0,0,1,2,0,4,0,0,7,57,11,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,109,                            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,111,                            newCenter = getPointFromLargestNumberCluster(clusters);,4,0,0,1,2,1,6,0,0,12,55,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,112,                            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,114,                            newCenter = getFarthestPoint(clusters);,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,115,                            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,117,                            throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);,0,0,0,1,2,0,0,0,0,3,74,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,119,                    clusteringChanged = true;,2,0,0,0,0,0,0,0,0,4,25,10,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,121,                    newCenter = cluster.getCenter().centroidOf(cluster.getPoints());,6,0,0,3,6,0,10,0,0,18,64,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,122,                    if (!newCenter.equals(cluster.getCenter())) {,0,0,0,3,7,0,8,0,0,9,45,10,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,123,                        clusteringChanged = true;,2,0,0,0,0,0,0,0,0,4,25,12,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,126,                newClusters.add(new Cluster<T>(newCenter));,2,0,0,2,4,0,4,4,0,10,43,9,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,127,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,128,            if (!clusteringChanged) {,0,0,0,1,3,0,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,129,                return clusters;,2,0,0,0,0,1,0,0,0,2,16,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,131,"            assignPointsToClusters(newClusters, points);",0,0,0,1,2,0,0,0,0,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,132,            clusters = newClusters;,4,0,0,0,0,0,0,0,0,5,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,208,        double maxVariance = Double.NEGATIVE_INFINITY;,0,0,0,0,0,0,0,0,0,0,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,209,        Cluster<T> selected = null;,4,0,0,0,0,1,4,4,0,13,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,210,        for (final Cluster<T> cluster : clusters) {,0,0,0,1,3,0,0,0,0,4,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,211,            if (!cluster.getPoints().isEmpty()) {,0,0,0,3,7,0,6,0,0,7,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,214,                final T center = cluster.getCenter();,2,0,0,1,2,1,4,2,0,9,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,215,                final Variance stat = new Variance();,2,0,0,1,2,1,0,4,0,7,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,216,                for (final T point : cluster.getPoints()) {,2,0,0,2,5,1,4,2,0,9,43,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,217,                    stat.increment(point.distanceFrom(center));,0,0,0,2,4,0,10,0,0,10,43,11,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,218,                },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,219,                final double variance = stat.getResult();,2,0,0,1,2,1,4,0,0,7,41,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,222,                if (variance > maxVariance) {,4,1,0,1,3,0,0,0,0,5,29,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,223,                    maxVariance = variance;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,224,                    selected = cluster;,4,0,0,0,0,0,0,0,0,5,19,10,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,228,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,231,        if (selected == null) {,0,0,0,1,3,0,4,0,0,4,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,232,            throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);,4,0,0,1,2,0,0,2,0,6,74,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,236,        final List<T> selectedPoints = selected.getPoints();,4,0,0,1,2,1,8,8,0,22,52,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,237,        return selectedPoints.remove(random.nextInt(selectedPoints.size()));,0,0,0,3,6,1,16,0,0,16,68,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,249,        int maxNumber = 0;,2,0,0,0,0,0,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,250,        Cluster<T> selected = null;,4,0,0,0,0,1,6,4,0,15,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,251,        for (final Cluster<T> cluster : clusters) {,10,1,0,1,3,1,0,4,0,17,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,254,            final int number = cluster.getPoints().size();,2,0,0,2,4,1,6,0,0,9,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,257,            if (number > maxNumber) {,4,1,0,1,3,0,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,258,                maxNumber = number;,14,2,1,0,0,0,0,0,0,20,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,259,                selected = cluster;,4,0,0,0,0,0,0,0,0,5,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,262,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,265,        if (selected == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,266,            throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);,4,0,0,1,2,0,0,2,0,6,74,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,270,        final List<T> selectedPoints = selected.getPoints();,4,3,0,1,2,0,4,0,0,11,52,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,271,        return selectedPoints.remove(random.nextInt(selectedPoints.size()));,4,1,0,3,6,1,14,0,0,19,68,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,283,        double maxDistance = Double.NEGATIVE_INFINITY;,6,0,0,0,0,0,0,0,0,6,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,284,        Cluster<T> selectedCluster = null;,2,0,0,0,0,0,0,4,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,285,        int selectedPoint = -1;,2,0,0,0,0,0,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,286,        for (final Cluster<T> cluster : clusters) {,4,0,0,1,3,1,0,4,0,9,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,289,            final T center = cluster.getCenter();,2,0,0,1,2,1,4,2,0,9,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,290,            final List<T> points = cluster.getPoints();,2,0,0,1,2,1,4,4,0,11,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,291,            for (int i = 0; i < points.size(); ++i) {,12,1,0,2,5,0,4,0,0,20,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,292,                final double distance = points.get(i).distanceFrom(center);,0,0,0,2,4,0,0,0,0,6,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,293,                if (distance > maxDistance) {,4,1,0,1,3,0,0,0,0,5,29,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,294,                    maxDistance     = distance;,4,0,0,0,0,0,0,0,0,5,27,10,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,295,                    selectedCluster = cluster;,4,0,0,0,0,0,0,0,0,5,26,10,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,296,                    selectedPoint   = i;,4,0,0,0,0,0,0,0,0,5,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,300,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,303,        if (selectedCluster == null) {,6,1,0,1,3,0,0,2,0,9,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,304,            throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);,0,0,0,1,2,0,0,0,0,3,74,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,307,        return selectedCluster.getPoints().remove(selectedPoint);,0,0,0,2,4,1,8,0,0,8,57,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,106,                    switch (emptyStrategy) {,2,0,0,1,3,0,0,0,0,2,24,10,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,57,63,        return points;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,57,37,        this(null);,0,0,0,1,2,0,0,0,0,1,11,8,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,57,38,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,57,45,"        this(specific,",2,0,0,0,1,0,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,57,48,    },6,3,0,0,1,0,0,0,0,9,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,57,57,"        super(specific,",2,0,0,0,1,0,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,57,60,    },0,0,0,0,1,0,8,0,0,8,1,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,57,40,                                     Object ... args) {,12,2,0,0,2,0,0,2,0,17,18,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,57,41,"        addMessage(pattern, args);",0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,57,42,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,57,54,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,57,55,"        addMessage(pattern, args);",0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,57,56,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,57,61,    public MathIllegalStateException() {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,57,62,        addMessage(LocalizedFormats.ILLEGAL_STATE);,4,0,0,1,2,0,12,2,0,18,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,57,63,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,182,            } catch (OutOfRangeException e) {,4,1,0,1,4,0,6,2,0,13,33,1,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,183,                fwhmApprox = points[points.length - 1].getX() - points[0].getX();,6,2,1,4,8,0,4,0,0,17,65,8,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,271,            double minY = Double.POSITIVE_INFINITY;,6,0,0,0,0,0,0,0,0,6,39,6,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,272,            double maxY = Double.NEGATIVE_INFINITY;,6,0,0,0,0,0,0,0,0,6,39,6,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,273,            for (final WeightedObservedPoint point : points) {,0,0,0,1,3,0,0,0,0,4,50,4,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,274,"                minY = Math.min(minY, point.getY());",2,0,0,2,4,0,10,0,0,13,36,7,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,275,"                maxY = Math.max(maxY, point.getY());",0,0,0,2,4,0,0,0,0,6,36,4,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,277,"            throw new OutOfRangeException(y, minY, maxY);",0,0,0,1,2,0,0,0,0,3,45,4,0.5,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,52,"        this(null, wrong, min, boundIsAllowed);",6,0,0,1,2,0,6,0,0,12,39,3,0.5,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,53,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,67,"        super(specific,",2,0,0,0,1,0,0,0,0,2,15,4,0.5,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,73,        this.min = min;,4,0,0,0,0,0,0,0,0,5,15,4,0.5,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,74,        this.boundIsAllowed = boundIsAllowed;,4,0,0,0,0,0,0,0,0,5,37,4,0.5,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,75,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,46,"        this(null, wrong, lo, hi);",0,0,0,1,2,0,0,0,0,3,26,4,0.5,0,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,62,"        super(specific, LocalizedFormats.OUT_OF_RANGE_SIMPLE,",6,0,0,0,1,0,0,0,0,6,53,4,0.5,0,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,64,        this.lo = lo;,4,0,0,0,0,0,0,0,0,5,13,4,0.5,0,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,65,        this.hi = hi;,0,0,0,0,0,0,0,0,0,0,13,4,0.5,0,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,66,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,58,44,"        super(null, specific, general, args);",0,0,0,1,2,0,0,0,0,3,37,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,58,45,    },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,65,        super(cause);,0,0,0,1,2,0,0,0,0,3,13,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,66,        this.specific = specific;,4,0,0,0,0,0,0,0,0,5,25,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,67,        this.general = general;,4,0,0,0,0,0,0,0,0,5,23,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,68,        this.arguments = ArgUtils.flatten(arguments);,2,0,0,1,2,0,6,0,0,9,45,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,69,    },4,0,0,0,1,0,0,0,0,5,1,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,58,50,"        super(specific, general, wrong, arguments);",0,1,1,1,2,0,2,0,0,8,43,6,0.25,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,58,51,        argument = wrong;,4,0,0,0,0,0,0,0,0,5,17,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,58,52,    },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,340,    private LocalizedFormats(final String sourceFormat) {,0,0,0,1,3,0,0,0,0,4,53,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,341,        this.sourceFormat = sourceFormat;,12,2,0,0,0,0,2,0,0,17,33,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,342,    },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",2,0,0,5,10,0,0,0,0,3,67,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,45,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",10,1,0,4,8,0,0,0,0,13,94,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,46,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",0,0,0,1,2,0,0,0,0,3,41,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,47,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",4,0,0,1,2,0,0,0,0,6,95,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,48,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",2,0,0,1,2,0,0,0,0,3,60,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,49,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",2,0,0,1,2,0,0,0,0,3,54,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,50,"    BANDWIDTH(""bandwidth ({0})""),",0,0,0,3,6,0,0,0,0,9,29,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,51,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",2,0,0,4,8,0,0,0,0,3,108,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,52,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),",2,0,0,3,6,0,0,0,0,3,93,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,53,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",2,0,0,1,2,0,0,0,0,3,123,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,54,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",0,0,0,1,2,0,0,0,0,3,89,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,55,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",2,0,0,2,4,0,0,0,0,3,108,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",2,0,0,1,2,0,0,0,0,3,100,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,57,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",2,0,0,2,4,0,0,0,0,3,94,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,58,"    CANNOT_CONVERT_OBJECT_TO_FRACTION(""cannot convert given object to a fraction number: {0}""),",2,0,0,2,4,0,0,0,0,3,91,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",2,0,0,3,6,0,0,0,0,3,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",0,0,0,2,4,0,0,0,0,6,83,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",2,0,0,2,4,0,0,0,0,3,86,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",2,0,0,2,4,0,0,0,0,3,87,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",2,0,0,1,2,0,0,0,0,3,84,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",2,0,0,1,2,0,0,0,0,3,131,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",2,0,0,1,2,0,0,0,0,3,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",6,0,0,2,4,0,6,2,0,15,98,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",2,0,0,2,4,0,0,0,0,3,78,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",2,0,0,1,2,0,0,0,0,3,95,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",0,0,0,2,4,0,0,0,0,6,74,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",0,0,0,1,2,0,0,0,0,3,55,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",2,0,0,3,6,0,0,0,0,3,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",2,0,0,2,4,0,0,0,0,3,115,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",0,0,0,5,10,0,0,0,0,15,78,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,46,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,75,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",2,0,0,2,4,0,0,0,0,3,112,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",2,0,0,2,4,0,0,0,0,3,86,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",2,0,1,5,10,0,0,0,0,8,290,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",2,0,0,3,6,0,0,0,0,3,263,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",2,0,0,1,2,0,0,0,0,3,52,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,80,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",2,0,0,3,6,0,0,0,0,3,109,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,81,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",0,0,0,3,6,0,0,0,0,9,81,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,82,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",4,0,0,1,2,0,0,0,0,6,49,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,83,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",2,0,0,5,10,0,0,0,0,3,71,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,84,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,85,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",2,0,0,1,2,0,0,0,0,3,54,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,86,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",2,0,0,2,4,0,0,0,0,3,119,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,87,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",2,0,0,1,2,0,0,0,0,3,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,88,"    DUPLICATED_ABSCISSA(""Abscissa {0} is duplicated at both indices {1} and {2}""),",4,0,0,4,8,0,0,2,0,7,78,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,89,"    EMPTY_CLUSTER_IN_K_MEANS(""empty cluster in k-means""),",2,0,0,1,2,0,0,0,0,3,53,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,90,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",8,2,0,1,2,0,0,0,0,12,88,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,91,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",4,0,0,1,2,0,0,0,0,5,71,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,92,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",2,0,0,1,2,0,0,0,0,3,65,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,93,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",2,0,0,1,2,0,0,0,0,3,77,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,94,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",6,0,0,4,8,0,0,0,0,7,78,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,95,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",2,0,0,3,6,0,0,0,0,3,81,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,96,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",4,1,0,1,2,0,0,0,0,6,53,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,97,"    EVALUATION_FAILED(""evaluation failed for argument = {0}""),",0,0,0,2,4,0,0,0,0,6,58,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,98,"    EVALUATION(""evaluation""), /* keep */",8,1,0,1,2,0,0,0,0,10,36,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,99,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",4,0,0,3,6,0,0,0,0,5,77,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,100,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",2,0,0,2,4,0,0,0,0,3,69,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,101,"    FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),",2,0,0,12,24,0,0,0,0,3,175,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,102,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",4,0,1,3,6,0,0,0,0,8,85,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,103,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,104,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",12,1,0,2,4,0,0,0,0,15,54,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,105,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",0,0,0,2,4,0,0,0,0,6,73,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,106,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",2,0,0,5,10,0,0,0,0,3,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,107,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",2,0,0,1,2,0,0,0,0,3,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,108,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",2,0,0,1,2,0,0,0,0,3,54,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,109,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,110,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",2,0,0,4,8,0,0,0,0,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,111,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",2,0,0,2,4,0,0,0,0,3,76,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,112,"    IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO(""identical abscissas x[{0}] == x[{1}] == {2} cause division by zero""),",2,0,0,6,12,0,0,0,0,3,107,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,113,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",2,0,0,3,6,0,0,0,0,3,95,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,114,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",2,0,0,3,6,3,0,0,0,5,50,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,115,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",0,0,0,5,10,0,0,0,0,15,64,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,116,"    INDEX(""index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,117,"    NOT_FINITE_NUMBER(""{0} is not a finite number""), /* keep */",0,0,0,2,4,0,0,0,0,6,59,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,118,"    ARRAY_ELEMENT(""value {0} at index {1}""), /* keep */",2,0,0,3,6,0,0,0,0,3,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,119,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",0,0,0,3,6,0,0,0,0,9,79,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,120,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",2,0,0,1,2,0,0,0,0,3,59,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,121,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",2,0,0,3,6,0,0,0,0,3,72,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,122,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {1} after final column {0}""),",2,0,0,3,6,0,0,0,0,3,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,123,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {1} after final row {0}""),",10,1,0,3,6,0,0,0,0,12,67,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,124,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",2,0,0,4,8,0,0,0,0,3,121,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,125,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",2,0,0,2,4,0,0,0,0,3,103,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,126,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,127,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",2,0,0,3,6,0,0,0,0,3,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,128,"    DIMENSION(""dimension ({0})""), /* keep */",4,1,0,3,6,0,2,0,0,8,40,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,129,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",8,1,0,3,6,1,0,0,0,11,105,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,130,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",2,0,0,3,6,0,0,0,0,3,83,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,131,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT(""{0} method needs at least one previous point""),",2,0,0,2,4,0,0,0,0,3,101,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,132,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",4,0,0,2,4,2,0,0,0,7,66,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,133,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",2,0,0,4,8,0,0,0,0,3,112,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,134,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),",2,0,0,4,8,0,0,0,0,3,124,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,135,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",2,0,0,3,6,0,0,0,0,3,72,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,136,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",10,2,0,2,4,0,0,0,0,14,71,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,137,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),",2,0,0,4,8,0,0,0,0,3,141,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,138,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",4,0,0,26,52,0,0,0,0,5,165,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,139,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",2,0,0,1,2,0,0,0,0,3,41,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,140,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,141,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",2,0,0,4,8,0,0,0,0,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,142,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),",2,0,0,1,2,0,0,0,0,3,101,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,143,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",2,0,0,1,2,0,0,0,0,3,67,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,144,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,111,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,145,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",4,0,0,5,10,3,0,0,0,8,111,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,146,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",0,0,0,1,2,0,4,0,0,4,70,5,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,147,"    EVALUATIONS(""evaluations""), /* keep */",0,0,0,1,2,0,0,0,0,3,38,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,148,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",2,0,0,3,6,0,2,0,0,5,62,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,149,"    MAX_EVALUATIONS_EXCEEDED(""maximal number of evaluations ({0}) exceeded""),",2,0,0,3,6,0,0,0,0,3,73,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,150,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",0,0,0,3,6,0,0,0,0,9,71,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,151,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({0,number,0.00E00}) reached, integration needs {1,number,0.00E00}""),",0,0,0,4,8,0,0,0,0,12,132,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,152,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",4,0,0,3,6,0,0,0,0,5,156,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,153,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",10,2,0,2,4,1,4,0,0,18,43,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,154,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",2,0,0,1,2,0,0,0,0,3,49,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,155,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",2,0,0,2,4,0,0,0,0,3,92,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,156,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",2,0,0,2,4,0,0,0,0,3,55,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,157,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",2,0,0,5,10,0,0,0,0,3,68,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,158,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",2,0,0,3,6,0,0,0,0,3,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,159,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,160,"    NUMBER_OF_SUCCESSES(""number of successes ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,60,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,161,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,73,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,162,"    NUMBER_OF_TRIALS(""number of trials ({0})""),",4,0,1,3,6,0,0,0,0,8,43,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,163,"    ROBUSTNESS_ITERATIONS(""number of robustness iterations ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,164,"    START_POSITION(""start position ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,50,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,165,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge (in less than {0} iterations) for value {1}""),",2,0,0,4,8,0,0,0,0,3,131,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,166,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,167,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",2,0,0,2,4,0,0,0,0,3,81,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,168,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,89,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,169,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,89,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,170,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,171,"    NON_SQUARE_MATRIX(""a {0}x{1} matrix was provided instead of a square matrix""),",2,0,0,3,6,0,0,0,0,3,78,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,172,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",2,0,0,1,2,0,0,0,0,3,60,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,173,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",2,0,0,1,2,0,0,0,0,3,41,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,174,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",2,0,0,5,10,0,0,0,0,3,93,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,175,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,176,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",0,0,0,6,12,0,0,0,0,18,88,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,177,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),",8,0,0,5,10,0,4,0,0,13,113,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,178,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",2,0,0,3,6,0,0,0,0,3,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,179,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,180,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,88,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,181,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",0,0,0,5,10,0,0,0,0,15,105,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,182,"    ALPHA(""alpha""), /* keep */",2,0,0,1,2,0,0,0,0,3,26,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,183,"    BETA(""beta""), /* keep */",2,0,0,1,2,0,0,0,0,3,24,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,184,"    NOT_POSITIVE_COLUMNDIMENSION(""invalid column dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,81,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,185,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""),",0,0,0,1,2,0,0,0,0,3,61,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,186,"    NON_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix: diagonal element at ({0},{0}) is larger than {2}""), /* keep */",0,0,0,5,10,0,0,0,0,15,122,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,187,"    DEGREES_OF_FREEDOM(""degrees of freedom ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,188,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,189,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",2,0,0,3,6,0,0,0,0,3,66,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,190,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,65,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,191,"    EXPONENT(""exponent ({0})""), /* keep */",4,1,1,3,6,0,4,0,0,16,38,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,192,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,53,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,193,"    LENGTH(""length ({0})""), /* keep */",4,0,0,3,6,0,0,0,0,6,34,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,194,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,49,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,195,"    MEAN(""mean ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,30,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,196,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",2,0,0,2,4,0,0,0,0,3,72,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,197,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",4,1,1,3,6,0,0,0,0,10,56,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,198,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",2,0,0,3,6,0,0,0,0,3,65,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,199,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",2,0,0,2,5,0,0,0,0,3,53,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,200,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,69,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,201,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,71,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,202,"    POPULATION_SIZE(""population size ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,203,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,76,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,204,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,205,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,206,"    SCALE(""scale ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,32,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,207,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,208,"    SHAPE(""shape ({0})""), /* keep */",6,1,0,3,6,0,0,0,0,9,32,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,209,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,77,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,210,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,211,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),",4,1,0,3,6,0,0,0,0,6,63,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,212,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,213,"    NOT_POWER_OF_TWO(""{0} is not a power of 2""),",2,0,0,2,4,0,0,0,0,3,44,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,214,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",8,1,0,2,4,0,0,0,0,10,87,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,215,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",8,4,1,2,4,0,0,0,0,26,62,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,216,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,217,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,107,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,218,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",2,0,0,1,2,0,0,0,0,3,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,219,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,220,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */",2,1,1,6,12,0,0,0,0,6,107,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,221,"    NOT_SUBTRACTION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not subtraction compatible""),",2,0,0,5,10,0,0,0,0,3,99,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,222,"    NOT_SYMMETRIC_MATRIX(""not symmetric matrix""),",2,0,0,1,2,0,0,0,0,3,45,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,223,"    NON_SYMMETRIC_MATRIX(""non symmetric matrix: the difference between entries at ({0},{1}) and ({1},{0}) is larger than {2}""), /* keep */",2,0,0,8,16,0,0,0,0,3,134,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,224,"    NO_BIN_SELECTED(""no bin selected""),",2,0,0,1,2,0,0,0,0,3,35,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,225,"    NO_CONVERGENCE_WITH_ANY_START_POINT(""none of the {0} start points lead to convergence""), /* keep */",2,0,0,2,4,0,0,0,0,3,99,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,226,"    NO_DATA(""no data""), /* keep */",2,0,1,1,2,0,4,0,0,11,30,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,227,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",0,0,0,4,8,0,0,0,0,12,82,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,228,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),",6,0,0,1,2,0,4,0,0,11,99,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,229,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",2,0,0,1,2,0,0,0,0,3,45,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,230,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""), /* keep */",2,0,0,1,2,0,0,0,0,3,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,231,"    NO_RESULT_AVAILABLE(""no result available""),",2,0,0,1,2,0,0,0,0,3,43,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,232,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",2,0,0,6,12,0,0,0,0,3,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,233,"    NULL_NOT_ALLOWED(""null is not allowed""), /* keep */",2,0,0,1,2,0,0,0,0,3,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,234,"    COVARIANCE_MATRIX(""covariance matrix""), /* keep */",6,0,0,1,2,0,0,0,0,8,50,3,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,235,"    DENOMINATOR(""denominator""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,236,"    DENOMINATOR_FORMAT(""denominator format""), /* keep */",4,3,0,1,2,0,0,0,0,8,52,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,237,"    FRACTION(""fraction""), /* keep */",4,0,0,1,2,0,0,0,0,6,32,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,238,"    FUNCTION(""function""), /* keep */",6,1,0,1,2,1,0,0,0,9,32,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,239,"    IMAGINARY_FORMAT(""imaginary format""), /* keep */",0,0,0,1,2,0,0,0,0,3,48,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,240,"    INPUT_ARRAY(""input array""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,241,"    NUMERATOR(""numerator""), /* keep */",4,0,0,1,2,0,0,0,0,5,34,6,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,242,"    NUMERATOR_FORMAT(""numerator format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,243,"    OBJECT_TRANSFORMATION(""conversion exception in transformation""), /* keep */",2,0,0,1,2,0,0,0,0,3,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,244,"    REAL_FORMAT(""real format""), /* keep */",4,0,0,1,2,0,0,0,0,6,38,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,245,"    WHOLE_FORMAT(""whole format""), /* keep */",2,0,0,1,2,0,0,0,0,3,40,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,246,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,68,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,247,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,69,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,248,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,249,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,98,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,250,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),",12,1,0,5,10,0,0,0,0,15,127,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,251,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",2,0,0,2,4,0,0,0,0,3,87,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,252,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),",2,0,0,4,8,0,0,0,0,3,150,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,253,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",2,0,0,2,4,0,0,0,0,3,76,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,254,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",4,0,1,2,4,1,0,0,0,10,84,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,255,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),",2,0,0,3,6,0,0,0,0,3,87,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,256,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",2,0,0,4,8,0,0,0,0,3,101,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,257,"    SIGNIFICANCE_LEVEL(""significance level ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,258,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",2,0,0,5,10,0,0,0,0,3,150,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,259,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),",2,0,0,6,12,0,0,0,0,3,96,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,260,"    OUT_OF_RANGE(""out of range""), /* keep */",2,0,0,1,2,0,0,0,0,3,40,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,261,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */",2,0,0,5,10,0,0,0,0,3,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,262,"    OVERFLOW_IN_FRACTION(""overflow in fraction {0}/{1}, cannot negate""),",2,0,0,3,6,0,0,0,0,3,68,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,263,"    OVERFLOW_IN_ADDITION(""overflow in addition: {0} + {1}""),",2,0,0,3,6,0,0,0,0,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,264,"    OVERFLOW_IN_SUBTRACTION(""overflow in subtraction: {0} - {1}""),",0,0,0,3,6,0,0,0,0,9,62,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,265,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",2,0,0,3,6,0,0,0,0,3,108,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,266,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),",0,0,0,3,6,0,0,0,0,9,99,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,267,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",0,0,0,5,10,0,0,0,0,15,91,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,268,"    POLYNOMIAL(""polynomial""), /* keep */",2,0,1,1,2,0,0,0,0,13,36,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,269,"    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(""number of polynomial interpolants must match the number of segments ({0} != {1} - 1)""),",2,0,0,4,8,0,0,0,0,3,130,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,270,"    POPULATION_LIMIT_NOT_POSITIVE(""population limit has to be positive""),",8,2,1,1,2,1,0,0,0,14,69,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,271,"    POSITION_SIZE_MISMATCH_INPUT_ARRAY(""position {0} and size {1} don't fit to the size of the input array {2}""),",2,0,0,4,8,0,0,0,0,3,109,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,272,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",2,0,0,4,8,0,0,0,0,3,90,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,273,"    PROPAGATION_DIRECTION_MISMATCH(""propagation direction mismatch""),",4,0,0,1,2,0,0,0,0,5,65,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,274,"    RANDOMKEY_MUTATION_WRONG_CLASS(""RandomKeyMutation works only with RandomKeys, not {0}""),",6,0,0,2,4,0,0,0,0,8,88,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,275,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",2,0,0,1,2,0,0,0,0,3,77,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,276,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),",2,0,0,3,6,0,0,0,0,3,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,277,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,72,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,278,"    ROW_INDEX(""row index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,40,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,279,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",0,0,0,7,14,0,0,0,0,21,126,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,280,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",2,0,0,5,10,1,6,2,0,11,98,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,281,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,113,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,282,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",2,0,0,1,2,0,0,0,0,3,66,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,283,"    SIMPLE_MESSAGE(""{0}""),",2,0,0,2,4,0,0,0,0,3,22,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,284,"    SINGULAR_MATRIX(""matrix is singular""), /* keep */",2,0,0,1,2,0,0,0,0,3,49,2,0.25,0,0
