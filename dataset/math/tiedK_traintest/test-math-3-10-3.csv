dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,other,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,274,"    OVERFLOW_IN_FRACTION(""overflow in fraction {0}/{1}, cannot negate""),",1,0,0,0,6,0,0,0,1,3,68,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,275,"    OVERFLOW_IN_ADDITION(""overflow in addition: {0} + {1}""),",1,0,0,1,6,0,0,0,1,4,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,276,"    OVERFLOW_IN_SUBTRACTION(""overflow in subtraction: {0} - {1}""),",1,0,0,1,6,0,0,0,1,4,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,277,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",1,0,0,1,6,0,0,0,1,4,108,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,278,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),",1,0,0,1,6,0,0,0,1,4,99,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,279,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",1,0,0,2,10,0,0,0,1,4,91,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,280,"    POLYNOMIAL(""polynomial""), /* keep */",1,0,0,1,2,0,0,0,1,4,36,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,281,"    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(""number of polynomial interpolants must match the number of segments ({0} != {1} - 1)""),",1,0,0,2,8,0,0,0,1,4,130,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,282,"    POPULATION_LIMIT_NOT_POSITIVE(""population limit has to be positive""),",1,0,0,1,2,0,0,0,1,4,69,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,283,"    POSITION_SIZE_MISMATCH_INPUT_ARRAY(""position {0} and size {1} don't fit to the size of the input array {2}""),",1,0,0,1,8,0,0,0,1,4,109,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,284,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",1,0,0,2,8,0,0,0,1,4,90,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,285,"    PROPAGATION_DIRECTION_MISMATCH(""propagation direction mismatch""),",1,0,0,1,2,0,0,0,1,4,65,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,286,"    RANDOMKEY_MUTATION_WRONG_CLASS(""RandomKeyMutation works only with RandomKeys, not {0}""),",1,0,0,0,4,0,0,0,1,3,88,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,287,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",1,0,0,1,2,0,0,0,1,4,77,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,288,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),",1,0,0,1,6,0,0,0,1,4,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,289,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),",1,0,0,0,10,0,0,0,1,3,72,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,290,"    ROW_INDEX(""row index ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,40,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,291,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",1,0,0,0,14,1,0,0,1,4,126,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,292,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",1,0,0,2,10,0,0,0,1,4,98,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,293,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),",1,0,0,2,10,0,0,0,1,4,113,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,294,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",1,0,0,1,2,0,0,0,1,4,66,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,295,"    SIMPLE_MESSAGE(""{0}""),",1,0,0,1,4,0,0,0,1,4,22,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,296,"    SINGULAR_MATRIX(""matrix is singular""), /* keep */",1,0,0,1,2,0,0,0,1,4,49,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,297,"    SUBARRAY_ENDS_AFTER_ARRAY_END(""subarray ends after array end""),",1,0,0,1,2,0,0,0,1,4,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,298,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),",1,0,0,0,6,0,0,0,1,3,87,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,299,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),",1,0,0,1,6,0,0,0,1,4,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,300,"    TOO_MUCH_CANCELLATION(""too much cancellation in a denominator""),",1,0,0,1,2,0,0,0,1,4,64,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,301,"    TOO_MANY_REGRESSORS(""too many regressors ({0}) specified, only {1} in the model""),",1,0,0,1,8,0,0,0,1,4,82,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,302,"    TOO_SMALL_COST_RELATIVE_TOLERANCE(""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible""),",1,0,0,1,6,0,0,0,1,4,136,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,303,"    TOO_SMALL_INTEGRATION_INTERVAL(""too small integration interval: length = {0}""),",1,0,0,1,4,0,0,0,1,4,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,304,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),",1,0,0,1,6,0,0,0,1,4,120,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,305,"    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible""),",1,0,0,1,6,0,0,0,1,4,156,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,306,"    TRUST_REGION_STEP_FAILED(""trust region step has failed to reduce Q""),",1,0,0,1,2,0,0,0,1,4,69,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,307,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),",1,0,0,0,4,0,0,0,1,3,76,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,308,"    TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED(""two or more values required in each category, one has {0}""),",1,0,0,0,4,0,0,0,1,3,101,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,309,"    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(""unable to bracket optimum in line search""),",1,0,0,1,2,0,0,0,1,4,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,310,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),",1,0,0,1,2,0,0,0,1,4,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,311,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),",1,0,0,1,2,0,0,0,1,4,95,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,312,"    UNABLE_TO_ORTHOGONOLIZE_MATRIX(""unable to orthogonalize matrix in {0} iterations""),",1,0,0,1,4,0,0,0,1,4,83,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,313,"    UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN(""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix""),",1,0,0,1,6,0,0,0,1,4,117,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,314,"    UNABLE_TO_SOLVE_SINGULAR_PROBLEM(""unable to solve: singular problem""),",1,0,0,1,2,0,0,0,1,4,70,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,315,"    UNBOUNDED_SOLUTION(""unbounded solution""),",1,0,0,1,2,0,0,0,1,4,41,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,316,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),",1,0,0,1,40,0,0,0,1,4,118,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,317,"    CANNOT_PARSE_AS_TYPE(""string {0} unparseable (from position {1}) as an object of type {2}""), /* keep */",1,0,0,2,10,0,0,0,1,4,103,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,318,"    CANNOT_PARSE(""string {0} unparseable (from position {1})""), /* keep */",1,0,0,2,8,0,0,0,1,4,70,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,319,"    UNPARSEABLE_3D_VECTOR(""unparseable 3D vector: \""{0}\""""),",1,0,0,1,4,0,0,0,1,4,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,320,"    UNPARSEABLE_COMPLEX_NUMBER(""unparseable complex number: \""{0}\""""),",1,0,0,1,4,0,0,0,1,4,66,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,321,"    UNPARSEABLE_FRACTION_NUMBER(""unparseable fraction number: \""{0}\""""),",1,0,0,1,4,0,0,0,1,4,68,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,322,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),",1,0,0,1,4,0,0,0,1,4,60,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,323,"    UNSUPPORTED_EXPANSION_MODE(""unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})""),",1,0,0,1,16,0,0,0,1,4,106,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,324,"    UNSUPPORTED_OPERATION(""unsupported operation""), /* keep */",1,0,0,1,2,0,0,0,1,4,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,325,"    ARITHMETIC_EXCEPTION(""arithmetic exception""), /* keep */",1,0,0,1,2,0,0,0,1,4,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,326,"    ILLEGAL_STATE(""illegal state""), /* keep */",1,0,0,1,2,0,0,0,1,4,42,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,327,"    USER_EXCEPTION(""exception generated in user code""), /* keep */",1,0,0,1,2,0,0,0,1,4,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,328,"    URL_CONTAINS_NO_DATA(""URL {0} contains no data""),",1,0,0,1,4,0,0,0,1,4,49,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,329,"    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(""{0} values have been added before statistic is configured""),",1,0,0,1,4,0,0,0,1,4,103,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,330,"    VECTOR_LENGTH_MISMATCH(""vector length mismatch: got {0} but expected {1}""),",1,0,0,1,6,0,0,0,1,4,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,331,"    VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT(""vector must have at least one element""),",1,0,0,1,2,0,0,0,1,4,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,332,"    WEIGHT_AT_LEAST_ONE_NON_ZERO(""weigth array must contain at least one non-zero value""),",1,0,0,1,2,0,0,0,1,4,86,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,333,"    WRONG_BLOCK_LENGTH(""wrong array shape (block length = {0}, expected {1})""),",1,0,0,0,8,0,0,0,1,3,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,334,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),",1,0,0,0,6,0,0,0,1,3,64,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,335,"    NUMBER_OF_POINTS(""number of points ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,54,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,336,"    ZERO_DENOMINATOR(""denominator must be different from 0""),",1,0,0,1,2,0,0,0,1,4,57,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,337,"    ZERO_DENOMINATOR_IN_FRACTION(""zero denominator in fraction {0}/{1}""),",1,0,0,1,6,0,0,0,1,4,69,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,338,"    ZERO_FRACTION_TO_DIVIDE_BY(""the fraction to divide by must not be zero: {0}/{1}""),",1,0,0,1,6,0,0,0,1,4,82,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,339,"    ZERO_NORM(""zero norm""),",1,0,0,1,2,0,0,0,1,4,23,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,340,"    ZERO_NORM_FOR_ROTATION_AXIS(""zero norm for rotation axis""),",1,0,0,1,2,1,0,0,1,5,59,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,341,"    ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR(""zero norm for rotation defining vector""),",1,0,0,1,2,1,0,0,1,5,81,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,342,"    ZERO_NOT_ALLOWED(""zero not allowed here"");",1,0,0,1,2,0,0,0,1,4,42,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,39,public enum LocalizedFormats implements Localizable {,1,0,0,0,1,3,0,1,1,5,53,1,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,42,        final List<Object> list = new ArrayList<Object>();,1,0,0,1,2,2,0,4,2,6,50,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,43,        if (array != null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,44,            for (Object o : array) {,2,0,0,1,3,1,0,1,0,5,24,6,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,45,                if (o instanceof Object[]) {,1,0,0,1,5,2,0,1,0,5,28,9,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,46,                    for (Object oR : flatten((Object[]) o)) {,2,0,0,3,9,1,1,2,1,7,41,10,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,50,                    list.add(o);,0,0,0,1,2,0,3,0,0,3,12,11,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,54,        return list.toArray();,0,0,0,1,2,1,2,0,0,4,22,5,0.25,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,189,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.16667,1,1
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,48,60,"        super(DEFAULT_ABSOLUTE_ACCURACY, Method.REGULA_FALSI);",3,0,0,0,2,1,0,0,1,4,54,3,0.125,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,48,61,    },0,0,0,0,1,0,0,0,0,1,1,2,0.125,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,67,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,368,        checkVectorDimensions(v.getDimension());,0,0,0,2,4,0,3,0,1,4,40,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,369,        OpenMapRealVector res = new OpenMapRealVector(this);,1,0,0,1,2,2,0,2,1,6,52,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,370,        Iterator iter = res.entries.iterator();,3,0,0,1,2,0,1,1,0,5,39,4,1.0,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,371,        while (iter.hasNext()) {,0,0,0,2,5,1,2,0,0,4,24,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,372,            iter.advance();,0,0,0,1,2,0,2,0,0,3,15,7,1.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,373,"            res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));",0,1,0,2,10,0,10,0,0,4,64,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,186,        if (states[index] == FREE) {,1,1,1,1,5,1,0,0,0,6,28,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,187,            return missingEntries;,1,0,0,0,0,1,0,0,0,2,22,6,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,354,        final int hash  = hashOf(key);,1,0,0,1,2,2,2,0,2,6,30,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,355,        int index = hash & mask;,3,1,0,0,0,1,0,0,0,3,24,5,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,356,"        if (containsKey(key, index)) {",0,0,0,0,5,1,3,0,1,4,30,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,357,            return doRemove(index);,0,0,0,1,2,1,2,0,1,5,23,6,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,394,        keys[index]   = 0;,0,0,1,0,2,0,0,0,1,3,18,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,395,        states[index] = REMOVED;,1,0,1,0,2,0,0,0,1,4,24,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,396,        final double previous = values[index];,1,0,1,0,2,2,0,0,1,5,38,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,397,        values[index] = missingEntries;,1,0,1,0,2,0,0,0,1,4,31,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,398,        --size;,1,0,0,0,0,0,0,0,1,2,7,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,399,        ++count;,1,0,0,0,0,0,0,0,1,2,8,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,400,        return previous;,1,0,0,0,0,1,0,0,0,2,16,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,63,        int d = getDimension();,1,0,0,1,2,1,1,0,1,6,23,5,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,64,        if (d != n) {,2,1,0,1,3,1,0,0,0,5,13,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,666,        } else if (entries.containsKey(index)) {,0,0,0,2,6,2,3,0,0,4,40,6,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,667,            entries.remove(index);,0,0,0,1,2,0,3,0,0,3,22,8,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,210,        final int hash  = hashOf(key);,1,0,0,1,2,2,2,0,2,6,30,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,211,        int index = hash & mask;,3,1,0,0,0,1,0,0,0,3,24,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,212,"        if (containsKey(key, index)) {",0,0,0,0,5,1,3,0,1,4,30,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,213,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,33,public class OpenMapRealVector extends AbstractRealVector,1,0,0,0,0,3,0,1,1,4,57,1,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,239,                    return x1;,1,0,0,0,0,1,0,0,0,2,10,9,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,187,                    if (x == x1) {,2,1,0,1,3,1,0,0,0,5,14,9,0.16667,1,0
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,50,43,"        super(DEFAULT_ABSOLUTE_ACCURACY, Method.REGULA_FALSI);",3,0,0,0,2,1,0,0,1,4,54,3,0.125,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,50,44,    },0,0,0,0,1,0,0,0,0,1,1,2,0.125,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,51,43,"        super(DEFAULT_ABSOLUTE_ACCURACY, Method.REGULA_FALSI);",3,0,0,0,2,1,0,0,1,4,54,3,0.125,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,51,44,    },0,0,0,0,1,0,0,0,0,1,1,2,0.125,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,124,"        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);",2,0,0,0,2,1,6,0,1,5,73,4,0.08333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,199,                switch (allowed) {,1,0,0,1,3,1,0,0,0,4,18,8,0.04762,1,1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,178,                switch (method) {,1,0,0,1,3,1,0,0,0,4,17,8,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,171,            if (f1 * fx < 0) {,2,2,0,1,3,1,0,0,0,5,18,6,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,174,                x0 = x1;,2,0,0,0,0,0,0,0,1,2,8,8,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,175,                f0 = f1;,2,0,0,0,0,0,0,0,1,2,8,8,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,176,                inverted = !inverted;,2,0,0,0,0,0,0,0,2,2,21,8,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,178,                switch (method) {,1,0,0,1,3,1,0,0,0,4,17,8,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,192,            x1 = x;,2,0,0,0,0,0,0,0,1,2,7,6,0.04762,1,1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,193,            f1 = fx;,2,0,0,0,0,0,0,0,1,2,8,6,0.04762,1,1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,198,            if (FastMath.abs(f1) <= ftol) {,1,1,0,2,5,1,3,0,0,6,31,6,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,229,"            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),",3,3,0,1,6,1,7,0,0,6,65,6,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,246,        },0,0,0,0,1,0,0,0,0,1,1,2,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,195,"        return solve(maxEval, f, min, max, min + 0.5 * (max - min));",3,3,0,1,4,1,5,0,1,7,60,4,0.04762,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,313,"  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {",5,0,0,0,3,1,0,4,1,5,69,2,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,316,  double u1u1 = u1.getNormSq();,1,0,0,1,2,1,2,0,0,5,29,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,317,  double u2u2 = u2.getNormSq();,1,0,0,1,2,1,2,0,0,5,29,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,318,  double v1v1 = v1.getNormSq();,1,0,0,1,2,1,2,0,0,5,29,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,319,  double v2v2 = v2.getNormSq();,1,0,0,1,2,1,2,0,0,5,29,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,320,  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {,4,5,0,2,11,1,0,0,0,5,63,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,325,"  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);",4,1,0,1,4,1,2,1,2,8,50,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,328,  double u1u2   = u1.dotProduct(u2);,1,0,0,1,2,1,3,0,0,5,34,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,329,  double v1v2   = v1.dotProduct(v2);,1,0,0,1,2,1,3,0,0,5,34,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,330,  double coeffU = u1u2 / u1u1;,3,1,0,0,0,1,0,0,0,3,28,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,331,  double coeffV = v1v2 / u1u1;,3,1,0,0,0,1,0,0,0,3,28,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,332,  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));,7,5,0,2,6,1,2,0,0,6,79,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,333,  double alpha  = coeffU - beta * coeffV;,4,2,0,0,0,1,0,0,0,3,39,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,334,"  v2 = new Vector3D(alpha, v1, beta, v2);",5,0,0,0,2,1,0,1,2,5,39,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,337,  Vector3D uRef  = u1;,2,0,0,0,0,0,0,1,0,2,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,338,  Vector3D vRef  = v1;,2,0,0,0,0,0,0,1,0,2,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,339,  Vector3D v1Su1 = v1.subtract(u1);,1,0,0,1,2,0,3,1,0,5,33,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,340,  Vector3D v2Su2 = v2.subtract(u2);,1,0,0,1,2,0,3,1,0,5,33,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,341,  Vector3D k     = v1Su1.crossProduct(v2Su2);,1,0,0,1,2,0,3,1,0,5,43,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,342,  Vector3D u3    = u1.crossProduct(u2);,1,0,0,1,2,0,3,1,0,5,37,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,343,  double c       = k.dotProduct(u3);,1,0,0,1,2,1,3,0,0,5,34,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,344,  if (c == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,1.0,1,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,378,  c = FastMath.sqrt(c);,1,0,0,1,2,0,3,0,1,5,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,379,  double inv = 1.0 / (c + c);,3,2,0,1,2,1,0,0,0,5,27,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,380,  q1 = inv * k.getX();,2,1,0,1,2,0,2,0,1,6,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,381,  q2 = inv * k.getY();,2,1,0,1,2,0,2,0,1,6,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,382,  q3 = inv * k.getZ();,2,1,0,1,2,0,2,0,1,6,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,385,"   k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,",3,3,0,1,5,1,4,1,2,8,53,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,388,  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());,1,2,0,2,6,0,5,0,1,6,46,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,390,  },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,481,    return q0;,1,0,0,0,0,1,0,0,0,2,10,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,224,        return x * x + y * y + z * z;,6,5,0,0,0,1,0,0,0,3,29,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,134,"    public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2) {",5,0,0,0,3,3,0,2,1,5,65,2,0.1,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,135,"        this.x = MathUtils.linearCombination(a1, u1.x, a2, u2.x);",5,0,0,0,2,1,4,0,1,5,57,4,0.1,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,136,"        this.y = MathUtils.linearCombination(a1, u1.y, a2, u2.y);",5,0,0,0,2,1,4,0,1,5,57,4,0.1,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,137,"        this.z = MathUtils.linearCombination(a1, u1.z, a2, u2.z);",5,0,0,0,2,1,4,0,1,5,57,4,0.1,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,138,    },0,0,0,0,1,0,0,0,0,1,1,2,0.1,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,134,                  boolean needsNormalization) {,1,0,0,0,2,1,0,0,0,3,29,3,0.07143,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,136,    if (needsNormalization) {,1,0,0,1,3,1,0,0,0,4,25,4,0.07143,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,145,    this.q0 = q0;,2,0,0,0,0,1,0,0,1,3,13,4,0.07143,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,146,    this.q1 = q1;,2,0,0,0,0,1,0,0,1,3,13,4,0.07143,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,147,    this.q2 = q2;,2,0,0,0,0,1,0,0,1,3,13,4,0.07143,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,148,    this.q3 = q3;,2,0,0,0,0,1,0,0,1,3,13,4,0.07143,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,150,  },0,0,0,0,1,0,0,0,0,1,1,2,0.07143,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,98,"  public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);",1,0,0,0,2,4,0,2,5,5,80,2,0.07143,0,0
defect4j,math,org/apache/commons/math/complex/Complex,53,152,        MathUtils.checkNotNull(rhs);,0,0,0,1,2,0,3,0,0,3,28,5,0.05263,0,0
defect4j,math,org/apache/commons/math/complex/Complex,53,153,"        return createComplex(real + rhs.getReal(),",1,1,0,1,3,1,3,0,1,7,42,4,0.05263,1,1
defect4j,math,org/apache/commons/math/complex/Complex,53,319,        return isNaN;,1,0,0,0,0,1,0,0,0,2,13,4,0.04348,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,53,2334,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02381,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2119,            buffer[--q] = '-';,1,0,1,0,2,0,0,0,3,4,18,6,0.08333,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1041,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.07143,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1234,            a.exp = b.exp;,4,0,0,0,0,0,0,0,1,2,14,6,0.05556,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2328,            exponent--;,1,0,0,0,0,0,0,0,1,2,11,6,0.05556,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,473,"      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);",24,9,0,0,2,2,0,1,1,6,101,4,0.33333,1,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,181,    return x;,1,0,0,0,0,1,0,0,0,2,9,4,0.02564,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,189,    return y;,1,0,0,0,0,1,0,0,0,2,9,4,0.02564,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,197,    return z;,1,0,0,0,0,1,0,0,0,2,9,4,0.02564,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,93,"  public Vector3D(double x, double y, double z) {",4,0,0,0,3,4,0,0,1,4,47,2,0.01266,1,1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,94,    this.x = x;,2,0,0,0,0,1,0,0,1,3,11,4,0.01266,1,1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,95,    this.y = y;,2,0,0,0,0,1,0,0,1,3,11,4,0.01266,1,1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,96,    this.z = z;,2,0,0,0,0,1,0,0,1,3,11,4,0.01266,1,1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,97,  },0,0,0,0,1,0,0,0,0,1,1,2,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,35,"  public static final Vector3D ZERO   = new Vector3D(0, 0, 0);",1,0,0,0,2,4,0,2,4,5,60,2,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,38,"  public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);",1,0,0,0,2,4,0,2,4,5,60,2,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,41,"  public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);",1,0,0,0,2,4,0,2,5,5,62,2,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,44,"  public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);",1,0,0,0,2,4,0,2,4,5,60,2,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,47,"  public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);",1,0,0,0,2,4,0,2,5,5,62,2,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,50,"  public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);",1,0,0,0,2,4,0,2,4,5,60,2,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,53,"  public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);",1,0,0,0,2,4,0,2,5,5,62,2,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,57,"  public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);",7,0,0,0,2,4,0,2,4,5,84,2,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,61,  public static final Vector3D POSITIVE_INFINITY =,1,0,0,0,0,3,0,1,3,4,48,2,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,65,  public static final Vector3D NEGATIVE_INFINITY =,1,0,0,0,0,3,0,1,3,4,48,2,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,69,  private static final Vector3DFormat DEFAULT_FORMAT =,1,0,0,0,0,3,0,1,3,4,52,2,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,159,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,3,0,1,5,40,4,0.01266,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,85,        Iterator() {,1,0,0,1,3,0,0,0,0,3,12,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,75,        private final int[] counter = new int[dimension];,1,0,1,0,4,5,0,0,2,5,49,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,79,        private int count = -1;,1,0,0,0,0,2,0,0,2,3,23,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,86,            counter[last] = -1;,0,0,1,0,2,0,0,0,2,3,19,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,87,        },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,147,            return counter[dim];,0,0,1,0,2,1,0,0,0,3,20,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,196,        return new Iterator();,0,0,0,1,2,2,0,1,1,5,22,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,205,        return dimension;,1,0,0,0,0,1,0,0,0,2,17,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,217,        if (index < 0 ||,1,2,0,0,1,1,0,0,0,4,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,272,        return count + c[last];,1,1,1,0,2,1,0,0,0,5,23,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,46,public class MultidimensionalCounter implements Iterable<Integer> {,1,0,0,0,1,3,0,2,1,5,67,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,260,        if (c.length != dimension) {,3,1,0,1,3,1,0,0,0,5,28,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,263,        int count = 0;,1,0,0,0,0,1,0,0,0,2,14,5,0.5,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,264,        for (int i = 0; i < dimension; i++) {,4,1,0,1,3,2,0,0,1,6,37,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,265,            final int index = c[i];,1,0,1,0,2,2,0,0,1,5,23,6,0.5,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,266,            if (index < 0 ||,1,2,0,0,1,1,0,0,0,4,16,6,0.5,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,270,            count += uniCounterOffset[i] * c[i];,1,1,1,0,4,0,0,0,1,5,36,6,0.5,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,44,public final class MathUtils {,1,0,0,0,1,3,0,0,2,4,30,1,0.25,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,89,    private static final long[] FACTORIALS = new long[] {,1,0,0,0,5,6,0,0,3,4,53,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2220,"         return copyOf(source, source.length);",2,0,0,0,2,1,2,0,1,5,37,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2243,         final int[] output = new int[len];,1,0,1,0,4,4,0,0,1,5,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2244,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",2,0,0,0,4,0,7,0,0,3,73,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2245,         return output;,1,0,0,0,0,1,0,0,0,2,14,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,165,    public MultidimensionalCounter(int ... size) {,2,0,0,1,3,2,0,0,1,5,46,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,166,        dimension = size.length;,3,0,0,0,0,0,0,0,1,2,24,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,167,        this.size = MathUtils.copyOf(size);,1,0,0,1,2,1,3,0,1,6,35,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,169,        uniCounterOffset = new int[dimension];,1,0,1,0,2,2,0,0,1,5,38,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,171,        last = dimension - 1;,2,1,0,0,0,0,0,0,1,3,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,172,        int tS = size[last];,1,0,1,0,2,1,0,0,0,4,20,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,173,        for (int i = 0; i < last; i++) {,4,1,0,1,3,2,0,0,1,6,32,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,174,            int count = 1;,1,0,0,0,0,1,0,0,0,2,14,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,175,            for (int j = i + 1; j < dimension; j++) {,5,2,0,1,3,2,0,0,1,6,41,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,176,                count *= size[j];,1,0,1,0,2,0,0,0,1,4,17,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,178,            uniCounterOffset[i] = count;,1,0,1,0,2,0,0,0,1,4,28,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,179,            tS *= size[i];,1,0,1,0,2,0,0,0,1,4,14,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,181,        uniCounterOffset[last] = 0;,0,0,1,0,2,0,0,0,1,3,27,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,183,        if (tS <= 0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,187,        totalSize = tS;,2,0,0,0,0,0,0,0,1,2,15,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,188,    },0,0,0,0,1,0,0,0,0,1,1,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,55,    private static final double EXP_INT_TABLE_A[] = new double[1500];,1,0,0,0,4,6,0,0,3,4,65,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,60,    private static final double EXP_INT_TABLE_B[] = new double[1500];,1,0,0,0,4,6,0,0,3,4,65,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,65,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,1,0,0,0,4,6,0,0,3,4,66,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,70,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,1,0,0,0,4,6,0,0,3,4,66,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,73,    private static final double FACT[] = new double[20];,1,0,0,0,4,6,0,0,3,4,52,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,76,    private static final double LN_MANT[][] = new double[1024][];,1,0,0,0,8,6,0,0,3,4,61,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,85,    private static final double LN_SPLIT_COEF[][] = {,1,0,0,0,5,4,0,0,3,4,49,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,105,    private static final double LN_QUICK_COEF[][] = {,1,0,0,0,5,4,0,0,3,4,49,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,118,    private static final double LN_HI_PREC_COEF[][] = {,1,0,0,0,5,4,0,0,3,4,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,128,    private static final double SINE_TABLE_A[] = new double[14];,1,0,0,0,4,6,0,0,3,4,60,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,131,    private static final double SINE_TABLE_B[] = new double[14];,1,0,0,0,4,6,0,0,3,4,60,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,134,    private static final double COSINE_TABLE_A[] = new double[14];,1,0,0,0,4,6,0,0,3,4,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,137,    private static final double COSINE_TABLE_B[] = new double[14];,1,0,0,0,4,6,0,0,3,4,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,140,    private static final double TANGENT_TABLE_A[] = new double[14];,1,0,0,0,4,6,0,0,3,4,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,143,    private static final double TANGENT_TABLE_B[] = new double[14];,1,0,0,0,4,6,0,0,3,4,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,146,    private static final long RECIP_2PI[] = new long[] {,1,0,0,0,5,6,0,0,3,4,52,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,167,    private static final long PI_O_4_BITS[] = new long[] {,1,0,0,0,5,6,0,0,3,4,54,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,175,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",1,0,0,0,4,4,0,0,3,4,126,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,178,"    private static final double CBRTTWO[] = { 0.6299605249474366,",1,0,0,0,3,4,0,0,3,4,61,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,208,        FACT[0] = 1.0;,0,0,1,0,2,0,0,0,1,3,14,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,209,        for (i = 1; i < FACT.length; i++) {,5,1,0,1,3,1,0,0,2,6,35,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,210,            FACT[i] = FACT[i-1] * i;,2,2,1,0,4,0,0,0,1,5,24,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,213,        double tmp[] = new double[2];,1,0,0,0,4,3,0,0,0,3,29,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,214,        double recip[] = new double[2];,1,0,0,0,4,3,0,0,0,3,31,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,217,        for (i = 0; i < 750; i++) {,3,1,0,1,3,1,0,0,2,6,27,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,218,"            expint(i, tmp);",0,0,0,0,2,0,3,0,1,3,15,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,219,            EXP_INT_TABLE_A[i+750] = tmp[0];,1,1,1,0,4,0,0,0,1,5,32,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,220,            EXP_INT_TABLE_B[i+750] = tmp[1];,1,1,1,0,4,0,0,0,1,5,32,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,222,            if (i != 0) {,1,1,0,1,3,1,0,0,0,5,13,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,224,"                splitReciprocal(tmp, recip);",0,0,0,0,2,0,3,0,1,3,28,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,225,                EXP_INT_TABLE_A[750-i] = recip[0];,1,1,1,0,4,0,0,0,1,5,34,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,226,                EXP_INT_TABLE_B[750-i] = recip[1];,1,1,1,0,4,0,0,0,1,5,34,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,231,        for (i = 0; i < EXP_FRAC_TABLE_A.length; i++) {,5,1,0,1,3,1,0,0,2,6,47,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,232,"            slowexp(i/1024.0, tmp);",1,1,0,0,2,0,2,0,1,5,23,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,233,            EXP_FRAC_TABLE_A[i] = tmp[0];,0,0,1,0,4,0,0,0,1,3,29,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,234,            EXP_FRAC_TABLE_B[i] = tmp[1];,0,0,1,0,4,0,0,0,1,3,29,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,238,        for (i = 0; i < LN_MANT.length; i++) {,5,1,0,1,3,1,0,0,2,6,38,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,239,            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,2,2,0,4,8,2,2,0,0,6,79,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,240,            LN_MANT[i] = slowLog(d);,0,0,1,1,4,0,2,0,2,5,24,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,244,        buildSinCosTables();,0,0,0,1,2,0,1,0,1,4,20,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,245,    },0,0,0,0,1,0,0,0,0,1,1,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,987,        final double xs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,988,        final double ys[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,989,        final double facts[] = new double[2];,1,0,0,0,4,4,0,0,1,4,37,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,990,        final double as[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,991,"        split(x, xs);",0,0,0,0,2,0,3,0,1,3,13,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,992,        ys[0] = ys[1] = 0.0;,0,0,1,0,4,0,0,0,2,3,20,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,994,        for (int i = 19; i >= 0; i--) {,3,1,0,1,3,2,0,0,1,6,31,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,995,"            splitMult(xs, ys, as);",0,0,0,0,2,0,4,0,1,3,22,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,996,            ys[0] = as[0];,0,0,1,0,4,0,0,0,1,3,14,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,997,            ys[1] = as[1];,0,0,1,0,4,0,0,0,1,3,14,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,999,"            split(FACT[i], as);",0,0,1,0,4,0,2,0,1,4,19,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1000,"            splitReciprocal(as, facts);",0,0,0,0,2,0,3,0,1,3,27,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1002,"            splitAdd(ys, facts, as);",0,0,0,0,2,0,4,0,1,3,24,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1003,            ys[0] = as[0];,0,0,1,0,4,0,0,0,1,3,14,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1004,            ys[1] = as[1];,0,0,1,0,4,0,0,0,1,3,14,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1007,        if (result != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1008,            result[0] = ys[0];,0,0,1,0,4,0,0,0,1,3,18,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1009,            result[1] = ys[1];,0,0,1,0,4,0,0,0,1,3,18,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1012,        return ys[0] + ys[1];,0,1,1,0,4,1,0,0,0,4,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1021,        if (d < 8e298 && d > -8e298) {,2,3,0,1,3,1,0,0,1,6,30,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1022,            final double a = d * HEX_40000000;,3,1,0,0,0,2,0,0,1,4,34,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1023,            split[0] = (d + a) - a;,3,2,1,1,4,0,0,0,1,6,23,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1024,            split[1] = d - split[0];,1,1,1,0,4,0,0,0,1,5,24,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1025,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1030,    },0,0,0,0,1,0,0,0,0,1,1,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1037,        final double c = a[0] + a[1];,1,1,1,0,4,2,0,0,1,6,29,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1038,        final double d = -(c - a[0] - a[1]);,2,1,1,1,6,2,0,0,2,7,36,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1040,        if (c < 8e298 && c > -8e298) {,2,3,0,1,3,1,0,0,1,6,30,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1041,            double z = c * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,28,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1042,            a[0] = (c + z) - z;,3,2,1,1,4,0,0,0,1,6,19,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1043,            a[1] = c - a[0] + d;,2,2,1,0,4,0,0,0,1,5,20,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1044,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1045,            double z = c * 9.31322574615478515625E-10;,2,1,0,0,0,1,0,0,0,3,42,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1046,            a[0] = (c + z - c) * HEX_40000000;,4,3,1,1,4,0,0,0,1,6,34,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1047,            a[1] = c - a[0] + d;,2,2,1,0,4,0,0,0,1,5,20,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1049,    },0,0,0,0,1,0,0,0,0,1,1,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1057,        ans[0] = a[0] * b[0];,0,1,1,0,6,0,0,0,1,4,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1058,        ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];,0,5,1,0,14,0,0,0,1,4,49,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1061,        resplit(ans);,0,0,0,1,2,0,2,0,1,4,13,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1062,    },0,0,0,0,1,0,0,0,0,1,1,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1070,        ans[0] = a[0] + b[0];,0,1,1,0,6,0,0,0,1,4,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1071,        ans[1] = a[1] + b[1];,0,1,1,0,6,0,0,0,1,4,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1073,        resplit(ans);,0,0,0,1,2,0,2,0,1,4,13,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1074,    },0,0,0,0,1,0,0,0,0,1,1,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1095,        final double b = 1.0/4194304.0;,1,1,0,0,0,2,0,0,1,4,31,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1096,        final double a = 1.0 - b;,2,1,0,0,0,2,0,0,1,4,25,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1098,        if (in[0] == 0.0) {,0,1,1,1,5,1,0,0,0,5,19,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1103,        result[0] = a / in[0];,1,1,1,0,4,0,0,0,1,5,22,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1104,        result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);,2,7,1,1,18,0,0,0,1,6,60,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1106,        if (result[1] != result[1]) { // can happen if result[1] is NAN,0,1,1,1,9,2,0,0,0,5,63,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1107,            result[1] = 0.0;,0,0,1,0,2,0,0,0,1,3,16,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1111,        resplit(result);,0,0,0,1,2,0,2,0,1,4,16,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1113,        for (int i = 0; i < 2; i++) {,3,1,0,1,3,2,0,0,1,6,29,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1115,            double err = 1.0 - result[0] * in[0] - result[0] * in[1] -,1,6,1,0,8,1,0,0,0,5,58,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1118,            err = err * (result[0] + result[1]);,2,2,1,1,6,0,0,0,1,6,36,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1120,            result[1] += err;,1,0,1,0,2,0,0,0,1,4,17,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1122,    },0,0,0,0,1,0,0,0,0,1,1,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1130,        final double xs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1131,        final double ys[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1132,        final double zs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1135,"        split(a[0], xs);",0,0,1,0,4,0,2,0,1,4,16,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1136,"        split(b[0], ys);",0,0,1,0,4,0,2,0,1,4,16,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1137,"        splitMult(xs, ys, zs);",0,0,0,0,2,0,4,0,1,3,22,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1139,        result[0] = zs[0];,0,0,1,0,4,0,0,0,1,3,18,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1140,        result[1] = zs[1];,0,0,1,0,4,0,0,0,1,3,18,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1143,"        split(b[1], ys);",0,0,1,0,4,0,2,0,1,4,16,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1144,"        splitMult(xs, ys, zs);",0,0,0,0,2,0,4,0,1,3,22,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1146,        double tmp = result[0] + zs[0];,1,1,1,0,4,1,0,0,0,5,31,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1147,        result[1] = result[1] - (tmp - result[0] - zs[0]);,1,2,1,1,10,0,0,0,1,6,50,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1148,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1149,        tmp = result[0] + zs[1];,1,1,1,0,4,0,0,0,1,5,24,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1150,        result[1] = result[1] - (tmp - result[0] - zs[1]);,1,2,1,1,10,0,0,0,1,6,50,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1151,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1154,"        split(a[1], xs);",0,0,1,0,4,0,2,0,1,4,16,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1155,"        split(b[0], ys);",0,0,1,0,4,0,2,0,1,4,16,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1156,"        splitMult(xs, ys, zs);",0,0,0,0,2,0,4,0,1,3,22,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1158,        tmp = result[0] + zs[0];,1,1,1,0,4,0,0,0,1,5,24,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1159,        result[1] = result[1] - (tmp - result[0] - zs[0]);,1,2,1,1,10,0,0,0,1,6,50,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1160,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1161,        tmp = result[0] + zs[1];,1,1,1,0,4,0,0,0,1,5,24,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1162,        result[1] = result[1] - (tmp - result[0] - zs[1]);,1,2,1,1,10,0,0,0,1,6,50,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1163,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1166,"        split(a[1], xs);",0,0,1,0,4,0,2,0,1,4,16,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1167,"        split(b[1], ys);",0,0,1,0,4,0,2,0,1,4,16,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1168,"        splitMult(xs, ys, zs);",0,0,0,0,2,0,4,0,1,3,22,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1170,        tmp = result[0] + zs[0];,1,1,1,0,4,0,0,0,1,5,24,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1171,        result[1] = result[1] - (tmp - result[0] - zs[0]);,1,2,1,1,10,0,0,0,1,6,50,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1172,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1173,        tmp = result[0] + zs[1];,1,1,1,0,4,0,0,0,1,5,24,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1174,        result[1] = result[1] - (tmp - result[0] - zs[1]);,1,2,1,1,10,0,0,0,1,6,50,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1175,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1176,    },0,0,0,0,1,0,0,0,0,1,1,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1185,        final double xs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1186,        final double as[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1187,        final double ys[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1196,        xs[0] = 2.718281828459045;,0,0,1,0,2,0,0,0,1,3,26,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1197,        xs[1] = 1.4456468917292502E-16;,0,0,1,0,2,0,0,0,1,3,31,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1199,"        split(1.0, ys);",0,0,0,0,2,0,2,0,1,3,15,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1201,        while (p > 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1202,            if ((p & 1) != 0) {,1,2,0,2,5,1,0,0,0,5,19,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1203,"                quadMult(ys, xs, as);",0,0,0,0,2,0,4,0,1,3,21,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1204,                ys[0] = as[0]; ys[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1207,"            quadMult(xs, xs, as);",0,0,0,0,2,0,4,0,1,3,21,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1208,            xs[0] = as[0]; xs[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1210,            p >>= 1;,1,0,0,0,0,0,0,0,1,2,8,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1213,        if (result != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1214,            result[0] = ys[0];,0,0,1,0,4,0,0,0,1,3,18,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1215,            result[1] = ys[1];,0,0,1,0,4,0,0,0,1,3,18,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1217,            resplit(result);,0,0,0,1,2,0,2,0,1,4,16,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1220,        return ys[0] + ys[1];,0,1,1,0,4,1,0,0,0,4,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1716,        double x[] = new double[2];,1,0,0,0,4,3,0,0,0,3,27,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1717,        double x2[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1718,        double y[] = new double[2];,1,0,0,0,4,3,0,0,0,3,27,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1719,        double a[] = new double[2];,1,0,0,0,4,3,0,0,0,3,27,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1721,"        split(xi, x);",0,0,0,0,2,0,3,0,1,3,13,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1724,        x[0] += 1.0;,0,0,1,0,2,0,0,0,1,3,12,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1725,        resplit(x);,0,0,0,1,2,0,2,0,1,4,11,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1726,"        splitReciprocal(x, a);",0,0,0,0,2,0,3,0,1,3,22,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1727,        x[0] -= 2.0;,0,0,1,0,2,0,0,0,1,3,12,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1728,        resplit(x);,0,0,0,1,2,0,2,0,1,4,11,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1729,"        splitMult(x, a, y);",0,0,0,0,2,0,4,0,1,3,19,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1730,        x[0] = y[0];,0,0,1,0,4,0,0,0,1,3,12,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1731,        x[1] = y[1];,0,0,1,0,4,0,0,0,1,3,12,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1734,"        splitMult(x, x, x2);",0,0,0,0,2,0,4,0,1,3,20,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1740,        y[0] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][0];,2,1,1,0,6,0,0,0,1,5,48,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1741,        y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];,2,1,1,0,6,0,0,0,1,5,48,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1743,        for (int i = LN_SPLIT_COEF.length-2; i >= 0; i--) {,5,2,0,1,3,2,0,0,1,6,51,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1744,"            splitMult(y, x2, a);",0,0,0,0,2,0,4,0,1,3,20,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1745,            y[0] = a[0];,0,0,1,0,4,0,0,0,1,3,12,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1746,            y[1] = a[1];,0,0,1,0,4,0,0,0,1,3,12,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1747,"            splitAdd(y, LN_SPLIT_COEF[i], a);",0,0,1,0,4,0,3,0,1,4,33,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1748,            y[0] = a[0];,0,0,1,0,4,0,0,0,1,3,12,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1749,            y[1] = a[1];,0,0,1,0,4,0,0,0,1,3,12,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1752,"        splitMult(y, x, a);",0,0,0,0,2,0,4,0,1,3,19,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1753,        y[0] = a[0];,0,0,1,0,4,0,0,0,1,3,12,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1754,        y[1] = a[1];,0,0,1,0,4,0,0,0,1,3,12,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1756,        return y;,1,0,0,0,0,1,0,0,0,2,9,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1766,        final double xs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1767,        final double ys[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1768,        final double facts[] = new double[2];,1,0,0,0,4,4,0,0,1,4,37,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1769,        final double as[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1770,"        split(x, xs);",0,0,0,0,2,0,3,0,1,3,13,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1771,        ys[0] = ys[1] = 0.0;,0,0,1,0,4,0,0,0,2,3,20,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1773,        for (int i = 19; i >= 0; i--) {,3,1,0,1,3,2,0,0,1,6,31,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1774,"            splitMult(xs, ys, as);",0,0,0,0,2,0,4,0,1,3,22,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1775,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1777,            if ( (i & 1) == 0) {,1,2,0,2,5,1,0,0,0,5,20,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1778,                continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1781,"            split(FACT[i], as);",0,0,1,0,4,0,2,0,1,4,19,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1782,"            splitReciprocal(as, facts);",0,0,0,0,2,0,3,0,1,3,27,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1784,            if ( (i & 2) != 0 ) {,1,2,0,2,5,1,0,0,0,5,21,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1785,                facts[0] = -facts[0];,0,0,1,0,4,0,0,0,2,3,21,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1786,                facts[1] = -facts[1];,0,0,1,0,4,0,0,0,2,3,21,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1789,"            splitAdd(ys, facts, as);",0,0,0,0,2,0,4,0,1,3,24,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1790,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1793,        if (result != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1794,            result[0] = ys[0];,0,0,1,0,4,0,0,0,1,3,18,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1795,            result[1] = ys[1];,0,0,1,0,4,0,0,0,1,3,18,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1798,        return ys[0] + ys[1];,0,1,1,0,4,1,0,0,0,4,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1809,        final double xs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1810,        final double ys[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1811,        final double facts[] = new double[2];,1,0,0,0,4,4,0,0,1,4,37,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1812,        final double as[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1813,"        split(x, xs);",0,0,0,0,2,0,3,0,1,3,13,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1814,        ys[0] = ys[1] = 0.0;,0,0,1,0,4,0,0,0,2,3,20,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1816,        for (int i = 19; i >= 0; i--) {,3,1,0,1,3,2,0,0,1,6,31,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1817,"            splitMult(xs, ys, as);",0,0,0,0,2,0,4,0,1,3,22,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1818,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1820,            if ( (i & 1) != 0) {,1,2,0,2,5,1,0,0,0,5,20,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1821,                continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1824,"            split(FACT[i], as);",0,0,1,0,4,0,2,0,1,4,19,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1825,"            splitReciprocal(as, facts);",0,0,0,0,2,0,3,0,1,3,27,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1827,            if ( (i & 2) != 0 ) {,1,2,0,2,5,1,0,0,0,5,21,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1828,                facts[0] = -facts[0];,0,0,1,0,4,0,0,0,2,3,21,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1829,                facts[1] = -facts[1];,0,0,1,0,4,0,0,0,2,3,21,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1832,"            splitAdd(ys, facts, as);",0,0,0,0,2,0,4,0,1,3,24,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1833,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1836,        if (result != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1837,            result[0] = ys[0];,0,0,1,0,4,0,0,0,1,3,18,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1838,            result[1] = ys[1];,0,0,1,0,4,0,0,0,1,3,18,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1841,        return ys[0] + ys[1];,0,1,1,0,4,1,0,0,0,4,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1847,        final double result[] = new double[2];,1,0,0,0,4,4,0,0,1,4,38,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1850,        for (int i = 0; i < 7; i++) {,3,1,0,1,3,2,0,0,1,6,29,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1851,            double x = i / 8.0;,2,1,0,0,0,1,0,0,0,3,19,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1853,"            slowSin(x, result);",0,0,0,0,2,0,3,0,1,3,19,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1854,            SINE_TABLE_A[i] = result[0];,0,0,1,0,4,0,0,0,1,3,28,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1855,            SINE_TABLE_B[i] = result[1];,0,0,1,0,4,0,0,0,1,3,28,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1857,"            slowCos(x, result);",0,0,0,0,2,0,3,0,1,3,19,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1858,            COSINE_TABLE_A[i] = result[0];,0,0,1,0,4,0,0,0,1,3,30,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1859,            COSINE_TABLE_B[i] = result[1];,0,0,1,0,4,0,0,0,1,3,30,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1863,        for (int i = 7; i < 14; i++) {,3,1,0,1,3,2,0,0,1,6,30,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1864,            double xs[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1865,            double ys[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1866,            double as[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1867,            double bs[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1868,            double temps[] = new double[2];,1,0,0,0,4,3,0,0,0,3,31,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1870,            if ( (i & 1) == 0) {,1,2,0,2,5,1,0,0,0,5,20,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1872,                xs[0] = SINE_TABLE_A[i/2];,1,1,1,0,4,0,0,0,1,5,26,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1873,                xs[1] = SINE_TABLE_B[i/2];,1,1,1,0,4,0,0,0,1,5,26,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1874,                ys[0] = COSINE_TABLE_A[i/2];,1,1,1,0,4,0,0,0,1,5,28,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1875,                ys[1] = COSINE_TABLE_B[i/2];,1,1,1,0,4,0,0,0,1,5,28,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1878,"                splitMult(xs, ys, result);",0,0,0,0,2,0,4,0,1,3,26,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1879,                SINE_TABLE_A[i] = result[0] * 2.0;,0,1,1,0,4,0,0,0,1,4,34,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1880,                SINE_TABLE_B[i] = result[1] * 2.0;,0,1,1,0,4,0,0,0,1,4,34,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1883,"                splitMult(ys, ys, as);",0,0,0,0,2,0,4,0,1,3,22,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1884,"                splitMult(xs, xs, temps);",0,0,0,0,2,0,4,0,1,3,25,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1885,                temps[0] = -temps[0];,0,0,1,0,4,0,0,0,2,3,21,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1886,                temps[1] = -temps[1];,0,0,1,0,4,0,0,0,2,3,21,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1887,"                splitAdd(as, temps, result);",0,0,0,0,2,0,4,0,1,3,28,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1888,                COSINE_TABLE_A[i] = result[0];,0,0,1,0,4,0,0,0,1,3,30,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1889,                COSINE_TABLE_B[i] = result[1];,0,0,1,0,4,0,0,0,1,3,30,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1891,                xs[0] = SINE_TABLE_A[i/2];,1,1,1,0,4,0,0,0,1,5,26,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1892,                xs[1] = SINE_TABLE_B[i/2];,1,1,1,0,4,0,0,0,1,5,26,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1893,                ys[0] = COSINE_TABLE_A[i/2];,1,1,1,0,4,0,0,0,1,5,28,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1894,                ys[1] = COSINE_TABLE_B[i/2];,1,1,1,0,4,0,0,0,1,5,28,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1895,                as[0] = SINE_TABLE_A[i/2+1];,1,2,1,0,4,0,0,0,1,5,28,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1896,                as[1] = SINE_TABLE_B[i/2+1];,1,2,1,0,4,0,0,0,1,5,28,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1897,                bs[0] = COSINE_TABLE_A[i/2+1];,1,2,1,0,4,0,0,0,1,5,30,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1898,                bs[1] = COSINE_TABLE_B[i/2+1];,1,2,1,0,4,0,0,0,1,5,30,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1901,"                splitMult(xs, bs, temps);",0,0,0,0,2,0,4,0,1,3,25,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1902,"                splitMult(ys, as, result);",0,0,0,0,2,0,4,0,1,3,26,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1903,"                splitAdd(result, temps, result);",0,0,0,0,2,0,4,0,1,3,32,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1904,                SINE_TABLE_A[i] = result[0];,0,0,1,0,4,0,0,0,1,3,28,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1905,                SINE_TABLE_B[i] = result[1];,0,0,1,0,4,0,0,0,1,3,28,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1908,"                splitMult(ys, bs, result);",0,0,0,0,2,0,4,0,1,3,26,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1909,"                splitMult(xs, as, temps);",0,0,0,0,2,0,4,0,1,3,25,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1910,                temps[0] = -temps[0];,0,0,1,0,4,0,0,0,2,3,21,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1911,                temps[1] = -temps[1];,0,0,1,0,4,0,0,0,2,3,21,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1912,"                splitAdd(result, temps, result);",0,0,0,0,2,0,4,0,1,3,32,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1913,                COSINE_TABLE_A[i] = result[0];,0,0,1,0,4,0,0,0,1,3,30,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1914,                COSINE_TABLE_B[i] = result[1];,0,0,1,0,4,0,0,0,1,3,30,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1919,        for (int i = 0; i < 14; i++) {,3,1,0,1,3,2,0,0,1,6,30,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1920,            double xs[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1921,            double ys[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1922,            double as[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1924,            as[0] = COSINE_TABLE_A[i];,0,0,1,0,4,0,0,0,1,3,26,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1925,            as[1] = COSINE_TABLE_B[i];,0,0,1,0,4,0,0,0,1,3,26,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1927,"            splitReciprocal(as, ys);",0,0,0,0,2,0,3,0,1,3,24,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1929,            xs[0] = SINE_TABLE_A[i];,0,0,1,0,4,0,0,0,1,3,24,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1930,            xs[1] = SINE_TABLE_B[i];,0,0,1,0,4,0,0,0,1,3,24,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1932,"            splitMult(xs, ys, as);",0,0,0,0,2,0,4,0,1,3,22,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1934,            TANGENT_TABLE_A[i] = as[0];,0,0,1,0,4,0,0,0,1,3,27,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1935,            TANGENT_TABLE_B[i] = as[1];,0,0,1,0,4,0,0,0,1,3,27,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1938,    },0,0,0,0,1,0,0,0,0,1,1,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3784,        return (a <= b) ? a : b;,4,1,0,1,2,1,0,0,0,5,24,5,0.25,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,69,"        this(random, EmptyClusterStrategy.LARGEST_VARIANCE);",3,0,0,0,2,1,0,0,0,3,52,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,70,    },0,0,0,0,1,0,0,0,0,1,1,2,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,134,        return clusters;,1,0,0,0,0,1,0,0,0,2,16,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,175,            int sum = 0;,1,0,0,0,0,1,0,0,0,2,12,7,0.5,1,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,176,            for (int i = 0; i < pointSet.size(); i++) {,3,1,0,2,5,2,2,0,1,7,43,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,177,                final T p = pointSet.get(i);,1,0,0,1,2,1,3,1,1,7,28,8,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,178,"                final Cluster<T> nearest = getNearestCluster(resultSet, p);",1,0,0,0,2,1,3,2,2,6,59,8,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,179,                final double d = p.distanceFrom(nearest.getCenter());,1,0,0,2,4,2,4,0,1,6,53,8,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,180,                sum += d * d;,3,1,0,0,0,0,0,0,1,3,13,8,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,181,                dx2[i] = sum;,1,0,1,0,2,0,0,0,1,4,13,8,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,186,            final double r = random.nextDouble() * sum;,2,1,0,1,2,2,2,0,1,7,43,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,187,            for (int i = 0 ; i < dx2.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,188,                if (dx2[i] >= r) {,1,1,1,1,5,1,0,0,0,6,18,8,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,189,                    final T p = pointSet.remove(i);,1,0,0,1,2,1,3,1,1,7,31,10,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,190,                    resultSet.add(new Cluster<T>(p));,1,0,0,2,4,1,2,2,1,7,33,11,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,191,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,194,        },0,0,0,0,1,0,0,0,0,1,1,2,0.5,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,44,public final class MathUtils {,1,0,0,0,1,3,0,0,2,4,30,1,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,89,    private static final long[] FACTORIALS = new long[] {,1,0,0,0,5,6,0,0,3,4,53,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1873,      double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1874,      for (int i = 0; i < p1.length; i++) {,5,1,0,1,3,2,0,0,1,6,37,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1875,          final double dp = p1[i] - p2[i];,1,1,1,0,4,2,0,0,1,6,32,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1876,          sum += dp * dp;,3,1,0,0,0,0,0,0,1,3,15,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1878,      return FastMath.sqrt(sum);,0,0,0,1,2,1,3,0,0,4,26,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,55,    private static final double EXP_INT_TABLE_A[] = new double[1500];,1,0,0,0,4,6,0,0,3,4,65,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,60,    private static final double EXP_INT_TABLE_B[] = new double[1500];,1,0,0,0,4,6,0,0,3,4,65,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,65,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,1,0,0,0,4,6,0,0,3,4,66,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,70,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,1,0,0,0,4,6,0,0,3,4,66,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,73,    private static final double FACT[] = new double[20];,1,0,0,0,4,6,0,0,3,4,52,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,76,    private static final double LN_MANT[][] = new double[1024][];,1,0,0,0,8,6,0,0,3,4,61,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,85,    private static final double LN_SPLIT_COEF[][] = {,1,0,0,0,5,4,0,0,3,4,49,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,105,    private static final double LN_QUICK_COEF[][] = {,1,0,0,0,5,4,0,0,3,4,49,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,118,    private static final double LN_HI_PREC_COEF[][] = {,1,0,0,0,5,4,0,0,3,4,51,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,128,    private static final double SINE_TABLE_A[] = new double[14];,1,0,0,0,4,6,0,0,3,4,60,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,131,    private static final double SINE_TABLE_B[] = new double[14];,1,0,0,0,4,6,0,0,3,4,60,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,134,    private static final double COSINE_TABLE_A[] = new double[14];,1,0,0,0,4,6,0,0,3,4,62,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,137,    private static final double COSINE_TABLE_B[] = new double[14];,1,0,0,0,4,6,0,0,3,4,62,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,140,    private static final double TANGENT_TABLE_A[] = new double[14];,1,0,0,0,4,6,0,0,3,4,63,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,143,    private static final double TANGENT_TABLE_B[] = new double[14];,1,0,0,0,4,6,0,0,3,4,63,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,146,    private static final long RECIP_2PI[] = new long[] {,1,0,0,0,5,6,0,0,3,4,52,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,167,    private static final long PI_O_4_BITS[] = new long[] {,1,0,0,0,5,6,0,0,3,4,54,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,175,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",1,0,0,0,4,4,0,0,3,4,126,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,178,"    private static final double CBRTTWO[] = { 0.6299605249474366,",1,0,0,0,3,4,0,0,3,4,61,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,208,        FACT[0] = 1.0;,0,0,1,0,2,0,0,0,1,3,14,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,209,        for (i = 1; i < FACT.length; i++) {,5,1,0,1,3,1,0,0,2,6,35,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,210,            FACT[i] = FACT[i-1] * i;,2,2,1,0,4,0,0,0,1,5,24,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,213,        double tmp[] = new double[2];,1,0,0,0,4,3,0,0,0,3,29,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,214,        double recip[] = new double[2];,1,0,0,0,4,3,0,0,0,3,31,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,217,        for (i = 0; i < 750; i++) {,3,1,0,1,3,1,0,0,2,6,27,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,218,"            expint(i, tmp);",0,0,0,0,2,0,3,0,1,3,15,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,219,            EXP_INT_TABLE_A[i+750] = tmp[0];,1,1,1,0,4,0,0,0,1,5,32,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,220,            EXP_INT_TABLE_B[i+750] = tmp[1];,1,1,1,0,4,0,0,0,1,5,32,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,222,            if (i != 0) {,1,1,0,1,3,1,0,0,0,5,13,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,224,"                splitReciprocal(tmp, recip);",0,0,0,0,2,0,3,0,1,3,28,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,225,                EXP_INT_TABLE_A[750-i] = recip[0];,1,1,1,0,4,0,0,0,1,5,34,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,226,                EXP_INT_TABLE_B[750-i] = recip[1];,1,1,1,0,4,0,0,0,1,5,34,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,231,        for (i = 0; i < EXP_FRAC_TABLE_A.length; i++) {,5,1,0,1,3,1,0,0,2,6,47,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,232,"            slowexp(i/1024.0, tmp);",1,1,0,0,2,0,2,0,1,5,23,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,233,            EXP_FRAC_TABLE_A[i] = tmp[0];,0,0,1,0,4,0,0,0,1,3,29,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,234,            EXP_FRAC_TABLE_B[i] = tmp[1];,0,0,1,0,4,0,0,0,1,3,29,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,238,        for (i = 0; i < LN_MANT.length; i++) {,5,1,0,1,3,1,0,0,2,6,38,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,239,            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,2,2,0,4,8,2,2,0,0,6,79,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,240,            LN_MANT[i] = slowLog(d);,0,0,1,1,4,0,2,0,2,5,24,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,244,        buildSinCosTables();,0,0,0,1,2,0,1,0,1,4,20,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,245,    },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,277,        return Math.sqrt(a);,0,0,0,1,2,1,3,0,0,4,20,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,987,        final double xs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,988,        final double ys[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,989,        final double facts[] = new double[2];,1,0,0,0,4,4,0,0,1,4,37,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,990,        final double as[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,991,"        split(x, xs);",0,0,0,0,2,0,3,0,1,3,13,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,992,        ys[0] = ys[1] = 0.0;,0,0,1,0,4,0,0,0,2,3,20,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,994,        for (int i = 19; i >= 0; i--) {,3,1,0,1,3,2,0,0,1,6,31,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,995,"            splitMult(xs, ys, as);",0,0,0,0,2,0,4,0,1,3,22,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,996,            ys[0] = as[0];,0,0,1,0,4,0,0,0,1,3,14,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,997,            ys[1] = as[1];,0,0,1,0,4,0,0,0,1,3,14,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,999,"            split(FACT[i], as);",0,0,1,0,4,0,2,0,1,4,19,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1000,"            splitReciprocal(as, facts);",0,0,0,0,2,0,3,0,1,3,27,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1002,"            splitAdd(ys, facts, as);",0,0,0,0,2,0,4,0,1,3,24,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1003,            ys[0] = as[0];,0,0,1,0,4,0,0,0,1,3,14,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1004,            ys[1] = as[1];,0,0,1,0,4,0,0,0,1,3,14,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1007,        if (result != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1008,            result[0] = ys[0];,0,0,1,0,4,0,0,0,1,3,18,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1009,            result[1] = ys[1];,0,0,1,0,4,0,0,0,1,3,18,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1012,        return ys[0] + ys[1];,0,1,1,0,4,1,0,0,0,4,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1021,        if (d < 8e298 && d > -8e298) {,2,3,0,1,3,1,0,0,1,6,30,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1022,            final double a = d * HEX_40000000;,3,1,0,0,0,2,0,0,1,4,34,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1023,            split[0] = (d + a) - a;,3,2,1,1,4,0,0,0,1,6,23,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1024,            split[1] = d - split[0];,1,1,1,0,4,0,0,0,1,5,24,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1025,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1030,    },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1037,        final double c = a[0] + a[1];,1,1,1,0,4,2,0,0,1,6,29,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1038,        final double d = -(c - a[0] - a[1]);,2,1,1,1,6,2,0,0,2,7,36,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1040,        if (c < 8e298 && c > -8e298) {,2,3,0,1,3,1,0,0,1,6,30,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1041,            double z = c * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,28,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1042,            a[0] = (c + z) - z;,3,2,1,1,4,0,0,0,1,6,19,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1043,            a[1] = c - a[0] + d;,2,2,1,0,4,0,0,0,1,5,20,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1044,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1045,            double z = c * 9.31322574615478515625E-10;,2,1,0,0,0,1,0,0,0,3,42,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1046,            a[0] = (c + z - c) * HEX_40000000;,4,3,1,1,4,0,0,0,1,6,34,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1047,            a[1] = c - a[0] + d;,2,2,1,0,4,0,0,0,1,5,20,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1049,    },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1057,        ans[0] = a[0] * b[0];,0,1,1,0,6,0,0,0,1,4,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1058,        ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];,0,5,1,0,14,0,0,0,1,4,49,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1061,        resplit(ans);,0,0,0,1,2,0,2,0,1,4,13,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1062,    },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1070,        ans[0] = a[0] + b[0];,0,1,1,0,6,0,0,0,1,4,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1071,        ans[1] = a[1] + b[1];,0,1,1,0,6,0,0,0,1,4,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1073,        resplit(ans);,0,0,0,1,2,0,2,0,1,4,13,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1074,    },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1095,        final double b = 1.0/4194304.0;,1,1,0,0,0,2,0,0,1,4,31,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1096,        final double a = 1.0 - b;,2,1,0,0,0,2,0,0,1,4,25,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1098,        if (in[0] == 0.0) {,0,1,1,1,5,1,0,0,0,5,19,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1103,        result[0] = a / in[0];,1,1,1,0,4,0,0,0,1,5,22,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1104,        result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);,2,7,1,1,18,0,0,0,1,6,60,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1106,        if (result[1] != result[1]) { // can happen if result[1] is NAN,0,1,1,1,9,2,0,0,0,5,63,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1107,            result[1] = 0.0;,0,0,1,0,2,0,0,0,1,3,16,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1111,        resplit(result);,0,0,0,1,2,0,2,0,1,4,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1113,        for (int i = 0; i < 2; i++) {,3,1,0,1,3,2,0,0,1,6,29,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1115,            double err = 1.0 - result[0] * in[0] - result[0] * in[1] -,1,6,1,0,8,1,0,0,0,5,58,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1118,            err = err * (result[0] + result[1]);,2,2,1,1,6,0,0,0,1,6,36,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1120,            result[1] += err;,1,0,1,0,2,0,0,0,1,4,17,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1122,    },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1130,        final double xs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1131,        final double ys[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1132,        final double zs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1135,"        split(a[0], xs);",0,0,1,0,4,0,2,0,1,4,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1136,"        split(b[0], ys);",0,0,1,0,4,0,2,0,1,4,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1137,"        splitMult(xs, ys, zs);",0,0,0,0,2,0,4,0,1,3,22,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1139,        result[0] = zs[0];,0,0,1,0,4,0,0,0,1,3,18,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1140,        result[1] = zs[1];,0,0,1,0,4,0,0,0,1,3,18,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1143,"        split(b[1], ys);",0,0,1,0,4,0,2,0,1,4,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1144,"        splitMult(xs, ys, zs);",0,0,0,0,2,0,4,0,1,3,22,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1146,        double tmp = result[0] + zs[0];,1,1,1,0,4,1,0,0,0,5,31,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1147,        result[1] = result[1] - (tmp - result[0] - zs[0]);,1,2,1,1,10,0,0,0,1,6,50,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1148,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1149,        tmp = result[0] + zs[1];,1,1,1,0,4,0,0,0,1,5,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1150,        result[1] = result[1] - (tmp - result[0] - zs[1]);,1,2,1,1,10,0,0,0,1,6,50,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1151,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1154,"        split(a[1], xs);",0,0,1,0,4,0,2,0,1,4,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1155,"        split(b[0], ys);",0,0,1,0,4,0,2,0,1,4,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1156,"        splitMult(xs, ys, zs);",0,0,0,0,2,0,4,0,1,3,22,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1158,        tmp = result[0] + zs[0];,1,1,1,0,4,0,0,0,1,5,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1159,        result[1] = result[1] - (tmp - result[0] - zs[0]);,1,2,1,1,10,0,0,0,1,6,50,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1160,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1161,        tmp = result[0] + zs[1];,1,1,1,0,4,0,0,0,1,5,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1162,        result[1] = result[1] - (tmp - result[0] - zs[1]);,1,2,1,1,10,0,0,0,1,6,50,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1163,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1166,"        split(a[1], xs);",0,0,1,0,4,0,2,0,1,4,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1167,"        split(b[1], ys);",0,0,1,0,4,0,2,0,1,4,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1168,"        splitMult(xs, ys, zs);",0,0,0,0,2,0,4,0,1,3,22,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1170,        tmp = result[0] + zs[0];,1,1,1,0,4,0,0,0,1,5,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1171,        result[1] = result[1] - (tmp - result[0] - zs[0]);,1,2,1,1,10,0,0,0,1,6,50,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1172,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1173,        tmp = result[0] + zs[1];,1,1,1,0,4,0,0,0,1,5,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1174,        result[1] = result[1] - (tmp - result[0] - zs[1]);,1,2,1,1,10,0,0,0,1,6,50,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1175,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1176,    },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1185,        final double xs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1186,        final double as[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1187,        final double ys[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1196,        xs[0] = 2.718281828459045;,0,0,1,0,2,0,0,0,1,3,26,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1197,        xs[1] = 1.4456468917292502E-16;,0,0,1,0,2,0,0,0,1,3,31,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1199,"        split(1.0, ys);",0,0,0,0,2,0,2,0,1,3,15,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1201,        while (p > 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1202,            if ((p & 1) != 0) {,1,2,0,2,5,1,0,0,0,5,19,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1203,"                quadMult(ys, xs, as);",0,0,0,0,2,0,4,0,1,3,21,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1204,                ys[0] = as[0]; ys[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1207,"            quadMult(xs, xs, as);",0,0,0,0,2,0,4,0,1,3,21,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1208,            xs[0] = as[0]; xs[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1210,            p >>= 1;,1,0,0,0,0,0,0,0,1,2,8,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1213,        if (result != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1214,            result[0] = ys[0];,0,0,1,0,4,0,0,0,1,3,18,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1215,            result[1] = ys[1];,0,0,1,0,4,0,0,0,1,3,18,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1217,            resplit(result);,0,0,0,1,2,0,2,0,1,4,16,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1220,        return ys[0] + ys[1];,0,1,1,0,4,1,0,0,0,4,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1716,        double x[] = new double[2];,1,0,0,0,4,3,0,0,0,3,27,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1717,        double x2[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1718,        double y[] = new double[2];,1,0,0,0,4,3,0,0,0,3,27,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1719,        double a[] = new double[2];,1,0,0,0,4,3,0,0,0,3,27,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1721,"        split(xi, x);",0,0,0,0,2,0,3,0,1,3,13,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1724,        x[0] += 1.0;,0,0,1,0,2,0,0,0,1,3,12,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1725,        resplit(x);,0,0,0,1,2,0,2,0,1,4,11,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1726,"        splitReciprocal(x, a);",0,0,0,0,2,0,3,0,1,3,22,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1727,        x[0] -= 2.0;,0,0,1,0,2,0,0,0,1,3,12,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1728,        resplit(x);,0,0,0,1,2,0,2,0,1,4,11,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1729,"        splitMult(x, a, y);",0,0,0,0,2,0,4,0,1,3,19,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1730,        x[0] = y[0];,0,0,1,0,4,0,0,0,1,3,12,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1731,        x[1] = y[1];,0,0,1,0,4,0,0,0,1,3,12,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1734,"        splitMult(x, x, x2);",0,0,0,0,2,0,4,0,1,3,20,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1740,        y[0] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][0];,2,1,1,0,6,0,0,0,1,5,48,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1741,        y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];,2,1,1,0,6,0,0,0,1,5,48,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1743,        for (int i = LN_SPLIT_COEF.length-2; i >= 0; i--) {,5,2,0,1,3,2,0,0,1,6,51,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1744,"            splitMult(y, x2, a);",0,0,0,0,2,0,4,0,1,3,20,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1745,            y[0] = a[0];,0,0,1,0,4,0,0,0,1,3,12,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1746,            y[1] = a[1];,0,0,1,0,4,0,0,0,1,3,12,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1747,"            splitAdd(y, LN_SPLIT_COEF[i], a);",0,0,1,0,4,0,3,0,1,4,33,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1748,            y[0] = a[0];,0,0,1,0,4,0,0,0,1,3,12,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1749,            y[1] = a[1];,0,0,1,0,4,0,0,0,1,3,12,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1752,"        splitMult(y, x, a);",0,0,0,0,2,0,4,0,1,3,19,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1753,        y[0] = a[0];,0,0,1,0,4,0,0,0,1,3,12,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1754,        y[1] = a[1];,0,0,1,0,4,0,0,0,1,3,12,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1756,        return y;,1,0,0,0,0,1,0,0,0,2,9,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1766,        final double xs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1767,        final double ys[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1768,        final double facts[] = new double[2];,1,0,0,0,4,4,0,0,1,4,37,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1769,        final double as[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1770,"        split(x, xs);",0,0,0,0,2,0,3,0,1,3,13,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1771,        ys[0] = ys[1] = 0.0;,0,0,1,0,4,0,0,0,2,3,20,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1773,        for (int i = 19; i >= 0; i--) {,3,1,0,1,3,2,0,0,1,6,31,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1774,"            splitMult(xs, ys, as);",0,0,0,0,2,0,4,0,1,3,22,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1775,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1777,            if ( (i & 1) == 0) {,1,2,0,2,5,1,0,0,0,5,20,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1778,                continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1781,"            split(FACT[i], as);",0,0,1,0,4,0,2,0,1,4,19,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1782,"            splitReciprocal(as, facts);",0,0,0,0,2,0,3,0,1,3,27,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1784,            if ( (i & 2) != 0 ) {,1,2,0,2,5,1,0,0,0,5,21,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1785,                facts[0] = -facts[0];,0,0,1,0,4,0,0,0,2,3,21,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1786,                facts[1] = -facts[1];,0,0,1,0,4,0,0,0,2,3,21,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1789,"            splitAdd(ys, facts, as);",0,0,0,0,2,0,4,0,1,3,24,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1790,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1793,        if (result != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1794,            result[0] = ys[0];,0,0,1,0,4,0,0,0,1,3,18,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1795,            result[1] = ys[1];,0,0,1,0,4,0,0,0,1,3,18,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1798,        return ys[0] + ys[1];,0,1,1,0,4,1,0,0,0,4,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1809,        final double xs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1810,        final double ys[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1811,        final double facts[] = new double[2];,1,0,0,0,4,4,0,0,1,4,37,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1812,        final double as[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1813,"        split(x, xs);",0,0,0,0,2,0,3,0,1,3,13,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1814,        ys[0] = ys[1] = 0.0;,0,0,1,0,4,0,0,0,2,3,20,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1816,        for (int i = 19; i >= 0; i--) {,3,1,0,1,3,2,0,0,1,6,31,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1817,"            splitMult(xs, ys, as);",0,0,0,0,2,0,4,0,1,3,22,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1818,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1820,            if ( (i & 1) != 0) {,1,2,0,2,5,1,0,0,0,5,20,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1821,                continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1824,"            split(FACT[i], as);",0,0,1,0,4,0,2,0,1,4,19,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1825,"            splitReciprocal(as, facts);",0,0,0,0,2,0,3,0,1,3,27,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1827,            if ( (i & 2) != 0 ) {,1,2,0,2,5,1,0,0,0,5,21,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1828,                facts[0] = -facts[0];,0,0,1,0,4,0,0,0,2,3,21,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1829,                facts[1] = -facts[1];,0,0,1,0,4,0,0,0,2,3,21,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1832,"            splitAdd(ys, facts, as);",0,0,0,0,2,0,4,0,1,3,24,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1833,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1836,        if (result != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1837,            result[0] = ys[0];,0,0,1,0,4,0,0,0,1,3,18,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1838,            result[1] = ys[1];,0,0,1,0,4,0,0,0,1,3,18,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1841,        return ys[0] + ys[1];,0,1,1,0,4,1,0,0,0,4,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1847,        final double result[] = new double[2];,1,0,0,0,4,4,0,0,1,4,38,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1850,        for (int i = 0; i < 7; i++) {,3,1,0,1,3,2,0,0,1,6,29,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1851,            double x = i / 8.0;,2,1,0,0,0,1,0,0,0,3,19,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1853,"            slowSin(x, result);",0,0,0,0,2,0,3,0,1,3,19,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1854,            SINE_TABLE_A[i] = result[0];,0,0,1,0,4,0,0,0,1,3,28,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1855,            SINE_TABLE_B[i] = result[1];,0,0,1,0,4,0,0,0,1,3,28,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1857,"            slowCos(x, result);",0,0,0,0,2,0,3,0,1,3,19,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1858,            COSINE_TABLE_A[i] = result[0];,0,0,1,0,4,0,0,0,1,3,30,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1859,            COSINE_TABLE_B[i] = result[1];,0,0,1,0,4,0,0,0,1,3,30,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1863,        for (int i = 7; i < 14; i++) {,3,1,0,1,3,2,0,0,1,6,30,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1864,            double xs[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1865,            double ys[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1866,            double as[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1867,            double bs[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1868,            double temps[] = new double[2];,1,0,0,0,4,3,0,0,0,3,31,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1870,            if ( (i & 1) == 0) {,1,2,0,2,5,1,0,0,0,5,20,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1872,                xs[0] = SINE_TABLE_A[i/2];,1,1,1,0,4,0,0,0,1,5,26,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1873,                xs[1] = SINE_TABLE_B[i/2];,1,1,1,0,4,0,0,0,1,5,26,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1874,                ys[0] = COSINE_TABLE_A[i/2];,1,1,1,0,4,0,0,0,1,5,28,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1875,                ys[1] = COSINE_TABLE_B[i/2];,1,1,1,0,4,0,0,0,1,5,28,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1878,"                splitMult(xs, ys, result);",0,0,0,0,2,0,4,0,1,3,26,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1879,                SINE_TABLE_A[i] = result[0] * 2.0;,0,1,1,0,4,0,0,0,1,4,34,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1880,                SINE_TABLE_B[i] = result[1] * 2.0;,0,1,1,0,4,0,0,0,1,4,34,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1883,"                splitMult(ys, ys, as);",0,0,0,0,2,0,4,0,1,3,22,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1884,"                splitMult(xs, xs, temps);",0,0,0,0,2,0,4,0,1,3,25,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1885,                temps[0] = -temps[0];,0,0,1,0,4,0,0,0,2,3,21,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1886,                temps[1] = -temps[1];,0,0,1,0,4,0,0,0,2,3,21,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1887,"                splitAdd(as, temps, result);",0,0,0,0,2,0,4,0,1,3,28,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1888,                COSINE_TABLE_A[i] = result[0];,0,0,1,0,4,0,0,0,1,3,30,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1889,                COSINE_TABLE_B[i] = result[1];,0,0,1,0,4,0,0,0,1,3,30,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1891,                xs[0] = SINE_TABLE_A[i/2];,1,1,1,0,4,0,0,0,1,5,26,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1892,                xs[1] = SINE_TABLE_B[i/2];,1,1,1,0,4,0,0,0,1,5,26,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1893,                ys[0] = COSINE_TABLE_A[i/2];,1,1,1,0,4,0,0,0,1,5,28,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1894,                ys[1] = COSINE_TABLE_B[i/2];,1,1,1,0,4,0,0,0,1,5,28,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1895,                as[0] = SINE_TABLE_A[i/2+1];,1,2,1,0,4,0,0,0,1,5,28,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1896,                as[1] = SINE_TABLE_B[i/2+1];,1,2,1,0,4,0,0,0,1,5,28,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1897,                bs[0] = COSINE_TABLE_A[i/2+1];,1,2,1,0,4,0,0,0,1,5,30,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1898,                bs[1] = COSINE_TABLE_B[i/2+1];,1,2,1,0,4,0,0,0,1,5,30,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1901,"                splitMult(xs, bs, temps);",0,0,0,0,2,0,4,0,1,3,25,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1902,"                splitMult(ys, as, result);",0,0,0,0,2,0,4,0,1,3,26,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1903,"                splitAdd(result, temps, result);",0,0,0,0,2,0,4,0,1,3,32,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1904,                SINE_TABLE_A[i] = result[0];,0,0,1,0,4,0,0,0,1,3,28,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1905,                SINE_TABLE_B[i] = result[1];,0,0,1,0,4,0,0,0,1,3,28,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1908,"                splitMult(ys, bs, result);",0,0,0,0,2,0,4,0,1,3,26,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1909,"                splitMult(xs, as, temps);",0,0,0,0,2,0,4,0,1,3,25,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1910,                temps[0] = -temps[0];,0,0,1,0,4,0,0,0,2,3,21,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1911,                temps[1] = -temps[1];,0,0,1,0,4,0,0,0,2,3,21,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1912,"                splitAdd(result, temps, result);",0,0,0,0,2,0,4,0,1,3,32,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1913,                COSINE_TABLE_A[i] = result[0];,0,0,1,0,4,0,0,0,1,3,30,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1914,                COSINE_TABLE_B[i] = result[1];,0,0,1,0,4,0,0,0,1,3,30,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1919,        for (int i = 0; i < 14; i++) {,3,1,0,1,3,2,0,0,1,6,30,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1920,            double xs[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1921,            double ys[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1922,            double as[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1924,            as[0] = COSINE_TABLE_A[i];,0,0,1,0,4,0,0,0,1,3,26,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1925,            as[1] = COSINE_TABLE_B[i];,0,0,1,0,4,0,0,0,1,3,26,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1927,"            splitReciprocal(as, ys);",0,0,0,0,2,0,3,0,1,3,24,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1929,            xs[0] = SINE_TABLE_A[i];,0,0,1,0,4,0,0,0,1,3,24,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1930,            xs[1] = SINE_TABLE_B[i];,0,0,1,0,4,0,0,0,1,3,24,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1932,"            splitMult(xs, ys, as);",0,0,0,0,2,0,4,0,1,3,22,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1934,            TANGENT_TABLE_A[i] = as[0];,0,0,1,0,4,0,0,0,1,3,27,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1935,            TANGENT_TABLE_B[i] = as[1];,0,0,1,0,4,0,0,0,1,3,27,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1938,    },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,43,    public EuclideanIntegerPoint(final int[] point) {,2,0,0,1,5,3,0,0,2,5,49,2,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,44,        this.point = point;,2,0,0,0,0,1,0,0,1,3,19,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,45,    },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,52,        return point;,1,0,0,0,0,1,0,0,0,2,13,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,57,"        return MathUtils.distance(point, p.getPoint());",0,0,0,1,4,1,5,0,0,4,47,5,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,77,        if (!(other instanceof EuclideanIntegerPoint)) {,1,0,0,2,5,2,0,1,1,6,48,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,80,        final int[] otherPoint = ((EuclideanIntegerPoint) other).getPoint();,2,0,0,2,8,2,1,1,1,7,68,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,81,        if (point.length != otherPoint.length) {,4,1,0,1,3,1,0,0,0,5,40,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,84,        for (int i = 0; i < point.length; i++) {,5,1,0,1,3,2,0,0,1,6,40,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,85,            if (point[i] != otherPoint[i]) {,0,1,1,1,7,1,0,0,0,5,32,6,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,86,                return false;,0,0,0,0,0,1,0,0,1,2,13,8,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,39,    public static enum EmptyClusterStrategy {,1,0,0,0,1,3,0,0,2,4,41,2,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,42,"        LARGEST_VARIANCE,",1,0,0,0,0,0,0,0,0,1,17,3,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,45,"        LARGEST_POINTS_NUMBER,",1,0,0,0,0,0,0,0,0,1,22,3,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,48,"        FARTHEST_POINT,",1,0,0,0,0,0,0,0,0,1,15,3,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,51,        ERROR,1,0,0,0,0,0,0,0,0,1,5,3,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,78,"    public KMeansPlusPlusClusterer(final Random random, final EmptyClusterStrategy emptyStrategy) {",3,0,0,0,3,3,0,2,3,5,95,2,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,79,        this.random        = random;,2,0,0,0,0,1,0,0,1,3,28,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,80,        this.emptyStrategy = emptyStrategy;,2,0,0,0,0,1,0,0,1,3,35,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,81,    },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,95,"        List<Cluster<T>> clusters = chooseInitialCenters(points, k, random);",1,0,0,0,2,0,4,3,1,5,68,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,96,"        assignPointsToClusters(clusters, points);",0,0,0,0,2,0,3,0,1,3,41,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,99,        final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;,5,1,0,1,2,2,0,0,1,6,72,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,100,        for (int count = 0; count < max; count++) {,4,1,0,1,3,2,0,0,1,6,43,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,146,        for (final T p : points) {,2,0,0,1,3,2,0,1,1,6,26,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,147,"            Cluster<T> cluster = getNearestCluster(clusters, p);",1,0,0,0,2,0,3,2,1,5,52,6,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,148,            cluster.addPoint(p);,0,0,0,1,2,0,3,0,0,3,20,7,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,149,        },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,150,    },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,164,        final List<T> pointSet = new ArrayList<T>(points);,2,0,0,1,2,2,0,4,2,6,50,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,165,        final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();,1,0,0,1,2,2,0,6,2,6,63,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,168,        final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));,1,0,0,3,6,1,6,1,1,7,70,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,169,        resultSet.add(new Cluster<T>(firstPoint));,1,0,0,2,4,1,2,2,1,7,42,5,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,171,        final double[] dx2 = new double[pointSet.size()];,1,0,0,1,6,4,2,0,1,6,49,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,172,        while (resultSet.size() < k) {,1,1,0,2,5,1,2,0,0,6,30,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,196,        return resultSet;,1,0,0,0,0,1,0,0,0,2,17,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,321,        double minDistance = Double.MAX_VALUE;,3,0,0,0,0,1,0,0,0,2,38,5,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,322,        Cluster<T> minCluster = null;,1,0,0,0,0,0,0,2,0,2,29,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,323,        for (final Cluster<T> c : clusters) {,2,0,0,1,3,2,0,2,1,6,37,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,324,            final double distance = point.distanceFrom(c.getCenter());,1,0,0,2,4,2,4,0,1,6,58,6,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,325,            if (distance < minDistance) {,2,1,0,1,3,1,0,0,0,5,29,6,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,326,                minDistance = distance;,2,0,0,0,0,0,0,0,1,2,23,8,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,327,                minCluster = c;,2,0,0,0,0,0,0,0,1,2,15,8,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,329,        },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,330,        return minCluster;,1,0,0,0,0,1,0,0,0,2,18,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,57,45,    public Cluster(final T center) {,2,0,0,1,3,2,0,1,2,6,32,2,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,57,46,        this.center = center;,2,0,0,0,0,1,0,0,1,3,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,57,47,        points = new ArrayList<T>();,1,0,0,1,2,1,0,2,2,6,28,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,57,48,    },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,57,55,        points.add(point);,0,0,0,1,2,0,3,0,0,3,18,5,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,57,56,    },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,57,71,        return center;,1,0,0,0,0,1,0,0,0,2,14,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1914,    public static enum OrderDirection {,1,0,0,0,1,3,0,0,2,4,35,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1916,"        INCREASING,",1,0,0,0,0,0,0,0,0,1,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1918,        DECREASING,1,0,0,0,0,0,0,0,0,1,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,102,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,103,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,116,        long s = (long)x + (long)y;,3,1,0,1,4,3,0,0,0,5,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,117,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,6,3,0,1,3,1,0,0,0,5,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,118,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);",4,0,0,0,2,2,0,1,1,5,79,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,120,        return (int)s;,1,0,0,1,2,2,0,0,0,4,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,134,"        return addAndCheck(a, b, LocalizedFormats.OVERFLOW_IN_ADDITION);",2,0,0,0,2,1,3,0,1,5,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,150,        if (a > b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,152,"            ret = addAndCheck(b, a, pattern);",1,0,0,0,2,0,4,0,2,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,156,            if (a < 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,157,                if (b < 0) {,1,1,0,1,3,1,0,0,0,5,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,159,                    if (Long.MIN_VALUE - b <= a) {,4,2,0,1,3,1,0,0,0,5,30,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,160,                        ret = a + b;,3,1,0,0,0,0,0,0,1,3,12,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,162,"                        throw new MathArithmeticException(pattern, a, b);",3,0,0,0,2,2,0,1,1,5,49,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,166,                    ret = a + b;,3,1,0,0,0,0,0,0,1,3,12,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,173,                if (a <= Long.MAX_VALUE - b) {,4,2,0,1,3,1,0,0,0,5,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,174,                    ret = a + b;,3,1,0,0,0,0,0,0,1,3,12,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,176,"                    throw new MathArithmeticException(pattern, a, b);",3,0,0,0,2,2,0,1,1,5,49,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,180,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,209,"        checkBinomial(n, k);",0,0,0,0,2,0,3,0,1,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,210,        if ((n == k) || (k == 0)) {,3,3,0,2,7,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,211,            return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,213,        if ((k == 1) || (k == n - 1)) {,3,4,0,2,7,1,0,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,214,            return n;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,217,        if (k > n / 2),2,2,0,1,2,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,218,"            return binomialCoefficient(n, n - k);",2,1,0,0,2,1,2,0,1,6,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,225,        long result = 1;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,226,        if (n <= 61) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,228,            int i = n - k + 1;,3,2,0,0,0,1,0,0,0,3,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,229,            for (int j = 1; j <= k; j++) {,4,1,0,1,3,2,0,0,1,6,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,230,                result = result * i / j;,4,2,0,0,0,0,0,0,1,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,231,                i++;,1,0,0,0,0,0,0,0,1,2,4,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,233,        } else if (n <= 66) {,1,1,0,1,4,2,0,0,0,5,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,236,            int i = n - k + 1;,3,2,0,0,0,1,0,0,0,3,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,237,            for (int j = 1; j <= k; j++) {,4,1,0,1,3,2,0,0,1,6,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,244,"                final long d = gcd(i, j);",1,0,0,0,2,2,3,0,2,5,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,245,                result = (result / (j / d)) * (i / d);,6,4,0,2,6,0,0,0,1,5,38,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,246,                i++;,1,0,0,0,0,0,0,0,1,2,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,248,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,252,            int i = n - k + 1;,3,2,0,0,0,1,0,0,0,3,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,253,            for (int j = 1; j <= k; j++) {,4,1,0,1,3,2,0,0,1,6,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,254,"                final long d = gcd(i, j);",1,0,0,0,2,2,3,0,2,5,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,255,"                result = mulAndCheck(result / (j / d), i / d);",6,3,0,1,4,0,1,0,2,6,46,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,256,                i++;,1,0,0,0,0,0,0,0,1,2,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,259,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,285,"        checkBinomial(n, k);",0,0,0,0,2,0,3,0,1,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,286,        if ((n == k) || (k == 0)) {,3,3,0,2,7,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,287,            return 1d;,0,0,0,0,0,1,0,0,0,1,10,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,289,        if ((k == 1) || (k == n - 1)) {,3,4,0,2,7,1,0,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,290,            return n;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,292,        if (k > n/2) {,2,2,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,293,"            return binomialCoefficientDouble(n, n - k);",2,1,0,0,2,1,2,0,1,6,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,295,        if (n < 67) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,296,"            return binomialCoefficient(n,k);",0,0,0,0,2,1,3,0,1,4,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,299,        double result = 1d;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,300,        for (int i = 1; i <= k; i++) {,4,1,0,1,3,2,0,0,1,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,301,             result *= (double)(n - k + i) / (double)i;,5,3,0,1,6,2,0,0,1,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,304,        return FastMath.floor(result + 0.5);,1,1,0,1,2,1,2,0,0,6,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,326,"        checkBinomial(n, k);",0,0,0,0,2,0,3,0,1,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,327,        if ((n == k) || (k == 0)) {,3,3,0,2,7,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,328,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,330,        if ((k == 1) || (k == n - 1)) {,3,4,0,2,7,1,0,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,331,            return FastMath.log(n);,0,0,0,1,2,1,3,0,0,4,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,338,        if (n < 67) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,339,"            return FastMath.log(binomialCoefficient(n,k));",0,0,0,0,4,1,5,0,1,4,46,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,346,        if (n < 1030) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,347,"            return FastMath.log(binomialCoefficientDouble(n, k));",0,0,0,0,4,1,5,0,1,4,53,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,350,        if (k > n / 2) {,2,2,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,351,"            return binomialCoefficientLog(n, n - k);",2,1,0,0,2,1,2,0,1,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,357,        double logSum = 0;,1,0,0,0,0,1,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,360,        for (int i = n - k + 1; i <= n; i++) {,6,3,0,1,3,2,0,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,361,            logSum += FastMath.log(i);,1,0,0,1,2,0,3,0,1,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,365,        for (int i = 2; i <= k; i++) {,4,1,0,1,3,2,0,0,1,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,366,            logSum -= FastMath.log(i);,1,0,0,1,2,0,3,0,1,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,369,        return logSum;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,381,        if (n < k) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,382,"            throw new NumberIsTooLargeException(LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER,",2,0,0,0,1,2,0,1,1,5,87,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,385,        if (n < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,386,"            throw new NotPositiveException(LocalizedFormats.BINOMIAL_NEGATIVE_PARAMETER, n);",3,0,0,0,2,2,0,1,1,5,80,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,388,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,401,"        if (equals(x, y, eps)) {",0,0,0,0,5,1,4,0,1,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,402,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,403,        } else if (x < y) {,2,1,0,1,4,2,0,0,0,5,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,404,          return -1;,0,0,0,0,0,1,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,406,        return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,417,        return (FastMath.exp(x) + FastMath.exp(-x)) / 2.0;,1,2,0,2,6,1,5,0,1,7,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,429,"        return equals(x, y, 1);",0,0,0,0,2,1,3,0,1,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,442,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, 1);",0,2,0,2,8,1,9,0,1,6,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,456,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",3,3,0,1,4,1,5,0,1,7,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,471,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",3,3,0,2,6,1,5,0,1,7,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,495,        assert maxUlps > 0 && maxUlps < NAN_GAP;,3,3,0,0,0,1,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,497,        int xInt = Float.floatToIntBits(x);,1,0,0,1,2,1,3,0,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,498,        int yInt = Float.floatToIntBits(y);,1,0,0,1,2,1,3,0,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,501,        if (xInt < 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,502,            xInt = SGN_MASK_FLOAT - xInt;,3,1,0,0,0,0,0,0,1,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,504,        if (yInt < 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,505,            yInt = SGN_MASK_FLOAT - yInt;,3,1,0,0,0,0,0,0,1,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,508,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,4,2,0,1,2,2,2,0,1,7,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,510,        return isEqual && !Float.isNaN(x) && !Float.isNaN(y);,1,1,0,1,4,1,6,0,2,7,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,526,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, maxUlps);",0,2,0,2,8,1,10,0,1,6,67,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,540,        if ((x == null) || (y == null)) {,2,3,0,2,7,1,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,541,            return !((x == null) ^ (y == null));,2,3,0,2,6,1,0,0,1,6,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,543,        if (x.length != y.length) {,4,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,544,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,546,        for (int i = 0; i < x.length; ++i) {,5,1,0,1,3,2,0,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,547,"            if (!equals(x[i], y[i])) {",0,0,1,0,9,1,1,0,2,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,548,                return false;,0,0,0,0,0,1,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,551,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,566,        if ((x == null) || (y == null)) {,2,3,0,2,7,1,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,567,            return !((x == null) ^ (y == null));,2,3,0,2,6,1,0,0,1,6,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,569,        if (x.length != y.length) {,4,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,570,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,572,        for (int i = 0; i < x.length; ++i) {,5,1,0,1,3,2,0,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,573,"            if (!equalsIncludingNaN(x[i], y[i])) {",0,0,1,0,9,1,1,0,2,5,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,574,                return false;,0,0,0,0,0,1,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,577,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,589,"        return equals(x, y, 1);",0,0,0,0,2,1,3,0,1,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,602,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, 1);",0,2,0,2,8,1,9,0,1,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,617,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",3,3,0,1,4,1,5,0,1,7,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,632,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",3,3,0,2,6,1,5,0,1,7,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,655,        assert maxUlps > 0 && maxUlps < NAN_GAP;,3,3,0,0,0,1,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,657,        long xInt = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,658,        long yInt = Double.doubleToLongBits(y);,1,0,0,1,2,1,3,0,0,5,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,661,        if (xInt < 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,662,            xInt = SGN_MASK - xInt;,3,1,0,0,0,0,0,0,1,3,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,664,        if (yInt < 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,665,            yInt = SGN_MASK - yInt;,3,1,0,0,0,0,0,0,1,3,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,668,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,4,2,0,1,2,2,2,0,1,7,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,670,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,1,1,0,1,4,1,6,0,2,7,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,686,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, maxUlps);",0,2,0,2,8,1,10,0,1,6,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,700,        if ((x == null) || (y == null)) {,2,3,0,2,7,1,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,701,            return !((x == null) ^ (y == null));,2,3,0,2,6,1,0,0,1,6,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,703,        if (x.length != y.length) {,4,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,704,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,706,        for (int i = 0; i < x.length; ++i) {,5,1,0,1,3,2,0,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,707,"            if (!equals(x[i], y[i])) {",0,0,1,0,9,1,1,0,2,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,708,                return false;,0,0,0,0,0,1,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,711,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,726,        if ((x == null) || (y == null)) {,2,3,0,2,7,1,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,727,            return !((x == null) ^ (y == null));,2,3,0,2,6,1,0,0,1,6,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,729,        if (x.length != y.length) {,4,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,730,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,732,        for (int i = 0; i < x.length; ++i) {,5,1,0,1,3,2,0,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,733,"            if (!equalsIncludingNaN(x[i], y[i])) {",0,0,1,0,9,1,1,0,2,5,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,734,                return false;,0,0,0,0,0,1,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,737,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,765,        if (n < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,766,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",2,0,0,0,1,2,0,1,1,5,77,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,769,        if (n > 20) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,770,            throw new MathArithmeticException();,0,0,0,1,2,2,0,1,1,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,772,        return FACTORIALS[n];,0,0,1,0,2,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,789,        if (n < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,790,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",2,0,0,0,1,2,0,1,1,5,77,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,793,        if (n < 21) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,794,            return factorial(n);,0,0,0,1,2,1,2,0,1,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,796,        return FastMath.floor(FastMath.exp(factorialLog(n)) + 0.5);,0,1,0,3,6,1,6,0,1,6,59,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,807,        if (n < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,808,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",2,0,0,0,1,2,0,1,1,5,77,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,811,        if (n < 21) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,812,            return FastMath.log(factorial(n));,0,0,0,2,4,1,4,0,1,5,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,814,        double logSum = 0;,1,0,0,0,0,1,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,815,        for (int i = 2; i <= n; i++) {,4,1,0,1,3,2,0,0,1,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,816,            logSum += FastMath.log(i);,1,0,0,1,2,0,3,0,1,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,818,        return logSum;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,851,        int u = p;,2,0,0,0,0,1,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,852,        int v = q;,2,0,0,0,0,1,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,853,        if ((u == 0) || (v == 0)) {,2,3,0,2,7,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,854,            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {,6,3,0,2,7,1,0,0,0,5,59,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,855,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,",2,0,0,0,1,2,0,1,1,5,72,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,858,            return FastMath.abs(u) + FastMath.abs(v);,0,1,0,1,4,1,6,0,0,5,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,865,        if (u > 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,866,            u = -u;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,868,        if (v > 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,869,            v = -v;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,872,        int k = 0;,1,0,0,0,0,1,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,873,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,3,7,0,2,7,2,0,0,0,5,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,875,            u /= 2;,1,0,0,0,0,0,0,0,1,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,876,            v /= 2;,1,0,0,0,0,0,0,0,1,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,877,            k++; // cast out twos.,1,0,0,0,0,0,0,0,1,2,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,879,        if (k == 31) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,880,"            throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,",2,0,0,0,1,2,0,1,1,5,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,885,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,4,3,0,2,6,1,0,0,1,6,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,891,            while ((t & 1) == 0) { // while t is even..,1,2,0,2,5,2,0,0,0,5,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,892,                t /= 2; // cast out twos,1,0,0,0,0,0,0,0,1,2,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,895,            if (t > 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,896,                u = -t;,2,0,0,0,0,0,0,0,2,2,7,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,898,                v = t;,2,0,0,0,0,0,0,0,1,2,6,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,901,            t = (v - u) / 2;,3,2,0,1,2,0,0,0,1,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,904,        } while (t != 0);,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,905,        return -u * (1 << k); // gcd is u*2^k,2,2,0,1,2,1,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,938,        long u = p;,2,0,0,0,0,1,0,0,0,2,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,939,        long v = q;,2,0,0,0,0,1,0,0,0,2,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,940,        if ((u == 0) || (v == 0)) {,2,3,0,2,7,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,941,            if ((u == Long.MIN_VALUE) || (v == Long.MIN_VALUE)){,6,3,0,2,7,1,0,0,0,5,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,942,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,",2,0,0,0,1,2,0,1,1,5,72,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,945,            return FastMath.abs(u) + FastMath.abs(v);,0,1,0,1,4,1,6,0,0,5,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,952,        if (u > 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,953,            u = -u;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,955,        if (v > 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,956,            v = -v;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,959,        int k = 0;,1,0,0,0,0,1,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,960,        while ((u & 1) == 0 && (v & 1) == 0 && k < 63) { // while u and v are,3,7,0,2,7,2,0,0,0,5,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,962,            u /= 2;,1,0,0,0,0,0,0,0,1,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,963,            v /= 2;,1,0,0,0,0,0,0,0,1,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,964,            k++; // cast out twos.,1,0,0,0,0,0,0,0,1,2,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,966,        if (k == 63) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,967,"            throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,",2,0,0,0,1,2,0,1,1,5,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,972,        long t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,4,3,0,2,6,1,0,0,1,6,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,978,            while ((t & 1) == 0) { // while t is even..,1,2,0,2,5,2,0,0,0,5,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,979,                t /= 2; // cast out twos,1,0,0,0,0,0,0,0,1,2,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,982,            if (t > 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,983,                u = -t;,2,0,0,0,0,0,0,0,2,2,7,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,985,                v = t;,2,0,0,0,0,0,0,0,1,2,6,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,988,            t = (v - u) / 2;,3,2,0,1,2,0,0,0,1,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,991,        } while (t != 0);,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,992,        return -u * (1L << k); // gcd is u*2^k,2,2,0,1,2,1,0,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1002,        return new Double(value).hashCode();,1,0,0,1,4,2,1,1,1,7,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1013,        return Arrays.hashCode(value);,0,0,0,1,2,1,3,0,0,4,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1024,        return (x >= ZB) ? PB : NB;,4,1,0,1,2,1,0,0,0,5,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1036,        if (Double.isNaN(x)) {,0,0,0,2,5,1,3,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1037,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1039,        return (x >= 0.0) ? 1.0 : -1.0;,1,1,0,1,2,1,0,0,1,6,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1050,        if (Float.isNaN(x)) {,0,0,0,2,5,1,3,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1051,            return Float.NaN;,2,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1053,        return (x >= 0.0F) ? 1.0F : -1.0F;,1,1,0,1,2,1,0,0,1,6,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1063,        return (x >= 0) ? 1 : -1;,1,1,0,1,2,1,0,0,1,6,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1073,        return (x >= 0L) ? 1L : -1L;,1,1,0,1,2,1,0,0,1,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1084,        return (x >= ZS) ? PS : NS;,4,1,0,1,2,1,0,0,0,5,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1110,        if (a == 0 || b == 0){,2,3,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1111,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1113,"        int lcm = FastMath.abs(mulAndCheck(a / gcd(a, b), b));",2,1,0,0,6,1,7,0,2,6,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1114,        if (lcm == Integer.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1115,"            throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_32_BITS,",2,0,0,0,1,2,0,1,1,5,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1118,        return lcm;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1144,        if (a == 0 || b == 0){,2,3,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1145,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1147,"        long lcm = FastMath.abs(mulAndCheck(a / gcd(a, b), b));",2,1,0,0,6,1,7,0,2,6,55,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1148,        if (lcm == Long.MIN_VALUE){,3,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1149,"            throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_64_BITS,",2,0,0,0,1,2,0,1,1,5,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1152,        return lcm;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1172,        return FastMath.log(x)/FastMath.log(base);,0,1,0,1,4,1,6,0,0,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1186,        long m = ((long)x) * ((long)y);,3,1,0,2,8,3,0,0,0,5,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1187,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,6,3,0,1,3,1,0,0,0,5,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1188,            throw new MathArithmeticException();,0,0,0,1,2,2,0,1,1,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1190,        return (int)m;,1,0,0,1,2,2,0,0,0,4,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1205,        if (a > b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1207,"            ret = mulAndCheck(b, a);",1,0,0,0,2,0,3,0,2,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1209,            if (a < 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1210,                if (b < 0) {,1,1,0,1,3,1,0,0,0,5,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1212,                    if (a >= Long.MAX_VALUE / b) {,4,2,0,1,3,1,0,0,0,5,30,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1213,                        ret = a * b;,3,1,0,0,0,0,0,0,1,3,12,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1215,                        throw new MathArithmeticException();,0,0,0,1,2,2,0,1,1,5,36,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1217,                } else if (b > 0) {,1,1,0,1,4,2,0,0,0,5,19,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1219,                    if (Long.MIN_VALUE / b <= a) {,4,2,0,1,3,1,0,0,0,5,30,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1220,                        ret = a * b;,3,1,0,0,0,0,0,0,1,3,12,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1222,                        throw new MathArithmeticException();,0,0,0,1,2,2,0,1,1,5,36,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1227,                    ret = 0;,1,0,0,0,0,0,0,0,1,2,8,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1229,            } else if (a > 0) {,1,1,0,1,4,2,0,0,0,5,19,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1234,                if (a <= Long.MAX_VALUE / b) {,4,2,0,1,3,1,0,0,0,5,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1235,                    ret = a * b;,3,1,0,0,0,0,0,0,1,3,12,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1237,                    throw new MathArithmeticException();,0,0,0,1,2,2,0,1,1,5,36,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1241,                ret = 0;,1,0,0,0,0,0,0,0,1,2,8,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1244,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1259,"        return FastMath.scalb(d, scaleFactor);",0,0,0,0,2,1,4,0,0,3,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1282,         return a - TWO_PI * FastMath.floor((a + FastMath.PI - center) / TWO_PI);,7,5,0,2,4,1,2,0,0,6,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1307,         if (Double.isInfinite(normalizedSum)) {,0,0,0,2,5,1,3,0,0,4,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1308,             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);,2,0,0,1,2,2,0,1,1,6,76,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1310,         if (Double.isNaN(normalizedSum)) {,0,0,0,2,5,1,3,0,0,4,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1311,             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);,2,0,0,1,2,2,0,1,1,6,71,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1313,         double sum = 0d;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1314,         final int len = values.length;,3,0,0,0,0,2,0,0,1,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1315,         double[] out = new double[len];,1,0,1,0,4,3,0,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1316,         for (int i = 0; i < len; i++) {,4,1,0,1,3,2,0,0,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1317,             if (Double.isInfinite(values[i])) {,0,0,1,2,7,1,2,0,0,5,35,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1318,"                 throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);",3,0,1,0,4,2,0,1,1,6,94,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1320,             if (!Double.isNaN(values[i])) {,0,0,1,2,7,1,2,0,1,6,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1321,                 sum += values[i];,1,0,1,0,2,0,0,0,1,4,17,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1324,         if (sum == 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1325,             throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);,2,0,0,1,2,2,0,1,1,6,71,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1327,         for (int i = 0; i < len; i++) {,4,1,0,1,3,2,0,0,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1328,             if (Double.isNaN(values[i])) {,0,0,1,2,7,1,2,0,0,5,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1329,                 out[i] = Double.NaN;,2,0,1,0,2,0,0,0,1,4,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1331,                 out[i] = values[i] * normalizedSum / sum;,2,2,1,0,4,0,0,0,1,5,41,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1334,         return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1347,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",2,0,0,0,2,1,3,0,1,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1364,            return (new BigDecimal,0,0,0,0,1,2,0,1,1,4,22,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1368,        } catch (NumberFormatException ex) {,1,0,0,1,4,1,0,1,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1369,            if (Double.isInfinite(x)) {,0,0,0,2,5,1,3,0,0,4,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1370,                return x;,1,0,0,0,0,1,0,0,0,2,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1372,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1374,        } catch (RuntimeException ex) {,1,0,0,1,4,1,0,1,0,5,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1375,            throw new MathRuntimeException(ex);,1,0,0,1,2,2,0,1,1,6,35,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1389,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",2,0,0,0,2,1,3,0,1,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1405,        float sign = indicator(x);,1,0,0,1,2,1,2,0,1,6,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1406,"        float factor = (float)FastMath.pow(10.0f, scale) * sign;",2,1,0,1,4,2,3,0,0,6,56,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1407,"        return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor;",3,2,0,1,4,2,3,0,1,7,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1424,        switch (roundingMethod) {,1,0,0,1,3,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1426,            if (sign == -1) {,1,1,0,1,3,1,0,0,1,6,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1427,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",3,0,0,0,4,0,5,0,1,4,82,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1429,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",3,0,0,0,4,0,5,0,1,4,81,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1431,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1433,"            unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",3,0,0,0,4,0,5,0,1,4,82,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1434,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1436,            if (sign == -1) {,1,1,0,1,3,1,0,0,1,6,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1437,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",3,0,0,0,4,0,5,0,1,4,81,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1439,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",3,0,0,0,4,0,5,0,1,4,82,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1441,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1443,"            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);",3,0,0,0,2,0,3,0,1,4,66,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1444,            double fraction = unscaled - FastMath.floor(unscaled);,2,1,0,1,2,1,3,0,0,6,54,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1445,            if (fraction > 0.5) {,1,1,0,1,3,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1446,                unscaled = FastMath.ceil(unscaled);,1,0,0,1,2,0,3,0,1,5,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1448,                unscaled = FastMath.floor(unscaled);,1,0,0,1,2,0,3,0,1,5,36,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1450,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1453,            double fraction = unscaled - FastMath.floor(unscaled);,2,1,0,1,2,1,3,0,0,6,54,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1454,            if (fraction > 0.5) {,1,1,0,1,3,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1455,                unscaled = FastMath.ceil(unscaled);,1,0,0,1,2,0,3,0,1,5,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1456,            } else if (fraction < 0.5) {,1,1,0,1,4,2,0,0,0,5,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1457,                unscaled = FastMath.floor(unscaled);,1,0,0,1,2,0,3,0,1,5,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1460,                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math,0,3,0,1,4,1,6,0,0,5,57,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1462,                    unscaled = FastMath.floor(unscaled);,1,0,0,1,2,0,3,0,1,5,36,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1464,                    unscaled = FastMath.ceil(unscaled);,1,0,0,1,2,0,3,0,1,5,35,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1467,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1470,"            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);",3,0,0,0,2,0,3,0,1,4,66,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1471,            double fraction = unscaled - FastMath.floor(unscaled);,2,1,0,1,2,1,3,0,0,6,54,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1472,            if (fraction >= 0.5) {,1,1,0,1,3,1,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1473,                unscaled = FastMath.ceil(unscaled);,1,0,0,1,2,0,3,0,1,5,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1475,                unscaled = FastMath.floor(unscaled);,1,0,0,1,2,0,3,0,1,5,36,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1477,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1480,            if (unscaled != FastMath.floor(unscaled)) {,1,1,0,2,5,1,3,0,0,6,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1481,                throw new MathArithmeticException();,0,0,0,1,2,2,0,1,1,5,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1485,"            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));",3,0,0,0,4,0,5,0,1,4,82,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1486,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1488,"            throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,",2,0,0,0,1,2,0,1,1,5,80,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1499,        return unscaled;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1513,        return (x == ZB) ? ZB : (x > ZB) ? PB : NB;,7,2,0,1,4,1,0,0,0,5,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1529,        if (Double.isNaN(x)) {,0,0,0,2,5,1,3,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1530,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1532,        return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;,2,2,0,1,4,1,0,0,1,6,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1547,        if (Float.isNaN(x)) {,0,0,0,2,5,1,3,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1548,            return Float.NaN;,2,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1550,        return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;,2,2,0,1,4,1,0,0,1,6,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1564,        return (x == 0) ? 0 : (x > 0) ? 1 : -1;,2,2,0,1,4,1,0,0,1,6,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1578,        return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;,2,2,0,1,4,1,0,0,1,6,44,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1589,        return (x == ZS) ? ZS : (x > ZS) ? PS : NS;,7,2,0,1,4,1,0,0,0,5,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1600,        return (FastMath.exp(x) - FastMath.exp(-x)) / 2.0;,1,2,0,2,6,1,5,0,1,7,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1614,        long s = (long)x - (long)y;,3,1,0,1,4,3,0,0,0,5,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1615,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,6,3,0,1,3,1,0,0,0,5,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1616,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y);",4,0,0,0,2,2,0,1,1,5,82,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1618,        return (int)s;,1,0,0,1,2,2,0,0,0,4,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1633,        if (b == Long.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1634,            if (a < 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1635,                ret = a - b;,3,1,0,0,0,0,0,0,1,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1637,"                throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, a, -b);",4,0,0,0,2,2,0,1,2,5,80,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1641,"            ret = addAndCheck(a, -b, LocalizedFormats.OVERFLOW_IN_ADDITION);",4,0,0,0,2,0,2,0,3,4,64,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1643,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1655,        if (e < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1656,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",3,0,0,0,2,2,0,1,1,5,61,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1659,        int result = 1;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1660,        int k2p    = k;,2,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1661,        while (e != 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1662,            if ((e & 0x1) != 0) {,1,2,0,2,5,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1663,                result *= k2p;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1665,            k2p *= k2p;,2,0,0,0,0,0,0,0,1,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1666,            e = e >> 1;,2,1,0,0,0,0,0,0,1,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1669,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1681,        if (e < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1682,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",3,0,0,0,2,2,0,1,1,5,61,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1685,        int result = 1;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1686,        int k2p    = k;,2,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1687,        while (e != 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1688,            if ((e & 0x1) != 0) {,1,2,0,2,5,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1689,                result *= k2p;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1691,            k2p *= k2p;,2,0,0,0,0,0,0,0,1,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1692,            e = e >> 1;,2,1,0,0,0,0,0,0,1,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1695,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1707,        if (e < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1708,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",3,0,0,0,2,2,0,1,1,5,61,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1711,        long result = 1l;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1712,        long k2p    = k;,2,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1713,        while (e != 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1714,            if ((e & 0x1) != 0) {,1,2,0,2,5,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1715,                result *= k2p;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1717,            k2p *= k2p;,2,0,0,0,0,0,0,0,1,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1718,            e = e >> 1;,2,1,0,0,0,0,0,0,1,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1721,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1733,        if (e < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1734,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",3,0,0,0,2,2,0,1,1,5,61,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1737,        long result = 1l;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1738,        long k2p    = k;,2,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1739,        while (e != 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1740,            if ((e & 0x1) != 0) {,1,2,0,2,5,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1741,                result *= k2p;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1743,            k2p *= k2p;,2,0,0,0,0,0,0,0,1,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1744,            e = e >> 1;,2,1,0,0,0,0,0,0,1,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1747,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1759,        if (e < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1760,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",3,0,0,0,2,2,0,1,1,5,61,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1763,        return k.pow(e);,0,0,0,1,2,1,3,0,0,4,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1775,        if (e < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1776,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",3,0,0,0,2,2,0,1,1,5,61,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1779,        BigInteger result = BigInteger.ONE;,3,0,0,0,0,0,0,1,0,2,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1780,        BigInteger k2p    = k;,2,0,0,0,0,0,0,1,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1781,        while (e != 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1782,            if ((e & 0x1) != 0) {,1,2,0,2,5,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1783,                result = result.multiply(k2p);,1,0,0,1,2,0,3,0,1,5,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1785,            k2p = k2p.multiply(k2p);,1,0,0,1,2,0,3,0,1,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1786,            e = e >> 1;,2,1,0,0,0,0,0,0,1,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1789,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1802,        if (e.compareTo(BigInteger.ZERO) < 0) {,2,1,0,2,5,1,2,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1803,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",3,0,0,0,2,2,0,1,1,5,61,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1806,        BigInteger result = BigInteger.ONE;,3,0,0,0,0,0,0,1,0,2,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1807,        BigInteger k2p    = k;,2,0,0,0,0,0,0,1,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1808,        while (!BigInteger.ZERO.equals(e)) {,2,0,0,2,5,1,2,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1809,            if (e.testBit(0)) {,0,0,0,2,5,1,2,0,0,4,19,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1810,                result = result.multiply(k2p);,1,0,0,1,2,0,3,0,1,5,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1812,            k2p = k2p.multiply(k2p);,1,0,0,1,2,0,3,0,1,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1813,            e = e.shiftRight(1);,1,0,0,1,2,0,2,0,1,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1816,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1827,        double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1828,        for (int i = 0; i < p1.length; i++) {,5,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1829,            sum += FastMath.abs(p1[i] - p2[i]);,1,1,1,1,6,0,2,0,1,7,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1831,        return sum;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1842,      int sum = 0;,1,0,0,0,0,1,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1843,      for (int i = 0; i < p1.length; i++) {,5,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1844,          sum += FastMath.abs(p1[i] - p2[i]);,1,1,1,1,6,0,2,0,1,7,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1846,      return sum;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1857,        double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1858,        for (int i = 0; i < p1.length; i++) {,5,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1859,            final double dp = p1[i] - p2[i];,1,1,1,0,4,2,0,0,1,6,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1860,            sum += dp * dp;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1862,        return FastMath.sqrt(sum);,0,0,0,1,2,1,3,0,0,4,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1889,        double max = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1890,        for (int i = 0; i < p1.length; i++) {,5,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1891,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",1,1,1,1,8,0,5,0,1,7,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1893,        return max;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1904,        int max = 0;,1,0,0,0,0,1,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1905,        for (int i = 0; i < p1.length; i++) {,5,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1906,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",1,1,1,1,8,0,5,0,1,7,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1908,        return max;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1934,        double previous = val[0];,1,0,1,0,2,1,0,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1935,        boolean ok = true;,1,0,0,0,0,1,0,0,1,3,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1937,        int max = val.length;,3,0,0,0,0,1,0,0,0,2,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1938,        for (int i = 1; i < max; i++) {,4,1,0,1,3,2,0,0,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1939,            switch (dir) {,1,0,0,1,3,1,0,0,0,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1941,                if (strict) {,1,0,0,1,3,1,0,0,0,4,13,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1942,                    if (val[i] <= previous) {,1,1,1,1,5,1,0,0,0,6,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1943,                        ok = false;,1,0,0,0,0,0,0,0,2,2,11,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1946,                    if (val[i] < previous) {,1,1,1,1,5,1,0,0,0,6,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1947,                        ok = false;,1,0,0,0,0,0,0,0,2,2,11,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1952,                if (strict) {,1,0,0,1,3,1,0,0,0,4,13,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1953,                    if (val[i] >= previous) {,1,1,1,1,5,1,0,0,0,6,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1954,                        ok = false;,1,0,0,0,0,0,0,0,2,2,11,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1957,                    if (val[i] > previous) {,1,1,1,1,5,1,0,0,0,6,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1958,                        ok = false;,1,0,0,0,0,0,0,0,2,2,11,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1964,                throw new IllegalArgumentException();,0,0,0,1,2,2,0,1,1,5,37,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1967,            if (!ok &&,1,1,0,0,1,1,0,0,1,5,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1969,"                throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);",4,0,1,0,4,2,0,1,1,6,75,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1971,            previous = val[i];,1,0,1,0,2,0,0,0,1,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1974,        return ok;,1,0,0,0,0,1,0,0,0,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1988,"        checkOrder(val, dir, strict, true);",0,0,0,0,2,0,4,0,2,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1989,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1999,"        checkOrder(val, OrderDirection.INCREASING, true);",2,0,0,0,2,0,2,0,2,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2000,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2010,        if (Double.isInfinite(x) || Double.isNaN(x)) {,0,1,0,2,7,1,6,0,0,5,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2011,            throw new NotFiniteNumberException(x);,1,0,0,1,2,2,0,1,1,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2013,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2023,        for (int i = 0; i < val.length; i++) {,5,1,0,1,3,2,0,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2024,            final double x = val[i];,1,0,1,0,2,2,0,0,1,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2025,            if (Double.isInfinite(x) || Double.isNaN(x)) {,0,1,0,2,7,1,6,0,0,5,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2026,"                throw new NotFiniteNumberException(LocalizedFormats.ARRAY_ELEMENT, x, i);",4,0,0,0,2,2,0,1,1,5,73,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2029,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2092,        double rdwarf = 3.834e-20;,1,0,0,0,0,1,0,0,0,2,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2093,        double rgiant = 1.304e+19;,1,0,0,0,0,1,0,0,0,2,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2094,        double s1 = 0;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2095,        double s2 = 0;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2096,        double s3 = 0;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2097,        double x1max = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2098,        double x3max = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2099,        double floatn = (double) v.length;,3,0,0,1,2,2,0,0,0,4,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2100,        double agiant = rgiant / floatn;,3,1,0,0,0,1,0,0,0,3,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2101,        for (int i = 0; i < v.length; i++) {,5,1,0,1,3,2,0,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2102,            double xabs = Math.abs(v[i]);,1,0,1,1,4,1,2,0,0,6,29,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2103,            if (xabs < rdwarf || xabs > agiant) {,4,3,0,1,3,1,0,0,0,5,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2104,                if (xabs > rdwarf) {,2,1,0,1,3,1,0,0,0,5,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2105,                    if (xabs > x1max) {,2,1,0,1,3,1,0,0,0,5,19,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2106,                        double r = x1max / xabs;,3,1,0,0,0,1,0,0,0,3,24,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2107,                        s1= 1 + s1 * r * r;,4,2,0,0,0,0,0,0,1,3,19,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2108,                        x1max = xabs;,2,0,0,0,0,0,0,0,1,2,13,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2109,                    } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2110,                        double r = xabs / x1max;,3,1,0,0,0,1,0,0,0,3,24,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2111,                        s1 += r * r;,3,1,0,0,0,0,0,0,1,3,12,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2112,                    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2114,                    if (xabs > x3max) {,2,1,0,1,3,1,0,0,0,5,19,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2115,                        double r = x3max / xabs;,3,1,0,0,0,1,0,0,0,3,24,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2116,                        s3= 1 + s3 * r * r;,4,2,0,0,0,0,0,0,1,3,19,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2117,                        x3max = xabs;,2,0,0,0,0,0,0,0,1,2,13,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2118,                    } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2119,                        if (xabs != 0) {,1,1,0,1,3,1,0,0,0,5,16,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2120,                            double r = xabs / x3max;,3,1,0,0,0,1,0,0,0,3,24,15,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2121,                            s3 += r * r;,3,1,0,0,0,0,0,0,1,3,12,14,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2122,                        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2126,                s2 += xabs * xabs;,3,1,0,0,0,0,0,0,1,3,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2130,        if (s1 != 0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2131,            norm = x1max * Math.sqrt(s1 + (s2 / x1max) / x1max);,6,4,0,2,4,0,2,0,1,6,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2133,            if (s2 == 0) {,1,1,0,1,3,1,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2134,                norm = x3max * Math.sqrt(s3);,2,1,0,1,2,0,3,0,1,6,29,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2136,                if (s2 >= x3max) {,2,1,0,1,3,1,0,0,0,5,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2137,                    norm = Math.sqrt(s2 * (1 + (x3max / s2) * (x3max * s3)));,6,5,0,3,8,0,2,0,1,6,57,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2139,                    norm = Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));,6,4,0,3,8,0,2,0,1,6,56,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2143,        return norm;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2158,"        sortInPlace(x, OrderDirection.INCREASING, yList);",2,0,0,0,2,0,3,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2159,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2174,        if (x == null ||,1,2,0,0,1,1,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2176,            throw new NullArgumentException();,0,0,0,1,2,2,0,1,1,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2179,        final int len = x.length;,3,0,0,0,0,2,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2180,"        final List<Pair<Double, double[]>> list",1,0,0,0,2,2,0,3,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2183,        final int yListLen = yList.length;,3,0,0,0,0,2,0,0,1,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2184,        for (int i = 0; i < len; i++) {,4,1,0,1,3,2,0,0,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2185,            final double[] yValues = new double[yListLen];,1,0,1,0,4,4,0,0,1,5,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2186,            for (int j = 0; j < yListLen; j++) {,4,1,0,1,3,2,0,0,1,6,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2187,                double[] y = yList[j];,1,0,1,0,4,1,0,0,0,4,22,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2188,                if (y.length != len) {,3,1,0,1,3,1,0,0,0,5,22,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2189,"                    throw new DimensionMismatchException(y.length, len);",3,0,0,0,2,2,0,1,1,5,52,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2191,                yValues[j] = y[i];,0,0,1,0,4,0,0,0,1,3,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2193,"            list.add(new Pair<Double, double[]>(x[i], yValues));",1,0,1,0,8,2,2,2,1,7,52,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2196,"        final Comparator<Pair<Double, double[]>> comp",1,0,0,0,2,2,0,3,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2216,"        Collections.sort(list, comp);",0,0,0,0,2,0,4,0,0,2,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2218,        for (int i = 0; i < len; i++) {,4,1,0,1,3,2,0,0,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2219,"            final Pair<Double, double[]> e = list.get(i);",1,0,0,1,4,2,3,2,1,7,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2220,            x[i] = e.getKey();,0,0,1,1,4,0,2,0,1,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2221,            final double[] yValues = e.getValue();,1,0,0,1,4,2,2,0,1,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2222,            for (int j = 0; j < yListLen; j++) {,4,1,0,1,3,2,0,0,1,6,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2223,                yList[j][i] = yValues[j];,0,0,1,0,6,0,0,0,1,3,25,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2226,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2235,"         return copyOf(source, source.length);",2,0,0,0,2,1,2,0,1,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2245,"         return copyOf(source, source.length);",2,0,0,0,2,1,2,0,1,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2258,         final int[] output = new int[len];,1,0,1,0,4,4,0,0,1,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2259,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",2,0,0,0,4,0,7,0,0,3,73,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2260,         return output;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2273,         final double[] output = new double[len];,1,0,1,0,4,4,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2274,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",2,0,0,0,4,0,7,0,0,3,73,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2275,         return output;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2289,        if (o == null) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2290,"            throw new NullArgumentException(pattern, args);",2,0,0,0,2,2,0,1,1,5,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2292,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2301,        if (o == null) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2302,            throw new NullArgumentException();,0,0,0,1,2,2,0,1,1,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2304,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1939,            switch (dir) {,1,0,0,1,3,1,0,0,0,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,58,    public MathRuntimeException() {},1,0,0,1,4,1,0,0,1,5,32,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,48,"    private List<SerializablePair<Localizable, Object[]>> messages",1,0,0,0,2,1,0,4,1,5,62,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,53,"    private Map<String, Object> context = new HashMap<String, Object>();",1,0,0,1,2,2,0,6,2,6,68,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,66,        super(cause);,1,0,0,1,2,1,0,0,1,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,67,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,71,"        messages.add(new SerializablePair<Localizable, Object[]>(pattern, (Object[]) null));",1,0,0,1,10,1,2,4,1,7,84,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,72,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,77,"        messages.add(new SerializablePair<Localizable, Object[]>(pattern,",1,0,0,0,4,1,2,3,1,6,65,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,79,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,83,"        context.put(key, value);",0,0,0,0,2,0,4,0,0,2,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,84,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,88,        return context.get(key);,0,0,0,1,2,1,3,0,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,93,        return context.keySet();,0,0,0,1,2,1,2,0,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,103,"        return buildMessage(locale, "": "");",0,0,0,0,2,1,2,0,2,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,115,"        return buildMessage(locale, separator);",0,0,0,0,2,1,3,0,1,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,121,        return getMessage(Locale.US);,2,0,0,1,2,1,1,0,1,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,127,        return getMessage(Locale.getDefault());,0,0,0,2,4,1,3,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,139,        final StringBuilder sb = new StringBuilder();,1,0,0,1,2,2,0,2,2,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,140,        int count = 0;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,141,        final int len = messages.size();,1,0,0,1,2,2,2,0,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,142,"        for (SerializablePair<Localizable, Object[]> pair : messages) {",2,0,0,0,5,1,0,3,0,4,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,143,"            final MessageFormat fmt = new MessageFormat(pair.getKey().getLocalizedString(locale),",1,0,0,1,5,2,4,2,2,7,85,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,145,            sb.append(fmt.format(pair.getValue()));,0,0,0,3,6,0,6,0,0,3,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,146,            if (++count < len) {,2,1,0,1,3,1,0,0,1,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,148,                sb.append(separator);,0,0,0,1,2,0,3,0,0,3,21,9,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,150,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,152,        return sb.toString();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,163,        serializeMessages(out);,0,0,0,1,2,0,2,0,1,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,164,        serializeContext(out);,0,0,0,1,2,0,2,0,1,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,165,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,176,        deSerializeMessages(in);,0,0,0,1,2,0,2,0,1,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,177,        deSerializeContext(in);,0,0,0,1,2,0,2,0,1,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,178,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,189,        final int len = messages.size();,1,0,0,1,2,2,2,0,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,190,        out.writeInt(len);,0,0,0,1,2,0,3,0,0,3,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,192,        for (int i = 0; i < len; i++) {,4,1,0,1,3,2,0,0,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,193,"            SerializablePair<Localizable, Object[]> pair = messages.get(i);",1,0,0,1,4,0,3,3,0,5,63,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,195,            out.writeObject(pair.getKey());,0,0,0,2,4,0,4,0,0,3,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,196,            final Object[] args = pair.getValue();,1,0,0,1,4,1,2,1,1,7,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,197,            final int aLen = args.length;,3,0,0,0,0,2,0,0,1,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,199,            out.writeInt(aLen);,0,0,0,1,2,0,3,0,0,3,19,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,200,            for (int j = 0; j < aLen; j++) {,4,1,0,1,3,2,0,0,1,6,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,201,                if (args[j] instanceof Serializable) {,0,0,1,1,5,2,0,1,0,5,38,9,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,203,                    out.writeObject(args[j]);,0,0,1,1,4,0,2,0,0,4,25,11,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,206,                    out.writeObject(nonSerializableReplacement(args[j]));,0,0,1,2,6,0,3,0,1,5,53,11,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,210,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,223,        final int len = in.readInt();,1,0,0,1,2,2,2,0,1,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,224,"        messages = new ArrayList<SerializablePair<Localizable, Object[]>>(len);",2,0,0,1,4,1,0,4,2,6,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,226,        for (int i = 0; i < len; i++) {,4,1,0,1,3,2,0,0,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,228,            final Localizable key = (Localizable) in.readObject();,1,0,0,1,4,1,2,2,1,7,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,230,            final int aLen = in.readInt();,1,0,0,1,2,2,2,0,1,6,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,231,            final Object[] args = new Object[aLen];,1,0,1,0,4,2,0,2,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,232,            for (int j = 0; j < aLen; j++) {,4,1,0,1,3,2,0,0,1,6,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,234,                args[j] = in.readObject();,0,0,1,1,4,0,2,0,1,5,26,8,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,236,"            messages.add(new SerializablePair<Localizable, Object[]>(key, args));",2,0,0,0,6,1,2,3,1,6,69,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,238,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,249,        final int len = context.keySet().size();,1,0,0,1,4,2,3,0,1,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,250,        out.writeInt(len);,0,0,0,1,2,0,3,0,0,3,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,251,        for (String key : context.keySet()) {,1,0,0,2,5,1,2,1,0,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,253,            out.writeObject(key);,0,0,0,1,2,0,3,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,254,            final Object value = context.get(key);,1,0,0,1,2,1,3,1,1,7,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,255,            if (value instanceof Serializable) {,1,0,0,1,3,2,0,1,0,5,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,257,                out.writeObject(value);,0,0,0,1,2,0,3,0,0,3,23,9,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,260,                out.writeObject(nonSerializableReplacement(value));,0,0,0,2,4,0,4,0,1,4,51,9,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,262,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,263,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,276,        final int len = in.readInt();,1,0,0,1,2,2,2,0,1,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,277,"        context = new HashMap<String, Object>();",1,0,0,1,2,1,0,3,2,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,278,        for (int i = 0; i < len; i++) {,4,1,0,1,3,2,0,0,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,280,            final String key = (String) in.readObject();,1,0,0,1,4,1,2,2,1,7,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,282,            final Object value = in.readObject();,1,0,0,1,2,1,2,1,1,7,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,283,"            context.put(key, value);",0,0,0,0,2,0,4,0,0,2,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,285,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,295,"        return ""[Object could not be serialized: "" + obj.getClass().getName() + ""]"";",0,1,0,1,6,1,3,0,2,6,76,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotPositiveException,57,37,"        super(value, 0, true);",1,0,0,0,2,1,0,0,2,4,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotPositiveException,57,38,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotPositiveException,57,47,"        super(specific, value, 0, true);",2,0,0,0,2,1,0,0,2,4,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotPositiveException,57,48,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,57,50,        this(boundIsAllowed ?,1,0,0,0,1,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,57,54,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,57,68,"        super(specific, wrong, min);",3,0,0,0,2,1,0,0,1,4,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,57,70,        this.min = min;,2,0,0,0,0,1,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,57,71,        this.boundIsAllowed = boundIsAllowed;,2,0,0,0,0,1,0,0,1,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,57,72,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,57,78,        return boundIsAllowed;,1,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,57,85,        return min;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,57,46,"        super(pattern, wrong, arguments);",3,0,0,0,2,1,0,0,1,4,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,57,47,        argument = wrong;,2,0,0,0,0,0,0,0,1,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,57,48,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,57,54,        return argument;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,57,40,                                        Object ... args) {,1,0,0,0,2,0,0,1,0,3,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,57,41,"        addMessage(pattern, args);",0,0,0,0,2,0,3,0,1,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,57,42,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,57,41,"        this(LocalizedFormats.NULL_NOT_ALLOWED, null);",2,0,0,0,2,1,0,0,0,3,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,57,42,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,57,50,"        super(pattern, arguments);",2,0,0,0,2,1,0,0,1,4,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,57,51,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,57,44,"        super(specific, wrong, expected);",3,0,0,0,2,1,0,0,1,4,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,57,45,        dimension = expected;,2,0,0,0,0,0,0,0,1,2,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,57,46,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,57,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);",4,0,0,0,2,1,0,0,0,3,67,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,57,57,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,57,63,        return dimension;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotFiniteNumberException,57,40,"        this(LocalizedFormats.NOT_FINITE_NUMBER, wrong, args);",4,0,0,0,2,1,0,0,0,3,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotFiniteNumberException,57,41,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotFiniteNumberException,57,53,"        super(specific, wrong, args);",3,0,0,0,2,1,0,0,1,4,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotFiniteNumberException,57,54,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,61,"        this(wrong, previous, index, MathUtils.OrderDirection.INCREASING, true);",6,0,0,0,2,1,0,0,1,4,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,62,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,80,        super(direction == MathUtils.OrderDirection.INCREASING ?,4,1,0,0,1,1,0,0,1,5,56,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,89,        this.direction = direction;,2,0,0,0,0,1,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,90,        this.strict = strict;,2,0,0,0,0,1,0,0,1,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,91,        this.index = index;,2,0,0,0,0,1,0,0,1,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,92,        this.previous = previous;,2,0,0,0,0,1,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,93,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,99,        return direction;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,105,        return strict;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,113,        return index;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,119,        return previous;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,57,38,    public MathArithmeticException() {,1,0,0,1,3,1,0,0,1,5,34,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,57,39,        addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,2,0,0,1,2,0,1,0,1,5,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,57,40,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,57,50,                                   Object ... args) {,1,0,0,0,2,0,0,1,0,3,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,57,51,"        addMessage(pattern, args);",0,0,0,0,2,0,3,0,1,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,57,52,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,57,50,        this(boundIsAllowed ?,1,0,0,0,1,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,57,54,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,57,67,"        super(specific, wrong, max);",3,0,0,0,2,1,0,0,1,4,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,57,69,        this.max = max;,2,0,0,0,0,1,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,57,70,        this.boundIsAllowed = boundIsAllowed;,2,0,0,0,0,1,0,0,1,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,57,71,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,57,77,        return boundIsAllowed;,1,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,57,84,        return max;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,250,    private FastMath() {,1,0,0,1,3,1,0,0,1,5,20,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,251,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,263,        if (d > -MathUtils.SAFE_MIN && d < MathUtils.SAFE_MIN){,6,3,0,1,3,1,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,264,            return d; // These are un-normalised - don't try to convert,1,0,0,0,0,2,0,0,0,2,59,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,266,        long xl = Double.doubleToLongBits(d);,1,0,0,1,2,1,3,0,0,5,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,267,        xl = xl & MASK_30BITS; // Drop low order bits,3,1,0,0,0,0,0,0,1,3,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,268,        return Double.longBitsToDouble(xl);,0,0,0,1,2,1,3,0,0,4,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,285,      if (x != x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,286,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,289,      if (x > 20.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,290,          return exp(x)/2.0;,0,1,0,1,2,1,2,0,1,6,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,293,      if (x < -20) {,1,1,0,1,3,1,0,0,1,6,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,294,          return exp(-x)/2.0;,1,1,0,1,2,1,1,0,2,7,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,297,      double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,298,      if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,299,          x = -x;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,301,"      exp(x, 0.0, hiPrec);",0,0,0,0,2,0,3,0,1,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,303,      double ya = hiPrec[0] + hiPrec[1];,1,1,1,0,4,1,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,304,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,2,1,1,1,6,1,0,0,1,7,42,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,306,      double temp = ya * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,307,      double yaa = ya + temp - temp;,4,2,0,0,0,1,0,0,0,3,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,308,      double yab = ya - yaa;,3,1,0,0,0,1,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,311,      double recip = 1.0/ya;,2,1,0,0,0,1,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,312,      temp = recip * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,313,      double recipa = recip + temp - temp;,4,2,0,0,0,1,0,0,0,3,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,314,      double recipb = recip - recipa;,3,1,0,0,0,1,0,0,0,3,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,317,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,10,9,0,1,2,0,0,0,1,5,76,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,319,      recipb += -yb * recip * recip;,4,1,0,0,0,0,0,0,2,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,322,      temp = ya + recipa;,3,1,0,0,0,0,0,0,1,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,323,      yb += -(temp - ya - recipa);,4,1,0,1,2,0,0,0,2,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,324,      ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,325,      temp = ya + recipb;,3,1,0,0,0,0,0,0,1,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,326,      yb += -(temp - ya - recipb);,4,1,0,1,2,0,0,0,2,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,327,      ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,329,      double result = ya + yb;,3,1,0,0,0,1,0,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,330,      result *= 0.5;,1,0,0,0,0,0,0,0,1,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,331,      return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,339,      boolean negate = false;,1,0,0,0,0,1,0,0,1,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,340,      if (x != x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,341,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,344,      if (x > 20.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,345,          return exp(x)/2.0;,0,1,0,1,2,1,2,0,1,6,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,348,      if (x < -20) {,1,1,0,1,3,1,0,0,1,6,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,349,          return -exp(-x)/2.0;,1,1,0,1,2,1,1,0,3,7,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,352,      if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,353,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,356,      if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,357,          x = -x;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,358,          negate = true;,1,0,0,0,0,0,0,0,2,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,363,      if (x > 0.25) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,364,          double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,365,"          exp(x, 0.0, hiPrec);",0,0,0,0,2,0,3,0,1,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,367,          double ya = hiPrec[0] + hiPrec[1];,1,1,1,0,4,1,0,0,0,5,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,368,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,2,1,1,1,6,1,0,0,1,7,42,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,370,          double temp = ya * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,371,          double yaa = ya + temp - temp;,4,2,0,0,0,1,0,0,0,3,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,372,          double yab = ya - yaa;,3,1,0,0,0,1,0,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,375,          double recip = 1.0/ya;,2,1,0,0,0,1,0,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,376,          temp = recip * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,377,          double recipa = recip + temp - temp;,4,2,0,0,0,1,0,0,0,3,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,378,          double recipb = recip - recipa;,3,1,0,0,0,1,0,0,0,3,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,381,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,10,9,0,1,2,0,0,0,1,5,76,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,383,          recipb += -yb * recip * recip;,4,1,0,0,0,0,0,0,2,3,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,385,          recipa = -recipa;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,386,          recipb = -recipb;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,389,          temp = ya + recipa;,3,1,0,0,0,0,0,0,1,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,390,          yb += -(temp - ya - recipa);,4,1,0,1,2,0,0,0,2,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,391,          ya = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,392,          temp = ya + recipb;,3,1,0,0,0,0,0,0,1,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,393,          yb += -(temp - ya - recipb);,4,1,0,1,2,0,0,0,2,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,394,          ya = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,396,          result = ya + yb;,3,1,0,0,0,0,0,0,1,3,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,397,          result *= 0.5;,1,0,0,0,0,0,0,0,1,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,398,      },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,400,          double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,401,"          expm1(x, hiPrec);",0,0,0,0,2,0,3,0,1,3,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,403,          double ya = hiPrec[0] + hiPrec[1];,1,1,1,0,4,1,0,0,0,5,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,404,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,2,1,1,1,6,1,0,0,1,7,42,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,407,          double denom = 1.0 + ya;,2,1,0,0,0,1,0,0,0,3,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,408,          double denomr = 1.0 / denom;,2,1,0,0,0,1,0,0,0,3,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,409,          double denomb = -(denom - 1.0 - ya) + yb;,4,2,0,1,2,1,0,0,1,6,41,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,410,          double ratio = ya * denomr;,3,1,0,0,0,1,0,0,0,3,27,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,411,          double temp = ratio * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,35,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,412,          double ra = ratio + temp - temp;,4,2,0,0,0,1,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,413,          double rb = ratio - ra;,3,1,0,0,0,1,0,0,0,3,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,415,          temp = denom * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,416,          double za = denom + temp - temp;,4,2,0,0,0,1,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,417,          double zb = denom - za;,3,1,0,0,0,1,0,0,0,3,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,419,          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;,11,9,0,1,2,0,0,0,1,5,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,422,          rb += yb*denomr;                        // numerator,3,1,0,0,0,0,0,0,1,3,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,423,          rb += -ya * denomb * denomr * denomr;   // denominator,5,1,0,0,0,0,0,0,2,3,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,426,          temp = ya + ra;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,427,          yb += -(temp - ya - ra);,4,1,0,1,2,0,0,0,2,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,428,          ya = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,429,          temp = ya + rb;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,430,          yb += -(temp - ya - rb);,4,1,0,1,2,0,0,0,2,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,431,          ya = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,433,          result = ya + yb;,3,1,0,0,0,0,0,0,1,3,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,434,          result *= 0.5;,1,0,0,0,0,0,0,0,1,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,437,      if (negate) {,1,0,0,1,3,1,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,438,          result = -result;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,441,      return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,449,      boolean negate = false;,1,0,0,0,0,1,0,0,1,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,451,      if (x != x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,452,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,455,      if (x > 20.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,456,          return 1.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,459,      if (x < -20) {,1,1,0,1,3,1,0,0,1,6,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,460,          return -1.0;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,463,      if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,464,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,467,      if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,468,          x = -x;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,469,          negate = true;,1,0,0,0,0,0,0,0,2,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,473,      if (x >= 0.5) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,474,          double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,476,"          exp(x*2.0, 0.0, hiPrec);",1,1,0,0,2,0,2,0,1,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,478,          double ya = hiPrec[0] + hiPrec[1];,1,1,1,0,4,1,0,0,0,5,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,479,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,2,1,1,1,6,1,0,0,1,7,42,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,482,          double na = -1.0 + ya;,2,1,0,0,0,1,0,0,1,4,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,483,          double nb = -(na + 1.0 - ya);,3,2,0,1,2,1,0,0,1,6,29,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,484,          double temp = na + yb;,3,1,0,0,0,1,0,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,485,          nb += -(temp - na - yb);,4,1,0,1,2,0,0,0,2,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,486,          na = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,489,          double da = 1.0 + ya;,2,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,490,          double db = -(da - 1.0 - ya);,3,1,0,1,2,1,0,0,1,6,29,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,491,          temp = da + yb;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,492,          db += -(temp - da - yb);,4,1,0,1,2,0,0,0,2,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,493,          da = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,495,          temp = da * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,496,          double daa = da + temp - temp;,4,2,0,0,0,1,0,0,0,3,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,497,          double dab = da - daa;,3,1,0,0,0,1,0,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,500,          double ratio = na/da;,3,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,501,          temp = ratio * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,502,          double ratioa = ratio + temp - temp;,4,2,0,0,0,1,0,0,0,3,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,503,          double ratiob = ratio - ratioa;,3,1,0,0,0,1,0,0,0,3,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,506,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,11,9,0,1,2,0,0,0,1,5,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,509,          ratiob += nb / da;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,511,          ratiob += -db * na / da / da;,5,3,0,0,0,0,0,0,2,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,513,          result = ratioa + ratiob;,3,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,514,      },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,516,          double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,518,"          expm1(x*2.0, hiPrec);",1,1,0,0,2,0,2,0,1,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,520,          double ya = hiPrec[0] + hiPrec[1];,1,1,1,0,4,1,0,0,0,5,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,521,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,2,1,1,1,6,1,0,0,1,7,42,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,524,          double na = ya;,2,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,525,          double nb = yb;,2,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,528,          double da = 2.0 + ya;,2,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,529,          double db = -(da - 2.0 - ya);,3,1,0,1,2,1,0,0,1,6,29,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,530,          double temp = da + yb;,3,1,0,0,0,1,0,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,531,          db += -(temp - da - yb);,4,1,0,1,2,0,0,0,2,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,532,          da = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,534,          temp = da * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,535,          double daa = da + temp - temp;,4,2,0,0,0,1,0,0,0,3,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,536,          double dab = da - daa;,3,1,0,0,0,1,0,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,539,          double ratio = na/da;,3,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,540,          temp = ratio * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,541,          double ratioa = ratio + temp - temp;,4,2,0,0,0,1,0,0,0,3,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,542,          double ratiob = ratio - ratioa;,3,1,0,0,0,1,0,0,0,3,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,545,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,11,9,0,1,2,0,0,0,1,5,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,548,          ratiob += nb / da;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,550,          ratiob += -db * na / da / da;,5,3,0,0,0,0,0,0,2,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,552,          result = ratioa + ratiob;,3,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,555,      if (negate) {,1,0,0,1,3,1,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,556,          result = -result;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,559,      return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,567,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,3,3,0,2,4,1,4,0,0,6,50,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,576,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,577,        if (a < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,578,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,579,            a = -a;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,583,        if (a > 0.167) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,584,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,4,3,0,2,4,0,4,0,1,6,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,586,            final double a2 = a * a;,3,1,0,0,0,2,0,0,1,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,587,            if (a > 0.097) {,1,1,0,1,3,1,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,588,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0 - a2 * (1.0 / 15.0 - a2 * (1.0 / 17.0) * 15.0 / 16.0) * 13.0 / 14.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,10,33,0,9,18,0,0,0,1,5,264,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,589,            } else if (a > 0.036) {,1,1,0,1,4,2,0,0,0,5,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,590,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,8,25,0,7,14,0,0,0,1,5,196,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,591,            } else if (a > 0.0036) {,1,1,0,1,4,2,0,0,0,5,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,592,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,6,17,0,5,10,0,0,0,1,5,129,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,594,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0) * 3.0 / 4.0) / 2.0);,4,9,0,3,6,0,0,0,1,5,71,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,598,        return negative ? -absAsinh : absAsinh;,3,0,0,0,0,1,0,0,1,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,608,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,609,        if (a < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,610,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,611,            a = -a;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,615,        if (a > 0.15) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,616,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,3,4,0,2,6,0,2,0,1,6,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,618,            final double a2 = a * a;,3,1,0,0,0,2,0,0,1,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,619,            if (a > 0.087) {,1,1,0,1,3,1,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,620,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0 + a2 * (1.0 / 15.0 + a2 * (1.0 / 17.0)))))))));,10,25,0,9,18,0,0,0,1,5,175,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,621,            } else if (a > 0.031) {,1,1,0,1,4,2,0,0,0,5,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,622,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0)))))));,8,19,0,7,14,0,0,0,1,5,135,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,623,            } else if (a > 0.003) {,1,1,0,1,4,2,0,0,0,5,23,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,624,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0)))));,6,13,0,5,10,0,0,0,1,5,95,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,626,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0)));,4,7,0,3,6,0,0,0,1,5,57,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,630,        return negative ? -absAtanh : absAtanh;,3,0,0,0,0,1,0,0,1,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,640,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,3,2,0,2,6,2,0,0,1,6,87,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,649,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,3,2,0,2,6,2,0,0,1,6,91,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,657,"        return nextAfter(a, Double.POSITIVE_INFINITY);",2,0,0,0,2,1,2,0,1,5,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,665,"        return nextAfter(a, Float.POSITIVE_INFINITY);",2,0,0,0,2,1,2,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,673,        return Math.random();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,697,"        return exp(x, 0.0, null);",0,0,0,0,2,1,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,716,        if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,717,            intVal = (int) -x;,2,0,0,1,2,1,0,0,2,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,719,            if (intVal > 746) {,1,1,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,720,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,721,                    hiPrec[0] = 0.0;,0,0,1,0,2,0,0,0,1,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,722,                    hiPrec[1] = 0.0;,0,0,1,0,2,0,0,0,1,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,724,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,727,            if (intVal > 709) {,1,1,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,729,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",2,2,0,0,2,2,3,0,2,6,79,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,730,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,731,                    hiPrec[0] /= 285040095144011776.0;,0,0,1,0,2,0,0,0,1,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,732,                    hiPrec[1] /= 285040095144011776.0;,0,0,1,0,2,0,0,0,1,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,734,                return result;,1,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,737,            if (intVal == 709) {,1,1,0,1,3,1,0,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,739,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",2,2,0,0,2,2,3,0,2,6,79,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,740,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,741,                    hiPrec[0] /= 4.455505956692756620;,0,0,1,0,2,0,0,0,1,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,742,                    hiPrec[1] /= 4.455505956692756620;,0,0,1,0,2,0,0,0,1,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,744,                return result;,1,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,747,            intVal++;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,749,            intPartA = EXP_INT_TABLE_A[750-intVal];,2,1,1,0,2,0,0,0,1,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,750,            intPartB = EXP_INT_TABLE_B[750-intVal];,2,1,1,0,2,0,0,0,1,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,752,            intVal = -intVal;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,754,            intVal = (int) x;,2,0,0,1,2,1,0,0,1,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,756,            if (intVal > 709) {,1,1,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,757,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,758,                    hiPrec[0] = Double.POSITIVE_INFINITY;,2,0,1,0,2,0,0,0,1,4,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,759,                    hiPrec[1] = 0.0;,0,0,1,0,2,0,0,0,1,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,761,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,764,            intPartA = EXP_INT_TABLE_A[750+intVal];,2,1,1,0,2,0,0,0,1,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,765,            intPartB = EXP_INT_TABLE_B[750+intVal];,2,1,1,0,2,0,0,0,1,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,772,        final int intFrac = (int) ((x - intVal) * 1024.0);,3,2,0,2,6,3,0,0,1,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,773,        final double fracPartA = EXP_FRAC_TABLE_A[intFrac];,1,0,1,0,2,2,0,0,1,5,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,774,        final double fracPartB = EXP_FRAC_TABLE_B[intFrac];,1,0,1,0,2,2,0,0,1,5,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,780,        final double epsilon = x - (intVal + intFrac / 1024.0);,4,3,0,1,2,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,789,        double z = 0.04168701738764507;,1,0,0,0,0,1,0,0,0,2,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,790,        z = z * epsilon + 0.1666666505023083;,3,2,0,0,0,0,0,0,1,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,791,        z = z * epsilon + 0.5000000000042687;,3,2,0,0,0,0,0,0,1,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,792,        z = z * epsilon + 1.0;,3,2,0,0,0,0,0,0,1,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,793,        z = z * epsilon + -3.940510424527919E-20;,3,2,0,0,0,0,0,0,2,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,800,        double tempA = intPartA * fracPartA;,3,1,0,0,0,1,0,0,0,3,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,801,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,7,5,0,0,0,1,0,0,0,3,82,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,807,        final double tempC = tempB + tempA;,3,1,0,0,0,2,0,0,1,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,809,        if (extra != 0.0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,810,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,10,7,0,0,0,0,0,0,1,3,63,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,812,            result = tempC*z + tempB + tempA;,5,3,0,0,0,0,0,0,1,3,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,815,        if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,817,            hiPrec[0] = tempA;,1,0,1,0,2,0,0,0,1,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,818,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,8,6,1,0,2,0,0,0,1,5,58,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,821,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,829,"      return expm1(x, null);",0,0,0,0,2,1,2,0,1,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,838,        if (x != x || x == 0.0) { // NaN or zero,3,3,0,1,3,1,0,0,0,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,839,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,842,        if (x <= -1.0 || x >= 1.0) {,2,3,0,1,3,1,0,0,1,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,845,            double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,846,"            exp(x, 0.0, hiPrec);",0,0,0,0,2,0,3,0,1,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,847,            if (x > 0.0) {,1,1,0,1,3,1,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,848,                return -1.0 + hiPrec[0] + hiPrec[1];,0,1,1,0,4,1,0,0,1,5,36,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,850,                final double ra = -1.0 + hiPrec[0];,1,1,1,0,2,2,0,0,2,6,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,851,                double rb = -(ra + 1.0 - hiPrec[0]);,2,2,1,1,4,1,0,0,1,7,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,852,                rb += hiPrec[1];,1,0,1,0,2,0,0,0,1,4,16,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,853,                return ra + rb;,2,1,0,0,0,1,0,0,0,3,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,860,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,862,        if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,863,            x = -x;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,864,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,868,            int intFrac = (int) (x * 1024.0);,2,1,0,1,4,2,0,0,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,869,            double tempA = EXP_FRAC_TABLE_A[intFrac] - 1.0;,1,1,1,0,2,1,0,0,0,5,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,870,            double tempB = EXP_FRAC_TABLE_B[intFrac];,1,0,1,0,2,1,0,0,0,4,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,872,            double temp = tempA + tempB;,3,1,0,0,0,1,0,0,0,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,873,            tempB = -(temp - tempA - tempB);,4,1,0,1,2,0,0,0,2,5,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,874,            tempA = temp;,2,0,0,0,0,0,0,0,1,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,876,            temp = tempA * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,877,            baseA = tempA + temp - temp;,4,2,0,0,0,0,0,0,1,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,878,            baseB = tempB + (tempA - baseA);,4,2,0,1,2,0,0,0,1,5,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,880,            epsilon = x - intFrac/1024.0;,3,2,0,0,0,0,0,0,1,3,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,885,        double zb = 0.008336750013465571;,1,0,0,0,0,1,0,0,0,2,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,886,        zb = zb * epsilon + 0.041666663879186654;,3,2,0,0,0,0,0,0,1,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,887,        zb = zb * epsilon + 0.16666666666745392;,3,2,0,0,0,0,0,0,1,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,888,        zb = zb * epsilon + 0.49999999999999994;,3,2,0,0,0,0,0,0,1,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,889,        zb = zb * epsilon;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,890,        zb = zb * epsilon;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,892,        double za = epsilon;,2,0,0,0,0,1,0,0,0,2,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,893,        double temp = za + zb;,3,1,0,0,0,1,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,894,        zb = -(temp - za - zb);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,895,        za = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,897,        temp = za * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,898,        temp = za + temp - temp;,4,2,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,899,        zb += za - temp;,3,1,0,0,0,0,0,0,1,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,900,        za = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,903,        double ya = za * baseA;,3,1,0,0,0,1,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,905,        temp = ya + za * baseB;,4,2,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,906,        double yb = -(temp - ya - za * baseB);,5,2,0,1,2,1,0,0,1,6,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,907,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,909,        temp = ya + zb * baseA;,4,2,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,910,        yb += -(temp - ya - zb * baseA);,5,2,0,1,2,0,0,0,2,5,32,4,0.0,0,0
