dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,math,org/apache/commons/math/util/FastMath,57,1046,            a[0] = (c + z - c) * HEX_40000000;,0,0,0,2,4,0,0,0,0,6,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1047,            a[1] = c - a[0] + d;,0,0,0,2,4,0,0,0,0,6,20,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1049,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1057,        ans[0] = a[0] * b[0];,0,0,0,3,6,0,0,0,0,9,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1058,        ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];,0,0,0,7,14,0,0,0,0,21,49,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1061,        resplit(ans);,2,0,0,1,2,3,0,0,0,5,13,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1062,    },6,1,0,0,1,0,0,0,0,8,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1070,        ans[0] = a[0] + b[0];,0,0,0,3,6,0,0,0,0,9,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1071,        ans[1] = a[1] + b[1];,0,0,0,3,6,0,0,0,0,9,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1073,        resplit(ans);,0,0,0,1,2,0,0,0,0,3,13,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1074,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1095,        final double b = 1.0/4194304.0;,2,0,0,0,0,0,0,0,0,2,31,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1096,        final double a = 1.0 - b;,0,0,0,0,0,0,0,0,0,0,25,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1098,        if (in[0] == 0.0) {,0,0,0,2,5,0,0,0,0,7,19,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1103,        result[0] = a / in[0];,10,3,1,2,4,1,12,0,0,31,22,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1104,        result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);,0,0,0,9,18,0,0,0,0,27,60,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1106,        if (result[1] != result[1]) { // can happen if result[1] is NAN,2,0,0,4,9,0,4,0,0,7,63,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1107,            result[1] = 0.0;,0,0,1,1,2,0,0,0,0,3,16,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1111,        resplit(result);,0,0,0,1,2,0,0,0,0,3,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1113,        for (int i = 0; i < 2; i++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1115,            double err = 1.0 - result[0] * in[0] - result[0] * in[1] -,6,6,1,4,8,0,0,0,0,21,58,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1118,            err = err * (result[0] + result[1]);,4,2,1,3,6,0,0,0,0,11,36,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1120,            result[1] += err;,0,0,0,1,2,0,0,0,0,3,17,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1122,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1130,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1131,        final double ys[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1132,        final double zs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1135,"        split(a[0], xs);",0,1,0,2,4,0,16,0,0,17,16,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1136,"        split(b[0], ys);",0,0,0,2,4,0,0,0,0,6,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1137,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,8,0,0,8,22,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1139,        result[0] = zs[0];,6,4,1,2,4,0,0,0,0,15,18,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1140,        result[1] = zs[1];,8,1,1,2,4,1,4,0,0,20,18,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1143,"        split(b[1], ys);",0,0,0,2,4,0,0,0,0,6,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1144,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,12,0,0,12,22,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1146,        double tmp = result[0] + zs[0];,0,0,0,2,4,0,4,0,0,4,31,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1147,        result[1] = result[1] - (tmp - result[0] - zs[0]);,0,0,0,5,10,0,0,0,0,15,50,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1148,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1149,        tmp = result[0] + zs[1];,2,1,1,2,4,0,0,0,0,8,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1150,        result[1] = result[1] - (tmp - result[0] - zs[1]);,2,2,1,5,10,0,0,0,0,13,50,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1151,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1154,"        split(a[1], xs);",0,0,1,2,4,0,4,0,0,6,16,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1155,"        split(b[0], ys);",2,2,1,2,4,0,4,0,0,19,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1156,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,8,0,0,8,22,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1158,        tmp = result[0] + zs[0];,0,0,0,2,4,0,0,0,0,6,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1159,        result[1] = result[1] - (tmp - result[0] - zs[0]);,2,2,1,5,10,0,0,0,0,13,50,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1160,        result[0] = tmp;,4,1,1,1,2,0,0,0,0,8,16,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1161,        tmp = result[0] + zs[1];,2,1,1,2,4,0,0,0,0,8,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1162,        result[1] = result[1] - (tmp - result[0] - zs[1]);,0,0,0,5,10,0,0,0,0,15,50,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1163,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1166,"        split(a[1], xs);",0,0,0,2,4,0,0,0,0,6,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1167,"        split(b[1], ys);",0,0,1,2,4,0,4,0,0,6,16,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1168,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,0,0,0,3,22,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1170,        tmp = result[0] + zs[0];,0,0,0,2,4,0,0,0,0,6,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1171,        result[1] = result[1] - (tmp - result[0] - zs[0]);,6,1,0,5,10,0,0,0,0,8,50,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1172,        result[0] = tmp;,0,0,0,1,2,0,0,0,0,3,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1173,        tmp = result[0] + zs[1];,0,0,0,2,4,0,0,0,0,6,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1174,        result[1] = result[1] - (tmp - result[0] - zs[1]);,4,0,0,5,10,2,0,0,0,7,50,1,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1175,        result[0] = tmp;,8,0,1,1,2,0,0,0,0,11,16,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1176,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1185,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1186,        final double as[] = new double[2];,10,1,0,2,4,0,0,0,0,12,34,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1187,        final double ys[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1196,        xs[0] = 2.718281828459045;,0,0,1,1,2,0,0,0,0,3,26,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1197,        xs[1] = 1.4456468917292502E-16;,2,0,1,1,2,3,0,0,0,8,31,1,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1199,"        split(1.0, ys);",0,0,0,1,2,0,0,0,0,3,15,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1201,        while (p > 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1202,            if ((p & 1) != 0) {,2,2,0,2,5,0,0,0,0,4,19,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1203,"                quadMult(ys, xs, as);",0,0,0,1,2,0,8,0,0,8,21,9,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1204,                ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1207,"            quadMult(xs, xs, as);",2,0,0,1,2,0,8,0,0,11,21,0,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1208,            xs[0] = as[0]; xs[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1210,            p >>= 1;,2,0,0,0,0,0,0,0,0,3,8,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1213,        if (result != null) {,8,1,0,1,3,1,0,4,0,14,21,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1214,            result[0] = ys[0];,0,0,0,2,4,0,0,0,0,6,18,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1215,            result[1] = ys[1];,0,0,1,2,4,0,0,0,0,5,18,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1217,            resplit(result);,6,1,0,1,2,1,4,0,0,12,16,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1220,        return ys[0] + ys[1];,0,0,0,2,4,1,0,0,0,7,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1716,        double x[] = new double[2];,0,0,0,2,4,0,0,0,0,6,27,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1717,        double x2[] = new double[2];,0,0,0,2,4,0,0,0,0,6,28,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1718,        double y[] = new double[2];,0,0,0,2,4,0,0,0,0,6,27,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1719,        double a[] = new double[2];,0,0,0,2,4,0,0,0,0,6,27,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1721,"        split(xi, x);",0,0,0,1,2,0,6,0,0,6,13,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1724,        x[0] += 1.0;,0,0,0,1,2,0,0,0,0,3,12,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1725,        resplit(x);,0,0,1,1,2,0,0,0,0,5,11,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1726,"        splitReciprocal(x, a);",0,0,0,1,2,0,6,0,0,6,22,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1727,        x[0] -= 2.0;,0,0,0,1,2,0,8,0,0,9,12,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1728,        resplit(x);,0,0,0,1,2,0,4,0,0,4,11,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1729,"        splitMult(x, a, y);",6,1,0,1,2,0,8,0,0,16,19,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1730,        x[0] = y[0];,0,0,0,2,4,0,0,0,0,6,12,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1731,        x[1] = y[1];,4,0,1,2,4,0,0,0,0,10,12,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1734,"        splitMult(x, x, x2);",0,0,0,1,2,0,8,0,0,8,20,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1740,        y[0] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][0];,4,1,1,3,6,0,0,0,0,10,48,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1741,        y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];,8,1,1,3,6,0,0,0,0,18,48,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1743,        for (int i = LN_SPLIT_COEF.length-2; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,51,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1744,"            splitMult(y, x2, a);",0,0,0,1,2,0,0,0,0,3,20,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1745,            y[0] = a[0];,0,0,1,2,4,0,0,0,0,5,12,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1746,            y[1] = a[1];,0,0,1,2,4,0,8,0,0,13,12,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1747,"            splitAdd(y, LN_SPLIT_COEF[i], a);",0,0,0,2,4,0,0,0,0,6,33,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1748,            y[0] = a[0];,6,3,1,2,4,1,0,0,0,19,12,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1749,            y[1] = a[1];,0,0,1,2,4,0,4,0,0,9,12,1,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1752,"        splitMult(y, x, a);",0,0,0,1,2,0,8,0,0,8,19,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1753,        y[0] = a[0];,10,2,0,2,4,0,0,0,0,13,12,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1754,        y[1] = a[1];,0,0,0,2,4,0,0,0,0,6,12,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1756,        return y;,0,0,0,0,0,1,4,0,0,5,9,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1766,        final double xs[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1767,        final double ys[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1768,        final double facts[] = new double[2];,8,1,0,2,4,1,0,0,0,11,37,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1769,        final double as[] = new double[2];,2,0,0,2,4,0,0,0,0,4,34,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1770,"        split(x, xs);",0,0,0,1,2,0,6,0,0,6,13,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1771,        ys[0] = ys[1] = 0.0;,0,0,1,2,4,0,0,0,0,6,20,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1773,        for (int i = 19; i >= 0; i--) {,6,1,0,1,3,0,0,0,0,8,31,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1774,"            splitMult(xs, ys, as);",0,0,0,1,2,0,0,0,0,3,22,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1775,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1777,            if ( (i & 1) == 0) {,2,2,1,2,5,0,0,0,0,15,20,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1778,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1781,"            split(FACT[i], as);",4,0,1,2,4,0,4,0,0,13,19,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1782,"            splitReciprocal(as, facts);",0,0,0,1,2,0,0,0,0,3,27,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1784,            if ( (i & 2) != 0 ) {,2,2,0,2,5,0,0,0,0,4,21,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1785,                facts[0] = -facts[0];,0,0,0,2,4,0,0,0,0,6,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1786,                facts[1] = -facts[1];,0,0,1,2,4,0,0,0,0,6,21,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1789,"            splitAdd(ys, facts, as);",0,0,0,1,2,0,0,0,0,3,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1790,            ys[0] = as[0]; ys[1] = as[1];,0,0,0,4,8,0,0,0,0,12,29,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1793,        if (result != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1794,            result[0] = ys[0];,0,0,0,2,4,0,0,0,0,6,18,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1795,            result[1] = ys[1];,0,0,0,2,4,0,0,0,0,6,18,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1798,        return ys[0] + ys[1];,0,1,1,2,4,1,0,0,0,5,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1809,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1810,        final double ys[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1811,        final double facts[] = new double[2];,0,0,0,2,4,0,0,0,0,6,37,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1812,        final double as[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1813,"        split(x, xs);",0,0,0,1,2,0,0,0,0,3,13,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1814,        ys[0] = ys[1] = 0.0;,0,0,0,2,4,0,0,0,0,6,20,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1816,        for (int i = 19; i >= 0; i--) {,6,1,0,1,3,0,0,0,0,7,31,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1817,"            splitMult(xs, ys, as);",14,2,0,1,2,2,0,0,0,18,22,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1818,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1820,            if ( (i & 1) != 0) {,0,0,0,2,5,0,0,0,0,7,20,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1821,                continue;,0,0,0,0,0,0,6,0,0,6,9,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1824,"            split(FACT[i], as);",0,0,1,2,4,0,4,0,0,8,19,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1825,"            splitReciprocal(as, facts);",0,0,0,1,2,0,0,0,0,3,27,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1827,            if ( (i & 2) != 0 ) {,0,0,0,2,5,0,0,0,0,7,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1828,                facts[0] = -facts[0];,0,0,0,2,4,0,0,0,0,6,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1829,                facts[1] = -facts[1];,2,1,1,2,4,0,0,0,0,7,21,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1832,"            splitAdd(ys, facts, as);",0,0,0,1,2,0,0,0,0,3,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1833,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1836,        if (result != null) {,2,1,1,1,3,0,0,0,0,8,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1837,            result[0] = ys[0];,0,0,1,2,4,0,0,0,0,5,18,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1838,            result[1] = ys[1];,0,0,1,2,4,0,0,0,0,5,18,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1841,        return ys[0] + ys[1];,0,0,0,2,4,1,0,0,0,7,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1847,        final double result[] = new double[2];,2,0,0,2,4,1,0,0,0,3,38,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1850,        for (int i = 0; i < 7; i++) {,6,1,0,1,3,0,0,0,0,8,29,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1851,            double x = i / 8.0;,0,0,0,0,0,0,0,0,0,0,19,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1853,"            slowSin(x, result);",6,1,0,1,2,0,0,0,0,8,19,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1854,            SINE_TABLE_A[i] = result[0];,4,1,0,2,4,0,0,0,0,5,28,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1855,            SINE_TABLE_B[i] = result[1];,0,0,0,2,4,0,0,0,0,6,28,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1857,"            slowCos(x, result);",0,0,0,1,2,0,6,0,0,6,19,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1858,            COSINE_TABLE_A[i] = result[0];,2,0,0,2,4,0,0,0,0,2,30,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1859,            COSINE_TABLE_B[i] = result[1];,0,0,1,2,4,0,0,0,0,7,30,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1863,        for (int i = 7; i < 14; i++) {,22,11,1,1,3,0,0,0,0,42,30,0,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1864,            double xs[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1865,            double ys[] = new double[2];,12,1,1,2,4,1,0,0,0,18,28,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1866,            double as[] = new double[2];,4,1,1,2,4,0,0,0,0,8,28,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1867,            double bs[] = new double[2];,0,0,0,2,4,0,8,0,0,8,28,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1868,            double temps[] = new double[2];,0,0,0,2,4,0,0,0,0,6,31,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1870,            if ( (i & 1) == 0) {,2,2,0,2,5,0,0,0,0,4,20,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1872,                xs[0] = SINE_TABLE_A[i/2];,0,0,0,2,4,0,12,0,0,12,26,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1873,                xs[1] = SINE_TABLE_B[i/2];,2,0,0,2,4,0,0,0,0,3,26,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1874,                ys[0] = COSINE_TABLE_A[i/2];,0,0,0,2,4,0,0,0,0,6,28,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1875,                ys[1] = COSINE_TABLE_B[i/2];,0,0,0,2,4,0,0,0,0,6,28,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1878,"                splitMult(xs, ys, result);",0,0,0,1,2,0,8,0,0,8,26,9,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1879,                SINE_TABLE_A[i] = result[0] * 2.0;,0,0,0,2,4,0,0,0,0,6,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1880,                SINE_TABLE_B[i] = result[1] * 2.0;,0,0,0,2,4,0,0,0,0,6,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1883,"                splitMult(ys, ys, as);",0,0,0,1,2,0,8,0,0,8,22,9,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1884,"                splitMult(xs, xs, temps);",2,0,0,1,2,0,8,0,0,11,25,0,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1885,                temps[0] = -temps[0];,0,0,1,2,4,0,0,0,0,6,21,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1886,                temps[1] = -temps[1];,2,0,1,2,4,0,0,0,0,8,21,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1887,"                splitAdd(as, temps, result);",0,0,0,1,2,0,0,0,0,3,28,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1888,                COSINE_TABLE_A[i] = result[0];,0,0,1,2,4,0,0,0,0,7,30,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1889,                COSINE_TABLE_B[i] = result[1];,0,0,0,2,4,0,0,0,0,6,30,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1891,                xs[0] = SINE_TABLE_A[i/2];,2,1,1,2,4,0,0,0,0,8,26,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1892,                xs[1] = SINE_TABLE_B[i/2];,0,0,0,2,4,0,0,0,0,6,26,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1893,                ys[0] = COSINE_TABLE_A[i/2];,0,0,0,2,4,0,0,0,0,6,28,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1894,                ys[1] = COSINE_TABLE_B[i/2];,0,0,0,2,4,0,0,0,0,6,28,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1895,                as[0] = SINE_TABLE_A[i/2+1];,2,2,1,2,4,0,0,0,0,9,28,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1896,                as[1] = SINE_TABLE_B[i/2+1];,2,2,1,2,4,0,0,0,0,9,28,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1897,                bs[0] = COSINE_TABLE_A[i/2+1];,2,0,0,2,4,0,0,0,0,3,30,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1898,                bs[1] = COSINE_TABLE_B[i/2+1];,2,2,1,2,4,0,0,0,0,9,30,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1901,"                splitMult(xs, bs, temps);",0,0,0,1,2,0,0,0,0,3,25,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1902,"                splitMult(ys, as, result);",0,0,0,1,2,0,0,0,0,3,26,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1903,"                splitAdd(result, temps, result);",0,0,0,1,2,0,8,0,0,8,32,9,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1904,                SINE_TABLE_A[i] = result[0];,0,0,1,2,4,0,0,0,0,7,28,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1905,                SINE_TABLE_B[i] = result[1];,0,0,0,2,4,0,0,0,0,6,28,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1908,"                splitMult(ys, bs, result);",0,0,0,1,2,0,0,0,0,3,26,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1909,"                splitMult(xs, as, temps);",0,0,0,1,2,0,8,0,0,8,25,9,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1910,                temps[0] = -temps[0];,0,0,0,2,4,0,0,0,0,6,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1911,                temps[1] = -temps[1];,0,0,1,2,4,0,0,0,0,6,21,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1912,"                splitAdd(result, temps, result);",6,0,0,1,2,0,0,0,0,7,32,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1913,                COSINE_TABLE_A[i] = result[0];,0,0,0,2,4,0,0,0,0,6,30,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1914,                COSINE_TABLE_B[i] = result[1];,0,0,0,2,4,0,0,0,0,6,30,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1919,        for (int i = 0; i < 14; i++) {,6,1,0,1,3,0,0,0,0,8,30,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1920,            double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,28,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1921,            double ys[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1922,            double as[] = new double[2];,0,0,0,2,4,0,0,0,0,6,28,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1924,            as[0] = COSINE_TABLE_A[i];,0,0,1,2,4,0,4,0,0,11,26,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1925,            as[1] = COSINE_TABLE_B[i];,0,0,1,2,4,0,0,0,0,13,26,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1927,"            splitReciprocal(as, ys);",2,1,0,1,2,0,6,0,0,9,24,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1929,            xs[0] = SINE_TABLE_A[i];,0,0,0,2,4,0,0,0,0,6,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1930,            xs[1] = SINE_TABLE_B[i];,6,0,1,2,4,0,6,2,0,28,24,0,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1932,"            splitMult(xs, ys, as);",2,0,0,1,2,0,0,0,0,3,22,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1934,            TANGENT_TABLE_A[i] = as[0];,0,0,0,2,4,0,0,0,0,6,27,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1935,            TANGENT_TABLE_B[i] = as[1];,4,1,1,2,4,3,0,0,0,16,27,1,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1938,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,43,    public EuclideanIntegerPoint(final int[] point) {,4,0,0,2,5,2,0,0,0,6,49,2,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,44,        this.point = point;,4,0,0,0,0,0,0,0,0,5,19,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,45,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,52,        return point;,2,0,0,0,0,1,0,0,0,2,13,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,57,"        return MathUtils.distance(point, p.getPoint());",2,0,0,2,4,1,0,0,0,3,47,2,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,77,        if (!(other instanceof EuclideanIntegerPoint)) {,2,0,0,2,5,0,0,2,0,5,48,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,80,        final int[] otherPoint = ((EuclideanIntegerPoint) other).getPoint();,0,0,0,4,8,0,0,0,0,12,68,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,81,        if (point.length != otherPoint.length) {,8,1,0,1,3,0,0,0,0,9,40,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,84,        for (int i = 0; i < point.length; i++) {,14,2,0,1,3,0,0,0,0,17,40,3,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,85,            if (point[i] != otherPoint[i]) {,0,0,0,3,7,0,0,0,0,10,32,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,86,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,39,    public static enum EmptyClusterStrategy {,6,0,0,0,1,2,0,0,0,9,41,1,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,42,"        LARGEST_VARIANCE,",2,0,0,0,0,0,0,0,0,2,17,3,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,45,"        LARGEST_POINTS_NUMBER,",4,0,0,0,0,1,2,0,0,7,22,1,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,48,"        FARTHEST_POINT,",2,0,0,0,0,0,0,0,0,2,15,3,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,51,        ERROR,2,0,0,0,0,0,0,0,0,2,5,3,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,78,"    public KMeansPlusPlusClusterer(final Random random, final EmptyClusterStrategy emptyStrategy) {",0,0,0,1,3,0,0,0,0,4,95,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,79,        this.random        = random;,4,0,0,0,0,0,0,0,0,5,28,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,80,        this.emptyStrategy = emptyStrategy;,4,0,0,0,0,0,0,0,0,5,35,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,81,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,95,"        List<Cluster<T>> clusters = chooseInitialCenters(points, k, random);",2,0,0,1,2,0,8,6,0,16,68,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,96,"        assignPointsToClusters(clusters, points);",0,0,0,1,2,0,6,0,0,6,41,5,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,99,        final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;,10,1,0,1,2,1,0,0,0,12,72,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,100,        for (int count = 0; count < max; count++) {,10,3,0,1,3,0,0,0,0,14,43,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,146,        for (final T p : points) {,0,0,0,1,3,0,0,0,0,4,26,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,147,"            Cluster<T> cluster = getNearestCluster(clusters, p);",2,0,0,1,2,0,6,4,0,12,52,6,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,148,            cluster.addPoint(p);,0,0,0,1,2,0,6,0,0,6,20,7,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,149,        },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,150,    },2,0,0,0,1,0,0,2,0,4,1,5,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,164,        final List<T> pointSet = new ArrayList<T>(points);,4,1,1,1,2,0,0,0,0,10,50,7,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,165,        final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();,0,0,0,1,2,0,0,0,0,3,63,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,168,        final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));,0,0,0,3,6,0,0,0,0,9,70,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,169,        resultSet.add(new Cluster<T>(firstPoint));,2,0,0,2,4,0,4,4,0,10,42,5,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,171,        final double[] dx2 = new double[pointSet.size()];,2,0,0,3,6,1,4,0,0,7,49,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,172,        while (resultSet.size() < k) {,2,1,0,2,5,0,4,0,0,7,30,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,196,        return resultSet;,2,0,0,0,0,1,0,0,0,2,17,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,321,        double minDistance = Double.MAX_VALUE;,0,0,0,0,0,0,0,0,0,0,38,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,322,        Cluster<T> minCluster = null;,2,0,0,0,0,0,0,4,0,6,29,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,323,        for (final Cluster<T> c : clusters) {,4,0,0,1,3,1,0,4,0,9,37,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,324,            final double distance = point.distanceFrom(c.getCenter());,0,0,0,2,4,0,0,0,0,6,58,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,325,            if (distance < minDistance) {,4,1,0,1,3,0,0,0,0,5,29,6,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,326,                minDistance = distance;,2,2,1,0,0,0,12,0,0,19,23,3,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,327,                minCluster = c;,0,0,0,0,0,0,0,0,0,0,15,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,329,        },2,0,0,0,1,0,0,0,0,3,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,330,        return minCluster;,2,0,0,0,0,1,0,0,0,2,18,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,57,45,    public Cluster(final T center) {,0,0,0,1,3,0,0,0,0,4,32,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,57,46,        this.center = center;,4,0,0,0,0,0,0,0,0,5,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,57,47,        points = new ArrayList<T>();,2,0,0,1,2,0,0,4,0,7,28,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,57,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,57,55,        points.add(point);,0,0,0,1,2,0,6,0,0,6,18,5,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,57,56,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,57,71,        return center;,2,0,0,0,0,1,0,0,0,2,14,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1914,    public static enum OrderDirection {,2,0,0,0,1,2,0,0,0,4,35,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1916,"        INCREASING,",0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1918,        DECREASING,6,0,0,0,0,0,0,0,0,8,10,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,102,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,103,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,116,        long s = (long)x + (long)y;,0,0,0,2,4,0,4,0,0,4,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,117,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,0,0,0,1,3,0,0,0,0,4,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,118,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);",8,0,0,1,2,0,0,2,0,10,79,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,120,        return (int)s;,2,0,0,1,2,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,134,"        return addAndCheck(a, b, LocalizedFormats.OVERFLOW_IN_ADDITION);",4,0,0,1,2,1,12,0,0,16,64,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,150,        if (a > b) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,152,"            ret = addAndCheck(b, a, pattern);",2,0,0,1,2,3,0,4,0,9,33,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,156,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,157,                if (b < 0) {,2,1,0,1,3,0,0,0,0,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,159,                    if (Long.MIN_VALUE - b <= a) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,160,                        ret = a + b;,6,1,0,0,0,0,4,0,0,12,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,162,"                        throw new MathArithmeticException(pattern, a, b);",0,0,0,1,2,0,0,0,0,3,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,166,                    ret = a + b;,2,1,0,0,0,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,173,                if (a <= Long.MAX_VALUE - b) {,8,2,0,1,3,0,0,0,0,10,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,174,                    ret = a + b;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,176,"                    throw new MathArithmeticException(pattern, a, b);",8,0,0,1,2,3,0,2,0,13,49,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,180,        return ret;,6,0,0,0,0,1,0,2,0,8,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,209,"        checkBinomial(n, k);",2,1,0,1,2,0,6,0,0,9,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,210,        if ((n == k) || (k == 0)) {,0,0,0,3,7,0,0,0,0,10,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,211,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,213,        if ((k == 1) || (k == n - 1)) {,0,0,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,214,            return n;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,217,        if (k > n / 2),0,0,0,1,2,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,218,"            return binomialCoefficient(n, n - k);",4,1,0,1,2,1,4,0,0,9,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,225,        long result = 1;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,226,        if (n <= 61) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,228,            int i = n - k + 1;,6,2,0,0,0,0,0,0,0,8,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,229,            for (int j = 1; j <= k; j++) {,8,1,0,1,3,0,0,0,0,10,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,230,                result = result * i / j;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,231,                i++;,0,0,0,0,0,0,0,0,0,0,4,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,233,        } else if (n <= 66) {,2,1,0,1,4,0,0,2,0,5,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,236,            int i = n - k + 1;,18,4,0,0,0,0,0,0,0,23,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,237,            for (int j = 1; j <= k; j++) {,8,1,0,1,3,0,0,0,0,10,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,244,"                final long d = gcd(i, j);",0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,245,                result = (result / (j / d)) * (i / d);,12,4,0,3,6,0,0,0,0,17,38,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,246,                i++;,10,1,0,0,0,0,0,0,0,12,4,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,248,        } else {,6,4,0,0,2,0,0,0,0,10,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,252,            int i = n - k + 1;,10,2,0,0,0,0,10,0,0,22,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,253,            for (int j = 1; j <= k; j++) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,254,"                final long d = gcd(i, j);",2,0,0,1,2,1,6,0,0,9,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,255,"                result = mulAndCheck(result / (j / d), i / d);",12,3,0,2,4,0,2,0,0,18,46,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,256,                i++;,2,0,0,0,0,0,0,0,0,3,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,259,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,285,"        checkBinomial(n, k);",6,3,0,1,2,0,6,0,0,15,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,286,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,287,            return 1d;,0,0,0,0,0,1,0,0,0,1,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,289,        if ((k == 1) || (k == n - 1)) {,6,4,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,290,            return n;,24,9,0,0,0,1,0,0,0,34,9,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,292,        if (k > n/2) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,293,"            return binomialCoefficientDouble(n, n - k);",4,1,0,1,2,1,8,0,0,14,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,295,        if (n < 67) {,10,2,0,1,3,0,0,0,0,12,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,296,"            return binomialCoefficient(n,k);",6,1,0,1,2,1,10,0,0,18,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,299,        double result = 1d;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,300,        for (int i = 1; i <= k; i++) {,10,1,0,1,3,1,6,0,0,19,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,301,             result *= (double)(n - k + i) / (double)i;,14,3,0,3,6,0,0,0,0,19,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,304,        return FastMath.floor(result + 0.5);,2,1,0,1,2,1,4,0,0,7,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,326,"        checkBinomial(n, k);",0,0,0,1,2,0,6,0,0,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,327,        if ((n == k) || (k == 0)) {,2,0,0,3,7,0,0,0,0,2,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,328,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,330,        if ((k == 1) || (k == n - 1)) {,6,4,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,331,            return FastMath.log(n);,2,1,0,1,2,1,6,0,0,9,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,338,        if (n < 67) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,339,"            return FastMath.log(binomialCoefficient(n,k));",0,0,0,2,4,1,0,0,0,7,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,346,        if (n < 1030) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,347,"            return FastMath.log(binomialCoefficientDouble(n, k));",0,0,0,2,4,1,0,0,0,7,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,350,        if (k > n / 2) {,2,0,0,1,3,0,0,0,0,2,16,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,351,"            return binomialCoefficientLog(n, n - k);",4,1,0,1,2,1,4,0,0,9,40,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,357,        double logSum = 0;,2,0,0,0,0,0,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,360,        for (int i = n - k + 1; i <= n; i++) {,12,3,0,1,3,0,0,0,0,16,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,361,            logSum += FastMath.log(i);,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,365,        for (int i = 2; i <= k; i++) {,8,1,0,1,3,0,4,0,0,14,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,366,            logSum -= FastMath.log(i);,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,369,        return logSum;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,381,        if (n < k) {,12,4,0,1,3,0,6,0,0,22,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,382,"            throw new NumberIsTooLargeException(LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER,",0,0,0,0,1,0,0,0,0,1,87,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,385,        if (n < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,386,"            throw new NotPositiveException(LocalizedFormats.BINOMIAL_NEGATIVE_PARAMETER, n);",12,2,0,1,2,1,4,2,0,21,80,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,388,    },6,2,1,0,1,0,0,0,0,13,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,401,"        if (equals(x, y, eps)) {",0,0,0,2,5,0,8,0,0,8,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,402,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,403,        } else if (x < y) {,4,1,0,1,4,0,0,0,0,5,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,404,          return -1;,0,0,0,0,0,1,0,0,0,1,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,406,        return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,417,        return (FastMath.exp(x) + FastMath.exp(-x)) / 2.0;,12,0,0,3,6,1,0,0,0,12,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,429,"        return equals(x, y, 1);",0,0,0,1,2,1,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,442,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, 1);",0,0,0,4,8,1,0,0,0,13,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,456,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",12,4,0,2,4,1,10,0,0,26,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,471,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",6,3,0,3,6,1,10,0,0,19,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,495,        assert maxUlps > 0 && maxUlps < NAN_GAP;,0,0,0,0,0,0,0,0,0,0,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,497,        int xInt = Float.floatToIntBits(x);,2,0,0,1,2,0,6,0,0,8,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,498,        int yInt = Float.floatToIntBits(y);,10,2,0,1,2,0,6,0,0,19,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,501,        if (xInt < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,502,            xInt = SGN_MASK_FLOAT - xInt;,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,504,        if (yInt < 0) {,14,5,1,1,3,0,6,0,0,29,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,505,            yInt = SGN_MASK_FLOAT - yInt;,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,508,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,8,2,0,1,2,1,4,0,0,15,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,510,        return isEqual && !Float.isNaN(x) && !Float.isNaN(y);,0,0,0,2,4,1,0,0,0,7,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,526,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, maxUlps);",0,2,0,4,8,1,20,0,0,22,67,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,540,        if ((x == null) || (y == null)) {,4,3,0,3,7,0,0,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,541,            return !((x == null) ^ (y == null));,6,4,0,3,6,1,0,0,0,11,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,543,        if (x.length != y.length) {,0,0,0,1,3,0,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,544,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,546,        for (int i = 0; i < x.length; ++i) {,18,2,0,1,3,0,0,0,0,21,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,547,"            if (!equals(x[i], y[i])) {",0,0,1,4,9,0,2,0,0,11,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,548,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,551,        return true;,8,2,0,0,0,1,0,0,0,11,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,566,        if ((x == null) || (y == null)) {,0,0,0,3,7,0,0,0,0,10,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,567,            return !((x == null) ^ (y == null));,6,3,0,3,6,1,0,0,0,11,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,569,        if (x.length != y.length) {,8,1,0,1,3,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,570,            return false;,20,5,0,0,0,1,0,0,0,26,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,572,        for (int i = 0; i < x.length; ++i) {,10,1,1,1,3,0,0,0,0,17,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,573,"            if (!equalsIncludingNaN(x[i], y[i])) {",0,0,1,4,9,0,2,0,0,11,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,574,                return false;,8,1,0,0,0,3,0,0,0,12,13,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,577,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,589,"        return equals(x, y, 1);",0,0,0,1,2,1,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,602,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, 1);",12,4,1,4,8,1,18,0,0,42,63,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,617,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",6,3,0,2,4,1,10,0,0,19,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,632,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",0,0,0,3,6,1,0,0,0,10,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,655,        assert maxUlps > 0 && maxUlps < NAN_GAP;,0,0,0,0,0,0,0,0,0,0,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,657,        long xInt = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,658,        long yInt = Double.doubleToLongBits(y);,2,0,0,1,2,0,6,0,0,8,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,661,        if (xInt < 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,662,            xInt = SGN_MASK - xInt;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,664,        if (yInt < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,665,            yInt = SGN_MASK - yInt;,6,1,0,0,0,0,0,0,0,8,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,668,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,8,2,0,1,2,1,4,0,0,15,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,670,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,2,1,0,2,4,1,12,0,0,17,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,686,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, maxUlps);",0,2,0,4,8,1,20,0,0,22,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,700,        if ((x == null) || (y == null)) {,4,3,0,3,7,0,8,0,0,15,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,701,            return !((x == null) ^ (y == null));,4,3,0,3,6,1,0,0,0,8,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,703,        if (x.length != y.length) {,0,0,0,1,3,0,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,704,            return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,706,        for (int i = 0; i < x.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,707,"            if (!equals(x[i], y[i])) {",2,0,0,4,9,0,0,0,0,2,26,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,708,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,711,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,726,        if ((x == null) || (y == null)) {,4,3,0,3,7,0,0,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,727,            return !((x == null) ^ (y == null));,0,0,0,3,6,1,0,0,0,10,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,729,        if (x.length != y.length) {,22,2,0,1,3,0,0,2,0,27,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,730,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,732,        for (int i = 0; i < x.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,733,"            if (!equalsIncludingNaN(x[i], y[i])) {",0,0,0,4,9,0,0,0,0,13,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,734,                return false;,12,2,0,0,0,2,6,0,0,22,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,737,        return true;,6,1,0,0,0,1,0,0,0,8,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,765,        if (n < 0) {,10,1,0,1,3,1,0,2,0,16,12,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,766,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",8,3,0,0,1,0,0,2,0,14,77,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,769,        if (n > 20) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,770,            throw new MathArithmeticException();,4,1,0,1,2,0,4,4,0,14,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,772,        return FACTORIALS[n];,4,0,0,1,2,1,0,0,0,6,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,789,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,790,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",0,0,0,0,1,0,0,0,0,1,77,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,793,        if (n < 21) {,6,1,0,1,3,0,0,2,0,9,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,794,            return factorial(n);,2,1,0,1,2,1,4,0,0,7,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,796,        return FastMath.floor(FastMath.exp(factorialLog(n)) + 0.5);,6,2,0,3,6,1,12,0,0,20,59,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,807,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,808,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",4,0,0,0,1,0,0,2,0,6,77,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,811,        if (n < 21) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,812,            return FastMath.log(factorial(n));,2,0,0,2,4,1,0,4,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,814,        double logSum = 0;,2,0,0,0,0,0,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,815,        for (int i = 2; i <= n; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,816,            logSum += FastMath.log(i);,4,0,0,1,2,0,6,0,0,11,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,818,        return logSum;,12,2,0,0,0,2,4,0,0,20,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,851,        int u = p;,6,0,0,0,0,0,0,0,0,6,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,852,        int v = q;,4,0,0,0,0,0,0,0,0,4,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,853,        if ((u == 0) || (v == 0)) {,4,3,0,3,7,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,854,            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {,0,0,0,3,7,0,0,0,0,10,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,855,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,",2,0,0,0,1,0,4,0,0,6,72,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,858,            return FastMath.abs(u) + FastMath.abs(v);,0,0,0,2,4,1,0,0,0,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,865,        if (u > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,866,            u = -u;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,868,        if (v > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,869,            v = -v;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,872,        int k = 0;,12,1,0,0,0,1,0,0,0,14,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,873,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,6,7,0,3,7,0,0,0,0,13,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,875,            u /= 2;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,876,            v /= 2;,16,3,0,0,0,0,0,0,0,22,7,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,877,            k++; // cast out twos.,0,2,0,0,0,0,12,2,0,16,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,879,        if (k == 31) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,880,"            throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,",4,0,0,0,1,0,0,2,0,6,72,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,885,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,8,3,0,3,6,0,0,0,0,12,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,891,            while ((t & 1) == 0) { // while t is even..,2,2,0,2,5,0,0,0,0,4,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,892,                t /= 2; // cast out twos,4,0,0,0,0,0,0,0,0,6,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,895,            if (t > 0) {,2,3,0,1,3,0,6,0,0,11,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,896,                u = -t;,4,0,0,0,0,0,0,0,0,6,7,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,898,                v = t;,4,0,0,0,0,0,0,0,0,5,6,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,901,            t = (v - u) / 2;,6,2,0,1,2,0,0,0,0,9,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,904,        } while (t != 0);,2,1,0,1,3,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,905,        return -u * (1 << k); // gcd is u*2^k,4,2,0,1,2,1,0,0,0,7,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,938,        long u = p;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,939,        long v = q;,4,0,0,0,0,0,0,0,0,4,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,940,        if ((u == 0) || (v == 0)) {,4,3,0,3,7,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,941,            if ((u == Long.MIN_VALUE) || (v == Long.MIN_VALUE)){,14,5,1,3,7,0,0,0,0,24,52,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,942,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,",4,0,0,0,1,0,0,2,0,6,72,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,945,            return FastMath.abs(u) + FastMath.abs(v);,0,1,0,2,4,1,12,0,0,13,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,952,        if (u > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,953,            u = -u;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,955,        if (v > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,956,            v = -v;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,959,        int k = 0;,8,1,1,0,0,1,10,0,0,25,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,960,        while ((u & 1) == 0 && (v & 1) == 0 && k < 63) { // while u and v are,6,7,0,3,7,0,0,0,0,13,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,962,            u /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,963,            v /= 2;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,964,            k++; // cast out twos.,12,2,0,0,0,0,0,0,0,15,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,966,        if (k == 63) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,967,"            throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,",4,0,0,0,1,0,0,2,0,6,72,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,972,        long t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,12,6,0,3,6,0,8,0,0,27,47,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,978,            while ((t & 1) == 0) { // while t is even..,2,2,0,2,5,0,0,0,0,4,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,979,                t /= 2; // cast out twos,2,0,0,0,0,0,0,0,0,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,982,            if (t > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,983,                u = -t;,6,1,1,0,0,1,6,0,0,20,7,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,985,                v = t;,4,0,0,0,0,0,0,0,0,5,6,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,988,            t = (v - u) / 2;,0,0,0,1,2,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,991,        } while (t != 0);,2,1,0,1,3,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,992,        return -u * (1L << k); // gcd is u*2^k,0,0,0,1,2,1,0,0,0,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1002,        return new Double(value).hashCode();,8,1,1,2,4,1,2,2,0,19,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1013,        return Arrays.hashCode(value);,0,0,0,1,2,1,6,0,0,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1024,        return (x >= ZB) ? PB : NB;,0,0,0,1,2,1,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1036,        if (Double.isNaN(x)) {,0,0,0,2,5,0,0,0,0,7,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1037,            return Double.NaN;,12,1,0,0,0,1,0,0,0,15,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1039,        return (x >= 0.0) ? 1.0 : -1.0;,4,1,1,1,2,2,0,0,0,11,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1050,        if (Float.isNaN(x)) {,0,0,0,2,5,0,6,0,0,6,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1051,            return Float.NaN;,14,1,0,0,0,1,0,0,0,16,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1053,        return (x >= 0.0F) ? 1.0F : -1.0F;,0,0,0,1,2,1,0,0,0,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1063,        return (x >= 0) ? 1 : -1;,6,1,0,1,2,1,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1073,        return (x >= 0L) ? 1L : -1L;,2,1,0,1,2,1,0,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1084,        return (x >= ZS) ? PS : NS;,8,1,0,1,2,1,0,0,0,9,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1110,        if (a == 0 || b == 0){,4,3,0,1,3,0,0,0,0,7,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1111,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1113,"        int lcm = FastMath.abs(mulAndCheck(a / gcd(a, b), b));",4,1,0,3,6,0,14,0,0,19,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1114,        if (lcm == Integer.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1115,"            throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_32_BITS,",6,0,1,0,1,0,0,0,0,8,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1118,        return lcm;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1144,        if (a == 0 || b == 0){,10,5,0,1,3,1,0,0,0,16,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1145,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1147,"        long lcm = FastMath.abs(mulAndCheck(a / gcd(a, b), b));",0,0,0,3,6,0,0,0,0,9,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1148,        if (lcm == Long.MIN_VALUE){,12,4,0,1,3,0,0,0,0,16,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1149,"            throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_64_BITS,",4,0,0,0,1,0,0,2,0,6,72,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1152,        return lcm;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1172,        return FastMath.log(x)/FastMath.log(base);,6,1,1,2,4,1,12,0,0,25,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1186,        long m = ((long)x) * ((long)y);,6,1,0,4,8,0,0,0,0,7,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1187,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1188,            throw new MathArithmeticException();,0,0,0,1,2,0,0,2,0,2,36,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1190,        return (int)m;,2,0,0,1,2,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1205,        if (a > b) {,2,0,0,1,3,1,2,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1207,"            ret = mulAndCheck(b, a);",0,2,0,1,2,0,4,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1209,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1210,                if (b < 0) {,4,2,0,1,3,0,0,0,0,6,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1212,                    if (a >= Long.MAX_VALUE / b) {,2,0,0,1,3,1,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1213,                        ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1215,                        throw new MathArithmeticException();,2,0,0,1,2,1,6,0,0,9,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1217,                } else if (b > 0) {,2,1,0,1,4,0,0,0,0,3,19,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1219,                    if (Long.MIN_VALUE / b <= a) {,14,6,0,1,3,0,0,0,0,20,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1220,                        ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1222,                        throw new MathArithmeticException();,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1227,                    ret = 0;,10,2,0,0,0,0,0,0,0,13,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1229,            } else if (a > 0) {,16,4,0,1,4,0,0,0,0,23,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1234,                if (a <= Long.MAX_VALUE / b) {,8,2,0,1,3,0,0,0,0,10,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1235,                    ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1237,                    throw new MathArithmeticException();,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1241,                ret = 0;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1244,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1259,"        return FastMath.scalb(d, scaleFactor);",0,0,0,1,2,1,0,0,0,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1282,         return a - TWO_PI * FastMath.floor((a + FastMath.PI - center) / TWO_PI);,8,2,0,2,4,1,0,0,0,10,72,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1307,         if (Double.isInfinite(normalizedSum)) {,0,0,0,2,5,0,6,0,0,6,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1308,             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);,0,0,0,1,2,0,0,0,0,3,76,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1310,         if (Double.isNaN(normalizedSum)) {,0,0,0,2,5,0,6,0,0,6,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1311,             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);,4,0,0,1,2,0,0,2,0,6,71,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1313,         double sum = 0d;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1314,         final int len = values.length;,6,0,0,0,0,1,0,0,0,7,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1315,         double[] out = new double[len];,0,0,0,2,4,0,0,0,0,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1316,         for (int i = 0; i < len; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1317,             if (Double.isInfinite(values[i])) {,0,0,1,3,7,0,4,0,0,8,35,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1318,"                 throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);",10,2,0,2,4,0,0,0,0,13,94,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1320,             if (!Double.isNaN(values[i])) {,0,0,1,3,7,0,4,0,0,9,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1321,                 sum += values[i];,2,0,1,1,2,0,0,0,0,7,17,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1324,         if (sum == 0) {,6,1,0,1,3,0,0,0,0,8,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1325,             throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);,8,0,0,1,2,0,6,4,0,18,71,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1327,         for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1328,             if (Double.isNaN(values[i])) {,0,0,1,3,7,0,4,0,0,8,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1329,                 out[i] = Double.NaN;,4,0,1,1,2,0,0,0,0,9,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1331,                 out[i] = values[i] * normalizedSum / sum;,4,2,1,2,4,0,0,0,0,15,41,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1334,         return out;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1347,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",4,0,0,1,2,1,6,0,0,10,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1364,            return (new BigDecimal,0,0,0,0,1,1,0,2,0,2,22,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1368,        } catch (NumberFormatException ex) {,0,0,0,1,4,0,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1369,            if (Double.isInfinite(x)) {,0,0,0,2,5,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1370,                return x;,2,0,0,0,0,1,0,0,0,2,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1372,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1374,        } catch (RuntimeException ex) {,0,0,0,1,4,0,0,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1375,            throw new MathRuntimeException(ex);,2,0,0,1,2,0,0,2,0,4,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1389,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",6,0,1,1,2,1,6,0,0,14,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1405,        float sign = indicator(x);,4,0,0,1,2,1,6,0,0,11,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1406,"        float factor = (float)FastMath.pow(10.0f, scale) * sign;",8,1,0,2,4,0,6,0,0,15,56,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1407,"        return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor;",6,2,0,2,4,1,6,0,0,14,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1424,        switch (roundingMethod) {,2,0,0,1,3,0,0,0,0,2,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1426,            if (sign == -1) {,2,1,0,1,3,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1427,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",12,1,0,2,4,0,14,0,0,29,82,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1429,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",0,0,0,2,4,0,0,0,0,6,81,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1431,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1433,"            unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",14,0,0,2,4,1,10,4,0,30,82,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1434,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1436,            if (sign == -1) {,2,1,0,1,3,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1437,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",6,0,0,2,4,0,10,0,0,17,81,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1439,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",6,0,0,2,4,0,10,0,0,17,82,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1441,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1443,"            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);",0,0,0,1,2,0,0,0,0,3,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1444,            double fraction = unscaled - FastMath.floor(unscaled);,0,0,0,1,2,0,0,0,0,3,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1445,            if (fraction > 0.5) {,2,1,0,1,3,0,0,0,0,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1446,                unscaled = FastMath.ceil(unscaled);,2,0,0,1,2,0,6,0,0,9,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1448,                unscaled = FastMath.floor(unscaled);,2,0,0,1,2,0,6,0,0,9,36,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1450,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1453,            double fraction = unscaled - FastMath.floor(unscaled);,6,2,0,1,2,0,0,0,0,9,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1454,            if (fraction > 0.5) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1455,                unscaled = FastMath.ceil(unscaled);,4,0,0,1,2,0,2,2,0,8,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1456,            } else if (fraction < 0.5) {,0,0,0,1,4,0,0,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1457,                unscaled = FastMath.floor(unscaled);,2,0,0,1,2,0,6,0,0,9,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1460,                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math,0,3,0,1,4,0,12,0,0,15,57,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1462,                    unscaled = FastMath.floor(unscaled);,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1464,                    unscaled = FastMath.ceil(unscaled);,2,0,0,1,2,0,6,0,0,9,35,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1467,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1470,"            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);",10,0,0,1,2,0,6,0,0,17,66,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1471,            double fraction = unscaled - FastMath.floor(unscaled);,4,1,0,1,2,0,6,0,0,11,54,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1472,            if (fraction >= 0.5) {,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1473,                unscaled = FastMath.ceil(unscaled);,2,0,0,1,2,0,6,0,0,9,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1475,                unscaled = FastMath.floor(unscaled);,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1477,            break;,4,3,0,0,0,0,0,0,0,8,6,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1480,            if (unscaled != FastMath.floor(unscaled)) {,4,1,0,2,5,0,6,0,0,12,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1481,                throw new MathArithmeticException();,2,1,0,1,2,0,0,2,0,5,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1485,"            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));",6,0,0,2,4,0,10,0,0,17,82,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1486,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1488,"            throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,",0,0,0,0,1,0,0,0,0,1,80,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1499,        return unscaled;,0,0,0,0,0,1,0,0,0,1,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1513,        return (x == ZB) ? ZB : (x > ZB) ? PB : NB;,16,2,0,2,4,1,0,0,0,19,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1529,        if (Double.isNaN(x)) {,6,1,1,2,5,0,0,0,0,9,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1530,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1532,        return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;,6,2,1,2,4,2,6,0,0,18,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1547,        if (Float.isNaN(x)) {,0,0,0,2,5,0,6,0,0,6,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1548,            return Float.NaN;,4,0,0,0,0,1,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1550,        return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;,10,3,0,2,4,1,0,0,0,14,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1564,        return (x == 0) ? 0 : (x > 0) ? 1 : -1;,4,2,0,2,4,1,0,0,0,7,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1578,        return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;,6,2,0,2,4,1,0,0,0,9,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1589,        return (x == ZS) ? ZS : (x > ZS) ? PS : NS;,0,0,0,2,4,1,0,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1600,        return (FastMath.exp(x) - FastMath.exp(-x)) / 2.0;,0,0,0,3,6,1,0,0,0,10,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1614,        long s = (long)x - (long)y;,6,1,0,2,4,0,0,0,0,8,27,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1615,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,0,0,0,1,3,0,0,0,0,4,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1616,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y);",0,0,0,1,2,0,0,0,0,3,82,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1618,        return (int)s;,0,0,0,1,2,1,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1633,        if (b == Long.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1634,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1635,                ret = a - b;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1637,"                throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, a, -b);",0,0,0,1,2,0,0,0,0,3,80,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1641,"            ret = addAndCheck(a, -b, LocalizedFormats.OVERFLOW_IN_ADDITION);",8,0,0,1,2,0,4,0,0,14,64,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1643,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1655,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1656,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",8,0,1,1,2,0,0,2,0,13,61,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1659,        int result = 1;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1660,        int k2p    = k;,4,0,0,0,0,0,0,0,0,4,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1661,        while (e != 0) {,22,9,0,1,3,0,0,0,0,32,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1662,            if ((e & 0x1) != 0) {,8,3,0,2,5,0,0,0,0,11,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1663,                result *= k2p;,4,0,0,0,0,0,0,0,0,5,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1665,            k2p *= k2p;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1666,            e = e >> 1;,8,1,0,0,0,1,0,2,0,13,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1669,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1681,        if (e < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1682,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1685,        int result = 1;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1686,        int k2p    = k;,20,7,0,0,0,0,0,0,0,27,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1687,        while (e != 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1688,            if ((e & 0x1) != 0) {,8,4,0,2,5,0,0,0,0,12,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1689,                result *= k2p;,8,2,0,0,0,1,0,0,0,11,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1691,            k2p *= k2p;,6,0,0,0,0,0,6,0,0,14,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1692,            e = e >> 1;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1695,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1707,        if (e < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1708,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",14,1,0,1,2,0,0,2,0,18,61,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1711,        long result = 1l;,4,2,0,0,0,0,4,0,0,10,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1712,        long k2p    = k;,4,0,0,0,0,0,0,0,0,4,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1713,        while (e != 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1714,            if ((e & 0x1) != 0) {,6,5,0,2,5,1,12,0,0,26,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1715,                result *= k2p;,2,0,0,0,0,0,0,0,0,2,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1717,            k2p *= k2p;,8,0,0,0,0,0,0,0,0,9,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1718,            e = e >> 1;,8,6,0,0,0,0,0,0,0,14,11,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1721,        return result;,4,2,1,0,0,2,0,0,0,11,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1733,        if (e < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1734,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0,0,0,1,2,0,0,0,0,3,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1737,        long result = 1l;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1738,        long k2p    = k;,4,0,0,0,0,0,0,0,0,4,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1739,        while (e != 0) {,4,1,1,1,3,1,0,0,0,10,16,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1740,            if ((e & 0x1) != 0) {,2,2,0,2,5,0,0,0,0,4,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1741,                result *= k2p;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1743,            k2p *= k2p;,4,0,0,0,0,0,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1744,            e = e >> 1;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1747,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1759,        if (e < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1760,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0,0,0,1,2,0,0,0,0,3,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1763,        return k.pow(e);,16,6,0,1,2,1,6,0,0,29,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1775,        if (e < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1776,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0,0,0,1,2,0,0,0,0,3,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1779,        BigInteger result = BigInteger.ONE;,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1780,        BigInteger k2p    = k;,4,0,0,0,0,0,0,2,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1781,        while (e != 0) {,2,1,1,1,3,0,0,0,0,8,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1782,            if ((e & 0x1) != 0) {,2,2,0,2,5,0,0,0,0,4,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1783,                result = result.multiply(k2p);,2,0,0,1,2,0,6,0,0,9,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1785,            k2p = k2p.multiply(k2p);,2,0,0,1,2,0,6,0,0,9,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1786,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1789,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1802,        if (e.compareTo(BigInteger.ZERO) < 0) {,4,1,0,2,5,0,4,0,0,9,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1803,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1806,        BigInteger result = BigInteger.ONE;,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1807,        BigInteger k2p    = k;,4,0,0,0,0,0,0,2,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1808,        while (!BigInteger.ZERO.equals(e)) {,6,0,0,2,5,0,10,0,0,18,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1809,            if (e.testBit(0)) {,2,0,0,2,5,1,8,0,0,11,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1810,                result = result.multiply(k2p);,2,0,0,1,2,0,6,0,0,9,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1812,            k2p = k2p.multiply(k2p);,2,0,0,1,2,0,10,0,0,14,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1813,            e = e.shiftRight(1);,6,1,0,1,2,0,4,0,0,13,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1816,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1827,        double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1828,        for (int i = 0; i < p1.length; i++) {,10,1,0,1,3,0,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1829,            sum += FastMath.abs(p1[i] - p2[i]);,2,1,1,3,6,0,4,0,0,16,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1831,        return sum;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1842,      int sum = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1843,      for (int i = 0; i < p1.length; i++) {,4,2,0,1,3,0,0,0,0,6,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1844,          sum += FastMath.abs(p1[i] - p2[i]);,2,1,1,3,6,0,4,0,0,16,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1846,      return sum;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1857,        double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1858,        for (int i = 0; i < p1.length; i++) {,10,1,0,1,3,0,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1859,            final double dp = p1[i] - p2[i];,8,2,1,2,4,1,0,0,0,19,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1860,            sum += dp * dp;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1862,        return FastMath.sqrt(sum);,4,0,0,1,2,1,6,2,0,12,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1889,        double max = 0;,6,0,0,0,0,0,10,0,0,16,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1890,        for (int i = 0; i < p1.length; i++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1891,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",2,1,1,4,8,0,10,0,0,22,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1893,        return max;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1904,        int max = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1905,        for (int i = 0; i < p1.length; i++) {,14,1,0,1,3,0,0,0,0,17,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1906,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",0,0,0,4,8,0,0,0,0,12,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1908,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1934,        double previous = val[0];,2,0,1,1,2,0,0,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1935,        boolean ok = true;,2,0,0,0,0,0,0,0,0,3,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1937,        int max = val.length;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1938,        for (int i = 1; i < max; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1939,            switch (dir) {,2,0,0,1,3,0,0,0,0,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1941,                if (strict) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1942,                    if (val[i] <= previous) {,2,1,1,2,5,0,0,0,0,7,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1943,                        ok = false;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1946,                    if (val[i] < previous) {,8,3,1,2,5,0,0,0,0,17,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1947,                        ok = false;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1952,                if (strict) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1953,                    if (val[i] >= previous) {,14,7,1,2,5,1,2,0,0,33,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1954,                        ok = false;,2,0,0,0,0,0,0,0,0,4,11,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1957,                    if (val[i] > previous) {,2,1,1,2,5,0,0,0,0,7,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1958,                        ok = false;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1964,                throw new IllegalArgumentException();,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1967,            if (!ok &&,0,0,0,0,1,0,0,0,0,1,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1969,"                throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);",0,0,0,2,4,0,0,0,0,6,75,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1971,            previous = val[i];,2,0,1,1,2,0,0,0,0,7,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1974,        return ok;,0,0,0,0,0,1,0,0,0,1,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1988,"        checkOrder(val, dir, strict, true);",0,0,0,1,2,0,8,0,0,9,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1989,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1999,"        checkOrder(val, OrderDirection.INCREASING, true);",0,0,0,1,2,0,0,0,0,3,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2000,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2010,        if (Double.isInfinite(x) || Double.isNaN(x)) {,0,1,0,3,7,0,12,0,0,13,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2011,            throw new NotFiniteNumberException(x);,6,3,1,1,2,0,0,2,0,15,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2013,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2023,        for (int i = 0; i < val.length; i++) {,8,2,1,1,3,0,0,0,0,15,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2024,            final double x = val[i];,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2025,            if (Double.isInfinite(x) || Double.isNaN(x)) {,0,1,0,3,7,0,12,0,0,13,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2026,"                throw new NotFiniteNumberException(LocalizedFormats.ARRAY_ELEMENT, x, i);",0,0,0,1,2,0,0,0,0,3,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2029,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2092,        double rdwarf = 3.834e-20;,4,1,0,0,0,0,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2093,        double rgiant = 1.304e+19;,2,0,0,0,0,0,0,2,0,4,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2094,        double s1 = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2095,        double s2 = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2096,        double s3 = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2097,        double x1max = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2098,        double x3max = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2099,        double floatn = (double) v.length;,6,0,0,1,2,0,0,0,0,6,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2100,        double agiant = rgiant / floatn;,6,1,0,0,0,0,0,0,0,7,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2101,        for (int i = 0; i < v.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2102,            double xabs = Math.abs(v[i]);,8,0,1,2,4,0,4,0,0,17,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2103,            if (xabs < rdwarf || xabs > agiant) {,8,3,0,1,3,0,0,0,0,11,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2104,                if (xabs > rdwarf) {,4,1,0,1,3,0,0,0,0,5,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2105,                    if (xabs > x1max) {,4,1,0,1,3,0,0,0,0,5,19,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2106,                        double r = x1max / xabs;,6,1,0,0,0,0,0,0,0,7,24,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2107,                        s1= 1 + s1 * r * r;,4,1,0,0,0,0,0,0,0,6,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2108,                        x1max = xabs;,4,0,0,0,0,0,0,0,0,5,13,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2109,                    } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2110,                        double r = xabs / x1max;,8,1,0,0,0,1,6,2,0,18,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2111,                        s1 += r * r;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2112,                    },8,1,0,0,1,0,0,0,0,10,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2114,                    if (xabs > x3max) {,4,1,0,1,3,0,0,0,0,5,19,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2115,                        double r = x3max / xabs;,16,6,0,0,0,0,0,0,0,23,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2116,                        s3= 1 + s3 * r * r;,8,2,0,0,0,0,0,0,0,11,19,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2117,                        x3max = xabs;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2118,                    } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2119,                        if (xabs != 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2120,                            double r = xabs / x3max;,14,2,0,0,0,0,0,0,0,17,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2121,                            s3 += r * r;,6,1,0,0,0,0,0,0,0,8,12,14,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2122,                        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2126,                s2 += xabs * xabs;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2130,        if (s1 != 0) {,2,1,0,1,3,0,12,0,0,15,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2131,            norm = x1max * Math.sqrt(s1 + (s2 / x1max) / x1max);,12,4,0,2,4,0,4,0,0,21,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2133,            if (s2 == 0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2134,                norm = x3max * Math.sqrt(s3);,4,1,0,1,2,0,6,0,0,13,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2136,                if (s2 >= x3max) {,4,1,0,1,3,0,0,0,0,5,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2137,                    norm = Math.sqrt(s2 * (1 + (x3max / s2) * (x3max * s3)));,12,5,0,4,8,0,4,0,0,22,57,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2139,                    norm = Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));,16,6,0,4,8,0,4,0,0,27,56,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2143,        return norm;,8,2,1,0,0,1,10,4,0,27,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2158,"        sortInPlace(x, OrderDirection.INCREASING, yList);",4,0,0,1,2,0,6,0,0,10,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2159,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2174,        if (x == null ||,0,0,0,0,1,0,0,0,0,1,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2176,            throw new NullArgumentException();,0,0,0,1,2,0,0,2,0,2,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2179,        final int len = x.length;,6,0,0,0,0,1,0,0,0,7,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2180,"        final List<Pair<Double, double[]>> list",0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2183,        final int yListLen = yList.length;,6,0,0,0,0,1,0,0,0,7,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2184,        for (int i = 0; i < len; i++) {,14,3,0,1,3,0,8,0,0,27,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2185,            final double[] yValues = new double[yListLen];,2,0,1,2,4,1,0,0,0,5,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2186,            for (int j = 0; j < yListLen; j++) {,8,1,0,1,3,0,0,0,0,10,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2187,                double[] y = yList[j];,10,5,0,2,4,0,0,0,0,16,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2188,                if (y.length != len) {,6,1,0,1,3,0,0,0,0,7,22,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2189,"                    throw new DimensionMismatchException(y.length, len);",6,0,0,1,2,0,12,6,0,24,52,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2191,                yValues[j] = y[i];,0,0,0,2,4,0,0,0,0,6,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2193,"            list.add(new Pair<Double, double[]>(x[i], yValues));",2,0,1,4,8,0,4,4,0,14,52,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2196,"        final Comparator<Pair<Double, double[]>> comp",0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2216,"        Collections.sort(list, comp);",6,1,0,1,2,0,0,0,0,8,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2218,        for (int i = 0; i < len; i++) {,14,2,0,1,3,1,6,0,0,24,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2219,"            final Pair<Double, double[]> e = list.get(i);",2,0,0,2,4,1,6,4,0,13,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2220,            x[i] = e.getKey();,0,0,0,2,4,0,0,0,0,6,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2221,            final double[] yValues = e.getValue();,0,0,0,2,4,0,0,0,0,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2222,            for (int j = 0; j < yListLen; j++) {,8,1,0,1,3,0,0,0,0,10,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2223,                yList[j][i] = yValues[j];,0,0,1,3,6,0,0,0,0,3,25,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2226,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2235,"         return copyOf(source, source.length);",0,0,0,1,2,1,0,0,0,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2245,"         return copyOf(source, source.length);",4,0,0,1,2,1,4,0,0,8,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2258,         final int[] output = new int[len];,2,0,1,2,4,1,0,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2259,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",0,0,0,2,4,0,0,0,0,6,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2260,         return output;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2273,         final double[] output = new double[len];,0,0,0,2,4,0,0,0,0,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2274,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",0,0,0,2,4,0,0,0,0,6,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2275,         return output;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2289,        if (o == null) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2290,"            throw new NullArgumentException(pattern, args);",6,1,0,1,2,0,0,0,0,7,47,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2292,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2301,        if (o == null) {,12,3,0,1,3,0,0,0,0,16,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2302,            throw new NullArgumentException();,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2304,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1939,            switch (dir) {,2,0,0,1,3,0,0,0,0,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,58,    public MathRuntimeException() {},6,0,0,2,4,1,0,0,0,8,32,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,48,"    private List<SerializablePair<Localizable, Object[]>> messages",0,0,0,1,2,0,0,0,0,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,53,"    private Map<String, Object> context = new HashMap<String, Object>();",2,0,0,1,2,1,0,12,0,15,68,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,66,        super(cause);,0,0,0,1,2,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,67,    },6,1,1,0,1,0,0,0,0,10,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,71,"        messages.add(new SerializablePair<Localizable, Object[]>(pattern, (Object[]) null));",2,0,0,5,10,0,4,8,0,15,84,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,72,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,77,"        messages.add(new SerializablePair<Localizable, Object[]>(pattern,",2,0,0,1,4,0,4,6,0,12,65,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,79,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,83,"        context.put(key, value);",0,0,0,1,2,0,8,0,0,8,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,84,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,88,        return context.get(key);,0,0,0,1,2,1,6,0,0,6,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,93,        return context.keySet();,0,0,0,1,2,1,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,103,"        return buildMessage(locale, "": "");",0,0,0,1,2,1,0,0,0,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,115,"        return buildMessage(locale, separator);",0,0,0,1,2,1,6,0,0,6,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,121,        return getMessage(Locale.US);,4,0,0,1,2,1,2,0,0,6,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,127,        return getMessage(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,139,        final StringBuilder sb = new StringBuilder();,2,0,0,1,2,1,0,4,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,140,        int count = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,141,        final int len = messages.size();,2,0,0,1,2,1,4,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,142,"        for (SerializablePair<Localizable, Object[]> pair : messages) {",4,0,0,2,5,0,0,6,0,10,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,143,"            final MessageFormat fmt = new MessageFormat(pair.getKey().getLocalizedString(locale),",2,0,0,2,5,1,8,4,0,15,85,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,145,            sb.append(fmt.format(pair.getValue()));,0,0,0,3,6,0,16,0,0,16,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,146,            if (++count < len) {,4,1,0,1,3,0,0,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,148,                sb.append(separator);,0,0,0,1,2,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,150,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,152,        return sb.toString();,0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,163,        serializeMessages(out);,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,164,        serializeContext(out);,0,0,0,1,2,0,4,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,165,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,176,        deSerializeMessages(in);,0,0,0,1,2,0,4,0,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,177,        deSerializeContext(in);,0,0,0,1,2,0,4,0,0,4,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,178,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,189,        final int len = messages.size();,2,0,0,1,2,1,4,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,190,        out.writeInt(len);,4,1,0,1,2,0,6,0,0,11,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,192,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,193,"            SerializablePair<Localizable, Object[]> pair = messages.get(i);",2,0,0,2,4,0,6,6,0,14,63,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,195,            out.writeObject(pair.getKey());,0,0,0,2,4,0,8,0,0,8,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,196,            final Object[] args = pair.getValue();,4,1,0,2,4,1,4,2,0,12,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,197,            final int aLen = args.length;,14,2,0,0,0,1,4,0,0,21,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,199,            out.writeInt(aLen);,4,1,1,1,2,0,0,0,0,8,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,200,            for (int j = 0; j < aLen; j++) {,12,1,0,1,3,0,0,0,0,14,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,201,                if (args[j] instanceof Serializable) {,0,0,1,2,5,0,0,2,0,6,38,9,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,203,                    out.writeObject(args[j]);,0,0,1,2,4,0,4,0,0,8,25,11,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,206,                    out.writeObject(nonSerializableReplacement(args[j]));,0,0,1,3,6,0,6,0,0,10,53,11,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,210,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,223,        final int len = in.readInt();,2,0,0,1,2,1,4,0,0,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,224,"        messages = new ArrayList<SerializablePair<Localizable, Object[]>>(len);",4,0,0,2,4,0,0,8,0,13,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,226,        for (int i = 0; i < len; i++) {,10,1,0,1,3,0,0,0,0,12,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,228,            final Localizable key = (Localizable) in.readObject();,2,0,0,2,4,1,4,4,0,11,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,230,            final int aLen = in.readInt();,2,0,0,1,2,1,4,0,0,7,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,231,            final Object[] args = new Object[aLen];,4,0,1,2,4,2,0,4,0,14,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,232,            for (int j = 0; j < aLen; j++) {,8,1,0,1,3,0,0,0,0,10,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,234,                args[j] = in.readObject();,12,2,1,2,4,0,4,0,0,25,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,236,"            messages.add(new SerializablePair<Localizable, Object[]>(key, args));",0,0,0,3,6,0,0,0,0,9,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,238,    },6,1,0,0,1,0,2,0,0,9,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,249,        final int len = context.keySet().size();,2,0,0,2,4,1,6,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,250,        out.writeInt(len);,0,0,0,1,2,0,6,0,0,6,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,251,        for (String key : context.keySet()) {,2,0,0,2,5,0,4,2,0,8,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,253,            out.writeObject(key);,6,1,0,1,2,1,6,0,0,14,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,254,            final Object value = context.get(key);,4,0,1,1,2,2,6,2,0,16,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,255,            if (value instanceof Serializable) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,257,                out.writeObject(value);,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,260,                out.writeObject(nonSerializableReplacement(value));,6,1,0,2,4,1,8,0,0,16,51,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,262,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,263,    },8,0,0,0,1,0,6,0,0,14,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,276,        final int len = in.readInt();,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,277,"        context = new HashMap<String, Object>();",0,0,0,1,2,0,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,278,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,280,            final String key = (String) in.readObject();,2,0,0,2,4,1,4,4,0,11,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,282,            final Object value = in.readObject();,2,0,0,1,2,1,4,2,0,9,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,283,"            context.put(key, value);",4,1,0,1,2,0,8,0,0,13,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,285,    },4,1,0,0,1,0,0,0,0,6,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,295,"        return ""[Object could not be serialized: "" + obj.getClass().getName() + ""]"";",0,0,0,3,6,1,0,0,0,10,76,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotPositiveException,57,37,"        super(value, 0, true);",2,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotPositiveException,57,38,    },2,0,0,0,1,0,0,0,0,2,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotPositiveException,57,47,"        super(specific, value, 0, true);",0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotPositiveException,57,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,57,50,        this(boundIsAllowed ?,16,2,0,0,1,0,0,0,0,19,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,57,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,57,68,"        super(specific, wrong, min);",6,0,0,1,2,0,0,0,0,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,57,70,        this.min = min;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,57,71,        this.boundIsAllowed = boundIsAllowed;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,57,72,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,57,78,        return boundIsAllowed;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,57,85,        return min;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,57,46,"        super(pattern, wrong, arguments);",16,3,0,1,2,3,0,0,0,22,33,1,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,57,47,        argument = wrong;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,57,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,57,54,        return argument;,8,0,0,0,0,1,0,0,0,8,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,57,40,                                        Object ... args) {,2,1,0,0,2,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,57,41,"        addMessage(pattern, args);",0,0,0,1,2,0,6,0,0,6,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,57,42,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,57,41,"        this(LocalizedFormats.NULL_NOT_ALLOWED, null);",4,0,0,1,2,0,0,0,0,4,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,57,42,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,57,50,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,57,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,57,44,"        super(specific, wrong, expected);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,57,45,        dimension = expected;,4,0,0,0,0,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,57,46,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,57,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);",0,0,0,1,2,0,0,0,0,3,67,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,57,57,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,57,63,        return dimension;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotFiniteNumberException,57,40,"        this(LocalizedFormats.NOT_FINITE_NUMBER, wrong, args);",4,1,0,1,2,0,0,0,0,5,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotFiniteNumberException,57,41,    },2,1,0,0,1,0,0,0,0,3,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotFiniteNumberException,57,53,"        super(specific, wrong, args);",6,0,0,1,2,0,0,0,0,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotFiniteNumberException,57,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,61,"        this(wrong, previous, index, MathUtils.OrderDirection.INCREASING, true);",14,1,0,1,2,0,0,0,0,16,72,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,62,    },2,0,0,0,1,0,0,0,0,2,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,80,        super(direction == MathUtils.OrderDirection.INCREASING ?,14,2,0,0,1,0,0,0,0,17,56,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,89,        this.direction = direction;,2,1,0,0,0,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,90,        this.strict = strict;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,91,        this.index = index;,4,0,0,0,0,0,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,92,        this.previous = previous;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,93,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,99,        return direction;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,105,        return strict;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,113,        return index;,6,2,0,0,0,1,0,0,0,8,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,119,        return previous;,0,0,0,0,0,1,0,0,0,1,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,57,38,    public MathArithmeticException() {,0,0,0,1,3,0,0,0,0,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,57,39,        addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,4,0,0,1,2,0,2,0,0,6,50,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,57,40,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,57,50,                                   Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,57,51,"        addMessage(pattern, args);",0,0,0,1,2,0,6,0,0,6,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,57,52,    },0,0,1,0,1,0,6,0,0,11,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,57,50,        this(boundIsAllowed ?,6,0,0,0,1,0,10,0,0,16,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,57,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,57,67,"        super(specific, wrong, max);",0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,57,69,        this.max = max;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,57,70,        this.boundIsAllowed = boundIsAllowed;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,57,71,    },0,0,0,0,1,0,6,0,0,6,1,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,57,77,        return boundIsAllowed;,4,1,0,0,0,1,0,0,0,5,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,57,84,        return max;,6,0,0,0,0,1,4,0,0,10,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,250,    private FastMath() {,2,0,0,1,3,1,0,0,0,3,20,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,251,    },6,1,0,0,1,0,0,0,0,7,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,263,        if (d > -MathUtils.SAFE_MIN && d < MathUtils.SAFE_MIN){,12,3,0,1,3,0,0,0,0,16,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,264,            return d; // These are un-normalised - don't try to convert,10,2,0,0,0,1,0,0,0,14,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,266,        long xl = Double.doubleToLongBits(d);,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,267,        xl = xl & MASK_30BITS; // Drop low order bits,10,1,0,0,0,0,6,0,0,18,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,268,        return Double.longBitsToDouble(xl);,6,5,1,1,2,2,6,0,0,22,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,285,      if (x != x) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,286,          return x;,12,3,0,0,0,1,0,0,0,17,9,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,289,      if (x > 20.0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,290,          return exp(x)/2.0;,2,1,0,1,2,1,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,293,      if (x < -20) {,8,1,0,1,3,0,0,0,0,10,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,294,          return exp(-x)/2.0;,0,0,0,1,2,1,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,297,      double hiPrec[] = new double[2];,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,298,      if (x < 0.0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,299,          x = -x;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,301,"      exp(x, 0.0, hiPrec);",10,5,0,1,2,0,0,0,0,16,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,303,      double ya = hiPrec[0] + hiPrec[1];,8,2,1,2,4,0,0,0,0,14,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,304,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,8,2,1,3,6,0,0,0,0,15,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,306,      double temp = ya * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,307,      double yaa = ya + temp - temp;,10,2,1,0,0,0,4,0,0,28,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,308,      double yab = ya - yaa;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,311,      double recip = 1.0/ya;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,312,      temp = recip * HEX_40000000;,10,1,0,0,0,0,0,0,0,14,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,313,      double recipa = recip + temp - temp;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,314,      double recipb = recip - recipa;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,317,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,22,9,0,1,2,1,2,0,0,35,76,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,319,      recipb += -yb * recip * recip;,8,1,0,0,0,0,0,0,0,11,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,322,      temp = ya + recipa;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,323,      yb += -(temp - ya - recipa);,8,1,0,1,2,0,0,0,0,11,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,324,      ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,325,      temp = ya + recipb;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,326,      yb += -(temp - ya - recipb);,0,0,0,1,2,0,6,0,0,6,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,327,      ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,329,      double result = ya + yb;,6,1,0,0,0,0,0,0,0,7,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,330,      result *= 0.5;,2,0,0,0,0,0,4,0,0,6,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,331,      return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,339,      boolean negate = false;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,340,      if (x != x) {,2,1,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,341,          return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,344,      if (x > 20.0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,345,          return exp(x)/2.0;,0,1,0,1,2,1,4,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,348,      if (x < -20) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,349,          return -exp(-x)/2.0;,22,10,0,1,2,1,2,0,0,37,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,352,      if (x == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,353,          return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,356,      if (x < 0.0) {,4,2,1,1,3,0,0,2,0,20,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,357,          x = -x;,10,2,0,0,0,0,6,0,0,21,7,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,358,          negate = true;,2,0,0,0,0,0,0,0,0,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,363,      if (x > 0.25) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,364,          double hiPrec[] = new double[2];,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,365,"          exp(x, 0.0, hiPrec);",0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,367,          double ya = hiPrec[0] + hiPrec[1];,0,0,0,2,4,0,8,0,0,8,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,368,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,6,1,1,3,6,0,0,0,0,13,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,370,          double temp = ya * HEX_40000000;,10,1,0,0,0,0,0,0,0,12,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,371,          double yaa = ya + temp - temp;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,372,          double yab = ya - yaa;,6,1,0,0,0,0,6,0,0,13,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,375,          double recip = 1.0/ya;,6,1,0,0,0,0,0,0,0,7,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,376,          temp = recip * HEX_40000000;,8,2,0,0,0,0,0,0,0,10,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,377,          double recipa = recip + temp - temp;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,378,          double recipb = recip - recipa;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,381,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0,0,0,1,2,0,0,0,0,3,76,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,383,          recipb += -yb * recip * recip;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,385,          recipa = -recipa;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,386,          recipb = -recipb;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,389,          temp = ya + recipa;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,390,          yb += -(temp - ya - recipa);,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,391,          ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,392,          temp = ya + recipb;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,393,          yb += -(temp - ya - recipb);,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,394,          ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,396,          result = ya + yb;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,397,          result *= 0.5;,14,2,0,0,0,1,0,0,0,19,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,398,      },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,400,          double hiPrec[] = new double[2];,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,401,"          expm1(x, hiPrec);",4,0,0,1,2,0,0,0,0,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,403,          double ya = hiPrec[0] + hiPrec[1];,4,1,1,2,4,1,2,0,0,12,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,404,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,4,1,1,3,6,0,0,0,0,10,42,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,407,          double denom = 1.0 + ya;,4,1,0,0,0,0,0,0,0,5,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,408,          double denomr = 1.0 / denom;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,409,          double denomb = -(denom - 1.0 - ya) + yb;,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,410,          double ratio = ya * denomr;,6,1,0,0,0,0,0,0,0,7,27,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,411,          double temp = ratio * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,412,          double ra = ratio + temp - temp;,8,1,0,0,0,0,0,0,0,10,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,413,          double rb = ratio - ra;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,415,          temp = denom * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,416,          double za = denom + temp - temp;,10,2,0,0,0,0,0,0,0,12,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,417,          double zb = denom - za;,10,1,0,0,0,0,0,0,0,11,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,419,          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;,0,0,0,1,2,0,0,0,0,3,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,422,          rb += yb*denomr;                        // numerator,16,3,0,0,0,1,0,0,0,21,52,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,423,          rb += -ya * denomb * denomr * denomr;   // denominator,24,8,0,0,0,0,0,0,0,35,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,426,          temp = ya + ra;,8,2,0,0,0,0,0,0,0,11,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,427,          yb += -(temp - ya - ra);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,428,          ya = temp;,6,3,0,0,0,0,0,0,0,9,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,429,          temp = ya + rb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,430,          yb += -(temp - ya - rb);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,431,          ya = temp;,6,1,0,0,0,0,4,0,0,13,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,433,          result = ya + yb;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,434,          result *= 0.5;,8,1,0,0,0,1,0,0,0,11,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,437,      if (negate) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,438,          result = -result;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,441,      return result;,6,0,0,0,0,1,0,0,0,8,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,449,      boolean negate = false;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,451,      if (x != x) {,4,1,0,1,3,0,8,0,0,13,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,452,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,455,      if (x > 20.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,456,          return 1.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,459,      if (x < -20) {,2,1,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,460,          return -1.0;,0,0,0,0,0,1,0,0,0,1,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,463,      if (x == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,464,          return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,467,      if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,468,          x = -x;,6,1,0,0,0,0,0,0,0,9,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,469,          negate = true;,8,1,0,0,0,0,0,0,0,12,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,473,      if (x >= 0.5) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,474,          double hiPrec[] = new double[2];,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,476,"          exp(x*2.0, 0.0, hiPrec);",10,2,0,1,2,0,4,0,0,17,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,478,          double ya = hiPrec[0] + hiPrec[1];,2,1,1,2,4,0,0,0,0,7,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,479,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0,0,0,3,6,0,0,0,0,9,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,482,          double na = -1.0 + ya;,4,1,0,0,0,0,0,0,0,6,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,483,          double nb = -(na + 1.0 - ya);,14,3,0,1,2,0,0,0,0,18,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,484,          double temp = na + yb;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,485,          nb += -(temp - na - yb);,8,1,0,1,2,0,0,0,0,11,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,486,          na = temp;,12,4,0,0,0,0,0,0,0,16,10,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,489,          double da = 1.0 + ya;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,490,          double db = -(da - 1.0 - ya);,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,491,          temp = da + yb;,2,0,0,0,0,0,6,0,0,8,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,492,          db += -(temp - da - yb);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,493,          da = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,495,          temp = da * HEX_40000000;,10,3,0,0,0,0,0,0,0,14,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,496,          double daa = da + temp - temp;,30,11,0,0,0,0,0,0,0,42,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,497,          double dab = da - daa;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,500,          double ratio = na/da;,12,2,0,0,0,0,0,0,0,14,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,501,          temp = ratio * HEX_40000000;,6,2,0,0,0,0,0,0,0,8,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,502,          double ratioa = ratio + temp - temp;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,503,          double ratiob = ratio - ratioa;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,506,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,22,9,0,1,2,0,0,0,0,32,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,509,          ratiob += nb / da;,8,1,1,0,0,0,0,0,0,15,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,511,          ratiob += -db * na / da / da;,12,4,0,0,0,0,0,0,0,18,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,513,          result = ratioa + ratiob;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,514,      },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,516,          double hiPrec[] = new double[2];,4,1,0,2,4,0,0,0,0,5,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,518,"          expm1(x*2.0, hiPrec);",0,0,0,1,2,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,520,          double ya = hiPrec[0] + hiPrec[1];,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,521,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,4,1,1,3,6,0,0,0,0,10,42,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,524,          double na = ya;,6,0,0,0,0,0,0,0,0,6,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,525,          double nb = yb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,528,          double da = 2.0 + ya;,4,1,0,0,0,0,0,0,0,5,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,529,          double db = -(da - 2.0 - ya);,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,530,          double temp = da + yb;,12,4,0,0,0,0,0,0,0,17,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,531,          db += -(temp - da - yb);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,532,          da = temp;,6,0,0,0,0,0,4,0,0,12,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,534,          temp = da * HEX_40000000;,12,6,1,0,0,0,0,0,0,24,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,535,          double daa = da + temp - temp;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,536,          double dab = da - daa;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,539,          double ratio = na/da;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,540,          temp = ratio * HEX_40000000;,10,1,0,0,0,2,0,2,0,16,28,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,541,          double ratioa = ratio + temp - temp;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,542,          double ratiob = ratio - ratioa;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,545,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0,0,0,1,2,0,0,0,0,3,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,548,          ratiob += nb / da;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,550,          ratiob += -db * na / da / da;,10,3,0,0,0,0,0,0,0,15,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,552,          result = ratioa + ratiob;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,555,      if (negate) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,556,          result = -result;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,559,      return result;,10,1,1,0,0,2,0,0,0,16,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,567,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,10,4,0,2,4,1,8,0,0,23,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,576,        boolean negative = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,577,        if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,578,            negative = true;,2,0,0,0,0,0,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,579,            a = -a;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,583,        if (a > 0.167) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,584,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,8,3,0,2,4,0,0,0,0,11,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,586,            final double a2 = a * a;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,587,            if (a > 0.097) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,588,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0 - a2 * (1.0 / 15.0 - a2 * (1.0 / 17.0) * 15.0 / 16.0) * 13.0 / 14.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,6,2,0,9,18,0,0,0,0,8,264,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,589,            } else if (a > 0.036) {,2,1,0,1,4,0,0,0,0,3,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,590,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,4,0,1,7,14,1,0,0,0,7,196,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,591,            } else if (a > 0.0036) {,0,0,0,1,4,0,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,592,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,12,17,0,5,10,0,0,0,0,30,129,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,594,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0) * 3.0 / 4.0) / 2.0);,0,0,0,3,6,0,0,0,0,9,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,598,        return negative ? -absAsinh : absAsinh;,2,0,0,0,0,1,0,0,0,3,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,608,        boolean negative = false;,4,0,0,0,0,0,8,2,0,15,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,609,        if (a < 0) {,6,3,0,1,3,0,0,0,0,9,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,610,            negative = true;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,611,            a = -a;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,615,        if (a > 0.15) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,616,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,0,0,0,3,6,0,0,0,0,9,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,618,            final double a2 = a * a;,6,1,0,0,0,1,0,0,0,8,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,619,            if (a > 0.087) {,2,1,1,1,3,0,0,0,0,6,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,620,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0 + a2 * (1.0 / 15.0 + a2 * (1.0 / 17.0)))))))));,20,25,0,9,18,0,0,0,0,46,175,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,621,            } else if (a > 0.031) {,0,0,0,1,4,0,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,622,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0)))))));,16,19,0,7,14,0,0,0,0,36,135,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,623,            } else if (a > 0.003) {,8,2,0,1,4,1,0,0,0,11,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,624,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0)))));,0,0,0,5,10,0,0,0,0,15,95,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,626,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0)));,8,7,0,3,6,0,0,0,0,16,57,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,630,        return negative ? -absAtanh : absAtanh;,6,0,0,0,0,1,0,0,0,7,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,640,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,4,1,0,3,6,2,0,0,0,5,87,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,649,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,10,3,0,3,6,2,0,0,0,15,91,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,657,"        return nextAfter(a, Double.POSITIVE_INFINITY);",0,0,0,1,2,1,0,0,0,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,665,"        return nextAfter(a, Float.POSITIVE_INFINITY);",0,0,0,1,2,1,0,0,0,4,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,673,        return Math.random();,0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,697,"        return exp(x, 0.0, null);",0,0,0,1,2,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,716,        if (x < 0.0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,717,            intVal = (int) -x;,0,0,0,1,2,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,719,            if (intVal > 746) {,6,0,1,1,3,1,0,2,0,14,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,720,                if (hiPrec != null) {,4,1,0,1,3,0,0,0,0,5,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,721,                    hiPrec[0] = 0.0;,0,0,1,1,2,0,0,0,0,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,722,                    hiPrec[1] = 0.0;,2,2,1,1,2,0,0,0,0,7,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,724,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,727,            if (intVal > 709) {,8,2,0,1,3,1,0,0,0,12,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,729,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",4,2,0,1,2,1,6,0,0,13,79,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,730,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,731,                    hiPrec[0] /= 285040095144011776.0;,0,0,1,1,2,0,0,0,0,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,732,                    hiPrec[1] /= 285040095144011776.0;,0,0,1,1,2,0,0,0,0,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,734,                return result;,20,4,0,0,0,1,0,0,0,28,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,737,            if (intVal == 709) {,2,1,0,1,3,0,0,0,0,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,739,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",4,2,0,1,2,1,6,0,0,13,79,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,740,                if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,741,                    hiPrec[0] /= 4.455505956692756620;,0,0,1,1,2,0,0,0,0,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,742,                    hiPrec[1] /= 4.455505956692756620;,0,0,1,1,2,0,0,0,0,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,744,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,747,            intVal++;,2,0,0,0,0,0,0,0,0,3,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,749,            intPartA = EXP_INT_TABLE_A[750-intVal];,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,750,            intPartB = EXP_INT_TABLE_B[750-intVal];,4,1,1,1,2,0,0,0,0,8,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,752,            intVal = -intVal;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,754,            intVal = (int) x;,4,0,0,1,2,0,0,0,0,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,756,            if (intVal > 709) {,14,3,0,1,3,1,2,8,0,29,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,757,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,758,                    hiPrec[0] = Double.POSITIVE_INFINITY;,6,1,1,1,2,0,0,0,0,12,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,759,                    hiPrec[1] = 0.0;,0,0,0,1,2,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,761,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,764,            intPartA = EXP_INT_TABLE_A[750+intVal];,10,1,1,1,2,0,0,0,0,15,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,765,            intPartB = EXP_INT_TABLE_B[750+intVal];,14,5,1,1,2,0,0,0,0,23,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,772,        final int intFrac = (int) ((x - intVal) * 1024.0);,8,2,0,3,6,1,0,0,0,11,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,773,        final double fracPartA = EXP_FRAC_TABLE_A[intFrac];,0,0,0,1,2,0,0,0,0,3,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,774,        final double fracPartB = EXP_FRAC_TABLE_B[intFrac];,6,4,1,1,2,1,0,0,0,15,51,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,780,        final double epsilon = x - (intVal + intFrac / 1024.0);,0,0,0,1,2,0,0,0,0,3,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,789,        double z = 0.04168701738764507;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,790,        z = z * epsilon + 0.1666666505023083;,18,3,0,0,0,0,24,0,0,50,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,791,        z = z * epsilon + 0.5000000000042687;,2,1,0,0,0,0,0,0,0,3,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,792,        z = z * epsilon + 1.0;,2,1,0,0,0,1,0,0,0,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,793,        z = z * epsilon + -3.940510424527919E-20;,6,1,0,0,0,0,0,0,0,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,800,        double tempA = intPartA * fracPartA;,8,1,0,0,0,0,0,0,0,11,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,801,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,0,0,0,0,0,0,0,0,0,0,82,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,807,        final double tempC = tempB + tempA;,20,4,0,0,0,1,0,0,0,27,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,809,        if (extra != 0.0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,810,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,24,7,0,0,0,0,0,0,0,33,63,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,812,            result = tempC*z + tempB + tempA;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,815,        if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,817,            hiPrec[0] = tempA;,0,0,0,1,2,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,818,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,0,1,1,1,2,0,0,0,0,14,58,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,821,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,829,"      return expm1(x, null);",0,0,0,1,2,1,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,838,        if (x != x || x == 0.0) { // NaN or zero,6,3,0,1,3,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,839,            return x;,4,2,0,0,0,1,0,0,0,7,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,842,        if (x <= -1.0 || x >= 1.0) {,4,3,0,1,3,0,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,845,            double hiPrec[] = new double[2];,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,846,"            exp(x, 0.0, hiPrec);",0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,847,            if (x > 0.0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,848,                return -1.0 + hiPrec[0] + hiPrec[1];,0,0,0,2,4,1,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,850,                final double ra = -1.0 + hiPrec[0];,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,851,                double rb = -(ra + 1.0 - hiPrec[0]);,6,2,0,2,4,0,0,0,0,8,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,852,                rb += hiPrec[1];,0,0,0,1,2,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,853,                return ra + rb;,4,1,0,0,0,1,0,0,0,5,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,860,        boolean negative = false;,10,2,0,0,0,1,0,0,0,14,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,862,        if (x < 0.0) {,6,2,0,1,3,1,0,0,0,9,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,863,            x = -x;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,864,            negative = true;,12,2,0,0,0,0,0,0,0,16,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,868,            int intFrac = (int) (x * 1024.0);,0,0,0,2,4,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,869,            double tempA = EXP_FRAC_TABLE_A[intFrac] - 1.0;,2,1,1,1,2,0,0,0,0,7,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,870,            double tempB = EXP_FRAC_TABLE_B[intFrac];,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,872,            double temp = tempA + tempB;,6,1,0,0,0,0,0,0,0,7,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,873,            tempB = -(temp - tempA - tempB);,6,1,0,1,2,0,0,0,0,7,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,874,            tempA = temp;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,876,            temp = tempA * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,877,            baseA = tempA + temp - temp;,4,1,0,0,0,0,0,0,0,5,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,878,            baseB = tempB + (tempA - baseA);,12,3,0,1,2,0,0,0,0,16,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,880,            epsilon = x - intFrac/1024.0;,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,885,        double zb = 0.008336750013465571;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,886,        zb = zb * epsilon + 0.041666663879186654;,0,0,0,0,0,0,0,0,0,0,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,887,        zb = zb * epsilon + 0.16666666666745392;,8,2,0,0,0,0,0,0,0,11,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,888,        zb = zb * epsilon + 0.49999999999999994;,0,0,0,0,0,0,0,0,0,0,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,889,        zb = zb * epsilon;,6,1,0,0,0,0,6,0,0,15,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,890,        zb = zb * epsilon;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,892,        double za = epsilon;,8,0,0,0,0,0,0,0,0,10,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,893,        double temp = za + zb;,12,2,0,0,0,0,0,0,0,15,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,894,        zb = -(temp - za - zb);,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,895,        za = temp;,2,1,0,0,0,0,4,0,0,7,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,897,        temp = za * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,898,        temp = za + temp - temp;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,899,        zb += za - temp;,2,1,0,0,0,0,0,0,0,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,900,        za = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,903,        double ya = za * baseA;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,905,        temp = ya + za * baseB;,20,4,0,0,0,0,0,0,0,25,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,906,        double yb = -(temp - ya - za * baseB);,0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,907,        ya = temp;,2,0,0,0,0,0,4,0,0,7,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,909,        temp = ya + zb * baseA;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,910,        yb += -(temp - ya - zb * baseA);,20,4,1,1,2,0,0,2,0,33,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,911,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,913,        temp = ya + zb * baseB;,24,7,0,0,0,0,0,0,0,34,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,914,        yb += -(temp - ya - zb*baseB);,10,2,0,1,2,0,0,0,0,14,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,915,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,919,        temp = ya + baseA;,4,2,1,0,0,0,0,0,0,11,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,920,        yb += -(temp - baseA - ya);,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,921,        ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,923,        temp = ya + za;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,925,        yb += -(temp - ya - za);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,926,        ya = temp;,10,3,0,0,0,0,0,0,0,15,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,928,        temp = ya + baseB;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,930,        yb += -(temp - ya - baseB);,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,931,        ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,933,        temp = ya + zb;,10,2,0,0,0,0,0,0,0,13,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,935,        yb += -(temp - ya - zb);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,936,        ya = temp;,2,0,1,0,0,0,10,0,0,15,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,938,        if (negative) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,940,            double denom = 1.0 + ya;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,941,            double denomr = 1.0 / denom;,4,1,0,0,0,0,0,0,0,5,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,942,            double denomb = -(denom - 1.0 - ya) + yb;,6,1,0,1,2,0,0,0,0,8,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,943,            double ratio = ya * denomr;,6,1,0,0,0,0,0,0,0,7,27,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,944,            temp = ratio * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,945,            final double ra = ratio + temp - temp;,30,11,0,0,0,1,0,0,0,43,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,946,            double rb = ratio - ra;,6,1,0,0,0,0,4,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,948,            temp = denom * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,949,            za = denom + temp - temp;,16,5,0,0,0,0,0,0,0,23,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,950,            zb = denom - za;,6,1,0,0,0,0,0,0,0,8,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,952,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,0,0,0,1,2,0,0,0,0,3,60,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,963,            rb += yb * denomr;                      // numerator,12,3,0,0,0,1,0,0,0,17,52,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,964,            rb += -ya * denomb * denomr * denomr;   // denominator,0,0,0,0,0,0,0,0,0,0,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,967,            ya = -ra;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,968,            yb = -rb;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,971,        if (hiPrecOut != null) {,10,2,0,1,3,0,0,0,0,13,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,972,            hiPrecOut[0] = ya;,0,0,0,1,2,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,973,            hiPrecOut[1] = yb;,2,0,1,1,2,0,0,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,976,        return ya + yb;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1026,            final double a = d * 9.31322574615478515625E-10;,6,1,0,0,0,0,4,0,0,13,48,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1027,            split[0] = (d + a - d) * HEX_40000000;,8,3,1,2,4,0,0,0,0,14,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1028,            split[1] = d - split[0];,0,0,0,2,4,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1099,            in[0] = in[1];,0,0,0,2,4,0,0,0,0,6,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1100,            in[1] = 0.0;,2,1,0,1,2,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1231,"        return log(x, null);",0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1241,        if (x==0) { // Handle special case of +0/-0,0,0,0,1,3,0,0,0,0,4,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1242,            return Double.NEGATIVE_INFINITY;,8,1,0,0,0,1,0,0,0,9,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1244,        long bits = Double.doubleToLongBits(x);,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1247,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,0,0,0,2,5,0,0,0,0,7,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1248,            if (x != 0.0) {,2,1,0,1,3,0,0,0,0,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1249,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1250,                    hiPrec[0] = Double.NaN;,4,0,1,1,2,0,0,0,0,7,23,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1253,                return Double.NaN;,6,1,0,0,0,1,0,0,0,7,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1258,        if (x == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1259,            if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1260,                hiPrec[0] = Double.POSITIVE_INFINITY;,4,0,1,1,2,0,0,0,0,7,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1263,            return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1267,        int exp = (int)(bits >> 52)-1023;,4,2,0,2,4,0,0,0,0,6,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1269,        if ((bits & 0x7ff0000000000000L) == 0) {,0,0,0,2,5,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1271,            if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1273,                if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1274,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,10,2,0,1,2,0,0,0,0,14,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1277,                return Double.NEGATIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1281,            bits <<= 1;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1282,            while ( (bits & 0x0010000000000000L) == 0) {,0,0,0,2,5,0,0,0,0,7,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1283,                exp--;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1284,                bits <<= 1;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1289,        if (exp == -1 || exp == 0) {,0,0,0,1,3,0,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1290,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,6,5,0,1,3,0,0,0,0,11,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1295,                double xa = x - 1.0;,8,3,0,0,0,0,4,0,0,15,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1296,                double xb = xa - x + 1.0;,8,3,1,0,0,0,0,0,0,14,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1297,                double tmp = xa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1298,                double aa = xa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1299,                double ab = xa - aa;,14,3,0,0,0,1,0,0,0,19,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1300,                xa = aa;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1301,                xb = ab;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1303,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,10,1,1,2,4,0,0,0,0,14,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1304,                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];,6,1,1,2,4,0,0,0,0,9,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1306,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,2,0,1,1,3,0,0,0,0,5,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1308,                    aa = ya * xa;,10,2,0,0,0,0,0,0,0,13,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1309,                    ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1311,                    tmp = aa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1312,                    ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1313,                    yb = aa - ya + ab;,14,3,0,0,0,0,0,0,0,19,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1316,                    aa = ya + LN_QUICK_COEF[i][0];,8,1,1,2,4,0,0,0,0,14,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1317,                    ab = yb + LN_QUICK_COEF[i][1];,4,1,1,2,4,0,0,0,0,10,30,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1319,                    tmp = aa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1320,                    ya = aa + tmp - tmp;,6,1,0,0,0,1,0,0,0,8,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1321,                    yb = aa - ya + ab;,2,1,0,0,0,0,0,0,0,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1325,                aa = ya * xa;,6,1,0,0,0,0,0,0,0,8,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1326,                ab = ya * xb + yb * xa + yb * xb;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1328,                tmp = aa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1329,                ya = aa + tmp - tmp;,14,3,1,0,0,0,0,0,0,20,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1330,                yb = aa - ya + ab;,2,0,0,0,0,0,0,0,0,2,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1332,                return ya + yb;,12,2,0,0,0,1,0,0,0,16,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1337,        double lnm[] = LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,0,0,0,5,10,0,0,0,0,15,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1348,        double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,0,0,0,3,6,0,0,0,0,9,89,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1350,        double lnza = 0.0;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1351,        double lnzb = 0.0;,2,0,0,0,0,0,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1353,        if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1355,            double tmp = epsilon * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1356,            double aa = epsilon + tmp - tmp;,8,2,0,0,0,0,0,0,0,10,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1357,            double ab = epsilon - aa;,6,1,0,0,0,0,0,0,0,7,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1358,            double xa = aa;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1359,            double xb = ab;,12,0,0,0,0,0,0,0,0,13,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1362,            double numer = bits & 0x3ffffffffffL;,2,0,0,0,0,0,0,0,0,2,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1363,            double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,0,0,0,1,2,0,0,0,0,3,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1364,            aa = numer - xa*denom - xb * denom;,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1365,            xb += aa / denom;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1368,            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];,6,1,1,2,4,0,0,0,0,9,57,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1369,            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];,6,1,1,2,4,0,0,0,0,9,57,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1371,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1373,                aa = ya * xa;,2,1,0,0,0,0,0,0,0,3,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1374,                ab = ya * xb + yb * xa + yb * xb;,6,1,1,0,0,0,0,0,0,13,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1376,                tmp = aa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1377,                ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1378,                yb = aa - ya + ab;,12,2,0,0,0,0,0,0,0,15,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1381,                aa = ya + LN_HI_PREC_COEF[i][0];,4,1,1,2,4,0,0,0,0,10,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1382,                ab = yb + LN_HI_PREC_COEF[i][1];,0,0,0,2,4,0,6,0,0,6,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1384,                tmp = aa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1385,                ya = aa + tmp - tmp;,14,6,0,0,0,0,4,0,0,26,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1386,                yb = aa - ya + ab;,32,9,0,0,0,0,6,0,0,51,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1390,            aa = ya * xa;,6,1,0,0,0,0,0,0,0,8,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1391,            ab = ya * xb + yb * xa + yb * xb;,18,6,0,0,0,0,0,0,0,25,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1399,            lnza = aa + ab;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1400,            lnzb = -(lnza - aa - ab);,0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1401,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1404,            lnza = -0.16624882440418567;,2,0,0,0,0,0,0,0,0,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1405,            lnza = lnza * epsilon + 0.19999954120254515;,6,2,0,0,0,0,0,0,0,9,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1406,            lnza = lnza * epsilon + -0.2499999997677497;,10,1,0,0,0,0,0,0,0,12,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1407,            lnza = lnza * epsilon + 0.3333333333332802;,0,0,0,0,0,0,0,0,0,0,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1408,            lnza = lnza * epsilon + -0.5;,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1409,            lnza = lnza * epsilon + 1.0;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1410,            lnza = lnza * epsilon;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1427,        double a = LN_2_A*exp;,6,1,0,0,0,0,0,0,0,7,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1428,        double b = 0.0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1429,        double c = a+lnm[0];,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1430,        double d = -(c-a-lnm[0]);,0,0,0,2,4,0,0,0,0,6,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1431,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1432,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1434,        c = a + lnza;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1435,        d = -(c - a - lnza);,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1436,        a = c;,14,5,0,0,0,0,0,0,0,20,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1437,        b = b + d;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1439,        c = a + LN_2_B*exp;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1440,        d = -(c - a - LN_2_B*exp);,12,3,0,1,2,0,0,0,0,17,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1441,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1442,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1444,        c = a + lnm[1];,4,1,1,1,2,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1445,        d = -(c - a - lnm[1]);,6,1,0,2,4,0,0,0,0,8,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1446,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1447,        b = b + d;,10,1,0,0,0,0,0,0,0,12,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1449,        c = a + lnzb;,2,0,0,0,0,1,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1450,        d = -(c - a - lnzb);,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1451,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1452,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1454,        if (hiPrec != null) {,8,2,0,1,3,1,0,0,0,11,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1455,            hiPrec[0] = a;,4,2,0,1,2,1,6,0,0,13,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1456,            hiPrec[1] = b;,2,0,1,1,2,0,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1459,        return a + b;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1467,        double xpa = 1.0 + x;,4,0,0,0,0,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1468,        double xpb = -(xpa - 1.0 - x);,6,1,0,1,2,0,4,0,0,13,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1470,        if (x == -1) {,2,1,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1471,            return x/0.0;   // -Infinity,6,1,0,0,0,1,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1474,        if (x > 0 && 1/x == 0) { // x = Infinity,4,4,0,1,3,0,0,0,0,8,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1475,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1478,        if (x>1e-6 || x<-1e-6) {,0,0,0,1,3,0,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1479,            double hiPrec[] = new double[2];,18,7,0,2,4,0,0,0,0,25,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1481,"            final double lores = log(xpa, hiPrec);",2,0,0,1,2,1,6,0,0,9,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1482,            if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0,0,0,2,5,0,12,4,0,16,73,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1483,                return lores;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1488,            double fx1 = xpb/xpa;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1490,            double epsilon = 0.5 * fx1 + 1.0;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1491,            epsilon = epsilon * fx1;,14,3,1,0,0,1,0,0,0,23,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1493,            return epsilon + hiPrec[1] + hiPrec[0];,0,0,0,2,4,1,6,0,0,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1497,        double y = x * 0.333333333333333 - 0.5;,0,0,0,0,0,0,0,0,0,0,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1498,        y = y * x + 1.0;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1499,        y = y * x;,4,2,0,0,0,0,0,0,0,6,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1501,        return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1509,        final double hiPrec[] = new double[2];,2,0,0,2,4,1,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1511,"        final double lores = log(x, hiPrec);",0,0,0,1,2,0,4,0,0,4,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1512,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,8,6,0,2,5,0,0,0,0,14,73,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1513,            return lores;,2,0,0,0,0,1,0,0,0,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1516,        final double tmp = hiPrec[0] * HEX_40000000;,0,0,0,1,2,0,0,0,0,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1517,        final double lna = hiPrec[0] + tmp - tmp;,6,2,1,1,2,1,4,0,0,15,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1518,        final double lnb = hiPrec[0] - lna + hiPrec[1];,4,2,1,2,4,1,0,0,0,11,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1520,        final double rln10a = 0.4342944622039795;,2,0,0,0,0,1,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1521,        final double rln10b = 1.9699272335463627E-8;,0,0,0,0,0,0,0,0,0,0,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1523,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,8,0,0,0,0,1,0,0,0,10,65,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1534,        final double lns[] = new double[2];,0,0,0,2,4,0,0,0,0,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1536,        if (y == 0.0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1537,            return 1.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1540,        if (x != x) { // X is NaN,2,1,0,1,3,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1541,            return x;,2,0,1,0,0,1,4,0,0,15,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1545,        if (x == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1546,            long bits = Double.doubleToLongBits(x);,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1547,            if ((bits & 0x8000000000000000L) != 0) {,2,2,0,2,5,0,0,0,0,4,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1549,                long yi = (long) y;,6,2,0,1,2,0,10,0,0,19,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1551,                if (y < 0 && y == yi && (yi & 1) == 1) {,0,0,0,2,5,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1552,                    return Double.NEGATIVE_INFINITY;,8,0,0,0,0,1,0,0,0,9,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1555,                if (y < 0 && y == yi && (yi & 1) == 1) {,0,0,0,2,5,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1556,                    return -0.0;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1559,                if (y > 0 && y == yi && (yi & 1) == 1) {,0,0,0,2,5,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1560,                    return -0.0;,0,0,0,0,0,1,0,0,0,1,12,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1564,            if (y < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1565,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1567,            if (y > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1568,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1571,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1574,        if (x == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,2,0,0,2,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1575,            if (y != y) { // y is NaN,4,1,0,1,3,0,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1576,                return y;,2,1,0,0,0,1,0,0,0,3,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1578,            if (y < 0.0) {,8,1,0,1,3,0,0,0,0,9,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1579,                return 0.0;,6,2,0,0,0,1,0,0,0,9,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1581,                return Double.POSITIVE_INFINITY;,12,1,0,0,0,1,0,0,0,14,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1585,        if (y == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1586,            if (x * x == 1.0),4,2,0,1,2,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1587,              return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1589,            if (x * x > 1.0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1590,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1592,                return 0.0;,6,1,0,0,0,1,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1596,        if (x == Double.NEGATIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1597,            if (y != y) { // y is NaN,8,2,0,1,3,0,0,0,0,10,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1598,                return y;,4,0,0,0,0,1,0,0,0,4,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1601,            if (y < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1602,                long yi = (long) y;,4,0,0,1,2,0,0,0,0,4,19,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1603,                if (y == yi && (yi & 1) == 1) {,6,4,0,2,5,0,0,0,0,10,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1604,                    return -0.0;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1607,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1610,            if (y > 0)  {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1611,                long yi = (long) y;,0,0,0,1,2,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1612,                if (y == yi && (yi & 1) == 1) {,22,6,0,2,5,0,0,0,0,30,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1613,                    return Double.NEGATIVE_INFINITY;,2,1,0,0,0,1,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1616,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1620,        if (y == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1622,            if (x * x == 1.0) {,4,2,0,1,3,0,0,0,0,6,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1623,                return Double.NaN;,6,1,0,0,0,2,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1626,            if (x * x < 1.0) {,4,0,0,1,3,0,0,0,0,6,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1627,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1629,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1634,        if (x < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1636,            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {,0,0,0,1,3,0,0,0,0,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1637,"                return pow(-x, y);",2,0,0,1,2,1,4,0,0,7,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1640,            if (y == (long) y) {,4,1,0,2,5,0,0,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1642,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",18,4,0,4,8,2,8,0,0,34,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1644,                return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1651,        if (y < 8e298 && y > -8e298) {,4,3,0,1,3,0,0,0,0,8,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1652,            double tmp1 = y * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1653,            ya = y + tmp1 - tmp1;,8,2,0,0,0,0,0,0,0,11,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1654,            yb = y - ya;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1655,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1656,            double tmp1 = y * 9.31322574615478515625E-10;,4,1,0,0,0,0,0,0,0,5,45,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1657,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,4,1,0,0,0,0,0,0,0,5,48,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1658,            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;,24,4,0,1,2,0,0,0,0,32,56,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1659,            yb = y - ya;,0,0,0,0,0,0,4,0,0,4,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1663,"        final double lores = log(x, lns);",4,0,0,1,2,0,0,0,0,4,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1664,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0,0,0,2,5,0,0,0,0,7,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1665,            return lores;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1668,        double lna = lns[0];,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1669,        double lnb = lns[1];,10,2,0,1,2,0,6,4,0,22,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1672,        double tmp1 = lna * HEX_40000000;,10,1,0,0,0,0,0,0,0,13,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1673,        double tmp2 = lna + tmp1 - tmp1;,0,0,0,0,0,0,0,0,0,0,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1674,        lnb += lna - tmp2;,10,1,0,0,0,0,0,0,0,13,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1675,        lna = tmp2;,2,0,0,0,0,0,0,0,0,2,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1678,        final double aa = lna * ya;,8,1,0,0,0,2,6,2,0,19,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1679,        final double ab = lna * yb + lnb * ya + lnb * yb;,0,0,0,0,0,0,0,0,0,0,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1681,        lna = aa+ab;,4,0,0,0,0,0,4,0,0,8,12,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1682,        lnb = -(lna - aa - ab);,8,1,0,1,2,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1684,        double z = 1.0 / 120.0;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1685,        z = z * lnb + (1.0 / 24.0);,6,3,0,1,2,0,0,0,0,10,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1686,        z = z * lnb + (1.0 / 6.0);,2,0,0,1,2,0,0,0,0,2,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1687,        z = z * lnb + 0.5;,10,2,0,0,0,0,0,0,0,13,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1688,        z = z * lnb + 1.0;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1689,        z = z * lnb;,12,4,0,0,0,0,0,0,0,17,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1691,"        final double result = exp(lna, z, null);",0,0,0,1,2,0,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1693,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1948,        double x2 = x*x;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1950,        double p = 2.7553817452272217E-6;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1951,        p = p * x2 + -1.9841269659586505E-4;,6,2,0,0,0,0,0,0,0,10,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1952,        p = p * x2 + 0.008333333333329196;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1953,        p = p * x2 + -0.16666666666666666;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1956,        p = p * x2 * x;,8,1,0,0,0,0,0,0,0,10,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1958,        return p;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1968,        double x2 = x*x;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1970,        double p = 2.479773539153719E-5;,8,4,0,0,0,0,0,0,0,13,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1971,        p = p * x2 + -0.0013888888689039883;,6,2,0,0,0,0,0,0,0,10,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1972,        p = p * x2 + 0.041666666666621166;,10,4,0,0,0,0,0,0,0,15,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1973,        p = p * x2 + -0.49999999999999994;,6,2,0,0,0,0,0,0,0,10,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1974,        p *= x2;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1976,        return p;,4,1,0,0,0,1,0,0,0,5,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1987,        int idx = (int) ((xa * 8.0) + 0.5);,4,2,0,3,6,0,0,0,0,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1988,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0,0,0,1,2,0,0,0,0,3,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1991,        final double sintA = SINE_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1992,        final double sintB = SINE_TABLE_B[idx];,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1993,        final double costA = COSINE_TABLE_A[idx];,6,0,1,1,2,1,4,0,0,15,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1994,        final double costB = COSINE_TABLE_B[idx];,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1997,        double sinEpsA = epsilon;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1998,        double sinEpsB = polySine(epsilon);,4,0,1,1,2,0,4,0,0,12,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1999,        final double cosEpsA = 1.0;,4,4,0,0,0,0,0,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2000,        final double cosEpsB = polyCosine(epsilon);,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2003,        final double temp = sinEpsA * HEX_40000000;,16,2,0,0,0,1,0,0,0,20,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2004,        double temp2 = (sinEpsA + temp) - temp;,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2005,        sinEpsB +=  sinEpsA - temp2;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2006,        sinEpsA = temp2;,4,0,0,0,0,0,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2032,        double a = 0;,10,1,0,0,0,0,0,0,0,11,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2033,        double b = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2035,        double t = sintA;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2036,        double c = a + t;,6,1,0,0,0,0,0,0,0,8,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2037,        double d = -(c - a - t);,2,1,0,1,2,0,0,0,0,3,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2038,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2039,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2041,        t = costA * sinEpsA;,6,1,0,0,0,0,0,0,0,8,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2042,        c = a + t;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2043,        d = -(c - a - t);,14,3,0,1,2,0,0,0,0,21,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2044,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2045,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2047,        b = b + sintA * cosEpsB + costA * sinEpsB;,18,4,0,0,0,0,0,0,0,24,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2062,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,2,1,0,0,0,0,2,0,0,5,68,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2089,        if (xb != 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2090,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,24,7,0,2,5,0,0,0,0,34,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2092,            c = a + t;,6,1,0,0,0,0,0,0,0,8,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2093,            d = -(c - a - t);,0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2094,            a = c;,4,0,0,0,0,0,0,0,0,5,6,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2095,            b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2098,        result = a + b;,2,0,0,0,0,0,4,0,0,7,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2100,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2111,        final double pi2a = 1.5707963267948966;,2,0,0,0,0,1,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2112,        final double pi2b = 6.123233995736766E-17;,24,9,0,0,0,1,0,0,0,35,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2114,        final double a = pi2a - xa;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2115,        double b = -(a - pi2a + xa);,14,3,0,1,2,0,0,0,0,19,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2116,        b += pi2b - xb;,6,1,1,0,0,0,6,0,0,17,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2118,"        return sinQ(a, b);",0,0,0,1,2,1,6,0,0,6,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2131,        int idx = (int) ((xa * 8.0) + 0.5);,12,5,0,3,6,1,0,0,0,18,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2132,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0,0,0,1,2,0,0,0,0,3,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2135,        final double sintA = SINE_TABLE_A[idx];,2,0,1,1,2,1,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2136,        final double sintB = SINE_TABLE_B[idx];,2,0,1,1,2,1,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2137,        final double costA = COSINE_TABLE_A[idx];,2,0,1,1,2,1,0,0,0,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2138,        final double costB = COSINE_TABLE_B[idx];,2,0,1,1,2,1,0,0,0,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2141,        double sinEpsA = epsilon;,4,0,0,0,0,0,0,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2142,        double sinEpsB = polySine(epsilon);,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2143,        final double cosEpsA = 1.0;,6,0,0,0,0,1,0,0,0,8,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2144,        final double cosEpsB = polyCosine(epsilon);,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2147,        double temp = sinEpsA * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2148,        double temp2 = (sinEpsA + temp) - temp;,2,0,0,1,2,0,6,0,0,8,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2149,        sinEpsB +=  sinEpsA - temp2;,24,7,0,0,0,1,4,0,0,38,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2150,        sinEpsA = temp2;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2175,        double a = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2176,        double b = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2179,        double t = sintA;,4,2,0,0,0,0,4,0,0,10,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2180,        double c = a + t;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2181,        double d = -(c - a - t);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2182,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2183,        b = b + d;,12,3,0,0,0,0,4,0,0,20,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2185,        t = costA*sinEpsA;,14,4,0,0,0,1,4,0,0,24,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2186,        c = a + t;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2187,        d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2188,        a = c;,10,1,0,0,0,1,0,0,0,13,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2189,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2191,        b = b + sintA*cosEpsB + costA*sinEpsB;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2192,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,6,0,0,0,0,1,0,0,0,7,62,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2194,        double sina = a + b;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2195,        double sinb = -(sina - a - b);,16,4,0,1,2,1,0,0,0,22,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2199,        a = b = c = d = 0.0;,16,2,0,0,0,0,0,0,0,23,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2201,        t = costA*cosEpsA;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2202,        c = a + t;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2203,        d = -(c - a - t);,22,4,0,1,2,0,0,0,0,31,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2204,        a = c;,10,0,0,0,0,1,0,0,0,12,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2205,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2207,        t = -sintA*sinEpsA;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2208,        c = a + t;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2209,        d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2210,        a = c;,6,0,0,0,0,0,0,0,0,7,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2211,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2213,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,16,6,0,0,0,0,0,0,0,23,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2214,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,12,2,0,1,2,1,0,2,0,17,56,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2216,        double cosa = a + b;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2217,        double cosb = -(cosa - a - b);,8,1,0,1,2,0,0,0,0,10,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2219,        if (cotanFlag) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2221,            tmp = cosa; cosa = sina; sina = tmp;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2222,            tmp = cosb; cosb = sinb; sinb = tmp;,12,0,0,0,0,0,0,0,0,15,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2236,        double est = sina/cosa;,4,0,0,0,0,0,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2239,        temp = est * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2240,        double esta = (est + temp) - temp;,8,2,0,1,2,0,0,0,0,10,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2241,        double estb =  est - esta;,6,1,0,0,0,0,0,0,0,7,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2243,        temp = cosa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2244,        double cosaa = (cosa + temp) - temp;,10,2,0,1,2,0,0,0,0,12,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2245,        double cosab =  cosa - cosaa;,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2248,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,0,0,0,1,2,0,0,0,0,3,114,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2249,        err += sinb/cosa;                     // Change in est due to sinb,6,1,0,0,0,0,0,0,0,8,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2250,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,0,0,0,0,0,0,0,0,0,0,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2252,        if (xb != 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2255,            double xbadj = xb + est*est*xb;,10,2,0,0,0,0,0,0,0,12,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2256,            if (cotanFlag) {,4,0,0,1,3,0,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2257,                xbadj = -xbadj;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2260,            err += xbadj;,4,0,0,0,0,0,0,0,0,5,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2263,        return est+err;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2280,        long inbits = Double.doubleToLongBits(x);,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2281,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,4,3,0,3,6,0,0,0,0,7,53,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2284,        inbits &= 0x000fffffffffffffL;,6,0,0,0,0,0,0,0,0,9,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2285,        inbits |= 0x0010000000000000L;,2,0,0,0,0,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2288,        exponent++;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2289,        inbits <<= 11;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2295,        int idx = exponent >> 6;,4,1,0,0,0,0,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2296,        int shift = exponent - (idx << 6);,14,4,0,1,2,1,0,0,0,19,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2298,        if (shift != 0) {,4,1,0,1,3,0,0,0,0,5,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2299,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,0,0,0,3,6,0,0,0,0,9,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2300,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,12,4,1,2,4,0,12,0,0,35,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2301,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,18,6,1,5,10,0,0,0,0,32,70,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2302,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,8,2,0,5,10,1,0,0,0,11,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2304,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,0,0,0,2,4,0,0,0,0,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2305,            shpiA = RECIP_2PI[idx];,2,0,1,1,2,0,0,0,0,7,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2306,            shpiB = RECIP_2PI[idx+1];,4,1,1,1,2,0,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2310,        long a = inbits >>> 32;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2311,        long b = inbits & 0xffffffffL;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2313,        long c = shpiA >>> 32;,14,3,0,0,0,0,4,0,0,22,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2314,        long d = shpiA & 0xffffffffL;,4,1,0,0,0,0,0,0,0,5,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2316,        long ac = a * c;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2317,        long bd = b * d;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2318,        long bc = b * c;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2319,        long ad = a * d;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2321,        long prodB = bd + (ad << 32);,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2322,        long prodA = ac + (ad >>> 32);,10,4,0,1,2,0,0,0,0,14,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2324,        boolean bita = (bd & 0x8000000000000000L) != 0;,8,3,1,1,2,1,0,0,0,16,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2325,        boolean bitb = (ad & 0x80000000L ) != 0;,0,0,0,1,2,0,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2326,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,6,2,0,1,2,0,0,0,0,8,52,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2329,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2331,            prodA++;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2334,        bita = (prodB & 0x8000000000000000L) != 0;,6,2,0,1,2,0,0,2,0,11,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2335,        bitb = (bc & 0x80000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2337,        prodB = prodB + (bc << 32);,6,2,0,1,2,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2338,        prodA = prodA + (bc >>> 32);,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2340,        bitsum = (prodB & 0x8000000000000000L) != 0;,6,0,0,1,2,0,8,4,0,19,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2343,        if ( (bita && bitb) ||,4,2,0,1,3,0,10,0,0,17,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2345,            prodA++;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2349,        c = shpiB >>> 32;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2350,        d = shpiB & 0xffffffffL;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2351,        ac = a * c;,2,1,0,0,0,0,0,0,0,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2352,        bc = b * c;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2353,        ad = a * d;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2356,        ac = ac + ((bc + ad) >>> 32);,0,0,0,2,4,0,0,0,0,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2358,        bita = (prodB & 0x8000000000000000L) != 0;,6,2,0,1,2,0,6,0,0,15,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2359,        bitb = (ac & 0x8000000000000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2360,        prodB += ac;,4,0,0,0,0,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2361,        bitsum = (prodB & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2363,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2365,            prodA++;,2,1,0,0,0,0,0,0,0,3,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2369,        c = shpi0 >>> 32;,4,1,0,0,0,0,0,0,0,6,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2370,        d = shpi0 & 0xffffffffL;,8,1,0,0,0,0,0,0,0,9,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2372,        bd = b * d;,12,1,0,0,0,0,0,2,0,16,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2373,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2374,        ad = a * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2376,        prodA += bd + ((bc + ad) << 32);,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2388,        int intPart = (int)(prodA >>> 62);,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2391,        prodA <<= 2;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2392,        prodA |= prodB >>> 62;,26,8,1,0,0,0,0,0,0,40,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2393,        prodB <<= 2;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2396,        a = prodA >>> 32;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2397,        b = prodA & 0xffffffffL;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2399,        c = PI_O_4_BITS[0] >>> 32;,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2400,        d = PI_O_4_BITS[0] & 0xffffffffL;,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2402,        ac = a * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2403,        bd = b * d;,10,2,0,0,0,0,0,0,0,13,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2404,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2405,        ad = a * d;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2407,        long prod2B = bd + (ad << 32);,11,5,0,1,2,0,0,0,0,17,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2408,        long prod2A = ac + (ad >>> 32);,8,3,0,1,2,0,0,0,0,11,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2410,        bita = (bd & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2411,        bitb = (ad & 0x80000000L ) != 0;,2,1,0,1,2,0,0,0,0,3,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2412,        bitsum = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2415,        if ( (bita && bitb) ||,2,0,1,1,3,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2417,            prod2A++;,2,0,0,0,0,0,0,0,0,3,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2420,        bita = (prod2B & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2421,        bitb = (bc & 0x80000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2423,        prod2B = prod2B + (bc << 32);,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2424,        prod2A = prod2A + (bc >>> 32);,6,2,0,1,2,0,0,0,0,9,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2426,        bitsum = (prod2B & 0x8000000000000000L) != 0;,2,1,1,1,2,0,0,0,0,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2429,        if ( (bita && bitb) ||,6,2,0,1,3,2,0,0,0,10,22,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2431,            prod2A++;,2,0,0,0,0,0,0,0,0,3,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2435,        c = PI_O_4_BITS[1] >>> 32;,2,1,1,1,2,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2436,        d = PI_O_4_BITS[1] & 0xffffffffL;,6,1,0,1,2,0,0,0,0,8,33,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2437,        ac = a * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2438,        bc = b * c;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2439,        ad = a * d;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2442,        ac = ac + ((bc + ad) >>> 32);,0,0,0,2,4,0,0,0,0,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2444,        bita = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2445,        bitb = (ac & 0x8000000000000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2446,        prod2B += ac;,6,0,0,0,0,0,0,0,0,7,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2447,        bitsum = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2449,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2451,            prod2A++;,2,0,0,0,0,0,0,0,0,3,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2455,        a = prodB >>> 32;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2456,        b = prodB & 0xffffffffL;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2457,        c = PI_O_4_BITS[0] >>> 32;,6,1,1,1,2,0,0,0,0,11,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2458,        d = PI_O_4_BITS[0] & 0xffffffffL;,2,1,1,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2459,        ac = a * c;,8,1,0,0,0,0,4,0,0,14,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2460,        bc = b * c;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2461,        ad = a * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2464,        ac = ac + ((bc + ad) >>> 32);,8,3,0,2,4,0,0,0,0,12,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2466,        bita = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2467,        bitb = (ac & 0x8000000000000000L ) != 0;,0,0,0,1,2,0,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2468,        prod2B += ac;,4,0,0,0,0,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2469,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2471,        if ( (bita && bitb) ||,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2473,            prod2A++;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2477,        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits,6,2,0,1,2,0,0,0,0,8,68,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2478,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits,2,0,0,4,8,1,6,2,0,11,102,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2480,        double sumA = tmpA + tmpB;,8,2,0,0,0,0,0,0,0,10,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2481,        double sumB = -(sumA - tmpA - tmpB);,8,1,0,1,2,0,0,0,0,10,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2484,        result[0] = intPart;,2,0,1,1,2,0,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2485,        result[1] = sumA * 2.0;,2,1,1,1,2,0,0,0,0,6,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2486,        result[2] = sumB * 2.0;,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2487,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2495,        boolean negative = false;,4,1,0,0,0,0,0,0,0,6,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2496,        int quadrant = 0;,6,1,0,0,0,1,0,0,0,8,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2498,        double xb = 0.0;,6,0,0,0,0,0,0,0,0,6,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2501,        xa = x;,8,1,0,0,0,0,0,0,0,11,7,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2502,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2503,            negative = true;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2504,            xa = -xa;,6,1,0,0,0,0,0,0,0,9,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2508,        if (xa == 0.0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2509,            long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2510,            if (bits < 0) {,2,1,0,1,3,0,0,0,0,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2511,                return -0.0;,0,0,0,0,0,1,0,0,0,1,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2513,            return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2516,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,0,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2517,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2521,        if (xa > 3294198.0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2525,            double reduceResults[] = new double[3];,4,0,1,2,4,1,0,0,0,9,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2526,"            reducePayneHanek(xa, reduceResults);",6,2,0,1,2,0,22,0,0,31,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2527,            quadrant = ((int) reduceResults[0]) & 3;,2,1,1,3,6,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2528,            xa = reduceResults[1];,14,1,1,1,2,0,8,0,0,28,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2529,            xb = reduceResults[2];,2,0,0,1,2,0,0,2,0,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2530,        } else if (xa > 1.5707963267948966) {,4,2,0,1,4,0,0,0,0,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2535,            int k = (int)(xa * 0.6366197723675814);,0,0,0,2,4,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2541,                double a = -k * 1.570796251296997;,4,1,0,0,0,0,0,0,0,6,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2542,                remA = xa + a;,6,1,0,0,0,0,0,0,0,8,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2543,                remB = -(remA - xa - a);,4,1,1,1,2,0,4,0,0,11,24,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2545,                a = -k * 7.549789948768648E-8;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2546,                double b = remA;,4,0,0,0,0,0,0,0,0,4,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2547,                remA = a + b;,2,2,0,0,0,0,0,0,0,4,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2548,                remB += -(remA - b - a);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2550,                a = -k * 6.123233995736766E-17;,4,1,0,0,0,0,0,0,0,7,31,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2551,                b = remA;,4,0,0,0,0,0,0,0,0,5,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2552,                remA = a + b;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2553,                remB += -(remA - b - a);,2,0,0,1,2,0,6,0,0,8,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2555,                if (remA > 0.0),2,1,0,1,2,0,0,0,0,3,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2556,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2561,                k--;,0,0,0,0,0,0,0,0,0,0,4,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2562,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2563,            quadrant = k & 3;,4,1,0,0,0,0,0,0,0,6,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2564,            xa = remA;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2565,            xb = remB;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2568,        if (negative) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2569,            quadrant ^= 2;  // Flip bit 1,4,2,0,0,0,0,0,0,0,7,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2572,        switch (quadrant) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2574,"                return sinQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2576,"                return cosQ(xa, xb);",0,0,0,1,2,1,6,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2578,"                return -sinQ(xa, xb);",0,0,0,1,2,1,6,0,0,7,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2580,"                return -cosQ(xa, xb);",0,0,0,1,2,1,6,0,0,7,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2582,                return Double.NaN;,12,2,0,0,0,1,0,0,0,16,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2592,        int quadrant = 0;,6,5,0,0,0,0,12,0,0,24,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2595,        double xa = x;,10,1,0,0,0,0,0,0,0,12,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2596,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2597,            xa = -xa;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2600,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,12,4,0,1,3,0,0,0,0,16,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2601,            return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2605,        double xb = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2606,        if (xa > 3294198.0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2610,            double reduceResults[] = new double[3];,0,0,0,2,4,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2611,"            reducePayneHanek(xa, reduceResults);",0,0,0,1,2,0,6,0,0,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2612,            quadrant = ((int) reduceResults[0]) & 3;,0,0,0,3,6,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2613,            xa = reduceResults[1];,0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2614,            xb = reduceResults[2];,8,2,1,1,2,0,4,0,0,17,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2615,        } else if (xa > 1.5707963267948966) {,2,0,1,1,4,0,0,0,0,6,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2620,            int k = (int)(xa * 0.6366197723675814);,4,1,0,2,4,0,0,0,0,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2626,                double a = -k * 1.570796251296997;,4,1,0,0,0,0,0,0,0,6,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2627,                remA = xa + a;,6,1,0,0,0,0,0,0,0,8,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2628,                remB = -(remA - xa - a);,10,3,0,1,2,0,0,0,0,15,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2630,                a = -k * 7.549789948768648E-8;,4,1,0,0,0,0,0,0,0,7,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2631,                double b = remA;,10,1,0,0,0,0,0,0,0,13,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2632,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2633,                remB += -(remA - b - a);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2635,                a = -k * 6.123233995736766E-17;,4,1,0,0,0,0,0,0,0,7,31,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2636,                b = remA;,4,0,0,0,0,0,0,0,0,5,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2637,                remA = a + b;,8,1,0,0,0,0,0,0,0,10,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2638,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2640,                if (remA > 0.0),2,1,0,1,2,0,0,0,0,4,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2641,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2646,                k--;,2,0,0,0,0,0,0,0,0,3,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2647,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2648,            quadrant = k & 3;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2649,            xa = remA;,8,2,0,0,0,0,0,0,0,11,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2650,            xb = remB;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2656,        switch (quadrant) {,2,0,0,1,3,0,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2658,"                return cosQ(xa, xb);",2,1,0,1,2,1,6,0,0,9,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2660,"                return -sinQ(xa, xb);",0,0,0,1,2,1,6,0,0,7,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2662,"                return -cosQ(xa, xb);",0,0,0,1,2,1,6,0,0,7,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2664,"                return sinQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2666,                return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2676,        boolean negative = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2677,        int quadrant = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2680,        double xa = x;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2681,        if (x < 0) {,6,1,0,1,3,0,0,0,0,8,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2682,            negative = true;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2683,            xa = -xa;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2687,        if (xa == 0.0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2688,            long bits = Double.doubleToLongBits(x);,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2689,            if (bits < 0) {,2,1,0,1,3,0,0,0,0,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2690,                return -0.0;,2,0,0,0,0,1,0,0,0,2,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2692,            return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2695,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,16,4,0,1,3,0,0,0,0,21,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2696,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2700,        double xb = 0;,8,1,0,0,0,1,0,0,0,10,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2701,        if (xa > 3294198.0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2705,            double reduceResults[] = new double[3];,2,0,0,2,4,0,0,0,0,2,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2706,"            reducePayneHanek(xa, reduceResults);",0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2707,            quadrant = ((int) reduceResults[0]) & 3;,4,1,1,3,6,0,0,0,0,8,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2708,            xa = reduceResults[1];,0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2709,            xb = reduceResults[2];,12,1,1,1,2,0,0,0,0,20,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2710,        } else if (xa > 1.5707963267948966) {,2,1,0,1,4,0,0,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2715,            int k = (int)(xa * 0.6366197723675814);,0,0,0,2,4,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2721,                double a = -k * 1.570796251296997;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2722,                remA = xa + a;,8,1,0,0,0,0,4,0,0,14,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2723,                remB = -(remA - xa - a);,16,2,0,1,2,0,0,0,0,21,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2725,                a = -k * 7.549789948768648E-8;,4,1,0,0,0,0,0,0,0,7,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2726,                double b = remA;,12,1,0,0,0,0,0,0,0,15,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2727,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2728,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2730,                a = -k * 6.123233995736766E-17;,4,1,0,0,0,0,0,0,0,7,31,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2731,                b = remA;,4,0,0,0,0,0,0,0,0,5,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2732,                remA = a + b;,6,1,0,0,0,0,4,0,0,13,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2733,                remB += -(remA - b - a);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2735,                if (remA > 0.0),2,1,0,1,2,0,0,0,0,3,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2736,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2741,                k--;,2,0,0,0,0,0,0,0,0,3,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2742,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2743,            quadrant = k & 3;,10,5,1,0,0,0,0,0,0,22,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2744,            xa = remA;,2,0,0,0,0,1,6,0,0,9,10,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2745,            xb = remB;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2748,        if (xa > 1.5) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2750,            final double pi2a = 1.5707963267948966;,0,0,0,0,0,0,0,0,0,0,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2751,            final double pi2b = 6.123233995736766E-17;,2,0,0,0,0,1,0,0,0,3,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2753,            final double a = pi2a - xa;,6,1,0,0,0,1,0,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2754,            double b = -(a - pi2a + xa);,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2755,            b += pi2b - xb;,10,1,0,0,0,0,0,0,0,12,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2757,            xa = a + b;,0,1,0,0,0,0,12,0,0,13,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2758,            xb = -(xa - a - b);,8,1,0,1,2,0,0,0,0,11,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2759,            quadrant ^= 1;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2760,            negative ^= true;,2,0,0,0,0,0,0,0,0,4,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2764,        if ((quadrant & 1) == 0) {,10,4,0,2,5,0,0,0,0,14,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2765,"            result = tanQ(xa, xb, false);",2,0,0,1,2,0,6,0,0,10,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2767,"            result = -tanQ(xa, xb, true);",8,1,0,1,2,0,6,0,0,19,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2770,        if (negative) {,2,0,0,1,3,0,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2771,            result = -result;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2774,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2783,"        return atan(x, 0.0, false);",6,1,0,1,2,1,4,0,0,13,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2793,        boolean negate = false;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2796,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,4,1,1,1,3,2,0,0,0,10,56,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2797,"            return leftPlane ? copySign(Math.PI, xa) : xa;",0,0,0,1,2,1,0,0,0,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2800,        if (xa < 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2802,            xa = -xa;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2803,            xb = -xb;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2804,            negate = true;,2,0,0,0,0,0,0,0,0,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2807,        if (xa > 1.633123935319537E16) { // Very large input,6,2,0,1,3,0,0,0,0,8,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2808,            return (negate ^ leftPlane) ? (-Math.PI/2.0) : (Math.PI/2.0);,12,3,0,3,6,1,0,0,0,16,61,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2812,        if (xa < 1.0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2813,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,12,4,0,4,8,0,0,0,0,19,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2815,            double temp = 1.0/xa;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2816,            idx = (int) (-((-1.7168146928204136 * temp * temp + 8.0) * temp) + 13.07);,8,4,0,4,8,0,0,0,0,15,74,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2818,        double epsA = xa - TANGENT_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2819,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,0,0,0,2,4,0,0,0,0,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2820,        epsB += xb - TANGENT_TABLE_B[idx];,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2822,        double temp = epsA + epsB;,6,1,0,0,0,0,0,0,0,7,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2823,        epsB = -(temp - epsA - epsB);,8,1,0,1,2,0,0,0,0,11,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2824,        epsA = temp;,6,0,0,0,0,0,6,0,0,13,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2827,        temp = xa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2828,        double ya = xa + temp - temp;,16,3,0,0,0,0,0,0,0,20,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2829,        double yb = xb + xa - ya;,12,2,0,0,0,0,0,0,0,16,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2830,        xa = ya;,6,1,0,0,0,0,0,0,0,7,8,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2831,        xb += yb;,6,0,0,0,0,1,6,0,0,15,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2834,        if (idx == 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2837,            double denom = 1.0 / (1.0 + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,12,6,1,5,10,0,0,0,0,27,87,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2839,            ya = epsA * denom;,6,1,0,0,0,0,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2840,            yb = epsB * denom;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2841,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2842,            double temp2 = xa * TANGENT_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2843,            double za = 1.0 + temp2;,20,2,0,0,0,0,0,0,0,27,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2844,            double zb = -(za - 1.0 - temp2);,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2845,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,6,3,1,2,4,0,0,0,0,18,62,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2846,            temp = za + temp2;,6,1,0,0,0,0,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2847,            zb += -(temp - za - temp2);,8,1,1,1,2,0,0,0,0,16,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2848,            za = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2850,            zb += xb * TANGENT_TABLE_B[idx];,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2851,            ya = epsA / za;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2853,            temp = ya * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2854,            final double yaa = (ya + temp) - temp;,0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2855,            final double yab = ya - yaa;,2,0,0,0,0,0,0,0,0,2,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2857,            temp = za * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2858,            final double zaa = (za + temp) - temp;,0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2859,            final double zab = za - zaa;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2862,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,22,9,0,1,2,0,0,0,0,32,65,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2864,            yb += -epsA * zb / za / za;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2865,            yb += epsB / za;,6,1,0,0,0,0,0,0,0,8,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2869,        epsA = ya;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2870,        epsB = yb;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2873,        double epsA2 = epsA*epsA;,8,1,0,0,0,0,4,0,0,14,25,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2884,        yb = 0.07490822288864472;,8,1,0,0,0,2,0,0,0,11,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2885,        yb = yb * epsA2 + -0.09088450866185192;,0,0,0,0,0,0,0,0,0,0,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2886,        yb = yb * epsA2 + 0.11111095942313305;,10,3,0,0,0,0,0,0,0,15,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2887,        yb = yb * epsA2 + -0.1428571423679182;,6,2,0,0,0,0,0,0,0,10,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2888,        yb = yb * epsA2 + 0.19999999999923582;,4,1,0,0,0,0,0,0,0,7,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2889,        yb = yb * epsA2 + -0.33333333333333287;,0,0,0,0,0,0,0,0,0,0,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2890,        yb = yb * epsA2 * epsA;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2893,        ya = epsA;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2895,        temp = ya + yb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2896,        yb = -(temp - ya - yb);,8,1,0,1,2,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2897,        ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2900,        yb += epsB / (1.0 + epsA * epsA);,14,5,0,1,2,1,10,0,0,31,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2906,        double za = EIGHTHS[idx] + ya;,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2907,        double zb = -(za - EIGHTHS[idx] - ya);,6,1,1,2,4,0,0,0,0,12,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2908,        temp = za + yb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2909,        zb += -(temp - za - yb);,8,1,0,1,2,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2910,        za = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2912,        result = za + zb;,6,1,0,0,0,0,0,0,0,8,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2913,        resultb = -(result - za - zb);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2915,        if (leftPlane) {,4,1,0,1,3,0,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2917,            final double pia = 1.5707963267948966*2.0;,14,9,0,0,0,1,6,0,0,30,42,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2918,            final double pib = 6.123233995736766E-17*2.0;,2,1,0,0,0,1,0,0,0,4,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2920,            za = pia - result;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2921,            zb = -(za - pia + result);,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2922,            zb += pib - resultb;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2924,            result = za + zb;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2925,            resultb = -(result - za - zb);,16,4,0,1,2,0,8,0,0,30,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2929,        if (negate ^ leftPlane) {,4,1,0,1,3,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2930,            result = -result;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2933,        return result;,12,1,0,0,0,1,0,0,0,14,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2943,        if (x !=x || y != y) {,8,3,0,1,3,0,0,0,0,11,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2944,            return Double.NaN;,6,1,0,0,0,1,4,0,0,11,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2947,        if (y == 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2948,            double result = x*y;,6,1,0,0,0,0,0,0,0,7,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2949,            double invx = 1.0/x;,4,1,0,0,0,0,6,0,0,11,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2950,            double invy = 1.0/y;,10,4,0,0,0,0,10,2,0,26,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2952,            if (invx == 0.0) { // X is infinite,2,1,0,1,3,0,0,0,0,3,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2953,                if (x > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2954,                    return y; // return +/- 0.0,6,0,0,0,0,2,0,0,0,7,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2956,"                    return copySign(Math.PI, y);",0,0,0,1,2,1,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2960,            if (x < 0.0 || invx < 0.0) {,0,0,0,1,3,0,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2961,                if (y < 0.0 || invy < 0.0) {,4,3,0,1,3,0,0,0,0,7,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2962,                    return -Math.PI;,14,3,0,0,0,2,2,0,0,21,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2964,                    return Math.PI;,6,2,0,0,0,1,0,0,0,8,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2967,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2973,        if (y == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2974,            if (x == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2975,                return Math.PI/4.0;,4,1,0,0,0,1,0,0,0,5,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2978,            if (x == Double.NEGATIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2979,                return Math.PI*3.0/4.0;,4,2,0,0,0,1,0,0,0,6,23,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2982,            return Math.PI/2.0;,4,1,0,0,0,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2985,        if (y == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2986,            if (x == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2987,                return -Math.PI/4.0;,4,1,0,0,0,1,0,0,0,6,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2990,            if (x == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2991,                return -Math.PI*3.0/4.0;,8,2,0,0,0,1,0,0,0,11,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2994,            return -Math.PI/2.0;,4,1,0,0,0,1,0,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2997,        if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2998,            if (y > 0.0 || 1/y > 0.0) {,14,5,0,1,3,0,0,0,0,20,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2999,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3002,            if (y < 0.0 || 1/y < 0.0) {,4,4,0,1,3,0,0,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3003,                return -0.0;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3007,        if (x == Double.NEGATIVE_INFINITY),6,1,0,1,2,0,0,0,0,7,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3009,            if (y > 0.0 || 1/y > 0.0) {,4,4,0,1,3,0,0,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3010,                return Math.PI;,4,0,0,0,0,1,0,0,0,4,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3013,            if (y < 0.0 || 1/y < 0.0) {,4,4,0,1,3,0,0,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3014,                return -Math.PI;,12,0,0,0,0,1,0,2,0,15,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3020,        if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3021,            if (y > 0.0 || 1/y > 0.0) {,2,0,0,1,3,0,0,0,0,2,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3022,                return Math.PI/2.0;,0,0,0,0,0,1,0,0,0,1,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3025,            if (y < 0.0 || 1/y < 0.0) {,4,4,0,1,3,0,0,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3026,                return -Math.PI/2.0;,4,1,0,0,0,1,0,0,0,6,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3031,        final double r = y/x;,16,4,0,0,0,0,0,0,0,20,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3032,        if (Double.isInfinite(r)) { // bypass calculations that can create NaN,0,0,0,2,5,0,6,0,0,6,70,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3033,"            return atan(r, 0, x < 0);",2,1,0,1,2,1,4,0,0,7,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3036,        double ra = doubleHighPart(r);,8,2,0,1,2,0,0,0,0,10,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3037,        double rb = r - ra;,6,1,0,0,0,0,0,0,0,7,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3040,        final double xa = doubleHighPart(x);,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3041,        final double xb = x - xa;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3043,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,0,0,0,1,2,0,0,0,0,3,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3045,        double temp = ra + rb;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3046,        rb = -(temp - ra - rb);,16,2,0,1,2,2,8,0,0,30,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3047,        ra = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3049,        if (ra == 0) { // Fix up the sign so atan works correctly,0,0,0,1,3,0,0,0,0,4,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3050,"            ra = copySign(0.0, y);",2,0,0,1,2,0,4,0,0,7,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3054,"        double result = atan(ra, rb, x < 0);",6,1,0,1,2,1,14,2,0,25,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3056,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3064,      if (x != x) {,6,1,0,1,3,0,0,0,0,7,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3065,          return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3068,      if (x > 1.0 || x < -1.0) {,4,3,0,1,3,0,0,0,0,8,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3069,          return Double.NaN;,8,0,0,0,0,1,0,0,0,8,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3072,      if (x == 1.0) {,8,1,0,1,3,1,6,0,0,17,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3073,          return Math.PI/2.0;,0,0,0,0,0,1,0,0,0,1,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3076,      if (x == -1.0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3077,          return -Math.PI/2.0;,8,1,0,0,0,1,0,0,0,10,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3080,      if (x == 0.0) { // Matches +/- 0.0; return correct sign,0,0,0,1,3,1,0,0,0,5,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3081,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3087,      double temp = x * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3088,      final double xa = x + temp - temp;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3089,      final double xb = x - xa;,6,1,0,0,0,1,0,0,0,8,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3092,      double ya = xa*xa;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3093,      double yb = xa*xb*2.0 + xb*xb;,10,3,0,0,0,0,0,0,0,13,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3096,      ya = -ya;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3097,      yb = -yb;,4,0,0,0,0,0,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3099,      double za = 1.0 + ya;,4,1,0,0,0,0,0,0,0,5,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3100,      double zb = -(za - 1.0 - ya);,6,1,0,1,2,0,0,0,0,8,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3102,      temp = za + yb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3103,      zb += -(temp - za - yb);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3104,      za = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3108,      y = sqrt(za);,0,0,0,1,2,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3109,      temp = y * HEX_40000000;,12,2,0,0,0,0,0,0,0,16,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3110,      ya = y + temp - temp;,4,2,0,0,0,0,4,0,0,10,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3111,      yb = y - ya;,6,1,0,0,0,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3114,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,20,8,0,2,4,0,0,0,0,29,47,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3117,      double dx = zb / (2.0*y);,12,3,0,1,2,0,0,0,0,16,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3120,      double r = x/y;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3121,      temp = r * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3122,      double ra = r + temp - temp;,8,2,0,0,0,0,0,0,0,10,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3123,      double rb = r - ra;,6,1,0,0,0,0,0,0,0,7,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3125,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,2,0,0,1,2,0,0,0,0,2,83,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3126,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,10,3,0,0,0,0,0,0,0,15,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3128,      temp = ra + rb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3129,      rb = -(temp - ra - rb);,12,5,0,1,2,0,0,0,0,19,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3130,      ra = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3132,"      return atan(ra, rb, false);",0,0,0,1,2,1,6,0,0,7,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3140,      if (x != x) {,6,1,0,1,3,0,0,0,0,7,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3141,          return Double.NaN;,6,0,0,0,0,1,0,0,0,7,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3144,      if (x > 1.0 || x < -1.0) {,0,0,0,1,3,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3145,          return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3148,      if (x == -1.0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3149,          return Math.PI;,4,0,0,0,0,1,0,0,0,4,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3152,      if (x == 1.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3153,          return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3156,      if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3157,          return Math.PI/2.0;,4,1,0,0,0,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3163,      double temp = x * HEX_40000000;,12,2,0,0,0,0,0,0,0,15,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3164,      final double xa = x + temp - temp;,8,2,0,0,0,1,0,0,0,11,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3165,      final double xb = x - xa;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3168,      double ya = xa*xa;,6,1,0,0,0,0,0,0,0,7,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3169,      double yb = xa*xb*2.0 + xb*xb;,18,4,0,0,0,0,0,0,0,23,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3172,      ya = -ya;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3173,      yb = -yb;,4,0,0,0,0,0,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3175,      double za = 1.0 + ya;,2,0,0,0,0,0,0,0,0,4,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3176,      double zb = -(za - 1.0 - ya);,2,0,0,1,2,0,0,0,0,2,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3178,      temp = za + yb;,16,2,0,0,0,0,0,0,0,20,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3179,      zb += -(temp - za - yb);,8,1,0,1,2,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3180,      za = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3183,      double y = sqrt(za);,2,0,0,1,2,0,4,0,0,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3184,      temp = y * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3185,      ya = y + temp - temp;,8,2,0,0,0,0,0,0,0,11,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3186,      yb = y - ya;,16,3,0,0,0,0,0,0,0,21,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3189,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,18,8,0,2,4,0,0,0,0,27,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3192,      yb += zb / (2.0*y);,0,0,0,1,2,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3193,      y = ya+yb;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3194,      yb = -(y - ya - yb);,10,4,0,1,2,0,8,0,0,22,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3197,      double r = y/x;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3200,      if (Double.isInfinite(r)) { // x is effectively zero,0,0,0,2,5,0,6,0,0,6,52,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3201,          return Math.PI/2; // so return the appropriate value,2,0,0,0,0,2,0,0,0,2,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3204,      double ra = doubleHighPart(r);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3205,      double rb = r - ra;,10,1,0,0,0,0,0,0,0,12,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3207,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,24,9,0,1,2,0,4,0,0,39,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3208,      rb += yb / x;  // Add in effect additional bits of sqrt.,0,0,0,0,0,0,0,0,0,0,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3210,      temp = ra + rb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3211,      rb = -(temp - ra - rb);,10,1,0,1,2,0,0,0,0,13,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3212,      ra = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3214,"      return atan(ra, rb, x<0);",0,0,0,1,2,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3223,      long inbits = Double.doubleToLongBits(x);,6,1,0,1,2,0,0,0,0,7,41,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3224,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0,0,0,3,6,0,0,0,0,9,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3225,      boolean subnormal = false;,0,0,0,0,0,0,0,0,0,0,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3227,      if (exponent == -1023) {,6,3,0,1,3,0,0,0,0,10,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3228,          if (x == 0) {,6,1,0,1,3,0,0,0,0,8,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3229,              return x;,2,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3233,          subnormal = true;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3234,          x *= 1.8014398509481984E16;  // 2^54,2,0,0,0,0,0,0,0,0,3,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3235,          inbits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,9,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3236,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,6,1,0,3,6,0,0,0,0,7,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3239,      if (exponent == 1024) {,0,0,0,1,3,0,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3241,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3245,      int exp3 = exponent / 3;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3248,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,4,2,0,1,3,0,4,0,0,10,68,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3252,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,4,2,0,2,4,1,4,0,0,11,98,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3255,      double est = -0.010714690733195933;,2,0,0,0,0,0,0,0,0,3,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3256,      est = est * mant + 0.0875862700108075;,2,0,0,0,0,1,4,0,0,7,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3257,      est = est * mant + -0.3058015757857271;,0,0,0,0,0,0,0,0,0,0,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3258,      est = est * mant + 0.7249995199969751;,12,3,0,0,0,0,0,0,0,18,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3259,      est = est * mant + 0.5039018405998233;,10,2,0,0,0,0,0,0,0,14,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3261,      est *= CBRTTWO[exponent % 3 + 2];,8,2,1,1,2,0,0,0,0,14,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3266,      final double xs = x / (p2*p2*p2);,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3267,      est += (xs - est*est*est) / (3*est*est);,0,0,0,2,4,0,0,0,0,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3268,      est += (xs - est*est*est) / (3*est*est);,2,0,0,2,4,0,4,0,0,6,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3271,      double temp = est * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3272,      double ya = est + temp - temp;,10,2,0,0,0,0,0,0,0,13,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3273,      double yb = est - ya;,6,1,0,0,0,0,0,0,0,7,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3275,      double za = ya * ya;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3276,      double zb = ya * yb * 2.0 + yb * yb;,16,6,0,0,0,0,0,0,0,22,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3277,      temp = za * HEX_40000000;,20,5,1,0,0,0,0,0,0,33,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3278,      double temp2 = za + temp - temp;,8,2,0,0,0,0,0,0,0,10,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3279,      zb += za - temp2;,2,2,0,0,0,0,0,0,0,4,17,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3280,      za = temp2;,8,1,1,0,0,0,0,0,0,13,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3282,      zb = za * yb + ya * zb + zb * yb;,14,5,0,0,0,0,0,0,0,20,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3283,      za = za * ya;,6,1,0,0,0,0,0,0,0,8,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3285,      double na = xs - za;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3286,      double nb = -(na - xs + za);,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3287,      nb -= zb;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3289,      est += (na+nb)/(3*est*est);,10,3,0,2,4,0,0,0,0,14,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3292,      est *= p2;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3294,      if (subnormal) {,4,0,0,1,3,0,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3295,          est *= 3.814697265625E-6;  // 2^-18,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3298,      return est;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3308,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,2,2,0,2,5,1,6,0,0,10,79,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3309,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3313,        final double facta = 0.01745329052209854;,2,0,0,0,0,1,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3314,        final double factb = 1.997844754509471E-9;,2,0,0,0,0,1,8,0,0,11,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3316,        double xa = doubleHighPart(x);,2,0,0,1,2,0,4,0,0,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3317,        double xb = x - xa;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3319,        double result = xb * factb + xb * facta + xa * factb + xa * facta;,18,7,0,0,0,0,0,0,0,25,66,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3320,        if (result == 0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3321,            result = result * x; // ensure correct sign if calculation underflows,2,0,0,0,0,1,6,2,0,11,69,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3323,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3333,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0,0,0,2,5,1,0,0,0,8,79,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3334,            return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3338,        final double facta = 57.2957763671875;,2,0,0,0,0,1,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3339,        final double factb = 3.145894820876798E-6;,4,0,0,0,0,0,0,0,0,4,42,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3341,        double xa = doubleHighPart(x);,4,0,0,1,2,0,0,0,0,5,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3342,        double xb = x - xa;,16,3,0,0,0,0,0,0,0,19,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3344,        return xb * factb + xb * facta + xa * factb + xa * facta;,20,9,0,0,0,1,8,0,0,37,57,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3353,        return (x < 0) ? -x : x;,0,0,0,1,2,1,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3362,        return (x < 0l) ? -x : x;,10,3,0,1,2,1,0,0,0,15,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3371,        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0,10,2,0,2,4,2,2,0,0,16,64,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3380,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,8,2,0,2,4,1,0,2,0,13,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3389,        if (Double.isInfinite(x)) {,0,0,0,2,5,0,6,0,0,6,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3390,            return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3392,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,4,2,0,3,6,1,16,2,0,24,72,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3401,        if (Float.isInfinite(x)) {,0,0,0,2,5,0,6,0,0,6,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3402,            return Float.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3404,        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));,0,0,0,3,6,1,0,0,0,10,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3416,        if ((n > -1023) && (n < 1024)) {,4,3,0,3,7,0,0,0,0,8,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3417,            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);,0,0,0,4,8,1,0,0,0,13,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3421,        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {,2,2,0,4,9,0,16,0,0,20,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3422,            return d;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3424,        if (n < -2098) {,12,5,1,1,3,0,4,0,0,31,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3425,            return (d > 0) ? 0.0 : -0.0;,4,1,0,1,2,1,0,0,0,7,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3427,        if (n > 2097) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3428,            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,10,1,0,1,2,1,0,0,0,11,69,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3432,        final long bits = Double.doubleToLongBits(d);,2,0,0,1,2,1,6,0,0,9,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3433,        final long sign = bits & 0x8000000000000000L;,4,1,0,0,0,1,0,0,0,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3434,        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;,6,2,0,3,6,0,0,0,0,8,48,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3435,        long mantissa   = bits & 0x000fffffffffffffL;,0,0,0,0,0,0,0,0,0,0,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3438,        int scaledExponent = exponent + n;,4,1,0,0,0,0,0,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3440,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3442,            if (scaledExponent > 0) {,6,1,0,1,3,0,0,0,0,8,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3444,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,2,0,0,4,8,1,2,0,0,4,82,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3445,            } else if (scaledExponent > -53) {,2,1,0,1,4,0,6,0,0,10,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3449,                mantissa = mantissa | (1L << 52);,20,4,0,1,2,0,4,0,0,30,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3452,                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));,6,2,0,2,4,1,0,0,0,10,73,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3453,                mantissa = mantissa >>> (1 - scaledExponent);,12,3,0,1,2,0,0,0,0,17,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3454,                if (mostSignificantLostBit != 0) {,0,0,0,1,3,0,0,0,0,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3456,                    mantissa++;,10,1,0,0,0,0,0,0,0,11,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3458,                return Double.longBitsToDouble(sign | mantissa);,4,0,0,1,2,1,0,0,0,5,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3462,                return (sign == 0L) ? 0.0 : -0.0;,2,2,0,1,2,1,3,0,0,7,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3466,            if (exponent == 0) {,2,0,0,1,3,1,0,4,0,7,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3469,                while ((mantissa >>> 52) != 1) {,0,0,0,2,5,0,0,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3470,                    mantissa = mantissa << 1;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3471,                    --scaledExponent;,2,0,0,0,0,0,0,0,0,3,17,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3473,                ++scaledExponent;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3474,                mantissa = mantissa & 0x000fffffffffffffL;,2,0,0,0,0,0,4,0,0,7,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3476,                if (scaledExponent < 2047) {,2,1,0,1,3,0,0,0,0,3,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3477,                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0,0,0,4,8,1,0,0,0,13,82,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3479,                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0,0,0,1,2,1,0,0,0,4,74,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3482,            } else if (scaledExponent < 2047) {,4,2,0,1,4,0,0,0,0,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3483,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,6,2,0,4,8,1,4,0,0,12,82,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3485,                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0,0,0,1,2,1,0,0,0,4,74,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3500,        if ((n > -127) && (n < 128)) {,0,0,0,3,7,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3501,            return f * Float.intBitsToFloat((n + 127) << 23);,4,3,0,2,4,1,4,0,0,11,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3505,        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {,0,0,0,4,9,0,0,0,0,13,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3506,            return f;,8,4,0,0,0,2,0,0,0,13,9,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3508,        if (n < -277) {,2,1,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3509,            return (f > 0) ? 0.0f : -0.0f;,10,2,0,1,2,1,0,0,0,14,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3511,        if (n > 276) {,4,1,0,1,3,0,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3512,            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,12,2,0,1,2,1,0,0,0,14,67,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3516,        final int bits = Float.floatToIntBits(f);,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3517,        final int sign = bits & 0x80000000;,4,1,0,0,0,1,0,0,0,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3518,        int  exponent  = (bits >>> 23) & 0xff;,4,2,0,1,2,0,0,0,0,6,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3519,        int mantissa   = bits & 0x007fffff;,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3522,        int scaledExponent = exponent + n;,2,0,0,0,0,0,0,0,0,2,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3524,        if (n < 0) {,4,0,0,1,3,0,0,0,0,4,12,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3526,            if (scaledExponent > 0) {,10,1,0,1,3,1,14,0,0,27,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3528,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0,0,0,2,4,1,0,0,0,7,70,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3529,            } else if (scaledExponent > -24) {,6,3,0,1,4,0,0,0,0,9,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3533,                mantissa = mantissa | (1 << 23);,4,2,0,1,2,0,0,0,0,7,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3536,                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));,0,0,0,2,4,0,0,0,0,6,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3537,                mantissa = mantissa >>> (1 - scaledExponent);,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3538,                if (mostSignificantLostBit != 0) {,0,0,0,1,3,0,0,0,0,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3540,                    mantissa++;,8,1,0,0,0,0,0,0,0,10,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3542,                return Float.intBitsToFloat(sign | mantissa);,0,0,0,1,2,1,4,0,0,4,45,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3546,                return (sign == 0) ? 0.0f : -0.0f;,2,1,0,1,2,1,0,0,0,4,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3550,            if (exponent == 0) {,14,1,0,1,3,0,6,0,0,21,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3553,                while ((mantissa >>> 23) != 1) {,2,2,0,2,5,0,0,0,0,4,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3554,                    mantissa = mantissa << 1;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3555,                    --scaledExponent;,2,0,0,0,0,0,0,0,0,3,17,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3557,                ++scaledExponent;,6,2,0,0,0,1,0,0,0,9,17,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3558,                mantissa = mantissa & 0x007fffff;,4,1,0,0,0,0,0,0,0,6,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3560,                if (scaledExponent < 255) {,0,0,0,1,3,0,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3561,                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,14,3,0,2,4,1,4,0,0,23,70,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3563,                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,6,1,0,1,2,2,0,0,0,8,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3566,            } else if (scaledExponent < 255) {,2,1,0,1,4,0,0,0,0,3,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3567,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,6,2,0,2,4,1,4,0,0,12,70,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3569,                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,10,1,0,1,2,1,0,0,0,11,71,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3609,        if (Double.isNaN(d) || Double.isNaN(direction)) {,0,0,0,3,7,0,0,0,0,10,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3610,            return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3611,        } else if (d == direction) {,0,0,0,1,4,0,0,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3612,            return direction;,0,0,0,0,0,1,0,0,0,1,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3613,        } else if (Double.isInfinite(d)) {,2,0,0,2,6,0,6,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3614,            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;,10,1,0,1,2,1,0,0,0,12,54,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3615,        } else if (d == 0) {,8,2,0,1,4,0,0,0,0,10,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3616,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,12,2,0,1,2,1,0,0,0,15,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3621,        final long bits = Double.doubleToLongBits(d);,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3622,        final long sign = bits & 0x8000000000000000L;,0,0,0,0,0,0,0,0,0,0,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3623,        if ((direction < d) ^ (sign == 0L)) {,0,0,0,3,7,0,0,0,0,10,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3624,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));,0,0,0,3,6,1,0,0,0,10,74,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3626,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));,0,0,0,3,6,1,0,0,0,10,74,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3665,        if (Double.isNaN(f) || Double.isNaN(direction)) {,4,1,0,3,7,0,12,0,0,19,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3666,            return Float.NaN;,8,3,0,0,0,1,4,0,0,15,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3667,        } else if (f == direction) {,4,1,0,1,4,0,0,0,0,5,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3668,            return (float) direction;,2,0,0,1,2,1,0,0,0,2,25,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3669,        } else if (Float.isInfinite(f)) {,0,0,0,2,6,0,0,0,0,8,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3670,            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;,0,0,0,1,2,1,0,0,0,4,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3671,        } else if (f == 0f) {,12,4,0,1,4,0,0,0,0,16,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3672,            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;,10,1,0,1,2,1,0,0,0,12,60,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3677,        final int bits = Float.floatToIntBits(f);,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3678,        final int sign = bits & 0x80000000;,10,2,0,0,0,1,0,0,0,14,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3679,        if ((direction < f) ^ (sign == 0)) {,0,0,0,3,7,0,0,0,0,10,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3680,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));,0,0,0,3,6,1,0,0,0,10,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3682,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));,0,0,0,3,6,1,0,0,0,10,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3694,        if (x != x) { // NaN,6,1,0,1,3,0,0,0,0,7,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3695,            return x;,4,0,0,0,0,1,0,0,0,6,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3698,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,0,0,0,1,3,0,0,0,0,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3699,            return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3702,        y = (long) x;,0,0,0,1,2,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3703,        if (x < 0 && y != x) {,6,1,0,1,3,0,0,0,0,7,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3704,            y--;,2,0,0,0,0,0,12,0,0,15,4,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3707,        if (y == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3708,            return x*y;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3711,        return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3721,        if (x != x) { // NaN,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3722,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3725,        y = floor(x);,2,0,0,1,2,0,4,0,0,7,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3726,        if (y == x) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3727,            return y;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3730,        y += 1.0;,2,0,0,0,0,0,0,0,0,3,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3732,        if (y == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3733,            return x*y;,4,1,0,0,0,1,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3736,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3744,        double y = floor(x);,2,0,0,1,2,0,4,0,0,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3745,        double d = x - y;,6,1,0,0,0,0,0,0,0,7,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3747,        if (d > 0.5) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3748,            if (y == -1.0) {,4,1,0,1,3,0,0,0,0,5,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3749,                return -0.0; // Preserve sign of operand,0,0,0,0,0,1,0,0,0,1,40,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3751,            return y+1.0;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3753,        if (d < 0.5) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3754,            return y;,6,1,0,0,0,1,0,0,0,9,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3758,        long z = (long) y;,0,0,0,1,2,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3759,        return (z & 1) == 0 ? y : y + 1.0;,0,0,0,1,2,1,0,0,0,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3767,        return (long) floor(x + 0.5);,2,0,0,2,4,1,0,0,0,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3775,        return (int) floor(x + 0.5f);,10,3,0,2,4,1,14,0,0,27,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3784,        return (a <= b) ? a : b;,8,1,0,1,2,1,0,0,0,9,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3793,        return (a <= b) ? a : b;,8,1,0,1,2,1,0,0,0,9,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3802,        if (a > b) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3803,            return b;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3805,        if (a < b) {,8,1,0,1,3,0,6,0,0,15,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3806,            return a;,2,0,0,0,0,1,10,0,0,12,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3809,        if (a != b) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3810,            return Float.NaN;,4,0,0,0,0,1,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3814,        int bits = Float.floatToRawIntBits(a);,0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3815,        if (bits == 0x80000000) {,4,1,1,1,3,0,0,0,0,8,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3816,            return a;,6,0,0,0,0,1,0,0,0,6,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3818,        return b;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3827,        if (a > b) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3828,            return b;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3830,        if (a < b) {,6,1,0,1,3,0,0,0,0,8,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3831,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3834,        if (a != b) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3835,            return Double.NaN;,8,0,0,0,0,1,10,0,0,18,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3839,        long bits = Double.doubleToRawLongBits(a);,0,0,0,1,2,0,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3840,        if (bits == 0x8000000000000000L) {,2,0,0,1,3,0,0,0,0,2,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3841,            return a;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3843,        return b;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3852,        return (a <= b) ? b : a;,12,1,0,1,2,1,0,2,0,15,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3861,        return (a <= b) ? b : a;,10,1,0,1,2,1,0,0,0,11,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3870,        if (a > b) {,2,0,0,1,3,0,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3871,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3873,        if (a < b) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3874,            return b;,8,2,0,0,0,1,0,0,0,12,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3877,        if (a != b) {,4,1,0,1,3,0,8,0,0,13,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3878,            return Float.NaN;,0,0,0,0,0,1,0,0,0,1,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3882,        int bits = Float.floatToRawIntBits(a);,0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3883,        if (bits == 0x80000000) {,2,1,0,1,3,0,10,0,0,14,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3884,            return b;,10,0,0,0,0,1,0,0,0,10,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3886,        return a;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3895,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3896,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3898,        if (a < b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3899,            return b;,4,1,0,0,0,1,0,0,0,5,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3902,        if (a != b) {,4,1,0,1,3,0,2,0,0,7,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3903,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3907,        long bits = Double.doubleToRawLongBits(a);,2,0,0,1,2,0,6,0,0,8,42,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3908,        if (bits == 0x8000000000000000L) {,2,1,0,1,3,0,2,0,0,5,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3909,            return b;,10,1,0,0,0,3,2,0,0,15,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3911,        return a;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3929,        if (Double.isInfinite(x) || Double.isInfinite(y)) {,2,2,0,3,7,0,12,0,0,16,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3930,            return Double.POSITIVE_INFINITY;,6,1,0,0,0,2,0,0,0,8,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3931,        } else if (Double.isNaN(x) || Double.isNaN(y)) {,0,1,0,3,8,0,12,0,0,13,48,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3932,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3935,            final int expX = getExponent(x);,2,0,0,1,2,1,4,0,0,7,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3936,            final int expY = getExponent(y);,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3937,            if (expX > expY + 27) {,0,0,0,1,3,0,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3939,                return abs(x);,0,0,0,1,2,1,4,0,0,4,14,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3940,            } else if (expY > expX + 27) {,4,2,0,1,4,0,0,0,0,6,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3942,                return abs(y);,0,0,0,1,2,1,4,0,0,4,14,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3946,                final int middleExp = (expX + expY) / 2;,6,2,0,1,2,1,0,0,0,9,40,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3949,"                final double scaledX = scalb(x, -middleExp);",4,0,0,1,2,1,4,0,0,10,44,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3950,"                final double scaledY = scalb(y, -middleExp);",6,0,0,1,2,2,8,0,0,17,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3953,                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);,0,0,0,1,2,0,4,0,0,4,67,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3956,"                return scalb(scaledH, middleExp);",0,0,0,1,2,1,0,0,0,4,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3984,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation",0,0,0,1,2,1,0,0,0,4,90,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3996,        long m = Double.doubleToLongBits(magnitude);,2,1,0,1,2,0,0,0,0,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3997,        long s = Double.doubleToLongBits(sign);,4,1,1,1,2,0,12,0,0,22,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3998,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,8,7,0,3,7,0,0,0,0,15,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3999,            return magnitude;,2,0,0,0,0,1,4,0,0,6,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,4001,        return -magnitude; // flip sign,0,0,0,0,0,1,0,0,0,1,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,4013,        int m = Float.floatToIntBits(magnitude);,0,0,0,1,2,0,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,4014,        int s = Float.floatToIntBits(sign);,2,0,0,1,2,0,6,0,0,8,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,4015,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,2,2,0,3,7,0,12,0,0,16,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,4016,            return magnitude;,2,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,4018,        return -magnitude; // flip sign,8,2,0,0,0,1,4,0,0,15,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,4031,        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;,4,3,0,4,8,1,6,0,0,13,66,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,4044,        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;,6,6,0,3,6,1,16,0,0,28,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2197,"            = new Comparator<Pair<Double, double[]>>() {",0,0,0,2,5,0,0,6,0,6,44,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2201,                switch (dir) {,20,2,0,1,3,0,0,0,0,24,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2203,                    val = o1.getKey().compareTo(o2.getKey());,4,3,0,3,6,0,16,0,0,24,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2204,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2206,                    val = o2.getKey().compareTo(o1.getKey());,2,0,0,3,6,0,10,0,0,13,41,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2207,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2210,                    throw new IllegalArgumentException();,6,1,0,1,2,1,0,2,0,10,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2212,                return val;,12,1,0,0,0,1,0,0,0,13,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,62,        int[] centroid = new int[getPoint().length];,0,0,0,3,6,0,0,0,0,9,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,63,        for (EuclideanIntegerPoint p : points) {,4,0,0,1,3,0,0,2,0,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,64,            for (int i = 0; i < centroid.length; i++) {,10,1,0,1,3,0,0,0,0,12,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,65,                centroid[i] += p.getPoint()[i];,0,0,1,3,6,0,4,0,0,11,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,67,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,68,        for (int i = 0; i < centroid.length; i++) {,10,1,0,1,3,0,0,0,0,12,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,69,            centroid[i] /= points.size();,0,0,1,2,4,0,16,0,0,21,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,71,        return new EuclideanIntegerPoint(centroid);,2,0,0,1,2,1,0,2,0,4,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,78,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,82,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,89,        return true;,8,1,0,0,0,1,0,0,0,12,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,95,        int hashCode = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,96,        for (Integer i : point) {,0,0,0,1,3,0,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,97,            hashCode += i.hashCode() * 13 + 7;,2,2,0,1,2,0,4,0,0,9,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,99,        return hashCode;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,108,"        final StringBuilder buff = new StringBuilder(""("");",8,1,0,1,3,0,0,0,0,10,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,109,        final int[] coordinates = getPoint();,2,0,0,2,4,1,2,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,110,        for (int i = 0; i < coordinates.length; i++) {,0,0,0,1,3,0,0,0,0,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,111,            buff.append(coordinates[i]);,0,0,1,2,4,0,4,0,0,8,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,112,            if (i < coordinates.length - 1) {,8,2,1,1,3,1,0,0,0,15,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,113,"                buff.append("","");",0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,116,"        buff.append("")"");",0,0,0,1,3,0,4,0,0,5,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,117,        return buff.toString();,0,0,0,1,2,1,4,0,0,4,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,30,"public class EuclideanIntegerPoint implements Clusterable<EuclideanIntegerPoint>, Serializable {",2,0,1,0,1,1,2,6,0,20,96,1,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,101,            boolean clusteringChanged = false;,10,2,0,0,0,1,12,0,0,26,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,102,            List<Cluster<T>> newClusters = new ArrayList<Cluster<T>>();,2,0,0,1,2,0,0,12,0,14,59,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,103,            for (final Cluster<T> cluster : clusters) {,22,8,0,1,3,1,0,4,0,36,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,105,                if (cluster.getPoints().isEmpty()) {,0,0,0,3,7,0,6,0,0,6,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,106,                    switch (emptyStrategy) {,4,0,0,1,3,1,4,0,0,10,24,10,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,108,                            newCenter = getPointFromLargestVarianceCluster(clusters);,2,0,0,1,2,0,4,0,0,7,57,11,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,109,                            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,111,                            newCenter = getPointFromLargestNumberCluster(clusters);,2,0,0,1,2,0,4,0,0,7,55,11,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,112,                            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,114,                            newCenter = getFarthestPoint(clusters);,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,115,                            break;,8,1,0,0,0,0,0,0,0,10,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,117,                            throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);,8,0,0,1,2,0,4,2,0,14,74,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,119,                    clusteringChanged = true;,2,0,0,0,0,0,0,0,0,4,25,10,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,121,                    newCenter = cluster.getCenter().centroidOf(cluster.getPoints());,2,0,0,3,6,0,10,0,0,13,64,10,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,122,                    if (!newCenter.equals(cluster.getCenter())) {,0,0,0,3,7,0,8,0,0,9,45,10,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,123,                        clusteringChanged = true;,2,0,0,0,0,0,0,0,0,4,25,12,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,126,                newClusters.add(new Cluster<T>(newCenter));,2,0,0,2,4,0,4,4,0,10,43,9,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,127,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,128,            if (!clusteringChanged) {,2,0,0,1,3,0,0,0,0,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,129,                return clusters;,2,0,0,0,0,1,0,0,0,2,16,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,131,"            assignPointsToClusters(newClusters, points);",0,0,0,1,2,0,6,0,0,6,44,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,132,            clusters = newClusters;,4,0,0,0,0,0,6,0,0,11,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,208,        double maxVariance = Double.NEGATIVE_INFINITY;,6,0,0,0,0,0,0,0,0,6,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,209,        Cluster<T> selected = null;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,210,        for (final Cluster<T> cluster : clusters) {,4,0,0,1,3,1,0,4,0,9,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,211,            if (!cluster.getPoints().isEmpty()) {,0,0,0,3,7,0,6,0,0,7,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,214,                final T center = cluster.getCenter();,2,0,0,1,2,1,4,2,0,9,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,215,                final Variance stat = new Variance();,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,216,                for (final T point : cluster.getPoints()) {,2,0,0,2,5,1,4,2,0,9,43,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,217,                    stat.increment(point.distanceFrom(center));,4,4,0,2,4,0,10,0,0,18,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,218,                },2,0,0,0,1,1,4,0,0,7,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,219,                final double variance = stat.getResult();,2,0,0,1,2,1,4,0,0,7,41,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,222,                if (variance > maxVariance) {,0,0,0,1,3,0,0,0,0,4,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,223,                    maxVariance = variance;,8,0,0,0,0,0,8,0,0,17,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,224,                    selected = cluster;,4,0,0,0,0,0,0,0,0,5,19,10,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,228,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,231,        if (selected == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,232,            throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);,8,1,1,1,2,0,10,2,0,24,74,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,236,        final List<T> selectedPoints = selected.getPoints();,2,0,0,1,2,1,4,4,0,11,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,237,        return selectedPoints.remove(random.nextInt(selectedPoints.size()));,0,0,0,3,6,1,12,0,0,12,68,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,249,        int maxNumber = 0;,8,2,0,0,0,0,4,0,0,14,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,250,        Cluster<T> selected = null;,2,0,0,0,0,0,0,4,0,6,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,251,        for (final Cluster<T> cluster : clusters) {,0,0,0,1,3,0,0,0,0,4,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,254,            final int number = cluster.getPoints().size();,0,0,0,2,4,0,0,0,0,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,257,            if (number > maxNumber) {,4,1,0,1,3,0,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,258,                maxNumber = number;,14,4,0,0,0,0,0,0,0,19,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,259,                selected = cluster;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,262,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,265,        if (selected == null) {,0,0,0,1,3,0,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,266,            throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);,4,0,0,1,2,0,0,2,0,6,74,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,270,        final List<T> selectedPoints = selected.getPoints();,2,0,0,1,2,1,4,4,0,11,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,271,        return selectedPoints.remove(random.nextInt(selectedPoints.size()));,0,0,0,3,6,1,12,0,0,12,68,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,283,        double maxDistance = Double.NEGATIVE_INFINITY;,0,0,0,0,0,0,0,0,0,0,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,284,        Cluster<T> selectedCluster = null;,2,0,0,0,0,0,0,4,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,285,        int selectedPoint = -1;,2,0,0,0,0,0,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,286,        for (final Cluster<T> cluster : clusters) {,4,0,0,1,3,1,0,4,0,9,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,289,            final T center = cluster.getCenter();,4,1,0,1,2,1,4,2,0,12,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,290,            final List<T> points = cluster.getPoints();,2,0,0,1,2,1,4,4,0,11,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,291,            for (int i = 0; i < points.size(); ++i) {,6,1,0,2,5,0,4,0,0,12,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,292,                final double distance = points.get(i).distanceFrom(center);,2,0,0,2,4,1,10,0,0,13,59,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,293,                if (distance > maxDistance) {,4,1,0,1,3,0,0,0,0,5,29,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,294,                    maxDistance     = distance;,6,0,0,0,0,0,0,0,0,7,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,295,                    selectedCluster = cluster;,4,0,0,0,0,0,0,0,0,5,26,10,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,296,                    selectedPoint   = i;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,300,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,303,        if (selectedCluster == null) {,8,1,1,1,3,1,0,0,0,12,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,304,            throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);,4,3,0,1,2,0,8,0,0,15,74,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,307,        return selectedCluster.getPoints().remove(selectedPoint);,12,1,0,2,4,2,10,0,0,25,57,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,106,                    switch (emptyStrategy) {,6,1,0,1,3,1,0,0,0,8,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,57,63,        return points;,4,0,0,0,0,1,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,57,37,        this(null);,0,0,0,1,2,0,10,0,0,10,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,57,38,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,57,45,"        this(specific,",2,0,0,0,1,0,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,57,48,    },18,8,0,0,1,0,4,0,0,30,1,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,57,57,"        super(specific,",2,0,0,0,1,0,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,57,60,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,57,40,                                     Object ... args) {,0,0,0,0,2,0,0,0,0,2,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,57,41,"        addMessage(pattern, args);",0,0,0,1,2,0,6,0,0,6,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,57,42,    },6,1,0,0,1,1,4,0,0,13,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,57,54,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,57,55,"        addMessage(pattern, args);",0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,57,56,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,57,61,    public MathIllegalStateException() {,2,0,0,1,3,1,0,0,0,3,36,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,57,62,        addMessage(LocalizedFormats.ILLEGAL_STATE);,4,0,0,1,2,0,2,0,0,6,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,57,63,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,182,            } catch (OutOfRangeException e) {,2,0,0,1,4,0,0,2,0,4,33,7,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,183,                fwhmApprox = points[points.length - 1].getX() - points[0].getX();,0,0,0,4,8,0,8,0,0,9,65,4,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,271,            double minY = Double.POSITIVE_INFINITY;,6,0,0,0,0,0,0,0,0,6,39,6,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,272,            double maxY = Double.NEGATIVE_INFINITY;,16,3,0,0,0,0,0,0,0,20,39,3,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,273,            for (final WeightedObservedPoint point : points) {,0,0,0,1,3,0,0,0,0,4,50,4,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,274,"                minY = Math.min(minY, point.getY());",0,0,0,2,4,0,0,0,0,6,36,4,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,275,"                maxY = Math.max(maxY, point.getY());",0,0,0,2,4,0,0,0,0,6,36,4,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,277,"            throw new OutOfRangeException(y, minY, maxY);",0,0,0,1,2,0,0,0,0,3,45,4,0.5,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,52,"        this(null, wrong, min, boundIsAllowed);",0,0,0,1,2,0,0,0,0,3,39,4,0.5,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,53,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,67,"        super(specific,",0,0,0,0,1,0,0,0,0,1,15,4,0.5,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,73,        this.min = min;,14,1,0,0,0,0,0,0,0,17,15,3,0.5,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,74,        this.boundIsAllowed = boundIsAllowed;,20,4,0,0,0,0,6,2,0,33,37,3,0.5,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,75,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,46,"        this(null, wrong, lo, hi);",0,0,0,1,2,0,0,0,0,3,26,4,0.5,0,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,47,    },8,0,0,0,1,0,4,2,0,16,1,3,0.5,0,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,62,"        super(specific, LocalizedFormats.OUT_OF_RANGE_SIMPLE,",6,0,0,0,1,0,0,0,0,6,53,4,0.5,0,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,64,        this.lo = lo;,12,1,1,0,0,0,8,0,0,28,13,3,0.5,0,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,65,        this.hi = hi;,4,0,0,0,0,0,0,0,0,5,13,4,0.5,0,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,66,    },0,0,0,0,1,0,8,0,0,8,1,5,0.5,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,58,44,"        super(null, specific, general, args);",6,0,0,1,2,0,0,0,0,7,37,3,0.25,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,58,45,    },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,65,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,66,        this.specific = specific;,4,0,0,0,0,0,0,0,0,5,25,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,67,        this.general = general;,0,0,0,0,0,0,0,0,0,0,23,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,68,        this.arguments = ArgUtils.flatten(arguments);,0,0,0,1,2,0,0,0,0,3,45,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,69,    },18,2,0,0,1,6,2,0,0,30,1,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,58,50,"        super(specific, general, wrong, arguments);",0,1,0,1,2,0,22,0,0,23,43,9,0.25,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,58,51,        argument = wrong;,4,0,0,0,0,0,0,0,0,5,17,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,58,52,    },2,0,0,0,1,0,0,0,0,3,1,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,340,    private LocalizedFormats(final String sourceFormat) {,2,2,0,1,3,0,10,0,0,14,53,3,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,341,        this.sourceFormat = sourceFormat;,0,0,0,0,0,0,0,0,0,0,33,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,342,    },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",8,1,0,5,10,0,0,0,0,10,67,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,45,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",2,0,1,4,8,0,0,0,0,5,94,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,46,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",0,0,1,1,2,0,0,0,0,5,41,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,47,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",0,0,0,1,2,0,0,0,0,3,95,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,48,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",6,0,0,1,2,0,0,0,0,8,60,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,49,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",10,1,0,1,2,0,0,0,0,12,54,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,50,"    BANDWIDTH(""bandwidth ({0})""),",2,0,0,3,6,0,0,0,0,3,29,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,51,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",0,0,0,4,8,0,0,0,0,12,108,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,52,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),",6,0,0,3,6,0,6,0,0,13,93,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,53,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",2,0,0,1,2,0,0,0,0,3,123,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,54,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",0,0,0,1,2,0,0,0,0,3,89,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,55,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",4,0,0,2,4,0,6,0,0,11,108,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",8,5,0,1,2,0,0,0,0,13,100,5,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,57,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",0,0,0,2,4,0,0,0,0,6,94,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,58,"    CANNOT_CONVERT_OBJECT_TO_FRACTION(""cannot convert given object to a fraction number: {0}""),",14,1,0,2,4,1,0,2,0,19,91,3,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",6,0,0,3,6,1,0,0,0,7,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",2,0,0,2,4,0,0,0,0,3,83,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",0,0,0,2,4,0,0,0,0,6,86,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",0,0,0,2,4,0,0,0,0,6,87,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",2,0,0,1,2,0,0,0,0,3,84,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",2,0,0,1,2,0,0,0,0,3,131,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",2,0,0,1,2,0,0,0,0,3,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",0,0,0,2,4,0,0,0,0,6,78,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",0,0,0,1,2,0,0,0,0,3,95,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",0,0,0,2,4,0,0,0,0,6,74,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",0,0,0,1,2,0,0,0,0,3,55,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",2,0,0,3,6,0,0,0,0,3,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",4,0,1,2,4,1,0,0,0,10,115,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",0,0,0,5,10,0,0,0,0,15,78,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,46,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,75,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",0,0,0,2,4,0,0,0,0,6,112,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",6,0,0,2,4,1,0,0,0,7,86,6,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",4,0,0,5,10,1,4,4,0,14,290,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",8,1,0,3,6,1,0,0,0,11,263,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",18,4,0,1,2,1,0,0,0,24,52,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,80,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",2,0,0,3,6,0,0,0,0,3,109,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,81,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",2,0,1,3,6,0,6,0,0,14,81,3,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,82,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",2,0,0,1,2,0,0,0,0,3,49,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,83,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",10,1,0,5,10,0,0,0,0,12,71,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,84,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",0,1,0,3,6,0,2,0,0,3,52,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,85,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",0,0,0,1,2,0,0,0,0,3,54,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,86,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",0,0,0,2,4,0,0,0,0,6,119,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,87,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",2,0,0,1,2,0,0,0,0,3,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,88,"    DUPLICATED_ABSCISSA(""Abscissa {0} is duplicated at both indices {1} and {2}""),",4,0,0,4,8,0,6,0,0,12,78,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,89,"    EMPTY_CLUSTER_IN_K_MEANS(""empty cluster in k-means""),",0,0,0,1,2,0,0,0,0,3,53,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,90,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",0,0,0,1,2,0,10,0,0,10,88,8,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,91,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",0,0,0,1,2,0,0,0,0,3,71,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,92,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",2,0,0,1,2,0,0,0,0,3,65,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,93,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",0,0,0,1,2,0,0,0,0,3,77,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,94,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",4,1,0,4,8,3,0,0,0,8,78,1,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,95,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",8,0,0,3,6,0,0,4,0,13,81,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,96,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",6,0,0,1,2,0,0,0,0,6,53,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,97,"    EVALUATION_FAILED(""evaluation failed for argument = {0}""),",2,0,1,2,4,0,2,0,0,11,58,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,98,"    EVALUATION(""evaluation""), /* keep */",0,0,0,1,2,0,0,0,0,3,36,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,99,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",0,0,0,3,6,0,0,0,0,9,77,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,100,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",6,0,0,2,4,0,0,0,0,8,69,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,101,"    FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),",2,0,0,12,24,0,0,0,0,3,175,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,102,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",2,0,0,3,6,0,8,0,0,10,85,9,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,103,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,104,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",4,1,0,2,4,0,2,0,0,8,54,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,105,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",0,0,0,2,4,0,0,0,0,6,73,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,106,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",2,0,0,5,10,0,0,0,0,3,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,107,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",0,0,0,1,2,0,0,0,0,3,62,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,108,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",2,0,0,1,2,0,0,0,0,3,54,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,109,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,110,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",2,0,0,4,8,0,0,0,0,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,111,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",2,0,0,2,4,0,0,0,0,3,76,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,112,"    IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO(""identical abscissas x[{0}] == x[{1}] == {2} cause division by zero""),",2,0,0,6,12,0,0,0,0,3,107,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,113,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",4,1,0,3,6,0,14,0,0,21,95,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,114,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",2,0,0,3,6,0,0,0,0,3,50,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,115,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,64,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,116,"    INDEX(""index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,117,"    NOT_FINITE_NUMBER(""{0} is not a finite number""), /* keep */",2,0,0,2,4,0,0,0,0,3,59,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,118,"    ARRAY_ELEMENT(""value {0} at index {1}""), /* keep */",4,0,0,3,6,0,0,0,0,5,51,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,119,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",0,0,0,3,6,0,0,0,0,9,79,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,120,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",0,0,0,1,2,0,0,0,0,3,59,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,121,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",2,0,0,3,6,0,0,0,0,3,72,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,122,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {1} after final column {0}""),",2,0,0,3,6,0,0,0,0,3,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,123,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {1} after final row {0}""),",0,0,0,3,6,0,0,0,0,9,67,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,124,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",0,0,0,4,8,0,0,0,0,12,121,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,125,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",2,0,0,2,4,0,0,0,0,3,103,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,126,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,127,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",2,0,0,3,6,0,0,0,0,3,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,128,"    DIMENSION(""dimension ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,40,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,129,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",8,2,0,3,6,0,0,0,0,11,105,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,130,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",4,1,0,3,6,0,0,0,0,6,83,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,131,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT(""{0} method needs at least one previous point""),",8,2,0,2,4,1,0,0,0,11,101,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,132,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",2,0,0,2,4,0,0,0,0,3,66,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,133,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",0,0,0,4,8,0,0,0,0,12,112,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,134,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),",0,0,0,4,8,0,0,0,0,12,124,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,135,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",2,0,0,3,6,0,0,0,0,3,72,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,136,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",2,0,0,2,4,0,0,0,0,3,71,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,137,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),",10,2,1,4,8,0,0,0,0,18,141,3,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,138,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",2,0,0,26,52,0,0,0,0,3,165,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,139,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",4,0,0,1,2,0,0,0,0,5,41,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,140,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",2,0,0,4,8,3,0,0,0,5,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,141,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",0,0,0,4,8,0,0,0,0,12,56,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,142,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),",0,0,0,1,2,0,0,0,0,3,101,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,143,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",2,0,0,1,2,0,0,0,0,3,67,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,144,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,111,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,145,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",2,0,0,5,10,0,0,0,0,3,111,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,146,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",2,0,0,1,2,0,0,0,0,3,70,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,147,"    EVALUATIONS(""evaluations""), /* keep */",4,0,0,1,2,0,0,0,0,6,38,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,148,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",2,0,0,3,6,0,0,0,0,3,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,149,"    MAX_EVALUATIONS_EXCEEDED(""maximal number of evaluations ({0}) exceeded""),",0,0,0,3,6,0,0,0,0,9,73,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,150,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",2,0,0,3,6,0,0,0,0,3,71,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,151,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({0,number,0.00E00}) reached, integration needs {1,number,0.00E00}""),",0,0,0,4,8,0,0,0,0,12,132,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,152,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",2,0,0,3,6,0,0,0,0,3,156,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,153,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",2,0,0,2,4,0,0,0,0,3,43,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,154,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",2,0,0,1,2,0,0,0,0,3,49,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,155,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",2,0,0,2,4,0,0,0,0,3,92,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,156,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",2,0,0,2,4,0,0,0,0,3,55,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,157,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",2,0,0,5,10,0,0,0,0,3,68,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,158,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",4,0,0,3,6,0,0,0,0,6,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,159,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,160,"    NUMBER_OF_SUCCESSES(""number of successes ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,60,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,161,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,73,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,162,"    NUMBER_OF_TRIALS(""number of trials ({0})""),",0,0,0,3,6,0,0,0,0,9,43,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,163,"    ROBUSTNESS_ITERATIONS(""number of robustness iterations ({0})""),",0,0,0,3,6,0,0,0,0,9,63,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,164,"    START_POSITION(""start position ({0})""), /* keep */",6,0,0,3,6,1,0,0,0,8,50,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,165,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge (in less than {0} iterations) for value {1}""),",0,0,0,4,8,0,0,0,0,12,131,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,166,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,167,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",2,0,0,2,4,0,0,0,0,3,81,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,168,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",0,0,0,3,6,0,0,0,0,9,89,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,169,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,89,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,170,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,171,"    NON_SQUARE_MATRIX(""a {0}x{1} matrix was provided instead of a square matrix""),",2,0,1,3,6,0,0,0,0,9,78,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,172,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",2,0,0,1,2,0,0,0,0,4,60,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,173,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",2,0,0,1,2,0,0,0,0,3,41,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,174,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",2,0,0,5,10,0,0,0,0,3,93,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,175,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,176,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,88,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,177,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),",2,0,0,5,10,0,0,0,0,3,113,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,178,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",4,0,1,3,6,0,0,0,0,8,97,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,179,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,180,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",10,1,0,6,12,0,0,0,0,12,88,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,181,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",2,0,0,5,10,0,0,0,0,3,105,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,182,"    ALPHA(""alpha""), /* keep */",6,0,0,1,2,0,0,0,0,7,26,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,183,"    BETA(""beta""), /* keep */",2,0,0,1,2,0,0,0,0,3,24,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,184,"    NOT_POSITIVE_COLUMNDIMENSION(""invalid column dimension: {0} (must be positive)""),",4,0,0,3,6,3,0,0,0,8,81,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,185,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""),",2,0,0,1,2,0,0,0,0,3,61,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,186,"    NON_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix: diagonal element at ({0},{0}) is larger than {2}""), /* keep */",0,0,0,5,10,0,0,0,0,15,122,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,187,"    DEGREES_OF_FREEDOM(""degrees of freedom ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,188,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,189,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",8,1,0,3,6,1,6,0,0,18,66,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,190,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,65,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,191,"    EXPONENT(""exponent ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,38,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,192,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,53,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,193,"    LENGTH(""length ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,34,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,194,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,49,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,195,"    MEAN(""mean ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,30,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,196,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",2,0,0,2,4,0,0,0,0,3,72,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,197,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,198,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",2,0,0,3,6,0,0,0,0,3,65,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,199,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",0,0,0,2,5,0,0,0,0,7,53,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,200,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,69,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,201,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,71,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,202,"    POPULATION_SIZE(""population size ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,203,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",0,0,0,3,6,0,0,0,0,9,76,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,204,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,205,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,206,"    SCALE(""scale ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,32,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,207,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,208,"    SHAPE(""shape ({0})""), /* keep */",4,0,0,3,6,1,8,0,0,14,32,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,209,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,210,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,211,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),",4,1,1,3,6,0,0,0,0,10,63,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,212,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,213,"    NOT_POWER_OF_TWO(""{0} is not a power of 2""),",2,0,0,2,4,0,0,0,0,3,44,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,214,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",2,0,0,2,4,0,0,0,0,3,87,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,215,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",2,0,0,2,4,0,0,0,0,3,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,216,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",10,3,0,6,12,0,0,0,0,15,104,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,217,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,107,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,218,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",2,0,0,1,2,0,0,0,0,3,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,219,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,220,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */",0,0,0,6,12,0,0,0,0,18,107,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,221,"    NOT_SUBTRACTION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not subtraction compatible""),",0,0,0,5,10,0,0,0,0,15,99,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,222,"    NOT_SYMMETRIC_MATRIX(""not symmetric matrix""),",0,0,0,1,2,0,0,0,0,3,45,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,223,"    NON_SYMMETRIC_MATRIX(""non symmetric matrix: the difference between entries at ({0},{1}) and ({1},{0}) is larger than {2}""), /* keep */",2,0,0,8,16,0,0,0,0,3,134,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,224,"    NO_BIN_SELECTED(""no bin selected""),",2,0,0,1,2,0,0,0,0,3,35,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,225,"    NO_CONVERGENCE_WITH_ANY_START_POINT(""none of the {0} start points lead to convergence""), /* keep */",0,0,0,2,4,0,0,0,0,6,99,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,226,"    NO_DATA(""no data""), /* keep */",0,0,0,1,2,0,0,0,0,3,30,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,227,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",10,3,0,4,8,0,6,0,0,20,82,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,228,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),",2,0,1,1,2,0,8,0,0,15,99,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,229,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",2,0,0,1,2,0,0,0,0,3,45,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,230,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""), /* keep */",2,0,0,1,2,0,0,0,0,3,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,231,"    NO_RESULT_AVAILABLE(""no result available""),",0,0,0,1,2,0,0,0,0,3,43,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,232,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",6,1,0,6,12,0,4,0,0,12,75,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,233,"    NULL_NOT_ALLOWED(""null is not allowed""), /* keep */",2,0,0,1,2,0,0,0,0,3,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,234,"    COVARIANCE_MATRIX(""covariance matrix""), /* keep */",2,0,0,1,2,0,0,0,0,3,50,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,235,"    DENOMINATOR(""denominator""), /* keep */",2,0,1,1,2,0,0,0,0,9,38,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,236,"    DENOMINATOR_FORMAT(""denominator format""), /* keep */",0,0,0,1,2,0,0,0,0,3,52,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,237,"    FRACTION(""fraction""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,238,"    FUNCTION(""function""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,239,"    IMAGINARY_FORMAT(""imaginary format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,240,"    INPUT_ARRAY(""input array""), /* keep */",8,2,0,1,2,0,0,0,0,12,38,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,241,"    NUMERATOR(""numerator""), /* keep */",4,0,0,1,2,0,0,0,0,6,34,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,242,"    NUMERATOR_FORMAT(""numerator format""), /* keep */",16,0,0,1,2,3,0,0,0,20,48,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,243,"    OBJECT_TRANSFORMATION(""conversion exception in transformation""), /* keep */",2,0,0,1,2,0,0,0,0,3,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,244,"    REAL_FORMAT(""real format""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,245,"    WHOLE_FORMAT(""whole format""), /* keep */",6,0,0,1,2,0,8,0,0,15,40,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,246,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,68,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,247,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,69,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,248,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */",4,0,0,4,8,0,0,0,0,6,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,249,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */",10,3,1,4,8,0,0,0,0,18,98,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,250,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,127,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,251,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",0,0,0,2,4,0,0,0,0,6,87,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,252,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),",2,0,0,4,8,0,0,0,0,3,150,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,253,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",2,0,0,2,4,0,0,0,0,3,76,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,254,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",2,0,0,2,4,0,0,0,0,3,84,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,255,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),",6,2,1,3,6,0,0,0,0,20,87,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,256,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",2,0,1,4,8,0,0,0,0,8,101,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,257,"    SIGNIFICANCE_LEVEL(""significance level ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,58,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,258,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",2,0,0,5,10,0,0,0,0,3,150,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,259,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),",6,0,0,6,12,0,0,0,0,8,96,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,260,"    OUT_OF_RANGE(""out of range""), /* keep */",2,0,0,1,2,0,0,0,0,3,40,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,261,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */",4,2,0,5,10,0,0,0,0,7,62,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,262,"    OVERFLOW_IN_FRACTION(""overflow in fraction {0}/{1}, cannot negate""),",2,0,0,3,6,0,0,0,0,3,68,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,263,"    OVERFLOW_IN_ADDITION(""overflow in addition: {0} + {1}""),",0,0,0,3,6,0,0,0,0,9,56,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,264,"    OVERFLOW_IN_SUBTRACTION(""overflow in subtraction: {0} - {1}""),",2,0,0,3,6,0,0,0,0,3,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,265,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",4,1,1,3,6,0,0,0,0,17,108,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,266,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),",2,0,0,3,6,0,0,0,0,3,99,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,267,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,91,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,268,"    POLYNOMIAL(""polynomial""), /* keep */",2,0,0,1,2,0,0,0,0,3,36,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,269,"    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(""number of polynomial interpolants must match the number of segments ({0} != {1} - 1)""),",2,0,0,4,8,0,0,0,0,3,130,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,270,"    POPULATION_LIMIT_NOT_POSITIVE(""population limit has to be positive""),",2,0,0,1,2,0,0,0,0,3,69,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,271,"    POSITION_SIZE_MISMATCH_INPUT_ARRAY(""position {0} and size {1} don't fit to the size of the input array {2}""),",2,0,0,4,8,0,0,0,0,3,109,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,272,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",8,2,0,4,8,0,0,0,0,11,90,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,273,"    PROPAGATION_DIRECTION_MISMATCH(""propagation direction mismatch""),",2,0,0,1,2,0,0,0,0,3,65,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,274,"    RANDOMKEY_MUTATION_WRONG_CLASS(""RandomKeyMutation works only with RandomKeys, not {0}""),",2,0,0,2,4,0,0,0,0,3,88,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,275,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",2,0,0,1,2,0,0,0,0,3,77,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,276,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),",2,0,0,3,6,0,0,0,0,3,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,277,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,72,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,278,"    ROW_INDEX(""row index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,40,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,279,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",2,0,0,7,14,0,0,0,0,3,126,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,280,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",12,1,0,5,10,0,0,0,0,15,98,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,281,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,113,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,282,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",2,0,0,1,2,0,0,0,0,3,66,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,283,"    SIMPLE_MESSAGE(""{0}""),",2,0,0,2,4,0,0,0,0,3,22,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,284,"    SINGULAR_MATRIX(""matrix is singular""), /* keep */",6,1,0,1,2,0,0,0,0,7,49,5,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,285,"    SUBARRAY_ENDS_AFTER_ARRAY_END(""subarray ends after array end""),",4,1,0,1,2,0,10,0,0,17,63,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,286,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),",2,0,0,3,6,0,0,0,0,3,87,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,287,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),",2,0,0,3,6,0,0,0,0,3,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,288,"    TOO_SMALL_COST_RELATIVE_TOLERANCE(""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible""),",2,0,0,3,6,0,0,0,0,3,136,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,289,"    TOO_SMALL_INTEGRATION_INTERVAL(""too small integration interval: length = {0}""),",0,0,0,2,4,0,0,0,0,6,79,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,290,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),",2,0,0,3,6,0,0,0,0,3,120,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,291,"    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible""),",0,0,0,3,6,0,0,0,0,9,156,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,292,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),",0,0,0,2,4,0,0,0,0,6,76,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,293,"    TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED(""two or more values required in each category, one has {0}""),",2,0,0,2,4,0,0,0,0,3,101,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,294,"    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(""unable to bracket optimum in line search""),",2,0,0,1,2,0,0,0,0,3,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,295,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),",2,0,0,1,2,0,0,0,0,3,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,296,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),",2,0,0,1,2,0,0,0,0,3,95,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,297,"    UNABLE_TO_ORTHOGONOLIZE_MATRIX(""unable to orthogonalize matrix in {0} iterations""),",2,0,0,2,4,0,0,0,0,3,83,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,298,"    UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN(""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix""),",4,0,0,3,6,0,8,0,0,14,117,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,299,"    UNABLE_TO_SOLVE_SINGULAR_PROBLEM(""unable to solve: singular problem""),",2,1,0,1,2,0,4,0,0,8,70,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,300,"    UNBOUNDED_SOLUTION(""unbounded solution""),",2,0,0,1,2,0,0,0,0,3,41,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,301,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),",2,0,0,20,40,0,0,0,0,3,118,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,302,"    CANNOT_PARSE_AS_TYPE(""string {0} unparseable (from position {1}) as an object of type {2}""), /* keep */",2,0,0,5,10,0,0,0,0,3,103,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,303,"    CANNOT_PARSE(""string {0} unparseable (from position {1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,70,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,304,"    UNPARSEABLE_3D_VECTOR(""unparseable 3D vector: \""{0}\""""),",2,0,0,2,4,0,4,0,0,7,56,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,305,"    UNPARSEABLE_COMPLEX_NUMBER(""unparseable complex number: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,66,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,306,"    UNPARSEABLE_FRACTION_NUMBER(""unparseable fraction number: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,68,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,307,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),",4,0,0,2,4,1,0,2,0,7,60,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,308,"    UNSUPPORTED_EXPANSION_MODE(""unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})""),",2,0,0,8,16,0,0,0,0,3,106,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,309,"    UNSUPPORTED_OPERATION(""unsupported operation""), /* keep */",2,0,0,1,2,0,0,0,0,3,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,310,"    ARITHMETIC_EXCEPTION(""arithmetic exception""), /* keep */",2,0,0,1,2,0,0,0,0,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,311,"    ILLEGAL_STATE(""illegal state""), /* keep */",2,0,0,1,2,0,0,0,0,3,42,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,312,"    USER_EXCEPTION(""exception generated in user code""), /* keep */",2,0,0,1,2,0,8,0,0,11,62,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,313,"    URL_CONTAINS_NO_DATA(""URL {0} contains no data""),",2,0,0,2,4,0,0,0,0,3,49,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,314,"    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(""{0} values have been added before statistic is configured""),",2,0,0,2,4,0,0,0,0,3,103,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,315,"    VECTOR_LENGTH_MISMATCH(""vector length mismatch: got {0} but expected {1}""),",8,1,0,3,6,0,4,0,0,14,75,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,316,"    VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT(""vector must have at least one element""),",2,0,0,1,2,0,0,0,0,3,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,317,"    WEIGHT_AT_LEAST_ONE_NON_ZERO(""weigth array must contain at least one non-zero value""),",4,2,0,1,2,0,6,0,0,14,86,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,318,"    WRONG_BLOCK_LENGTH(""wrong array shape (block length = {0}, expected {1})""),",2,0,0,4,8,0,0,0,0,3,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,319,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),",2,0,0,3,6,0,0,0,0,3,64,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,320,"    NUMBER_OF_POINTS(""number of points ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,54,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,321,"    ZERO_DENOMINATOR(""denominator must be different from 0""),",2,0,0,1,2,0,0,0,0,3,57,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,322,"    ZERO_DENOMINATOR_IN_FRACTION(""zero denominator in fraction {0}/{1}""),",2,0,0,3,6,0,0,0,0,3,69,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,323,"    ZERO_FRACTION_TO_DIVIDE_BY(""the fraction to divide by must not be zero: {0}/{1}""),",6,0,0,3,6,0,0,0,0,9,82,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,324,"    ZERO_NORM(""zero norm""),",2,0,0,1,2,0,0,0,0,3,23,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,325,"    ZERO_NORM_FOR_ROTATION_AXIS(""zero norm for rotation axis""),",0,0,0,1,2,0,0,0,0,3,59,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,326,"    ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR(""zero norm for rotation defining vector""),",2,0,0,1,2,0,0,0,0,3,81,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,327,"    ZERO_NOT_ALLOWED(""zero not allowed here"");",0,0,0,1,2,0,0,0,0,3,42,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,39,public enum LocalizedFormats implements Localizable {,2,0,0,0,1,1,0,2,0,5,53,1,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,58,42,        final List<Object> list = new ArrayList<Object>();,10,1,0,1,2,1,0,8,0,21,50,3,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,58,43,        if (array != null) {,0,0,0,1,3,0,0,0,0,4,20,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,58,44,            for (Object o : array) {,4,0,0,1,3,0,6,2,0,12,24,3,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,58,45,                if (o instanceof Object[]) {,2,0,0,2,5,0,0,2,0,4,28,9,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,58,46,                    for (Object oR : flatten((Object[]) o)) {,4,0,0,4,9,0,2,4,0,10,41,10,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,58,47,                        list.add(oR);,2,0,0,1,2,0,6,0,0,9,13,3,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,58,50,                    list.add(o);,0,0,0,1,2,0,6,0,0,6,12,11,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,58,54,        return list.toArray();,0,0,0,1,2,1,4,0,0,4,22,5,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/VectorialPointValuePair,58,46,"    public VectorialPointValuePair(final double[] point, final double[] value) {",12,1,0,3,7,3,0,0,0,17,76,2,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/VectorialPointValuePair,58,47,        this.point = (point == null) ? null : point.clone();,0,0,0,2,4,0,0,0,0,6,52,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/VectorialPointValuePair,58,48,        this.value = (value == null) ? null : value.clone();,4,1,0,2,4,0,4,0,0,10,52,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/VectorialPointValuePair,58,49,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/VectorialPointValuePair,58,97,        return value;,0,0,0,0,0,1,0,0,0,1,13,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/WeightedObservedPoint,58,57,        return weight;,4,0,0,0,0,1,0,0,0,5,14,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/WeightedObservedPoint,58,64,        return x;,2,0,0,0,0,1,0,0,0,2,9,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/WeightedObservedPoint,58,71,        return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,147,            this.observations = observations.clone();,2,0,0,1,2,0,4,0,0,7,41,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,148,        },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,156,            if (parameters == null) {,0,0,0,1,3,0,0,0,0,4,25,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,157,                parameters = basicGuess(observations);,2,0,0,1,2,0,4,0,0,7,38,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,159,            return parameters.clone();,4,1,0,1,2,1,4,0,0,10,26,1,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,169,"            Arrays.sort(points, createWeightedObservedPointComparator());",0,0,0,2,4,0,8,0,0,8,61,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,170,            double[] params = new double[3];,2,0,0,2,4,0,0,0,0,2,32,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,172,            int maxYIdx = findMaxY(points);,2,0,0,1,2,0,4,0,0,6,31,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,173,            params[0] = points[maxYIdx].getY();,0,0,1,3,6,0,2,0,0,9,35,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,174,            params[1] = points[maxYIdx].getX();,0,0,1,3,6,0,2,0,0,9,35,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,178,                double halfY = params[0] + ((params[1] - params[0]) / 2.0);,12,5,1,5,10,0,0,0,0,24,59,1,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,179,"                double fwhmX1 = interpolateXAtY(points, maxYIdx, -1, halfY);",2,0,0,1,2,0,8,0,0,11,60,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,185,            params[2] = fwhmApprox / (2.0 * Math.sqrt(2.0 * Math.log(2.0)));,2,3,1,4,8,0,8,0,0,16,64,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,187,            return params;,8,0,0,0,0,2,0,0,0,9,14,1,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,197,            int maxYIdx = 0;,0,0,0,0,0,0,0,0,0,0,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,198,            for (int i = 1; i < points.length; i++) {,10,1,0,1,3,0,0,0,0,12,41,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,199,                if (points[i].getY() > points[maxYIdx].getY()) {,0,0,0,5,11,0,0,0,0,16,48,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,200,                    maxYIdx = i;,0,0,0,0,0,0,0,0,0,0,12,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,203,            return maxYIdx;,2,0,0,0,0,1,0,0,0,2,15,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,223,            if (idxStep == 0) {,2,1,1,1,3,0,0,0,0,8,19,1,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,226,"            WeightedObservedPoint[] twoPoints = getInterpolationPointsForY(points, startIdx, idxStep, y);",2,0,0,2,4,0,10,2,0,14,93,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,258,            if (idxStep == 0) {,2,1,0,1,3,0,0,0,0,3,19,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,261,            for (int i = startIdx;,4,0,0,0,1,0,0,0,0,4,22,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,262,                 (idxStep < 0) ? (i + idxStep >= 0) : (i + idxStep < points.length);,14,5,0,3,6,0,0,0,0,19,67,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,264,"                if (isBetween(y, points[i].getY(), points[i + idxStep].getY())) {",4,1,1,6,13,0,8,0,0,19,65,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,263,                 i += idxStep) {,4,0,0,0,2,0,0,0,0,5,15,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,291,            return (value >= boundary1 && value <= boundary2) ||,8,4,0,1,2,1,0,0,0,12,52,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,302,            return new Comparator<WeightedObservedPoint>() {,0,0,0,1,3,1,0,4,0,4,48,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,121,"        return fit(new Gaussian.Parametric(), guess);",0,0,0,2,4,1,0,0,0,7,45,4,0.2,1,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,126,"        return fit(Integer.MAX_VALUE, f, initialGuess);",6,0,0,1,2,1,6,0,0,13,47,0,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,150,        double[] target  = new double[observations.size()];,4,2,0,3,6,0,4,0,0,10,51,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,151,        double[] weights = new double[observations.size()];,2,0,0,3,6,0,4,0,0,6,51,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,152,        int i = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,153,        for (WeightedObservedPoint point : observations) {,0,0,0,1,3,0,0,0,0,4,50,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,154,            target[i]  = point.getY();,0,0,0,2,4,0,0,0,0,6,26,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,155,            weights[i] = point.getWeight();,0,0,1,2,4,0,4,0,0,9,31,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,156,            ++i;,2,0,0,0,0,0,0,0,0,3,4,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,157,        },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,160,        VectorialPointValuePair optimum =,0,0,0,0,0,0,0,0,0,0,33,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,42,public class CurveFitter {,2,0,0,0,1,1,0,0,0,3,26,1,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,177,        public TheoreticalValuesFunction(final ParametricUnivariateRealFunction f) {,0,0,0,1,3,0,0,0,0,4,76,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,178,            this.f = f;,4,0,0,0,0,0,0,0,0,5,11,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,179,        },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,183,            return new MultivariateMatrixFunction() {,0,0,0,1,3,1,0,0,0,5,41,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,200,            final double[] values = new double[observations.size()];,2,0,0,3,6,1,4,0,0,7,56,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,201,            int i = 0;,4,1,0,0,0,0,0,0,0,5,10,1,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,202,            for (WeightedObservedPoint observed : observations) {,4,0,0,1,3,0,0,2,0,6,53,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,203,"                values[i++] = f.value(observed.getX(), point);",2,0,1,3,6,0,10,0,0,16,46,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,204,            },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,206,            return values;,6,3,0,0,0,1,0,0,0,10,14,1,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,169,    private class TheoreticalValuesFunction,2,0,0,0,0,1,0,0,0,3,39,2,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,302,            return new Comparator<WeightedObservedPoint>() {,0,0,0,1,3,1,0,4,0,4,48,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,304,                    if (p1 == null && p2 == null) {,4,3,0,1,3,0,0,0,0,7,31,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,307,                    if (p1 == null) {,2,1,0,1,3,0,0,0,0,3,17,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,310,                    if (p2 == null) {,2,1,0,1,3,0,0,0,0,3,17,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,313,                    if (p1.getX() < p2.getX()) {,0,0,0,3,7,0,0,0,0,10,28,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,316,                    if (p1.getX() > p2.getX()) {,0,1,0,3,7,0,8,0,0,9,28,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,317,                        return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,183,            return new MultivariateMatrixFunction() {,0,0,0,1,3,1,0,2,0,2,41,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,185,                    final double[][] jacobian = new double[observations.size()][];,0,0,0,5,10,0,0,0,0,15,62,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,187,                    int i = 0;,4,1,0,0,0,0,0,0,0,5,10,1,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,188,                    for (WeightedObservedPoint observed : observations) {,4,0,0,1,3,0,0,2,0,6,53,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,189,"                        jacobian[i++] = f.gradient(observed.getX(), point);",2,0,0,3,6,0,0,0,0,2,51,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,190,                    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,192,                    return jacobian;,2,0,0,0,0,1,0,0,0,2,16,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,88,        return checker;,0,0,0,0,0,1,0,0,0,1,15,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,103,            evaluations.incrementCount();,0,0,0,1,2,0,4,0,0,4,29,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,106,        },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,107,        return function.value(point);,0,0,0,1,2,1,6,0,0,6,29,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,114,        if (f == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,117,        if (t == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,120,        if (w == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,123,        if (startPoint == null) {,2,1,0,1,3,0,0,0,0,3,25,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,126,        if (t.length != w.length) {,8,1,0,1,3,0,0,0,0,9,27,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,131,        evaluations.setMaximalCount(maxEval);,0,0,0,1,2,0,6,0,0,6,37,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,132,        evaluations.resetCount();,0,0,0,1,2,0,4,0,0,4,25,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,135,        function = f;,4,0,0,0,0,0,0,0,0,5,13,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,136,        target = t.clone();,4,0,0,1,2,0,8,0,0,14,19,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,137,        weight = w.clone();,2,0,0,1,2,0,4,0,0,7,19,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,138,        start = startPoint.clone();,2,0,0,1,2,0,4,0,0,7,27,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,141,        return doOptimize();,0,0,0,1,2,1,2,0,0,2,20,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,165,        return target;,8,7,0,0,0,1,10,0,0,25,14,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,171,        return weight;,4,1,0,0,0,1,0,0,0,5,14,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,220,"        solvedCols  = FastMath.min(rows, cols);",2,0,0,1,2,0,6,0,0,9,39,0,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,221,        diagR       = new double[cols];,0,0,0,1,2,0,0,0,0,3,31,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,222,        jacNorm     = new double[cols];,2,0,1,1,2,0,0,0,0,5,31,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,223,        beta        = new double[cols];,2,0,1,1,2,0,0,0,0,5,31,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,224,        permutation = new int[cols];,2,0,1,1,2,0,0,0,0,5,28,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,225,        lmDir       = new double[cols];,2,0,1,1,2,0,0,0,0,5,31,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,228,        double   delta   = 0;,2,0,0,0,0,0,0,0,0,2,21,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,229,        double   xNorm   = 0;,0,0,0,0,0,0,0,0,0,0,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,230,        double[] diag    = new double[cols];,2,0,1,2,4,0,0,0,0,4,36,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,231,        double[] oldX    = new double[cols];,0,0,0,2,4,0,0,0,0,6,36,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,232,        double[] oldRes  = new double[rows];,0,0,0,2,4,0,0,0,0,6,36,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,233,        double[] oldObj  = new double[rows];,2,0,1,2,4,0,0,0,0,4,36,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,234,        double[] qtf     = new double[rows];,6,0,1,2,4,0,0,0,0,9,36,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,235,        double[] work1   = new double[cols];,0,0,0,2,4,0,0,0,0,6,36,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,236,        double[] work2   = new double[cols];,2,0,1,2,4,0,0,0,0,4,36,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,237,        double[] work3   = new double[cols];,0,0,0,2,4,0,0,0,0,6,36,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,240,        updateResidualsAndCost();,0,0,0,1,2,0,2,0,0,2,25,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,243,        lmPar = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,244,        boolean firstIteration = true;,2,0,0,0,0,0,0,0,0,3,30,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,245,"        VectorialPointValuePair current = new VectorialPointValuePair(point, objective);",6,0,0,1,2,0,0,4,0,10,80,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,246,        int iter = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,247,        final ConvergenceChecker<VectorialPointValuePair> checker = getConvergenceChecker();,2,0,0,1,2,1,8,4,0,15,84,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,249,            ++iter;,2,0,0,0,0,0,0,0,0,3,7,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,251,            for (int i=0;i<rows;i++) {,10,2,0,1,3,0,0,0,0,13,26,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,252,                qtf[i]=weightedResiduals[i];,0,0,1,2,4,0,0,0,0,9,28,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,256,            VectorialPointValuePair previous = current;,0,0,0,0,0,0,0,0,0,0,43,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,257,            updateJacobian();,4,1,0,1,2,3,0,0,0,8,17,1,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,258,            qrDecomposition();,0,0,0,1,2,0,2,0,0,2,18,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,261,            qTy(qtf);,0,0,0,1,2,0,0,0,0,3,9,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,264,            for (int k = 0; k < solvedCols; ++k) {,8,1,0,1,3,0,0,0,0,10,38,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,265,                int pk = permutation[k];,0,0,0,1,2,0,0,0,0,3,24,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,266,                weightedResidualJacobian[k][pk] = diagR[pk];,2,0,0,3,6,0,0,2,0,4,44,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,269,            if (firstIteration) {,0,0,0,1,3,0,0,0,0,4,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,272,                xNorm = 0;,2,0,0,0,0,0,0,0,0,3,10,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,273,                for (int k = 0; k < cols; ++k) {,8,1,0,1,3,0,0,0,0,10,32,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,274,                    double dk = jacNorm[k];,2,0,1,1,2,0,0,0,0,6,23,11,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,275,                    if (dk == 0) {,2,1,0,1,3,0,0,0,0,3,14,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,278,                    double xk = dk * point[k];,4,1,1,1,2,0,0,0,0,9,26,11,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,279,                    xNorm  += xk * xk;,16,2,0,0,0,0,0,0,0,19,18,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,280,                    diag[k] = dk;,2,0,1,1,2,0,0,0,0,7,13,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,282,                xNorm = FastMath.sqrt(xNorm);,4,2,1,1,2,0,6,0,0,22,29,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,285,                delta = (xNorm == 0) ? initialStepBoundFactor : (initialStepBoundFactor * xNorm);,20,3,1,2,4,0,0,0,0,27,81,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,289,            double maxCosine = 0;,2,0,0,0,0,0,0,0,0,2,21,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,290,            if (cost != 0) {,10,3,0,1,3,0,0,0,0,14,16,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,291,                for (int j = 0; j < solvedCols; ++j) {,8,1,0,1,3,0,0,0,0,10,38,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,292,                    int    pj = permutation[j];,2,0,1,1,2,0,0,0,0,6,27,11,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,293,                    double s  = jacNorm[pj];,2,0,1,1,2,0,0,0,0,6,24,11,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,294,                    if (s != 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,295,                        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,13,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,296,                        for (int i = 0; i <= j; ++i) {,8,1,0,1,3,0,0,0,0,10,30,12,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,297,                            sum += weightedResidualJacobian[i][pj] * qtf[i];,2,1,1,3,6,0,0,0,0,14,48,14,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,299,"                        maxCosine = FastMath.max(maxCosine, FastMath.abs(sum) / (s * cost));",20,7,0,3,6,1,12,0,0,41,68,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,303,            if (maxCosine <= orthoTolerance) {,0,0,0,1,3,0,0,0,0,4,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,311,            for (int j = 0; j < cols; ++j) {,8,1,0,1,3,0,0,0,0,10,32,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,312,"                diag[j] = FastMath.max(diag[j], jacNorm[j]);",4,0,1,4,8,3,4,4,0,28,44,1,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,316,            for (double ratio = 0; ratio < 1.0e-4;) {,0,0,0,1,3,0,0,0,0,4,41,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,319,                for (int j = 0; j < solvedCols; ++j) {,0,0,0,1,3,0,0,0,0,4,38,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,320,                    int pj = permutation[j];,2,0,1,1,2,0,0,0,0,6,24,11,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,321,                    oldX[pj] = point[pj];,0,0,0,2,4,0,0,0,0,6,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,323,                double previousCost = cost;,8,0,0,0,0,0,0,0,0,9,27,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,324,                double[] tmpVec = weightedResiduals;,4,0,0,1,2,0,0,0,0,4,36,9,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,325,                weightedResiduals = oldRes;,4,0,0,0,0,0,0,0,0,5,27,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,326,                oldRes    = tmpVec;,4,0,0,0,0,0,0,0,0,5,19,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,327,                tmpVec    = objective;,28,13,0,0,0,0,0,0,0,42,22,9,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,328,                objective = oldObj;,4,0,1,0,0,0,0,0,0,12,19,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,329,                oldObj    = tmpVec;,6,0,0,0,0,1,0,2,0,10,19,0,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,332,"                determineLMParameter(qtf, delta, diag, work1, work2, work3);",0,0,0,1,2,0,0,0,0,3,60,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,335,                double lmNorm = 0;,6,1,0,0,0,0,0,0,0,8,18,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,336,                for (int j = 0; j < solvedCols; ++j) {,8,1,0,1,3,0,0,0,0,10,38,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,337,                    int pj = permutation[j];,2,0,1,1,2,0,0,0,0,6,24,11,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,338,                    lmDir[pj] = -lmDir[pj];,0,0,1,2,4,0,0,0,0,10,23,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,339,                    point[pj] = oldX[pj] + lmDir[pj];,0,1,1,3,6,0,0,0,0,14,33,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,340,                    double s = diag[pj] * lmDir[pj];,0,0,0,2,4,0,0,0,0,6,32,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,341,                    lmNorm  += s * s;,6,1,0,0,0,0,0,0,0,8,17,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,343,                lmNorm = FastMath.sqrt(lmNorm);,0,0,0,1,2,0,0,0,0,3,31,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,345,                if (firstIteration) {,0,0,0,1,3,0,0,0,0,4,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,346,"                    delta = FastMath.min(delta, lmNorm);",2,0,0,1,2,0,8,0,0,11,36,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,350,                updateResidualsAndCost();,6,1,0,1,2,0,2,0,0,9,25,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,353,                double actRed = -1.0;,6,4,1,0,0,0,0,0,0,28,21,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,354,                if (0.1 * cost < previousCost) {,4,2,0,1,3,0,0,0,0,6,32,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,355,                    double r = cost / previousCost;,6,1,0,0,0,0,4,0,0,11,31,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,356,                    actRed = 1.0 - r * r;,6,2,0,0,0,0,0,0,0,9,21,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,361,                for (int j = 0; j < solvedCols; ++j) {,8,1,0,1,3,0,0,0,0,10,38,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,362,                    int pj = permutation[j];,6,2,0,1,2,0,0,0,0,9,24,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,363,                    double dirJ = lmDir[pj];,2,0,1,1,2,0,0,0,0,6,24,11,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,364,                    work1[j] = 0;,0,0,1,1,2,0,0,0,0,5,13,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,365,                    for (int i = 0; i <= j; ++i) {,10,2,0,1,3,0,0,0,0,13,30,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,366,                        work1[i] += weightedResidualJacobian[i][pj] * dirJ;,8,2,0,3,6,1,0,0,0,11,51,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,369,                double coeff1 = 0;,2,0,0,0,0,0,0,0,0,2,18,9,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,370,                for (int j = 0; j < solvedCols; ++j) {,0,0,0,1,3,0,0,0,0,4,38,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,371,                    coeff1 += work1[j] * work1[j];,2,1,1,2,4,0,0,0,0,12,30,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,373,                double pc2 = previousCost * previousCost;,10,1,0,0,0,0,0,2,0,13,41,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,374,                coeff1 = coeff1 / pc2;,8,1,0,0,0,0,0,2,0,12,22,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,375,                double coeff2 = lmPar * lmNorm * lmNorm / pc2;,10,2,0,0,0,0,0,0,0,12,46,9,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,376,                double preRed = coeff1 + 2 * coeff2;,2,0,1,0,0,0,0,0,0,6,36,13,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,377,                double dirDer = -(coeff1 + coeff2);,6,1,0,1,2,0,0,0,0,8,35,9,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,380,                ratio = (preRed == 0) ? 0 : (actRed / preRed);,12,2,0,2,4,0,0,0,0,17,46,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,383,                if (ratio <= 0.25) {,0,0,0,1,3,0,0,0,0,4,20,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,392,                    delta = 2 * lmNorm;,0,0,0,0,0,0,0,0,0,0,19,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,393,                    lmPar *= 0.5;,4,0,0,0,0,0,0,0,0,5,13,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,397,                if (ratio >= 1.0e-4) {,12,2,0,1,3,0,0,0,0,15,22,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,399,                    firstIteration = false;,2,0,0,0,0,0,0,0,0,4,23,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,400,                    xNorm = 0;,2,0,0,0,0,0,0,0,0,3,10,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,401,                    for (int k = 0; k < cols; ++k) {,0,0,0,1,3,0,0,0,0,4,32,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,402,                        double xK = diag[k] * point[k];,2,1,1,2,4,0,0,0,0,11,31,13,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,403,                        xNorm += xK * xK;,0,0,0,0,0,0,0,0,0,0,17,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,405,                    xNorm = FastMath.sqrt(xNorm);,2,0,0,1,2,0,6,0,0,9,29,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,406,"                    current = new VectorialPointValuePair(point, objective);",6,0,0,1,2,0,0,2,0,9,56,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,409,                    if (checker != null) {,2,1,0,1,3,0,0,0,0,3,22,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,411,"                        if (checker.converged(iter, previous, current)) {",6,0,1,2,5,1,10,0,0,19,49,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,431,                if ((FastMath.abs(actRed) <= costRelativeTolerance &&,4,3,0,1,4,1,12,0,0,20,53,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,440,                if ((FastMath.abs(actRed) <= 2.2204e-16) && (preRed <= 2.2204e-16) && (ratio <= 2.0)) {,4,4,0,5,11,0,6,0,0,14,87,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,443,                } else if (delta <= 2.2204e-16 * xNorm) {,0,0,0,1,4,0,0,0,0,5,41,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,446,                } else if (maxCosine <= 2.2204e-16)  {,6,1,0,1,4,0,0,0,0,8,38,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,450,            },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,451,        },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,481,        for (int j = 0; j < rank; ++j) {,0,0,0,1,3,0,0,0,0,4,32,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,482,            lmDir[permutation[j]] = qy[j];,2,0,1,3,6,0,12,2,0,27,30,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,484,        for (int j = rank; j < cols; ++j) {,0,0,0,1,3,0,0,0,0,4,35,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,487,        for (int k = rank - 1; k >= 0; --k) {,8,2,0,1,3,0,0,0,0,11,37,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,488,            int pk = permutation[k];,2,0,1,1,2,0,0,0,0,6,24,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,489,            double ypk = lmDir[pk] / diagR[pk];,2,1,1,2,4,0,0,0,0,11,35,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,490,            for (int i = 0; i < k; ++i) {,8,1,0,1,3,0,0,0,0,10,29,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,491,                lmDir[permutation[i]] -= ypk * weightedResidualJacobian[i][pk];,2,1,1,4,8,0,0,0,0,16,63,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,493,            lmDir[pk] = ypk;,2,0,1,1,2,0,0,0,0,7,16,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,498,        double dxNorm = 0;,12,2,0,0,0,0,0,0,0,16,18,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,499,        for (int j = 0; j < solvedCols; ++j) {,0,0,0,1,3,0,0,0,0,4,38,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,500,            int pj = permutation[j];,2,0,1,1,2,0,0,0,0,6,24,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,501,            double s = diag[pj] * lmDir[pj];,0,0,0,2,4,0,0,0,0,6,32,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,502,            work1[pj] = s;,2,0,1,1,2,0,0,0,0,7,14,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,503,            dxNorm += s * s;,0,0,0,0,0,0,0,0,0,0,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,505,        dxNorm = FastMath.sqrt(dxNorm);,4,0,0,1,2,0,10,0,0,16,31,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,506,        double fp = dxNorm - delta;,0,0,0,0,0,0,0,0,0,0,27,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,507,        if (fp <= 0.1 * delta) {,4,2,0,1,3,0,0,0,0,6,24,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,508,            lmPar = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,509,            return;,2,0,0,0,0,1,0,0,0,2,7,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,771,        for (int k = 0; k < cols; ++k) {,10,1,0,1,3,1,0,4,0,17,32,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,772,            permutation[k] = k;,2,0,1,1,2,0,0,0,0,8,19,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,773,            double norm2 = 0;,4,0,0,0,0,0,0,0,0,6,17,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,774,            for (int i = 0; i < weightedResidualJacobian.length; ++i) {,10,1,0,1,3,0,0,0,0,12,59,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,775,                double akk = weightedResidualJacobian[i][k];,2,0,1,2,4,0,0,0,0,8,44,9,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,776,                norm2 += akk * akk;,6,1,0,0,0,0,0,0,0,8,19,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,778,            jacNorm[k] = FastMath.sqrt(norm2);,12,1,1,2,4,0,6,0,0,25,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,782,        for (int k = 0; k < cols; ++k) {,8,2,1,1,3,0,8,0,0,28,32,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,785,            int nextColumn = -1;,6,0,0,0,0,0,0,0,0,6,20,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,786,            double ak2 = Double.NEGATIVE_INFINITY;,6,0,0,0,0,0,0,0,0,6,38,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,787,            for (int i = k; i < cols; ++i) {,14,1,1,1,3,0,0,0,0,22,32,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,788,                double norm2 = 0;,2,0,0,0,0,0,0,0,0,2,17,9,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,789,                for (int j = k; j < weightedResidualJacobian.length; ++j) {,0,0,0,1,3,0,0,0,0,4,59,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,790,                    double aki = weightedResidualJacobian[j][permutation[i]];,0,0,0,3,6,0,0,0,0,9,57,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,791,                    norm2 += aki * aki;,0,0,0,0,0,0,0,0,0,0,19,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,793,                if (Double.isInfinite(norm2) || Double.isNaN(norm2)) {,0,1,0,3,7,0,12,0,0,13,54,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,797,                if (norm2 > ak2) {,6,1,0,1,3,0,0,0,0,7,18,1,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,798,                    nextColumn = i;,8,1,1,0,0,0,0,0,0,15,15,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,799,                    ak2        = norm2;,0,0,0,0,0,0,0,0,0,0,19,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,802,            if (ak2 <= qrRankingThreshold) {,8,2,0,1,3,0,0,0,0,10,32,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,806,            int pk                  = permutation[nextColumn];,6,1,0,1,2,0,0,0,0,7,50,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,807,            permutation[nextColumn] = permutation[k];,0,0,0,2,4,0,0,0,0,6,41,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,808,            permutation[k]          = pk;,2,0,1,1,2,0,0,0,0,7,29,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,811,            double akk   = weightedResidualJacobian[k][pk];,0,0,0,2,4,0,0,0,0,6,47,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,812,            double alpha = (akk > 0) ? -FastMath.sqrt(ak2) : FastMath.sqrt(ak2);,10,2,0,3,6,0,14,0,0,30,68,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,813,            double betak = 1.0 / (ak2 - akk * alpha);,0,0,0,1,2,0,0,0,0,3,41,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,814,            beta[pk]     = betak;,4,1,0,1,2,0,0,0,0,5,21,9,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,817,            diagR[pk]        = alpha;,2,0,1,1,2,0,0,0,0,7,25,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,818,            weightedResidualJacobian[k][pk] -= alpha;,2,0,1,2,4,0,0,0,0,9,41,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,821,            for (int dk = cols - 1 - k; dk > 0; --dk) {,10,2,0,1,3,0,0,0,0,13,43,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,822,                double gamma = 0;,2,0,0,0,0,0,0,0,0,2,17,9,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,823,                for (int j = k; j < weightedResidualJacobian.length; ++j) {,12,1,0,1,3,0,0,0,0,14,59,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,824,                    gamma += weightedResidualJacobian[j][pk] * weightedResidualJacobian[j][permutation[k + dk]];,6,2,1,5,10,0,0,0,0,21,92,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,826,                gamma *= betak;,6,0,0,0,0,0,0,0,0,7,15,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,827,                for (int j = k; j < weightedResidualJacobian.length; ++j) {,0,0,0,1,3,0,0,0,0,4,59,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,828,                    weightedResidualJacobian[j][permutation[k + dk]] -= gamma * weightedResidualJacobian[j][pk];,0,0,0,5,10,0,0,0,0,15,92,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,832,        rank = solvedCols;,4,0,0,0,0,0,0,0,0,5,18,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,833,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,841,        for (int k = 0; k < cols; ++k) {,8,1,0,1,3,0,0,0,0,10,32,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,842,            int pk = permutation[k];,10,2,1,1,2,1,0,0,0,17,24,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,843,            double gamma = 0;,2,0,0,0,0,0,0,0,0,2,17,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,844,            for (int i = k; i < rows; ++i) {,14,1,0,1,3,0,0,0,0,17,32,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,845,                gamma += weightedResidualJacobian[i][pk] * y[i];,2,1,1,3,6,0,0,0,0,14,48,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,847,            gamma *= beta[pk];,4,1,1,1,2,0,0,0,0,11,18,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,848,            for (int i = k; i < rows; ++i) {,10,1,0,1,3,0,0,0,0,12,32,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,849,                y[i] -= gamma * weightedResidualJacobian[i][pk];,6,1,1,3,6,0,0,0,0,19,48,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,852,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,102,        ++jacobianEvaluations;,2,0,1,0,0,0,12,0,0,17,22,11,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,103,        weightedResidualJacobian = jF.value(point);,2,0,0,1,2,0,6,0,0,9,43,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,104,        if (weightedResidualJacobian.length != rows) {,12,3,0,1,3,0,0,0,0,16,46,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,108,        final double[] residualsWeights = getWeightRef();,2,0,0,2,4,1,2,0,0,5,49,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,110,        for (int i = 0; i < rows; i++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,111,            final double[] ji = weightedResidualJacobian[i];,0,0,0,2,4,0,0,0,0,6,48,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,112,            double wi = FastMath.sqrt(residualsWeights[i]);,2,0,1,2,4,0,4,0,0,10,47,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,113,            for (int j = 0; j < cols; ++j) {,0,0,0,1,3,0,0,0,0,4,32,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,115,                weightedResidualJacobian[i][j] = -ji[j]*wi;,2,1,1,3,6,0,0,0,0,15,43,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,118,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,128,        objective = computeObjectiveValue(point);,2,0,0,1,2,0,4,0,0,7,41,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,129,        if (objective.length != rows) {,6,2,1,1,3,0,0,0,0,21,31,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,133,        final double[] targetValues = getTargetRef();,2,0,0,2,4,1,2,0,0,5,45,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,134,        final double[] residualsWeights = getWeightRef();,2,0,0,2,4,1,2,0,0,5,49,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,136,        cost = 0;,2,0,0,0,0,0,0,0,0,3,9,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,137,        int index = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,138,        for (int i = 0; i < rows; i++) {,0,0,0,1,3,0,0,0,0,4,32,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,139,            final double residual = targetValues[i] - objective[i];,2,1,1,2,4,1,0,0,0,12,55,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,140,            weightedResiduals[i]= residual*FastMath.sqrt(residualsWeights[i]);,2,1,1,3,6,0,4,0,0,16,66,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,141,            cost += residualsWeights[i] * residual * residual;,14,2,1,1,2,0,0,0,0,22,50,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,142,            index += cols;,4,0,0,0,0,0,0,0,0,5,14,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,144,        cost = FastMath.sqrt(cost);,4,0,0,1,2,0,6,0,0,11,27,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,145,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,237,        jacobianEvaluations = 0;,2,0,0,0,0,0,0,0,0,3,24,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,240,        jF = f.jacobian();,16,3,0,1,2,2,14,0,0,38,18,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,241,        this.residuals = new double[target.length];,6,0,0,1,2,0,0,0,0,7,43,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,244,        point = startPoint.clone();,2,0,0,1,2,0,4,0,0,7,27,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,245,        rows = target.length;,6,0,0,0,0,0,0,0,0,7,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,246,        cols = point.length;,10,1,0,0,0,0,14,0,0,26,20,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,248,        weightedResidualJacobian = new double[rows][cols];,0,0,0,2,4,0,0,0,0,6,50,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,249,        this.weightedResiduals = new double[rows];,2,0,1,1,2,0,0,0,0,5,42,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,251,        cost = Double.POSITIVE_INFINITY;,6,0,0,0,0,0,0,0,0,7,32,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,253,"        return super.optimize(maxEval, f, target, weights, startPoint);",12,0,0,1,2,1,0,0,0,12,63,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,43,public abstract class AbstractLeastSquaresOptimizer,2,0,0,0,0,2,0,0,0,4,51,1,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/AbstractConvergenceChecker,58,73,        return relativeThreshold;,6,1,0,0,0,1,0,0,0,8,25,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/AbstractConvergenceChecker,58,80,        return absoluteThreshold;,2,0,0,0,0,1,0,0,0,2,25,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,76,        final double[] p = previous.getValueRef();,8,1,0,2,4,1,4,0,0,15,42,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,77,        final double[] c = current.getValueRef();,2,0,0,2,4,1,4,0,0,7,41,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,78,        for (int i = 0; i < p.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,79,            final double pi         = p[i];,0,0,0,1,2,0,0,0,0,3,31,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,80,            final double ci         = c[i];,2,0,1,1,2,1,0,0,0,7,31,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,81,            final double difference = FastMath.abs(pi - ci);,6,1,0,1,2,1,4,0,0,12,48,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,82,"            final double size       = FastMath.max(FastMath.abs(pi), FastMath.abs(ci));",2,0,0,3,6,1,16,0,0,19,75,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,83,            if (difference > size * getRelativeThreshold() &&,10,4,0,1,3,0,2,0,0,16,49,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,85,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,34,public class SimpleVectorialValueChecker,0,0,0,0,0,0,0,0,0,0,40,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,58,44,        maximalCount = max;,4,0,0,0,0,0,0,0,0,5,19,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,58,45,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,58,84,        if (++count > maximalCount) {,0,0,0,1,3,0,0,0,0,4,29,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,58,87,    },4,0,0,0,1,0,0,0,0,6,1,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,58,93,        count = 0;,6,0,0,0,0,1,0,2,0,10,10,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,58,94,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,55,    private static final double EXP_INT_TABLE_A[] = new double[1500];,0,0,0,2,4,0,0,0,0,6,65,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,60,    private static final double EXP_INT_TABLE_B[] = new double[1500];,2,0,0,2,4,3,0,0,0,5,65,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,65,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,2,0,0,2,4,3,0,0,0,5,66,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,70,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,2,0,0,2,4,3,0,0,0,5,66,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,73,    private static final double FACT[] = new double[20];,12,1,0,2,4,3,0,0,0,18,52,1,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,76,    private static final double LN_MANT[][] = new double[1024][];,8,1,1,4,8,3,0,0,0,21,61,1,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,85,    private static final double LN_SPLIT_COEF[][] = {,0,0,0,2,5,0,8,0,0,8,49,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,105,    private static final double LN_QUICK_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,118,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,0,10,0,0,13,51,9,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,128,    private static final double SINE_TABLE_A[] = new double[14];,2,0,0,2,4,3,0,0,0,5,60,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,131,    private static final double SINE_TABLE_B[] = new double[14];,0,0,0,2,4,0,0,0,0,6,60,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,134,    private static final double COSINE_TABLE_A[] = new double[14];,6,1,0,2,4,3,0,0,0,10,62,1,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,137,    private static final double COSINE_TABLE_B[] = new double[14];,2,1,0,2,4,1,4,0,0,8,62,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,140,    private static final double TANGENT_TABLE_A[] = new double[14];,2,0,0,2,4,3,0,0,0,5,63,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,143,    private static final double TANGENT_TABLE_B[] = new double[14];,8,1,0,2,4,4,6,0,0,19,63,1,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,146,    private static final long RECIP_2PI[] = new long[] {,0,0,0,2,5,0,0,0,0,7,52,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,167,    private static final long PI_O_4_BITS[] = new long[] {,2,0,0,2,5,3,0,0,0,5,54,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,175,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",2,0,0,2,4,3,0,0,0,5,126,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,178,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0,0,0,1,3,0,0,0,0,4,61,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,208,        FACT[0] = 1.0;,2,0,1,1,2,0,0,0,0,5,14,1,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,209,        for (i = 1; i < FACT.length; i++) {,16,1,0,1,3,0,0,0,0,20,35,1,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,210,            FACT[i] = FACT[i-1] * i;,0,0,0,2,4,0,0,0,0,6,24,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,213,        double tmp[] = new double[2];,0,0,0,2,4,0,0,0,0,6,29,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,214,        double recip[] = new double[2];,0,0,0,2,4,0,0,0,0,6,31,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,217,        for (i = 0; i < 750; i++) {,0,0,0,1,3,0,0,0,0,4,27,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,218,"            expint(i, tmp);",0,0,0,1,2,0,14,0,0,14,15,1,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,219,            EXP_INT_TABLE_A[i+750] = tmp[0];,2,1,1,2,4,0,0,0,0,8,32,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,220,            EXP_INT_TABLE_B[i+750] = tmp[1];,6,2,1,2,4,0,14,0,0,27,32,1,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,222,            if (i != 0) {,6,1,0,1,3,0,0,0,0,7,13,1,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,224,"                splitReciprocal(tmp, recip);",2,1,0,1,2,0,6,0,0,9,28,1,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,225,                EXP_INT_TABLE_A[750-i] = recip[0];,0,0,0,2,4,0,0,0,0,6,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,226,                EXP_INT_TABLE_B[750-i] = recip[1];,0,0,0,2,4,0,0,0,0,6,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,231,        for (i = 0; i < EXP_FRAC_TABLE_A.length; i++) {,0,0,0,1,3,0,0,0,0,4,47,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,232,"            slowexp(i/1024.0, tmp);",0,0,0,1,2,0,0,0,0,3,23,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,233,            EXP_FRAC_TABLE_A[i] = tmp[0];,2,0,0,2,4,0,0,2,0,5,29,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,234,            EXP_FRAC_TABLE_B[i] = tmp[1];,0,0,0,2,4,0,0,0,0,6,29,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,238,        for (i = 0; i < LN_MANT.length; i++) {,0,0,0,1,3,0,0,0,0,4,38,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,239,            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,0,0,0,4,8,0,0,0,0,12,79,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,240,            LN_MANT[i] = slowLog(d);,0,0,0,2,4,0,0,0,0,6,24,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,244,        buildSinCosTables();,0,0,0,1,2,0,0,0,0,3,20,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,245,    },6,1,1,0,1,0,8,0,0,20,1,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,277,        return Math.sqrt(a);,0,0,0,1,2,1,0,0,0,4,20,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,697,"        return exp(x, 0.0, null);",0,0,0,1,2,1,0,0,0,4,25,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,716,        if (x < 0.0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,717,            intVal = (int) -x;,4,0,0,1,2,0,0,4,0,8,18,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,719,            if (intVal > 746) {,14,3,1,1,3,0,4,2,0,25,19,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,727,            if (intVal > 709) {,0,0,0,1,3,0,0,0,0,4,19,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,737,            if (intVal == 709) {,2,1,0,1,3,0,0,0,0,3,20,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,747,            intVal++;,0,0,0,0,0,0,0,0,0,0,9,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,749,            intPartA = EXP_INT_TABLE_A[750-intVal];,0,0,0,1,2,0,0,0,0,3,39,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,750,            intPartB = EXP_INT_TABLE_B[750-intVal];,2,1,0,1,2,0,0,0,0,3,39,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,752,            intVal = -intVal;,0,0,0,0,0,0,0,0,0,0,17,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,754,            intVal = (int) x;,0,0,0,1,2,0,0,0,0,3,17,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,756,            if (intVal > 709) {,2,0,0,1,3,0,6,0,0,9,19,11,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,764,            intPartA = EXP_INT_TABLE_A[750+intVal];,4,1,1,1,2,0,0,0,0,8,39,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,765,            intPartB = EXP_INT_TABLE_B[750+intVal];,6,2,1,1,2,0,4,0,0,17,39,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,772,        final int intFrac = (int) ((x - intVal) * 1024.0);,2,0,0,3,6,0,0,2,0,5,50,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,773,        final double fracPartA = EXP_FRAC_TABLE_A[intFrac];,0,0,0,1,2,0,0,0,0,3,51,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,774,        final double fracPartB = EXP_FRAC_TABLE_B[intFrac];,2,0,1,1,2,1,0,0,0,7,51,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,780,        final double epsilon = x - (intVal + intFrac / 1024.0);,8,3,0,1,2,1,0,0,0,12,55,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,789,        double z = 0.04168701738764507;,2,0,0,0,0,0,0,0,0,2,31,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,790,        z = z * epsilon + 0.1666666505023083;,10,1,0,0,0,0,0,0,0,12,37,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,791,        z = z * epsilon + 0.5000000000042687;,0,0,0,0,0,0,0,0,0,0,37,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,792,        z = z * epsilon + 1.0;,6,2,1,0,0,0,2,0,0,20,22,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,793,        z = z * epsilon + -3.940510424527919E-20;,4,1,0,0,0,0,12,0,0,17,41,9,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,800,        double tempA = intPartA * fracPartA;,2,1,0,0,0,0,0,0,0,3,36,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,801,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,0,0,0,0,0,0,0,0,0,0,82,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,807,        final double tempC = tempB + tempA;,6,1,0,0,0,1,0,0,0,8,35,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,809,        if (extra != 0.0) {,2,0,0,1,3,0,0,0,0,3,19,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,812,            result = tempC*z + tempB + tempA;,10,3,0,0,0,0,0,0,0,14,33,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,815,        if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,821,        return result;,6,1,1,0,0,1,4,0,0,15,14,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,987,        final double xs[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,988,        final double ys[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,989,        final double facts[] = new double[2];,10,2,0,2,4,1,0,0,0,14,37,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,990,        final double as[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,991,"        split(x, xs);",0,0,0,1,2,0,0,0,0,3,13,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,992,        ys[0] = ys[1] = 0.0;,0,0,0,2,4,0,0,0,0,6,20,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,994,        for (int i = 19; i >= 0; i--) {,6,1,0,1,3,0,0,0,0,8,31,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,995,"            splitMult(xs, ys, as);",0,0,0,1,2,0,8,0,0,8,22,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,996,            ys[0] = as[0];,0,0,0,2,4,0,0,0,0,6,14,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,997,            ys[1] = as[1];,0,0,1,2,4,0,0,0,0,5,14,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,999,"            split(FACT[i], as);",0,0,0,2,4,0,0,0,0,6,19,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1000,"            splitReciprocal(as, facts);",0,0,0,1,2,0,6,0,0,6,27,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1002,"            splitAdd(ys, facts, as);",0,0,0,1,2,0,0,0,0,3,24,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1003,            ys[0] = as[0];,0,0,1,2,4,0,0,0,0,5,14,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1004,            ys[1] = as[1];,0,0,0,2,4,0,0,0,0,6,14,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1007,        if (result != null) {,12,3,1,1,3,0,0,0,0,19,21,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1008,            result[0] = ys[0];,0,0,1,2,4,0,0,0,0,5,18,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1009,            result[1] = ys[1];,2,1,1,2,4,0,0,0,0,8,18,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1012,        return ys[0] + ys[1];,14,5,0,2,4,1,0,0,0,19,21,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1021,        if (d < 8e298 && d > -8e298) {,0,0,0,1,3,0,0,0,0,4,30,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1022,            final double a = d * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1023,            split[0] = (d + a) - a;,6,2,1,2,4,0,0,0,0,11,23,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1024,            split[1] = d - split[0];,0,0,0,2,4,0,6,0,0,6,24,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1025,        } else {,4,0,0,0,2,0,2,0,0,6,8,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1030,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1037,        final double c = a[0] + a[1];,18,6,1,2,4,1,6,0,0,37,29,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1038,        final double d = -(c - a[0] - a[1]);,0,0,0,3,6,0,0,0,0,9,36,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1040,        if (c < 8e298 && c > -8e298) {,0,0,0,1,3,0,0,0,0,4,30,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1041,            double z = c * HEX_40000000;,12,3,0,0,0,0,0,0,0,17,28,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1042,            a[0] = (c + z) - z;,0,0,0,2,4,0,0,0,0,6,19,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1043,            a[1] = c - a[0] + d;,4,2,1,2,4,0,4,0,0,15,20,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1044,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1045,            double z = c * 9.31322574615478515625E-10;,2,1,0,0,0,0,0,0,0,3,42,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1046,            a[0] = (c + z - c) * HEX_40000000;,8,3,1,2,4,0,0,0,0,14,34,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1047,            a[1] = c - a[0] + d;,6,2,1,2,4,1,0,0,0,18,20,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1049,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1057,        ans[0] = a[0] * b[0];,0,1,1,3,6,0,0,0,0,8,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1058,        ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];,2,5,1,7,14,0,0,0,0,22,49,1,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1061,        resplit(ans);,2,0,0,1,2,0,4,2,0,8,13,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1062,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1070,        ans[0] = a[0] + b[0];,0,0,0,3,6,0,0,0,0,9,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1071,        ans[1] = a[1] + b[1];,0,0,0,3,6,0,0,0,0,9,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1073,        resplit(ans);,0,0,0,1,2,0,4,0,0,4,13,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1074,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1095,        final double b = 1.0/4194304.0;,6,1,0,0,0,1,8,0,0,17,31,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1096,        final double a = 1.0 - b;,6,1,0,0,0,0,0,0,0,7,25,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1098,        if (in[0] == 0.0) {,10,2,1,2,5,0,0,0,0,15,19,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1103,        result[0] = a / in[0];,2,1,1,2,4,0,0,0,0,8,22,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1104,        result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);,4,7,1,9,18,0,0,0,0,26,60,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1106,        if (result[1] != result[1]) { // can happen if result[1] is NAN,8,2,1,4,9,0,10,0,0,28,63,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1107,            result[1] = 0.0;,0,0,1,1,2,0,0,0,0,3,16,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1111,        resplit(result);,0,0,0,1,2,0,0,0,0,3,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1113,        for (int i = 0; i < 2; i++) {,8,1,0,1,3,0,0,0,0,10,29,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1115,            double err = 1.0 - result[0] * in[0] - result[0] * in[1] -,2,6,1,4,8,0,0,0,0,16,58,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1118,            err = err * (result[0] + result[1]);,4,0,0,3,6,0,0,0,0,4,36,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1120,            result[1] += err;,2,0,1,1,2,0,8,0,0,13,17,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1122,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1130,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1131,        final double ys[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1132,        final double zs[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1135,"        split(a[0], xs);",18,2,1,2,4,0,4,2,0,28,16,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1136,"        split(b[0], ys);",0,0,1,2,4,0,4,0,0,6,16,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1137,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,0,0,0,3,22,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1139,        result[0] = zs[0];,0,0,0,2,4,0,0,0,0,6,18,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1140,        result[1] = zs[1];,0,0,1,2,4,0,0,0,0,5,18,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1143,"        split(b[1], ys);",0,0,1,2,4,0,4,0,0,6,16,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1144,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,0,0,0,1,22,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1146,        double tmp = result[0] + zs[0];,2,1,1,2,4,0,0,0,0,7,31,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1147,        result[1] = result[1] - (tmp - result[0] - zs[0]);,0,0,0,5,10,0,0,0,0,15,50,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1148,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1149,        tmp = result[0] + zs[1];,2,1,1,2,4,0,0,0,0,8,24,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1150,        result[1] = result[1] - (tmp - result[0] - zs[1]);,0,0,0,5,10,0,0,0,0,15,50,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1151,        result[0] = tmp;,6,0,1,1,2,0,0,0,0,9,16,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1154,"        split(a[1], xs);",0,0,0,2,4,0,0,0,0,6,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1155,"        split(b[0], ys);",2,0,1,2,4,0,4,0,0,8,16,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1156,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,8,0,0,8,22,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1158,        tmp = result[0] + zs[0];,2,1,0,2,4,0,0,0,0,3,24,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1159,        result[1] = result[1] - (tmp - result[0] - zs[0]);,0,0,0,5,10,0,0,0,0,15,50,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1160,        result[0] = tmp;,0,0,0,1,2,0,0,0,0,3,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1161,        tmp = result[0] + zs[1];,0,0,0,2,4,0,0,0,0,6,24,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1162,        result[1] = result[1] - (tmp - result[0] - zs[1]);,10,8,1,5,10,0,0,0,0,27,50,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1163,        result[0] = tmp;,0,0,0,1,2,0,0,0,0,3,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1166,"        split(a[1], xs);",4,0,0,2,4,0,0,0,0,4,16,9,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1167,"        split(b[1], ys);",0,0,1,2,4,0,4,0,0,6,16,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1168,"        splitMult(xs, ys, zs);",2,1,0,1,2,0,8,0,0,11,22,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1170,        tmp = result[0] + zs[0];,2,1,1,2,4,0,0,0,0,8,24,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1171,        result[1] = result[1] - (tmp - result[0] - zs[0]);,4,0,0,5,10,0,8,0,0,12,50,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1172,        result[0] = tmp;,6,2,0,1,2,1,10,0,0,19,16,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1173,        tmp = result[0] + zs[1];,0,0,0,2,4,0,0,0,0,6,24,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1174,        result[1] = result[1] - (tmp - result[0] - zs[1]);,0,0,0,5,10,0,0,0,0,15,50,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1175,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1176,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1185,        final double xs[] = new double[2];,0,0,1,2,4,0,4,0,0,8,34,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1186,        final double as[] = new double[2];,2,0,0,2,4,0,0,0,0,3,34,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1187,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1196,        xs[0] = 2.718281828459045;,0,0,1,1,2,0,0,0,0,3,26,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1197,        xs[1] = 1.4456468917292502E-16;,6,1,1,1,2,0,0,0,0,11,31,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1199,"        split(1.0, ys);",0,0,0,1,2,0,4,0,0,4,15,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1201,        while (p > 0) {,10,3,0,1,3,0,0,0,0,13,15,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1202,            if ((p & 1) != 0) {,0,0,0,2,5,0,0,0,0,7,19,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1203,"                quadMult(ys, xs, as);",12,3,0,1,2,1,8,0,0,27,21,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1204,                ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1207,"            quadMult(xs, xs, as);",8,2,0,1,2,0,8,0,0,19,21,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1208,            xs[0] = as[0]; xs[1] = as[1];,0,0,0,4,8,0,0,0,0,12,29,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1210,            p >>= 1;,2,0,0,0,0,0,4,2,0,8,8,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1213,        if (result != null) {,12,2,0,1,3,0,0,0,0,15,21,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1214,            result[0] = ys[0];,0,0,0,2,4,0,0,0,0,6,18,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1215,            result[1] = ys[1];,0,0,0,2,4,0,0,0,0,6,18,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1217,            resplit(result);,0,0,0,1,2,0,0,0,0,3,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1220,        return ys[0] + ys[1];,6,2,1,2,4,1,0,0,0,12,21,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1716,        double x[] = new double[2];,0,0,0,2,4,0,0,0,0,6,27,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1717,        double x2[] = new double[2];,0,0,0,2,4,0,0,0,0,6,28,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1718,        double y[] = new double[2];,2,0,0,2,4,0,0,0,0,2,27,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1719,        double a[] = new double[2];,2,1,0,2,4,0,0,0,0,3,27,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1721,"        split(xi, x);",0,0,0,1,2,0,6,0,0,6,13,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1724,        x[0] += 1.0;,0,0,0,1,2,0,0,0,0,3,12,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1725,        resplit(x);,0,0,0,1,2,0,4,0,0,4,11,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1726,"        splitReciprocal(x, a);",4,0,0,1,2,0,0,0,0,4,22,11,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1727,        x[0] -= 2.0;,0,0,0,1,2,0,0,0,0,3,12,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1728,        resplit(x);,0,0,0,1,2,0,0,0,0,3,11,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1729,"        splitMult(x, a, y);",0,0,0,1,2,0,6,0,0,6,19,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1730,        x[0] = y[0];,0,0,0,2,4,0,0,0,0,6,12,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1731,        x[1] = y[1];,0,0,0,2,4,0,0,0,0,6,12,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1734,"        splitMult(x, x, x2);",0,0,0,1,2,0,8,0,0,8,20,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1740,        y[0] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][0];,10,2,1,3,6,1,0,0,0,18,48,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1741,        y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];,4,1,1,3,6,0,0,0,0,10,48,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1743,        for (int i = LN_SPLIT_COEF.length-2; i >= 0; i--) {,0,0,1,1,3,0,4,0,0,13,51,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1744,"            splitMult(y, x2, a);",0,0,0,1,2,0,8,0,0,8,20,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1745,            y[0] = a[0];,6,0,1,2,4,0,0,0,0,11,12,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1746,            y[1] = a[1];,0,0,0,2,4,0,0,0,0,6,12,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1747,"            splitAdd(y, LN_SPLIT_COEF[i], a);",0,0,0,2,4,0,0,0,0,6,33,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1748,            y[0] = a[0];,0,0,0,2,4,0,0,0,0,6,12,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1749,            y[1] = a[1];,2,1,0,2,4,0,0,0,0,3,12,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1752,"        splitMult(y, x, a);",0,0,0,1,2,0,0,0,0,3,19,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1753,        y[0] = a[0];,0,0,0,2,4,0,0,0,0,6,12,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1754,        y[1] = a[1];,0,0,1,2,4,0,0,0,0,5,12,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1756,        return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1766,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1767,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1768,        final double facts[] = new double[2];,8,2,0,2,4,1,0,0,0,13,37,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1769,        final double as[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1770,"        split(x, xs);",0,0,0,1,2,0,6,0,0,6,13,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1771,        ys[0] = ys[1] = 0.0;,0,0,1,2,4,0,0,0,0,6,20,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1773,        for (int i = 19; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,31,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1774,"            splitMult(xs, ys, as);",0,0,0,1,2,0,0,0,0,3,22,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1775,            ys[0] = as[0]; ys[1] = as[1];,4,1,0,4,8,0,0,0,0,5,29,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1777,            if ( (i & 1) == 0) {,0,0,0,2,5,0,0,0,0,7,20,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1778,                continue;,8,1,0,0,0,0,0,0,0,10,9,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1781,"            split(FACT[i], as);",0,0,0,2,4,0,0,0,0,6,19,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1782,"            splitReciprocal(as, facts);",0,0,0,1,2,0,0,0,0,3,27,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1784,            if ( (i & 2) != 0 ) {,2,0,0,2,5,0,0,0,0,2,21,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1785,                facts[0] = -facts[0];,0,0,1,2,4,0,0,0,0,6,21,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1786,                facts[1] = -facts[1];,0,0,1,2,4,0,0,0,0,6,21,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1789,"            splitAdd(ys, facts, as);",4,0,0,1,2,0,8,0,0,13,24,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1790,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1793,        if (result != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1794,            result[0] = ys[0];,0,0,1,2,4,0,0,0,0,5,18,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1795,            result[1] = ys[1];,0,0,1,2,4,0,0,0,0,5,18,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1798,        return ys[0] + ys[1];,0,0,0,2,4,1,0,0,0,7,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1809,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1810,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1811,        final double facts[] = new double[2];,0,0,0,2,4,0,0,0,0,6,37,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1812,        final double as[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1813,"        split(x, xs);",0,0,0,1,2,0,0,0,0,3,13,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1814,        ys[0] = ys[1] = 0.0;,0,0,0,2,4,0,0,0,0,6,20,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1816,        for (int i = 19; i >= 0; i--) {,6,1,0,1,3,0,0,0,0,8,31,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1817,"            splitMult(xs, ys, as);",2,0,0,1,2,1,12,0,0,15,22,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1818,            ys[0] = as[0]; ys[1] = as[1];,6,1,1,4,8,0,4,0,0,22,29,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1820,            if ( (i & 1) != 0) {,0,0,0,2,5,0,0,0,0,7,20,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1821,                continue;,2,0,0,0,0,0,0,0,0,3,9,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1824,"            split(FACT[i], as);",0,0,0,2,4,0,0,0,0,6,19,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1825,"            splitReciprocal(as, facts);",0,0,0,1,2,0,6,0,0,6,27,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1827,            if ( (i & 2) != 0 ) {,2,2,0,2,5,0,0,0,0,4,21,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1828,                facts[0] = -facts[0];,2,0,1,2,4,0,0,0,0,8,21,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1829,                facts[1] = -facts[1];,4,0,1,2,4,0,0,0,0,11,21,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1832,"            splitAdd(ys, facts, as);",6,1,0,1,2,1,8,0,0,16,24,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1833,            ys[0] = as[0]; ys[1] = as[1];,0,0,0,4,8,0,0,0,0,12,29,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1836,        if (result != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1837,            result[0] = ys[0];,0,0,1,2,4,0,0,0,0,5,18,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1838,            result[1] = ys[1];,0,0,0,2,4,0,0,0,0,6,18,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1841,        return ys[0] + ys[1];,12,3,1,2,4,1,0,0,0,21,21,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1847,        final double result[] = new double[2];,2,0,0,2,4,1,0,0,0,3,38,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1850,        for (int i = 0; i < 7; i++) {,6,1,0,1,3,0,0,0,0,8,29,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1851,            double x = i / 8.0;,4,1,0,0,0,0,0,0,0,5,19,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1853,"            slowSin(x, result);",0,0,0,1,2,0,0,0,0,3,19,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1854,            SINE_TABLE_A[i] = result[0];,2,0,1,2,4,0,0,0,0,11,28,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1855,            SINE_TABLE_B[i] = result[1];,0,0,1,2,4,0,0,0,0,7,28,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1857,"            slowCos(x, result);",0,0,0,1,2,0,0,0,0,3,19,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1858,            COSINE_TABLE_A[i] = result[0];,0,0,0,2,4,0,0,0,0,6,30,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1859,            COSINE_TABLE_B[i] = result[1];,0,0,0,2,4,0,0,0,0,6,30,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1863,        for (int i = 7; i < 14; i++) {,6,1,0,1,3,0,0,0,0,8,30,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1864,            double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,28,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1865,            double ys[] = new double[2];,4,0,0,2,4,0,0,0,0,5,28,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1866,            double as[] = new double[2];,0,0,0,2,4,0,0,0,0,6,28,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1867,            double bs[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1868,            double temps[] = new double[2];,8,1,0,2,4,0,0,0,0,10,31,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1870,            if ( (i & 1) == 0) {,2,2,0,2,5,0,0,0,0,4,20,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1872,                xs[0] = SINE_TABLE_A[i/2];,8,1,0,2,4,0,0,0,0,10,26,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1873,                xs[1] = SINE_TABLE_B[i/2];,2,1,1,2,4,0,0,0,0,8,26,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1874,                ys[0] = COSINE_TABLE_A[i/2];,8,1,1,2,4,0,0,2,0,16,28,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1875,                ys[1] = COSINE_TABLE_B[i/2];,2,1,1,2,4,0,0,0,0,8,28,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1878,"                splitMult(xs, ys, result);",0,0,0,1,2,0,0,0,0,3,26,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1879,                SINE_TABLE_A[i] = result[0] * 2.0;,0,0,0,2,4,0,0,0,0,6,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1880,                SINE_TABLE_B[i] = result[1] * 2.0;,6,2,1,2,4,0,0,0,0,16,34,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1883,"                splitMult(ys, ys, as);",0,0,0,1,2,0,0,0,0,3,22,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1884,"                splitMult(xs, xs, temps);",0,0,0,1,2,0,8,0,0,8,25,9,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1885,                temps[0] = -temps[0];,0,0,0,2,4,0,0,0,0,6,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1886,                temps[1] = -temps[1];,4,2,1,2,4,0,0,0,0,12,21,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1887,"                splitAdd(as, temps, result);",0,0,0,1,2,0,0,0,0,3,28,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1888,                COSINE_TABLE_A[i] = result[0];,0,0,1,2,4,0,0,0,0,7,30,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1889,                COSINE_TABLE_B[i] = result[1];,0,0,1,2,4,0,0,0,0,7,30,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1891,                xs[0] = SINE_TABLE_A[i/2];,2,1,1,2,4,0,0,0,0,8,26,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1892,                xs[1] = SINE_TABLE_B[i/2];,0,0,0,2,4,0,0,0,0,6,26,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1893,                ys[0] = COSINE_TABLE_A[i/2];,2,1,1,2,4,0,0,0,0,8,28,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1894,                ys[1] = COSINE_TABLE_B[i/2];,0,0,0,2,4,0,0,0,0,6,28,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1895,                as[0] = SINE_TABLE_A[i/2+1];,2,2,1,2,4,0,0,0,0,9,28,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1896,                as[1] = SINE_TABLE_B[i/2+1];,0,0,0,2,4,0,0,0,0,6,28,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1897,                bs[0] = COSINE_TABLE_A[i/2+1];,2,2,1,2,4,0,0,0,0,9,30,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1898,                bs[1] = COSINE_TABLE_B[i/2+1];,6,2,1,2,4,0,0,0,0,15,30,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1901,"                splitMult(xs, bs, temps);",0,0,0,1,2,0,0,0,0,3,25,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1902,"                splitMult(ys, as, result);",0,0,0,1,2,0,8,0,0,8,26,9,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1903,"                splitAdd(result, temps, result);",0,0,1,1,2,0,0,0,0,6,32,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1904,                SINE_TABLE_A[i] = result[0];,2,0,1,2,4,0,0,0,0,5,28,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1905,                SINE_TABLE_B[i] = result[1];,6,1,1,2,4,1,0,0,0,15,28,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1908,"                splitMult(ys, bs, result);",0,0,0,1,2,0,8,0,0,8,26,9,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1909,"                splitMult(xs, as, temps);",0,0,0,1,2,0,8,0,0,8,25,9,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1910,                temps[0] = -temps[0];,0,0,1,2,4,0,0,0,0,6,21,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1911,                temps[1] = -temps[1];,0,0,1,2,4,0,0,0,0,10,21,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1912,"                splitAdd(result, temps, result);",0,0,0,1,2,0,0,0,0,3,32,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1913,                COSINE_TABLE_A[i] = result[0];,4,0,0,2,4,0,0,0,0,6,30,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1914,                COSINE_TABLE_B[i] = result[1];,2,0,1,2,4,0,0,0,0,9,30,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1919,        for (int i = 0; i < 14; i++) {,0,0,0,1,3,0,0,0,0,4,30,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1920,            double xs[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1921,            double ys[] = new double[2];,2,0,0,2,4,0,0,0,0,4,28,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1922,            double as[] = new double[2];,4,0,0,2,4,0,0,0,0,4,28,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1924,            as[0] = COSINE_TABLE_A[i];,0,0,0,2,4,0,0,0,0,6,26,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1925,            as[1] = COSINE_TABLE_B[i];,0,0,0,2,4,0,0,0,0,6,26,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1927,"            splitReciprocal(as, ys);",0,0,0,1,2,0,0,0,0,3,24,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1929,            xs[0] = SINE_TABLE_A[i];,8,1,1,2,4,0,8,0,0,28,24,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1930,            xs[1] = SINE_TABLE_B[i];,0,0,1,2,4,0,0,0,0,7,24,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1932,"            splitMult(xs, ys, as);",0,0,0,1,2,0,0,0,0,3,22,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1934,            TANGENT_TABLE_A[i] = as[0];,0,0,1,2,4,0,0,0,0,7,27,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1935,            TANGENT_TABLE_B[i] = as[1];,0,0,0,2,4,0,0,0,0,6,27,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1938,    },10,0,0,0,1,0,0,2,0,13,1,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3380,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,0,0,0,2,4,1,0,0,0,7,61,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3784,        return (a <= b) ? a : b;,8,1,0,1,2,1,0,0,0,9,24,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3827,        if (a > b) {,10,2,0,1,3,0,0,0,0,12,12,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3828,            return b;,4,2,0,0,0,1,10,0,0,17,9,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3895,        if (a > b) {,0,0,0,1,3,0,0,0,0,4,12,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3896,            return a;,8,1,0,0,0,1,0,0,0,11,9,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3898,        if (a < b) {,0,0,0,1,3,0,0,0,0,4,12,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3899,            return b;,0,0,0,0,0,1,0,0,0,1,9,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3902,        if (a != b) {,4,1,0,1,3,0,0,0,0,5,13,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3907,        long bits = Double.doubleToRawLongBits(a);,2,0,0,1,2,0,6,0,0,8,42,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3908,        if (bits == 0x8000000000000000L) {,2,1,0,1,3,0,0,0,0,3,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3911,        return a;,2,0,0,0,0,1,0,0,0,2,9,4,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,197,        return norm * FastMath.exp(-xMinusMean * xMinusMean * i2s2);,8,2,0,1,2,1,4,0,0,15,60,4,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,35,public class Gaussian implements DifferentiableUnivariateRealFunction {,2,0,0,0,1,1,0,2,0,5,71,1,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,114,    public static class Parametric implements ParametricUnivariateRealFunction {,0,0,0,0,1,0,0,0,0,1,76,4,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,128,            validateParameters(param);,0,0,0,1,2,0,4,0,0,4,26,6,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,130,            final double diff = x - param[1];,4,1,1,1,2,1,0,0,0,8,33,5,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,131,            final double i2s2 = 1 / (2 * param[2] * param[2]);,2,2,1,3,6,1,0,0,0,9,50,5,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,132,"            return Gaussian.value(diff, param[0], i2s2);",0,0,0,2,4,1,0,0,0,7,44,4,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,150,            validateParameters(param);,0,0,0,1,2,0,4,0,0,4,26,6,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,152,            final double norm = param[0];,8,2,1,1,2,2,0,0,0,16,29,1,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,153,            final double diff = x - param[1];,6,1,1,1,2,1,0,0,0,15,33,1,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,154,            final double sigma = param[2];,2,0,1,1,2,1,0,0,0,5,30,5,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,155,            final double i2s2 = 1 / (2 * sigma * sigma);,0,0,0,1,2,0,0,0,0,3,44,4,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,157,"            final double n = Gaussian.value(diff, 1, i2s2);",0,0,0,1,2,0,0,0,0,3,47,4,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,158,            final double m = norm * n * 2 * i2s2 * diff;,0,0,0,0,0,0,0,0,0,0,44,4,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,159,            final double s = m * diff / sigma;,8,2,0,0,0,1,0,0,0,11,34,5,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,161,"            return new double[] { n, m, s };",6,0,0,2,4,1,0,0,0,6,32,7,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,176,            if (param == null) {,4,2,0,1,3,0,4,0,0,10,20,1,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,179,            if (param.length != 3) {,12,2,0,1,3,0,0,0,0,16,24,1,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,182,            if (param[2] <= 0) {,16,3,1,2,5,0,0,0,0,23,20,1,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,185,        },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,174,"        this(decimalDigits, true);",0,0,0,1,2,0,0,0,0,3,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,175,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,188,"    private DfpField(final int decimalDigits, final boolean computeConstants) {",6,0,0,1,3,3,0,0,0,9,75,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,190,        this.radixDigits = (decimalDigits < 13) ? 4 : (decimalDigits + 3) / 4;,4,1,0,2,4,0,0,0,0,5,70,9,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,191,        this.rMode       = RoundingMode.ROUND_HALF_EVEN;,8,0,0,0,0,1,4,0,0,14,48,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,192,        this.ieeeFlags   = 0;,6,1,0,0,0,0,0,0,0,8,21,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,193,"        this.zero        = new Dfp(this, 0);",0,0,0,1,2,0,0,0,0,3,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,194,"        this.one         = new Dfp(this, 1);",2,0,0,1,2,0,0,2,0,5,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,195,"        this.two         = new Dfp(this, 2);",2,0,0,1,2,0,0,0,0,2,36,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,197,        if (computeConstants) {,0,0,0,1,3,0,0,0,0,4,23,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,199,            synchronized (DfpField.class) {,0,0,0,1,3,0,0,0,0,4,31,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,205,                computeStringConstants((decimalDigits < 67) ? 200 : (3 * decimalDigits));,12,3,0,3,6,1,12,0,0,30,73,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,208,"                sqr2           = new Dfp(this, sqr2String);",4,0,0,1,2,0,0,0,0,5,43,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,209,                sqr2Split      = split(sqr2String);,2,1,0,1,2,0,0,0,0,3,35,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,210,"                sqr2Reciprocal = new Dfp(this, sqr2ReciprocalString);",0,0,0,1,2,0,0,0,0,3,53,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,211,"                sqr3           = new Dfp(this, sqr3String);",4,0,0,1,2,0,0,2,0,7,43,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,212,"                sqr3Reciprocal = new Dfp(this, sqr3ReciprocalString);",10,3,0,1,2,0,0,0,0,14,53,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,213,"                pi             = new Dfp(this, piString);",4,0,0,1,2,0,6,0,0,10,41,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,214,                piSplit        = split(piString);,4,0,0,1,2,0,4,2,0,11,33,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,215,"                e              = new Dfp(this, eString);",0,0,0,1,2,0,0,0,0,3,40,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,216,                eSplit         = split(eString);,2,0,0,1,2,0,4,0,0,7,32,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,217,"                ln2            = new Dfp(this, ln2String);",6,0,0,1,2,1,2,0,0,11,42,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,218,                ln2Split       = split(ln2String);,2,1,0,1,2,0,0,0,0,3,34,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,219,"                ln5            = new Dfp(this, ln5String);",6,0,0,1,2,0,6,2,0,15,42,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,220,                ln5Split       = split(ln5String);,2,0,0,1,2,0,4,0,0,7,34,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,221,"                ln10           = new Dfp(this, ln10String);",0,0,0,1,2,0,0,0,0,3,43,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,223,            },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,226,            sqr2           = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,227,            sqr2Split      = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,228,            sqr2Reciprocal = null;,2,0,0,0,0,3,6,0,0,11,22,1,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,229,            sqr3           = null;,2,0,0,0,0,1,0,0,0,3,22,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,230,            sqr3Reciprocal = null;,16,4,0,0,0,4,10,4,0,40,22,1,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,231,            pi             = null;,0,0,0,0,0,0,0,0,0,0,22,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,232,            piSplit        = null;,4,0,0,0,0,0,0,0,0,5,22,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,233,            e              = null;,10,1,0,0,0,1,0,0,0,13,22,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,234,            eSplit         = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,235,            ln2            = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,236,            ln2Split       = null;,0,0,0,0,0,0,0,0,0,0,22,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,237,            ln5            = null;,2,0,0,0,0,0,0,0,0,3,22,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,238,            ln5Split       = null;,4,0,0,0,0,3,0,0,0,8,22,1,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,239,            ln10           = null;,0,0,0,0,0,0,0,0,0,0,22,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,242,    },6,2,0,0,1,1,0,0,0,9,1,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,248,        return radixDigits;,0,0,0,0,0,1,0,0,0,1,19,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,266,        return rMode;,4,0,0,0,0,1,0,0,0,5,13,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,328,        ieeeFlags |= bits & (FLAG_INVALID | FLAG_DIV_ZERO | FLAG_OVERFLOW | FLAG_UNDERFLOW | FLAG_INEXACT);,2,0,0,1,2,3,0,2,0,7,99,1,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,329,    },4,1,0,0,1,0,0,0,0,5,1,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,400,        return zero;,14,3,0,0,0,1,0,0,0,18,12,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,522,      Dfp result[] = new Dfp[2];,0,0,0,2,4,0,0,0,0,6,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,523,      boolean leading = true;,2,0,0,0,0,0,0,0,0,3,23,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,524,      int sp = 0;,0,0,0,0,0,0,0,0,0,0,11,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,525,      int sig = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,527,      char[] buf = new char[a.length()];,2,0,0,3,6,0,4,0,0,6,34,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,529,      for (int i = 0; i < buf.length; i++) {,10,1,0,1,3,0,0,0,0,12,38,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,530,        buf[i] = a.charAt(i);,2,0,0,2,4,0,14,0,0,17,21,13,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,532,        if (buf[i] >= '1' && buf[i] <= '9') {,8,3,1,3,7,0,0,2,0,29,37,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,533,            leading = false;,0,0,0,0,0,0,0,0,0,0,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,536,        if (buf[i] == '.') {,0,0,0,2,5,0,0,0,0,7,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,537,          sig += (400 - sig) % 4;,0,0,0,1,2,0,0,0,0,3,23,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,538,          leading = false;,0,0,0,0,0,0,0,0,0,0,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,541,        if (sig == (radixDigits / 2) * 4) {,0,0,0,2,5,0,0,0,0,7,35,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,542,          sp = i;,0,0,0,0,0,0,0,0,0,0,7,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,543,          break;,0,0,0,0,0,0,0,0,0,0,6,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,546,        if (buf[i] >= '0' && buf[i] <= '9' && !leading) {,0,0,0,3,7,0,0,0,0,10,49,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,547,            sig ++;,4,0,0,0,0,0,0,0,0,5,7,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,551,"      result[0] = new Dfp(this, new String(buf, 0, sp));",4,0,1,3,6,0,0,4,0,11,50,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,553,      for (int i = 0; i < buf.length; i++) {,0,0,0,1,3,0,0,0,0,4,38,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,554,        buf[i] = a.charAt(i);,2,0,1,2,4,0,6,0,0,20,21,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,555,        if (buf[i] >= '0' && buf[i] <= '9' && i < sp) {,0,0,0,3,7,0,0,0,0,10,47,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,556,            buf[i] = '0';,0,0,1,1,2,0,0,0,0,6,13,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,560,"      result[1] = new Dfp(this, new String(buf));",10,0,1,3,6,0,0,4,0,18,43,0,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,562,      return result;,2,0,0,0,0,1,0,0,0,2,14,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,570,        if (sqr2String == null || sqr2String.length() < highPrecisionDecimalDigits - 3) {,8,1,0,2,5,0,0,0,0,11,81,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,573,"            final DfpField highPrecisionField = new DfpField(highPrecisionDecimalDigits, false);",0,0,0,1,2,0,0,0,0,3,84,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,574,"            final Dfp highPrecisionOne        = new Dfp(highPrecisionField, 1);",6,0,0,1,2,1,0,4,0,12,67,0,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,575,"            final Dfp highPrecisionTwo        = new Dfp(highPrecisionField, 2);",6,0,0,1,2,1,4,6,0,18,67,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,576,"            final Dfp highPrecisionThree      = new Dfp(highPrecisionField, 3);",4,0,0,1,2,1,0,4,0,9,67,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,578,            final Dfp highPrecisionSqr2 = highPrecisionTwo.sqrt();,2,0,0,1,2,1,4,2,0,9,54,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,579,            sqr2String           = highPrecisionSqr2.toString();,0,0,0,1,2,0,0,0,0,3,52,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,580,            sqr2ReciprocalString = highPrecisionOne.divide(highPrecisionSqr2).toString();,0,0,0,2,4,0,0,0,0,6,77,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,582,            final Dfp highPrecisionSqr3 = highPrecisionThree.sqrt();,2,0,0,1,2,1,4,2,0,9,56,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,583,            sqr3String           = highPrecisionSqr3.toString();,6,1,1,1,2,0,10,0,0,21,52,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,584,            sqr3ReciprocalString = highPrecisionOne.divide(highPrecisionSqr3).toString();,0,0,0,2,4,0,0,0,0,6,77,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,586,"            piString   = computePi(highPrecisionOne, highPrecisionTwo, highPrecisionThree).toString();",4,1,0,2,4,0,10,0,0,16,90,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,587,"            eString    = computeExp(highPrecisionOne, highPrecisionOne).toString();",0,0,0,2,4,0,0,0,0,6,71,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,588,"            ln2String  = computeLn(highPrecisionTwo, highPrecisionOne, highPrecisionTwo).toString();",0,0,0,2,4,0,6,0,0,6,88,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,589,"            ln5String  = computeLn(new Dfp(highPrecisionField, 5),  highPrecisionOne, highPrecisionTwo).toString();",4,0,0,3,6,0,8,2,0,15,103,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,590,"            ln10String = computeLn(new Dfp(highPrecisionField, 10), highPrecisionOne, highPrecisionTwo).toString();",16,3,1,3,6,0,16,2,0,47,103,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,593,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,603,        Dfp sqrt2   = two.sqrt();,0,0,0,1,2,0,0,0,0,3,25,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,604,        Dfp yk      = sqrt2.subtract(one);,0,0,0,1,2,0,0,0,0,3,34,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,605,        Dfp four    = two.add(two);,0,0,0,1,2,0,0,0,0,3,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,606,        Dfp two2kp3 = two;,0,0,0,0,0,0,0,0,0,0,18,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,607,        Dfp ak      = two.multiply(three.subtract(two.multiply(sqrt2)));,0,0,0,3,6,0,0,0,0,9,64,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,615,        for (int i = 1; i < 20; i++) {,6,1,0,1,3,0,0,0,0,8,30,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,616,            final Dfp ykM1 = yk;,2,0,0,0,0,0,0,0,0,3,20,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,618,            final Dfp y2         = yk.multiply(yk);,2,0,0,1,2,1,6,2,0,11,39,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,619,            final Dfp oneMinusY4 = one.subtract(y2.multiply(y2));,2,0,0,2,4,1,10,2,0,15,53,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,620,            final Dfp s          = oneMinusY4.sqrt().sqrt();,2,0,0,2,4,1,6,2,0,11,48,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,621,            yk = one.subtract(s).divide(one.add(s));,2,0,0,3,6,0,14,0,0,17,40,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,623,            two2kp3 = two2kp3.multiply(four);,2,0,0,1,2,0,6,0,0,9,33,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,625,            final Dfp p = one.add(yk);,0,0,0,1,2,0,0,0,0,3,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,626,            final Dfp p2 = p.multiply(p);,0,0,0,1,2,0,0,0,0,3,29,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,627,            ak = ak.multiply(p2.multiply(p2)).subtract(two2kp3.multiply(yk).multiply(one.add(yk).add(yk.multiply(yk))));,2,0,0,8,16,0,34,0,0,37,108,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,629,            if (yk.equals(ykM1)) {,2,1,0,2,5,0,6,0,0,9,22,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,630,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,634,        return one.divide(ak);,0,0,0,1,2,1,6,0,0,6,22,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,645,        Dfp y  = new Dfp(one);,4,0,0,1,2,0,0,4,0,8,22,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,646,        Dfp py = new Dfp(one);,0,0,0,1,2,0,0,0,0,3,22,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,647,        Dfp f  = new Dfp(one);,4,0,0,1,2,0,0,4,0,8,22,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,648,        Dfp fi = new Dfp(one);,0,0,0,1,2,0,0,0,0,3,22,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,649,        Dfp x  = new Dfp(one);,4,0,0,1,2,0,0,4,0,8,22,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,651,        for (int i = 0; i < 10000; i++) {,6,1,0,1,3,0,0,0,0,8,33,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,652,            x = x.multiply(a);,2,0,0,1,2,0,6,0,0,9,18,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,653,            y = y.add(x.divide(f));,2,0,0,2,4,0,10,0,0,13,23,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,654,            fi = fi.add(one);,8,1,0,1,2,0,8,0,0,19,17,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,655,            f = f.multiply(fi);,2,0,0,1,2,0,6,0,0,9,19,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,656,            if (y.equals(py)) {,6,0,0,2,5,2,8,0,0,16,19,1,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,657,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,659,            py = new Dfp(y);,4,0,0,1,2,0,0,2,0,7,16,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,662,        return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,728,        int den = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,729,"        Dfp x = a.add(new Dfp(a.getField(), -1)).divide(a.add(one));",2,0,0,5,10,0,16,4,0,23,60,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,731,        Dfp y = new Dfp(x);,20,3,0,1,2,0,0,4,0,29,19,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,732,        Dfp num = new Dfp(x);,0,0,0,1,2,0,0,0,0,3,21,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,733,        Dfp py = new Dfp(y);,4,0,0,1,2,0,0,4,0,8,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,734,        for (int i = 0; i < 10000; i++) {,8,1,0,1,3,0,0,0,0,10,33,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,735,            num = num.multiply(x);,2,0,0,1,2,0,6,0,0,9,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,736,            num = num.multiply(x);,2,0,0,1,2,0,6,0,0,9,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,737,            den = den + 2;,18,2,0,0,0,1,0,0,0,25,14,1,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,738,            Dfp t = num.divide(den);,2,0,0,1,2,0,6,2,0,10,24,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,739,            y = y.add(t);,4,1,0,1,2,0,10,0,0,16,13,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,740,            if (y.equals(py)) {,0,0,0,2,5,0,0,0,0,7,19,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,741,                break;,0,0,0,0,0,0,6,0,0,6,6,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,743,            py = new Dfp(y);,8,1,1,1,2,0,6,2,0,21,16,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,746,        return y.multiply(two);,0,0,0,1,2,1,6,0,0,6,23,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,29,    public enum RoundingMode {,2,0,0,0,1,1,0,0,0,3,26,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,32,"        ROUND_DOWN,",4,0,0,0,0,0,0,2,0,6,11,1,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,35,"        ROUND_UP,",2,0,0,0,0,0,0,0,0,2,9,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,38,"        ROUND_HALF_UP,",2,0,0,0,0,0,0,0,0,2,14,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,41,"        ROUND_HALF_DOWN,",0,0,0,0,0,0,0,0,0,0,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,46,"        ROUND_HALF_EVEN,",2,0,0,0,0,0,0,2,0,5,16,1,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,49,"        ROUND_HALF_ODD,",0,0,0,0,0,0,0,0,0,0,15,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,52,"        ROUND_CEIL,",4,0,0,0,0,3,0,0,0,7,11,1,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,55,        ROUND_FLOOR;,2,0,0,0,0,0,0,0,0,2,12,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,202,"        this(field, (long) x);",0,0,0,2,4,0,0,0,0,6,22,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,203,    },4,0,0,0,1,0,0,2,0,7,1,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,209,"    protected Dfp(final DfpField field, long x) {",6,0,0,1,3,2,0,2,0,10,45,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,212,        mant = new int[field.getRadixDigits()];,0,0,0,2,4,0,0,0,0,6,39,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,213,        nans = FINITE;,4,0,0,0,0,0,0,0,0,5,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,214,        this.field = field;,4,0,0,0,0,0,0,0,0,5,19,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,216,        boolean isLongMin = false;,0,0,0,0,0,0,0,0,0,0,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,217,        if (x == Long.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,225,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,226,            sign = -1;,2,0,0,0,0,0,0,0,0,4,10,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,227,            x = -x;,0,0,0,0,0,0,0,0,0,0,7,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,229,            sign = 1;,0,0,0,0,0,0,0,0,0,0,9,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,232,        exp = 0;,0,0,0,0,0,0,6,0,0,6,8,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,233,        while (x != 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,234,"            System.arraycopy(mant, mant.length - exp, mant, mant.length - 1 - exp, exp);",12,2,0,1,2,0,10,0,0,24,76,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,235,            mant[mant.length - 1] = (int) (x % RADIX);,18,3,1,3,6,0,0,0,0,26,42,1,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,236,            x /= RADIX;,4,0,0,0,0,0,0,0,0,5,11,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,237,            exp++;,0,0,0,0,0,0,0,0,0,0,6,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,240,        if (isLongMin) {,0,0,0,1,3,0,0,0,0,4,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,250,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,318,    public Dfp(final Dfp d) {,4,0,0,1,3,2,0,2,0,8,25,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,319,        mant  = d.mant.clone();,8,1,0,1,2,0,12,0,0,23,23,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,320,        sign  = d.sign;,0,0,0,0,0,0,0,0,0,0,15,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,321,        exp   = d.exp;,6,0,0,0,0,0,0,0,0,7,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,322,        nans  = d.nans;,4,0,0,0,0,1,0,2,0,7,15,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,323,        field = d.field;,0,0,0,0,0,0,0,0,0,0,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,324,    },4,0,0,0,1,1,4,0,0,9,1,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,330,"    protected Dfp(final DfpField field, final String s) {",6,0,0,1,3,3,0,4,0,13,53,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,333,        mant = new int[field.getRadixDigits()];,2,0,0,2,4,0,4,0,0,7,39,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,334,        sign = 1;,2,0,0,0,0,0,0,0,0,3,9,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,335,        exp = 0;,6,1,0,0,0,1,0,2,0,11,8,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,336,        nans = FINITE;,10,2,1,0,0,0,0,0,0,16,14,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,337,        this.field = field;,4,0,0,0,0,0,0,0,0,5,19,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,339,        boolean decimalFound = false;,2,0,0,0,0,0,0,0,0,3,29,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,340,        final int rsize = 4;   // size of radix in decimal digits,0,0,0,0,0,0,0,0,0,0,57,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,341,        final int offset = 4;  // Starting offset into Striped,4,0,0,0,0,1,6,0,0,12,54,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,342,        final char[] striped = new char[getRadixDigits() * rsize + offset * 2];,6,3,0,3,6,1,2,0,0,12,71,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,345,        if (s.equals(POS_INFINITY_STRING)) {,0,0,0,2,5,0,6,0,0,6,36,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,351,        if (s.equals(NEG_INFINITY_STRING)) {,0,0,0,2,5,0,0,0,0,7,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,357,        if (s.equals(NAN_STRING)) {,0,0,0,2,5,0,0,0,0,7,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,364,"        int p = s.indexOf(""e"");",2,0,0,1,2,0,4,0,0,7,23,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,365,        if (p == -1) { // try upper case?,2,1,0,1,3,0,0,0,0,4,33,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,366,"            p = s.indexOf(""E"");",2,0,0,1,2,0,4,0,0,8,19,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,370,        int sciexp = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,371,        if (p != -1) {,2,1,0,1,3,0,0,0,0,4,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,393,            fpdecimal = s;,4,0,0,0,0,0,0,0,0,5,14,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,397,"        if (fpdecimal.indexOf(""-"") !=  -1) {",0,1,0,2,5,0,4,0,0,7,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,402,        p = 0;,6,3,0,0,0,0,0,0,0,10,6,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,405,        int decimalPos = 0;,0,0,0,0,0,0,0,0,0,0,19,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,407,            if (fpdecimal.charAt(p) >= '1' && fpdecimal.charAt(p) <= '9') {,0,3,0,3,7,0,12,0,0,17,63,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,408,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,411,            if (decimalFound && fpdecimal.charAt(p) == '0') {,0,0,0,2,5,0,0,0,0,7,49,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,412,                decimalPos--;,0,0,0,0,0,0,0,0,0,0,13,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,415,            if (fpdecimal.charAt(p) == '.') {,2,1,0,2,5,3,6,0,0,13,33,1,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,416,                decimalFound = true;,4,0,1,0,0,0,0,0,0,9,20,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,419,            p++;,2,0,0,0,0,0,0,0,0,3,4,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,421,            if (p == fpdecimal.length()) {,2,1,0,2,5,0,4,0,0,7,30,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,427,        int q = offset;,0,0,0,0,0,0,0,0,0,0,15,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,428,        striped[0] = '0';,2,0,1,1,2,0,0,2,0,8,17,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,429,        striped[1] = '0';,0,0,1,1,2,0,0,0,0,4,17,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,430,        striped[2] = '0';,0,0,1,1,2,0,0,0,0,4,17,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,431,        striped[3] = '0';,0,0,1,1,2,0,0,0,0,4,17,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,432,        int significantDigits=0;,4,0,0,0,0,0,0,0,0,4,24,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,434,            if (p == (fpdecimal.length())) {,4,1,0,3,7,0,4,0,0,9,32,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,435,                break;,2,1,1,0,0,0,0,0,0,10,6,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,439,            if (q == mant.length*rsize+offset+1) {,10,4,0,1,3,0,0,0,0,14,38,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,440,                break;,0,0,0,0,0,0,4,0,0,4,6,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,443,            if (fpdecimal.charAt(p) == '.') {,2,1,0,2,5,0,0,0,0,3,33,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,444,                decimalFound = true;,6,1,0,0,0,0,4,0,0,12,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,445,                decimalPos = significantDigits;,0,0,0,0,0,0,0,2,0,2,31,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,446,                p++;,0,0,0,0,0,0,0,0,0,0,4,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,447,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,450,            if (fpdecimal.charAt(p) < '0' || fpdecimal.charAt(p) > '9') {,0,3,0,3,7,0,12,0,0,17,61,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,455,            striped[q] = fpdecimal.charAt(p);,0,0,1,2,4,0,6,0,0,11,33,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,456,            q++;,2,0,0,0,0,0,0,0,0,3,4,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,457,            p++;,4,0,0,0,0,0,0,0,0,5,4,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,458,            significantDigits++;,2,0,0,0,0,0,0,0,0,3,20,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,463,        if (decimalFound && q != offset) {,6,2,0,1,3,0,0,0,0,8,34,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,465,                q--;,0,0,0,0,0,0,0,0,0,0,4,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,466,                if (q == offset) {,14,2,0,1,3,0,0,0,0,18,18,1,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,469,                if (striped[q] == '0') {,0,1,1,2,5,0,0,0,0,6,24,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,470,                    significantDigits--;,0,0,0,0,0,0,0,0,0,0,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,478,        if (decimalFound && significantDigits == 0) {,4,2,0,1,3,0,0,0,0,6,45,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,483,        if (!decimalFound) {,2,0,0,1,3,0,0,0,0,3,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,488,        q = offset;  // set q to point to first sig digit,0,0,0,0,0,0,0,0,0,0,49,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,489,        p = significantDigits-1+offset;,6,2,0,0,0,0,0,0,0,9,31,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,491,        int trailingZeros = 0;,2,0,0,0,0,0,0,0,0,2,22,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,492,        while (p > q) {,4,1,0,1,3,0,0,0,0,5,15,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,493,            if (striped[p] != '0') {,0,0,0,2,5,0,0,0,0,7,24,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,494,                break;,0,0,0,0,0,0,4,0,0,4,6,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,501,        int i = ((rsize * 100) - decimalPos - sciexp % rsize) % rsize;,18,6,1,2,4,0,0,0,0,27,62,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,502,        q -= i;,4,0,0,0,0,0,0,0,0,5,7,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,503,        decimalPos += i;,4,0,0,0,0,0,0,0,0,5,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,506,        while ((p - q) < (mant.length * rsize)) {,22,5,0,3,7,0,0,0,0,29,41,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,507,            for (i = 0; i < rsize; i++) {,8,1,0,1,3,0,0,0,0,11,29,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,508,                striped[++p] = '0';,0,0,0,1,2,0,0,0,0,3,19,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,514,        for (i = mant.length - 1; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,14,40,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,515,            mant[i] = (striped[q]   - '0') * 1000 +,0,5,1,3,6,0,0,0,0,15,39,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,519,            q += 4;,0,0,0,0,0,0,0,0,0,0,7,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,523,        exp = (decimalPos+sciexp) / rsize;,8,2,0,1,2,0,0,0,0,11,34,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,525,        if (q < striped.length) {,6,1,0,1,3,0,0,0,0,7,25,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,527,            round((striped[q] - '0')*1000);,0,0,0,3,6,0,0,0,0,9,31,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,530,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,594,        if (field.getRadixDigits() != d.field.getRadixDigits()) {,6,2,1,3,7,0,10,0,0,32,57,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,601,        return new Dfp(d);,12,2,0,1,2,2,0,2,0,17,18,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,632,        return field;,2,0,0,0,0,1,0,0,0,2,13,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,639,        return field.getRadixDigits();,0,0,0,1,2,1,4,0,0,4,30,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,646,        return field.getZero();,0,0,0,1,2,1,4,0,0,4,23,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,666,        for (int i = mant.length - 1; i > 0; i--) {,10,2,0,1,3,0,0,0,0,13,43,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,667,            mant[i] = mant[i-1];,2,1,1,2,4,0,0,0,0,10,20,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,669,        mant[0] = 0;,0,0,1,1,2,0,0,0,0,3,12,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,670,        exp--;,0,0,0,0,0,0,0,0,0,0,6,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,671,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,678,        for (int i = 0; i < mant.length - 1; i++) {,0,0,0,1,3,0,0,0,0,4,43,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,679,            mant[i] = mant[i+1];,2,1,1,2,4,0,0,0,0,10,20,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,681,        mant[mant.length - 1] = 0;,0,0,0,1,2,0,0,0,0,3,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,682,        exp++;,2,0,0,0,0,0,0,0,0,3,6,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,683,    },0,0,0,0,1,0,4,0,0,4,1,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,694,        int lostdigit = 0;,0,0,0,0,0,0,0,0,0,0,18,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,695,        boolean inexact = false;,2,0,0,0,0,0,0,0,0,3,24,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,697,        int diff = exp - e;,0,0,0,0,0,0,0,0,0,0,19,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,699,        int adiff = diff;,4,0,0,0,0,0,0,0,0,4,17,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,700,        if (adiff < 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,701,            adiff = -adiff;,4,0,0,0,0,0,0,0,0,6,15,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,704,        if (diff == 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,705,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,708,        if (adiff > (mant.length + 1)) {,6,2,0,2,5,0,0,0,0,8,32,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,710,"            Arrays.fill(mant, 0);",10,0,0,1,2,3,6,0,0,20,21,1,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,711,            exp = e;,4,0,0,0,0,0,0,0,0,5,8,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,713,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,10,0,0,1,2,0,4,0,0,14,46,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,714,"            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",4,0,0,1,2,0,4,0,0,8,54,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,716,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,719,        for (int i = 0; i < adiff; i++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,720,            if (diff < 0) {,4,1,0,1,3,0,0,0,0,6,15,0,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,725,                if (lostdigit != 0) {,8,2,0,1,3,0,0,0,0,11,21,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,726,                    inexact = true;,2,0,0,0,0,0,0,0,0,4,15,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,729,                lostdigit = mant[0];,0,0,0,1,2,0,0,0,0,3,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,731,                shiftRight();,0,0,0,1,2,0,0,0,0,3,13,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,737,        if (inexact) {,8,0,0,1,3,0,0,0,0,9,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,738,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,2,0,0,1,2,3,0,0,0,5,46,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,739,"            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",4,0,0,1,2,0,4,0,0,8,54,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,742,        return lostdigit;,2,0,0,0,0,1,0,0,0,2,17,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,753,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,0,0,0,3,7,0,0,0,0,10,57,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,762,        if (isNaN() || x.isNaN()) {,0,1,1,3,7,0,6,0,0,13,27,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,768,"        return compare(this, x) < 0;",0,1,0,1,2,1,4,0,0,5,28,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,778,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,0,0,0,3,7,0,0,0,0,10,57,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,787,        if (isNaN() || x.isNaN()) {,0,1,0,3,7,0,6,0,0,7,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,793,"        return compare(this, x) > 0;",0,0,0,1,2,1,0,0,0,4,28,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,807,        return (nans == QNAN) || (nans == SNAN);,0,0,0,2,4,1,0,0,0,7,40,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,817,        if (other instanceof Dfp) {,0,0,0,1,3,0,0,0,0,4,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,818,            final Dfp x = (Dfp) other;,8,0,1,1,2,1,4,8,0,26,26,0,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,819,            if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {,4,2,1,5,11,0,12,0,0,29,81,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,823,"            return compare(this, x) == 0;",0,1,0,1,2,1,4,0,0,5,29,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,844,        if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {,0,0,0,5,11,0,0,0,0,16,81,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,848,        return greaterThan(x) || lessThan(x);,0,0,0,2,4,1,0,0,0,7,37,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,859,        if (a.mant[a.mant.length - 1] == 0 && b.mant[b.mant.length - 1] == 0 &&,0,0,0,2,5,0,0,0,0,7,71,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,861,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,864,        if (a.sign != b.sign) {,8,1,0,1,3,0,12,0,0,21,23,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,873,        if (a.nans == INFINITE && b.nans == FINITE) {,0,0,0,1,3,0,0,0,0,4,45,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,877,        if (a.nans == FINITE && b.nans == INFINITE) {,20,4,0,1,3,0,0,0,0,26,45,0,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,881,        if (a.nans == INFINITE && b.nans == INFINITE) {,0,0,0,1,3,0,0,0,0,4,47,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,886,        if (b.mant[b.mant.length-1] != 0 && a.mant[b.mant.length-1] != 0) {,0,0,0,3,7,0,0,0,0,10,67,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,887,            if (a.exp < b.exp) {,10,1,0,1,3,0,0,0,0,12,20,0,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,888,                return -a.sign;,4,0,0,0,0,1,0,0,0,5,15,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,891,            if (a.exp > b.exp) {,8,1,0,1,3,0,0,0,0,9,20,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,892,                return a.sign;,4,0,0,0,0,1,0,0,0,4,14,9,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,897,        for (int i = a.mant.length - 1; i >= 0; i--) {,12,2,0,1,3,0,0,0,0,15,46,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,898,            if (a.mant[i] > b.mant[i]) {,8,1,1,3,7,0,0,0,0,13,28,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,899,                return a.sign;,0,0,0,0,0,1,0,0,0,1,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,902,            if (a.mant[i] < b.mant[i]) {,0,0,0,3,7,0,0,0,0,10,28,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,903,                return -a.sign;,6,0,0,0,0,1,0,0,0,8,15,0,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,907,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1144,        extra = RADIX-extra;,6,1,0,0,0,0,0,0,0,8,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1145,        for (int i = 0; i < mant.length; i++) {,14,1,1,1,3,1,0,0,0,20,39,0,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1146,            mant[i] = RADIX-mant[i]-1;,0,0,0,2,4,0,0,0,0,6,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1149,        int rh = extra / RADIX;,0,0,0,0,0,0,0,0,0,0,23,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1150,        extra = extra - rh * RADIX;,8,2,0,0,0,0,0,0,0,11,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1151,        for (int i = 0; i < mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1152,            final int r = mant[i] + rh;,4,1,1,1,2,1,0,0,0,10,27,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1153,            rh = r / RADIX;,6,1,0,0,0,0,0,0,0,8,15,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1154,            mant[i] = r - rh * RADIX;,14,3,1,1,2,0,0,0,0,24,25,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1157,        return extra;,2,0,0,0,0,1,0,0,0,2,13,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1167,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,6,2,0,3,7,0,6,0,0,14,57,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1175,        if (nans != FINITE || x.nans != FINITE) {,10,3,0,1,3,0,0,0,0,13,41,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1206,        Dfp a = newInstance(this);,0,0,0,1,2,0,0,0,0,3,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1207,        Dfp b = newInstance(x);,2,0,0,1,2,0,4,2,0,8,23,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1210,        Dfp result = newInstance(getZero());,0,0,0,2,4,0,0,0,0,6,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1213,        final byte asign = a.sign;,0,0,0,0,0,0,0,0,0,0,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1214,        final byte bsign = b.sign;,0,0,0,0,0,0,0,0,0,0,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1216,        a.sign = 1;,0,0,0,0,0,0,0,0,0,0,11,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1217,        b.sign = 1;,0,0,0,0,0,0,0,0,0,0,11,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1220,        byte rsign = bsign;,4,0,0,0,0,0,0,0,0,4,19,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1221,"        if (compare(a, b) > 0) {",0,1,0,2,5,0,6,0,0,7,24,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1222,            rsign = asign;,6,1,0,0,0,0,0,0,0,8,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1228,        if (b.mant[mant.length-1] == 0) {,8,2,0,2,5,0,0,0,0,10,33,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1229,            b.exp = a.exp;,10,0,0,0,0,1,2,0,0,14,14,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1232,        if (a.mant[mant.length-1] == 0) {,0,0,0,2,5,0,0,0,0,7,33,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1237,        int aextradigit = 0;,0,0,0,0,0,0,0,0,0,0,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1238,        int bextradigit = 0;,12,2,0,0,0,0,0,0,0,15,20,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1239,        if (a.exp < b.exp) {,8,1,0,1,3,0,0,0,0,9,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1240,            aextradigit = a.align(b.exp);,6,0,0,1,2,0,4,0,0,11,29,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1242,            bextradigit = b.align(a.exp);,10,1,0,1,2,0,14,0,0,27,29,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1246,        if (asign != bsign) {,4,1,0,1,3,0,0,0,0,5,21,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1247,            if (asign == rsign) {,0,0,0,1,3,0,0,0,0,4,21,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1248,                bextradigit = b.complement(bextradigit);,0,0,0,1,2,0,0,0,0,3,40,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1250,                aextradigit = a.complement(aextradigit);,2,0,0,1,2,0,6,0,0,9,40,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1255,        int rh = 0; /* acts as a carry */,2,0,0,0,0,0,0,0,0,2,33,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1256,        for (int i = 0; i < mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1257,            final int r = a.mant[i]+b.mant[i]+rh;,12,2,1,2,4,1,2,0,0,21,37,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1258,            rh = r / RADIX;,8,2,0,0,0,0,2,0,0,13,15,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1259,            result.mant[i] = r - rh * RADIX;,14,3,1,1,2,0,0,0,0,20,32,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1261,        result.exp = a.exp;,8,0,0,0,0,0,6,0,0,15,19,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1262,        result.sign = rsign;,6,0,0,0,0,0,0,0,0,7,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1267,        if (rh != 0 && (asign == bsign)) {,6,3,0,2,5,0,0,0,0,9,34,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1268,            final int lostdigit = result.mant[0];,6,0,0,1,2,1,0,0,0,7,37,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1269,            result.shiftRight();,10,3,0,1,2,0,0,0,0,15,20,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1270,            result.mant[mant.length-1] = rh;,0,0,0,1,2,0,0,0,0,3,32,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1271,            final int excp = result.round(lostdigit);,0,0,0,1,2,0,0,0,0,3,41,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1272,            if (excp != 0) {,10,2,1,1,3,0,6,0,0,30,16,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1273,"                result = dotrap(excp, ADD_TRAP, x, result);",0,0,0,1,2,0,0,0,0,3,43,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1278,        for (int i = 0; i < mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1279,            if (result.mant[mant.length-1] != 0) {,8,2,0,2,5,0,0,0,0,10,38,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1280,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1282,            result.shiftLeft();,0,0,0,1,2,0,4,0,0,4,19,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1283,            if (i == 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1284,                result.mant[0] = aextradigit+bextradigit;,20,1,1,1,2,1,0,0,0,28,41,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1285,                aextradigit = 0;,2,0,0,0,0,0,0,0,0,3,16,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1286,                bextradigit = 0;,0,0,0,0,0,0,0,0,0,0,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1291,        if (result.mant[mant.length-1] == 0) {,8,2,0,2,5,0,0,0,0,10,38,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1292,            result.exp = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1294,            if (asign != bsign) {,4,1,0,1,3,0,0,0,0,5,21,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1296,                result.sign = 1;  // Per IEEE 854-1987 Section 6.3,4,0,0,0,0,0,0,0,0,5,50,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1301,        final int excp = result.round(aextradigit + bextradigit);,10,2,0,1,2,1,4,0,0,17,57,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1302,        if (excp != 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1303,"            result = dotrap(excp, ADD_TRAP, x, result);",2,0,0,1,2,0,10,0,0,13,43,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1306,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1313,        Dfp result = newInstance(this);,0,0,0,1,2,0,0,0,0,3,31,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1314,        result.sign = (byte) - result.sign;,0,0,0,1,2,0,0,0,0,3,35,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1315,        return result;,12,2,1,0,0,1,0,0,0,19,14,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1323,        return add(x.negate());,0,0,0,2,4,1,0,0,0,7,23,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1331,        boolean inc = false;,2,0,0,0,0,0,0,0,0,3,20,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1332,        switch (field.getRoundingMode()) {,0,0,0,2,5,0,0,0,0,7,34,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1350,                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 1);  // round half-even,12,1,1,3,6,0,4,0,0,26,72,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1351,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1367,        if (inc) {,22,9,0,1,3,0,0,0,0,32,10,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1369,            int rh = 1;,8,1,0,0,0,0,0,0,0,10,11,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1370,            for (int i = 0; i < mant.length; i++) {,8,1,0,1,3,0,0,0,0,11,39,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1371,                final int r = mant[i] + rh;,10,2,1,1,2,1,0,0,0,17,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1372,                rh = r / RADIX;,2,0,0,0,0,0,0,0,0,2,15,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1373,                mant[i] = r - rh * RADIX;,0,0,0,1,2,0,0,0,0,3,25,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1376,            if (rh != 0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1383,        if (exp < MIN_EXP) {,4,1,0,1,3,0,0,0,0,5,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1389,        if (exp > MAX_EXP) {,4,1,0,1,3,0,0,0,0,5,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1395,        if (n != 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1397,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,0,0,0,1,2,0,0,0,0,3,46,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1398,            return DfpField.FLAG_INEXACT;,0,0,0,0,0,1,0,0,0,1,29,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1401,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1412,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,0,0,0,3,7,0,0,0,0,10,57,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1419,        Dfp result = newInstance(getZero());,2,0,0,2,4,0,4,2,0,8,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1422,        if (nans != FINITE || x.nans != FINITE) {,0,0,0,1,3,0,0,0,0,4,41,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1459,        int[] product = new int[mant.length*2];  // Big enough to hold even the largest result,0,0,0,2,4,0,0,0,0,6,86,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1461,        for (int i = 0; i < mant.length; i++) {,10,1,0,1,3,0,0,2,0,14,39,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1462,            int rh = 0;  // acts as a carry,2,0,0,0,0,0,6,0,0,8,31,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1463,            for (int j=0; j<mant.length; j++) {,10,1,0,1,3,0,0,0,0,12,35,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1464,                int r = mant[i] * x.mant[j];    // multiply the 2 digits,12,3,1,2,4,1,0,0,0,22,56,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1465,                r = r + product[i+j] + rh;  // add to the product digit with carry in,10,2,1,1,2,0,0,0,0,15,69,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1467,                rh = r / RADIX;,8,1,0,0,0,0,0,0,0,10,15,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1468,                product[i+j] = r - rh * RADIX;,0,0,0,1,2,0,0,0,0,3,30,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1470,            product[i+mant.length] = rh;,8,1,1,1,2,0,6,0,0,18,28,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1474,"        int md = mant.length * 2 - 1;  // default, in case result is zero",20,6,0,0,0,0,0,0,0,27,65,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1475,        for (int i = mant.length * 2 - 1; i >= 0; i--) {,12,3,0,1,3,1,6,4,0,27,48,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1476,            if (product[i] != 0) {,0,1,1,2,5,0,0,0,0,5,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1477,                md = i;,0,0,0,0,0,0,0,0,0,0,7,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1478,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1483,        for (int i = 0; i < mant.length; i++) {,12,2,0,1,3,0,0,0,0,15,39,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1484,            result.mant[mant.length - i - 1] = product[md - i];,14,2,1,2,4,0,0,0,0,19,51,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1488,        result.exp = exp + x.exp + md - 2 * mant.length + 1;,0,0,0,0,0,0,0,0,0,0,52,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1489,        result.sign = (byte)((sign == x.sign)?1:-1);,36,11,1,3,6,0,0,0,0,54,44,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1491,        if (result.mant[mant.length-1] == 0) {,8,2,0,2,5,0,0,0,0,10,38,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1493,            result.exp = 0;,14,1,0,0,0,0,0,0,0,17,15,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1497,        if (md > (mant.length-1)) {,4,1,1,2,5,1,0,0,0,10,27,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1498,            excp = result.round(product[md-mant.length]);,8,1,1,2,4,0,4,0,0,16,45,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1503,        if (excp != 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1504,"            result = dotrap(excp, MULTIPLY_TRAP, x, result);",2,0,0,1,2,0,14,0,0,17,48,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1507,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1584,        int trial=0;    // trial quotient digit,2,0,0,0,0,0,0,0,0,2,39,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1587,        int md=0;       // most sig digit in result,0,0,0,0,0,0,0,0,0,0,43,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1591,        if (field.getRadixDigits() != divisor.field.getRadixDigits()) {,6,2,0,3,7,0,6,0,0,14,63,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1598,        Dfp result = newInstance(getZero());,6,2,0,2,4,0,4,2,0,14,36,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1601,        if (nans != FINITE || divisor.nans != FINITE) {,10,3,0,1,3,0,0,0,0,13,47,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1632,        if (divisor.mant[mant.length-1] == 0) {,10,2,0,2,5,0,0,0,0,14,39,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1641,        dividend = new int[mant.length+1];  // one extra digit needed,6,1,0,1,2,0,0,0,0,8,61,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1642,"        quotient = new int[mant.length+2];  // two extra digits needed 1 for overflow, 1 for rounding",18,4,1,1,2,0,0,0,0,27,93,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1643,        remainder = new int[mant.length+1]; // one extra digit needed,4,0,0,1,2,0,0,0,0,5,61,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1647,        dividend[mant.length] = 0;,4,0,1,1,2,0,0,0,0,7,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1648,        quotient[mant.length] = 0;,6,2,0,1,2,0,6,0,0,14,26,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1649,        quotient[mant.length+1] = 0;,0,0,0,1,2,0,0,0,0,3,28,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1650,        remainder[mant.length] = 0;,4,0,1,1,2,0,0,0,0,7,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1655,        for (int i = 0; i < mant.length; i++) {,18,2,0,1,3,0,0,0,0,22,39,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1656,            dividend[i] = mant[i];,2,0,1,2,4,0,4,0,0,16,22,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1657,            quotient[i] = 0;,0,0,1,1,2,0,0,0,0,5,16,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1658,            remainder[i] = 0;,0,0,0,1,2,0,0,0,0,3,17,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1662,        nsqd = 0;,4,0,0,0,0,0,2,2,0,9,9,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1663,        for (qd = mant.length+1; qd >= 0; qd--) {,0,0,0,1,3,0,0,0,0,4,41,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1667,            final int divMsb = dividend[mant.length]*RADIX+dividend[mant.length-1];,12,3,1,2,4,1,0,0,0,20,71,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1668,            int min = divMsb       / (divisor.mant[mant.length-1]+1);,12,3,0,2,4,0,0,0,0,15,57,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1669,            int max = (divMsb + 1) / divisor.mant[mant.length-1];,12,3,0,2,4,0,0,0,0,15,53,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1671,            trialgood = false;,2,0,0,0,0,0,0,0,0,4,18,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1672,            while (!trialgood) {,2,0,0,1,3,0,0,0,0,3,20,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1674,                trial = (min+max)/2;,10,3,0,1,2,0,0,0,0,14,20,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1677,                int rh = 0;,2,0,0,0,0,0,0,0,0,2,11,9,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1678,                for (int i = 0; i < mant.length + 1; i++) {,0,0,0,1,3,0,0,0,0,4,43,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1679,                    int dm = (i<mant.length)?divisor.mant[i]:0;,0,0,0,2,4,0,0,0,0,6,43,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1680,                    final int r = (dm * trial) + rh;,8,2,0,1,2,1,0,0,0,11,32,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1681,                    rh = r / RADIX;,12,1,0,0,0,0,0,0,0,14,15,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1682,                    remainder[i] = r - rh * RADIX;,0,0,0,1,2,0,0,0,0,3,30,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1686,                rh = 1;  // carry in to aid the subtraction,0,0,0,0,0,0,0,0,0,0,43,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1687,                for (int i = 0; i < mant.length + 1; i++) {,14,2,0,1,3,0,4,2,0,25,43,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1688,                    final int r = ((RADIX-1) - remainder[i]) + dividend[i] + rh;,10,5,1,4,8,1,0,0,0,33,60,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1689,                    rh = r / RADIX;,0,0,0,0,0,0,0,0,0,0,15,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1690,                    remainder[i] = r - rh * RADIX;,0,0,0,1,2,0,0,0,0,3,30,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1694,                if (rh == 0) {,2,1,0,1,3,0,0,0,0,3,14,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1696,                    max = trial-1;,4,1,0,0,0,0,0,0,0,6,14,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1697,                    continue;,2,0,0,0,0,0,0,0,0,2,9,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1701,                minadj = (remainder[mant.length] * RADIX)+remainder[mant.length-1];,0,0,0,3,6,0,0,0,0,9,67,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1702,                minadj = minadj / (divisor.mant[mant.length-1]+1);,0,0,0,2,4,0,0,0,0,6,50,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1704,                if (minadj >= 2) {,8,1,0,1,3,0,0,0,0,11,18,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1705,                    min = trial+minadj;  // update the minimum,0,0,0,0,0,0,0,0,0,0,42,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1706,                    continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1711,                trialgood = false;  // assume false,2,0,0,0,0,0,0,0,0,4,35,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1712,                for (int i = mant.length - 1; i >= 0; i--) {,14,2,0,1,3,0,4,0,0,22,44,0,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1713,                    if (divisor.mant[i] > remainder[i]) {,0,0,0,3,7,0,0,0,0,10,37,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1714,                        trialgood = true;,4,0,0,0,0,0,0,2,0,8,17,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1716,                    if (divisor.mant[i] < remainder[i]) {,4,1,1,3,7,0,0,0,0,11,37,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1717,                        break;,0,0,0,0,0,0,0,0,0,0,6,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1721,                if (remainder[mant.length] != 0) {,4,1,1,2,5,0,0,0,0,7,34,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1722,                    trialgood = false;,2,0,0,0,0,0,0,0,0,4,18,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1725,                if (trialgood == false) {,4,2,0,1,3,0,0,0,0,7,25,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1726,                    min = trial+1;,4,1,0,0,0,0,0,0,0,6,14,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1728,            },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1731,            quotient[qd] = trial;,0,0,0,1,2,0,0,0,0,3,21,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1732,            if (trial != 0 || nsqd != 0) {,4,3,0,1,3,0,0,0,0,7,30,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1733,                nsqd++;,0,0,0,0,0,0,0,0,0,0,7,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1736,            if (field.getRoundingMode() == DfpField.RoundingMode.ROUND_DOWN && nsqd == mant.length) {,0,0,0,2,5,0,0,0,0,7,89,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1741,            if (nsqd > mant.length) {,6,1,0,1,3,0,0,0,0,7,25,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1743,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1747,            dividend[0] = 0;,0,0,1,1,2,0,0,0,0,3,16,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1748,            for (int i = 0; i < mant.length; i++) {,16,2,0,1,3,0,0,0,0,20,39,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1749,                dividend[i + 1] = remainder[i];,0,0,0,2,4,0,0,0,0,6,31,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1754,        md = mant.length;  // default,8,1,0,0,0,0,0,0,0,10,29,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1755,        for (int i = mant.length + 1; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,44,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1756,            if (quotient[i] != 0) {,2,1,1,2,5,0,6,0,0,18,23,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1757,                md = i;,6,0,1,0,0,0,0,0,0,10,7,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1758,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1763,        for (int i=0; i<mant.length; i++) {,0,0,0,1,3,0,0,0,0,4,35,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1764,            result.mant[mant.length-i-1] = quotient[md-i];,14,2,1,2,4,0,0,0,0,19,46,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1768,        result.exp = exp - divisor.exp + md - mant.length;,16,3,0,0,0,0,0,0,0,20,50,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1769,        result.sign = (byte) ((sign == divisor.sign) ? 1 : -1);,14,1,0,3,6,0,0,0,0,17,55,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1771,"        if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero",8,2,0,2,5,0,0,0,0,10,76,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1772,            result.exp = 0;,4,0,0,0,0,0,0,0,0,5,15,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1775,        if (md > (mant.length-1)) {,0,0,0,2,5,0,0,0,0,7,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1776,            excp = result.round(quotient[md-mant.length]);,0,0,0,2,4,0,0,0,0,6,46,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1781,        if (excp != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1782,"            result = dotrap(excp, DIVIDE_TRAP, divisor, result);",10,0,0,1,2,1,16,6,0,34,52,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1785,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1796,        if (nans != FINITE) {,4,1,0,1,3,0,0,0,0,5,21,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1807,        if (divisor == 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1817,        if (divisor < 0 || divisor >= RADIX) {,6,3,0,1,3,0,0,0,0,9,38,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1825,        Dfp result = newInstance(this);,6,0,0,1,2,0,2,2,0,11,31,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1827,        int rl = 0;,2,0,0,0,0,0,0,0,0,2,11,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1828,        for (int i = mant.length-1; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,42,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1829,            final int r = rl*RADIX + result.mant[i];,0,0,0,1,2,0,0,0,0,3,40,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1830,            final int rh = r / divisor;,8,1,0,0,0,2,4,0,0,15,27,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1831,            rl = r - rh * divisor;,14,4,0,0,0,0,0,0,0,20,22,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1832,            result.mant[i] = rh;,6,0,1,1,2,0,4,0,0,14,20,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1835,        if (result.mant[mant.length-1] == 0) {,0,0,0,2,5,0,0,0,0,7,38,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1837,            result.shiftLeft();,0,0,0,1,2,0,4,0,0,4,19,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1838,            final int r = rl * RADIX;        // compute the next digit and put it in,8,2,0,0,0,1,0,0,0,11,72,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1839,            final int rh = r / divisor;,12,1,0,0,0,2,2,0,0,18,27,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1840,            rl = r - rh * divisor;,8,2,0,0,0,0,0,0,0,11,22,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1841,            result.mant[0] = rh;,2,0,0,1,2,0,0,0,0,2,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1844,        final int excp = result.round(rl * RADIX / divisor);  // do the rounding,8,2,0,1,2,1,4,0,0,15,72,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1845,        if (excp != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1846,"            result = dotrap(excp, DIVIDE_TRAP, result, result);",0,0,0,1,2,0,0,0,0,3,51,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1849,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1859,        if (nans == FINITE && mant[mant.length-1] == 0) {,10,4,1,2,5,0,0,0,0,16,49,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1864,        if (nans != FINITE) {,0,0,0,1,3,0,0,0,0,4,21,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1884,        if (sign == -1) {,22,4,1,1,3,0,4,0,0,35,17,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1895,        Dfp x = newInstance(this);,2,0,1,1,2,0,2,2,0,12,26,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1898,        if (x.exp < -1 || x.exp > 1) {,0,0,0,1,3,0,0,0,0,4,30,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1903,        switch (x.mant[mant.length-1] / 2000) {,12,2,0,2,5,0,0,0,0,15,39,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1905,                x.mant[mant.length-1] = x.mant[mant.length-1]/2+1;,0,0,0,2,4,0,0,0,0,6,50,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1906,                break;,2,1,0,0,0,0,4,0,0,7,6,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1914,                x.mant[mant.length-1] = 3000;,0,0,0,1,2,0,0,0,0,3,29,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1917,        Dfp dx = newInstance(x);,10,2,0,1,2,1,4,2,0,19,24,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1922,        Dfp px  = getZero();,2,0,0,1,2,0,2,2,0,6,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1923,        Dfp ppx = getZero();,0,0,0,1,2,0,0,0,0,3,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1924,        while (x.unequal(px)) {,4,0,0,2,5,0,6,0,0,11,23,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1925,            dx = newInstance(x);,2,0,0,1,2,0,4,0,0,7,20,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1926,            dx.sign = -1;,4,0,0,0,0,0,0,0,0,6,13,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1927,            dx = dx.add(this.divide(x));,0,0,0,2,4,0,0,0,0,6,28,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1928,            dx = dx.divide(2);,14,3,0,1,2,1,4,0,0,24,18,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1929,            ppx = px;,10,2,0,0,0,0,0,0,0,14,9,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1930,            px = x;,6,0,0,0,0,0,0,0,0,7,7,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1931,            x = x.add(dx);,2,0,0,1,2,0,6,0,0,9,14,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1933,            if (x.equals(ppx)) {,0,0,0,2,5,0,0,0,0,7,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1940,            if (dx.mant[mant.length-1] == 0) {,8,2,1,2,5,0,4,0,0,23,34,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1941,                break;,2,0,0,0,0,0,0,2,0,4,6,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1945,        return x;,4,1,0,0,0,1,0,0,0,5,9,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1954,        if (nans != FINITE) {,4,1,0,1,3,0,0,0,0,5,21,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1963,        if (exp > mant.length || exp < -1) {,2,0,0,1,3,0,4,4,0,10,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1967,        return dfp2string();,0,0,0,1,2,1,2,0,0,2,20,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2056,        char buffer[] = new char[mant.length*4 + 20];,8,2,0,2,4,0,6,0,0,17,45,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2057,        int p = 1;,2,0,0,0,0,0,0,0,0,2,10,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2059,        int e = exp;,4,0,0,0,0,0,0,0,0,4,12,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2060,        boolean pointInserted = false;,2,0,0,0,0,0,0,0,0,3,30,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2062,        buffer[0] = ' ';,0,0,1,1,2,0,0,0,0,4,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2064,        if (e <= 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2065,            buffer[p++] = '0';,2,0,1,1,2,0,0,0,0,7,18,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2066,            buffer[p++] = '.';,40,13,0,1,2,0,0,0,0,54,18,9,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2067,            pointInserted = true;,0,0,0,0,0,0,0,0,0,0,21,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2070,        while (e < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2078,        for (int i = mant.length - 1; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,44,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2079,            buffer[p++] = (char) ((mant[i] / 1000) + '0');,4,2,1,5,10,1,10,0,0,26,46,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2080,            buffer[p++] = (char) (((mant[i] / 100) % 10) + '0');,2,3,1,6,12,0,0,0,0,14,52,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2081,            buffer[p++] = (char) (((mant[i] / 10) % 10) + '0');,2,3,1,6,12,0,0,0,0,14,51,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2082,            buffer[p++] = (char) (((mant[i]) % 10) + '0');,0,0,0,6,12,0,0,0,0,18,46,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2083,            if (--e == 0) {,6,2,1,1,3,0,0,0,0,17,15,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2084,                buffer[p++] = '.';,2,0,1,1,2,0,0,0,0,7,18,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2085,                pointInserted = true;,0,0,0,0,0,0,0,0,0,0,21,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2089,        while (e > 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2097,        if (!pointInserted) {,4,0,0,1,3,1,2,0,0,8,21,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2103,        q = 1;,4,1,0,0,0,0,0,0,0,6,6,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2104,        while (buffer[q] == '0') {,10,5,1,2,5,0,0,0,0,19,26,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2105,            q++;,0,0,0,0,0,0,0,0,0,0,4,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2107,        if (buffer[q] == '.') {,0,1,1,2,5,0,0,0,0,6,23,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2108,            q--;,2,0,0,0,0,0,0,0,0,3,4,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2112,        while (buffer[p-1] == '0') {,0,0,0,2,5,0,0,0,0,7,28,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2113,            p--;,0,0,0,0,0,0,0,0,0,0,4,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2117,        if (sign < 0) {,4,1,0,1,3,0,8,0,0,14,15,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2121,"        return new String(buffer, q, p - q);",0,0,0,1,2,1,0,0,0,4,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2133,        Dfp def = result;,4,0,0,0,0,0,0,2,0,6,17,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2135,        switch (type) {,2,0,0,1,3,0,0,0,0,2,15,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2184,            default: def = result; break;,0,0,0,0,0,0,0,0,0,0,29,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2187,"        return trap(type, what, oper, def, result);",0,0,0,1,2,1,12,0,0,12,43,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2203,        return def;,2,0,0,0,0,1,0,0,0,2,11,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1000,            switch (rmode) {,6,1,1,1,3,0,0,0,0,12,16,3,0.03571,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,131,    public MersenneTwister(long seed) {,8,2,0,1,3,0,0,0,0,10,35,7,0.03571,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,132,        mt = new int[N];,2,0,1,1,2,0,0,0,0,5,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,133,        setSeed(seed);,2,0,0,1,2,0,4,2,0,8,14,3,0.03571,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,134,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,35,    public BitsStreamGenerator() {,2,0,0,1,3,1,0,0,0,3,30,2,0.03333,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,36,        nextGaussian = Double.NaN;,6,0,0,0,0,0,0,0,0,7,26,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,37,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,94,"    private static final int[] MAG01 = { 0x0, 0x9908b0df };",2,0,0,2,4,3,0,0,0,5,55,2,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,144,        long longMT = seed;,4,0,0,0,0,0,0,0,0,4,19,5,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,145,        mt[0]= (int) longMT;,2,0,1,2,4,0,0,0,0,5,20,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,146,        for (mti = 1; mti < N; ++mti) {,8,1,0,1,3,0,0,0,0,11,31,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,149,            longMT = (1812433253l * (longMT ^ (longMT >> 30)) + mti) & 0xffffffffL;,8,5,0,3,6,0,0,0,0,14,71,6,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,150,            mt[mti]= (int) longMT;,4,0,1,2,4,0,0,0,0,9,22,3,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,152,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,163,        if (seed == null) {,10,3,0,1,3,0,0,0,0,13,19,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,168,        setSeed(19650218);,0,0,0,1,2,0,2,0,0,2,18,5,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,169,        int i = 1;,2,0,0,0,0,0,0,0,0,2,10,5,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,170,        int j = 0;,6,0,0,0,0,0,0,0,0,7,10,3,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,172,"        for (int k = FastMath.max(N, seed.length); k != 0; k--) {",10,1,0,2,5,0,6,0,0,18,57,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,173,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,2,3,1,5,10,0,0,0,0,13,73,7,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,174,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,6,5,1,5,10,0,0,0,0,15,73,7,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,175,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1664525l)) + seed[j] + j; // non linear,10,5,1,5,10,0,0,0,0,19,76,7,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,176,            mt[i]   = (int) (l & 0xffffffffl);,6,2,1,3,6,0,0,0,0,13,34,3,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,177,            i++; j++;,4,0,0,0,0,0,0,0,0,6,9,6,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,178,            if (i >= N) {,0,0,0,1,3,0,0,0,0,4,13,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,179,                mt[0] = mt[N - 1];,0,0,0,2,4,0,0,0,0,6,18,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,180,                i = 1;,2,0,0,0,0,0,0,0,0,3,6,8,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,182,            if (j >= seed.length) {,6,1,0,1,3,0,0,0,0,7,23,6,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,183,                j = 0;,0,0,0,0,0,0,0,0,0,0,6,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,187,        for (int k = N - 1; k != 0; k--) {,0,0,0,1,3,0,0,0,0,4,34,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,188,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,0,0,0,5,10,0,0,0,0,15,73,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,189,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,6,5,1,5,10,0,0,0,0,15,73,7,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,190,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1566083941l)) - i; // non linear,10,5,0,4,8,0,0,0,0,15,69,7,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,191,            mt[i]   = (int) (l & 0xffffffffL);,2,1,1,3,6,0,0,0,0,8,34,6,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,192,            i++;,4,0,1,0,0,1,0,0,0,10,4,5,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,193,            if (i >= N) {,0,0,0,1,3,0,0,0,0,4,13,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,194,                mt[0] = mt[N - 1];,4,1,1,2,4,0,0,0,0,10,18,3,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,195,                i = 1;,2,0,0,0,0,0,0,0,0,3,6,8,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,199,        mt[0] = 0x80000000; // MSB is 1; assuring non-zero initial array,8,0,1,1,2,0,0,2,0,13,64,3,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,201,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,210,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",0,0,0,7,14,0,0,0,0,21,71,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,211,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3464,        return (a <= b) ? b : a;,8,1,0,1,2,1,0,0,0,9,24,5,0.00602,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,149,                double scaleFactor = 1d;,0,0,0,0,0,0,0,0,0,0,24,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,150,                double lastScaleFactor = 1d;,2,0,0,0,0,0,8,0,0,11,28,3,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,151,                final int maxPower = 5;,2,0,0,0,0,1,0,0,0,3,23,8,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,152,"                final double scale = FastMath.max(a,b);",2,0,0,1,2,1,12,0,0,15,39,5,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,153,                if (scale <= 0) {  // Can't scale,0,0,0,1,3,0,0,0,0,4,33,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,158,                infinite = true;,0,0,0,0,0,0,0,0,0,0,16,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,159,                for (int i = 0; i < maxPower; i++) {,12,1,0,1,3,0,0,0,0,14,36,3,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,160,                    lastScaleFactor = scaleFactor;,10,1,0,0,0,0,0,0,0,12,30,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,161,                    scaleFactor *= scale;,0,0,0,0,0,0,0,0,0,0,21,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,162,                    if (a != 0.0 && a > b) {,8,0,0,1,3,1,10,0,0,20,24,0,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,169,                    infinite = Double.isInfinite(p2) || Double.isInfinite(q2);,0,0,0,2,4,0,0,0,0,6,58,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,170,                    if (!infinite) {,10,0,0,1,3,0,0,0,0,12,16,3,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,171,                        break;,0,0,0,0,0,0,0,0,0,0,6,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/FastMath,60,644,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,60,648,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.25,0,0
defect4j,math,org/apache/commons/math/special/Gamma,60,169,            ret = 0.0;,2,0,0,0,0,0,0,0,0,2,10,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,60,3491,        return (a <= b) ? b : (Double.isNaN(a + b) ? Double.NaN : a);,0,0,0,3,6,1,0,0,0,10,61,4,0.16667,0,0
defect4j,math,org/apache/commons/math/special/Gamma,60,173,"            ret = 1.0 - regularizedGammaQ(a, x, epsilon, maxIterations);",0,0,0,1,2,0,0,0,0,3,60,4,0.16667,0,0
defect4j,math,org/apache/commons/math/special/Erf,60,53,            ret = -ret;,4,0,0,0,0,0,0,0,0,6,11,6,0.16667,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,387,        return new IllegalArgumentException() {,0,0,0,1,3,1,0,2,0,2,39,6,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,316,    private LocalizedFormats(final String sourceFormat) {,4,0,0,1,3,2,0,2,0,8,53,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,317,        this.sourceFormat = sourceFormat;,2,0,1,0,0,0,4,0,0,10,33,3,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,318,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",4,0,0,5,10,3,0,0,0,8,67,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,45,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",4,0,0,4,8,0,8,0,0,13,94,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,46,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",2,0,0,1,2,0,0,0,0,3,41,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,47,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",0,0,0,1,2,0,0,0,0,3,95,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,48,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",0,0,0,1,2,0,0,0,0,3,60,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,49,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",2,0,0,1,2,0,0,0,0,3,54,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,50,"    BANDWIDTH_OUT_OF_INTERVAL(""bandwidth must be in the interval [0,1], but got {0}""),",0,0,0,3,6,0,0,0,0,9,82,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,51,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n,k), got n = {0}, k = {1}""),",2,1,0,4,8,0,6,0,0,9,107,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,52,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n,k), got n = {0}""),",2,0,0,3,6,0,0,0,0,3,92,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,53,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",2,0,0,1,2,0,0,0,0,3,123,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,54,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",12,1,0,1,2,0,0,0,0,16,89,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,55,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",0,0,0,2,4,0,0,0,0,6,108,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",12,3,0,1,2,1,6,0,0,24,100,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,57,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",2,0,0,2,4,0,0,0,0,3,94,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,58,"    CANNOT_CONVERT_OBJECT_TO_FRACTION(""cannot convert given object to a fraction number: {0}""),",0,0,0,2,4,0,0,0,0,6,91,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",0,0,0,3,6,0,0,0,0,9,97,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",4,0,0,2,4,0,0,0,0,7,83,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",0,0,0,2,4,0,0,0,0,6,86,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",2,0,0,2,4,0,0,0,0,3,87,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",0,0,0,1,2,0,0,0,0,3,84,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",2,0,0,1,2,0,6,0,0,9,131,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",2,0,0,1,2,1,0,0,0,3,75,3,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",2,0,1,2,4,1,0,0,0,7,78,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",10,1,1,1,2,1,0,0,0,16,95,3,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",0,0,0,2,4,0,0,0,0,6,74,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",2,0,0,1,2,0,0,0,0,3,55,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",0,0,0,3,6,0,0,0,0,9,79,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",2,0,0,2,4,0,0,0,0,3,115,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,78,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,74,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",8,1,0,2,4,0,2,0,0,13,112,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,75,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",2,1,0,2,4,0,0,0,0,3,86,6,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,76,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",0,0,0,5,10,0,0,0,0,15,290,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",0,0,0,3,6,0,8,0,0,8,263,5,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,78,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",8,4,0,1,2,0,12,0,0,28,52,5,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,79,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",4,0,1,3,6,1,0,0,0,7,109,6,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,80,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",0,0,0,3,6,0,0,0,0,9,81,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,81,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",0,0,0,1,2,0,6,0,0,6,49,5,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,82,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",2,0,0,5,10,0,0,0,0,3,71,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,83,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,84,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",0,0,0,1,2,0,0,0,0,3,54,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,85,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",4,0,0,2,4,1,10,0,0,16,119,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,86,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",0,0,0,1,2,0,0,0,0,3,51,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,87,"    DUPLICATED_ABSCISSA(""Abscissa {0} is duplicated at both indices {1} and {2}""),",0,0,0,4,8,0,0,0,0,12,78,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,88,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",4,0,0,1,2,0,0,0,0,6,88,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,89,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",2,0,0,1,2,0,0,0,0,3,71,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,90,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",2,0,0,1,2,0,0,0,0,3,65,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,91,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",0,0,0,1,2,0,0,0,0,3,77,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,92,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",4,0,1,4,8,0,0,0,0,7,78,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,93,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",2,0,0,3,6,1,2,0,0,5,81,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,94,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",0,0,0,1,2,0,0,0,0,3,53,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,95,"    EVALUATION_FAILED(""evaluation failed for argument = {0}""),",2,0,0,2,4,0,0,0,0,2,58,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,96,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",2,0,0,3,6,0,0,2,0,4,77,13,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,97,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",6,0,0,2,4,0,0,0,0,9,69,3,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,98,"    FAILED_BRACKETING(""number of iterations={0}, maximum iterations={1}, initial={2}, lower bound={3}, upper bound={4}, final a value={5}, final b value={6}, f(a)={7}, f(b)={8}""),",0,0,0,12,24,0,0,0,0,36,175,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,99,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",18,7,1,3,6,0,16,0,0,50,85,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,100,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,79,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,101,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",0,0,0,2,4,0,0,0,0,6,54,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,102,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",0,0,0,2,4,0,0,0,0,6,73,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,103,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",2,0,0,5,10,0,0,0,0,3,85,9,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,104,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",8,1,0,1,2,1,2,2,0,15,62,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,105,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",2,0,0,1,2,0,10,0,0,13,54,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,106,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,3,56,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,107,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",10,1,0,4,8,0,8,0,0,20,56,3,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,108,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",2,0,0,2,4,0,0,0,0,3,76,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,109,"    IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO(""identical abscissas x[{0}] == x[{1}] == {2} cause division by zero""),",0,0,0,6,12,0,0,0,0,18,107,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,110,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",4,0,0,3,6,1,0,2,0,7,95,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,111,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",2,0,0,3,6,0,0,0,0,3,50,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,112,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",0,0,0,5,10,0,0,0,0,15,64,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,113,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",2,0,0,3,6,0,0,0,0,3,79,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,114,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",4,0,0,1,2,3,0,0,0,8,59,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,115,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",0,0,0,3,6,0,0,0,0,9,72,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,116,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {0} after final column {1}""),",0,0,0,3,6,0,0,0,0,9,79,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,117,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {0} after final row {1}""),",0,0,0,3,6,0,8,0,0,8,67,7,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,118,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",0,0,0,4,8,0,0,0,0,12,121,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,119,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",4,0,1,2,4,1,4,0,0,14,103,3,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,120,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,121,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",0,0,0,3,6,0,0,0,0,9,75,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,122,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",2,0,0,3,6,0,0,0,0,3,105,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,123,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",2,0,0,3,6,0,0,0,0,3,83,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,124,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT(""{0} method needs at least one previous point""),",0,0,0,2,4,0,0,0,0,6,101,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,125,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",0,0,0,2,4,0,0,0,0,6,66,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,126,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",0,0,0,4,8,0,0,0,0,12,112,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,127,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),",0,0,0,4,8,0,0,0,0,12,124,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,128,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",2,0,0,3,6,0,6,4,0,12,72,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,129,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",2,0,0,2,4,0,0,0,0,3,71,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,130,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),",0,0,0,4,8,0,0,0,0,12,141,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,131,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",2,0,0,26,52,0,0,0,0,3,165,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,132,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",0,0,0,1,2,0,0,0,0,3,41,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,133,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,2,56,5,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,134,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",18,6,1,4,8,1,0,0,0,30,56,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,135,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),",0,0,0,1,2,0,0,0,0,3,101,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,136,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",2,0,0,1,2,0,0,0,0,3,67,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,137,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",0,0,0,5,10,0,0,0,0,15,111,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,138,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",2,1,0,5,10,0,4,0,0,8,111,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,139,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",2,0,0,1,2,0,0,0,0,3,70,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,140,"    EVALUATIONS(""evaluations""), /* keep */",8,1,0,1,2,0,0,0,0,11,38,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,141,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",0,0,0,3,6,0,0,0,0,9,62,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,142,"    MAX_EVALUATIONS_EXCEEDED(""maximal number of evaluations ({0}) exceeded""),",4,0,0,3,6,0,6,2,0,13,73,3,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,143,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",2,0,0,3,6,0,0,0,0,3,71,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,144,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({0,number,0.00E00}) reached, integration needs {1,number,0.00E00}""),",2,0,0,4,8,0,0,0,0,3,132,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,145,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",2,0,0,3,6,0,8,0,0,11,156,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,146,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",2,0,0,2,4,0,0,0,0,3,43,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,147,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",2,0,0,1,2,0,0,2,0,5,49,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,148,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",2,0,0,2,4,0,0,0,0,3,92,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,149,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",2,0,0,2,4,0,0,0,0,3,55,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,150,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",4,0,0,5,10,1,6,2,0,14,68,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,151,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",2,0,0,3,6,0,0,0,0,3,58,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,152,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,79,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,153,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,73,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,154,"    NEGATIVE_ROBUSTNESS_ITERATIONS(""the number of robustness iterations must be non-negative, but got {0}""),",2,0,0,2,4,0,0,0,0,3,104,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,155,"    START_POSITION(""start position ({0})""), /* keep */",10,0,0,3,6,0,0,0,0,11,50,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,156,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge for value {0}""),",0,0,0,2,4,0,0,0,0,6,101,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,157,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,158,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",8,1,0,2,4,0,2,0,0,13,81,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,159,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,89,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,160,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,89,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,161,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",0,0,0,3,6,0,0,0,0,9,85,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,162,"    NON_SQUARE_MATRIX(""a {0}x{1} matrix was provided instead of a square matrix""),",2,0,0,3,6,0,0,0,0,3,78,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,163,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",2,0,0,1,2,0,0,0,0,3,60,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,164,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",10,2,0,1,2,0,0,0,0,13,41,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,165,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",8,0,0,5,10,0,0,2,0,11,93,3,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,166,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,167,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,88,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,168,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),",4,0,0,5,10,0,0,0,0,6,113,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,169,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",2,0,0,3,6,0,0,0,0,3,97,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,170,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,171,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,88,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,172,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",2,0,0,5,10,0,0,0,0,3,105,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,173,"    NOT_POSITIVE_ALPHA(""alpha must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,174,"    NOT_POSITIVE_BETA(""beta must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,49,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,175,"    NOT_POSITIVE_COLUMNDIMENSION(""invalid column dimension: {0} (must be positive)""),",2,0,0,3,6,3,0,0,0,5,81,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,176,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""),",0,0,0,1,2,0,0,0,0,3,61,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,177,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,178,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",2,0,0,3,6,0,0,0,0,3,66,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,179,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",6,1,0,3,6,0,0,0,0,8,65,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,180,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,53,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,181,"    LENGTH(""length ({0})""), /* keep */",2,1,0,3,6,0,14,0,0,18,34,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,182,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,49,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,183,"    MEAN(""mean ({0})""), /* keep */",4,1,0,3,6,0,0,0,0,6,30,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,184,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",2,0,0,2,4,0,0,0,0,3,72,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,185,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,56,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,186,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",2,0,0,3,6,0,0,0,0,3,65,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,187,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",0,0,0,2,5,0,0,0,0,7,53,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,188,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,69,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,189,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,71,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,190,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,76,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,191,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,192,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,193,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,194,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,77,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,195,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,196,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,197,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",2,1,1,3,6,0,0,0,0,8,63,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,198,"    NOT_POWER_OF_TWO(""{0} is not a power of 2""),",2,0,0,2,4,0,0,0,0,3,44,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,199,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",0,0,0,2,4,0,0,0,0,6,87,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,200,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",2,0,0,2,4,0,0,0,0,3,62,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,201,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,202,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,107,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,203,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",2,0,0,1,2,0,0,0,0,3,79,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,204,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,205,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */",6,0,0,6,12,0,0,0,0,8,107,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,206,"    NOT_SUBTRACTION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not subtraction compatible""),",0,0,0,5,10,0,0,0,0,15,99,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,207,"    NOT_SYMMETRIC_MATRIX(""not symmetric matrix""),",2,0,0,1,2,0,0,0,0,3,45,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,208,"    NO_BIN_SELECTED(""no bin selected""),",2,0,0,1,2,0,0,0,0,3,35,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,209,"    NO_CONVERGENCE_WITH_ANY_START_POINT(""none of the {0} start points lead to convergence""), /* keep */",0,0,0,2,4,0,0,0,0,6,99,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,210,"    NO_DATA(""no data""), /* keep */",2,0,0,1,2,0,0,0,0,3,30,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,211,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",2,0,0,4,8,0,0,0,0,3,82,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,212,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),",0,0,0,1,2,0,0,0,0,3,99,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,213,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",2,0,0,1,2,0,0,0,0,3,45,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,214,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""), /* keep */",2,0,0,1,2,0,0,0,0,3,62,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,215,"    NO_RESULT_AVAILABLE(""no result available""),",2,0,0,1,2,0,0,0,0,3,43,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,216,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",2,0,0,6,12,0,0,0,0,3,75,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,217,"    NULL_NOT_ALLOWED(""null is not allowed""), /* keep */",0,0,0,1,2,0,0,0,0,3,51,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,218,"    COVARIANCE_MATRIX(""covariance matrix""), /* keep */",0,0,0,1,2,0,0,0,0,3,50,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,219,"    DENOMINATOR(""denominator""), /* keep */",4,0,0,1,2,0,0,0,0,5,38,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,220,"    DENOMINATOR_FORMAT(""denominator format""), /* keep */",2,0,0,1,2,0,0,0,0,3,52,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,221,"    FRACTION(""fraction""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,222,"    FUNCTION(""function""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,223,"    IMAGINARY_FORMAT(""imaginary format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,224,"    INPUT_ARRAY(""input array""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,225,"    NUMERATOR(""numerator""), /* keep */",2,0,0,1,2,0,0,0,0,4,34,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,226,"    NUMERATOR_FORMAT(""numerator format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,227,"    OBJECT_TRANSFORMATION(""conversion exception in transformation""), /* keep */",0,0,0,1,2,0,0,0,0,3,75,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,228,"    REAL_FORMAT(""real format""), /* keep */",8,0,0,1,2,1,6,2,0,18,38,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,229,"    WHOLE_FORMAT(""whole format""), /* keep */",2,0,0,1,2,0,0,0,0,3,40,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,230,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,68,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,231,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,69,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,232,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,97,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,233,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,98,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,234,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),",0,0,0,5,10,0,0,0,0,15,127,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,235,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",4,1,1,2,4,0,0,0,0,10,87,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,236,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),",0,0,0,4,8,0,0,0,0,12,150,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,237,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",12,2,0,2,4,0,0,0,0,16,76,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,238,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",0,0,0,2,4,0,0,0,0,6,84,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,239,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),",2,0,0,3,6,0,0,0,0,3,87,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,240,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",2,0,0,4,8,0,0,0,0,3,101,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,241,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",2,0,0,5,10,0,0,0,0,3,150,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,242,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),",0,0,0,6,12,0,0,0,0,18,96,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,243,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */",2,0,0,5,10,0,0,0,0,3,62,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,244,"    OVERFLOW_IN_FRACTION(""overflow in fraction {0}/{1}, cannot negate""),",2,0,0,3,6,0,8,0,0,12,68,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,245,"    OVERFLOW_IN_ADDITION(""overflow in addition: {0} + {1}""),",0,0,0,3,6,0,0,0,0,9,56,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,246,"    OVERFLOW_IN_SUBTRACTION(""overflow in subtraction: {0} - {1}""),",2,0,0,3,6,0,0,0,0,3,62,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,247,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",2,0,1,3,6,0,0,0,0,8,108,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,248,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),",10,2,0,3,6,0,0,0,0,14,99,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,249,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,91,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,250,"    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(""number of polynomial interpolants must match the number of segments ({0} != {1} - 1)""),",2,0,0,4,8,0,0,0,0,3,130,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,251,"    POPULATION_LIMIT_NOT_POSITIVE(""population limit has to be positive""),",10,1,0,1,2,0,0,0,0,13,69,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,252,"    POSITION_SIZE_MISMATCH_INPUT_ARRAY(""position {0} and size {1} don't fit to the size of the input array {2}""),",6,2,0,4,8,0,0,0,0,9,109,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,253,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",6,0,0,4,8,0,0,2,0,9,90,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,254,"    PROPAGATION_DIRECTION_MISMATCH(""propagation direction mismatch""),",0,0,0,1,2,0,0,0,0,3,65,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,255,"    RANDOMKEY_MUTATION_WRONG_CLASS(""RandomKeyMutation works only with RandomKeys, not {0}""),",2,0,0,2,4,0,0,0,0,3,88,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,256,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",2,0,0,1,2,0,0,0,0,3,77,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,257,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),",2,0,0,3,6,0,0,0,0,3,75,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,258,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,72,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,259,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",2,0,0,7,14,0,0,0,0,3,126,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,260,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,98,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,261,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),",4,0,0,5,10,0,0,0,0,6,113,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,262,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",2,0,0,1,2,0,0,0,0,3,66,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,263,"    SIMPLE_MESSAGE(""{0}""),",2,0,0,2,4,0,0,0,0,3,22,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,264,"    SINGULAR_MATRIX(""matrix is singular""),",0,0,0,1,2,0,0,0,0,3,38,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,265,"    SUBARRAY_ENDS_AFTER_ARRAY_END(""subarray ends after array end""),",2,0,0,1,2,0,0,0,0,3,63,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,266,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),",0,0,0,3,6,0,0,0,0,9,87,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,267,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),",2,0,0,3,6,0,0,0,0,3,97,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,268,"    TOO_SMALL_BANDWIDTH(""the bandwidth must be large enough to accomodate at least 2 points. There are {0}  data points, and bandwidth must be at least {1}  but it is only {2}""),",0,0,0,4,8,0,0,0,0,12,174,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,269,"    TOO_SMALL_COST_RELATIVE_TOLERANCE(""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible""),",4,0,0,3,6,0,0,0,0,5,136,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,270,"    TOO_SMALL_INTEGRATION_INTERVAL(""too small integration interval: length = {0}""),",2,0,0,2,4,0,0,0,0,3,79,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,271,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),",2,0,0,3,6,0,0,0,0,3,120,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,272,"    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible""),",2,0,0,3,6,0,0,0,0,3,156,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,273,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),",4,0,0,2,4,0,0,0,0,5,76,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,274,"    TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED(""two or more values required in each category, one has {0}""),",2,0,0,2,4,0,0,0,0,3,101,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,275,"    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(""unable to bracket optimum in line search""),",2,0,0,1,2,0,0,0,0,3,85,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,276,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),",2,0,0,1,2,0,0,0,0,3,97,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,277,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),",2,0,0,1,2,0,0,0,0,3,95,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,278,"    UNABLE_TO_ORTHOGONOLIZE_MATRIX(""unable to orthogonalize matrix in {0} iterations""),",4,3,0,2,4,0,12,0,0,19,83,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,279,"    UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN(""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix""),",0,0,0,3,6,0,0,0,0,9,117,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,280,"    UNABLE_TO_SOLVE_SINGULAR_PROBLEM(""unable to solve: singular problem""),",2,0,0,1,2,0,0,0,0,3,70,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,281,"    UNBOUNDED_SOLUTION(""unbounded solution""),",2,0,0,1,2,0,0,0,0,3,41,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,282,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),",4,1,0,20,40,1,0,0,0,6,118,3,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,283,"    UNPARSEABLE_3D_VECTOR(""unparseable 3D vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,56,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,284,"    UNPARSEABLE_COMPLEX_NUMBER(""unparseable complex number: \""{0}\""""),",10,1,1,2,4,0,0,0,0,17,66,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,285,"    UNPARSEABLE_FRACTION_NUMBER(""unparseable fraction number: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,68,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,286,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),",0,0,0,2,4,0,0,0,0,6,60,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,287,"    UNSUPPORTED_EXPANSION_MODE(""unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})""),",0,0,0,8,16,0,0,0,0,24,106,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,288,"    UNSUPPORTED_OPERATION(""unsupported operation""), /* keep */",0,0,0,1,2,0,0,0,0,3,58,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,289,"    URL_CONTAINS_NO_DATA(""URL {0} contains no data""),",2,0,0,2,4,0,0,0,0,3,49,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,290,"    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(""{0} values have been added before statistic is configured""),",0,0,0,2,4,0,0,0,0,6,103,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,291,"    VECTOR_LENGTH_MISMATCH(""vector length mismatch: got {0} but expected {1}""),",2,0,0,3,6,0,0,0,0,3,75,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,292,"    VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT(""vector must have at least one element""),",0,0,0,1,2,0,0,0,0,3,79,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,293,"    WEIGHT_AT_LEAST_ONE_NON_ZERO(""weigth array must contain at least one non-zero value""),",0,0,0,1,2,0,0,0,0,3,86,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,294,"    WRONG_BLOCK_LENGTH(""wrong array shape (block length = {0}, expected {1})""),",2,0,0,4,8,0,0,0,0,3,75,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,295,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),",2,0,0,3,6,0,0,0,0,3,64,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,296,"    NUMBER_OF_POINTS(""number of points ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,54,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,297,"    ZERO_DENOMINATOR(""denominator must be different from 0""),",0,0,0,1,2,0,0,0,0,3,57,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,298,"    ZERO_DENOMINATOR_IN_FRACTION(""zero denominator in fraction {0}/{1}""),",2,0,0,3,6,0,0,0,0,3,69,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,299,"    ZERO_FRACTION_TO_DIVIDE_BY(""the fraction to divide by must not be zero: {0}/{1}""),",2,0,0,3,6,0,0,0,0,3,82,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,300,"    ZERO_NORM(""zero norm""),",2,0,0,1,2,0,2,0,0,5,23,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,301,"    ZERO_NORM_FOR_ROTATION_AXIS(""zero norm for rotation axis""),",0,0,0,1,2,0,0,0,0,3,59,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,302,"    ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR(""zero norm for rotation defining vector""),",2,0,0,1,2,0,0,0,0,3,81,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,303,"    ZERO_NOT_ALLOWED(""zero not allowed here"");",8,1,0,1,2,0,0,0,0,11,42,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,39,public enum LocalizedFormats implements Localizable {,2,0,0,0,1,1,0,2,0,5,53,1,1.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,387,        return new IllegalArgumentException() {,0,0,0,1,3,1,0,0,0,5,39,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,35,    private static final double EXP_INT_TABLE_A[] = new double[1500];,0,0,0,2,4,0,0,0,0,6,65,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,40,    private static final double EXP_INT_TABLE_B[] = new double[1500];,2,0,0,2,4,3,6,0,0,11,65,1,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,45,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,6,1,0,2,4,0,8,0,0,16,66,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,50,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,4,0,0,2,4,3,0,0,0,8,66,0,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,53,    private static final double FACT[] = new double[20];,2,0,0,2,4,3,0,0,0,5,52,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,56,    private static final double LN_MANT[][] = new double[1024][];,0,0,0,4,8,0,0,0,0,12,61,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,65,    private static final double LN_SPLIT_COEF[][] = {,2,0,0,2,5,0,0,0,0,3,49,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,85,    private static final double LN_QUICK_COEF[][] = {,10,2,1,2,5,3,0,0,0,25,49,1,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,98,    private static final double LN_HI_PREC_COEF[][] = {,2,1,0,2,5,0,0,0,0,3,51,7,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,108,    private static final double SINE_TABLE_A[] = new double[14];,8,1,0,2,4,3,0,0,0,13,60,1,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,111,    private static final double SINE_TABLE_B[] = new double[14];,2,0,0,2,4,3,0,0,0,5,60,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,114,    private static final double COSINE_TABLE_A[] = new double[14];,8,1,1,2,4,3,8,0,0,23,62,1,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,117,    private static final double COSINE_TABLE_B[] = new double[14];,6,1,1,2,4,0,4,0,0,16,62,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,120,    private static final double TANGENT_TABLE_A[] = new double[14];,2,0,0,2,4,3,8,0,0,13,63,1,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,123,    private static final double TANGENT_TABLE_B[] = new double[14];,4,0,0,2,4,6,0,0,0,10,63,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,126,    private static long RECIP_2PI[] = new long[] {,8,2,0,2,5,0,6,0,0,17,46,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,147,    private static long PI_O_4_BITS[] = new long[] {,0,0,0,2,5,0,0,0,0,7,48,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,155,"    private static final double EIGHTHES[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0,0,0,2,4,0,0,0,0,6,127,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,158,"    private static final double CBRTTWO[] = { 0.6299605249474366,",2,0,0,1,3,3,0,0,0,5,61,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,169,        FACT[0] = 1.0;,0,0,1,1,2,0,0,0,0,3,14,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,170,        for (i = 1; i < 20; i++) {,6,1,0,1,3,0,0,0,0,9,26,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,171,            FACT[i] = FACT[i-1] * i;,4,2,1,2,4,0,0,0,0,13,24,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,174,        double tmp[] = new double[2];,2,0,0,2,4,0,0,0,0,2,29,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,175,        double recip[] = new double[2];,6,0,0,2,4,0,0,0,0,6,31,1,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,178,        for (i = 0; i < 750; i++) {,0,0,0,1,3,0,0,0,0,4,27,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,179,"            expint(i, tmp);",0,0,0,1,2,0,0,0,0,3,15,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,180,            EXP_INT_TABLE_A[i+750] = tmp[0];,4,1,1,2,4,3,0,0,0,13,32,1,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,181,            EXP_INT_TABLE_B[i+750] = tmp[1];,0,0,0,2,4,0,0,0,0,6,32,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,183,            if (i != 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,185,"                splitReciprocal(tmp, recip);",0,0,0,1,2,0,0,0,0,3,28,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,186,                EXP_INT_TABLE_A[750-i] = recip[0];,0,0,0,2,4,0,0,0,0,6,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,187,                EXP_INT_TABLE_B[750-i] = recip[1];,2,1,1,2,4,0,0,0,0,8,34,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,192,        for (i = 0; i < 1025; i++) {,0,0,0,1,3,0,0,0,0,4,28,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,193,"            slowexp(i/1024.0, tmp);",12,2,0,1,2,0,4,0,0,19,23,1,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,194,            EXP_FRAC_TABLE_A[i] = tmp[0];,0,0,1,2,4,0,0,0,0,7,29,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,195,            EXP_FRAC_TABLE_B[i] = tmp[1];,10,1,0,2,4,0,0,0,0,12,29,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,199,        for (i = 0; i < 1024; i++) {,6,1,0,1,3,0,0,0,0,9,28,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,200,            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,0,0,0,4,8,0,0,0,0,12,79,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,201,            LN_MANT[i] = slowLog(d);,0,0,0,2,4,0,0,0,0,6,24,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,205,        buildSinCosTables();,2,2,0,1,2,0,0,0,0,4,20,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,206,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,219,        return Math.sqrt(a);,0,0,0,1,2,1,0,0,0,4,20,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,680,        final double xs[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,681,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,682,        final double facts[] = new double[2];,2,0,0,2,4,1,0,0,0,3,37,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,683,        final double as[] = new double[2];,6,0,0,2,4,1,14,0,0,21,34,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,684,"        split(x, xs);",0,0,0,1,2,0,0,0,0,3,13,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,685,        ys[0] = ys[1] = 0.0;,2,1,1,2,4,0,6,0,0,15,20,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,687,        for (int i = 19; i >= 0; i--) {,16,2,0,1,3,0,0,0,0,20,31,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,688,"            splitMult(xs, ys, as);",0,0,1,1,2,0,0,0,0,7,22,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,689,            ys[0] = as[0];,0,0,0,2,4,0,0,0,0,6,14,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,690,            ys[1] = as[1];,0,0,0,2,4,0,0,0,0,6,14,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,692,"            split(FACT[i], as);",0,0,1,2,4,0,4,0,0,8,19,7,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,693,"            splitReciprocal(as, facts);",2,0,1,1,2,0,6,0,0,14,27,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,695,"            splitAdd(ys, facts, as);",4,0,0,1,2,0,0,0,0,5,24,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,696,            ys[0] = as[0];,2,0,0,2,4,0,2,4,0,8,14,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,697,            ys[1] = as[1];,2,1,1,2,4,0,6,0,0,14,14,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,700,        if (result != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,701,            result[0] = ys[0];,0,0,0,2,4,0,0,0,0,6,18,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,702,            result[1] = ys[1];,4,0,0,2,4,0,0,0,0,5,18,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,705,        return ys[0] + ys[1];,2,0,1,2,4,1,0,0,0,5,21,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,714,        if (d < 8e298 && d > -8e298) {,4,3,0,1,3,0,0,0,0,8,30,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,715,            final double a = d * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,716,            split[0] = (d + a) - a;,0,0,0,2,4,0,0,0,0,6,23,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,717,            split[1] = d - split[0];,2,1,1,2,4,0,0,0,0,8,24,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,718,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,723,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,730,        final double c = a[0] + a[1];,0,0,0,2,4,0,0,0,0,6,29,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,731,        final double d = -(c - a[0] - a[1]);,0,0,0,3,6,0,0,0,0,9,36,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,733,        if (c < 8e298 && c > -8e298) {,4,3,0,1,3,0,0,0,0,8,30,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,734,            double z = c * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,28,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,735,            a[0] = (c + z) - z;,0,0,0,2,4,0,0,0,0,6,19,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,736,            a[1] = c - a[0] + d;,4,2,1,2,4,0,0,0,0,20,20,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,737,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,738,            double z = c * 9.31322574615478515625E-10;,0,0,0,0,0,0,0,0,0,0,42,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,739,            a[0] = (c + z - c) * 1073741824.0;,16,5,1,2,4,0,0,0,0,35,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,740,            a[1] = c - a[0] + d;,0,0,0,2,4,0,0,0,0,6,20,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,742,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,750,        ans[0] = a[0] * b[0];,0,1,1,3,6,0,0,0,0,8,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,751,        ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];,0,5,1,7,14,0,0,0,0,20,49,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,754,        resplit(ans);,4,0,0,1,2,0,4,0,0,9,13,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,755,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,763,        ans[0] = a[0] + b[0];,0,0,0,3,6,0,0,0,0,9,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,764,        ans[1] = a[1] + b[1];,2,0,0,3,6,3,0,0,0,5,21,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,766,        resplit(ans);,0,0,0,1,2,0,4,0,0,4,13,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,767,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,788,        final double b = 1.0/4194304.0;,0,0,0,0,0,0,0,0,0,0,31,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,789,        final double a = 1.0 - b;,8,2,1,0,0,2,0,0,0,14,25,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,791,        if (in[0] == 0.0) {,0,1,1,2,5,0,0,0,0,3,19,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,796,        result[0] = a / in[0];,2,1,1,2,4,0,0,0,0,8,22,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,797,        result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);,0,0,0,9,18,0,0,0,0,27,60,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,799,        if (result[1] != result[1]) { // can happen if result[1] is NAN,0,0,0,4,9,0,0,0,0,13,63,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,800,            result[1] = 0.0;,0,0,0,1,2,0,0,0,0,3,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,804,        resplit(result);,4,0,0,1,2,0,0,0,0,5,16,0,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,806,        for (int i = 0; i < 2; i++) {,6,1,0,1,3,0,0,0,0,8,29,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,808,            double err = 1.0 - result[0] * in[0] - result[0] * in[1] -,2,6,1,4,8,0,0,0,0,23,58,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,811,            err = err * (result[0] + result[1]);,4,2,1,3,6,0,0,0,0,11,36,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,813,            result[1] += err;,2,0,1,1,2,0,0,0,0,5,17,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,815,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,823,        final double xs[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,824,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,825,        final double zs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,828,"        split(a[0], xs);",0,0,0,2,4,0,0,0,0,6,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,829,"        split(b[0], ys);",4,1,1,2,4,0,0,0,0,8,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,830,"        splitMult(xs, ys, zs);",4,1,0,1,2,0,8,0,0,13,22,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,832,        result[0] = zs[0];,0,0,0,2,4,0,0,0,0,6,18,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,833,        result[1] = zs[1];,0,0,1,2,4,0,0,0,0,5,18,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,836,"        split(b[1], ys);",8,1,0,2,4,3,0,0,0,14,16,1,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,837,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,0,0,0,3,22,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,839,        double tmp = result[0] + zs[0];,0,0,0,2,4,0,0,0,0,6,31,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,840,        result[1] = result[1] - (tmp - result[0] - zs[0]);,0,0,0,5,10,0,0,0,0,15,50,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,841,        result[0] = tmp;,0,0,0,1,2,0,0,0,0,3,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,842,        tmp = result[0] + zs[1];,8,1,1,2,4,1,0,0,0,17,24,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,843,        result[1] = result[1] - (tmp - result[0] - zs[1]);,0,0,0,5,10,0,0,0,0,15,50,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,844,        result[0] = tmp;,8,1,0,1,2,0,0,0,0,10,16,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,847,"        split(a[1], xs);",0,0,1,2,4,0,4,0,0,6,16,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,848,"        split(b[0], ys);",2,0,1,2,4,0,4,0,0,8,16,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,849,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,8,0,0,8,22,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,851,        tmp = result[0] + zs[0];,20,7,1,2,4,0,0,0,0,33,24,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,852,        result[1] = result[1] - (tmp - result[0] - zs[0]);,4,2,1,5,10,1,4,0,0,20,50,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,853,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,854,        tmp = result[0] + zs[1];,12,2,1,2,4,1,0,0,0,21,24,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,855,        result[1] = result[1] - (tmp - result[0] - zs[1]);,2,2,1,5,10,0,0,0,0,13,50,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,856,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,859,"        split(a[1], xs);",0,0,0,2,4,0,0,0,0,6,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,860,"        split(b[1], ys);",0,0,0,2,4,0,0,0,0,6,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,861,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,8,0,0,8,22,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,863,        tmp = result[0] + zs[0];,4,1,1,2,4,0,10,0,0,24,24,1,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,864,        result[1] = result[1] - (tmp - result[0] - zs[0]);,0,0,0,5,10,0,0,0,0,15,50,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,865,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,866,        tmp = result[0] + zs[1];,0,0,0,2,4,0,0,0,0,6,24,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,867,        result[1] = result[1] - (tmp - result[0] - zs[1]);,2,2,1,5,10,0,0,0,0,13,50,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,868,        result[0] = tmp;,0,0,0,1,2,0,0,0,0,3,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,869,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,878,        final double xs[] = new double[2];,4,1,0,2,4,1,0,0,0,6,34,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,879,        final double as[] = new double[2];,12,1,0,2,4,1,0,0,0,15,34,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,880,        final double ys[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,889,        xs[0] = 2.718281828459045;,2,0,0,1,2,0,4,2,0,8,26,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,890,        xs[1] = 1.4456468917292502E-16;,0,0,1,1,2,0,0,0,0,3,31,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,892,"        split(1.0, ys);",0,0,0,1,2,0,4,0,0,4,15,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,894,        while (p > 0) {,8,2,0,1,3,0,0,0,0,11,15,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,895,            if ((p & 1) != 0) {,2,2,0,2,5,0,0,0,0,4,19,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,896,"                quadMult(ys, xs, as);",10,1,0,1,2,0,8,0,0,20,21,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,897,                ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,900,"            quadMult(xs, xs, as);",0,0,0,1,2,0,0,0,0,3,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,901,            xs[0] = as[0]; xs[1] = as[1];,4,0,1,4,8,1,0,0,0,15,29,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,903,            p >>= 1;,0,0,0,0,0,0,0,0,0,0,8,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,906,        if (result != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,907,            result[0] = ys[0];,8,2,0,2,4,3,6,0,0,19,18,1,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,908,            result[1] = ys[1];,2,0,0,2,4,0,0,0,0,2,18,9,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,910,            resplit(result);,0,0,0,1,2,0,0,0,0,3,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,913,        return ys[0] + ys[1];,0,0,0,2,4,1,0,0,0,7,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1396,        double x[] = new double[2];,4,0,0,2,4,0,0,0,0,5,27,0,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1397,        double x2[] = new double[2];,0,0,0,2,4,0,0,0,0,6,28,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1398,        double y[] = new double[2];,8,2,1,2,4,0,0,0,0,19,27,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1399,        double a[] = new double[2];,2,0,0,2,4,0,0,0,0,2,27,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1401,"        split(xi, x);",0,0,0,1,2,0,0,0,0,3,13,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1404,        x[0] += 1.0;,6,1,0,1,2,0,0,0,0,7,12,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1405,        resplit(x);,4,0,0,1,2,0,0,2,0,6,11,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1406,"        splitReciprocal(x, a);",0,0,0,1,2,0,6,0,0,6,22,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1407,        x[0] -= 2.0;,0,0,0,1,2,0,0,0,0,3,12,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1408,        resplit(x);,0,0,0,1,2,0,4,0,0,4,11,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1409,"        splitMult(x, a, y);",6,1,0,1,2,0,8,0,0,16,19,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1410,        x[0] = y[0];,0,0,0,2,4,0,0,0,0,6,12,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1411,        x[1] = y[1];,2,1,1,2,4,0,0,0,0,8,12,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1414,"        splitMult(x, x, x2);",0,0,0,1,2,0,8,0,0,8,20,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1420,        y[0] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][0];,4,1,1,3,6,0,0,0,0,10,48,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1421,        y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];,4,1,1,3,6,0,0,0,0,10,48,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1423,        for (int i = LN_SPLIT_COEF.length-2; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,51,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1424,"            splitMult(y, x2, a);",0,0,0,1,2,0,16,2,0,18,20,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1425,            y[0] = a[0];,6,0,0,2,4,0,0,0,0,7,12,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1426,            y[1] = a[1];,10,1,0,2,4,0,0,2,0,13,12,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1427,"            splitAdd(y, LN_SPLIT_COEF[i], a);",0,0,1,2,4,0,6,0,0,10,33,7,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1428,            y[0] = a[0];,2,0,0,2,4,1,2,0,0,5,12,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1429,            y[1] = a[1];,8,2,1,2,4,0,0,0,0,16,12,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1432,"        splitMult(y, x, a);",10,1,0,1,2,0,0,2,0,13,19,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1433,        y[0] = a[0];,0,0,0,2,4,0,0,0,0,6,12,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1434,        y[1] = a[1];,2,0,1,2,4,0,4,2,0,13,12,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1436,        return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1446,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1447,        final double ys[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1448,        final double facts[] = new double[2];,2,0,0,2,4,1,0,0,0,3,37,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1449,        final double as[] = new double[2];,0,0,0,2,4,0,0,2,0,2,34,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1450,"        split(x, xs);",0,0,0,1,2,0,0,0,0,3,13,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1451,        ys[0] = ys[1] = 0.0;,0,0,0,2,4,0,0,0,0,6,20,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1453,        for (int i = 19; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,31,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1454,"            splitMult(xs, ys, as);",2,0,0,1,2,0,8,0,0,10,22,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1455,            ys[0] = as[0]; ys[1] = as[1];,6,2,1,4,8,1,0,0,0,19,29,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1457,            if ( (i & 1) == 0) {,2,2,0,2,5,0,0,0,0,4,20,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1458,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1461,"            split(FACT[i], as);",0,0,0,2,4,0,6,0,0,6,19,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1462,"            splitReciprocal(as, facts);",0,0,0,1,2,0,0,0,0,3,27,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1464,            if ( (i & 2) != 0 ) {,2,2,0,2,5,0,0,0,0,4,21,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1465,                facts[0] = -facts[0];,0,0,0,2,4,0,0,0,0,6,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1466,                facts[1] = -facts[1];,0,0,1,2,4,0,0,0,0,6,21,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1469,"            splitAdd(ys, facts, as);",8,1,0,1,2,0,8,0,0,19,24,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1470,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1473,        if (result != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1474,            result[0] = ys[0];,12,3,0,2,4,0,0,0,0,15,18,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1475,            result[1] = ys[1];,0,0,0,2,4,0,0,0,0,6,18,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1478,        return ys[0] + ys[1];,0,1,1,2,4,1,0,0,0,5,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1489,        final double xs[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1490,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1491,        final double facts[] = new double[2];,2,0,0,2,4,1,0,0,0,3,37,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1492,        final double as[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1493,"        split(x, xs);",0,0,0,1,2,0,0,0,0,3,13,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1494,        ys[0] = ys[1] = 0.0;,0,0,1,2,4,0,0,0,0,6,20,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1496,        for (int i = 19; i >= 0; i--) {,4,0,0,1,3,0,0,0,0,6,31,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1497,"            splitMult(xs, ys, as);",8,2,0,1,2,0,0,0,0,11,22,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1498,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1500,            if ( (i & 1) != 0) {,2,2,0,2,5,0,0,0,0,4,20,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1501,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1504,"            split(FACT[i], as);",4,1,1,2,4,0,0,0,0,9,19,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1505,"            splitReciprocal(as, facts);",4,0,0,1,2,0,6,0,0,10,27,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1507,            if ( (i & 2) != 0 ) {,0,0,0,2,5,0,0,0,0,7,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1508,                facts[0] = -facts[0];,4,0,0,2,4,0,0,2,0,6,21,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1509,                facts[1] = -facts[1];,0,0,1,2,4,0,6,0,0,12,21,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1512,"            splitAdd(ys, facts, as);",2,0,0,1,2,3,8,4,0,17,24,1,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1513,            ys[0] = as[0]; ys[1] = as[1];,0,0,0,4,8,0,0,0,0,12,29,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1516,        if (result != null) {,4,2,0,1,3,0,0,0,0,6,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1517,            result[0] = ys[0];,0,0,1,2,4,0,0,0,0,5,18,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1518,            result[1] = ys[1];,0,0,0,2,4,0,0,0,0,6,18,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1521,        return ys[0] + ys[1];,0,0,0,2,4,1,0,0,0,7,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1527,        final double result[] = new double[2];,2,0,0,2,4,1,0,0,0,3,38,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1530,        for (int i = 0; i < 7; i++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1531,            double x = i / 8.0;,6,1,0,0,0,0,0,0,0,7,19,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1533,"            slowSin(x, result);",0,0,0,1,2,0,0,0,0,3,19,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1534,            SINE_TABLE_A[i] = result[0];,0,0,1,2,4,0,0,0,0,7,28,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1535,            SINE_TABLE_B[i] = result[1];,0,0,0,2,4,0,0,0,0,6,28,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1537,"            slowCos(x, result);",2,1,1,1,2,0,0,0,0,10,19,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1538,            COSINE_TABLE_A[i] = result[0];,6,1,0,2,4,1,0,0,0,8,30,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1539,            COSINE_TABLE_B[i] = result[1];,0,0,0,2,4,0,0,0,0,6,30,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1543,        for (int i = 7; i < 14; i++) {,6,1,0,1,3,0,0,0,0,8,30,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1544,            double xs[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1545,            double ys[] = new double[2];,10,1,0,2,4,0,0,0,0,12,28,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1546,            double as[] = new double[2];,0,0,0,2,4,0,0,0,0,6,28,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1547,            double bs[] = new double[2];,8,1,0,2,4,1,0,0,0,10,28,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1548,            double temps[] = new double[2];,2,0,0,2,4,0,0,0,0,2,31,7,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1550,            if ( (i & 1) == 0) {,0,0,0,2,5,0,0,0,0,7,20,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1552,                xs[0] = SINE_TABLE_A[i/2];,2,1,1,2,4,0,0,0,0,8,26,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1553,                xs[1] = SINE_TABLE_B[i/2];,2,1,1,2,4,0,0,0,0,8,26,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1554,                ys[0] = COSINE_TABLE_A[i/2];,14,6,1,2,4,0,0,0,0,26,28,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1555,                ys[1] = COSINE_TABLE_B[i/2];,0,0,0,2,4,0,0,0,0,6,28,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1558,"                splitMult(xs, ys, result);",0,0,0,1,2,0,0,0,0,3,26,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1559,                SINE_TABLE_A[i] = result[0] * 2.0;,0,0,0,2,4,0,0,0,0,6,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1560,                SINE_TABLE_B[i] = result[1] * 2.0;,0,0,0,2,4,0,0,0,0,6,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1563,"                splitMult(ys, ys, as);",0,0,0,1,2,0,0,0,0,3,22,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1564,"                splitMult(xs, xs, temps);",6,2,0,1,2,0,8,0,0,16,25,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1565,                temps[0] = -temps[0];,4,1,0,2,4,0,6,0,0,11,21,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1566,                temps[1] = -temps[1];,0,0,0,2,4,0,0,0,0,6,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1567,"                splitAdd(as, temps, result);",4,1,0,1,2,0,4,0,0,9,28,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1568,                COSINE_TABLE_A[i] = result[0];,4,0,1,2,4,0,0,2,0,14,30,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1569,                COSINE_TABLE_B[i] = result[1];,0,0,1,2,4,0,0,0,0,7,30,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1571,                xs[0] = SINE_TABLE_A[i/2];,2,1,1,2,4,0,0,0,0,8,26,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1572,                xs[1] = SINE_TABLE_B[i/2];,2,1,1,2,4,0,0,0,0,8,26,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1573,                ys[0] = COSINE_TABLE_A[i/2];,0,0,0,2,4,0,0,0,0,6,28,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1574,                ys[1] = COSINE_TABLE_B[i/2];,2,1,1,2,4,0,0,0,0,8,28,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1575,                as[0] = SINE_TABLE_A[i/2+1];,0,0,0,2,4,0,0,0,0,6,28,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1576,                as[1] = SINE_TABLE_B[i/2+1];,0,0,0,2,4,0,0,0,0,6,28,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1577,                bs[0] = COSINE_TABLE_A[i/2+1];,8,3,1,2,4,1,0,0,0,17,30,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1578,                bs[1] = COSINE_TABLE_B[i/2+1];,14,2,0,2,4,0,0,0,0,18,30,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1581,"                splitMult(xs, bs, temps);",0,0,0,1,2,0,0,0,0,3,25,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1582,"                splitMult(ys, as, result);",0,0,0,1,2,0,8,0,0,8,26,9,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1583,"                splitAdd(result, temps, result);",2,0,0,1,2,0,8,2,0,13,32,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1584,                SINE_TABLE_A[i] = result[0];,0,0,0,2,4,0,0,0,0,6,28,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1585,                SINE_TABLE_B[i] = result[1];,0,0,0,2,4,0,0,0,0,6,28,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1588,"                splitMult(ys, bs, result);",0,0,0,1,2,0,8,0,0,8,26,9,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1589,"                splitMult(xs, as, temps);",2,0,0,1,2,0,8,0,0,10,25,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1590,                temps[0] = -temps[0];,0,0,1,2,4,0,0,0,0,6,21,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1591,                temps[1] = -temps[1];,0,0,0,2,4,0,0,0,0,6,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1592,"                splitAdd(result, temps, result);",0,0,0,1,2,0,0,0,0,3,32,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1593,                COSINE_TABLE_A[i] = result[0];,0,0,0,2,4,0,0,0,0,6,30,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1594,                COSINE_TABLE_B[i] = result[1];,0,0,0,2,4,0,0,0,0,6,30,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1599,        for (int i = 0; i < 14; i++) {,6,1,0,1,3,0,0,0,0,8,30,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1600,            double xs[] = new double[2];,8,1,1,2,4,0,0,0,0,11,28,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1601,            double ys[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1602,            double as[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1604,            as[0] = COSINE_TABLE_A[i];,0,0,0,2,4,0,0,0,0,6,26,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1605,            as[1] = COSINE_TABLE_B[i];,0,0,1,2,4,0,0,0,0,7,26,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1607,"            splitReciprocal(as, ys);",6,1,0,1,2,0,6,0,0,13,24,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1609,            xs[0] = SINE_TABLE_A[i];,0,0,1,2,4,0,0,0,0,7,24,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1610,            xs[1] = SINE_TABLE_B[i];,0,0,1,2,4,0,0,0,0,7,24,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1612,"            splitMult(xs, ys, as);",14,3,0,1,2,0,8,0,0,26,22,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1614,            TANGENT_TABLE_A[i] = as[0];,0,0,0,2,4,0,0,0,0,6,27,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1615,            TANGENT_TABLE_B[i] = as[1];,6,1,1,2,4,0,0,0,0,15,27,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1618,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,52,        super();,16,5,0,1,2,0,0,0,0,22,8,10,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,46,    protected final RandomDataImpl randomData = new RandomDataImpl();,2,0,0,1,2,2,0,4,0,8,65,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,53,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,61,40,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,61,41,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,62,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,50,    protected final RandomDataImpl randomData = new RandomDataImpl();,0,0,0,1,2,0,0,0,0,3,65,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,56,    private double solverAbsoluteAccuracy = BrentSolver.DEFAULT_ABSOLUTE_ACCURACY;,12,0,0,0,0,1,0,0,0,14,78,1,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,63,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,65,"        this(mean, sd, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);",6,0,0,1,2,0,0,0,0,6,50,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,66,    },2,0,0,0,1,1,0,0,0,3,1,7,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,78,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,51,    private double mean = 0;,2,0,0,0,0,1,0,0,0,3,24,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,54,    private double standardDeviation = 1;,10,1,0,0,0,0,0,0,0,12,37,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,79,        setMeanInternal(mean);,0,0,0,1,2,0,4,0,0,4,22,5,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,80,        setStandardDeviationInternal(sd);,2,0,0,1,2,0,4,0,0,7,33,3,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,81,        solverAbsoluteAccuracy = inverseCumAccuracy;,4,0,0,0,0,0,0,0,0,5,44,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,82,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,48,    private static final double SQRT2PI = FastMath.sqrt(2 * FastMath.PI);,6,1,0,1,2,3,4,0,0,14,69,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,114,        this.mean = newMean;,4,0,0,0,0,0,0,0,0,5,20,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,115,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,141,        if (sd <= 0.0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,146,        standardDeviation = sd;,4,0,0,0,0,0,0,0,0,5,23,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,147,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,80,"        this(p, DEFAULT_EPSILON, DEFAULT_MAX_ITERATIONS);",6,0,0,1,2,0,0,0,0,6,49,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,81,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,92,"    public PoissonDistributionImpl(double p, double epsilon, int maxIterations) {",8,0,0,1,3,1,0,0,0,9,77,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,65,    private int maxIterations = DEFAULT_MAX_ITERATIONS;,4,0,0,0,0,1,0,0,0,5,51,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,70,    private double epsilon = DEFAULT_EPSILON;,6,1,0,0,0,1,0,0,0,8,41,1,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,93,        if (p <= 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,96,        mean = p;,4,0,0,0,0,1,0,2,0,7,9,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,97,"        normal = new NormalDistributionImpl(p, FastMath.sqrt(p));",4,0,0,2,4,0,6,2,0,13,57,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,98,        this.epsilon = epsilon;,4,0,0,0,0,0,0,0,0,5,23,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,99,        this.maxIterations = maxIterations;,4,0,0,0,0,0,0,0,0,5,35,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,100,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,119,    public RandomDataImpl() {,4,0,0,1,3,0,0,2,0,7,25,0,0.09091,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,111,    private RandomGenerator rand = null;,2,0,0,0,0,1,0,2,0,5,36,2,0.09091,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,114,    private SecureRandom secRand = null;,0,0,0,0,0,0,0,0,0,0,36,4,0.09091,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,120,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,659,"        return new ParseException(null, offset) {",2,0,0,1,3,1,6,2,0,11,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,667,"                return buildMessage(Locale.US, pattern, arguments);",4,0,0,1,2,1,6,0,0,10,51,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,673,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,2,4,1,10,0,0,10,61,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,64,"        this(new DummyLocalizable(pattern), arguments);",4,0,0,2,4,0,0,2,0,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,65,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,75,"    public MathRuntimeException(final Localizable pattern, final Object ... arguments) {",6,0,0,1,3,3,0,4,0,13,84,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,76,        this.pattern   = pattern;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,77,        this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,6,1,0,3,6,0,4,2,0,14,73,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,78,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,88,        super(rootCause);,2,0,0,1,2,0,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,89,        this.pattern   = LocalizedFormats.SIMPLE_MESSAGE;,6,0,0,0,0,0,0,0,0,7,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,90,"        this.arguments = new Object[] { (rootCause == null) ? """" : rootCause.getMessage() };",6,1,0,4,8,0,0,0,0,8,84,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,91,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,106,"        this(rootCause, new DummyLocalizable(pattern), arguments);",18,4,1,2,4,1,4,2,0,33,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,107,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,121,        super(rootCause);,4,1,0,1,2,0,0,0,0,5,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,122,        this.pattern   = pattern;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,123,        this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,4,1,0,3,6,0,4,2,0,12,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,124,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,136,"        return new MessageFormat(pattern.getLocalizedString(locale), locale).format(arguments);",0,0,0,3,6,1,0,0,0,10,87,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,146,        return pattern.getSourceString();,20,9,0,1,2,1,0,0,0,30,33,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,155,        return pattern;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,163,        return arguments.clone();,0,0,0,1,2,1,4,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,173,        if (pattern != null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,174,"            return buildMessage(locale, pattern, arguments);",0,0,0,1,2,1,8,0,0,8,48,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,176,"        return """";",0,0,0,0,0,1,0,0,0,1,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,182,        return getMessage(Locale.US);,4,0,0,1,2,1,12,0,0,16,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,188,        return getMessage(Locale.getDefault());,0,0,0,2,4,1,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,196,        printStackTrace(System.err);,4,0,0,1,2,0,2,0,0,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,197,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,206,        synchronized (out) {,2,0,0,1,3,0,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,207,"            PrintWriter pw = new PrintWriter(out, false);",4,0,0,1,2,0,0,4,0,9,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,208,            printStackTrace(pw);,2,1,0,1,2,0,4,0,0,8,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,210,            pw.flush();,0,0,0,1,2,0,4,0,0,4,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,211,        },10,5,0,0,1,0,6,0,0,21,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,212,    },8,2,0,0,1,0,0,0,0,10,1,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,225,"        return createArithmeticException(new DummyLocalizable(pattern), arguments);",4,2,0,2,4,1,4,2,0,12,75,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,238,        return new ArithmeticException() {,0,0,0,1,3,1,0,2,0,2,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,269,"        return createArrayIndexOutOfBoundsException(new DummyLocalizable(pattern), arguments);",2,0,0,2,4,1,4,2,0,8,86,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,282,        return new ArrayIndexOutOfBoundsException() {,0,0,0,1,3,1,0,0,0,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,313,"        return createEOFException(new DummyLocalizable(pattern), arguments);",2,0,0,2,4,1,4,2,0,8,68,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,326,        return new EOFException() {,0,0,0,1,3,1,0,2,0,2,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,358,        IOException ioe = new IOException(rootCause.getLocalizedMessage());,2,0,0,2,4,0,4,4,0,10,67,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,359,        ioe.initCause(rootCause);,0,0,0,1,2,0,6,0,0,6,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,360,        return ioe;,4,0,0,0,0,2,6,0,0,11,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,374,"        return createIllegalArgumentException(new DummyLocalizable(pattern), arguments);",2,0,0,2,4,1,4,2,0,8,80,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,415,        IllegalArgumentException iae = new IllegalArgumentException(rootCause.getLocalizedMessage());,6,1,0,2,4,0,4,4,0,15,93,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,416,        iae.initCause(rootCause);,0,0,0,1,2,0,6,0,0,6,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,417,        return iae;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,431,"        return createIllegalStateException(new DummyLocalizable(pattern), arguments);",0,0,0,2,4,1,0,0,0,7,77,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,444,        return new IllegalStateException() {,0,0,0,1,3,1,0,2,0,2,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,475,"        return createConcurrentModificationException(new DummyLocalizable(pattern), arguments);",2,0,0,2,4,1,4,2,0,8,87,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,488,        return new ConcurrentModificationException() {,0,0,0,1,3,1,0,0,0,5,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,519,"        return createNoSuchElementException(new DummyLocalizable(pattern), arguments);",2,0,0,2,4,1,4,4,0,10,78,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,532,        return new NoSuchElementException() {,6,1,0,1,3,1,0,0,0,8,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,564,        return new UnsupportedOperationException() {,0,0,0,1,3,1,0,2,0,2,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,595,"        return createNullPointerException(new DummyLocalizable(pattern), arguments);",2,0,0,2,4,1,4,2,0,8,76,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,609,        return new NullPointerException() {,0,0,0,1,3,1,0,2,0,2,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,643,"        return createParseException(offset, new DummyLocalizable(pattern), arguments);",0,0,0,2,4,1,0,0,0,7,78,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,659,"        return new ParseException(null, offset) {",0,0,0,1,3,1,0,0,0,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,685,"        final String argument = ""https://issues.apache.org/jira/browse/MATH"";",2,0,0,0,0,1,0,2,0,6,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,687,        return new RuntimeException(cause) {,12,1,0,1,3,1,6,6,0,28,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,39,public class MathRuntimeException extends RuntimeException {,18,13,0,0,1,1,0,2,0,35,60,1,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,61,45,"        super(LocalizedFormats.MAX_ITERATIONS_EXCEEDED, maxIterations);",6,0,0,1,2,0,4,0,0,10,63,3,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,61,46,        this.maxIterations = maxIterations;,4,0,0,0,0,0,0,0,0,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,61,47,    },4,0,0,0,1,0,0,0,0,5,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,61,60,"        this(maxIterations, new DummyLocalizable(pattern), arguments);",6,0,0,2,4,0,0,2,0,8,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,61,61,    },10,3,0,0,1,0,0,0,0,13,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,61,73,"        super(pattern, arguments);",0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,61,74,        this.maxIterations = maxIterations;,10,1,0,0,0,0,4,2,0,18,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,61,75,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,61,81,        return maxIterations;,2,0,0,0,0,1,0,0,0,2,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,38,        super(LocalizedFormats.CONVERGENCE_FAILED);,10,1,0,1,2,0,0,0,0,11,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,39,    },6,1,0,0,1,0,0,0,0,7,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,51,"        this(new DummyLocalizable(pattern), arguments);",4,0,0,2,4,0,0,2,0,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,52,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,62,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,63,    },4,0,0,0,1,0,4,2,0,10,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,70,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,71,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,84,"        this(cause, new DummyLocalizable(pattern), arguments);",6,0,0,2,4,0,0,2,0,8,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,85,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,96,"        super(cause, pattern, arguments);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,97,    },6,1,0,0,1,0,0,0,0,7,1,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,57,    public MathException() {,2,0,0,1,3,1,0,0,0,3,24,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,58,        this.pattern   = LocalizedFormats.SIMPLE_MESSAGE;,6,0,0,0,0,0,0,0,0,7,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,59,"        this.arguments = new Object[] { """" };",2,0,0,2,4,0,0,2,0,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,60,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,72,"      this(new DummyLocalizable(pattern), arguments);",2,0,0,2,4,0,0,0,0,2,47,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,73,    },4,2,0,0,1,0,0,0,0,6,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,83,"    public MathException(Localizable pattern, Object ... arguments) {",10,1,0,1,3,1,0,4,0,16,65,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,84,      this.pattern   = pattern;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,85,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,0,0,0,3,6,0,0,0,0,9,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,86,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,96,        super(rootCause);,0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,97,        this.pattern   = LocalizedFormats.SIMPLE_MESSAGE;,0,0,0,0,0,0,0,0,0,0,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,98,"        this.arguments = new Object[] { (rootCause == null) ? """" : rootCause.getMessage() };",12,3,0,4,8,0,4,2,0,24,84,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,99,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,114,"        this(rootCause, new DummyLocalizable(pattern), arguments);",16,1,0,2,4,0,0,4,0,22,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,115,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,128,      super(rootCause);,0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,129,      this.pattern   = pattern;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,130,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,4,1,0,3,6,0,4,2,0,12,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,131,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,141,        return pattern.getSourceString();,8,1,0,1,2,1,4,0,0,14,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,150,        return pattern;,4,0,0,0,0,1,0,0,0,6,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,159,        return arguments.clone();,0,0,0,1,2,1,4,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,170,        if (pattern != null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,171,"            return new MessageFormat(pattern.getLocalizedString(locale), locale).format(arguments);",2,0,0,3,6,1,10,2,0,14,87,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,173,"        return """";",0,0,0,0,0,1,0,0,0,1,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,179,        return getMessage(Locale.US);,4,0,0,1,2,1,2,0,0,6,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,185,        return getMessage(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,193,        printStackTrace(System.err);,6,0,0,1,2,0,2,0,0,8,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,194,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,203,        synchronized (out) {,6,0,0,1,3,0,0,2,0,8,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,204,"            PrintWriter pw = new PrintWriter(out, false);",4,0,0,1,2,0,0,4,0,9,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,205,            printStackTrace(pw);,0,0,0,1,2,0,4,0,0,4,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,207,            pw.flush();,0,0,0,1,2,0,0,0,0,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,208,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,209,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,61,61,                                           Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,61,62,        this.specific = specific;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,61,63,        this.general = general;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,61,64,        arguments = ArgUtils.flatten(args);,4,0,0,1,2,3,6,0,0,14,35,1,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,61,65,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,61,72,"        this(null, general, args);",0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,61,73,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,61,83,"        return MessageFactory.buildMessage(locale, specific, general, arguments);",0,0,0,1,2,1,12,0,0,12,73,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,61,89,        return getMessage(Locale.US);,4,0,0,1,2,1,2,0,0,6,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,61,95,        return getMessage(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,61,52,"        this(null, wrong, min, boundIsAllowed);",14,2,0,1,2,0,0,0,0,17,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,61,53,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,61,67,"        super(specific,",0,0,0,0,1,0,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,61,73,        this.min = min;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,61,74,        this.boundIsAllowed = boundIsAllowed;,12,2,0,0,0,1,6,0,0,24,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,61,75,    },2,0,0,0,1,0,0,0,0,2,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,61,81,        return boundIsAllowed;,0,0,0,0,0,1,0,0,0,1,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,61,88,        return min;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,61,50,"        super(specific, general, wrong, arguments);",0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,61,51,        argument = wrong;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,61,52,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,61,64,"        super(general, wrong, arguments);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,61,65,        argument = wrong;,6,2,0,0,0,0,0,0,0,9,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,61,66,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,61,72,        return argument;,4,1,0,0,0,1,0,0,0,5,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,61,32,    private ArgUtils() {},2,0,0,2,4,1,0,0,0,3,21,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,61,42,        final List<Object> list = new ArrayList<Object>();,2,0,0,1,2,1,0,8,0,11,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,61,43,        if (array != null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,61,44,            for (Object o : array) {,4,0,0,1,3,0,0,2,0,6,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,61,45,                if (o instanceof Object[]) {,2,0,0,2,5,0,0,2,0,4,28,9,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,61,46,                    for (Object oR : flatten((Object[]) o)) {,4,0,0,4,9,0,2,4,0,10,41,10,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,61,47,                        list.add(oR);,0,0,0,1,2,0,6,0,0,6,13,13,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,61,50,                    list.add(o);,0,0,0,1,2,0,6,0,0,6,12,11,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,61,54,        return list.toArray();,8,2,0,1,2,1,4,0,0,15,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,322,        return sourceFormat;,2,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,328,            ResourceBundle bundle =,2,0,0,0,0,0,0,2,0,4,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,330,            if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {,4,1,0,5,11,0,12,0,0,17,68,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,332,                return bundle.getString(toString());,0,0,0,2,4,1,6,0,0,6,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,337,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,335,        } catch (MissingResourceException mre) {,0,0,0,1,4,0,0,0,0,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,341,        return sourceFormat;,2,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,61,38,"        super(value, 0, false);",2,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,61,39,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,61,48,"        super(specific, value, 0, false);",4,0,0,1,2,0,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,61,49,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,61,52,"        this(null, wrong, max, boundIsAllowed);",6,0,0,1,2,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,61,53,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,61,66,"        super(specific,",0,0,0,0,1,0,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,61,72,        this.max = max;,6,0,0,0,0,0,0,0,0,7,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,61,73,        this.boundIsAllowed = boundIsAllowed;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,61,74,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,61,80,        return boundIsAllowed;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,61,87,        return max;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,564,        return new UnsupportedOperationException() {,0,0,0,1,3,1,0,0,0,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,572,"                return buildMessage(Locale.US, pattern, arguments);",4,0,0,1,2,1,6,0,0,10,51,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,578,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,2,4,1,0,0,0,7,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,532,        return new NoSuchElementException() {,0,0,0,1,3,1,0,2,0,2,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,540,"                return buildMessage(Locale.US, pattern, arguments);",4,0,0,1,2,1,6,0,0,10,51,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,546,"                return buildMessage(Locale.getDefault(), pattern, arguments);",8,3,0,2,4,2,10,0,0,22,61,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,488,        return new ConcurrentModificationException() {,0,0,0,1,3,1,0,2,0,2,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,496,"                return buildMessage(Locale.US, pattern, arguments);",12,1,0,1,2,1,6,0,0,21,51,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,502,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,2,4,1,10,0,0,10,61,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,444,        return new IllegalStateException() {,0,0,0,1,3,1,0,2,0,2,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,452,"                return buildMessage(Locale.US, pattern, arguments);",0,0,0,1,2,1,0,0,0,4,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,458,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,2,4,1,0,0,0,7,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,395,"                return buildMessage(Locale.US, pattern, arguments);",8,0,0,1,2,1,6,2,0,16,51,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,401,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,2,4,1,10,0,0,10,61,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,326,        return new EOFException() {,0,0,0,1,3,1,0,2,0,2,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,334,"                return buildMessage(Locale.US, pattern, arguments);",4,0,0,1,2,1,6,0,0,10,51,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,340,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,2,4,1,0,0,0,7,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,282,        return new ArrayIndexOutOfBoundsException() {,0,0,0,1,3,1,0,2,0,2,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,290,"                return buildMessage(Locale.US, pattern, arguments);",4,0,0,1,2,1,6,0,0,10,51,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,296,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,2,4,1,0,0,0,7,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,238,        return new ArithmeticException() {,0,0,0,1,3,1,0,2,0,2,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,246,"                return buildMessage(Locale.US, pattern, arguments);",4,0,0,1,2,1,6,0,0,10,51,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,252,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,2,4,1,10,0,0,10,61,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,687,        return new RuntimeException(cause) {,2,0,0,1,3,1,0,2,0,4,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,695,"                return buildMessage(Locale.US, LocalizedFormats.INTERNAL_ERROR, argument);",10,0,0,1,2,1,4,0,0,14,74,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,701,"                return buildMessage(Locale.getDefault(), LocalizedFormats.INTERNAL_ERROR, argument);",10,1,0,2,4,1,8,0,0,19,84,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,609,        return new NullPointerException() {,8,1,0,1,3,1,0,2,0,12,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,617,"                return buildMessage(Locale.US, pattern, arguments);",4,0,0,1,2,1,6,0,0,10,51,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,623,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,2,4,1,10,0,0,10,61,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,211,    private FastMath() {,8,0,0,1,3,0,0,0,0,11,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,212,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,227,        return 0.5 * (FastMath.exp(a) + FastMath.exp(-a));,2,2,0,3,6,1,10,0,0,15,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,236,        boolean negative = false;,2,1,1,0,0,1,0,0,0,7,25,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,237,        if (a < 0) {,4,3,0,1,3,0,0,0,0,7,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,238,            negative = true;,2,0,0,0,0,0,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,239,            a = -a;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,243,        if (a > 0.3) {,2,0,1,1,3,0,6,0,0,13,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,244,            absSinh = 0.5 * (FastMath.exp(a) - FastMath.exp(-a));,20,7,0,3,6,1,10,0,0,41,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,246,            final double a2 = a * a;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,247,            if (a > 0.05) {,2,1,0,1,3,0,0,0,0,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,248,                absSinh = a * (1 + a2 * (1 + a2  * (1 + a2 * (1 + a2 * (1 + a2 / 110) / 72) / 42) / 20) / 6);,0,0,0,5,10,0,0,0,0,15,93,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,250,                absSinh = a * (1 + a2 * (1 + a2  * (1 + a2 / 42) / 20) / 6);,0,0,0,3,6,0,0,0,0,9,60,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,254,        return negative ? -absSinh : absSinh;,0,0,0,0,0,1,0,0,0,1,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,264,        boolean negative = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,265,        if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,266,            negative = true;,0,1,0,0,0,0,8,0,0,9,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,267,            a = -a;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,271,        if (a > 0.074) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,272,            final double twoA = 2 * a;,4,1,0,0,0,1,0,0,0,6,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,273,            absTanh = FastMath.expm1(twoA) / (FastMath.exp(twoA) + 1);,0,0,0,3,6,0,0,0,0,9,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,274,        } else {,8,1,0,0,2,0,0,0,0,10,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,275,            final double a2 = a * a;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,276,            if (a > 0.016) {,2,1,0,1,3,0,0,0,0,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,277,                absTanh = a * (1 - a2 * (1 - a2 * (2 - a2 * (17 - a2 * (62 - a2 * 1382 / 55 ) / 9) / 21) / 5) / 3);,14,16,0,5,10,0,0,0,0,31,99,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,279,                absTanh = a * (1 - a2 * (1 - a2 * (2 - a2 * 17 / 21) / 5) / 3);,8,2,0,3,6,0,0,0,0,11,63,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,283,        return negative ? -absTanh : absTanh;,0,0,0,0,0,1,0,0,0,1,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,292,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,0,0,0,2,4,1,0,0,0,7,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,301,        boolean negative = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,302,        if (a < 0) {,2,1,0,1,3,0,14,0,0,18,12,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,303,            negative = true;,6,1,0,0,0,0,0,0,0,8,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,304,            a = -a;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,308,        if (a > 0.167) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,309,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,0,0,0,2,4,0,0,0,0,6,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,311,            final double a2 = a * a;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,312,            if (a > 0.097) {,2,1,0,1,3,0,0,0,0,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,313,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0 - a2 * (1.0 / 15.0 - a2 * (1.0 / 17.0) * 15.0 / 16.0) * 13.0 / 14.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,22,33,0,9,18,1,0,0,0,57,264,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,314,            } else if (a > 0.036) {,0,0,0,1,4,0,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,315,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,0,0,0,7,14,0,0,0,0,21,196,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,316,            } else if (a > 0.0036) {,0,0,0,1,4,0,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,317,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,12,17,0,5,10,0,0,0,0,30,129,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,319,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0) * 3.0 / 4.0) / 2.0);,10,10,1,3,6,0,0,0,0,25,71,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,323,        return negative ? -absAsinh : absAsinh;,0,0,0,0,0,1,0,0,0,1,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,333,        boolean negative = false;,2,0,0,0,0,0,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,334,        if (a < 0) {,2,0,0,1,3,0,6,0,0,8,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,335,            negative = true;,2,0,0,0,0,1,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,336,            a = -a;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,340,        if (a > 0.15) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,341,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,6,4,0,3,6,0,4,0,0,15,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,343,            final double a2 = a * a;,24,6,1,0,0,1,0,0,0,41,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,344,            if (a > 0.087) {,2,1,0,1,3,0,0,0,0,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,345,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0 + a2 * (1.0 / 15.0 + a2 * (1.0 / 17.0)))))))));,20,25,0,9,18,0,0,0,0,46,175,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,346,            } else if (a > 0.031) {,2,1,0,1,4,0,0,0,0,3,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,347,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0)))))));,18,20,0,7,14,0,0,0,0,39,135,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,348,            } else if (a > 0.003) {,0,0,0,1,4,0,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,349,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0)))));,0,0,0,5,10,0,0,0,0,15,95,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,351,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0)));,2,1,0,3,6,0,0,0,0,3,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,355,        return negative ? -absAtanh : absAtanh;,8,1,0,0,0,1,0,0,0,10,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,365,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : (Double.isNaN(a) ? Double.NaN : 0.0));,8,2,0,5,10,1,6,0,0,17,83,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,373,"        return nextAfter(a, Double.POSITIVE_INFINITY);",0,0,0,1,2,1,0,0,0,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,380,        return Math.random();,2,0,0,1,2,2,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,404,"        return exp(x, 0.0, null);",0,0,0,1,2,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,423,        if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,424,            intVal = (int) -x;,10,1,0,1,2,0,0,0,0,14,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,426,            if (intVal > 746) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,427,                if (hiPrec != null) {,30,7,0,1,3,0,0,0,0,40,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,428,                    hiPrec[0] = 0.0;,8,0,1,1,2,0,4,0,0,16,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,429,                    hiPrec[1] = 0.0;,0,0,1,1,2,0,4,0,0,16,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,431,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,434,            if (intVal > 709) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,436,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",4,2,0,1,2,1,6,0,0,13,79,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,437,                if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,438,                    hiPrec[0] /= 285040095144011776.0;,0,0,1,1,2,0,0,0,0,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,439,                    hiPrec[1] /= 285040095144011776.0;,0,0,1,1,2,0,0,0,0,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,441,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,444,            if (intVal == 709) {,10,8,0,1,3,0,0,0,0,19,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,446,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",6,2,0,1,2,1,18,4,0,31,79,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,447,                if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,448,                    hiPrec[0] /= 4.455505956692756620;,0,0,1,1,2,0,0,0,0,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,449,                    hiPrec[1] /= 4.455505956692756620;,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,451,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,454,            intVal++;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,456,            intPartA = EXP_INT_TABLE_A[750-intVal];,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,457,            intPartB = EXP_INT_TABLE_B[750-intVal];,10,2,1,1,2,0,0,0,0,15,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,459,            intVal = -intVal;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,461,            intVal = (int) x;,2,1,0,1,2,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,463,            if (intVal > 709) {,4,2,0,1,3,0,0,0,0,6,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,464,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,465,                    hiPrec[0] = Double.POSITIVE_INFINITY;,4,0,1,1,2,0,0,0,0,7,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,466,                    hiPrec[1] = 0.0;,8,3,0,1,2,0,8,0,0,20,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,468,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,471,            intPartA = EXP_INT_TABLE_A[750+intVal];,4,1,1,1,2,0,0,0,0,8,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,472,            intPartB = EXP_INT_TABLE_B[750+intVal];,4,1,1,1,2,0,0,0,0,8,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,479,        final int intFrac = (int) ((x - intVal) * 1024.0);,0,0,0,3,6,0,0,0,0,9,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,480,        final double fracPartA = EXP_FRAC_TABLE_A[intFrac];,0,0,0,1,2,0,0,0,0,3,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,481,        final double fracPartB = EXP_FRAC_TABLE_B[intFrac];,0,0,0,1,2,0,0,0,0,3,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,487,        final double epsilon = x - (intVal + intFrac / 1024.0);,0,0,0,1,2,0,0,0,0,3,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,496,        double z = 0.04168701738764507;,4,0,0,0,0,0,0,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,497,        z = z * epsilon + 0.1666666505023083;,0,0,0,0,0,0,0,0,0,0,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,498,        z = z * epsilon + 0.5000000000042687;,2,0,0,0,0,0,0,0,0,2,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,499,        z = z * epsilon + 1.0;,6,2,0,0,0,0,0,0,0,9,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,500,        z = z * epsilon + -3.940510424527919E-20;,0,0,0,0,0,0,0,0,0,0,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,507,        double tempA = intPartA * fracPartA;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,508,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,0,0,0,0,0,0,0,0,0,0,82,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,514,        final double tempC = tempB + tempA;,8,1,0,0,0,0,0,0,0,10,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,516,        if (extra != 0.0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,517,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,20,7,0,0,0,0,0,0,0,28,63,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,519,            result = tempC*z + tempB + tempA;,10,3,0,0,0,0,0,0,0,14,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,522,        if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,524,            hiPrec[0] = tempA;,4,0,1,1,2,0,0,2,0,10,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,525,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,0,0,0,1,2,0,0,0,0,3,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,528,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,536,        if (x != x || x == 0.0) { // NaN or zero,0,0,0,1,3,0,0,0,0,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,537,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,540,        if (x <= -1.0 || x >= 1.0) {,2,1,0,1,3,0,0,0,0,3,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,543,            double hiPrec[] = new double[2];,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,544,"            exp(x, 0.0, hiPrec);",0,0,0,1,2,0,6,0,0,6,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,545,            if (x > 0.0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,546,                return -1.0 + hiPrec[0] + hiPrec[1];,0,1,1,2,4,1,0,0,0,6,36,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,548,                final double ra = -1.0 + hiPrec[0];,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,549,                double rb = -(ra + 1.0 - hiPrec[0]);,0,0,0,2,4,0,0,0,0,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,550,                rb += hiPrec[1];,2,0,1,1,2,0,0,0,0,5,16,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,551,                return ra + rb;,4,1,0,0,0,1,0,0,0,5,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,558,        boolean negative = false;,2,0,0,0,0,0,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,560,        if (x < 0.0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,561,            x = -x;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,562,            negative = true;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,566,            int intFrac = (int) (x * 1024.0);,12,1,1,2,4,0,0,0,0,16,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,567,            double tempA = EXP_FRAC_TABLE_A[intFrac] - 1.0;,2,1,1,1,2,0,0,0,0,7,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,568,            double tempB = EXP_FRAC_TABLE_B[intFrac];,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,570,            double temp = tempA + tempB;,6,1,0,0,0,0,0,0,0,7,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,571,            tempB = -(temp - tempA - tempB);,10,3,1,1,2,0,4,0,0,28,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,572,            tempA = temp;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,574,            temp = tempA * 1073741824.0;,0,0,0,0,0,0,4,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,575,            baseA = tempA + temp - temp;,8,2,0,0,0,0,0,0,0,11,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,576,            baseB = tempB + (tempA - baseA);,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,578,            epsilon = x - intFrac/1024.0;,14,4,0,0,0,0,0,0,0,20,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,583,        double zb = 0.008336750013465571;,8,1,0,0,0,0,4,0,0,14,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,584,        zb = zb * epsilon + 0.041666663879186654;,0,0,0,0,0,0,0,0,0,0,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,585,        zb = zb * epsilon + 0.16666666666745392;,6,2,0,0,0,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,586,        zb = zb * epsilon + 0.49999999999999994;,6,2,0,0,0,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,587,        zb = zb * epsilon;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,588,        zb = zb * epsilon;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,590,        double za = epsilon;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,591,        double temp = za + zb;,6,1,0,0,0,0,6,0,0,13,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,592,        zb = -(temp - za - zb);,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,593,        za = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,595,        temp = za * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,596,        temp = za + temp - temp;,8,2,0,0,0,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,597,        zb += za - temp;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,598,        za = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,601,        double ya = za * baseA;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,603,        temp = ya + za * baseB;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,604,        double yb = -(temp - ya - za * baseB);,18,3,0,1,2,0,0,0,0,24,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,605,        ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,607,        temp = ya + zb * baseA;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,608,        yb += -(temp - ya - zb * baseA);,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,609,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,611,        temp = ya + zb * baseB;,4,0,0,0,0,0,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,612,        yb += -(temp - ya - zb*baseB);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,613,        ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,617,        temp = ya + baseA;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,618,        yb += -(temp - baseA - ya);,2,0,0,1,2,0,0,0,0,2,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,619,        ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,621,        temp = ya + za;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,623,        yb += -(temp - ya - za);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,624,        ya = temp;,14,2,0,0,0,0,0,0,0,19,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,626,        temp = ya + baseB;,6,1,0,0,0,0,0,0,0,8,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,628,        yb += -(temp - ya - baseB);,8,1,0,1,2,0,0,0,0,11,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,629,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,631,        temp = ya + zb;,8,1,0,0,0,0,0,0,0,10,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,633,        yb += -(temp - ya - zb);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,634,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,636,        if (negative) {,2,0,0,1,3,0,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,638,            double denom = 1.0 + ya;,4,1,0,0,0,0,0,0,0,5,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,639,            double denomr = 1.0 / denom;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,640,            double denomb = -(denom - 1.0 - ya) + yb;,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,641,            double ratio = ya * denomr;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,642,            temp = ratio * 1073741824.0;,10,2,0,0,0,1,0,0,0,14,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,643,            final double ra = ratio + temp - temp;,8,2,0,0,0,1,0,0,0,11,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,644,            double rb = ratio - ra;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,646,            temp = denom * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,647,            za = denom + temp - temp;,8,2,0,0,0,0,0,0,0,11,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,648,            zb = denom - za;,12,2,1,0,0,1,0,0,0,21,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,650,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,22,9,0,1,2,0,0,0,0,32,60,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,661,            rb += yb * denomr;                      // numerator,6,1,0,0,0,0,0,0,0,8,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,662,            rb += -ya * denomb * denomr * denomr;   // denominator,10,1,0,0,0,0,0,0,0,13,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,665,            ya = -ra;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,666,            yb = -rb;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,669,        return ya + yb;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,719,            final double a = d * 9.31322574615478515625E-10;,0,0,0,0,0,0,0,0,0,0,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,720,            split[0] = (d + a - d) * 1073741824.0;,6,1,0,2,4,0,0,0,0,8,38,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,721,            split[1] = d - split[0];,0,0,0,2,4,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,792,            in[0] = in[1];,0,0,1,2,4,0,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,793,            in[1] = 0.0;,0,0,0,1,2,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,924,"        return log(x, null);",0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,934,        long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,937,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,6,4,0,2,5,0,0,0,0,10,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,938,            if (x != 0.0) {,2,1,0,1,3,0,6,0,0,9,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,939,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,940,                    hiPrec[0] = Double.NaN;,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,943,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,948,        if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,949,            if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,950,                hiPrec[0] = Double.POSITIVE_INFINITY;,4,0,1,1,2,0,0,0,0,7,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,953,            return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,957,        int exp = (int)(bits >> 52)-1023;,6,1,0,2,4,0,0,0,0,7,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,959,        if ((bits & 0x7ff0000000000000L) == 0) {,4,1,0,2,5,0,0,0,0,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,961,            if (x == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,963,                if (hiPrec != null) {,6,1,0,1,3,1,0,0,0,8,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,964,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,967,                return Double.NEGATIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,971,            bits <<= 1;,2,0,0,0,0,0,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,972,            while ( (bits & 0x0010000000000000L) == 0) {,6,3,0,2,5,0,0,0,0,9,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,973,                exp--;,2,0,0,0,0,0,0,2,0,5,6,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,974,                bits <<= 1;,2,0,0,0,0,0,0,0,0,3,11,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,979,        if (exp == -1 || exp == 0) {,4,3,0,1,3,0,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,980,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,0,0,0,1,3,0,0,0,0,4,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,985,                double xa = x - 1.0;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,986,                double xb = xa - x + 1.0;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,987,                double tmp = xa * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,988,                double aa = xa + tmp - tmp;,28,8,0,0,0,0,0,0,0,39,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,989,                double ab = xa - aa;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,990,                xa = aa;,8,0,0,0,0,0,4,0,0,13,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,991,                xb = ab;,4,1,1,0,0,0,0,0,0,8,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,993,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,6,1,1,2,4,0,0,0,0,9,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,994,                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];,0,0,0,2,4,0,0,0,0,6,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,996,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,53,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,998,                    aa = ya * xa;,0,0,1,0,0,0,10,0,0,14,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,999,                    ab = ya * xb + yb * xa + yb * xb;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1001,                    tmp = aa * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,24,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1002,                    ya = aa + tmp - tmp;,8,2,0,0,0,0,2,0,0,13,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1003,                    yb = aa - ya + ab;,22,7,0,0,0,0,4,0,0,35,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1006,                    aa = ya + LN_QUICK_COEF[i][0];,0,0,0,2,4,0,0,0,0,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1007,                    ab = yb + LN_QUICK_COEF[i][1];,0,0,0,2,4,0,0,0,0,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1009,                    tmp = aa * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,24,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1010,                    ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1011,                    yb = aa - ya + ab;,6,1,0,0,0,0,0,0,0,8,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1015,                aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1016,                ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1018,                tmp = aa * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1019,                ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1020,                yb = aa - ya + ab;,4,2,0,0,0,0,0,0,0,7,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1022,                return ya + yb;,4,1,0,0,0,1,0,0,0,5,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1027,        double lnm[] = LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,0,0,0,5,10,0,0,0,0,15,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1038,        double epsilon = (double)(bits & 0x3ffffffffffL) / (4503599627370496.0 + (bits & 0x000ffc0000000000L));,2,0,0,4,8,3,0,0,0,5,103,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1040,        double lnza = 0.0;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1041,        double lnzb = 0.0;,6,0,0,0,0,0,0,0,0,7,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1043,        if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1045,            double tmp = epsilon * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1046,            double aa = epsilon + tmp - tmp;,8,2,0,0,0,0,0,0,0,10,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1047,            double ab = epsilon - aa;,6,1,0,0,0,0,0,2,0,9,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1048,            double xa = aa;,4,0,0,0,0,0,0,0,0,4,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1049,            double xb = ab;,4,0,0,0,0,0,0,0,0,4,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1052,            double numer = (double)(bits & 0x3ffffffffffL);,8,1,0,2,4,0,0,0,0,10,47,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1053,            double denom = 4503599627370496.0 + (bits & 0x000ffc0000000000L);,0,0,0,1,2,0,0,0,0,3,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1054,            aa = numer - xa*denom - xb * denom;,12,4,0,0,0,0,0,0,0,17,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1055,            xb += aa / denom;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1058,            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];,8,1,1,2,4,1,0,0,0,12,57,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1059,            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];,6,1,1,2,4,0,0,0,0,9,57,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1061,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,8,1,0,1,3,0,0,0,0,10,55,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1063,                aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1064,                ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1066,                tmp = aa * 1073741824.0;,12,2,0,0,0,0,0,2,0,18,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1067,                ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1068,                yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1071,                aa = ya + LN_HI_PREC_COEF[i][0];,6,2,0,2,4,0,0,0,0,8,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1072,                ab = yb + LN_HI_PREC_COEF[i][1];,12,3,0,2,4,0,0,0,0,16,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1074,                tmp = aa * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1075,                ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1076,                yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1080,            aa = ya * xa;,6,1,0,0,0,0,0,0,0,7,13,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1081,            ab = ya * xb + yb * xa + yb * xb;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1089,            lnza = aa + ab;,22,2,0,0,0,0,6,2,0,34,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1090,            lnzb = -(lnza - aa - ab);,0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1091,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1094,            lnza = -0.16624882440418567;,10,2,0,0,0,1,0,0,0,15,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1095,            lnza = lnza * epsilon + 0.19999954120254515;,6,2,0,0,0,0,0,0,0,9,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1096,            lnza = lnza * epsilon + -0.2499999997677497;,6,2,0,0,0,0,4,0,0,14,44,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1097,            lnza = lnza * epsilon + 0.3333333333332802;,6,2,0,0,0,0,0,0,0,9,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1098,            lnza = lnza * epsilon + -0.5;,10,3,0,0,0,0,0,0,0,15,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1099,            lnza = lnza * epsilon + 1.0;,22,5,1,0,0,1,2,0,0,36,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1100,            lnza = lnza * epsilon;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1117,        double a = LN_2_A*exp;,6,1,0,0,0,0,0,0,0,7,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1118,        double b = 0.0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1119,        double c = a+lnm[0];,4,1,1,1,2,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1120,        double d = -(c-a-lnm[0]);,14,3,1,2,4,1,0,0,0,21,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1121,        a = c;,8,1,0,0,0,1,2,0,0,13,6,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1122,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1124,        c = a + lnza;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1125,        d = -(c - a - lnza);,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1126,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1127,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1129,        c = a + LN_2_B*exp;,10,2,0,0,0,0,0,0,0,13,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1130,        d = -(c - a - LN_2_B*exp);,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1131,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1132,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1134,        c = a + lnm[1];,6,2,1,1,2,1,0,0,0,20,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1135,        d = -(c - a - lnm[1]);,20,3,1,2,4,0,0,0,0,31,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1136,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1137,        b = b + d;,8,3,1,0,0,0,0,0,0,14,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1139,        c = a + lnzb;,6,1,0,0,0,0,0,0,0,8,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1140,        d = -(c - a - lnzb);,8,1,0,1,2,0,0,0,0,11,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1141,        a = c;,12,2,0,0,0,0,0,0,0,16,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1142,        b = b + d;,10,2,0,0,0,0,0,0,0,13,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1144,        if (hiPrec != null) {,10,2,0,1,3,0,0,0,0,13,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1145,            hiPrec[0] = a;,2,0,1,1,2,0,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1146,            hiPrec[1] = b;,2,0,1,1,2,0,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1149,        return a + b;,4,1,0,0,0,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1157,        double xpa = 1.0 + x;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1158,        double xpb = -(xpa - 1.0 - x);,8,1,0,1,2,0,0,0,0,11,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1160,        if (x == -1) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1161,            return x/0.0;   // -Infinity,2,1,0,0,0,1,0,0,0,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1164,        if (x > 0 && 1/x == 0) { // x = Infinity,2,0,0,1,3,0,0,0,0,3,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1165,            return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1168,        if (x>1e-6 || x<-1e-6) {,6,4,0,1,3,0,0,0,0,12,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1169,            double hiPrec[] = new double[2];,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1171,"            log(xpa, hiPrec);",0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1175,            double fx1 = xpb/xpa;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1177,            double epsilon = 0.5 * fx1 + 1.0;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1178,            epsilon = epsilon * fx1;,8,2,0,0,0,0,2,0,0,14,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1180,            return epsilon + hiPrec[1] + hiPrec[0];,10,2,1,2,4,2,2,0,0,20,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1184,        double y = x * 0.333333333333333 - 0.5;,10,2,0,0,0,0,0,0,0,14,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1185,        y = y * x + 1.0;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1186,        y = y * x;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1188,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1196,        final double hiPrec[] = new double[2];,0,0,0,2,4,0,0,0,0,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1198,"        log(x, hiPrec);",0,0,0,1,2,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1200,        final double tmp = hiPrec[0] * 1073741824.0;,2,2,1,1,2,1,8,0,0,15,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1201,        final double lna = hiPrec[0] + tmp - tmp;,4,2,0,1,2,0,0,0,0,6,41,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1202,        final double lnb = hiPrec[0] - lna + hiPrec[1];,0,0,0,2,4,0,0,0,0,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1204,        final double rln10a = 0.4342944622039795;,2,0,0,0,0,1,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1205,        final double rln10b = 1.9699272335463627E-8;,14,1,0,0,0,1,0,0,0,18,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1207,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,0,0,0,0,0,1,0,0,0,1,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1218,        final double lns[] = new double[2];,0,0,0,2,4,0,0,0,0,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1220,        if (y == 0.0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1221,            return 1.0;,4,0,0,0,0,1,4,0,0,8,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1224,        if (x != x) { // X is NaN,0,0,0,1,3,0,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1225,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1229,        if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1230,            long bits = Double.doubleToLongBits(x);,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1231,            if ((bits & 0x8000000000000000L) != 0) {,4,2,0,2,5,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1233,                long yi = (long) y;,20,2,0,1,2,0,0,0,0,26,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1235,                if (y < 0 && y == yi && (yi & 1) == 1) {,0,0,0,2,5,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1236,                    return Double.NEGATIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1239,                if (y < 0 && y == yi && (yi & 1) == 1) {,8,6,0,2,5,0,0,0,0,14,40,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1240,                    return -0.0;,2,1,0,0,0,1,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1243,                if (y > 0 && y == yi && (yi & 1) == 1) {,0,0,0,2,5,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1244,                    return -0.0;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1248,            if (y < 0) {,4,2,1,1,3,0,0,0,0,11,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1249,                return Double.POSITIVE_INFINITY;,2,1,0,0,0,1,0,0,0,3,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1251,            if (y > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1252,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1255,            return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1258,        if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,6,0,0,13,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1259,            if (y != y) { // y is NaN,0,0,0,1,3,0,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1260,                return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1262,            if (y < 0.0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1263,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1265,                return Double.POSITIVE_INFINITY;,6,1,0,0,0,1,0,0,0,8,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1269,        if (y == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1270,            if (x * x == 1.0),2,0,0,1,2,0,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1271,              return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1273,            if (x * x > 1.0) {,4,2,0,1,3,0,0,0,0,6,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1274,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1276,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1280,        if (x == Double.NEGATIVE_INFINITY) {,4,0,0,1,3,0,0,0,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1281,            if (y != y) { // y is NaN,4,1,0,1,3,0,12,0,0,17,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1282,                return y;,0,0,0,0,0,1,4,0,0,4,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1285,            if (y < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1286,                long yi = (long) y;,0,0,0,1,2,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1287,                if (y == yi && (yi & 1) == 1) {,2,0,0,2,5,0,0,0,0,2,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1288,                    return -0.0;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1291,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1294,            if (y > 0)  {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1295,                long yi = (long) y;,8,0,0,1,2,0,0,0,0,9,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1296,                if (y == yi && (yi & 1) == 1) {,0,0,0,2,5,0,0,0,0,7,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1297,                    return Double.NEGATIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1300,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1304,        if (y == Double.NEGATIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1306,            if (x * x == 1.0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1307,                return Double.NaN;,6,0,0,0,0,1,0,0,0,7,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1310,            if (x * x < 1.0) {,4,2,0,1,3,0,0,0,0,6,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1311,                return Double.POSITIVE_INFINITY;,6,1,0,0,0,1,0,0,0,7,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1313,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1318,        if (x < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1320,            if (y >= 4503599627370496.0 || y <= -4503599627370496.0) {,0,0,0,1,3,0,0,0,0,4,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1321,"                return pow(-x, y);",4,1,0,1,2,1,0,0,0,6,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1324,            if (y == (long) y) {,10,2,0,2,5,1,0,0,0,13,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1326,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",0,0,0,4,8,1,0,0,0,13,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1328,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1335,        if (y < 8e298 && y > -8e298) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1336,            double tmp1 = y * 1073741824.0;,4,1,0,0,0,0,0,0,0,5,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1337,            ya = y + tmp1 - tmp1;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1338,            yb = y - ya;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1339,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1340,            double tmp1 = y * 9.31322574615478515625E-10;,0,0,0,0,0,0,0,0,0,0,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1341,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,0,0,0,0,0,0,0,0,0,0,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1342,            ya = (tmp1 + tmp2 - tmp1) * 1073741824.0 * 1073741824.0;,0,0,0,1,2,0,0,0,0,3,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1343,            yb = y - ya;,6,1,0,0,0,0,0,0,0,8,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1347,"        log(x, lns);",0,0,0,1,2,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1348,        double lna = lns[0];,6,0,1,1,2,0,0,0,0,8,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1349,        double lnb = lns[1];,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1352,        double tmp1 = lna * 1073741824.0;,4,1,0,0,0,0,0,0,0,5,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1353,        double tmp2 = lna + tmp1 - tmp1;,0,0,0,0,0,0,0,0,0,0,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1354,        lnb += lna - tmp2;,14,2,0,0,0,0,0,0,0,18,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1355,        lna = tmp2;,6,1,0,0,0,0,0,0,0,8,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1358,        final double aa = lna * ya;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1359,        final double ab = lna * yb + lnb * ya + lnb * yb;,0,0,0,0,0,0,0,0,0,0,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1361,        lna = aa+ab;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1362,        lnb = -(lna - aa - ab);,16,2,0,1,2,0,0,0,0,21,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1364,        double z = 1.0 / 120.0;,8,2,0,0,0,0,0,0,0,11,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1365,        z = z * lnb + (1.0 / 24.0);,6,3,0,1,2,0,0,0,0,10,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1366,        z = z * lnb + (1.0 / 6.0);,14,4,0,1,2,0,0,0,0,20,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1367,        z = z * lnb + 0.5;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1368,        z = z * lnb + 1.0;,6,2,0,0,0,0,0,0,0,9,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1369,        z = z * lnb;,6,1,0,0,0,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1371,"        final double result = exp(lna, z, null);",10,3,0,1,2,0,0,0,0,13,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1373,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1628,        double x2 = x*x;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1630,        double p = 2.7553817452272217E-6;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1631,        p = p * x2 + -1.9841269659586505E-4;,6,2,0,0,0,0,0,0,0,10,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1632,        p = p * x2 + 0.008333333333329196;,12,3,0,0,0,0,0,0,0,17,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1633,        p = p * x2 + -0.16666666666666666;,8,2,0,0,0,0,0,0,0,12,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1636,        p = p * x2 * x;,8,1,0,0,0,0,0,0,0,10,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1638,        return p;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1648,        double x2 = x*x;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1650,        double p = 2.479773539153719E-5;,0,0,0,0,0,0,0,0,0,0,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1651,        p = p * x2 + -0.0013888888689039883;,6,2,0,0,0,0,0,0,0,10,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1652,        p = p * x2 + 0.041666666666621166;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1653,        p = p * x2 + -0.49999999999999994;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1654,        p *= x2;,12,2,1,0,0,0,4,0,0,22,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1656,        return p;,16,2,0,0,0,2,0,0,0,21,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1667,        int idx = (int) ((xa * 8.0) + 0.5);,4,2,0,3,6,0,0,0,0,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1668,        final double epsilon = xa - EIGHTHES[idx]; //idx*0.125;,2,0,0,1,2,1,10,2,0,15,55,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1671,        final double sintA = SINE_TABLE_A[idx];,0,0,0,1,2,0,4,0,0,4,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1672,        final double sintB = SINE_TABLE_B[idx];,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1673,        final double costA = COSINE_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1674,        final double costB = COSINE_TABLE_B[idx];,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1677,        double sinEpsA = epsilon;,4,0,0,0,0,0,0,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1678,        double sinEpsB = polySine(epsilon);,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1679,        final double cosEpsA = 1.0;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1680,        final double cosEpsB = polyCosine(epsilon);,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1683,        final double temp = sinEpsA * 1073741824.0;,4,1,0,0,0,1,0,0,0,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1684,        double temp2 = (sinEpsA + temp) - temp;,10,1,1,1,2,0,0,0,0,16,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1685,        sinEpsB +=  sinEpsA - temp2;,18,6,0,0,0,0,0,0,0,25,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1686,        sinEpsA = temp2;,4,0,0,0,0,0,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1712,        double a = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1713,        double b = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1715,        double t = sintA;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1716,        double c = a + t;,6,1,0,0,0,0,0,0,0,7,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1717,        double d = -(c - a - t);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1718,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1719,        b = b + d;,8,1,0,0,0,0,0,0,0,10,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1721,        t = costA * sinEpsA;,6,1,0,0,0,0,0,0,0,8,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1722,        c = a + t;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1723,        d = -(c - a - t);,0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1724,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1725,        b = b + d;,24,4,0,0,0,1,0,0,0,30,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1727,        b = b + sintA * cosEpsB + costA * sinEpsB;,0,0,0,0,0,0,0,0,0,0,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1742,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,18,6,0,0,0,0,0,0,0,25,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1769,        if (xb != 0.0) {,2,0,0,1,3,0,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1770,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,20,8,0,2,5,0,0,0,0,30,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1772,            c = a + t;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1773,            d = -(c - a - t);,0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1774,            a = c;,4,0,0,0,0,0,0,0,0,5,6,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1775,            b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1778,        result = a + b;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1780,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1791,        final double pi2a = 1.5707963267948966;,6,1,0,0,0,0,0,0,0,8,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1792,        final double pi2b = 6.123233995736766E-17;,4,0,0,0,0,1,0,0,0,5,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1794,        final double a = pi2a - xa;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1795,        double b = -(a - pi2a + xa);,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1796,        b += pi2b - xb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1798,"        return sinQ(a, b);",0,0,0,1,2,1,6,0,0,6,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1811,        int idx = (int) ((xa * 8.0) + 0.5);,0,0,0,3,6,0,0,0,0,9,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1812,        final double epsilon = xa - EIGHTHES[idx]; //idx*0.125;,0,0,0,1,2,0,0,0,0,3,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1815,        final double sintA = SINE_TABLE_A[idx];,2,0,0,1,2,0,6,0,0,9,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1816,        final double sintB = SINE_TABLE_B[idx];,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1817,        final double costA = COSINE_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1818,        final double costB = COSINE_TABLE_B[idx];,2,0,1,1,2,1,0,0,0,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1821,        double sinEpsA = epsilon;,12,1,1,0,0,1,0,2,0,18,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1822,        double sinEpsB = polySine(epsilon);,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1823,        final double cosEpsA = 1.0;,2,0,0,0,0,1,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1824,        final double cosEpsB = polyCosine(epsilon);,12,1,0,1,2,1,4,0,0,19,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1827,        double temp = sinEpsA * 1073741824.0;,4,1,0,0,0,0,0,0,0,5,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1828,        double temp2 = (sinEpsA + temp) - temp;,14,4,0,1,2,0,0,0,0,20,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1829,        sinEpsB +=  sinEpsA - temp2;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1830,        sinEpsA = temp2;,8,0,0,0,0,0,0,0,0,10,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1855,        double a = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1856,        double b = 0;,4,0,1,0,0,0,0,0,0,7,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1859,        double t = sintA;,2,0,1,0,0,0,0,0,0,8,17,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1860,        double c = a + t;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1861,        double d = -(c - a - t);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1862,        a = c;,4,1,1,0,0,0,0,0,0,9,6,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1863,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1865,        t = costA*sinEpsA;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1866,        c = a + t;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1867,        d = -(c - a - t);,14,1,0,1,2,0,4,0,0,21,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1868,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1869,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1871,        b = b + sintA*cosEpsB + costA*sinEpsB;,30,7,0,0,0,1,0,0,0,40,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1872,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,24,7,0,0,0,1,0,0,0,33,62,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1874,        double sina = a + b;,10,3,1,0,0,0,0,0,0,21,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1875,        double sinb = -(sina - a - b);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1879,        a = b = c = d = 0.0;,8,0,0,0,0,0,0,0,0,12,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1881,        t = costA*cosEpsA;,10,1,0,0,0,0,0,0,0,12,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1882,        c = a + t;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1883,        d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1884,        a = c;,4,1,1,0,0,1,0,0,0,8,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1885,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1887,        t = -sintA*sinEpsA;,6,1,0,0,0,0,0,0,0,9,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1888,        c = a + t;,14,2,0,0,0,0,0,0,0,18,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1889,        d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1890,        a = c;,2,1,0,0,0,0,0,0,0,3,6,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1891,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1893,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,2,0,0,0,0,1,2,0,0,5,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1894,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,16,6,0,1,2,0,0,0,0,23,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1896,        double cosa = a + b;,14,2,0,0,0,0,0,0,0,18,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1897,        double cosb = -(cosa - a - b);,26,3,0,1,2,0,0,0,0,32,30,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1899,        if (cotanFlag) {,22,9,0,1,3,0,0,0,0,32,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1901,            tmp = cosa; cosa = sina; sina = tmp;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1902,            tmp = cosb; cosb = sinb; sinb = tmp;,12,0,0,0,0,0,0,0,0,15,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1916,        double est = sina/cosa;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1919,        temp = est * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1920,        double esta = (est + temp) - temp;,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1921,        double estb =  est - esta;,0,0,0,0,0,0,0,0,0,0,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1923,        temp = cosa * 1073741824.0;,4,1,0,0,0,0,6,0,0,12,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1924,        double cosaa = (cosa + temp) - temp;,8,2,0,1,2,0,0,0,0,10,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1925,        double cosab =  cosa - cosaa;,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1928,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,28,10,0,1,2,0,0,0,0,39,114,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1929,        err += sinb/cosa;                     // Change in est due to sinb,6,1,0,0,0,0,0,0,0,8,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1930,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,0,0,0,0,0,0,0,0,0,0,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1932,        if (xb != 0.0) {,8,2,0,1,3,0,0,0,0,10,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1935,            double xbadj = xb + est*est*xb;,10,2,0,0,0,0,0,0,0,12,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1936,            if (cotanFlag) {,4,1,0,1,3,1,0,0,0,6,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1937,                xbadj = -xbadj;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1940,            err += xbadj;,16,2,0,0,0,0,0,0,0,19,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1943,        return est+err;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1960,        long inbits = Double.doubleToLongBits(x);,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1961,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0,0,0,3,6,0,0,0,0,9,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1964,        inbits &= 0x000fffffffffffffL;,4,0,0,0,0,1,6,0,0,12,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1965,        inbits |= 0x0010000000000000L;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1968,        exponent++;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1969,        inbits <<= 11;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1975,        int idx = exponent >> 6;,16,5,1,0,0,0,4,0,0,35,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1976,        int shift = exponent - (idx << 6);,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1978,        if (shift != 0) {,8,2,0,1,3,0,0,0,0,11,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1979,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,0,0,0,3,6,0,0,0,0,9,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1980,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,8,1,0,2,4,0,0,0,0,9,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1981,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,8,5,1,5,10,0,0,0,0,20,70,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1982,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,0,0,0,5,10,0,0,0,0,15,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1984,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,6,2,1,2,4,0,0,0,0,11,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1985,            shpiA = RECIP_2PI[idx];,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1986,            shpiB = RECIP_2PI[idx+1];,0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1990,        long a = inbits >>> 32;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1991,        long b = inbits & 0xffffffffL;,4,1,0,0,0,0,0,0,0,5,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1993,        long c = shpiA >>> 32;,4,1,0,0,0,0,0,0,0,5,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1994,        long d = shpiA & 0xffffffffL;,8,1,0,0,0,0,0,0,0,11,29,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1996,        long ac = a * c;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1997,        long bd = b * d;,10,1,0,0,0,0,0,0,0,13,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1998,        long bc = b * c;,8,1,1,0,0,0,0,0,0,11,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1999,        long ad = a * d;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2001,        long prodB = bd + (ad << 32);,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2002,        long prodA = ac + (ad >>> 32);,2,0,1,1,2,0,0,0,0,5,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2004,        boolean bita = (bd & 0x8000000000000000L) != 0;,16,4,0,1,2,0,0,0,0,21,47,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2005,        boolean bitb = (ad & 0x80000000L ) != 0;,8,1,0,1,2,0,0,0,0,10,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2006,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,16,3,0,1,2,0,0,0,0,22,52,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2009,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2011,            prodA++;,6,4,0,0,0,0,0,0,0,11,8,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2014,        bita = (prodB & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2015,        bitb = (bc & 0x80000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2017,        prodB = prodB + (bc << 32);,12,3,0,1,2,0,0,0,0,17,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2018,        prodA = prodA + (bc >>> 32);,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2020,        bitsum = (prodB & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2023,        if ( (bita && bitb) ||,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2025,            prodA++;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2029,        c = shpiB >>> 32;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2030,        d = shpiB & 0xffffffffL;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2031,        ac = a * c;,12,3,0,0,0,0,0,0,0,17,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2032,        bc = b * c;,0,1,1,0,0,0,0,0,0,6,11,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2033,        ad = a * d;,16,5,1,0,0,0,0,0,0,26,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2036,        ac = ac + ((bc + ad) >>> 32);,8,3,0,2,4,0,0,0,0,12,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2038,        bita = (prodB & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2039,        bitb = (ac & 0x8000000000000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2040,        prodB += ac;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2041,        bitsum = (prodB & 0x8000000000000000L) != 0;,10,3,0,1,2,0,0,0,0,14,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2043,        if ( (bita && bitb) ||,6,3,0,1,3,0,0,0,0,10,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2045,            prodA++;,2,0,0,0,0,0,0,0,0,3,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2049,        c = shpi0 >>> 32;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2050,        d = shpi0 & 0xffffffffL;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2052,        bd = b * d;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2053,        bc = b * c;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2054,        ad = a * d;,2,0,0,0,0,0,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2056,        prodA += bd + ((bc + ad) << 32);,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2068,        int intPart = (int)(prodA >>> 62);,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2071,        prodA <<= 2;,16,2,0,0,0,0,0,0,0,22,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2072,        prodA |= prodB >>> 62;,4,1,1,0,0,0,0,0,0,8,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2073,        prodB <<= 2;,8,1,0,0,0,0,0,0,0,11,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2076,        a = prodA >>> 32;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2077,        b = prodA & 0xffffffffL;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2079,        c = PI_O_4_BITS[0] >>> 32;,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2080,        d = PI_O_4_BITS[0] & 0xffffffffL;,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2082,        ac = a * c;,4,1,0,0,0,0,0,0,0,5,11,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2083,        bd = b * d;,10,2,0,0,0,0,0,0,0,14,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2084,        bc = b * c;,12,2,0,0,0,0,0,0,0,16,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2085,        ad = a * d;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2087,        long prod2B = bd + (ad << 32);,6,2,0,1,2,0,0,0,0,8,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2088,        long prod2A = ac + (ad >>> 32);,12,2,0,1,2,0,0,0,0,16,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2090,        bita = (bd & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2091,        bitb = (ad & 0x80000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2092,        bitsum = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2095,        if ( (bita && bitb) ||,10,1,0,1,3,0,0,0,0,12,22,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2097,            prod2A++;,8,2,0,0,0,0,0,0,0,10,9,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2100,        bita = (prod2B & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2101,        bitb = (bc & 0x80000000L ) != 0;,10,3,0,1,2,0,0,0,0,15,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2103,        prod2B = prod2B + (bc << 32);,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2104,        prod2A = prod2A + (bc >>> 32);,2,0,0,1,2,0,0,0,0,3,30,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2106,        bitsum = (prod2B & 0x8000000000000000L) != 0;,18,4,0,1,2,0,0,0,0,24,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2109,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2111,            prod2A++;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2115,        c = PI_O_4_BITS[1] >>> 32;,8,0,0,1,2,1,2,8,0,19,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2116,        d = PI_O_4_BITS[1] & 0xffffffffL;,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2117,        ac = a * c;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2118,        bc = b * c;,2,0,0,0,0,0,0,0,0,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2119,        ad = a * d;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2122,        ac = ac + ((bc + ad) >>> 32);,2,0,0,2,4,1,2,0,0,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2124,        bita = (prod2B & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2125,        bitb = (ac & 0x8000000000000000L ) != 0;,6,3,0,1,2,0,0,0,0,10,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2126,        prod2B += ac;,10,2,0,0,0,0,0,0,0,15,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2127,        bitsum = (prod2B & 0x8000000000000000L) != 0;,6,2,0,1,2,0,0,2,0,11,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2129,        if ( (bita && bitb) ||,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2131,            prod2A++;,6,0,0,0,0,0,0,0,0,8,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2135,        a = prodB >>> 32;,4,1,0,0,0,0,0,0,0,6,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2136,        b = prodB & 0xffffffffL;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2137,        c = PI_O_4_BITS[0] >>> 32;,2,1,1,1,2,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2138,        d = PI_O_4_BITS[0] & 0xffffffffL;,4,1,1,1,2,0,0,0,0,8,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2139,        ac = a * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2140,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2141,        ad = a * d;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2144,        ac = ac + ((bc + ad) >>> 32);,8,3,0,2,4,0,0,0,0,12,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2146,        bita = (prod2B & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2147,        bitb = (ac & 0x8000000000000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2148,        prod2B += ac;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2149,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2151,        if ( (bita && bitb) ||,2,1,1,1,3,0,0,0,0,6,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2153,            prod2A++;,2,0,0,0,0,0,0,0,0,2,9,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2157,        double tmpA = (prod2A >>> 12) / 4503599627370496.0;  // High order 52 bits,0,0,0,1,2,0,0,0,0,3,74,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2158,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / 4503599627370496.0 / 4503599627370496.0; // Low bits,0,0,0,4,8,0,0,0,0,12,114,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2160,        double sumA = tmpA + tmpB;,0,0,0,0,0,0,0,0,0,0,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2161,        double sumB = -(sumA - tmpA - tmpB);,10,2,0,1,2,0,0,0,0,14,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2164,        result[0] = intPart;,2,0,1,1,2,0,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2165,        result[1] = sumA * 2.0;,4,2,1,1,2,0,0,0,0,9,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2166,        result[2] = sumB * 2.0;,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2167,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2175,        boolean negative = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2176,        int quadrant = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2178,        double xb = 0.0;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2181,        xa = x;,10,1,0,0,0,0,0,0,0,13,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2182,        if (x < 0) {,2,0,1,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2183,            negative = true;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2184,            xa = -xa;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2188,        if (xa == 0.0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2189,            long bits = Double.doubleToLongBits(x);,4,0,0,1,2,0,0,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2190,            if (bits < 0) {,8,2,0,1,3,0,0,0,0,10,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2191,                return -0.0;,2,0,0,0,0,1,0,0,0,4,12,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2193,            return 0.0;,4,0,0,0,0,1,0,0,0,5,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2196,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,16,4,0,1,3,0,0,0,0,21,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2197,            return Double.NaN;,10,1,0,0,0,1,0,0,0,11,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2201,        if (xa > 3294198.0) {,4,0,0,1,3,0,0,0,0,4,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2205,            double reduceResults[] = new double[3];,0,0,0,2,4,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2206,"            reducePayneHanek(xa, reduceResults);",0,0,0,1,2,0,6,0,0,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2207,            quadrant = ((int) reduceResults[0]) & 3;,0,0,0,3,6,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2208,            xa = reduceResults[1];,8,2,0,1,2,0,0,0,0,10,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2209,            xb = reduceResults[2];,2,0,1,1,2,0,8,0,0,13,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2210,        } else if (xa > 1.5707963267948966) {,2,1,0,1,4,0,0,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2215,            int k = (int)(xa * 0.6366197723675814);,10,2,0,2,4,0,0,0,0,13,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2221,                double a = -k * 1.570796251296997;,4,1,0,0,0,0,0,0,0,6,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2222,                remA = xa + a;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2223,                remB = -(remA - xa - a);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2225,                a = -k * 7.549789948768648E-8;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2226,                double b = remA;,4,0,0,0,0,0,0,0,0,4,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2227,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2228,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2230,                a = -k * 6.123233995736766E-17;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2231,                b = remA;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2232,                remA = a + b;,6,1,1,0,0,0,0,0,0,14,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2233,                remB += -(remA - b - a);,4,0,0,1,2,0,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2235,                if (remA > 0.0),2,1,0,1,2,0,0,0,0,3,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2236,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2241,                k--;,0,0,0,0,0,0,0,0,0,0,4,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2242,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2243,            quadrant = k & 3;,4,1,0,0,0,0,0,0,0,6,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2244,            xa = remA;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2245,            xb = remB;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2248,        if (negative) {,4,0,0,1,3,0,4,0,0,11,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2249,            quadrant ^= 2;  // Flip bit 1,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2252,        switch (quadrant) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2254,"                return sinQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2256,"                return cosQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2258,"                return -sinQ(xa, xb);",6,1,0,1,2,2,6,0,0,15,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2260,"                return -cosQ(xa, xb);",10,1,0,1,2,1,6,0,0,19,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2262,                return Double.NaN;,22,9,0,0,0,1,0,0,0,32,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2272,        int quadrant = 0;,4,0,0,0,0,0,0,0,0,5,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2275,        double xa = x;,4,0,0,0,0,0,0,0,0,4,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2276,        if (x < 0) {,14,4,0,1,3,0,0,0,0,19,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2277,            xa = -xa;,2,1,0,0,0,0,0,0,0,4,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2280,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,2,0,0,1,3,0,0,0,0,2,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2281,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2285,        double xb = 0;,2,2,0,0,0,0,12,0,0,16,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2286,        if (xa > 3294198.0) {,14,4,0,1,3,0,2,0,0,21,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2290,            double reduceResults[] = new double[3];,4,1,1,2,4,0,0,0,0,10,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2291,"            reducePayneHanek(xa, reduceResults);",0,0,0,1,2,0,6,0,0,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2292,            quadrant = ((int) reduceResults[0]) & 3;,6,2,1,3,6,0,0,0,0,11,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2293,            xa = reduceResults[1];,12,3,1,1,2,0,0,0,0,18,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2294,            xb = reduceResults[2];,6,1,1,1,2,0,0,0,0,11,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2295,        } else if (xa > 1.5707963267948966) {,2,1,0,1,4,0,0,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2300,            int k = (int)(xa * 0.6366197723675814);,0,0,0,2,4,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2306,                double a = -k * 1.570796251296997;,4,1,1,0,0,0,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2307,                remA = xa + a;,20,5,0,0,0,0,0,0,0,27,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2308,                remB = -(remA - xa - a);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2310,                a = -k * 7.549789948768648E-8;,18,5,1,0,0,2,4,0,0,33,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2311,                double b = remA;,12,1,0,0,0,0,0,0,0,15,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2312,                remA = a + b;,12,2,0,0,0,0,0,0,0,15,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2313,                remB += -(remA - b - a);,2,0,1,1,2,0,0,0,0,5,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2315,                a = -k * 6.123233995736766E-17;,12,4,0,0,0,0,8,0,0,27,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2316,                b = remA;,4,0,0,0,0,0,0,0,0,5,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2317,                remA = a + b;,10,2,0,0,0,0,4,0,0,17,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2318,                remB += -(remA - b - a);,12,2,0,1,2,0,0,0,0,16,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2320,                if (remA > 0.0),0,0,0,1,2,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2321,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2326,                k--;,0,0,0,0,0,0,0,0,0,0,4,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2327,            },4,0,0,0,1,1,4,0,0,10,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2328,            quadrant = k & 3;,4,1,0,0,0,0,0,0,0,6,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2329,            xa = remA;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2330,            xb = remB;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2336,        switch (quadrant) {,8,7,0,1,3,0,0,0,0,15,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2338,"                return cosQ(xa, xb);",0,0,0,1,2,1,6,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2340,"                return -sinQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2342,"                return -cosQ(xa, xb);",10,2,0,1,2,1,6,0,0,20,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2344,"                return sinQ(xa, xb);",8,3,0,1,2,1,0,0,0,12,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2346,                return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2356,        boolean negative = false;,12,3,0,0,0,0,0,0,0,17,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2357,        int quadrant = 0;,4,0,0,0,0,0,0,0,0,4,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2360,        double xa = x;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2361,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2362,            negative = true;,8,2,1,0,0,1,0,0,0,14,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2363,            xa = -xa;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2367,        if (xa == 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2368,            long bits = Double.doubleToLongBits(x);,6,1,0,1,2,0,0,0,0,8,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2369,            if (bits < 0) {,4,1,0,1,3,1,0,0,0,6,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2370,                return -0.0;,0,0,0,0,0,1,0,0,0,1,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2372,            return 0.0;,8,4,0,0,0,1,0,0,0,14,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2375,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,0,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2376,            return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2380,        double xb = 0;,4,1,0,0,0,0,0,0,0,6,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2381,        if (xa > 3294198.0) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2385,            double reduceResults[] = new double[3];,0,0,0,2,4,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2386,"            reducePayneHanek(xa, reduceResults);",0,0,0,1,2,0,6,0,0,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2387,            quadrant = ((int) reduceResults[0]) & 3;,2,1,1,3,6,0,0,0,0,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2388,            xa = reduceResults[1];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2389,            xb = reduceResults[2];,4,0,1,1,2,0,0,0,0,7,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2390,        } else if (xa > 1.5707963267948966) {,2,1,0,1,4,0,0,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2395,            int k = (int)(xa * 0.6366197723675814);,4,1,0,2,4,0,0,0,0,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2401,                double a = -k * 1.570796251296997;,4,1,0,0,0,0,0,0,0,6,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2402,                remA = xa + a;,6,1,0,0,0,0,0,0,0,8,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2403,                remB = -(remA - xa - a);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2405,                a = -k * 7.549789948768648E-8;,2,0,0,0,0,0,0,0,0,2,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2406,                double b = remA;,4,0,0,0,0,0,0,0,0,4,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2407,                remA = a + b;,6,2,0,0,0,0,8,0,0,18,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2408,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2410,                a = -k * 6.123233995736766E-17;,6,1,0,0,0,0,0,0,0,9,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2411,                b = remA;,14,6,1,0,0,0,0,0,0,26,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2412,                remA = a + b;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2413,                remB += -(remA - b - a);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2415,                if (remA > 0.0),0,0,0,1,2,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2416,                    break;,6,0,0,0,0,0,0,0,0,7,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2421,                k--;,4,0,0,0,0,0,0,0,0,5,4,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2422,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2423,            quadrant = k & 3;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2424,            xa = remA;,10,1,0,0,0,0,0,0,0,13,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2425,            xb = remB;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2428,        if (xa > 1.5) {,10,3,0,1,3,0,0,0,0,13,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2430,            final double pi2a = 1.5707963267948966;,0,0,0,0,0,0,0,0,0,0,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2431,            final double pi2b = 6.123233995736766E-17;,0,0,0,0,0,0,0,0,0,0,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2433,            final double a = pi2a - xa;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2434,            double b = -(a - pi2a + xa);,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2435,            b += pi2b - xb;,8,1,0,0,0,0,4,0,0,14,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2437,            xa = a + b;,6,1,0,0,0,0,0,0,0,8,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2438,            xb = -(xa - a - b);,8,1,0,1,2,0,0,0,0,11,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2439,            quadrant ^= 1;,4,2,0,0,0,0,0,0,0,6,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2440,            negative ^= true;,8,1,0,0,0,0,0,0,0,11,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2444,        if ((quadrant & 1) == 0) {,2,2,0,2,5,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2445,"            result = tanQ(xa, xb, false);",6,0,0,1,2,0,6,0,0,14,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2447,"            result = -tanQ(xa, xb, true);",4,1,0,1,2,0,6,0,0,15,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2450,        if (negative) {,2,0,0,1,3,0,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2451,            result = -result;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2454,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2463,"        return atan(x, 0.0, false);",6,1,0,1,2,1,4,0,0,13,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2473,        boolean negate = false;,10,4,0,0,0,1,0,0,0,16,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2476,        if (xa < 0) {,6,4,0,1,3,0,4,0,0,14,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2478,            xa = -xa;,12,1,0,0,0,0,0,0,0,16,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2479,            xb = -xb;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2480,            negate = true;,2,0,0,0,0,0,0,0,0,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2483,        if (xa > 1.633123935319537E16) { // Very large input,2,1,0,1,3,0,0,0,0,3,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2484,            return (negate ^ leftPlane) ? (-Math.PI/2.0) : (Math.PI/2.0);,12,3,0,3,6,1,0,0,0,16,61,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2488,        if (xa < 1.0) {,2,1,1,1,3,0,10,0,0,22,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2489,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,8,4,0,4,8,0,0,0,0,14,65,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2491,            double temp = 1.0/xa;,10,2,0,0,0,0,0,0,0,12,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2492,            idx = (int) (-((-1.7168146928204136 * temp * temp + 8.0) * temp) + 13.07);,0,0,0,4,8,0,0,0,0,12,74,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2494,        double epsA = xa - TANGENT_TABLE_A[idx];,4,1,1,1,2,0,0,0,0,9,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2495,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,6,2,1,2,4,0,0,0,0,13,50,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2496,        epsB += xb - TANGENT_TABLE_B[idx];,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2498,        double temp = epsA + epsB;,0,0,0,0,0,0,0,0,0,0,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2499,        epsB = -(temp - epsA - epsB);,8,1,0,1,2,0,0,0,0,11,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2500,        epsA = temp;,4,0,0,0,0,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2503,        temp = xa * 1073741824.0;,2,0,0,0,0,0,0,0,0,2,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2504,        double ya = xa + temp - temp;,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2505,        double yb = xb + xa - ya;,18,4,0,0,0,0,0,0,0,23,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2506,        xa = ya;,6,2,1,0,0,1,0,0,0,11,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2507,        xb += yb;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2510,        if (idx == 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2513,            double denom = 1.0 / (1.0 + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,6,5,1,5,10,0,0,0,0,19,87,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2515,            ya = epsA * denom;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2516,            yb = epsB * denom;,6,1,0,0,0,0,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2517,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2518,            double temp2 = xa * TANGENT_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2519,            double za = 1.0 + temp2;,6,1,0,0,0,0,0,0,0,8,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2520,            double zb = -(za - 1.0 - temp2);,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2521,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,0,0,0,2,4,0,0,0,0,6,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2522,            temp = za + temp2;,6,1,0,0,0,0,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2523,            zb += -(temp - za - temp2);,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2524,            za = temp;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2526,            zb += xb * TANGENT_TABLE_B[idx];,4,1,1,1,2,0,0,0,0,10,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2527,            ya = epsA / za;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2529,            temp = ya * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2530,            final double yaa = (ya + temp) - temp;,14,3,0,1,2,2,0,0,0,19,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2531,            final double yab = ya - yaa;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2533,            temp = za * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2534,            final double zaa = (za + temp) - temp;,8,2,0,1,2,1,0,0,0,11,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2535,            final double zab = za - zaa;,6,1,0,0,0,1,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2538,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,24,9,0,1,2,1,0,0,0,35,65,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2540,            yb += -epsA * zb / za / za;,10,3,0,0,0,0,0,0,0,15,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2541,            yb += epsB / za;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2545,        epsA = ya;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2546,        epsB = yb;,2,0,0,0,0,0,0,0,0,3,10,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2549,        double epsA2 = epsA*epsA;,12,2,0,0,0,1,6,0,0,21,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2560,        yb = 0.07490822288864472;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2561,        yb = yb * epsA2 + -0.09088450866185192;,2,0,0,0,0,0,0,0,0,2,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2562,        yb = yb * epsA2 + 0.11111095942313305;,10,2,0,0,0,0,0,0,0,14,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2563,        yb = yb * epsA2 + -0.1428571423679182;,14,3,0,0,0,0,6,4,0,31,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2564,        yb = yb * epsA2 + 0.19999999999923582;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2565,        yb = yb * epsA2 + -0.33333333333333287;,8,2,0,0,0,0,0,0,0,12,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2566,        yb = yb * epsA2 * epsA;,8,1,0,0,0,0,0,0,0,10,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2569,        ya = epsA;,4,1,0,0,0,0,0,0,0,5,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2571,        temp = ya + yb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2572,        yb = -(temp - ya - yb);,14,2,0,1,2,0,0,0,0,19,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2573,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2576,        yb += epsB / (1.0 + epsA * epsA);,6,1,0,1,2,0,0,0,0,7,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2582,        double za = EIGHTHES[idx] + ya;,0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2583,        double zb = -(za - EIGHTHES[idx] - ya);,6,1,1,2,4,0,0,0,0,12,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2584,        temp = za + yb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2585,        zb += -(temp - za - yb);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2586,        za = temp;,8,1,0,0,0,0,0,0,0,10,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2588,        result = za + zb;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2589,        resultb = -(result - za - zb);,2,1,0,1,2,0,0,2,0,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2591,        if (leftPlane) {,8,1,0,1,3,1,0,0,0,10,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2593,            final double pia = 1.5707963267948966*2.0;,0,0,0,0,0,0,0,0,0,0,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2594,            final double pib = 6.123233995736766E-17*2.0;,0,0,0,0,0,0,0,0,0,0,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2596,            za = pia - result;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2597,            zb = -(za - pia + result);,18,5,0,1,2,0,0,0,0,26,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2598,            zb += pib - resultb;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2600,            result = za + zb;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2601,            resultb = -(result - za - zb);,14,2,0,1,2,0,0,0,0,19,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2605,        if (negate ^ leftPlane) {,4,1,0,1,3,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2606,            result = -result;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2609,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2619,        if (x !=x || y != y) {,12,3,0,1,3,0,0,0,0,17,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2620,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2623,        if (y == 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2624,            double result = x*y;,6,1,0,0,0,0,0,0,0,7,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2625,            double invx = 1.0/x;,10,3,0,0,0,0,6,0,0,21,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2626,            double invy = 1.0/y;,8,5,0,0,0,0,0,0,0,13,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2628,            if (invx == 0.0) { // X is infinite,0,0,0,1,3,0,0,0,0,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2629,                if (x > 0) {,8,3,0,1,3,0,0,0,0,12,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2630,                    return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2632,                    return Math.PI;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2636,            if (result != result) { // y must be infinite,0,0,0,1,3,0,0,0,0,4,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2637,                return x/y;,6,2,1,0,0,2,0,0,0,11,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2640,            if (x < 0.0 || invx < 0.0) {,4,3,0,1,3,0,0,0,0,7,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2641,                if (y < 0.0 || invy < 0.0) {,4,3,0,1,3,0,0,0,0,7,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2642,                    return -Math.PI;,8,2,0,0,0,1,0,0,0,12,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2644,                    return Math.PI;,4,0,0,0,0,1,0,0,0,4,15,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2647,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2651,        if (y == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2652,            if (x == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2653,                return Math.PI/4.0;,0,0,0,0,0,1,0,0,0,1,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2656,            if (x == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2657,                return Math.PI*3.0/4.0;,4,2,0,0,0,1,0,0,0,6,23,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2660,            return Math.PI/2.0;,6,1,0,0,0,1,6,0,0,14,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2663,        if (y == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2664,            if (x == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2665,                return -Math.PI/4.0;,0,0,0,0,0,1,0,0,0,1,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2668,            if (x == Double.NEGATIVE_INFINITY) {,8,1,0,1,3,0,0,0,0,9,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2669,                return -Math.PI*3.0/4.0;,12,4,0,0,0,1,0,0,0,17,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2672,            return -Math.PI/2.0;,4,1,0,0,0,1,0,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2675,        if (x == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2676,            if (y > 0.0 || 1/y > 0.0) {,4,4,0,1,3,0,0,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2677,                return 0.0;,2,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2680,            if (y < 0.0 || 1/y < 0.0) {,0,0,0,1,3,0,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2681,                return -0.0;,6,1,0,0,0,1,4,0,0,14,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2685,        if (x == Double.NEGATIVE_INFINITY),8,1,0,1,2,1,4,0,0,14,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2687,            if (y > 0.0 || 1/y > 0.0) {,6,4,0,1,3,0,0,0,0,10,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2688,                return Math.PI;,2,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2691,            if (y < 0.0 || 1/y < 0.0) {,4,4,0,1,3,0,0,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2692,                return -Math.PI;,4,0,0,0,0,1,0,0,0,5,16,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2696,        if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2697,            if (y > 0.0 || 1/y > 0.0) {,10,8,0,1,3,0,0,0,0,19,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2698,                return Math.PI/2.0;,6,2,0,0,0,1,0,0,0,8,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2701,            if (y < 0.0 || 1/y < 0.0) {,4,4,0,1,3,0,0,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2702,                return -Math.PI/2.0;,4,1,0,0,0,1,6,0,0,12,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2706,        if (x > 8e298 || x < -8e298) { // This would cause split of x to fail,0,0,0,1,3,0,0,0,0,4,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2707,            x *= 9.31322574615478515625E-10;,2,0,0,0,0,0,0,0,0,3,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2708,            y *= 9.31322574615478515625E-10;,8,2,1,0,0,0,0,0,0,12,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2712,        double temp = x * 1073741824.0;,4,1,0,0,0,0,0,0,0,5,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2713,        final double xa = x + temp - temp;,8,2,0,0,0,1,0,0,0,11,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2714,        final double xb = x - xa;,6,1,0,0,0,1,0,0,0,8,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2717,        final double r = y/x;,6,1,0,0,0,1,0,0,0,8,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2718,        temp = r * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2719,        double ra = r + temp - temp;,10,2,0,0,0,1,6,0,0,19,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2720,        double rb = r - ra;,6,1,0,0,0,0,0,0,0,7,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2722,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,22,9,0,1,2,0,0,0,0,32,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2724,        temp = ra + rb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2725,        rb = -(temp - ra - rb);,8,2,0,1,2,0,0,0,0,10,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2726,        ra = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2729,"        double result = atan(ra, rb, x < 0);",4,1,0,1,2,0,6,0,0,11,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2731,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2739,      if (x != x) {,10,3,0,1,3,0,0,0,0,15,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2740,          return Double.NaN;,8,0,1,0,0,1,6,0,0,22,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2743,      if (x > 1.0 || x < -1.0) {,4,3,0,1,3,0,0,0,0,8,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2744,          return Double.NaN;,2,1,1,0,0,1,0,0,0,6,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2747,      if (x == 1.0) {,6,2,1,1,3,0,0,0,0,13,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2748,          return Math.PI/2.0;,10,2,0,0,0,1,0,0,0,13,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2751,      if (x == -1.0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2752,          return -Math.PI/2.0;,0,0,0,0,0,1,0,0,0,1,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2758,      double temp = x * 1073741824.0;,16,2,0,0,0,0,0,0,0,19,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2759,      final double xa = x + temp - temp;,8,2,0,0,0,1,0,0,0,11,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2760,      final double xb = x - xa;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2763,      double ya = xa*xa;,6,1,0,0,0,0,0,0,0,7,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2764,      double yb = xa*xb*2.0 + xb*xb;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2767,      ya = -ya;,4,0,0,0,0,0,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2768,      yb = -yb;,4,0,0,0,0,0,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2770,      double za = 1.0 + ya;,4,1,0,0,0,0,0,0,0,5,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2771,      double zb = -(za - 1.0 - ya);,16,3,1,1,2,0,12,0,0,36,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2773,      temp = za + yb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2774,      zb += -(temp - za - yb);,10,1,0,1,2,0,0,0,0,13,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2775,      za = temp;,10,2,0,0,0,0,0,0,0,14,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2779,      y = sqrt(za);,2,0,0,1,2,0,4,0,0,7,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2780,      temp = y * 1073741824.0;,8,5,0,0,0,0,0,0,0,14,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2781,      ya = y + temp - temp;,18,3,0,0,0,0,0,2,0,26,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2782,      yb = y - ya;,6,1,0,0,0,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2785,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,18,8,0,2,4,0,0,0,0,27,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2788,      double dx = zb / (2.0*y);,18,2,0,1,2,0,0,0,0,23,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2791,      double r = x/y;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2792,      temp = r * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2793,      double ra = r + temp - temp;,6,1,0,0,0,1,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2794,      double rb = r - ra;,0,1,1,0,0,0,0,0,0,14,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2796,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,22,9,0,1,2,0,0,0,0,32,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2797,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,10,3,0,0,0,0,0,0,0,15,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2799,      temp = ra + rb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2800,      rb = -(temp - ra - rb);,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2801,      ra = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2803,"      return atan(ra, rb, false);",2,0,1,1,2,2,6,0,0,12,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2811,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2812,          return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2815,      if (x > 1.0 || x < -1.0) {,4,3,0,1,3,0,0,0,0,8,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2816,          return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2819,      if (x == -1.0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2820,          return Math.PI;,4,0,0,0,0,1,6,0,0,10,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2823,      if (x == 1.0) {,2,0,0,1,3,1,4,0,0,7,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2824,          return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2827,      if (x == 0) {,16,3,0,1,3,0,0,0,0,20,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2828,          return Math.PI/2.0;,0,0,0,0,0,1,0,0,0,1,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2834,      double temp = x * 1073741824.0;,4,1,0,0,0,0,0,0,0,5,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2835,      final double xa = x + temp - temp;,8,2,0,0,0,1,0,0,0,11,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2836,      final double xb = x - xa;,6,1,0,0,0,1,0,0,0,8,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2839,      double ya = xa*xa;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2840,      double yb = xa*xb*2.0 + xb*xb;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2843,      ya = -ya;,4,0,0,0,0,0,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2844,      yb = -yb;,4,0,0,0,0,0,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2846,      double za = 1.0 + ya;,6,1,0,0,0,0,0,0,0,8,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2847,      double zb = -(za - 1.0 - ya);,4,2,0,1,2,0,0,0,0,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2849,      temp = za + yb;,8,1,0,0,0,0,0,0,0,11,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2850,      zb += -(temp - za - yb);,0,0,0,1,2,0,0,2,0,2,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2851,      za = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2854,      double y = sqrt(za);,2,0,0,1,2,0,4,0,0,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2855,      temp = y * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2856,      ya = y + temp - temp;,8,2,0,0,0,0,0,0,0,11,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2857,      yb = y - ya;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2860,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0,0,0,2,4,0,0,0,0,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2863,      yb += zb / (2.0*y);,10,2,0,1,2,0,0,0,0,14,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2864,      y = ya+yb;,2,0,0,0,0,1,6,0,0,9,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2865,      yb = -(y - ya - yb);,8,1,0,1,2,0,0,0,0,11,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2868,      double r = y/x;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2869,      temp = r * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2870,      double ra = r + temp - temp;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2871,      double rb = r - ra;,10,3,0,0,0,0,0,0,0,14,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2873,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,24,9,0,1,2,0,6,0,0,40,83,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2874,      rb += yb / x;  // Add in effect additional bits of sqrt.,0,0,0,0,0,0,0,0,0,0,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2876,      temp = ra + rb;,12,2,0,0,0,0,0,0,0,16,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2877,      rb = -(temp - ra - rb);,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2878,      ra = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2880,"      return atan(ra, rb, x<0);",0,0,0,1,2,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2889,      long inbits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,41,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2890,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,4,3,0,3,6,0,0,0,0,7,53,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2891,      boolean subnormal = false;,2,0,0,0,0,0,0,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2893,      if (exponent == -1023) {,2,1,0,1,3,0,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2894,          if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2895,              return x;,2,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2899,          subnormal = true;,2,0,0,0,0,0,0,0,0,4,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2900,          x *= 1.8014398509481984E16;  // 2^54,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2901,          inbits = Double.doubleToLongBits(x);,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2902,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,4,3,0,3,6,0,0,0,0,8,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2905,      if (exponent == 1024) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2907,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2911,      int exp3 = exponent / 3;,8,2,0,0,0,0,0,0,0,11,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2914,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) | ,0,0,0,1,3,0,0,0,0,4,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2918,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,6,2,0,2,4,1,4,0,0,13,98,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2921,      double est = -0.010714690733195933;,14,4,0,0,0,0,0,0,0,20,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2922,      est = est * mant + 0.0875862700108075;,10,3,0,0,0,0,0,0,0,14,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2923,      est = est * mant + -0.3058015757857271;,6,2,0,0,0,0,0,0,0,10,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2924,      est = est * mant + 0.7249995199969751;,14,5,0,0,0,0,0,0,0,20,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2925,      est = est * mant + 0.5039018405998233;,6,2,0,0,0,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2927,      est *= CBRTTWO[exponent % 3 + 2];,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2932,      final double xs = x / (p2*p2*p2); ,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2933,      est += (xs - est*est*est) / (3*est*est);,14,4,0,2,4,0,0,0,0,19,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2934,      est += (xs - est*est*est) / (3*est*est);,14,4,0,2,4,0,0,0,0,19,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2937,      double temp = est * 1073741824.0;,6,2,1,0,0,1,0,0,0,12,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2938,      double ya = est + temp - temp;,8,3,0,0,0,0,0,0,0,12,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2939,      double yb = est - ya;,14,2,0,0,0,0,0,0,0,18,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2941,      double za = ya * ya;,2,0,0,0,0,0,0,2,0,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2942,      double zb = ya * yb * 2.0 + yb * yb;,10,3,0,0,0,0,0,0,0,14,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2943,      temp = za * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2944,      double temp2 = za + temp - temp;,8,2,0,0,0,0,0,0,0,10,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2945,      zb += (za - temp2);,4,2,0,1,2,0,0,0,0,6,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2946,      za = temp2;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2948,      zb = za * yb + ya * zb + zb * yb;,14,5,0,0,0,0,0,0,0,20,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2949,      za = za * ya;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2951,      double na = xs - za;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2952,      double nb = -(na - xs + za);,8,2,0,1,2,0,0,0,0,11,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2953,      nb -= zb;,4,0,0,0,0,0,0,0,0,5,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2955,      est += (na+nb)/(3*est*est);,10,3,0,2,4,0,0,0,0,14,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2958,      est *= p2;,10,1,0,0,0,0,0,0,0,13,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2960,      if (subnormal) {,4,1,0,1,3,0,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2961,          est *= 3.814697265625E-6;  // 2^-18,2,0,0,0,0,0,0,0,0,3,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2964,      return est;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2974,        final double facta = 0.01745329052209854;,0,0,0,0,0,0,0,0,0,0,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2975,        final double factb = 1.997844754509471E-9;,0,0,0,0,0,0,0,0,0,1,42,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2977,        double temp = x * 1073741824.0;,4,1,0,0,0,0,0,0,0,5,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2978,        double xa = x + temp - temp;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2979,        double xb = x - xa;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2981,        return xb * factb + xb * facta + xa * factb + xa * facta;,16,7,0,0,0,1,0,0,0,23,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2991,        final double facta = 57.2957763671875;,2,0,0,0,0,1,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2992,        final double factb = 3.145894820876798E-6;,4,1,0,0,0,1,0,0,0,6,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2994,        double temp = x * 1073741824.0;,6,2,0,0,0,0,0,0,0,9,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2995,        double xa = x + temp - temp;,8,2,0,0,0,0,0,0,0,10,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2996,        double xb = x - xa;,6,1,0,0,0,0,0,0,0,7,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2998,        return xb * factb + xb * facta + xa * factb + xa * facta;,16,7,0,0,0,1,0,0,0,23,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3007,        return (x < 0) ? -x : x;,6,1,0,1,2,1,0,0,0,8,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3016,        return (x < 0l) ? -x : x;,0,0,0,1,2,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3025,        return (x < 0.0f) ? -x : x;,6,1,0,1,2,1,0,0,0,8,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3034,        return (x < 0.0) ? -x : x;,6,1,0,1,2,1,0,0,0,8,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3044,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,6,1,0,3,6,1,0,0,0,8,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3066,        if (Double.isNaN(d) || Double.isInfinite(d)) {,0,1,0,3,7,0,12,0,0,13,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3067,            return d;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3068,        } else if (d == 0) {,2,1,0,1,4,0,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3069,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,0,0,0,1,2,1,0,0,0,4,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3075,        long bits     = Double.doubleToLongBits(d);,2,0,1,1,2,0,0,0,0,5,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3076,        long sign     = bits & 0x8000000000000000L;,4,1,0,0,0,0,0,0,0,5,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3077,        long exponent = bits & 0x7ff0000000000000L;,0,0,0,0,0,0,0,0,0,0,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3078,        long mantissa = bits & 0x000fffffffffffffL;,0,0,0,0,0,0,0,0,0,0,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3080,        if (d * (direction - d) >= 0) {,0,0,0,2,5,0,0,0,0,7,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3082,            if (mantissa == 0x000fffffffffffffL) {,4,2,0,1,3,0,0,0,0,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3083,                return Double.longBitsToDouble(sign |,2,1,0,0,1,1,4,0,0,7,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3086,                return Double.longBitsToDouble(sign |,10,2,0,0,1,1,0,0,0,13,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3091,            if (mantissa == 0L) {,2,1,0,1,3,0,0,0,0,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3092,                return Double.longBitsToDouble(sign |,6,3,0,0,1,1,4,0,0,13,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3096,                return Double.longBitsToDouble(sign |,8,2,1,0,1,1,4,0,0,18,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3110,        if (x != x) { // NaN,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3111,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3114,        if (x >= 4503599627370496.0 || x <= -4503599627370496.0) {,2,1,0,1,3,0,0,0,0,3,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3115,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3118,        y = (long) x;,14,2,0,1,2,1,0,0,0,19,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3119,        if (x < 0 && y != x) {,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3120,            y--;,2,0,0,0,0,0,0,0,0,3,4,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3123,        if (y == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3124,            return x*y;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3127,        return (double) y;,2,0,0,1,2,1,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3137,        if (x != x) { // NaN,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3138,            return x;,12,1,0,0,0,1,0,0,0,14,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3141,        y = floor(x);,2,0,0,1,2,0,4,0,0,7,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3142,        if (y == x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3143,            return y;,4,0,0,0,0,1,0,0,0,5,9,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3146,        y += 1.0;,2,0,0,0,0,0,0,0,0,3,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3148,        if (y == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3149,            return x*y;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3152,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3160,        double y = floor(x);,8,1,0,1,2,0,4,0,0,15,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3161,        double d = x - y;,6,1,0,0,0,0,0,0,0,7,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3163,        if (d > 0.5) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3164,            return y+1.0;,2,1,0,0,0,1,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3166,        if (d < 0.5) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3167,            return y;,10,3,0,0,0,1,0,0,0,13,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3171,        long z = (long) y;,16,3,0,1,2,0,10,0,0,30,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3172,        return (z & 1) == 0 ? y : y + 1.0;,6,3,0,1,2,1,0,0,0,9,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3180,        return (long) floor(x + 0.5);,2,1,0,2,4,1,2,0,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3188,        return Math.round(x);,4,2,0,1,2,1,6,0,0,12,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3197,        return (a <= b) ? a : b;,8,1,0,1,2,1,0,0,0,9,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3206,        return (a <= b) ? a : b;,18,3,1,1,2,1,4,2,0,31,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3215,        return (a <= b) ? a : (Float.isNaN(a + b) ? Float.NaN : b);,0,0,0,3,6,1,0,0,0,10,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3224,        return (a <= b) ? a : (Double.isNaN(a + b) ? Double.NaN : b);,4,0,0,3,6,1,0,0,0,4,61,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3233,        return (a <= b) ? b : a;,8,1,0,1,2,1,0,0,0,9,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3242,        return (a <= b) ? b : a;,0,0,0,1,2,1,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3251,        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);,24,5,0,3,6,2,12,0,0,42,59,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3260,        return (a <= b) ? b : (Double.isNaN(a + b) ? Double.NaN : a);,16,2,1,3,6,1,8,0,0,30,61,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,71,        return cumulativeProbability((int) FastMath.floor(x));,16,3,0,3,6,2,12,0,0,33,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,90,        if (x0 > x1) {,4,1,0,1,3,0,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,91,            throw MathRuntimeException.createIllegalArgumentException(,2,0,0,0,1,1,4,0,0,7,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,94,        if (FastMath.floor(x0) < x0) {,2,1,0,2,5,0,6,0,0,9,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,95,"            return cumulativeProbability(((int) FastMath.floor(x0)) + 1,",0,1,0,3,7,1,8,0,0,9,60,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,98,"            return cumulativeProbability((int) FastMath.floor(x0),",0,0,0,2,5,1,8,0,0,8,54,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,127,        double fl = FastMath.floor(x);,2,0,0,1,2,0,6,0,0,8,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,128,        if (fl == x) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,129,            return this.probability((int) x);,2,0,0,2,4,1,2,0,0,4,33,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,131,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,147,        if (x0 > x1) {,4,1,0,1,3,0,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,148,            throw MathRuntimeException.createIllegalArgumentException(,6,1,0,0,1,1,4,0,0,12,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,151,        return cumulativeProbability(x1) - cumulativeProbability(x0 - 1);,4,2,0,2,4,1,0,0,0,6,65,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,166,        if (p < 0.0 || p > 1.0) {,4,3,0,1,3,0,0,0,0,7,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,167,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,0,4,0,0,4,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,173,        int x0 = getDomainLowerBound(p);,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,174,        int x1 = getDomainUpperBound(p);,2,0,0,1,2,0,4,0,0,6,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,176,        while (x0 < x1) {,4,1,0,1,3,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,177,            int xm = x0 + (x1 - x0) / 2;,8,3,0,1,2,0,0,0,0,11,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,178,            pm = checkedCumulativeProbability(xm);,2,0,0,1,2,0,4,0,0,7,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,179,            if (pm > p) {,4,1,0,1,3,0,0,0,0,5,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,181,                if (xm == x1) {,4,1,0,1,3,0,0,0,0,5,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,184,                    --x1;,2,0,0,0,0,0,0,0,0,3,5,10,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,187,                    x1 = xm;,4,0,0,0,0,0,0,0,0,5,8,10,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,191,                if (xm == x0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,194,                    ++x0;,2,0,0,0,0,0,0,0,0,3,5,10,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,197,                    x0 = xm;,10,1,0,0,0,0,0,0,0,12,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,200,        },10,1,0,0,1,0,0,0,0,11,1,11,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,203,        pm = checkedCumulativeProbability(x0);,2,0,0,1,2,0,4,0,0,7,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,204,        while (pm > p) {,4,1,0,1,3,0,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,205,            --x0;,0,0,0,0,0,0,0,0,0,0,5,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,206,            pm = checkedCumulativeProbability(x0);,2,0,0,1,2,0,4,0,0,7,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,209,        return x0;,2,0,0,0,0,1,0,0,0,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,219,        randomData.reSeed(seed);,2,0,0,1,2,1,10,2,0,15,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,220,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,232,        return randomData.nextInversionDeviate(this);,0,0,0,1,2,1,4,0,0,4,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,246,        if (sampleSize <= 0) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,247,"            MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_SAMPLE_SIZE, sampleSize);",4,0,0,1,2,0,6,0,0,10,107,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,249,        int[] out = new int[sampleSize];,2,0,1,2,4,0,0,0,0,4,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,250,        for (int i = 0; i < sampleSize; i++) {,8,1,0,1,3,0,6,0,0,16,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,251,            out[i] = sample();,0,0,0,2,4,0,0,0,0,6,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,253,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,267,        double result = Double.NaN;,6,0,0,0,0,0,0,0,0,6,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,269,            result = cumulativeProbability(argument);,2,0,0,1,2,0,4,0,0,7,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,272,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,270,        } catch (MathException ex) {,2,0,0,1,4,0,0,2,0,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,271,"            throw new FunctionEvaluationException(ex, argument, ex.getLocalizablePattern(), ex.getArguments());",4,0,0,3,6,0,8,2,0,14,99,8,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,273,        if (Double.isNaN(result)) {,0,0,0,2,5,0,6,0,0,6,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,274,"            throw new FunctionEvaluationException(argument,",0,0,0,0,1,0,0,0,0,1,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,277,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,61,62,        if (x0 > x1) {,6,1,0,1,3,0,0,0,0,7,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,61,63,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,0,4,0,0,4,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,61,67,        return cumulativeProbability(x1) - cumulativeProbability(x0);,0,0,0,2,4,1,0,0,0,7,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,73,"        throw new MathRuntimeException(new UnsupportedOperationException(),",4,0,0,1,3,0,0,4,0,9,67,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,90,        if (p < 0.0 || p > 1.0) {,4,3,0,1,3,0,0,0,0,7,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,91,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,0,0,0,0,1,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,97,        UnivariateRealFunction rootFindingFunction =,2,0,0,0,0,0,0,2,0,4,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,115,        double lowerBound = getDomainLowerBound(p);,2,0,0,1,2,0,4,0,0,6,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,116,        double upperBound = getDomainUpperBound(p);,2,0,0,1,2,0,4,0,0,6,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,117,        double[] bracket = null;,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,119,            bracket = UnivariateRealSolverUtils.bracket(,4,0,0,0,1,0,4,2,0,12,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,136,        },0,0,0,0,1,0,6,0,0,6,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,122,        }  catch (ConvergenceException ex) {,4,0,0,1,4,0,0,2,0,6,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,128,            if (FastMath.abs(rootFindingFunction.value(lowerBound)) < getSolverAbsoluteAccuracy()) {,0,0,0,4,9,0,6,0,0,6,88,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,129,                return lowerBound;,6,0,0,0,0,1,0,0,0,6,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,131,            if (FastMath.abs(rootFindingFunction.value(upperBound)) < getSolverAbsoluteAccuracy()) {,0,1,0,4,9,0,12,0,0,13,88,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,132,                return upperBound;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,135,            throw new MathException(ex);,2,0,0,1,2,0,0,2,0,4,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,139,"        double root = UnivariateRealSolverUtils.solve(rootFindingFunction,",2,0,0,0,1,0,6,0,0,9,66,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,143,        return root;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,153,        randomData.reSeed(seed);,4,0,0,1,2,0,0,0,0,4,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,154,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,166,        return randomData.nextInversionDeviate(this);,8,2,0,1,2,2,0,0,0,11,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,180,        if (sampleSize <= 0) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,181,"            MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_SAMPLE_SIZE, sampleSize);",0,0,0,1,2,0,0,0,0,3,107,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,183,        double[] out = new double[sampleSize];,4,0,1,2,4,0,0,0,0,7,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,184,        for (int i = 0; i < sampleSize; i++) {,8,1,0,1,3,0,0,0,0,10,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,185,            out[i] = sample();,0,0,1,2,4,0,2,0,0,7,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,187,        return out;,10,1,0,0,0,1,0,0,0,12,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,229,        return solverAbsoluteAccuracy;,2,0,0,0,0,1,0,0,0,2,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,89,"        this(0.0, 1.0);",6,2,0,1,2,0,0,0,0,9,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,90,    },4,0,0,0,1,0,2,0,0,6,1,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,97,        return mean;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,107,        setMeanInternal(mean);,0,0,0,1,2,0,4,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,108,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,122,        return standardDeviation;,8,1,0,0,0,1,0,0,0,9,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,133,        setStandardDeviationInternal(sd);,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,134,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,142,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,0,8,0,0,8,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,157,        return density(x.doubleValue());,0,0,0,2,4,1,0,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,168,        double x0 = x - mean;,16,2,1,0,0,0,0,0,0,23,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,169,        return FastMath.exp(-x0 * x0 / (2 * standardDeviation * standardDeviation)) / (standardDeviation * SQRT2PI);,0,0,0,3,6,1,0,0,0,10,108,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,182,            return 0.5 * (1.0 + Erf.erf((x - mean) /,4,4,0,1,4,1,4,0,0,12,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,184,        } catch (MaxIterationsExceededException ex) {,0,0,0,1,4,0,0,0,0,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,185,            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38,2,0,0,2,5,1,0,0,0,3,65,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,186,                return 0.0d;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,187,            } else if (x > (mean + 20 * standardDeviation)) {,18,8,0,2,6,0,4,0,0,30,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,188,                return 1.0d;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,190,                throw ex;,2,0,0,0,0,0,0,0,0,2,9,10,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,204,        return solverAbsoluteAccuracy;,2,0,0,0,0,1,0,0,0,2,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,224,        if (p == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,225,            return Double.NEGATIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,227,        if (p == 1) {,4,1,1,1,3,1,0,0,0,10,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,228,            return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,230,        return super.inverseCumulativeProbability(p);,8,0,0,1,2,1,0,0,0,9,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,242,"        return randomData.nextGaussian(mean, standardDeviation);",0,0,0,1,2,1,0,0,0,4,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,258,        if (p < .5) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,259,            ret = -Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,8,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,261,            ret = mean;,8,2,1,0,0,0,0,0,0,19,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,264,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,280,        if (p < .5) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,281,            ret = mean;,4,1,0,0,0,0,16,0,0,22,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,283,            ret = Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,7,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,286,        return ret;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,301,        if (p < .5) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,302,            ret = mean - standardDeviation;,10,3,0,0,0,1,0,0,0,15,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,303,        } else if (p > .5) {,0,0,0,1,4,0,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,304,            ret = mean + standardDeviation;,6,1,0,0,0,0,0,0,0,8,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,306,            ret = mean;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,309,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,35,public class NormalDistributionImpl extends AbstractContinuousDistribution,2,0,0,0,0,1,0,2,0,5,74,1,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,98,            new UnivariateRealFunction() {,0,0,0,1,3,0,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,100,                double ret = Double.NaN;,10,1,1,0,0,0,0,0,0,15,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,102,                    ret = cumulativeProbability(x) - p;,4,1,0,1,2,0,4,0,0,10,35,12,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,105,                },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,103,                } catch (MathException ex) {,2,0,0,1,4,0,0,2,0,4,28,12,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,104,"                    throw new FunctionEvaluationException(ex, x, ex.getLocalizablePattern(), ex.getArguments());",4,0,0,3,6,0,8,2,0,14,92,14,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,106,                if (Double.isNaN(ret)) {,0,0,0,2,5,0,6,0,0,6,24,11,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,107,"                    throw new FunctionEvaluationException(x,",2,0,0,0,1,0,0,2,0,4,40,13,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,110,                return ret;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,47,"        super(LocalizedFormats.EVALUATION_FAILED, argument);",10,0,0,1,2,0,0,0,0,11,52,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,48,        this.argument = new double[] { argument };,4,0,0,2,4,0,0,0,0,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,49,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,59,"        super(LocalizedFormats.EVALUATION_FAILED, new ArrayRealVector(argument));",6,0,0,2,4,0,0,2,0,8,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,60,        this.argument = argument.clone();,2,0,0,1,2,0,4,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,61,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,73,"        this(argument, new DummyLocalizable(pattern), arguments);",8,0,0,2,4,0,0,2,0,10,57,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,74,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,86,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,87,        this.argument = new double[] { argument };,4,0,0,2,4,0,0,0,0,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,88,    },12,4,0,0,1,0,4,0,0,21,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,100,"        this(argument, new DummyLocalizable(pattern), arguments);",12,1,0,2,4,1,0,2,0,16,57,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,101,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,113,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,114,        this.argument = argument.clone();,2,0,0,1,2,0,4,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,115,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,125,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,126,        this.argument = new double[] { argument };,6,1,0,2,4,0,0,0,0,7,42,5,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,127,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,137,        super(cause);,2,1,0,1,2,0,0,0,0,4,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,138,        this.argument = argument.clone();,2,0,0,1,2,0,4,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,139,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,153,"        this(cause, argument, new DummyLocalizable(pattern), arguments);",10,1,0,2,4,0,0,2,0,13,64,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,154,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,168,"        super(cause, pattern, arguments);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,169,        this.argument = new double[] { argument };,4,0,0,2,4,0,0,0,0,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,170,    },2,0,0,0,1,0,0,0,0,3,1,12,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,184,"        this(cause, argument, new DummyLocalizable(pattern), arguments);",8,0,0,2,4,0,0,2,0,10,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,185,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,199,"        super(cause, pattern, arguments);",12,1,0,1,2,0,0,0,0,13,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,200,        this.argument = argument.clone();,2,0,0,1,2,0,4,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,201,    },2,0,0,0,1,1,2,0,0,5,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,209,        return argument.clone();,0,0,0,1,2,1,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,94,"            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN, p);",0,0,0,1,2,0,0,0,0,3,105,4,0.0,1,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,110,"        this(p, epsilon, DEFAULT_MAX_ITERATIONS);",6,0,0,1,2,0,0,0,0,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,111,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,121,"        this(p, DEFAULT_EPSILON, maxIterations);",0,0,0,1,2,0,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,122,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,130,        return mean;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,142,        if (x < 0 || x == Integer.MAX_VALUE) {,8,3,0,1,3,0,0,0,0,11,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,143,            ret = 0.0;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,144,        } else if (x == 0) {,2,1,0,1,4,0,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,145,            ret = FastMath.exp(-mean);,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,147,            ret = FastMath.exp(-SaddlePointExpansion.getStirlingError(x) -,8,1,0,1,3,0,10,2,0,23,62,4,0.0,0,0
