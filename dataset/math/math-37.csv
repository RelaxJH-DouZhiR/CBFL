project_path,version,lines,statement,suspicious,faulty,predict,miss_line
org/apache/commons/math/util/FastMath,37,393,          return exp(x)/2.0;,4.0,0,,0
org/apache/commons/math/util/FastMath,37,453,          return exp(x)/2.0;,4.0,0,,0
org/apache/commons/math/complex/Complex,37,1178,        if (Double.isNaN(realPart) ||,2.0,1,,1
org/apache/commons/math/complex/Complex,37,1182,"        return new Complex(realPart, imaginaryPart);",2.0,1,,1
org/apache/commons/math/util/FastMath,37,867,                if (hiPrec != null) {,1.77778,0,,0
org/apache/commons/math/util/FastMath,37,871,                return Double.POSITIVE_INFINITY;,1.77778,0,,0
org/apache/commons/math/util/FastMath,37,383,      if (x != x) {,1.6,0,,0
org/apache/commons/math/util/FastMath,37,392,      if (x > 20.0) {,1.6,0,,0
org/apache/commons/math/util/FastMath,37,442,      boolean negate = false;,1.6,0,,0
org/apache/commons/math/util/FastMath,37,443,      if (x != x) {,1.6,0,,0
org/apache/commons/math/util/FastMath,37,452,      if (x > 20.0) {,1.6,0,,0
org/apache/commons/math/complex/Complex,37,1022,        double real2 = 2.0 * real;,1.33333,0,,0
org/apache/commons/math/complex/Complex,37,1023,        double imaginary2 = 2.0 * imaginary;,1.33333,0,,0
org/apache/commons/math/complex/Complex,37,1024,        double d = FastMath.cos(real2) + FastMath.cosh(imaginary2);,1.33333,0,,0
org/apache/commons/math/complex/Complex,37,1026,"        return createComplex(FastMath.sin(real2) / d,",1.33333,0,,0
org/apache/commons/math/complex/Complex,37,1066,        double real2 = 2.0 * real;,1.33333,0,,0
org/apache/commons/math/complex/Complex,37,1067,        double imaginary2 = 2.0 * imaginary;,1.33333,0,,0
org/apache/commons/math/complex/Complex,37,1068,        double d = FastMath.cosh(real2) + FastMath.cos(imaginary2);,1.33333,0,,0
org/apache/commons/math/complex/Complex,37,1070,"        return createComplex(FastMath.sinh(real2) / d,",1.33333,0,,0
org/apache/commons/math/util/FastMath,37,807,"        return exp(x, 0.0, null);",1.23077,0,,0
org/apache/commons/math/util/FastMath,37,464,      if (x < 0.0) {,1.0,0,,0
org/apache/commons/math/util/FastMath,37,471,      if (x > 0.25) {,1.0,0,,0
org/apache/commons/math/util/FastMath,37,472,          double hiPrec[] = new double[2];,1.0,0,,0
org/apache/commons/math/util/FastMath,37,473,"          exp(x, 0.0, hiPrec);",1.0,0,,0
org/apache/commons/math/util/FastMath,37,475,          double ya = hiPrec[0] + hiPrec[1];,1.0,0,,0
org/apache/commons/math/util/FastMath,37,476,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,1.0,0,,0
org/apache/commons/math/util/FastMath,37,478,          double temp = ya * HEX_40000000;,1.0,0,,0
org/apache/commons/math/util/FastMath,37,479,          double yaa = ya + temp - temp;,1.0,0,,0
org/apache/commons/math/util/FastMath,37,480,          double yab = ya - yaa;,1.0,0,,0
org/apache/commons/math/util/FastMath,37,483,          double recip = 1.0/ya;,1.0,0,,0
org/apache/commons/math/util/FastMath,37,484,          temp = recip * HEX_40000000;,1.0,0,,0
org/apache/commons/math/util/FastMath,37,485,          double recipa = recip + temp - temp;,1.0,0,,0
org/apache/commons/math/util/FastMath,37,486,          double recipb = recip - recipa;,1.0,0,,0
org/apache/commons/math/util/FastMath,37,489,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,1.0,0,,0
org/apache/commons/math/util/FastMath,37,491,          recipb += -yb * recip * recip;,1.0,0,,0
org/apache/commons/math/util/FastMath,37,493,          recipa = -recipa;,1.0,0,,0
org/apache/commons/math/util/FastMath,37,494,          recipb = -recipb;,1.0,0,,0
org/apache/commons/math/util/FastMath,37,497,          temp = ya + recipa;,1.0,0,,0
org/apache/commons/math/util/FastMath,37,498,          yb += -(temp - ya - recipa);,1.0,0,,0
org/apache/commons/math/util/FastMath,37,499,          ya = temp;,1.0,0,,0
org/apache/commons/math/util/FastMath,37,500,          temp = ya + recipb;,1.0,0,,0
org/apache/commons/math/util/FastMath,37,501,          yb += -(temp - ya - recipb);,1.0,0,,0
org/apache/commons/math/util/FastMath,37,502,          ya = temp;,1.0,0,,0
org/apache/commons/math/util/FastMath,37,504,          result = ya + yb;,1.0,0,,0
org/apache/commons/math/util/FastMath,37,505,          result *= 0.5;,1.0,0,,0
org/apache/commons/math/util/FastMath,37,506,      },1.0,0,,0
org/apache/commons/math/util/FastMath,37,545,      if (negate) {,1.0,0,,0
org/apache/commons/math/util/FastMath,37,549,      return result;,1.0,0,,0
org/apache/commons/math/complex/Complex,37,1018,        if (isNaN) {,1.0,1,,0
org/apache/commons/math/complex/Complex,37,1063,        if (isNaN) {,1.0,1,,0
org/apache/commons/math/util/FastMath,37,396,      if (x < -20) {,0.81818,0,,0
org/apache/commons/math/util/FastMath,37,400,      double hiPrec[] = new double[2];,0.81818,0,,0
org/apache/commons/math/util/FastMath,37,401,      if (x < 0.0) {,0.81818,0,,0
org/apache/commons/math/util/FastMath,37,404,"      exp(x, 0.0, hiPrec);",0.81818,0,,0
org/apache/commons/math/util/FastMath,37,406,      double ya = hiPrec[0] + hiPrec[1];,0.81818,0,,0
org/apache/commons/math/util/FastMath,37,407,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.81818,0,,0
org/apache/commons/math/util/FastMath,37,409,      double temp = ya * HEX_40000000;,0.81818,0,,0
org/apache/commons/math/util/FastMath,37,410,      double yaa = ya + temp - temp;,0.81818,0,,0
org/apache/commons/math/util/FastMath,37,411,      double yab = ya - yaa;,0.81818,0,,0
org/apache/commons/math/util/FastMath,37,414,      double recip = 1.0/ya;,0.81818,0,,0
org/apache/commons/math/util/FastMath,37,415,      temp = recip * HEX_40000000;,0.81818,0,,0
org/apache/commons/math/util/FastMath,37,416,      double recipa = recip + temp - temp;,0.81818,0,,0
org/apache/commons/math/util/FastMath,37,417,      double recipb = recip - recipa;,0.81818,0,,0
org/apache/commons/math/util/FastMath,37,420,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0.81818,0,,0
org/apache/commons/math/util/FastMath,37,422,      recipb += -yb * recip * recip;,0.81818,0,,0
org/apache/commons/math/util/FastMath,37,425,      temp = ya + recipa;,0.81818,0,,0
org/apache/commons/math/util/FastMath,37,426,      yb += -(temp - ya - recipa);,0.81818,0,,0
org/apache/commons/math/util/FastMath,37,427,      ya = temp;,0.81818,0,,0
org/apache/commons/math/util/FastMath,37,428,      temp = ya + recipb;,0.81818,0,,0
org/apache/commons/math/util/FastMath,37,429,      yb += -(temp - ya - recipb);,0.81818,0,,0
org/apache/commons/math/util/FastMath,37,430,      ya = temp;,0.81818,0,,0
org/apache/commons/math/util/FastMath,37,432,      double result = ya + yb;,0.81818,0,,0
org/apache/commons/math/util/FastMath,37,433,      result *= 0.5;,0.81818,0,,0
org/apache/commons/math/util/FastMath,37,434,      return result;,0.81818,0,,0
org/apache/commons/math/util/FastMath,37,456,      if (x < -20) {,0.81818,0,,0
org/apache/commons/math/util/FastMath,37,460,      if (x == 0) {,0.81818,0,,0
org/apache/commons/math/util/FastMath,37,927,            hiPrec[0] = tempA;,0.81818,0,,0
org/apache/commons/math/util/FastMath,37,928,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,0.81818,0,,0
org/apache/commons/math/util/FastMath,37,826,        if (x < 0.0) {,0.69565,0,,0
org/apache/commons/math/util/FastMath,37,864,            intVal = (int) x;,0.69565,0,,0
org/apache/commons/math/util/FastMath,37,866,            if (intVal > 709) {,0.69565,0,,0
org/apache/commons/math/util/FastMath,37,922,            result = tempC*z + tempB + tempA;,0.5,0,,0
org/apache/commons/math/util/FastMath,37,3754,    private static class ExpFracTable {,0.40909,0,,0
org/apache/commons/math/util/FastMath,37,3766,            if (RECOMPUTE_TABLES_AT_RUNTIME) {,0.40909,0,,0
org/apache/commons/math/util/FastMath,37,3784,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,0.40909,0,,0
org/apache/commons/math/util/FastMath,37,3785,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,0.40909,0,,0
org/apache/commons/math/util/FastMath,37,3787,        },0.40909,0,,0
org/apache/commons/math/util/FastMathLiteralArrays,37,6142,        return EXP_INT_A.clone();,0.40909,0,,0
org/apache/commons/math/util/FastMathLiteralArrays,37,6150,        return EXP_INT_B.clone();,0.40909,0,,0
org/apache/commons/math/util/FastMathLiteralArrays,37,6158,        return EXP_FRAC_A.clone();,0.40909,0,,0
org/apache/commons/math/util/FastMathLiteralArrays,37,6166,        return EXP_FRAC_B.clone();,0.40909,0,,0
org/apache/commons/math/util/FastMath,37,874,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,0.40909,0,,0
org/apache/commons/math/util/FastMath,37,875,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,0.40909,0,,0
org/apache/commons/math/util/FastMath,37,882,        final int intFrac = (int) ((x - intVal) * 1024.0);,0.40909,0,,0
org/apache/commons/math/util/FastMath,37,883,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,0.40909,0,,0
org/apache/commons/math/util/FastMath,37,884,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0.40909,0,,0
org/apache/commons/math/util/FastMath,37,890,        final double epsilon = x - (intVal + intFrac / 1024.0);,0.40909,0,,0
org/apache/commons/math/util/FastMath,37,899,        double z = 0.04168701738764507;,0.40909,0,,0
org/apache/commons/math/util/FastMath,37,900,        z = z * epsilon + 0.1666666505023083;,0.40909,0,,0
org/apache/commons/math/util/FastMath,37,901,        z = z * epsilon + 0.5000000000042687;,0.40909,0,,0
org/apache/commons/math/util/FastMath,37,902,        z = z * epsilon + 1.0;,0.40909,0,,0
org/apache/commons/math/util/FastMath,37,903,        z = z * epsilon + -3.940510424527919E-20;,0.40909,0,,0
org/apache/commons/math/util/FastMath,37,910,        double tempA = intPartA * fracPartA;,0.40909,0,,0
org/apache/commons/math/util/FastMath,37,911,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,0.40909,0,,0
org/apache/commons/math/util/FastMath,37,917,        final double tempC = tempB + tempA;,0.40909,0,,0
org/apache/commons/math/util/FastMath,37,919,        if (extra != 0.0) {,0.40909,0,,0
org/apache/commons/math/util/FastMath,37,925,        if (hiPrec != null) {,0.40909,0,,0
org/apache/commons/math/util/FastMath,37,931,        return result;,0.40909,0,,0
org/apache/commons/math/util/FastMath,37,3711,    private static class ExpIntTable {,0.40909,0,,0
org/apache/commons/math/util/FastMath,37,3722,            if (RECOMPUTE_TABLES_AT_RUNTIME) {,0.40909,0,,0
org/apache/commons/math/util/FastMath,37,3747,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,0.40909,0,,0
org/apache/commons/math/util/FastMath,37,3748,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,0.40909,0,,0
org/apache/commons/math/util/FastMath,37,3750,        },0.40909,0,,0
org/apache/commons/math/util/FastMath,37,2261,            int k = (int)(xa * 0.6366197723675814);,0.34783,0,,0
org/apache/commons/math/util/FastMath,37,2267,                double a = -k * 1.570796251296997;,0.34783,0,,0
org/apache/commons/math/util/FastMath,37,2268,                remA = xa + a;,0.34783,0,,0
org/apache/commons/math/util/FastMath,37,2269,                remB = -(remA - xa - a);,0.34783,0,,0
org/apache/commons/math/util/FastMath,37,2271,                a = -k * 7.549789948768648E-8;,0.34783,0,,0
org/apache/commons/math/util/FastMath,37,2272,                double b = remA;,0.34783,0,,0
org/apache/commons/math/util/FastMath,37,2273,                remA = a + b;,0.34783,0,,0
org/apache/commons/math/util/FastMath,37,2274,                remB += -(remA - b - a);,0.34783,0,,0
org/apache/commons/math/util/FastMath,37,2276,                a = -k * 6.123233995736766E-17;,0.34783,0,,0
org/apache/commons/math/util/FastMath,37,2277,                b = remA;,0.34783,0,,0
org/apache/commons/math/util/FastMath,37,2278,                remA = a + b;,0.34783,0,,0
org/apache/commons/math/util/FastMath,37,2279,                remB += -(remA - b - a);,0.34783,0,,0
org/apache/commons/math/util/FastMath,37,2281,                if (remA > 0.0) {,0.34783,0,,0
org/apache/commons/math/util/FastMath,37,2282,                    break;,0.34783,0,,0
org/apache/commons/math/util/FastMath,37,2290,            quadrant = k & 3;,0.34783,0,,0
org/apache/commons/math/util/FastMath,37,2291,            xa = remA;,0.34783,0,,0
org/apache/commons/math/util/FastMath,37,2292,            xb = remB;,0.34783,0,,0
org/apache/commons/math/util/FastMathLiteralArrays,37,29,    private static final double[] EXP_INT_A = new double[] {,0.32143,0,,0
org/apache/commons/math/util/FastMathLiteralArrays,37,1535,    private static final double[] EXP_INT_B = new double[] {,0.32143,0,,0
org/apache/commons/math/util/FastMathLiteralArrays,37,3043,    private static final double[] EXP_FRAC_A = new double[] {,0.32143,0,,0
org/apache/commons/math/util/FastMathLiteralArrays,37,4074,    private static final double[] EXP_FRAC_B = new double[] {,0.32143,0,,0
org/apache/commons/math/util/FastMathLiteralArrays,37,5103,    private static final double[][] LN_MANT = new double[][] {,0.32143,0,,0
org/apache/commons/math/util/FastMath,37,80,public class FastMath {,0.32143,0,,0
org/apache/commons/math/util/FastMath,37,2175,            int k = (int)(xa * 0.6366197723675814);,0.25397,0,,0
org/apache/commons/math/util/FastMath,37,2181,                double a = -k * 1.570796251296997;,0.25397,0,,0
org/apache/commons/math/util/FastMath,37,2182,                remA = xa + a;,0.25397,0,,0
org/apache/commons/math/util/FastMath,37,2183,                remB = -(remA - xa - a);,0.25397,0,,0
org/apache/commons/math/util/FastMath,37,2185,                a = -k * 7.549789948768648E-8;,0.25397,0,,0
org/apache/commons/math/util/FastMath,37,2186,                double b = remA;,0.25397,0,,0
org/apache/commons/math/util/FastMath,37,2187,                remA = a + b;,0.25397,0,,0
org/apache/commons/math/util/FastMath,37,2188,                remB += -(remA - b - a);,0.25397,0,,0
org/apache/commons/math/util/FastMath,37,2190,                a = -k * 6.123233995736766E-17;,0.25397,0,,0
org/apache/commons/math/util/FastMath,37,2191,                b = remA;,0.25397,0,,0
org/apache/commons/math/util/FastMath,37,2192,                remA = a + b;,0.25397,0,,0
org/apache/commons/math/util/FastMath,37,2193,                remB += -(remA - b - a);,0.25397,0,,0
org/apache/commons/math/util/FastMath,37,2195,                if (remA > 0.0) {,0.25397,0,,0
org/apache/commons/math/util/FastMath,37,2196,                    break;,0.25397,0,,0
org/apache/commons/math/util/FastMath,37,2204,            quadrant = k & 3;,0.25397,0,,0
org/apache/commons/math/util/FastMath,37,2205,            xa = remA;,0.25397,0,,0
org/apache/commons/math/util/FastMath,37,2206,            xb = remB;,0.25397,0,,0
org/apache/commons/math/util/FastMath,37,2246,        double xb = 0;,0.23529,0,,0
org/apache/commons/math/util/FastMath,37,2247,        if (xa > 3294198.0) {,0.23529,0,,0
org/apache/commons/math/util/FastMath,37,2298,        switch (quadrant) {,0.23529,0,,0
org/apache/commons/math/util/FastMath,37,2233,        int quadrant = 0;,0.22857,0,,0
org/apache/commons/math/util/FastMath,37,2236,        double xa = x;,0.22857,0,,0
org/apache/commons/math/util/FastMath,37,2237,        if (x < 0) {,0.22857,0,,0
org/apache/commons/math/util/FastMath,37,2241,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.22857,0,,0
org/apache/commons/math/util/FastMath,37,2302,"                return -sinQ(xa, xb);",0.20455,0,,0
org/apache/commons/math/util/FastMath,37,1730,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,0.2,0,,0
org/apache/commons/math/util/FastMath,37,1732,            c = a + t;,0.2,0,,0
org/apache/commons/math/util/FastMath,37,1733,            d = -(c - a - t);,0.2,0,,0
org/apache/commons/math/util/FastMath,37,1734,            a = c;,0.2,0,,0
org/apache/commons/math/util/FastMath,37,1735,            b = b + d;,0.2,0,,0
org/apache/commons/math/util/FastMath,37,1751,        final double pi2a = 1.5707963267948966;,0.2,0,,0
org/apache/commons/math/util/FastMath,37,1752,        final double pi2b = 6.123233995736766E-17;,0.2,0,,0
org/apache/commons/math/util/FastMath,37,1754,        final double a = pi2a - xa;,0.2,0,,0
org/apache/commons/math/util/FastMath,37,1755,        double b = -(a - pi2a + xa);,0.2,0,,0
org/apache/commons/math/util/FastMath,37,1756,        b += pi2b - xb;,0.2,0,,0
org/apache/commons/math/util/FastMath,37,1758,"        return sinQ(a, b);",0.2,0,,0
org/apache/commons/math/util/FastMath,37,2161,        if (xa > 3294198.0) {,0.19512,0,,0
org/apache/commons/math/util/FastMath,37,2209,        if (negative) {,0.19512,0,,0
org/apache/commons/math/util/FastMath,37,2213,        switch (quadrant) {,0.19512,0,,0
org/apache/commons/math/util/FastMath,37,1588,        double x2 = x*x;,0.19048,0,,0
org/apache/commons/math/util/FastMath,37,1590,        double p = 2.7553817452272217E-6;,0.19048,0,,0
org/apache/commons/math/util/FastMath,37,1591,        p = p * x2 + -1.9841269659586505E-4;,0.19048,0,,0
org/apache/commons/math/util/FastMath,37,1592,        p = p * x2 + 0.008333333333329196;,0.19048,0,,0
org/apache/commons/math/util/FastMath,37,1593,        p = p * x2 + -0.16666666666666666;,0.19048,0,,0
org/apache/commons/math/util/FastMath,37,1596,        p = p * x2 * x;,0.19048,0,,0
org/apache/commons/math/util/FastMath,37,1598,        return p;,0.19048,0,,0
org/apache/commons/math/util/FastMath,37,1608,        double x2 = x*x;,0.19048,0,,0
org/apache/commons/math/util/FastMath,37,1610,        double p = 2.479773539153719E-5;,0.19048,0,,0
org/apache/commons/math/util/FastMath,37,1611,        p = p * x2 + -0.0013888888689039883;,0.19048,0,,0
org/apache/commons/math/util/FastMath,37,1612,        p = p * x2 + 0.041666666666621166;,0.19048,0,,0
org/apache/commons/math/util/FastMath,37,1613,        p = p * x2 + -0.49999999999999994;,0.19048,0,,0
org/apache/commons/math/util/FastMath,37,1614,        p *= x2;,0.19048,0,,0
org/apache/commons/math/util/FastMath,37,1616,        return p;,0.19048,0,,0
org/apache/commons/math/util/FastMath,37,1627,        int idx = (int) ((xa * 8.0) + 0.5);,0.19048,0,,0
org/apache/commons/math/util/FastMath,37,1628,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0.19048,0,,0
org/apache/commons/math/util/FastMath,37,1631,        final double sintA = SINE_TABLE_A[idx];,0.19048,0,,0
org/apache/commons/math/util/FastMath,37,1632,        final double sintB = SINE_TABLE_B[idx];,0.19048,0,,0
org/apache/commons/math/util/FastMath,37,1633,        final double costA = COSINE_TABLE_A[idx];,0.19048,0,,0
org/apache/commons/math/util/FastMath,37,1634,        final double costB = COSINE_TABLE_B[idx];,0.19048,0,,0
org/apache/commons/math/util/FastMath,37,1637,        double sinEpsA = epsilon;,0.19048,0,,0
org/apache/commons/math/util/FastMath,37,1638,        double sinEpsB = polySine(epsilon);,0.19048,0,,0
org/apache/commons/math/util/FastMath,37,1639,        final double cosEpsA = 1.0;,0.19048,0,,0
org/apache/commons/math/util/FastMath,37,1640,        final double cosEpsB = polyCosine(epsilon);,0.19048,0,,0
org/apache/commons/math/util/FastMath,37,1643,        final double temp = sinEpsA * HEX_40000000;,0.19048,0,,0
org/apache/commons/math/util/FastMath,37,1644,        double temp2 = (sinEpsA + temp) - temp;,0.19048,0,,0
org/apache/commons/math/util/FastMath,37,1645,        sinEpsB +=  sinEpsA - temp2;,0.19048,0,,0
org/apache/commons/math/util/FastMath,37,1646,        sinEpsA = temp2;,0.19048,0,,0
org/apache/commons/math/util/FastMath,37,1672,        double a = 0;,0.19048,0,,0
org/apache/commons/math/util/FastMath,37,1673,        double b = 0;,0.19048,0,,0
org/apache/commons/math/util/FastMath,37,1675,        double t = sintA;,0.19048,0,,0
org/apache/commons/math/util/FastMath,37,1676,        double c = a + t;,0.19048,0,,0
org/apache/commons/math/util/FastMath,37,1677,        double d = -(c - a - t);,0.19048,0,,0
org/apache/commons/math/util/FastMath,37,1678,        a = c;,0.19048,0,,0
org/apache/commons/math/util/FastMath,37,1679,        b = b + d;,0.19048,0,,0
org/apache/commons/math/util/FastMath,37,1681,        t = costA * sinEpsA;,0.19048,0,,0
org/apache/commons/math/util/FastMath,37,1682,        c = a + t;,0.19048,0,,0
org/apache/commons/math/util/FastMath,37,1683,        d = -(c - a - t);,0.19048,0,,0
org/apache/commons/math/util/FastMath,37,1684,        a = c;,0.19048,0,,0
org/apache/commons/math/util/FastMath,37,1685,        b = b + d;,0.19048,0,,0
org/apache/commons/math/util/FastMath,37,1687,        b = b + sintA * cosEpsB + costA * sinEpsB;,0.19048,0,,0
org/apache/commons/math/util/FastMath,37,1702,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,0.19048,0,,0
org/apache/commons/math/util/FastMath,37,1729,        if (xb != 0.0) {,0.19048,0,,0
org/apache/commons/math/util/FastMath,37,1738,        result = a + b;,0.19048,0,,0
org/apache/commons/math/util/FastMath,37,1740,        return result;,0.19048,0,,0
org/apache/commons/math/util/FastMath,37,2135,        boolean negative = false;,0.18605,0,,0
org/apache/commons/math/util/FastMath,37,2136,        int quadrant = 0;,0.18605,0,,0
org/apache/commons/math/util/FastMath,37,2138,        double xb = 0.0;,0.18605,0,,0
org/apache/commons/math/util/FastMath,37,2141,        xa = x;,0.18605,0,,0
org/apache/commons/math/util/FastMath,37,2142,        if (x < 0) {,0.18605,0,,0
org/apache/commons/math/util/FastMath,37,2148,        if (xa == 0.0) {,0.18605,0,,0
org/apache/commons/math/util/FastMath,37,2156,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.18605,0,,0
org/apache/commons/math/util/FastMath,37,2217,"                return cosQ(xa, xb);",0.14754,0,,0
org/apache/commons/math/complex/Complex,37,1166,"        return new Complex(realPart, imaginaryPart);",0.14286,0,,0
org/apache/commons/math/util/FastMath,37,2306,"                return sinQ(xa, xb);",0.125,0,,0
org/apache/commons/math/util/FastMath,37,104,    private static /* final */ boolean RECOMPUTE_TABLES_AT_RUNTIME = false;,0.12214,0,,0
org/apache/commons/math/util/FastMath,37,106,    private static /* final */ boolean LOAD_RESOURCES = false;,0.12214,0,,0
org/apache/commons/math/util/FastMath,37,115,    private static final double LN_QUICK_COEF[][] = {,0.12214,0,,0
org/apache/commons/math/util/FastMath,37,128,    private static final double LN_HI_PREC_COEF[][] = {,0.12214,0,,0
org/apache/commons/math/util/FastMath,37,141,    private static final double SINE_TABLE_A[] =,0.12214,0,,0
org/apache/commons/math/util/FastMath,37,160,    private static final double SINE_TABLE_B[] =,0.12214,0,,0
org/apache/commons/math/util/FastMath,37,179,    private static final double COSINE_TABLE_A[] =,0.12214,0,,0
org/apache/commons/math/util/FastMath,37,198,    private static final double COSINE_TABLE_B[] =,0.12214,0,,0
org/apache/commons/math/util/FastMath,37,218,    private static final double TANGENT_TABLE_A[] =,0.12214,0,,0
org/apache/commons/math/util/FastMath,37,237,    private static final double TANGENT_TABLE_B[] =,0.12214,0,,0
org/apache/commons/math/util/FastMath,37,256,    private static final long RECIP_2PI[] = new long[] {,0.12214,0,,0
org/apache/commons/math/util/FastMath,37,277,    private static final long PI_O_4_BITS[] = new long[] {,0.12214,0,,0
org/apache/commons/math/util/FastMath,37,285,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0.12214,0,,0
org/apache/commons/math/util/FastMath,37,288,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0.12214,0,,0
org/apache/commons/math/complex/Complex,37,385,        return real;,0.11189,0,,0
org/apache/commons/math/complex/Complex,37,376,        return imaginary;,0.11111,0,,0
org/apache/commons/math/util/FastMath,37,2221,"                return -cosQ(xa, xb);",0.10526,0,,0
org/apache/commons/math/util/FastMath,37,2238,            xa = -xa;,0.08333,0,,0
org/apache/commons/math/util/FastMath,37,2157,            return Double.NaN;,0.07143,0,,0
org/apache/commons/math/util/FastMath,37,2242,            return Double.NaN;,0.07143,0,,0
org/apache/commons/math/complex/Complex,37,98,"    public Complex(double real, double imaginary) {",0.0708,0,,0
org/apache/commons/math/complex/Complex,37,99,        this.real = real;,0.0708,0,,0
org/apache/commons/math/complex/Complex,37,100,        this.imaginary = imaginary;,0.0708,0,,0
org/apache/commons/math/complex/Complex,37,102,        isNaN = Double.isNaN(real) || Double.isNaN(imaginary);,0.0708,0,,0
org/apache/commons/math/complex/Complex,37,103,        isInfinite = !isNaN &&,0.0708,0,,0
org/apache/commons/math/complex/Complex,37,105,    },0.0708,0,,0
org/apache/commons/math/complex/Complex,37,59,"    public static final Complex I = new Complex(0.0, 1.0);",0.0708,0,,0
org/apache/commons/math/complex/Complex,37,62,"    public static final Complex NaN = new Complex(Double.NaN, Double.NaN);",0.0708,0,,0
org/apache/commons/math/complex/Complex,37,65,"    public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);",0.0708,0,,0
org/apache/commons/math/complex/Complex,37,67,"    public static final Complex ONE = new Complex(1.0, 0.0);",0.0708,0,,0
org/apache/commons/math/complex/Complex,37,69,"    public static final Complex ZERO = new Complex(0.0, 0.0);",0.0708,0,,0
org/apache/commons/math/util/FastMath,37,2143,            negative = true;,0.04,0,,0
org/apache/commons/math/util/FastMath,37,2144,            xa = -xa;,0.04,0,,0
org/apache/commons/math/util/FastMath,37,3767,                EXP_FRAC_TABLE_A = new double[FastMath.EXP_FRAC_TABLE_LEN];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3768,                EXP_FRAC_TABLE_B = new double[FastMath.EXP_FRAC_TABLE_LEN];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3770,                final double tmp[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3773,                final double factor = 1d / (EXP_FRAC_TABLE_LEN - 1);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3774,                for (int i = 0; i < EXP_FRAC_TABLE_A.length; i++) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3775,"                    FastMathCalc.slowexp(i * factor, tmp);",0.0,0,,0
org/apache/commons/math/util/FastMath,37,3776,                    EXP_FRAC_TABLE_A[i] = tmp[0];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3777,                    EXP_FRAC_TABLE_B[i] = tmp[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3779,            } else if (LOAD_RESOURCES) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3780,                final double[][] expFrac = FastMathResources.loadExpFrac();,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3781,                EXP_FRAC_TABLE_A = expFrac[0];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3782,                EXP_FRAC_TABLE_B = expFrac[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3783,            } else {,0.0,0,,0
org/apache/commons/math/util/FastMathLiteralArrays,37,6134,    private FastMathLiteralArrays() {},0.0,0,,0
org/apache/commons/math/util/FastMathLiteralArrays,37,6174,        return LN_MANT.clone();,0.0,0,,0
org/apache/commons/math/util/FastMath,37,349,    private FastMath() {},0.0,0,,0
org/apache/commons/math/util/FastMath,37,361,        if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN){,0.0,0,,0
org/apache/commons/math/util/FastMath,37,362,            return d; // These are un-normalised - don't try to convert,0.0,0,,0
org/apache/commons/math/util/FastMath,37,364,        long xl = Double.doubleToLongBits(d);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,365,        xl = xl & MASK_30BITS; // Drop low order bits,0.0,0,,0
org/apache/commons/math/util/FastMath,37,366,        return Double.longBitsToDouble(xl);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,375,        return Math.sqrt(a);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,384,          return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,397,          return exp(-x)/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,402,          x = -x;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,444,          return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,457,          return -exp(-x)/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,461,          return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,465,          x = -x;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,466,          negate = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,508,          double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,509,"          expm1(x, hiPrec);",0.0,0,,0
org/apache/commons/math/util/FastMath,37,511,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,512,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,515,          double denom = 1.0 + ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,516,          double denomr = 1.0 / denom;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,517,          double denomb = -(denom - 1.0 - ya) + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,518,          double ratio = ya * denomr;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,519,          double temp = ratio * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,520,          double ra = ratio + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,521,          double rb = ratio - ra;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,523,          temp = denom * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,524,          double za = denom + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,525,          double zb = denom - za;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,527,          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,530,          rb += yb*denomr;                        // numerator,0.0,0,,0
org/apache/commons/math/util/FastMath,37,531,          rb += -ya * denomb * denomr * denomr;   // denominator,0.0,0,,0
org/apache/commons/math/util/FastMath,37,534,          temp = ya + ra;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,535,          yb += -(temp - ya - ra);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,536,          ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,537,          temp = ya + rb;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,538,          yb += -(temp - ya - rb);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,539,          ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,541,          result = ya + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,542,          result *= 0.5;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,546,          result = -result;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,557,      boolean negate = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,559,      if (x != x) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,560,          return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,569,      if (x > 20.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,570,          return 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,573,      if (x < -20) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,574,          return -1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,577,      if (x == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,578,          return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,581,      if (x < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,582,          x = -x;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,583,          negate = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,587,      if (x >= 0.5) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,588,          double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,590,"          exp(x*2.0, 0.0, hiPrec);",0.0,0,,0
org/apache/commons/math/util/FastMath,37,592,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,593,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,596,          double na = -1.0 + ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,597,          double nb = -(na + 1.0 - ya);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,598,          double temp = na + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,599,          nb += -(temp - na - yb);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,600,          na = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,603,          double da = 1.0 + ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,604,          double db = -(da - 1.0 - ya);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,605,          temp = da + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,606,          db += -(temp - da - yb);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,607,          da = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,609,          temp = da * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,610,          double daa = da + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,611,          double dab = da - daa;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,614,          double ratio = na/da;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,615,          temp = ratio * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,616,          double ratioa = ratio + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,617,          double ratiob = ratio - ratioa;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,620,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,623,          ratiob += nb / da;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,625,          ratiob += -db * na / da / da;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,627,          result = ratioa + ratiob;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,628,      },0.0,0,,0
org/apache/commons/math/util/FastMath,37,630,          double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,632,"          expm1(x*2.0, hiPrec);",0.0,0,,0
org/apache/commons/math/util/FastMath,37,634,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,635,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,638,          double na = ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,639,          double nb = yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,642,          double da = 2.0 + ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,643,          double db = -(da - 2.0 - ya);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,644,          double temp = da + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,645,          db += -(temp - da - yb);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,646,          da = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,648,          temp = da * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,649,          double daa = da + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,650,          double dab = da - daa;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,653,          double ratio = na/da;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,654,          temp = ratio * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,655,          double ratioa = ratio + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,656,          double ratiob = ratio - ratioa;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,659,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,662,          ratiob += nb / da;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,664,          ratiob += -db * na / da / da;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,666,          result = ratioa + ratiob;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,669,      if (negate) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,670,          result = -result;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,673,      return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,681,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,0.0,0,,0
org/apache/commons/math/util/FastMath,37,689,        boolean negative = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,690,        if (a < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,691,            negative = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,692,            a = -a;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,696,        if (a > 0.167) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,697,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,699,            final double a2 = a * a;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,700,            if (a > 0.097) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,701,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,702,            } else if (a > 0.036) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,703,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,704,            } else if (a > 0.0036) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,705,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,707,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,711,        return negative ? -absAsinh : absAsinh;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,719,        boolean negative = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,720,        if (a < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,721,            negative = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,722,            a = -a;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,726,        if (a > 0.15) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,727,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,0.0,0,,0
org/apache/commons/math/util/FastMath,37,729,            final double a2 = a * a;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,730,            if (a > 0.087) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,731,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));,0.0,0,,0
org/apache/commons/math/util/FastMath,37,732,            } else if (a > 0.031) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,733,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));,0.0,0,,0
org/apache/commons/math/util/FastMath,37,734,            } else if (a > 0.003) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,735,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));,0.0,0,,0
org/apache/commons/math/util/FastMath,37,737,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));,0.0,0,,0
org/apache/commons/math/util/FastMath,37,741,        return negative ? -absAtanh : absAtanh;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,750,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,0.0,0,,0
org/apache/commons/math/util/FastMath,37,759,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,0.0,0,,0
org/apache/commons/math/util/FastMath,37,767,"        return nextAfter(a, Double.POSITIVE_INFINITY);",0.0,0,,0
org/apache/commons/math/util/FastMath,37,775,"        return nextAfter(a, Float.POSITIVE_INFINITY);",0.0,0,,0
org/apache/commons/math/util/FastMath,37,783,        return Math.random();,0.0,0,,0
org/apache/commons/math/util/FastMath,37,827,            intVal = (int) -x;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,829,            if (intVal > 746) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,830,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,831,                    hiPrec[0] = 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,832,                    hiPrec[1] = 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,834,                return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,837,            if (intVal > 709) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,839,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",0.0,0,,0
org/apache/commons/math/util/FastMath,37,840,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,841,                    hiPrec[0] /= 285040095144011776.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,842,                    hiPrec[1] /= 285040095144011776.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,844,                return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,847,            if (intVal == 709) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,849,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",0.0,0,,0
org/apache/commons/math/util/FastMath,37,850,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,851,                    hiPrec[0] /= 4.455505956692756620;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,852,                    hiPrec[1] /= 4.455505956692756620;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,854,                return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,857,            intVal++;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,859,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,860,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,862,            intVal = -intVal;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,868,                    hiPrec[0] = Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,869,                    hiPrec[1] = 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,920,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,939,"      return expm1(x, null);",0.0,0,,0
org/apache/commons/math/util/FastMath,37,948,        if (x != x || x == 0.0) { // NaN or zero,0.0,0,,0
org/apache/commons/math/util/FastMath,37,949,            return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,952,        if (x <= -1.0 || x >= 1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,955,            double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,956,"            exp(x, 0.0, hiPrec);",0.0,0,,0
org/apache/commons/math/util/FastMath,37,957,            if (x > 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,958,                return -1.0 + hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,960,                final double ra = -1.0 + hiPrec[0];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,961,                double rb = -(ra + 1.0 - hiPrec[0]);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,962,                rb += hiPrec[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,963,                return ra + rb;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,970,        boolean negative = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,972,        if (x < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,973,            x = -x;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,974,            negative = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,978,            int intFrac = (int) (x * 1024.0);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,979,            double tempA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,980,            double tempB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,982,            double temp = tempA + tempB;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,983,            tempB = -(temp - tempA - tempB);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,984,            tempA = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,986,            temp = tempA * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,987,            baseA = tempA + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,988,            baseB = tempB + (tempA - baseA);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,990,            epsilon = x - intFrac/1024.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,995,        double zb = 0.008336750013465571;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,996,        zb = zb * epsilon + 0.041666663879186654;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,997,        zb = zb * epsilon + 0.16666666666745392;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,998,        zb = zb * epsilon + 0.49999999999999994;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,999,        zb = zb * epsilon;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1000,        zb = zb * epsilon;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1002,        double za = epsilon;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1003,        double temp = za + zb;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1004,        zb = -(temp - za - zb);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1005,        za = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1007,        temp = za * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1008,        temp = za + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1009,        zb += za - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1010,        za = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1013,        double ya = za * baseA;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1015,        temp = ya + za * baseB;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1016,        double yb = -(temp - ya - za * baseB);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1017,        ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1019,        temp = ya + zb * baseA;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1020,        yb += -(temp - ya - zb * baseA);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1021,        ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1023,        temp = ya + zb * baseB;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1024,        yb += -(temp - ya - zb*baseB);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1025,        ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1029,        temp = ya + baseA;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1030,        yb += -(temp - baseA - ya);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1031,        ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1033,        temp = ya + za;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1035,        yb += -(temp - ya - za);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1036,        ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1038,        temp = ya + baseB;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1040,        yb += -(temp - ya - baseB);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1041,        ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1043,        temp = ya + zb;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1045,        yb += -(temp - ya - zb);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1046,        ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1048,        if (negative) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1050,            double denom = 1.0 + ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1051,            double denomr = 1.0 / denom;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1052,            double denomb = -(denom - 1.0 - ya) + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1053,            double ratio = ya * denomr;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1054,            temp = ratio * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1055,            final double ra = ratio + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1056,            double rb = ratio - ra;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1058,            temp = denom * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1059,            za = denom + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1060,            zb = denom - za;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1062,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1073,            rb += yb * denomr;                      // numerator,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1074,            rb += -ya * denomb * denomr * denomr;   // denominator,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1077,            ya = -ra;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1078,            yb = -rb;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1081,        if (hiPrecOut != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1082,            hiPrecOut[0] = ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1083,            hiPrecOut[1] = yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1086,        return ya + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1096,"        return log(x, null);",0.0,0,,0
org/apache/commons/math/util/FastMath,37,1106,        if (x==0) { // Handle special case of +0/-0,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1107,            return Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1109,        long bits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1112,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1113,            if (x != 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1114,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1115,                    hiPrec[0] = Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1118,                return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1123,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1124,            if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1125,                hiPrec[0] = Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1128,            return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1132,        int exp = (int)(bits >> 52)-1023;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1134,        if ((bits & 0x7ff0000000000000L) == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1136,            if (x == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1138,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1139,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1142,                return Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1146,            bits <<= 1;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1147,            while ( (bits & 0x0010000000000000L) == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1148,                exp--;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1149,                bits <<= 1;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1154,        if (exp == -1 || exp == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1155,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1160,                double xa = x - 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1161,                double xb = xa - x + 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1162,                double tmp = xa * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1163,                double aa = xa + tmp - tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1164,                double ab = xa - aa;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1165,                xa = aa;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1166,                xb = ab;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1168,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1169,                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1171,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1173,                    aa = ya * xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1174,                    ab = ya * xb + yb * xa + yb * xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1176,                    tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1177,                    ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1178,                    yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1181,                    aa = ya + LN_QUICK_COEF[i][0];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1182,                    ab = yb + LN_QUICK_COEF[i][1];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1184,                    tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1185,                    ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1186,                    yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1190,                aa = ya * xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1191,                ab = ya * xb + yb * xa + yb * xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1193,                tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1194,                ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1195,                yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1197,                return ya + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1202,        double lnm[] = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1213,        double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1215,        double lnza = 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1216,        double lnzb = 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1218,        if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1220,            double tmp = epsilon * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1221,            double aa = epsilon + tmp - tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1222,            double ab = epsilon - aa;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1223,            double xa = aa;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1224,            double xb = ab;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1227,            double numer = bits & 0x3ffffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1228,            double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1229,            aa = numer - xa*denom - xb * denom;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1230,            xb += aa / denom;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1233,            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1234,            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1236,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1238,                aa = ya * xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1239,                ab = ya * xb + yb * xa + yb * xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1241,                tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1242,                ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1243,                yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1246,                aa = ya + LN_HI_PREC_COEF[i][0];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1247,                ab = yb + LN_HI_PREC_COEF[i][1];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1249,                tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1250,                ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1251,                yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1255,            aa = ya * xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1256,            ab = ya * xb + yb * xa + yb * xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1264,            lnza = aa + ab;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1265,            lnzb = -(lnza - aa - ab);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1266,        } else {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1269,            lnza = -0.16624882440418567;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1270,            lnza = lnza * epsilon + 0.19999954120254515;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1271,            lnza = lnza * epsilon + -0.2499999997677497;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1272,            lnza = lnza * epsilon + 0.3333333333332802;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1273,            lnza = lnza * epsilon + -0.5;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1274,            lnza = lnza * epsilon + 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1275,            lnza = lnza * epsilon;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1292,        double a = LN_2_A*exp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1293,        double b = 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1294,        double c = a+lnm[0];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1295,        double d = -(c-a-lnm[0]);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1296,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1297,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1299,        c = a + lnza;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1300,        d = -(c - a - lnza);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1301,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1302,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1304,        c = a + LN_2_B*exp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1305,        d = -(c - a - LN_2_B*exp);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1306,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1307,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1309,        c = a + lnm[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1310,        d = -(c - a - lnm[1]);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1311,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1312,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1314,        c = a + lnzb;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1315,        d = -(c - a - lnzb);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1316,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1317,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1319,        if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1320,            hiPrec[0] = a;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1321,            hiPrec[1] = b;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1324,        return a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1333,        if (x == -1) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1334,            return x/0.0;   // -Infinity,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1337,        if (x > 0 && 1/x == 0) { // x = Infinity,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1338,            return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1341,        if (x>1e-6 || x<-1e-6) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1342,            double xpa = 1.0 + x;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1343,            double xpb = -(xpa - 1.0 - x);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1345,            double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1347,"            final double lores = log(xpa, hiPrec);",0.0,0,,0
org/apache/commons/math/util/FastMath,37,1348,            if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1349,                return lores;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1354,            double fx1 = xpb/xpa;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1356,            double epsilon = 0.5 * fx1 + 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1357,            epsilon = epsilon * fx1;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1359,            return epsilon + hiPrec[1] + hiPrec[0];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1363,        double y = x * F_1_3 - F_1_2;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1364,        y = y * x + 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1365,        y = y * x;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1367,        return y;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1375,        final double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1377,"        final double lores = log(x, hiPrec);",0.0,0,,0
org/apache/commons/math/util/FastMath,37,1378,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1379,            return lores;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1382,        final double tmp = hiPrec[0] * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1383,        final double lna = hiPrec[0] + tmp - tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1384,        final double lnb = hiPrec[0] - lna + hiPrec[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1386,        final double rln10a = 0.4342944622039795;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1387,        final double rln10b = 1.9699272335463627E-8;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1389,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1409,        return log(x) / log(base);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1420,        final double lns[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1422,        if (y == 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1423,            return 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1426,        if (x != x) { // X is NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1427,            return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1431,        if (x == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1432,            long bits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1433,            if ((bits & 0x8000000000000000L) != 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1435,                long yi = (long) y;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1437,                if (y < 0 && y == yi && (yi & 1) == 1) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1438,                    return Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1441,                if (y > 0 && y == yi && (yi & 1) == 1) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1442,                    return -0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1446,            if (y < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1447,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1449,            if (y > 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1450,                return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1453,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1456,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1457,            if (y != y) { // y is NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1458,                return y;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1460,            if (y < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1461,                return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1463,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1467,        if (y == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1468,            if (x * x == 1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1469,                return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1472,            if (x * x > 1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1473,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1475,                return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1479,        if (x == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1480,            if (y != y) { // y is NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1481,                return y;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1484,            if (y < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1485,                long yi = (long) y;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1486,                if (y == yi && (yi & 1) == 1) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1487,                    return -0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1490,                return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1493,            if (y > 0)  {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1494,                long yi = (long) y;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1495,                if (y == yi && (yi & 1) == 1) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1496,                    return Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1499,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1503,        if (y == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1505,            if (x * x == 1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1506,                return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1509,            if (x * x < 1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1510,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1512,                return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1517,        if (x < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1519,            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1520,"                return pow(-x, y);",0.0,0,,0
org/apache/commons/math/util/FastMath,37,1523,            if (y == (long) y) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1525,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",0.0,0,,0
org/apache/commons/math/util/FastMath,37,1527,                return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1534,        if (y < 8e298 && y > -8e298) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1535,            double tmp1 = y * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1536,            ya = y + tmp1 - tmp1;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1537,            yb = y - ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1538,        } else {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1539,            double tmp1 = y * 9.31322574615478515625E-10;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1540,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1541,            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1542,            yb = y - ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1546,"        final double lores = log(x, lns);",0.0,0,,0
org/apache/commons/math/util/FastMath,37,1547,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1548,            return lores;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1551,        double lna = lns[0];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1552,        double lnb = lns[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1555,        double tmp1 = lna * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1556,        double tmp2 = lna + tmp1 - tmp1;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1557,        lnb += lna - tmp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1558,        lna = tmp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1561,        final double aa = lna * ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1562,        final double ab = lna * yb + lnb * ya + lnb * yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1564,        lna = aa+ab;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1565,        lnb = -(lna - aa - ab);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1567,        double z = 1.0 / 120.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1568,        z = z * lnb + (1.0 / 24.0);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1569,        z = z * lnb + (1.0 / 6.0);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1570,        z = z * lnb + 0.5;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1571,        z = z * lnb + 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1572,        z = z * lnb;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1574,"        final double result = exp(lna, z, null);",0.0,0,,0
org/apache/commons/math/util/FastMath,37,1576,        return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1771,        int idx = (int) ((xa * 8.0) + 0.5);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1772,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1775,        final double sintA = SINE_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1776,        final double sintB = SINE_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1777,        final double costA = COSINE_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1778,        final double costB = COSINE_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1781,        double sinEpsA = epsilon;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1782,        double sinEpsB = polySine(epsilon);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1783,        final double cosEpsA = 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1784,        final double cosEpsB = polyCosine(epsilon);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1787,        double temp = sinEpsA * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1788,        double temp2 = (sinEpsA + temp) - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1789,        sinEpsB +=  sinEpsA - temp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1790,        sinEpsA = temp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1815,        double a = 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1816,        double b = 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1819,        double t = sintA;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1820,        double c = a + t;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1821,        double d = -(c - a - t);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1822,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1823,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1825,        t = costA*sinEpsA;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1826,        c = a + t;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1827,        d = -(c - a - t);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1828,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1829,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1831,        b = b + sintA*cosEpsB + costA*sinEpsB;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1832,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1834,        double sina = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1835,        double sinb = -(sina - a - b);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1839,        a = b = c = d = 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1841,        t = costA*cosEpsA;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1842,        c = a + t;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1843,        d = -(c - a - t);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1844,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1845,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1847,        t = -sintA*sinEpsA;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1848,        c = a + t;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1849,        d = -(c - a - t);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1850,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1851,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1853,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1854,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1856,        double cosa = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1857,        double cosb = -(cosa - a - b);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1859,        if (cotanFlag) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1861,            tmp = cosa; cosa = sina; sina = tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1862,            tmp = cosb; cosb = sinb; sinb = tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1876,        double est = sina/cosa;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1879,        temp = est * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1880,        double esta = (est + temp) - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1881,        double estb =  est - esta;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1883,        temp = cosa * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1884,        double cosaa = (cosa + temp) - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1885,        double cosab =  cosa - cosaa;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1888,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1889,        err += sinb/cosa;                     // Change in est due to sinb,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1890,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1892,        if (xb != 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1895,            double xbadj = xb + est*est*xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1896,            if (cotanFlag) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1897,                xbadj = -xbadj;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1900,            err += xbadj;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1903,        return est+err;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1920,        long inbits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1921,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1924,        inbits &= 0x000fffffffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1925,        inbits |= 0x0010000000000000L;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1928,        exponent++;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1929,        inbits <<= 11;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1935,        int idx = exponent >> 6;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1936,        int shift = exponent - (idx << 6);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1938,        if (shift != 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1939,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1940,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1941,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1942,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1944,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1945,            shpiA = RECIP_2PI[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1946,            shpiB = RECIP_2PI[idx+1];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1950,        long a = inbits >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1951,        long b = inbits & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1953,        long c = shpiA >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1954,        long d = shpiA & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1956,        long ac = a * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1957,        long bd = b * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1958,        long bc = b * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1959,        long ad = a * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1961,        long prodB = bd + (ad << 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1962,        long prodA = ac + (ad >>> 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1964,        boolean bita = (bd & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1965,        boolean bitb = (ad & 0x80000000L ) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1966,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1969,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1971,            prodA++;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1974,        bita = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1975,        bitb = (bc & 0x80000000L ) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1977,        prodB = prodB + (bc << 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1978,        prodA = prodA + (bc >>> 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1980,        bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1983,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1985,            prodA++;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1989,        c = shpiB >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1990,        d = shpiB & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1991,        ac = a * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1992,        bc = b * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1993,        ad = a * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1996,        ac = ac + ((bc + ad) >>> 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1998,        bita = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,1999,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2000,        prodB += ac;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2001,        bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2003,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2005,            prodA++;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2009,        c = shpi0 >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2010,        d = shpi0 & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2012,        bd = b * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2013,        bc = b * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2014,        ad = a * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2016,        prodA += bd + ((bc + ad) << 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2028,        int intPart = (int)(prodA >>> 62);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2031,        prodA <<= 2;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2032,        prodA |= prodB >>> 62;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2033,        prodB <<= 2;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2036,        a = prodA >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2037,        b = prodA & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2039,        c = PI_O_4_BITS[0] >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2040,        d = PI_O_4_BITS[0] & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2042,        ac = a * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2043,        bd = b * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2044,        bc = b * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2045,        ad = a * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2047,        long prod2B = bd + (ad << 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2048,        long prod2A = ac + (ad >>> 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2050,        bita = (bd & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2051,        bitb = (ad & 0x80000000L ) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2052,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2055,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2057,            prod2A++;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2060,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2061,        bitb = (bc & 0x80000000L ) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2063,        prod2B = prod2B + (bc << 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2064,        prod2A = prod2A + (bc >>> 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2066,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2069,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2071,            prod2A++;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2075,        c = PI_O_4_BITS[1] >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2076,        d = PI_O_4_BITS[1] & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2077,        ac = a * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2078,        bc = b * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2079,        ad = a * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2082,        ac = ac + ((bc + ad) >>> 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2084,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2085,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2086,        prod2B += ac;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2087,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2089,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2091,            prod2A++;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2095,        a = prodB >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2096,        b = prodB & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2097,        c = PI_O_4_BITS[0] >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2098,        d = PI_O_4_BITS[0] & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2099,        ac = a * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2100,        bc = b * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2101,        ad = a * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2104,        ac = ac + ((bc + ad) >>> 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2106,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2107,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2108,        prod2B += ac;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2109,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2111,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2113,            prod2A++;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2117,        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2118,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2120,        double sumA = tmpA + tmpB;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2121,        double sumB = -(sumA - tmpA - tmpB);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2124,        result[0] = intPart;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2125,        result[1] = sumA * 2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2126,        result[2] = sumB * 2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2127,    },0.0,0,,0
org/apache/commons/math/util/FastMath,37,2149,            long bits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2150,            if (bits < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2151,                return -0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2153,            return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2165,            double reduceResults[] = new double[3];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2166,"            reducePayneHanek(xa, reduceResults);",0.0,0,,0
org/apache/commons/math/util/FastMath,37,2167,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2168,            xa = reduceResults[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2169,            xb = reduceResults[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2170,        } else if (xa > 1.5707963267948966) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2202,                k--;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2203,            },0.0,0,,0
org/apache/commons/math/util/FastMath,37,2210,            quadrant ^= 2;  // Flip bit 1,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2215,"                return sinQ(xa, xb);",0.0,0,,0
org/apache/commons/math/util/FastMath,37,2219,"                return -sinQ(xa, xb);",0.0,0,,0
org/apache/commons/math/util/FastMath,37,2223,                return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2251,            double reduceResults[] = new double[3];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2252,"            reducePayneHanek(xa, reduceResults);",0.0,0,,0
org/apache/commons/math/util/FastMath,37,2253,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2254,            xa = reduceResults[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2255,            xb = reduceResults[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2256,        } else if (xa > 1.5707963267948966) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2288,                k--;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2289,            },0.0,0,,0
org/apache/commons/math/util/FastMath,37,2300,"                return cosQ(xa, xb);",0.0,0,,0
org/apache/commons/math/util/FastMath,37,2304,"                return -cosQ(xa, xb);",0.0,0,,0
org/apache/commons/math/util/FastMath,37,2308,                return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2318,        boolean negative = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2319,        int quadrant = 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2322,        double xa = x;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2323,        if (x < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2324,            negative = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2325,            xa = -xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2329,        if (xa == 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2330,            long bits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2331,            if (bits < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2332,                return -0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2334,            return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2337,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2338,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2342,        double xb = 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2343,        if (xa > 3294198.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2347,            double reduceResults[] = new double[3];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2348,"            reducePayneHanek(xa, reduceResults);",0.0,0,,0
org/apache/commons/math/util/FastMath,37,2349,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2350,            xa = reduceResults[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2351,            xb = reduceResults[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2352,        } else if (xa > 1.5707963267948966) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2357,            int k = (int)(xa * 0.6366197723675814);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2363,                double a = -k * 1.570796251296997;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2364,                remA = xa + a;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2365,                remB = -(remA - xa - a);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2367,                a = -k * 7.549789948768648E-8;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2368,                double b = remA;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2369,                remA = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2370,                remB += -(remA - b - a);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2372,                a = -k * 6.123233995736766E-17;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2373,                b = remA;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2374,                remA = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2375,                remB += -(remA - b - a);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2377,                if (remA > 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2378,                    break;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2384,                k--;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2385,            },0.0,0,,0
org/apache/commons/math/util/FastMath,37,2386,            quadrant = k & 3;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2387,            xa = remA;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2388,            xb = remB;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2391,        if (xa > 1.5) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2393,            final double pi2a = 1.5707963267948966;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2394,            final double pi2b = 6.123233995736766E-17;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2396,            final double a = pi2a - xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2397,            double b = -(a - pi2a + xa);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2398,            b += pi2b - xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2400,            xa = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2401,            xb = -(xa - a - b);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2402,            quadrant ^= 1;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2403,            negative ^= true;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2407,        if ((quadrant & 1) == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2408,"            result = tanQ(xa, xb, false);",0.0,0,,0
org/apache/commons/math/util/FastMath,37,2410,"            result = -tanQ(xa, xb, true);",0.0,0,,0
org/apache/commons/math/util/FastMath,37,2413,        if (negative) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2414,            result = -result;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2417,        return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2426,"        return atan(x, 0.0, false);",0.0,0,,0
org/apache/commons/math/util/FastMath,37,2436,        boolean negate = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2439,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2440,"            return leftPlane ? copySign(Math.PI, xa) : xa;",0.0,0,,0
org/apache/commons/math/util/FastMath,37,2443,        if (xa < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2445,            xa = -xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2446,            xb = -xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2447,            negate = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2450,        if (xa > 1.633123935319537E16) { // Very large input,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2451,            return (negate ^ leftPlane) ? (-Math.PI/2.0) : (Math.PI/2.0);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2455,        if (xa < 1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2456,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2458,            double temp = 1.0/xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2459,            idx = (int) (-((-1.7168146928204136 * temp * temp + 8.0) * temp) + 13.07);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2461,        double epsA = xa - TANGENT_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2462,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2463,        epsB += xb - TANGENT_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2465,        double temp = epsA + epsB;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2466,        epsB = -(temp - epsA - epsB);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2467,        epsA = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2470,        temp = xa * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2471,        double ya = xa + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2472,        double yb = xb + xa - ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2473,        xa = ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2474,        xb += yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2477,        if (idx == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2480,            double denom = 1.0 / (1.0 + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2482,            ya = epsA * denom;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2483,            yb = epsB * denom;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2484,        } else {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2485,            double temp2 = xa * TANGENT_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2486,            double za = 1.0 + temp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2487,            double zb = -(za - 1.0 - temp2);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2488,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2489,            temp = za + temp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2490,            zb += -(temp - za - temp2);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2491,            za = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2493,            zb += xb * TANGENT_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2494,            ya = epsA / za;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2496,            temp = ya * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2497,            final double yaa = (ya + temp) - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2498,            final double yab = ya - yaa;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2500,            temp = za * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2501,            final double zaa = (za + temp) - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2502,            final double zab = za - zaa;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2505,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2507,            yb += -epsA * zb / za / za;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2508,            yb += epsB / za;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2512,        epsA = ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2513,        epsB = yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2516,        double epsA2 = epsA*epsA;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2527,        yb = 0.07490822288864472;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2528,        yb = yb * epsA2 + -0.09088450866185192;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2529,        yb = yb * epsA2 + 0.11111095942313305;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2530,        yb = yb * epsA2 + -0.1428571423679182;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2531,        yb = yb * epsA2 + 0.19999999999923582;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2532,        yb = yb * epsA2 + -0.33333333333333287;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2533,        yb = yb * epsA2 * epsA;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2536,        ya = epsA;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2538,        temp = ya + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2539,        yb = -(temp - ya - yb);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2540,        ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2543,        yb += epsB / (1.0 + epsA * epsA);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2549,        double za = EIGHTHS[idx] + ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2550,        double zb = -(za - EIGHTHS[idx] - ya);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2551,        temp = za + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2552,        zb += -(temp - za - yb);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2553,        za = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2555,        result = za + zb;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2556,        resultb = -(result - za - zb);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2558,        if (leftPlane) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2560,            final double pia = 1.5707963267948966*2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2561,            final double pib = 6.123233995736766E-17*2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2563,            za = pia - result;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2564,            zb = -(za - pia + result);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2565,            zb += pib - resultb;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2567,            result = za + zb;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2568,            resultb = -(result - za - zb);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2572,        if (negate ^ leftPlane) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2573,            result = -result;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2576,        return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2586,        if (x !=x || y != y) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2587,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2590,        if (y == 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2591,            double result = x*y;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2592,            double invx = 1.0/x;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2593,            double invy = 1.0/y;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2595,            if (invx == 0.0) { // X is infinite,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2596,                if (x > 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2597,                    return y; // return +/- 0.0,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2599,"                    return copySign(Math.PI, y);",0.0,0,,0
org/apache/commons/math/util/FastMath,37,2603,            if (x < 0.0 || invx < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2604,                if (y < 0.0 || invy < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2605,                    return -Math.PI;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2607,                    return Math.PI;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2610,                return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2616,        if (y == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2617,            if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2618,                return Math.PI/4.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2621,            if (x == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2622,                return Math.PI * F_3_4;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2625,            return Math.PI/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2628,        if (y == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2629,            if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2630,                return -Math.PI/4.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2633,            if (x == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2634,                return -Math.PI * F_3_4;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2637,            return -Math.PI/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2640,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2641,            if (y > 0.0 || 1/y > 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2642,                return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2645,            if (y < 0.0 || 1/y < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2646,                return -0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2650,        if (x == Double.NEGATIVE_INFINITY),0.0,0,,0
org/apache/commons/math/util/FastMath,37,2652,            if (y > 0.0 || 1/y > 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2653,                return Math.PI;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2656,            if (y < 0.0 || 1/y < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2657,                return -Math.PI;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2663,        if (x == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2664,            if (y > 0.0 || 1/y > 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2665,                return Math.PI/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2668,            if (y < 0.0 || 1/y < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2669,                return -Math.PI/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2674,        final double r = y/x;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2675,        if (Double.isInfinite(r)) { // bypass calculations that can create NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2676,"            return atan(r, 0, x < 0);",0.0,0,,0
org/apache/commons/math/util/FastMath,37,2679,        double ra = doubleHighPart(r);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2680,        double rb = r - ra;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2683,        final double xa = doubleHighPart(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2684,        final double xb = x - xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2686,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2688,        double temp = ra + rb;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2689,        rb = -(temp - ra - rb);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2690,        ra = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2692,        if (ra == 0) { // Fix up the sign so atan works correctly,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2693,"            ra = copySign(0.0, y);",0.0,0,,0
org/apache/commons/math/util/FastMath,37,2697,"        double result = atan(ra, rb, x < 0);",0.0,0,,0
org/apache/commons/math/util/FastMath,37,2699,        return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2707,      if (x != x) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2708,          return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2711,      if (x > 1.0 || x < -1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2712,          return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2715,      if (x == 1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2716,          return Math.PI/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2719,      if (x == -1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2720,          return -Math.PI/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2723,      if (x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2724,          return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2730,      double temp = x * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2731,      final double xa = x + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2732,      final double xb = x - xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2735,      double ya = xa*xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2736,      double yb = xa*xb*2.0 + xb*xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2739,      ya = -ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2740,      yb = -yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2742,      double za = 1.0 + ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2743,      double zb = -(za - 1.0 - ya);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2745,      temp = za + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2746,      zb += -(temp - za - yb);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2747,      za = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2751,      y = sqrt(za);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2752,      temp = y * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2753,      ya = y + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2754,      yb = y - ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2757,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2760,      double dx = zb / (2.0*y);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2763,      double r = x/y;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2764,      temp = r * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2765,      double ra = r + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2766,      double rb = r - ra;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2768,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2769,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2771,      temp = ra + rb;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2772,      rb = -(temp - ra - rb);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2773,      ra = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2775,"      return atan(ra, rb, false);",0.0,0,,0
org/apache/commons/math/util/FastMath,37,2783,      if (x != x) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2784,          return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2787,      if (x > 1.0 || x < -1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2788,          return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2791,      if (x == -1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2792,          return Math.PI;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2795,      if (x == 1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2796,          return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2799,      if (x == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2800,          return Math.PI/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2806,      double temp = x * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2807,      final double xa = x + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2808,      final double xb = x - xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2811,      double ya = xa*xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2812,      double yb = xa*xb*2.0 + xb*xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2815,      ya = -ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2816,      yb = -yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2818,      double za = 1.0 + ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2819,      double zb = -(za - 1.0 - ya);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2821,      temp = za + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2822,      zb += -(temp - za - yb);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2823,      za = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2826,      double y = sqrt(za);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2827,      temp = y * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2828,      ya = y + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2829,      yb = y - ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2832,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2835,      yb += zb / (2.0*y);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2836,      y = ya+yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2837,      yb = -(y - ya - yb);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2840,      double r = y/x;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2843,      if (Double.isInfinite(r)) { // x is effectively zero,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2844,          return Math.PI/2; // so return the appropriate value,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2847,      double ra = doubleHighPart(r);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2848,      double rb = r - ra;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2850,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2851,      rb += yb / x;  // Add in effect additional bits of sqrt.,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2853,      temp = ra + rb;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2854,      rb = -(temp - ra - rb);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2855,      ra = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2857,"      return atan(ra, rb, x<0);",0.0,0,,0
org/apache/commons/math/util/FastMath,37,2866,      long inbits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2867,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2868,      boolean subnormal = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2870,      if (exponent == -1023) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2871,          if (x == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2872,              return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2876,          subnormal = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2877,          x *= 1.8014398509481984E16;  // 2^54,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2878,          inbits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2879,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2882,      if (exponent == 1024) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2884,          return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2888,      int exp3 = exponent / 3;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2891,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2895,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2898,      double est = -0.010714690733195933;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2899,      est = est * mant + 0.0875862700108075;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2900,      est = est * mant + -0.3058015757857271;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2901,      est = est * mant + 0.7249995199969751;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2902,      est = est * mant + 0.5039018405998233;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2904,      est *= CBRTTWO[exponent % 3 + 2];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2909,      final double xs = x / (p2*p2*p2);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2910,      est += (xs - est*est*est) / (3*est*est);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2911,      est += (xs - est*est*est) / (3*est*est);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2914,      double temp = est * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2915,      double ya = est + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2916,      double yb = est - ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2918,      double za = ya * ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2919,      double zb = ya * yb * 2.0 + yb * yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2920,      temp = za * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2921,      double temp2 = za + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2922,      zb += za - temp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2923,      za = temp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2925,      zb = za * yb + ya * zb + zb * yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2926,      za = za * ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2928,      double na = xs - za;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2929,      double nb = -(na - xs + za);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2930,      nb -= zb;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2932,      est += (na+nb)/(3*est*est);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2935,      est *= p2;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2937,      if (subnormal) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2938,          est *= 3.814697265625E-6;  // 2^-18,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2941,      return est;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2951,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2952,            return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2956,        final double facta = 0.01745329052209854;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2957,        final double factb = 1.997844754509471E-9;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2959,        double xa = doubleHighPart(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2960,        double xb = x - xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2962,        double result = xb * factb + xb * facta + xa * factb + xa * facta;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2963,        if (result == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2964,            result = result * x; // ensure correct sign if calculation underflows,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2966,        return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2976,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2977,            return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2981,        final double facta = 57.2957763671875;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2982,        final double factb = 3.145894820876798E-6;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2984,        double xa = doubleHighPart(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2985,        double xb = x - xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2987,        return xb * factb + xb * facta + xa * factb + xa * facta;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,2996,        return (x < 0) ? -x : x;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3005,        return (x < 0l) ? -x : x;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3014,        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3023,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3032,        if (Double.isInfinite(x)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3033,            return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3035,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3044,        if (Float.isInfinite(x)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3045,            return Float.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3047,        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3059,        if ((n > -1023) && (n < 1024)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3060,            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3064,        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3065,            return d;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3067,        if (n < -2098) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3068,            return (d > 0) ? 0.0 : -0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3070,        if (n > 2097) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3071,            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3075,        final long bits = Double.doubleToLongBits(d);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3076,        final long sign = bits & 0x8000000000000000L;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3077,        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3078,        long mantissa   = bits & 0x000fffffffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3081,        int scaledExponent = exponent + n;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3083,        if (n < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3085,            if (scaledExponent > 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3087,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3088,            } else if (scaledExponent > -53) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3092,                mantissa = mantissa | (1L << 52);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3095,                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3096,                mantissa = mantissa >>> (1 - scaledExponent);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3097,                if (mostSignificantLostBit != 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3099,                    mantissa++;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3101,                return Double.longBitsToDouble(sign | mantissa);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3105,                return (sign == 0L) ? 0.0 : -0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3109,            if (exponent == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3112,                while ((mantissa >>> 52) != 1) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3113,                    mantissa = mantissa << 1;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3114,                    --scaledExponent;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3116,                ++scaledExponent;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3117,                mantissa = mantissa & 0x000fffffffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3119,                if (scaledExponent < 2047) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3120,                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3122,                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3125,            } else if (scaledExponent < 2047) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3126,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3128,                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3143,        if ((n > -127) && (n < 128)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3144,            return f * Float.intBitsToFloat((n + 127) << 23);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3148,        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3149,            return f;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3151,        if (n < -277) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3152,            return (f > 0) ? 0.0f : -0.0f;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3154,        if (n > 276) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3155,            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3159,        final int bits = Float.floatToIntBits(f);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3160,        final int sign = bits & 0x80000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3161,        int  exponent  = (bits >>> 23) & 0xff;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3162,        int mantissa   = bits & 0x007fffff;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3165,        int scaledExponent = exponent + n;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3167,        if (n < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3169,            if (scaledExponent > 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3171,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3172,            } else if (scaledExponent > -24) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3176,                mantissa = mantissa | (1 << 23);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3179,                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3180,                mantissa = mantissa >>> (1 - scaledExponent);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3181,                if (mostSignificantLostBit != 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3183,                    mantissa++;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3185,                return Float.intBitsToFloat(sign | mantissa);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3189,                return (sign == 0) ? 0.0f : -0.0f;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3193,            if (exponent == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3196,                while ((mantissa >>> 23) != 1) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3197,                    mantissa = mantissa << 1;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3198,                    --scaledExponent;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3200,                ++scaledExponent;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3201,                mantissa = mantissa & 0x007fffff;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3203,                if (scaledExponent < 255) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3204,                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3206,                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3209,            } else if (scaledExponent < 255) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3210,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3212,                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3252,        if (Double.isNaN(d) || Double.isNaN(direction)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3253,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3254,        } else if (d == direction) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3255,            return direction;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3256,        } else if (Double.isInfinite(d)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3257,            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3258,        } else if (d == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3259,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3264,        final long bits = Double.doubleToLongBits(d);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3265,        final long sign = bits & 0x8000000000000000L;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3266,        if ((direction < d) ^ (sign == 0L)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3267,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3269,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3308,        if (Double.isNaN(f) || Double.isNaN(direction)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3309,            return Float.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3310,        } else if (f == direction) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3311,            return (float) direction;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3312,        } else if (Float.isInfinite(f)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3313,            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3314,        } else if (f == 0f) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3315,            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3320,        final int bits = Float.floatToIntBits(f);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3321,        final int sign = bits & 0x80000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3322,        if ((direction < f) ^ (sign == 0)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3323,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3325,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3337,        if (x != x) { // NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3338,            return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3341,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3342,            return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3345,        y = (long) x;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3346,        if (x < 0 && y != x) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3347,            y--;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3350,        if (y == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3351,            return x*y;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3354,        return y;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3364,        if (x != x) { // NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3365,            return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3368,        y = floor(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3369,        if (y == x) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3370,            return y;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3373,        y += 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3375,        if (y == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3376,            return x*y;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3379,        return y;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3387,        double y = floor(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3388,        double d = x - y;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3390,        if (d > 0.5) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3391,            if (y == -1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3392,                return -0.0; // Preserve sign of operand,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3394,            return y+1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3396,        if (d < 0.5) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3397,            return y;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3401,        long z = (long) y;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3402,        return (z & 1) == 0 ? y : y + 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3410,        return (long) floor(x + 0.5);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3418,        return (int) floor(x + 0.5f);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3427,        return (a <= b) ? a : b;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3436,        return (a <= b) ? a : b;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3445,        if (a > b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3446,            return b;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3448,        if (a < b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3449,            return a;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3452,        if (a != b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3453,            return Float.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3457,        int bits = Float.floatToRawIntBits(a);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3458,        if (bits == 0x80000000) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3459,            return a;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3461,        return b;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3470,        if (a > b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3471,            return b;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3473,        if (a < b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3474,            return a;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3477,        if (a != b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3478,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3482,        long bits = Double.doubleToRawLongBits(a);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3483,        if (bits == 0x8000000000000000L) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3484,            return a;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3486,        return b;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3495,        return (a <= b) ? b : a;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3504,        return (a <= b) ? b : a;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3513,        if (a > b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3514,            return a;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3516,        if (a < b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3517,            return b;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3520,        if (a != b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3521,            return Float.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3525,        int bits = Float.floatToRawIntBits(a);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3526,        if (bits == 0x80000000) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3527,            return b;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3529,        return a;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3538,        if (a > b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3539,            return a;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3541,        if (a < b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3542,            return b;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3545,        if (a != b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3546,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3550,        long bits = Double.doubleToRawLongBits(a);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3551,        if (bits == 0x8000000000000000L) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3552,            return b;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3554,        return a;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3572,        if (Double.isInfinite(x) || Double.isInfinite(y)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3573,            return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3574,        } else if (Double.isNaN(x) || Double.isNaN(y)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3575,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3578,            final int expX = getExponent(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3579,            final int expY = getExponent(y);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3580,            if (expX > expY + 27) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3582,                return abs(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3583,            } else if (expY > expX + 27) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3585,                return abs(y);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3589,                final int middleExp = (expX + expY) / 2;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3592,"                final double scaledX = scalb(x, -middleExp);",0.0,0,,0
org/apache/commons/math/util/FastMath,37,3593,"                final double scaledY = scalb(y, -middleExp);",0.0,0,,0
org/apache/commons/math/util/FastMath,37,3596,                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3599,"                return scalb(scaledH, middleExp);",0.0,0,,0
org/apache/commons/math/util/FastMath,37,3627,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation",0.0,0,,0
org/apache/commons/math/util/FastMath,37,3639,        long m = Double.doubleToLongBits(magnitude);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3640,        long s = Double.doubleToLongBits(sign);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3641,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3642,            return magnitude;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3644,        return -magnitude; // flip sign,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3656,        int m = Float.floatToIntBits(magnitude);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3657,        int s = Float.floatToIntBits(sign);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3658,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3659,            return magnitude;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3661,        return -magnitude; // flip sign,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3674,        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3687,        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3696,        PrintStream out = System.out;,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3697,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_A"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);",0.0,0,,0
org/apache/commons/math/util/FastMath,37,3698,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_B"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);",0.0,0,,0
org/apache/commons/math/util/FastMath,37,3699,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_A"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);",0.0,0,,0
org/apache/commons/math/util/FastMath,37,3700,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_B"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);",0.0,0,,0
org/apache/commons/math/util/FastMath,37,3701,"        FastMathCalc.printarray(out, ""LN_MANT"",LN_MANT_LEN, lnMant.LN_MANT);",0.0,0,,0
org/apache/commons/math/util/FastMath,37,3702,"        FastMathCalc.printarray(out, ""SINE_TABLE_A"", SINE_TABLE_LEN, SINE_TABLE_A);",0.0,0,,0
org/apache/commons/math/util/FastMath,37,3703,"        FastMathCalc.printarray(out, ""SINE_TABLE_B"", SINE_TABLE_LEN, SINE_TABLE_B);",0.0,0,,0
org/apache/commons/math/util/FastMath,37,3704,"        FastMathCalc.printarray(out, ""COSINE_TABLE_A"", SINE_TABLE_LEN, COSINE_TABLE_A);",0.0,0,,0
org/apache/commons/math/util/FastMath,37,3705,"        FastMathCalc.printarray(out, ""COSINE_TABLE_B"", SINE_TABLE_LEN, COSINE_TABLE_B);",0.0,0,,0
org/apache/commons/math/util/FastMath,37,3706,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_A"", SINE_TABLE_LEN, TANGENT_TABLE_A);",0.0,0,,0
org/apache/commons/math/util/FastMath,37,3707,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_B"", SINE_TABLE_LEN, TANGENT_TABLE_B);",0.0,0,,0
org/apache/commons/math/util/FastMath,37,3708,    },0.0,0,,0
org/apache/commons/math/util/FastMath,37,3791,    private static class lnMant {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3796,            if (RECOMPUTE_TABLES_AT_RUNTIME) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3797,                LN_MANT = new double[FastMath.LN_MANT_LEN][];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3800,                for (int i = 0; i < LN_MANT.length; i++) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3801,                    final double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3802,                    LN_MANT[i] = FastMathCalc.slowLog(d);,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3804,            } else if (LOAD_RESOURCES) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3805,                LN_MANT = FastMathResources.loadLnMant();,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3807,                LN_MANT = FastMathLiteralArrays.loadLnMant();,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3809,        },0.0,0,,0
org/apache/commons/math/util/FastMath,37,3723,                EXP_INT_TABLE_A = new double[FastMath.EXP_INT_TABLE_LEN];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3724,                EXP_INT_TABLE_B = new double[FastMath.EXP_INT_TABLE_LEN];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3726,                final double tmp[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3727,                final double recip[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3730,                for (int i = 0; i < FastMath.EXP_INT_TABLE_MAX_INDEX; i++) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3731,"                    FastMathCalc.expint(i, tmp);",0.0,0,,0
org/apache/commons/math/util/FastMath,37,3732,                    EXP_INT_TABLE_A[i + FastMath.EXP_INT_TABLE_MAX_INDEX] = tmp[0];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3733,                    EXP_INT_TABLE_B[i + FastMath.EXP_INT_TABLE_MAX_INDEX] = tmp[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3735,                    if (i != 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3737,"                        FastMathCalc.splitReciprocal(tmp, recip);",0.0,0,,0
org/apache/commons/math/util/FastMath,37,3738,                        EXP_INT_TABLE_A[FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[0];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3739,                        EXP_INT_TABLE_B[FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3742,            } else if (LOAD_RESOURCES) {,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3743,                final double[][] expInt = FastMathResources.loadExpInt();,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3744,                EXP_INT_TABLE_A = expInt[0];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3745,                EXP_INT_TABLE_B = expInt[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,37,3746,            } else {,0.0,0,,0
org/apache/commons/math/complex/Complex,37,89,"        this(real, 0.0);",0.0,0,,0
org/apache/commons/math/complex/Complex,37,90,    },0.0,0,,0
org/apache/commons/math/complex/Complex,37,116,        if (isNaN) {,0.0,0,,0
org/apache/commons/math/complex/Complex,37,117,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,119,        if (isInfinite()) {,0.0,0,,0
org/apache/commons/math/complex/Complex,37,120,            return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,122,        if (FastMath.abs(real) < FastMath.abs(imaginary)) {,0.0,0,,0
org/apache/commons/math/complex/Complex,37,123,            if (imaginary == 0.0) {,0.0,0,,0
org/apache/commons/math/complex/Complex,37,124,                return FastMath.abs(real);,0.0,0,,0
org/apache/commons/math/complex/Complex,37,126,            double q = real / imaginary;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,127,            return FastMath.abs(imaginary) * FastMath.sqrt(1 + q * q);,0.0,0,,0
org/apache/commons/math/complex/Complex,37,129,            if (real == 0.0) {,0.0,0,,0
org/apache/commons/math/complex/Complex,37,130,                return FastMath.abs(imaginary);,0.0,0,,0
org/apache/commons/math/complex/Complex,37,132,            double q = imaginary / real;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,133,            return FastMath.abs(real) * FastMath.sqrt(1 + q * q);,0.0,0,,0
org/apache/commons/math/complex/Complex,37,157,        MathUtils.checkNotNull(addend);,0.0,0,,0
org/apache/commons/math/complex/Complex,37,158,        if (isNaN || addend.isNaN) {,0.0,0,,0
org/apache/commons/math/complex/Complex,37,159,            return NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,162,"        return createComplex(real + addend.getReal(),",0.0,0,,0
org/apache/commons/math/complex/Complex,37,175,        if (isNaN || Double.isNaN(addend)) {,0.0,0,,0
org/apache/commons/math/complex/Complex,37,176,            return NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,179,"        return createComplex(real + addend, imaginary);",0.0,0,,0
org/apache/commons/math/complex/Complex,37,197,        if (isNaN) {,0.0,0,,0
org/apache/commons/math/complex/Complex,37,198,            return NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,201,"        return createComplex(real, -imaginary);",0.0,0,,0
org/apache/commons/math/complex/Complex,37,248,        MathUtils.checkNotNull(divisor);,0.0,0,,0
org/apache/commons/math/complex/Complex,37,249,        if (isNaN || divisor.isNaN) {,0.0,0,,0
org/apache/commons/math/complex/Complex,37,250,            return NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,253,        final double c = divisor.getReal();,0.0,0,,0
org/apache/commons/math/complex/Complex,37,254,        final double d = divisor.getImaginary();,0.0,0,,0
org/apache/commons/math/complex/Complex,37,255,        if (c == 0.0 && d == 0.0) {,0.0,0,,0
org/apache/commons/math/complex/Complex,37,256,            return NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,259,        if (divisor.isInfinite() && !isInfinite()) {,0.0,0,,0
org/apache/commons/math/complex/Complex,37,260,            return ZERO;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,263,        if (FastMath.abs(c) < FastMath.abs(d)) {,0.0,0,,0
org/apache/commons/math/complex/Complex,37,264,            double q = c / d;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,265,            double denominator = c * q + d;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,266,"            return createComplex((real * q + imaginary) / denominator,",0.0,0,,0
org/apache/commons/math/complex/Complex,37,269,            double q = d / c;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,270,            double denominator = d * q + c;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,271,"            return createComplex((imaginary * q + real) / denominator,",0.0,0,,0
org/apache/commons/math/complex/Complex,37,285,        if (isNaN || Double.isNaN(divisor)) {,0.0,0,,0
org/apache/commons/math/complex/Complex,37,286,            return NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,288,        if (divisor == 0d) {,0.0,0,,0
org/apache/commons/math/complex/Complex,37,289,            return NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,291,        if (Double.isInfinite(divisor)) {,0.0,0,,0
org/apache/commons/math/complex/Complex,37,292,            return !isInfinite() ? ZERO : NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,294,"        return createComplex(real / divisor,",0.0,0,,0
org/apache/commons/math/complex/Complex,37,300,        if (isNaN) {,0.0,0,,0
org/apache/commons/math/complex/Complex,37,301,            return NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,304,        if (real == 0.0 && imaginary == 0.0) {,0.0,0,,0
org/apache/commons/math/complex/Complex,37,305,            return NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,308,        if (isInfinite) {,0.0,0,,0
org/apache/commons/math/complex/Complex,37,309,            return ZERO;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,312,        if (FastMath.abs(real) < FastMath.abs(imaginary)) {,0.0,0,,0
org/apache/commons/math/complex/Complex,37,313,            double q = real / imaginary;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,314,            double scale = 1. / (real * q + imaginary);,0.0,0,,0
org/apache/commons/math/complex/Complex,37,315,"            return createComplex(scale * q, -scale);",0.0,0,,0
org/apache/commons/math/complex/Complex,37,317,            double q = imaginary / real;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,318,            double scale = 1. / (imaginary * q + real);,0.0,0,,0
org/apache/commons/math/complex/Complex,37,319,"            return createComplex(scale, -scale * q);",0.0,0,,0
org/apache/commons/math/complex/Complex,37,340,        if (this == other) {,0.0,0,,0
org/apache/commons/math/complex/Complex,37,341,            return true;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,343,        if (other instanceof Complex){,0.0,0,,0
org/apache/commons/math/complex/Complex,37,344,            Complex c = (Complex)other;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,345,            if (c.isNaN) {,0.0,0,,0
org/apache/commons/math/complex/Complex,37,346,                return isNaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,348,                return (real == c.real) && (imaginary == c.imaginary);,0.0,0,,0
org/apache/commons/math/complex/Complex,37,351,        return false;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,363,        if (isNaN) {,0.0,0,,0
org/apache/commons/math/complex/Complex,37,364,            return 7;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,366,        return 37 * (17 * MathUtils.hash(imaginary) +,0.0,0,,0
org/apache/commons/math/complex/Complex,37,396,        return isNaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,409,        return isInfinite;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,438,        MathUtils.checkNotNull(factor);,0.0,0,,0
org/apache/commons/math/complex/Complex,37,439,        if (isNaN || factor.isNaN) {,0.0,0,,0
org/apache/commons/math/complex/Complex,37,440,            return NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,442,        if (Double.isInfinite(real) ||,0.0,0,,0
org/apache/commons/math/complex/Complex,37,447,            return INF;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,449,"        return createComplex(real * factor.real - imaginary * factor.imaginary,",0.0,0,,0
org/apache/commons/math/complex/Complex,37,462,        if (isNaN) {,0.0,0,,0
org/apache/commons/math/complex/Complex,37,463,            return NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,465,        if (Double.isInfinite(real) ||,0.0,0,,0
org/apache/commons/math/complex/Complex,37,467,            return INF;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,469,"        return createComplex(real * factor, imaginary * factor);",0.0,0,,0
org/apache/commons/math/complex/Complex,37,481,        if (isNaN || Double.isNaN(factor)) {,0.0,0,,0
org/apache/commons/math/complex/Complex,37,482,            return NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,484,        if (Double.isInfinite(real) ||,0.0,0,,0
org/apache/commons/math/complex/Complex,37,488,            return INF;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,490,"        return createComplex(real * factor, imaginary * factor);",0.0,0,,0
org/apache/commons/math/complex/Complex,37,501,        if (isNaN) {,0.0,0,,0
org/apache/commons/math/complex/Complex,37,502,            return NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,505,"        return createComplex(-real, -imaginary);",0.0,0,,0
org/apache/commons/math/complex/Complex,37,528,        MathUtils.checkNotNull(subtrahend);,0.0,0,,0
org/apache/commons/math/complex/Complex,37,529,        if (isNaN || subtrahend.isNaN) {,0.0,0,,0
org/apache/commons/math/complex/Complex,37,530,            return NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,533,"        return createComplex(real - subtrahend.getReal(),",0.0,0,,0
org/apache/commons/math/complex/Complex,37,546,        if (isNaN || Double.isNaN(subtrahend)) {,0.0,0,,0
org/apache/commons/math/complex/Complex,37,547,            return NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,549,"        return createComplex(real - subtrahend, imaginary);",0.0,0,,0
org/apache/commons/math/complex/Complex,37,569,        if (isNaN) {,0.0,0,,0
org/apache/commons/math/complex/Complex,37,570,            return NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,573,        return this.add(this.sqrt1z().multiply(I)).log(),0.0,0,,0
org/apache/commons/math/complex/Complex,37,594,        if (isNaN) {,0.0,0,,0
org/apache/commons/math/complex/Complex,37,595,            return NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,598,        return sqrt1z().add(this.multiply(I)).log(),0.0,0,,0
org/apache/commons/math/complex/Complex,37,619,        if (isNaN) {,0.0,0,,0
org/apache/commons/math/complex/Complex,37,620,            return NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,623,        return this.add(I).divide(I.subtract(this)).log(),0.0,0,,0
org/apache/commons/math/complex/Complex,37,660,        if (isNaN) {,0.0,0,,0
org/apache/commons/math/complex/Complex,37,661,            return NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,664,"        return createComplex(FastMath.cos(real) * FastMath.cosh(imaginary),",0.0,0,,0
org/apache/commons/math/complex/Complex,37,700,        if (isNaN) {,0.0,0,,0
org/apache/commons/math/complex/Complex,37,701,            return NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,704,"        return createComplex(FastMath.cosh(real) * FastMath.cos(imaginary),",0.0,0,,0
org/apache/commons/math/complex/Complex,37,741,        if (isNaN) {,0.0,0,,0
org/apache/commons/math/complex/Complex,37,742,            return NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,745,        double expReal = FastMath.exp(real);,0.0,0,,0
org/apache/commons/math/complex/Complex,37,746,"        return createComplex(expReal *  FastMath.cos(imaginary),",0.0,0,,0
org/apache/commons/math/complex/Complex,37,786,        if (isNaN) {,0.0,0,,0
org/apache/commons/math/complex/Complex,37,787,            return NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,790,"        return createComplex(FastMath.log(abs()),",0.0,0,,0
org/apache/commons/math/complex/Complex,37,816,        MathUtils.checkNotNull(x);,0.0,0,,0
org/apache/commons/math/complex/Complex,37,817,        return this.log().multiply(x).exp();,0.0,0,,0
org/apache/commons/math/complex/Complex,37,828,        return this.log().multiply(x).exp();,0.0,0,,0
org/apache/commons/math/complex/Complex,37,864,        if (isNaN) {,0.0,0,,0
org/apache/commons/math/complex/Complex,37,865,            return NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,868,"        return createComplex(FastMath.sin(real) * FastMath.cosh(imaginary),",0.0,0,,0
org/apache/commons/math/complex/Complex,37,904,        if (isNaN) {,0.0,0,,0
org/apache/commons/math/complex/Complex,37,905,            return NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,908,"        return createComplex(FastMath.sinh(real) * FastMath.cos(imaginary),",0.0,0,,0
org/apache/commons/math/complex/Complex,37,947,        if (isNaN) {,0.0,0,,0
org/apache/commons/math/complex/Complex,37,948,            return NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,951,        if (real == 0.0 && imaginary == 0.0) {,0.0,0,,0
org/apache/commons/math/complex/Complex,37,952,"            return createComplex(0.0, 0.0);",0.0,0,,0
org/apache/commons/math/complex/Complex,37,955,        double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);,0.0,0,,0
org/apache/commons/math/complex/Complex,37,956,        if (real >= 0.0) {,0.0,0,,0
org/apache/commons/math/complex/Complex,37,957,"            return createComplex(t, imaginary / (2.0 * t));",0.0,0,,0
org/apache/commons/math/complex/Complex,37,959,"            return createComplex(FastMath.abs(imaginary) / (2.0 * t),",0.0,0,,0
org/apache/commons/math/complex/Complex,37,982,"        return createComplex(1.0, 0.0).subtract(this.multiply(this)).sqrt();",0.0,0,,0
org/apache/commons/math/complex/Complex,37,1019,            return NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,1064,            return NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,1094,"        return FastMath.atan2(getImaginary(), getReal());",0.0,0,,0
org/apache/commons/math/complex/Complex,37,1121,        if (n <= 0) {,0.0,0,,0
org/apache/commons/math/complex/Complex,37,1122,"            throw new NotPositiveException(LocalizedFormats.CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N,",0.0,0,,0
org/apache/commons/math/complex/Complex,37,1126,        final List<Complex> result = new ArrayList<Complex>();,0.0,0,,0
org/apache/commons/math/complex/Complex,37,1128,        if (isNaN) {,0.0,0,,0
org/apache/commons/math/complex/Complex,37,1129,            result.add(NaN);,0.0,0,,0
org/apache/commons/math/complex/Complex,37,1130,            return result;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,1132,        if (isInfinite()) {,0.0,0,,0
org/apache/commons/math/complex/Complex,37,1133,            result.add(INF);,0.0,0,,0
org/apache/commons/math/complex/Complex,37,1134,            return result;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,1138,"        final double nthRootOfAbs = FastMath.pow(abs(), 1.0 / n);",0.0,0,,0
org/apache/commons/math/complex/Complex,37,1141,        final double nthPhi = getArgument() / n;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,1142,        final double slice = 2 * FastMath.PI / n;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,1143,        double innerPart = nthPhi;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,1144,        for (int k = 0; k < n ; k++) {,0.0,0,,0
org/apache/commons/math/complex/Complex,37,1146,            final double realPart = nthRootOfAbs *  FastMath.cos(innerPart);,0.0,0,,0
org/apache/commons/math/complex/Complex,37,1147,            final double imaginaryPart = nthRootOfAbs *  FastMath.sin(innerPart);,0.0,0,,0
org/apache/commons/math/complex/Complex,37,1148,"            result.add(createComplex(realPart, imaginaryPart));",0.0,0,,0
org/apache/commons/math/complex/Complex,37,1149,            innerPart += slice;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,1152,        return result;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,1180,            return NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,1192,        if (Double.isNaN(realPart)) {,0.0,0,,0
org/apache/commons/math/complex/Complex,37,1193,            return NaN;,0.0,0,,0
org/apache/commons/math/complex/Complex,37,1195,        return new Complex(realPart);,0.0,0,,0
org/apache/commons/math/complex/Complex,37,1207,"        return createComplex(real, imaginary);",0.0,0,,0
org/apache/commons/math/complex/Complex,37,1212,        return ComplexField.getInstance();,0.0,0,,0
org/apache/commons/math/complex/Complex,37,1218,"        return ""("" + real + "", "" + imaginary + "")"";",0.0,0,,0
org/apache/commons/math/complex/Complex,37,57,"public class Complex implements FieldElement<Complex>, Serializable  {",0.0,0,,0
org/apache/commons/math/exception/NotPositiveException,37,37,"        super(value, 0, true);",0.0,0,,0
org/apache/commons/math/exception/NotPositiveException,37,38,    },0.0,0,,0
org/apache/commons/math/exception/NotPositiveException,37,47,"        super(specific, value, 0, true);",0.0,0,,0
org/apache/commons/math/exception/NotPositiveException,37,48,    },0.0,0,,0
org/apache/commons/math/exception/NumberIsTooSmallException,37,50,        this(boundIsAllowed ?,0.0,0,,0
org/apache/commons/math/exception/NumberIsTooSmallException,37,54,    },0.0,0,,0
org/apache/commons/math/exception/NumberIsTooSmallException,37,68,"        super(specific, wrong, min);",0.0,0,,0
org/apache/commons/math/exception/NumberIsTooSmallException,37,70,        this.min = min;,0.0,0,,0
org/apache/commons/math/exception/NumberIsTooSmallException,37,71,        this.boundIsAllowed = boundIsAllowed;,0.0,0,,0
org/apache/commons/math/exception/NumberIsTooSmallException,37,72,    },0.0,0,,0
org/apache/commons/math/exception/NumberIsTooSmallException,37,78,        return boundIsAllowed;,0.0,0,,0
org/apache/commons/math/exception/NumberIsTooSmallException,37,85,        return min;,0.0,0,,0
org/apache/commons/math/exception/MathIllegalNumberException,37,46,"        super(pattern, wrong, arguments);",0.0,0,,0
org/apache/commons/math/exception/MathIllegalNumberException,37,47,        argument = wrong;,0.0,0,,0
org/apache/commons/math/exception/MathIllegalNumberException,37,48,    },0.0,0,,0
org/apache/commons/math/exception/MathIllegalNumberException,37,54,        return argument;,0.0,0,,0
org/apache/commons/math/exception/MathIllegalArgumentException,37,44,                                        Object ... args) {,0.0,0,,0
org/apache/commons/math/exception/MathIllegalArgumentException,37,45,        context = new ExceptionContext(this);,0.0,0,,0
org/apache/commons/math/exception/MathIllegalArgumentException,37,46,"        context.addMessage(pattern, args);",0.0,0,,0
org/apache/commons/math/exception/MathIllegalArgumentException,37,47,    },0.0,0,,0
org/apache/commons/math/exception/MathIllegalArgumentException,37,51,        return context;,0.0,0,,0
org/apache/commons/math/exception/MathIllegalArgumentException,37,57,        return context.getMessage();,0.0,0,,0
org/apache/commons/math/exception/MathIllegalArgumentException,37,63,        return context.getLocalizedMessage();,0.0,0,,0
org/apache/commons/math/exception/NullArgumentException,37,41,        this(LocalizedFormats.NULL_NOT_ALLOWED);,0.0,0,,0
org/apache/commons/math/exception/NullArgumentException,37,42,    },0.0,0,,0
org/apache/commons/math/exception/NullArgumentException,37,50,"        super(pattern, arguments);",0.0,0,,0
org/apache/commons/math/exception/NullArgumentException,37,51,    },0.0,0,,0
