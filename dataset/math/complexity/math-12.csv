dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,other,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,246,        random.setSeed(seed);,0,0,0,1,2,0,3,0,0,3,21,5,0.42857,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,247,        randomData.reSeed(seed);,0,0,0,1,2,0,3,0,0,3,24,5,0.42857,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,248,    },0,0,0,0,1,0,0,0,0,1,1,2,0.42857,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,461,        delegate.reSeed(seed);,0,0,0,1,2,0,3,0,0,3,22,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,462,    },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,648,       getRan().setSeed(seed);,0,0,0,1,4,0,3,0,1,4,23,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,649,    },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,374,        if (shape < 1) {,1,1,0,1,3,1,0,0,0,5,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,413,        final double d = shape - 0.333333333333333333;,2,1,0,0,0,2,0,0,1,4,46,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,414,        final double c = 1 / (3 * FastMath.sqrt(d));,1,2,0,2,4,2,3,0,1,7,44,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,417,            final double x = random.nextGaussian();,1,0,0,1,2,2,2,0,1,6,39,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,418,            final double v = (1 + c * x) * (1 + c * x) * (1 + c * x);,7,7,0,1,6,2,0,0,1,6,57,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,420,            if (v <= 0) {,1,1,0,1,3,1,0,0,0,5,13,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,424,            final double x2 = x * x;,3,1,0,0,0,2,0,0,1,4,24,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,425,            final double u = random.nextDouble();,1,0,0,1,2,2,2,0,1,6,37,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,428,            if (u < 1 - 0.0331 * x2 * x2) {,3,3,0,1,3,1,0,0,0,5,31,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,429,                return scale * d * v;,3,1,0,0,0,1,0,0,0,3,21,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,432,            if (FastMath.log(u) < 0.5 * x2 + d * (1 - v + FastMath.log(v))) {,3,6,0,3,9,1,6,0,0,6,65,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,433,                return scale * d * v;,3,1,0,0,0,1,0,0,0,3,21,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,311,        final double n = random.nextGaussian();,1,0,0,1,2,2,2,0,1,6,39,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,312,        return FastMath.exp(scale + shape * n);,3,2,0,1,2,1,2,0,0,6,39,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,79,"        super(K, M1, M2, M3, seed);",5,0,0,0,2,1,0,0,1,4,27,3,0.31034,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,80,    },0,0,0,0,1,0,0,0,0,1,1,2,0.31034,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,714,        if (rand == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.31034,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,715,            initRan();,0,0,0,1,2,0,1,0,1,4,10,6,0.31034,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,717,        return rand;,1,0,0,0,0,1,0,0,0,2,12,4,0.31034,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,725,        rand = new Well19937c(System.currentTimeMillis() + System.identityHashCode(this));,1,1,0,2,6,2,4,1,2,8,82,4,0.31034,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,726,    },0,0,0,0,1,0,0,0,0,1,1,2,0.31034,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,132,"        this(k, m1, m2, m3, new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",6,2,0,1,14,5,0,0,0,5,83,4,0.25,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,133,    },0,0,0,0,1,0,0,0,0,1,1,2,0.25,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,86,        final int indexRm1 = iRm1[index];,1,0,1,0,2,2,0,0,1,5,33,4,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,87,        final int indexRm2 = iRm2[index];,1,0,1,0,2,2,0,0,1,5,33,4,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,89,        final int v0       = v[index];,1,0,1,0,2,2,0,0,1,5,30,4,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,90,        final int vM1      = v[i1[index]];,1,0,1,0,4,2,0,0,1,5,34,4,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,91,        final int vM2      = v[i2[index]];,1,0,1,0,4,2,0,0,1,5,34,4,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,92,        final int vM3      = v[i3[index]];,1,0,1,0,4,2,0,0,1,5,34,4,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,94,        final int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);,1,3,1,1,8,2,0,0,1,7,71,4,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,95,        final int z1 = (v0 ^ (v0 << 25))  ^ (vM1 ^ (vM1 >>> 27));,5,5,0,2,8,2,0,0,1,6,57,4,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,96,        final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));,4,4,0,2,6,2,0,0,1,6,49,4,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,97,        final int z3 = z1      ^ z2;,3,1,0,0,0,2,0,0,1,4,28,4,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,98,        int z4 = z0 ^ (z1 ^ (z1 << 9)) ^ (z2 ^ (z2 << 21)) ^ (z3 ^ (z3 >>> 21));,8,7,0,2,12,1,0,0,0,5,72,5,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,100,        v[index]     = z3;,1,0,1,0,2,0,0,0,1,4,18,4,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,101,        v[indexRm1]  = z4;,1,0,1,0,2,0,0,0,1,4,18,4,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,102,        v[indexRm2] &= 0x80000000;,0,0,1,0,2,0,0,0,1,3,26,4,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,103,        index        = indexRm1;,2,0,0,0,0,0,0,0,1,2,24,4,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,108,        z4 = z4 ^ ((z4 <<  7) & 0xe46e1700);,3,3,0,2,4,0,0,0,1,5,36,4,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,109,        z4 = z4 ^ ((z4 << 15) & 0x9b868000);,3,3,0,2,4,0,0,0,1,5,36,4,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,111,        return z4 >>> (32 - bits);,2,2,0,1,2,1,0,0,0,5,26,4,0.225,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,101,        if (Double.isNaN(nextGaussian)) {,0,0,0,2,5,1,3,0,0,4,33,5,0.1875,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,103,            final double x = nextDouble();,1,0,0,1,2,2,1,0,2,6,30,6,0.1875,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,104,            final double y = nextDouble();,1,0,0,1,2,2,1,0,2,6,30,6,0.1875,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,105,            final double alpha = 2 * FastMath.PI * x;,4,1,0,0,0,2,0,0,1,4,41,6,0.1875,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,106,            final double r      = FastMath.sqrt(-2 * FastMath.log(y));,1,1,0,2,4,2,5,0,2,7,58,6,0.1875,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,107,            random       = r * FastMath.cos(alpha);,2,1,0,1,2,0,3,0,1,6,39,6,0.1875,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,108,            nextGaussian = r * FastMath.sin(alpha);,2,1,0,1,2,0,3,0,1,6,39,6,0.1875,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,109,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.1875,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,111,            random = nextGaussian;,2,0,0,0,0,0,0,0,1,2,22,6,0.1875,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,112,            nextGaussian = Double.NaN;,3,0,0,0,0,0,0,0,1,2,26,6,0.1875,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,115,        return random;,1,0,0,0,0,1,0,0,0,2,14,4,0.1875,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2274,"                return sinQ(xa, xb);",0,0,0,0,2,1,3,0,1,4,20,5,0.17308,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2328,"                return cosQ(xa, xb);",0,0,0,0,2,1,3,0,1,4,20,5,0.17308,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2293,        int quadrant = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.16981,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2296,        double xa = x;,2,0,0,0,0,1,0,0,0,2,14,5,0.16981,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2297,        if (x < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.16981,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2301,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,5,3,0,1,3,1,0,0,0,5,49,4,0.16981,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2306,        double xb = 0;,1,0,0,0,0,1,0,0,0,2,14,5,0.16981,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2307,        if (xa > 3294198.0) {,1,1,0,1,3,1,0,0,0,5,21,4,0.16981,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2326,        switch (quadrant) {,1,0,0,1,3,1,0,0,0,4,19,4,0.16981,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1820,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,5,5,0,1,5,0,0,0,1,5,44,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1822,            c = a + t;,3,1,0,0,0,0,0,0,1,3,10,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1823,            d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1824,            a = c;,2,0,0,0,0,0,0,0,1,2,6,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1825,            b = b + d;,3,1,0,0,0,0,0,0,1,3,10,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1841,        final double pi2a = 1.5707963267948966;,1,0,0,0,0,2,0,0,1,3,39,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1842,        final double pi2b = 6.123233995736766E-17;,1,0,0,0,0,2,0,0,1,3,42,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1844,        final double a = pi2a - xa;,3,1,0,0,0,2,0,0,1,4,27,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1845,        double b = -(a - pi2a + xa);,4,2,0,1,2,1,0,0,1,6,28,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1846,        b += pi2b - xb;,3,1,0,0,0,0,0,0,1,3,15,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1848,"        return sinQ(a, b);",0,0,0,0,2,1,3,0,1,4,18,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2226,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2227,        int quadrant = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2229,        double xb = 0.0;,1,0,0,0,0,1,0,0,0,2,16,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2232,        xa = x;,2,0,0,0,0,0,0,0,1,2,7,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2233,        if (x < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2239,        if (xa == 0.0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2247,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,5,3,0,1,3,1,0,0,0,5,49,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2252,        if (xa > 3294198.0) {,1,1,0,1,3,1,0,0,0,5,21,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2268,        if (negative) {,1,0,0,1,3,1,0,0,0,4,15,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2272,        switch (quadrant) {,1,0,0,1,3,1,0,0,0,4,19,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1717,        int idx = (int) ((xa * 8.0) + 0.5);,2,2,0,2,6,2,0,0,0,5,35,5,0.16364,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1718,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,2,1,1,0,2,2,0,0,1,6,54,4,0.16364,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1721,        final double sintA = SINE_TABLE_A[idx];,1,0,1,0,2,2,0,0,1,5,39,4,0.16364,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1722,        final double sintB = SINE_TABLE_B[idx];,1,0,1,0,2,2,0,0,1,5,39,4,0.16364,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1723,        final double costA = COSINE_TABLE_A[idx];,1,0,1,0,2,2,0,0,1,5,41,4,0.16364,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1724,        final double costB = COSINE_TABLE_B[idx];,1,0,1,0,2,2,0,0,1,5,41,4,0.16364,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1727,        double sinEpsA = epsilon;,2,0,0,0,0,1,0,0,0,2,25,5,0.16364,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1728,        double sinEpsB = polySine(epsilon);,1,0,0,1,2,1,2,0,1,6,35,5,0.16364,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1729,        final double cosEpsA = 1.0;,1,0,0,0,0,2,0,0,1,3,27,4,0.16364,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1730,        final double cosEpsB = polyCosine(epsilon);,1,0,0,1,2,2,2,0,2,6,43,4,0.16364,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1733,        final double temp = sinEpsA * HEX_40000000;,3,1,0,0,0,2,0,0,1,4,43,4,0.16364,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1734,        double temp2 = (sinEpsA + temp) - temp;,4,2,0,1,2,1,0,0,0,5,39,5,0.16364,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1735,        sinEpsB +=  sinEpsA - temp2;,3,1,0,0,0,0,0,0,1,3,28,4,0.16364,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1736,        sinEpsA = temp2;,2,0,0,0,0,0,0,0,1,2,16,4,0.16364,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1762,        double a = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.16364,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1763,        double b = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.16364,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1765,        double t = sintA;,2,0,0,0,0,1,0,0,0,2,17,5,0.16364,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1766,        double c = a + t;,3,1,0,0,0,1,0,0,0,3,17,5,0.16364,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1767,        double d = -(c - a - t);,4,1,0,1,2,1,0,0,1,6,24,5,0.16364,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1768,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.16364,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1769,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.16364,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1771,        t = costA * sinEpsA;,3,1,0,0,0,0,0,0,1,3,20,4,0.16364,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1772,        c = a + t;,3,1,0,0,0,0,0,0,1,3,10,4,0.16364,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1773,        d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,4,0.16364,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1774,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.16364,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1775,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.16364,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1777,        b = b + sintA * cosEpsB + costA * sinEpsB;,6,4,0,0,0,0,0,0,1,3,42,4,0.16364,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1792,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,9,6,0,0,0,0,0,0,1,3,68,4,0.16364,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1819,        if (xb != 0.0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.16364,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1828,        result = a + b;,3,1,0,0,0,0,0,0,1,3,15,4,0.16364,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1830,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.16364,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1678,        double x2 = x*x;,3,1,0,0,0,1,0,0,0,3,16,5,0.15254,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1680,        double p = 2.7553817452272217E-6;,1,0,0,0,0,1,0,0,0,2,33,5,0.15254,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1681,        p = p * x2 + -1.9841269659586505E-4;,3,2,0,0,0,0,0,0,2,3,36,4,0.15254,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1682,        p = p * x2 + 0.008333333333329196;,3,2,0,0,0,0,0,0,1,3,34,4,0.15254,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1683,        p = p * x2 + -0.16666666666666666;,3,2,0,0,0,0,0,0,2,3,34,4,0.15254,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1686,        p = p * x2 * x;,4,1,0,0,0,0,0,0,1,3,15,4,0.15254,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1688,        return p;,1,0,0,0,0,1,0,0,0,2,9,4,0.15254,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1698,        double x2 = x*x;,3,1,0,0,0,1,0,0,0,3,16,5,0.15254,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1700,        double p = 2.479773539153719E-5;,1,0,0,0,0,1,0,0,0,2,32,5,0.15254,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1701,        p = p * x2 + -0.0013888888689039883;,3,2,0,0,0,0,0,0,2,3,36,4,0.15254,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1702,        p = p * x2 + 0.041666666666621166;,3,2,0,0,0,0,0,0,1,3,34,4,0.15254,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1703,        p = p * x2 + -0.49999999999999994;,3,2,0,0,0,0,0,0,2,3,34,4,0.15254,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1704,        p *= x2;,2,0,0,0,0,0,0,0,1,2,8,4,0.15254,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1706,        return p;,1,0,0,0,0,1,0,0,0,2,9,4,0.15254,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,256,        return standardDeviation * random.nextGaussian() + mean;,2,2,0,1,2,1,2,0,0,6,56,4,0.1,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,87,        final long high = ((long) next(26)) << 26;,1,1,0,2,6,3,1,0,2,7,42,4,0.08654,1,1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,88,        final int  low  = next(26);,1,0,0,1,2,2,1,0,2,6,27,4,0.08654,1,1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,89,        return (high | low) * 0x1.0p-52d;,2,2,0,1,2,1,0,0,0,5,33,4,0.08654,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2332,"                return -cosQ(xa, xb);",0,0,0,0,2,1,3,0,2,4,21,5,0.07843,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2262,            final CodyWaite cw = new CodyWaite(xa);,2,0,0,1,2,2,0,2,2,6,39,7,0.07692,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2263,            quadrant = cw.getK() & 3;,1,1,0,1,2,0,2,0,1,6,25,7,0.07692,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2264,            xa = cw.getRemA();,1,0,0,1,2,0,2,0,1,5,18,7,0.07692,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2265,            xb = cw.getRemB();,1,0,0,1,2,0,2,0,1,5,18,7,0.07692,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2317,            final CodyWaite cw = new CodyWaite(xa);,2,0,0,1,2,2,0,2,2,6,39,7,0.07692,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2318,            quadrant = cw.getK() & 3;,1,1,0,1,2,0,2,0,1,6,25,7,0.07692,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2319,            xa = cw.getRemA();,1,0,0,1,2,0,2,0,1,5,18,7,0.07692,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2320,            xb = cw.getRemB();,1,0,0,1,2,0,2,0,1,5,18,7,0.07692,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2278,"                return -sinQ(xa, xb);",0,0,0,0,2,1,3,0,2,4,21,5,0.07547,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3808,        CodyWaite(double xa) {,2,0,0,1,3,1,0,0,0,4,22,3,0.07407,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3811,            int k = (int)(xa * 0.6366197723675814);,2,1,0,1,4,2,0,0,0,5,39,6,0.07407,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3817,                double a = -k * 1.570796251296997;,2,1,0,0,0,1,0,0,1,4,34,8,0.07407,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3818,                remA = xa + a;,3,1,0,0,0,0,0,0,1,3,14,7,0.07407,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3819,                remB = -(remA - xa - a);,4,1,0,1,2,0,0,0,2,5,24,7,0.07407,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3821,                a = -k * 7.549789948768648E-8;,2,1,0,0,0,0,0,0,2,3,30,7,0.07407,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3822,                double b = remA;,2,0,0,0,0,1,0,0,0,2,16,8,0.07407,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3823,                remA = a + b;,3,1,0,0,0,0,0,0,1,3,13,7,0.07407,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3824,                remB += -(remA - b - a);,4,1,0,1,2,0,0,0,2,5,24,7,0.07407,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3826,                a = -k * 6.123233995736766E-17;,2,1,0,0,0,0,0,0,2,3,31,7,0.07407,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3827,                b = remA;,2,0,0,0,0,0,0,0,1,2,9,7,0.07407,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3828,                remA = a + b;,3,1,0,0,0,0,0,0,1,3,13,7,0.07407,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3829,                remB += -(remA - b - a);,4,1,0,1,2,0,0,0,2,5,24,7,0.07407,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3831,                if (remA > 0) {,1,1,0,1,3,1,0,0,0,5,15,7,0.07407,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3832,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.07407,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3841,            this.finalK = k;,2,0,0,0,0,1,0,0,1,3,16,5,0.07407,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3842,            this.finalRemA = remA;,2,0,0,0,0,1,0,0,1,3,22,5,0.07407,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3843,            this.finalRemB = remB;,2,0,0,0,0,1,0,0,1,3,22,5,0.07407,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3844,        },0,0,0,0,1,0,0,0,0,1,1,2,0.07407,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3850,            return finalK;,1,0,0,0,0,1,0,0,0,2,14,5,0.07407,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3856,            return finalRemA;,1,0,0,0,0,1,0,0,0,2,17,5,0.07407,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3862,            return finalRemB;,1,0,0,0,0,1,0,0,0,2,17,5,0.07407,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,98,"        this(scale, shape, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);",3,0,0,0,2,1,0,0,0,3,54,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,99,    },0,0,0,0,1,0,0,0,0,1,1,2,0.05263,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,112,"        this(new Well19937c(), scale, shape, inverseCumAccuracy);",3,0,0,1,4,2,0,1,1,6,57,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,113,    },0,0,0,0,1,0,0,0,0,1,1,2,0.05263,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,130,        super(rng);,1,0,0,1,2,1,0,0,1,5,11,3,0.05263,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,132,        if (shape <= 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,136,        this.scale = scale;,2,0,0,0,0,1,0,0,1,3,19,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,137,        this.shape = shape;,2,0,0,0,0,1,0,0,1,3,19,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,138,        this.solverAbsoluteAccuracy = inverseCumAccuracy;,2,0,0,0,0,1,0,0,1,3,49,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,139,    },0,0,0,0,1,0,0,0,0,1,1,2,0.05263,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,64,    private static final double SQRT2PI = FastMath.sqrt(2 * FastMath.PI);,3,1,0,1,2,4,2,0,3,7,69,2,0.05263,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,67,    private static final double SQRT2 = FastMath.sqrt(2.0);,1,0,0,1,2,4,2,0,3,6,55,2,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1179,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,3,5,0,1,3,1,0,0,0,5,45,6,0.04245,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,71,"        this(mean, sd, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);",3,0,0,0,2,1,0,0,0,3,50,4,0.03571,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,72,    },0,0,0,0,1,0,0,0,0,1,1,2,0.03571,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,86,"        this(new Well19937c(), mean, sd, inverseCumAccuracy);",3,0,0,1,4,2,0,1,1,6,53,4,0.03571,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,87,    },0,0,0,0,1,0,0,0,0,1,1,2,0.03571,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1297,            lnza = -0.16624882440418567;,1,0,0,0,0,0,0,0,2,2,28,6,0.03435,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1298,            lnza = lnza * epsilon + 0.19999954120254515;,3,2,0,0,0,0,0,0,1,3,44,6,0.03435,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1299,            lnza = lnza * epsilon + -0.2499999997677497;,3,2,0,0,0,0,0,0,2,3,44,6,0.03435,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1300,            lnza = lnza * epsilon + 0.3333333333332802;,3,2,0,0,0,0,0,0,1,3,43,6,0.03435,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1301,            lnza = lnza * epsilon + -0.5;,3,2,0,0,0,0,0,0,2,3,29,6,0.03435,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1302,            lnza = lnza * epsilon + 1.0;,3,2,0,0,0,0,0,0,1,3,28,6,0.03435,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1303,            lnza = lnza * epsilon;,3,1,0,0,0,0,0,0,1,3,22,6,0.03435,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1120,"        return log(x, null);",0,0,0,0,2,1,2,0,1,4,20,4,0.03396,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,50,    @Deprecated,1,0,0,0,0,0,0,0,0,1,11,3,0.03285,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,60,    private double solverAbsoluteAccuracy = SOLVER_DEFAULT_ABSOLUTE_ACCURACY;,2,0,0,0,0,2,0,0,1,3,73,2,0.03285,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,76,    protected AbstractRealDistribution(RandomGenerator rng) {,2,0,0,1,3,1,0,1,1,6,57,2,0.03285,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,77,        random = rng;,2,0,0,0,0,0,0,0,1,2,13,4,0.03285,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,78,    },0,0,0,0,1,0,0,0,0,1,1,2,0.03285,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3777,    private static class lnMant {,1,0,0,0,1,3,0,0,2,4,29,2,0.03158,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3791,                LN_MANT = FastMathLiteralArrays.loadLnMant();,1,0,0,1,2,0,2,0,1,5,45,7,0.03158,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3793,        },0,0,0,0,1,0,0,0,0,1,1,2,0.03158,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1228,        final double[] lnm = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,4,2,0,2,10,3,0,0,1,6,79,4,0.03158,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1239,        final double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,4,4,0,2,6,2,0,0,1,6,95,4,0.03158,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1241,        double lnza = 0.0;,1,0,0,0,0,1,0,0,0,2,18,5,0.03158,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1242,        double lnzb = 0.0;,1,0,0,0,0,1,0,0,0,2,18,5,0.03158,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1244,        if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.03158,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1320,        double a = LN_2_A*exp;,3,1,0,0,0,1,0,0,0,3,22,5,0.03158,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1321,        double b = 0.0;,1,0,0,0,0,1,0,0,0,2,15,5,0.03158,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1322,        double c = a+lnm[0];,2,1,1,0,2,1,0,0,0,5,20,5,0.03158,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1323,        double d = -(c-a-lnm[0]);,3,1,1,1,4,1,0,0,1,7,25,5,0.03158,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1324,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.03158,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1325,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.03158,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1327,        c = a + lnza;,3,1,0,0,0,0,0,0,1,3,13,4,0.03158,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1328,        d = -(c - a - lnza);,4,1,0,1,2,0,0,0,2,5,20,4,0.03158,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1329,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.03158,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1330,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.03158,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1332,        c = a + LN_2_B*exp;,4,2,0,0,0,0,0,0,1,3,19,4,0.03158,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1333,        d = -(c - a - LN_2_B*exp);,5,2,0,1,2,0,0,0,2,5,26,4,0.03158,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1334,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.03158,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1335,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.03158,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1337,        c = a + lnm[1];,2,1,1,0,2,0,0,0,1,5,15,4,0.03158,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1338,        d = -(c - a - lnm[1]);,3,1,1,1,4,0,0,0,2,6,22,4,0.03158,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1339,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.03158,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1340,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.03158,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1342,        c = a + lnzb;,3,1,0,0,0,0,0,0,1,3,13,4,0.03158,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1343,        d = -(c - a - lnzb);,4,1,0,1,2,0,0,0,2,5,20,4,0.03158,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1344,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.03158,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1345,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.03158,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1347,        if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.03158,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1352,        return a + b;,2,1,0,0,0,1,0,0,0,3,13,4,0.03158,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,12,6174,        return LN_MANT.clone();,0,0,0,1,2,1,2,0,0,4,23,5,0.03158,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1156,        int exp = (int)(bits >> 52)-1023;,2,2,0,1,4,2,0,0,0,5,33,5,0.03136,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1158,        if ((bits & 0x7ff0000000000000L) == 0) {,1,2,0,2,5,1,0,0,0,5,40,4,0.03136,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1178,        if (exp == -1 || exp == 0) {,2,3,0,1,3,1,0,0,1,6,28,4,0.03136,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1130,        if (x==0) { // Handle special case of +0/-0,1,1,0,1,3,2,0,0,0,5,43,4,0.03125,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1133,        long bits = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,39,5,0.03125,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1136,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,3,4,0,2,5,1,0,0,0,5,50,4,0.03125,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1147,        if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.03125,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,12,29,    private static final double[] EXP_INT_A = new double[] {,1,0,0,0,5,6,0,0,3,4,56,2,0.0301,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,12,1535,    private static final double[] EXP_INT_B = new double[] {,1,0,0,0,5,6,0,0,3,4,56,2,0.0301,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,12,3043,    private static final double[] EXP_FRAC_A = new double[] {,1,0,0,0,5,6,0,0,3,4,57,2,0.0301,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,12,4074,    private static final double[] EXP_FRAC_B = new double[] {,1,0,0,0,5,6,0,0,3,4,57,2,0.0301,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,12,5103,    private static final double[][] LN_MANT = new double[][] {,1,0,0,0,9,6,0,0,3,4,58,2,0.0301,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,898,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,5,1,0,0,2,0,0,0,1,4,71,6,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,899,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,5,1,0,0,2,0,0,0,1,4,71,6,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,888,            intVal = (int) x;,2,0,0,1,2,1,0,0,1,5,17,6,0.0292,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,890,            if (intVal > 709) {,1,1,0,1,3,1,0,0,0,5,19,6,0.0292,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,114,    public RandomDataImpl() {,1,0,0,1,3,1,0,0,1,5,25,2,0.02778,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,115,        delegate = new RandomDataGenerator();,1,0,0,1,2,1,0,1,2,6,37,4,0.02778,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,116,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02778,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,131,    public RandomDataGenerator() {,1,0,0,1,3,1,0,0,1,5,30,2,0.02778,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,118,    private RandomGenerator rand = null;,1,0,0,0,0,1,0,1,1,4,36,2,0.02778,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,121,    private SecureRandom secRand = null;,1,0,0,0,0,1,0,1,1,4,36,2,0.02778,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,132,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02778,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,72,"        this(k, m1, m2, m3, null);",4,0,0,0,2,1,0,0,0,3,26,4,0.02744,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,73,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02744,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,155,            setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0,1,0,2,6,1,5,0,1,6,68,6,0.02744,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,156,            return;,0,0,0,0,0,1,0,0,1,2,7,5,0.02744,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,179,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",2,2,0,1,14,4,1,0,1,7,71,4,0.02744,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,180,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02744,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,57,"        super(K, M1, M2, M3);",4,0,0,0,2,1,0,0,1,4,21,3,0.02744,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,58,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02744,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,94,"    protected AbstractWell(final int k, final int m1, final int m2, final int m3, final int[] seed) {",6,0,0,0,5,11,0,0,6,4,97,2,0.02679,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,99,        final int w = 32;,1,0,0,0,0,2,0,0,1,3,17,4,0.02679,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,100,        final int r = (k + w - 1) / w;,4,3,0,1,2,2,0,0,1,6,30,4,0.02679,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,101,        this.v      = new int[r];,1,0,1,0,2,3,0,0,1,5,25,4,0.02679,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,102,        this.index  = 0;,1,0,0,0,0,1,0,0,1,3,16,4,0.02679,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,106,        iRm1 = new int[r];,1,0,1,0,2,2,0,0,1,5,18,4,0.02679,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,107,        iRm2 = new int[r];,1,0,1,0,2,2,0,0,1,5,18,4,0.02679,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,108,        i1   = new int[r];,1,0,1,0,2,2,0,0,1,5,18,4,0.02679,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,109,        i2   = new int[r];,1,0,1,0,2,2,0,0,1,5,18,4,0.02679,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,110,        i3   = new int[r];,1,0,1,0,2,2,0,0,1,5,18,4,0.02679,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,111,        for (int j = 0; j < r; ++j) {,4,1,0,1,3,2,0,0,1,6,29,4,0.02679,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,112,            iRm1[j] = (j + r - 1) % r;,3,3,1,1,4,0,0,0,1,6,26,6,0.02679,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,113,            iRm2[j] = (j + r - 2) % r;,3,3,1,1,4,0,0,0,1,6,26,6,0.02679,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,114,            i1[j]   = (j + m1)    % r;,3,2,1,1,4,0,0,0,1,6,26,6,0.02679,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,115,            i2[j]   = (j + m2)    % r;,3,2,1,1,4,0,0,0,1,6,26,6,0.02679,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,116,            i3[j]   = (j + m3)    % r;,3,2,1,1,4,0,0,0,1,6,26,6,0.02679,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,120,        setSeed(seed);,0,0,0,1,2,0,2,0,1,4,14,4,0.02679,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,122,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02679,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,154,        if (seed == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.02679,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,159,"        System.arraycopy(seed, 0, v, 0, Math.min(seed.length, v.length));",4,0,0,0,4,0,6,0,0,3,65,5,0.02679,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,161,        if (seed.length < v.length) {,4,1,0,1,3,1,0,0,0,5,29,4,0.02679,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,162,            for (int i = seed.length; i < v.length; ++i) {,7,1,0,1,3,2,0,0,1,6,46,6,0.02679,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,163,                final long l = v[i - seed.length];,4,1,1,0,2,2,0,0,1,6,34,8,0.02679,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,164,                v[i] = (int) ((1812433253l * (l ^ (l >> 30)) + i) & 0xffffffffL);,3,5,1,4,12,1,0,0,1,7,65,8,0.02679,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,168,        index = 0;,1,0,0,0,0,0,0,0,1,2,10,4,0.02679,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,169,        clear();  // Clear normal deviate cache,0,0,0,1,2,0,1,0,1,4,39,4,0.02679,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,170,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02679,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,379,        return Math.sqrt(a);,0,0,0,1,2,1,3,0,0,4,20,5,0.02406,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,104,        super(rng);,1,0,0,1,2,1,0,0,1,5,11,3,0.02273,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,106,        if (sd <= 0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.02273,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,110,        this.mean = mean;,2,0,0,0,0,1,0,0,1,3,17,4,0.02273,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,111,        standardDeviation = sd;,2,0,0,0,0,0,0,0,1,2,23,4,0.02273,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,112,        solverAbsoluteAccuracy = inverseCumAccuracy;,2,0,0,0,0,0,0,0,1,2,44,4,0.02273,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,113,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02273,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,44,    private static final double SQRT2PI = FastMath.sqrt(2 * FastMath.PI);,3,1,0,1,2,4,2,0,3,7,69,2,0.02273,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,46,    private static final double SQRT2 = FastMath.sqrt(2.0);,1,0,0,1,2,4,2,0,3,6,55,2,0.02273,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,37,    public BitsStreamGenerator() {,1,0,0,1,3,1,0,0,1,5,30,2,0.02079,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,38,        nextGaussian = Double.NaN;,3,0,0,0,0,0,0,0,1,2,26,4,0.02079,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,39,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02079,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,167,        nextGaussian = Double.NaN;,3,0,0,0,0,0,0,0,1,2,26,4,0.02079,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,168,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02079,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,831,"        return exp(x, 0.0, null);",0,0,0,0,2,1,2,0,1,4,25,4,0.01869,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,946,            result = tempC*z + tempB + tempA;,5,3,0,0,0,0,0,0,1,3,33,6,0.01869,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,906,        final int intFrac = (int) ((x - intVal) * 1024.0);,3,2,0,2,6,3,0,0,1,6,50,4,0.01778,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,907,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,3,0,1,0,2,2,0,0,1,5,64,4,0.01778,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,908,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,3,0,1,0,2,2,0,0,1,5,64,4,0.01778,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,914,        final double epsilon = x - (intVal + intFrac / 1024.0);,4,3,0,1,2,2,0,0,1,6,55,4,0.01778,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,923,        double z = 0.04168701738764507;,1,0,0,0,0,1,0,0,0,2,31,5,0.01778,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,924,        z = z * epsilon + 0.1666666505023083;,3,2,0,0,0,0,0,0,1,3,37,4,0.01778,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,925,        z = z * epsilon + 0.5000000000042687;,3,2,0,0,0,0,0,0,1,3,37,4,0.01778,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,926,        z = z * epsilon + 1.0;,3,2,0,0,0,0,0,0,1,3,22,4,0.01778,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,927,        z = z * epsilon + -3.940510424527919E-20;,3,2,0,0,0,0,0,0,2,3,41,4,0.01778,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,934,        double tempA = intPartA * fracPartA;,3,1,0,0,0,1,0,0,0,3,36,5,0.01778,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,935,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,7,5,0,0,0,1,0,0,0,3,82,5,0.01778,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,941,        final double tempC = tempB + tempA;,3,1,0,0,0,2,0,0,1,4,35,4,0.01778,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,943,        if (extra != 0.0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.01778,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,949,        if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.01778,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,955,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.01778,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3744,    private static class ExpFracTable {,1,0,0,0,1,3,0,0,2,4,35,2,0.01778,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3770,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,1,0,0,1,2,0,2,0,1,5,56,7,0.01778,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3771,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,1,0,0,1,2,0,2,0,1,5,56,7,0.01778,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3773,        },0,0,0,0,1,0,0,0,0,1,1,2,0.01778,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,12,6142,        return EXP_INT_A.clone();,0,0,0,1,2,1,2,0,0,4,25,5,0.01778,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,12,6150,        return EXP_INT_B.clone();,0,0,0,1,2,1,2,0,0,4,25,5,0.01778,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,12,6158,        return EXP_FRAC_A.clone();,0,0,0,1,2,1,2,0,0,4,26,5,0.01778,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,12,6166,        return EXP_FRAC_B.clone();,0,0,0,1,2,1,2,0,0,4,26,5,0.01778,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3705,    private static class ExpIntTable {,1,0,0,0,1,3,0,0,2,4,34,2,0.01778,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3737,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,1,0,0,1,2,0,2,0,1,5,54,7,0.01778,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3738,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,1,0,0,1,2,0,2,0,1,5,54,7,0.01778,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3740,        },0,0,0,0,1,0,0,0,0,1,1,2,0.01778,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,850,        if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.01688,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,97,    private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);,3,0,0,1,2,4,2,0,3,6,77,2,0.01593,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,115,    private static final double LN_QUICK_COEF[][] = {,1,0,0,0,5,4,0,0,3,4,49,2,0.01593,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,128,    private static final double LN_HI_PREC_COEF[][] = {,1,0,0,0,5,4,0,0,3,4,51,2,0.01593,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,141,    private static final double SINE_TABLE_A[] =,1,0,0,0,2,4,0,0,3,4,44,2,0.01593,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,160,    private static final double SINE_TABLE_B[] =,1,0,0,0,2,4,0,0,3,4,44,2,0.01593,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,179,    private static final double COSINE_TABLE_A[] =,1,0,0,0,2,4,0,0,3,4,46,2,0.01593,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,198,    private static final double COSINE_TABLE_B[] =,1,0,0,0,2,4,0,0,3,4,46,2,0.01593,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,218,    private static final double TANGENT_TABLE_A[] =,1,0,0,0,2,4,0,0,3,4,47,2,0.01593,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,237,    private static final double TANGENT_TABLE_B[] =,1,0,0,0,2,4,0,0,3,4,47,2,0.01593,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,256,    private static final long RECIP_2PI[] = new long[] {,1,0,0,0,5,6,0,0,3,4,52,2,0.01593,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,277,    private static final long PI_O_4_BITS[] = new long[] {,1,0,0,0,5,6,0,0,3,4,54,2,0.01593,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,285,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",1,0,0,0,4,4,0,0,3,4,126,2,0.01593,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,288,"    private static final double CBRTTWO[] = { 0.6299605249474366,",1,0,0,0,3,4,0,0,3,4,61,2,0.01593,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,93,"        this(shape, scale, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);",3,0,0,0,2,1,0,0,0,3,54,4,0.01299,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,94,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01299,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,111,"        this(new Well19937c(), shape, scale, inverseCumAccuracy);",3,0,0,1,4,2,0,1,1,6,57,4,0.01299,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,112,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01299,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,132,        super(rng);,1,0,0,1,2,1,0,0,1,5,11,3,0.01299,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,134,        if (shape <= 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.01299,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,137,        if (scale <= 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.01299,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,141,        this.shape = shape;,2,0,0,0,0,1,0,0,1,3,19,4,0.01299,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,142,        this.scale = scale;,2,0,0,0,0,1,0,0,1,3,19,4,0.01299,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,143,        this.solverAbsoluteAccuracy = inverseCumAccuracy;,2,0,0,0,0,1,0,0,1,3,49,4,0.01299,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,144,        this.shiftedShape = shape + Gamma.LANCZOS_G + 0.5;,4,1,0,0,0,1,0,0,1,4,50,4,0.01299,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,145,        final double aux = FastMath.E / (2.0 * FastMath.PI * shiftedShape);,6,2,0,1,2,2,0,0,1,6,67,4,0.01299,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,146,        this.densityPrefactor2 = shape * FastMath.sqrt(aux) / Gamma.lanczos(shape);,2,2,0,1,4,1,6,0,1,7,75,4,0.01299,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,147,        this.densityPrefactor1 = this.densityPrefactor2 / scale *,3,3,0,0,0,2,0,0,1,4,57,4,0.01299,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,150,        this.minY = shape + Gamma.LANCZOS_G - FastMath.log(Double.MAX_VALUE);,6,2,0,1,2,1,2,0,1,7,69,4,0.01299,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,151,        this.maxLogY = FastMath.log(Double.MAX_VALUE) / (shape - 1.0);,4,2,0,1,4,1,2,0,1,7,62,4,0.01299,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,152,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01299,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,513,        double sum = 0.0;,1,0,0,0,0,1,0,0,0,2,17,5,0.01111,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,514,        for (int i = LANCZOS.length - 1; i > 0; --i) {,5,2,0,1,3,2,0,0,1,6,46,4,0.01111,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,515,            sum = sum + (LANCZOS[i] / (x + i));,4,3,1,2,6,0,0,0,1,6,35,6,0.01111,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,517,        return sum + LANCZOS[0];,1,1,1,0,2,1,0,0,0,5,24,4,0.01111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,944,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,10,7,0,0,0,0,0,0,1,3,63,6,0.00952,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1490,        if (y == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.00943,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1502,        if (x == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.00943,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1526,        if (y == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.00943,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1540,        if (x < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.00943,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1557,        if (y < 8e298 && y > -8e298) {,2,3,0,1,3,1,0,0,1,6,30,4,0.00943,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1558,            double tmp1 = y * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,31,7,0.00943,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1559,            ya = y + tmp1 - tmp1;,4,2,0,0,0,0,0,0,1,3,21,6,0.00943,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1560,            yb = y - ya;,3,1,0,0,0,0,0,0,1,3,12,6,0.00943,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1561,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.00943,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1569,"        final double lores = log(x, lns);",1,0,0,0,2,2,3,0,2,5,33,4,0.00943,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1570,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0,0,0,2,5,2,3,0,0,4,73,5,0.00943,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1574,        double lna = lns[0];,1,0,1,0,2,1,0,0,0,4,20,5,0.00943,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1575,        double lnb = lns[1];,1,0,1,0,2,1,0,0,0,4,20,5,0.00943,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1578,        double tmp1 = lna * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,33,5,0.00943,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1579,        double tmp2 = lna + tmp1 - tmp1;,4,2,0,0,0,1,0,0,0,3,32,5,0.00943,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1580,        lnb += lna - tmp2;,3,1,0,0,0,0,0,0,1,3,18,4,0.00943,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1581,        lna = tmp2;,2,0,0,0,0,0,0,0,1,2,11,4,0.00943,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1584,        final double aa = lna * ya;,3,1,0,0,0,2,0,0,1,4,27,4,0.00943,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1585,        final double ab = lna * yb + lnb * ya + lnb * yb;,7,5,0,0,0,2,0,0,1,4,49,4,0.00943,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1587,        lna = aa+ab;,3,1,0,0,0,0,0,0,1,3,12,4,0.00943,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1588,        lnb = -(lna - aa - ab);,4,1,0,1,2,0,0,0,2,5,23,4,0.00943,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1590,        double z = 1.0 / 120.0;,1,1,0,0,0,1,0,0,0,3,23,5,0.00943,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1591,        z = z * lnb + (1.0 / 24.0);,3,3,0,1,2,0,0,0,1,5,27,4,0.00943,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1592,        z = z * lnb + (1.0 / 6.0);,3,3,0,1,2,0,0,0,1,5,26,4,0.00943,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1593,        z = z * lnb + 0.5;,3,2,0,0,0,0,0,0,1,3,18,4,0.00943,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1594,        z = z * lnb + 1.0;,3,2,0,0,0,0,0,0,1,3,18,4,0.00943,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1595,        z = z * lnb;,3,1,0,0,0,0,0,0,1,3,12,4,0.00943,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1597,"        final double result = exp(lna, z, null);",1,0,0,0,2,2,3,0,2,5,40,4,0.00943,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1599,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.00943,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1479,        if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.00935,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1443,        final double lns[] = new double[2];,1,0,0,0,4,4,0,0,1,4,35,4,0.00926,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1445,        if (y == 0.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.00926,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1449,        if (x != x) { // X is NaN,2,1,0,1,3,1,0,0,0,5,25,4,0.00926,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1454,        if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.00926,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1246,            double tmp = epsilon * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,36,7,0.00617,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1247,            double aa = epsilon + tmp - tmp;,4,2,0,0,0,1,0,0,0,3,32,7,0.00617,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1248,            double ab = epsilon - aa;,3,1,0,0,0,1,0,0,0,3,25,7,0.00617,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1249,            double xa = aa;,2,0,0,0,0,1,0,0,0,2,15,7,0.00617,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1250,            double xb = ab;,2,0,0,0,0,1,0,0,0,2,15,7,0.00617,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1253,            final double numer = bits & 0x3ffffffffffL;,2,1,0,0,0,2,0,0,1,4,43,6,0.00617,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1254,            final double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,3,2,0,1,2,2,0,0,1,6,65,6,0.00617,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1255,            aa = numer - xa*denom - xb * denom;,6,4,0,0,0,0,0,0,1,3,35,6,0.00617,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1256,            xb += aa / denom;,3,1,0,0,0,0,0,0,1,3,17,6,0.00617,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1259,            final double[] lnCoef_last = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];,3,1,1,0,4,2,0,0,1,6,71,6,0.00617,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1260,            double ya = lnCoef_last[0];,1,0,1,0,2,1,0,0,0,4,27,7,0.00617,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1261,            double yb = lnCoef_last[1];,1,0,1,0,2,1,0,0,0,4,27,7,0.00617,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1263,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,5,2,0,1,3,2,0,0,1,6,55,6,0.00617,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1265,                aa = ya * xa;,3,1,0,0,0,0,0,0,1,3,13,8,0.00617,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1266,                ab = ya * xb + yb * xa + yb * xb;,7,5,0,0,0,0,0,0,1,3,33,8,0.00617,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1268,                tmp = aa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,8,0.00617,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1269,                ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,8,0.00617,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1270,                yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,8,0.00617,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1273,                final double[] lnCoef_i = LN_HI_PREC_COEF[i];,1,0,1,0,4,2,0,0,1,5,45,8,0.00617,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1274,                aa = ya + lnCoef_i[0];,2,1,1,0,2,0,0,0,1,5,22,8,0.00617,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1275,                ab = yb + lnCoef_i[1];,2,1,1,0,2,0,0,0,1,5,22,8,0.00617,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1277,                tmp = aa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,8,0.00617,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1278,                ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,8,0.00617,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1279,                yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,8,0.00617,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1283,            aa = ya * xa;,3,1,0,0,0,0,0,0,1,3,13,6,0.00617,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1284,            ab = ya * xb + yb * xa + yb * xb;,7,5,0,0,0,0,0,0,1,3,33,6,0.00617,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1292,            lnza = aa + ab;,3,1,0,0,0,0,0,0,1,3,15,6,0.00617,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1293,            lnzb = -(lnza - aa - ab);,4,1,0,1,2,0,0,0,2,5,25,6,0.00617,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1294,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.00617,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1348,            hiPrec[0] = a;,1,0,1,0,2,0,0,0,1,4,14,6,0.00617,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1349,            hiPrec[1] = b;,1,0,1,0,2,0,0,0,1,4,14,6,0.00617,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,72,    private static final double[] LANCZOS = {,1,0,0,0,3,4,0,0,3,4,41,2,0.00595,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,91,    private static final double HALF_LOG_2_PI = 0.5 * FastMath.log(2.0 * FastMath.PI);,3,2,0,1,2,4,2,0,3,7,82,2,0.00595,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,861,            if (intVal > 709) {,1,1,0,1,3,1,0,0,0,5,19,6,0.00498,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,871,            if (intVal == 709) {,1,1,0,1,3,1,0,0,0,5,20,6,0.00498,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,881,            intVal++;,1,0,0,0,0,0,0,0,1,2,9,6,0.00498,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,883,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,5,1,0,0,2,0,0,0,1,4,71,6,0.00498,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,884,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,5,1,0,0,2,0,0,0,1,4,71,6,0.00498,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,886,            intVal = -intVal;,2,0,0,0,0,0,0,0,2,2,17,6,0.00498,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,851,            intVal = (int) -x;,2,0,0,1,2,1,0,0,2,5,18,6,0.00465,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,853,            if (intVal > 746) {,1,1,0,1,3,1,0,0,0,5,19,6,0.00465,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,83,"        this(k, m1, m2, m3, new int[] { seed });",5,0,0,0,6,3,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,84,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,142,        setSeed(new int[] { seed });,1,0,0,1,6,2,1,0,1,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,143,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,63,        return next(1) != 0;,0,1,0,1,2,1,1,0,1,6,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,68,        int i = 0;,1,0,0,0,0,1,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,69,        final int iEnd = bytes.length - 3;,3,1,0,0,0,2,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,70,        while (i < iEnd) {,2,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,71,            final int random = next(32);,1,0,0,1,2,2,1,0,2,6,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,72,            bytes[i]     = (byte) (random & 0xff);,1,1,1,1,6,1,0,0,1,7,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,73,            bytes[i + 1] = (byte) ((random >>  8) & 0xff);,2,3,1,2,8,1,0,0,1,7,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,74,            bytes[i + 2] = (byte) ((random >> 16) & 0xff);,2,3,1,2,8,1,0,0,1,7,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,75,            bytes[i + 3] = (byte) ((random >> 24) & 0xff);,2,3,1,2,8,1,0,0,1,7,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,76,            i += 4;,1,0,0,0,0,0,0,0,1,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,77,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,78,        int random = next(32);,1,0,0,1,2,1,1,0,1,6,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,79,        while (i < bytes.length) {,3,1,0,1,3,1,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,80,            bytes[i++] = (byte) (random & 0xff);,2,1,1,1,6,1,0,0,2,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,81,            random     = random >> 8;,2,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,83,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,94,        return next(23) * 0x1.0p-23f;,0,1,0,1,2,1,1,0,1,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,121,        return next(32);,0,0,0,1,2,1,1,0,1,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,140,        if (n > 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,141,            if ((n & -n) == n) {,3,2,0,2,5,1,0,0,1,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,142,                return (int) ((n * (long) next(31)) >> 31);,1,2,0,3,10,3,1,0,1,7,43,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,147,                bits = next(31);,1,0,0,1,2,0,1,0,2,5,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,148,                val = bits % n;,3,1,0,0,0,0,0,0,1,3,15,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,149,            } while (bits - val + (n - 1) < 0);,3,4,0,2,5,1,0,0,0,5,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,150,            return val;,1,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,152,        throw new NotStrictlyPositiveException(n);,1,0,0,1,2,2,0,1,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,157,        final long high  = ((long) next(32)) << 32;,1,1,0,2,6,3,1,0,2,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,158,        final long  low  = ((long) next(32)) & 0xffffffffL;,1,1,0,2,6,3,1,0,2,7,51,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,159,        return high | low;,2,1,0,0,0,1,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,64,"        super(K, M1, M2, M3, seed);",5,0,0,0,2,1,0,0,1,4,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,65,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,72,"        super(K, M1, M2, M3, seed);",5,0,0,0,2,1,0,0,1,4,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,73,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,12,38,"        super(value, 0, false);",1,0,0,0,2,1,0,0,2,4,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,12,39,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,12,48,"        super(specific, value, 0, false);",2,0,0,0,2,1,0,0,2,4,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,12,49,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,12,50,        this(boundIsAllowed ?,1,0,0,0,1,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,12,54,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,12,68,"        super(specific, wrong, min);",3,0,0,0,2,1,0,0,1,4,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,12,70,        this.min = min;,2,0,0,0,0,1,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,12,71,        this.boundIsAllowed = boundIsAllowed;,2,0,0,0,0,1,0,0,1,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,12,72,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,12,78,        return boundIsAllowed;,1,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,12,85,        return min;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,12,46,"        super(pattern, wrong, arguments);",3,0,0,0,2,1,0,0,1,4,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,12,47,        argument = wrong;,2,0,0,0,0,0,0,0,1,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,12,48,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,12,54,        return argument;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,12,44,                                        Object ... args) {,1,0,0,0,2,0,0,1,0,3,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,12,45,        context = new ExceptionContext(this);,1,0,0,1,2,2,0,1,2,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,12,46,"        context.addMessage(pattern, args);",0,0,0,0,2,0,4,0,0,2,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,12,47,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,12,51,        return context;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,12,57,        return context.getMessage();,0,0,0,1,2,1,2,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,12,63,        return context.getLocalizedMessage();,0,0,0,1,2,1,2,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,126,    public RandomDataImpl(RandomGenerator rand) {,2,0,0,1,3,1,0,1,1,6,45,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,127,        delegate = new RandomDataGenerator(rand);,2,0,0,1,2,1,0,1,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,128,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,136,        return delegate;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,156,        return delegate.nextHexString(len);,0,0,0,1,2,1,3,0,0,4,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,161,"       return delegate.nextInt(lower, upper);",0,0,0,0,2,1,4,0,0,3,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,166,"        return delegate.nextLong(lower, upper);",0,0,0,0,2,1,4,0,0,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,186,        return delegate.nextSecureHexString(len);,0,0,0,1,2,1,3,0,0,4,41,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,191,"        return delegate.nextSecureInt(lower, upper);",0,0,0,0,2,1,4,0,0,3,44,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,196,"        return delegate.nextSecureLong(lower,upper);",0,0,0,0,2,1,4,0,0,3,44,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,213,        return delegate.nextPoisson(mean);,0,0,0,1,2,1,3,0,0,4,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,218,"        return delegate.nextGaussian(mu,sigma);",0,0,0,0,2,1,4,0,0,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,233,        return delegate.nextExponential(mean);,0,0,0,1,2,1,3,0,0,4,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,248,"        return delegate.nextUniform(lower, upper);",0,0,0,0,2,1,4,0,0,3,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,265,"        return delegate.nextUniform(lower, upper, lowerInclusive);",0,0,0,0,2,1,5,0,0,3,58,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,279,"        return delegate.nextBeta(alpha, beta);",0,0,0,0,2,1,4,0,0,3,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,293,"        return delegate.nextBinomial(numberOfTrials, probabilityOfSuccess);",0,0,0,0,2,1,4,0,0,3,67,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,307,"        return delegate.nextCauchy(median, scale);",0,0,0,0,2,1,4,0,0,3,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,320,       return delegate.nextChiSquare(df);,0,0,0,1,2,1,3,0,0,4,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,336,"        return delegate.nextF(numeratorDf, denominatorDf);",0,0,0,0,2,1,4,0,0,3,50,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,363,"        return delegate.nextGamma(shape, scale);",0,0,0,0,2,1,4,0,0,3,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,383,"        return delegate.nextHypergeometric(populationSize, numberOfSuccesses, sampleSize);",0,0,0,0,2,1,5,0,0,3,82,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,401,"        return delegate.nextPascal(r, p);",0,0,0,0,2,1,4,0,0,3,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,415,        return delegate.nextT(df);,0,0,0,1,2,1,3,0,0,4,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,431,"        return delegate.nextWeibull(shape, scale);",0,0,0,0,2,1,4,0,0,3,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,447,"        return delegate.nextZipf(numberOfElements, exponent);",0,0,0,0,2,1,4,0,0,3,53,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,472,        delegate.reSeedSecure();,0,0,0,1,2,0,2,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,473,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,485,        delegate.reSeedSecure(seed);,0,0,0,1,2,0,3,0,0,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,486,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,493,        delegate.reSeed();,0,0,0,1,2,0,2,0,0,3,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,494,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,518,"       delegate.setSecureAlgorithm(algorithm, provider);",0,0,0,0,2,0,4,0,0,2,49,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,519,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,532,"        return delegate.nextPermutation(n, k);",0,0,0,0,2,1,4,0,0,3,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,550,"        return delegate.nextSample(c, k);",0,0,0,0,2,1,4,0,0,3,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,565,"        return distribution.inverseCumulativeProbability(nextUniform(0, 1));",0,0,0,0,4,1,3,0,1,4,68,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,581,"        return distribution.inverseCumulativeProbability(nextUniform(0, 1));",0,0,0,0,4,1,3,0,1,4,68,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,12,46,"        this(LocalizedFormats.OUT_OF_RANGE_SIMPLE, wrong, lo, hi);",5,0,0,0,2,1,0,0,0,3,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,12,47,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,12,62,"        super(specific, wrong, lo, hi);",4,0,0,0,2,1,0,0,1,4,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,12,63,        this.lo = lo;,2,0,0,0,0,1,0,0,1,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,12,64,        this.hi = hi;,2,0,0,0,0,1,0,0,1,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,12,65,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,12,71,        return lo;,1,0,0,0,0,1,0,0,0,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,12,77,        return hi;,1,0,0,0,0,1,0,0,0,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,12,50,        this(boundIsAllowed ?,1,0,0,0,1,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,12,54,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,12,67,"        super(specific, wrong, max);",3,0,0,0,2,1,0,0,1,4,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,12,69,        this.max = max;,2,0,0,0,0,1,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,12,70,        this.boundIsAllowed = boundIsAllowed;,2,0,0,0,0,1,0,0,1,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,12,71,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,12,77,        return boundIsAllowed;,1,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,12,84,        return max;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotFiniteNumberException,12,40,"        this(LocalizedFormats.NOT_FINITE_NUMBER, wrong, args);",4,0,0,0,2,1,0,0,0,3,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotFiniteNumberException,12,41,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotFiniteNumberException,12,53,"        super(specific, wrong, args);",3,0,0,0,2,1,0,0,1,4,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotFiniteNumberException,12,54,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotANumberException,12,35,"        super(LocalizedFormats.NAN_NOT_ALLOWED, Double.NaN);",4,0,0,0,2,1,0,0,1,4,52,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotANumberException,12,36,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,12,37,"        super(value, 0, true);",1,0,0,0,2,1,0,0,2,4,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,12,38,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,12,47,"        super(specific, value, 0, true);",2,0,0,0,2,1,0,0,2,4,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,12,48,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,141,    public RandomDataGenerator(RandomGenerator rand) {,2,0,0,1,3,1,0,1,1,6,50,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,142,        this.rand = rand;,2,0,0,0,0,1,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,143,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,162,        if (len <= 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,163,"            throw new NotStrictlyPositiveException(LocalizedFormats.LENGTH, len);",3,0,0,0,2,2,0,1,1,5,69,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,167,        RandomGenerator ran = getRan();,1,0,0,1,2,0,1,1,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,170,        StringBuilder outBuffer = new StringBuilder();,1,0,0,1,2,1,0,2,1,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,173,        byte[] randomBytes = new byte[(len / 2) + 1];,2,2,0,1,6,3,0,0,0,5,45,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,174,        ran.nextBytes(randomBytes);,0,0,0,1,2,0,3,0,0,3,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,177,        for (int i = 0; i < randomBytes.length; i++) {,5,1,0,1,3,2,0,0,1,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,178,            Integer c = Integer.valueOf(randomBytes[i]);,1,0,1,1,4,0,2,1,0,6,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,185,            String hex = Integer.toHexString(c.intValue() + 128);,1,1,0,2,4,0,4,1,0,6,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,188,            if (hex.length() == 1) {,0,1,0,2,5,1,2,0,0,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,189,"                hex = ""0"" + hex;",2,1,0,0,0,0,0,0,2,3,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,191,            outBuffer.append(hex);,0,0,0,1,2,0,3,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,193,"        return outBuffer.toString().substring(0, len);",0,0,0,1,4,1,4,0,0,4,46,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,198,        if (lower >= upper) {,2,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,199,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",2,0,0,0,1,2,0,1,1,5,87,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,202,        double r = getRan().nextDouble();,1,0,0,1,4,1,2,0,1,6,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,203,        double scaled = r * upper + (1.0 - r) * lower + r;,6,5,0,1,2,1,0,0,0,5,50,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,204,        return (int) FastMath.floor(scaled);,0,0,0,1,4,2,3,0,0,4,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,209,        if (lower >= upper) {,2,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,210,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",2,0,0,0,1,2,0,1,1,5,87,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,213,        double r = getRan().nextDouble();,1,0,0,1,4,1,2,0,1,6,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,214,        double scaled = r * upper + (1.0 - r) * lower + r;,6,5,0,1,2,1,0,0,0,5,50,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,215,        return (long)FastMath.floor(scaled);,0,0,0,1,4,2,3,0,0,4,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,236,        if (len <= 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,237,"            throw new NotStrictlyPositiveException(LocalizedFormats.LENGTH, len);",3,0,0,0,2,2,0,1,1,5,69,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,241,        SecureRandom secRan = getSecRan();,1,0,0,1,2,0,1,1,1,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,242,        MessageDigest alg = null;,1,0,0,0,0,0,0,1,0,2,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,244,"            alg = MessageDigest.getInstance(""SHA-1"");",1,0,0,1,2,0,2,0,2,5,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,248,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,245,        } catch (NoSuchAlgorithmException ex) {,1,0,0,1,4,1,0,1,0,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,247,            throw new MathInternalError(ex);,1,0,0,1,2,2,0,1,1,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,249,        alg.reset();,0,0,0,1,2,0,2,0,0,3,12,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,252,        int numIter = (len / 40) + 1;,2,2,0,1,2,1,0,0,0,5,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,254,        StringBuilder outBuffer = new StringBuilder();,1,0,0,1,2,1,0,2,1,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,255,        for (int iter = 1; iter < numIter + 1; iter++) {,4,2,0,1,3,2,0,0,1,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,256,            byte[] randomBytes = new byte[40];,1,0,0,0,4,3,0,0,0,3,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,257,            secRan.nextBytes(randomBytes);,0,0,0,1,2,0,3,0,0,3,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,258,            alg.update(randomBytes);,0,0,0,1,2,0,3,0,0,3,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,261,            byte[] hash = alg.digest();,1,0,0,1,4,1,2,0,0,5,27,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,264,            for (int i = 0; i < hash.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,265,                Integer c = Integer.valueOf(hash[i]);,1,0,1,1,4,0,2,1,0,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,272,                String hex = Integer.toHexString(c.intValue() + 128);,1,1,0,2,4,0,4,1,0,6,53,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,275,                if (hex.length() == 1) {,0,1,0,2,5,1,2,0,0,5,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,276,"                    hex = ""0"" + hex;",2,1,0,0,0,0,0,0,2,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,278,                outBuffer.append(hex);,0,0,0,1,2,0,3,0,0,3,22,9,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,281,"        return outBuffer.toString().substring(0, len);",0,0,0,1,4,1,4,0,0,4,46,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,286,        if (lower >= upper) {,2,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,287,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",2,0,0,0,1,2,0,1,1,5,87,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,290,        SecureRandom sec = getSecRan();,1,0,0,1,2,0,1,1,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,291,        final double r = sec.nextDouble();,1,0,0,1,2,2,2,0,1,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,292,        final double scaled = r * upper + (1.0 - r) * lower + r;,6,5,0,1,2,2,0,0,1,6,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,293,        return (int)FastMath.floor(scaled);,0,0,0,1,4,2,3,0,0,4,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,298,        if (lower >= upper) {,2,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,299,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",2,0,0,0,1,2,0,1,1,5,87,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,302,        SecureRandom sec = getSecRan();,1,0,0,1,2,0,1,1,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,303,        final double r = sec.nextDouble();,1,0,0,1,2,2,2,0,1,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,304,        final double scaled = r * upper + (1.0 - r) * lower + r;,6,5,0,1,2,2,0,0,1,6,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,305,        return (long)FastMath.floor(scaled);,0,0,0,1,4,2,3,0,0,4,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,323,"        return new PoissonDistribution(getRan(), mean,",1,0,0,1,3,2,1,1,2,7,46,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,330,        if (sigma <= 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,331,"            throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sigma);",3,0,0,0,2,2,0,1,1,5,83,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,333,        return sigma * getRan().nextGaussian() + mu;,2,2,0,1,4,1,2,0,1,7,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,348,"        return new ExponentialDistribution(getRan(), mean,",1,0,0,1,3,2,1,1,2,7,50,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,375,"        return new GammaDistribution(getRan(),shape, scale,",2,0,0,1,3,2,1,1,2,7,51,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,392,"        return new HypergeometricDistribution(getRan(),populationSize,",1,0,0,1,3,2,1,1,2,7,62,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,407,"        return new PascalDistribution(getRan(), r, p).sample();",2,0,0,1,6,2,2,1,2,7,55,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,418,"        return new TDistribution(getRan(), df,",1,0,0,1,3,2,1,1,2,7,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,432,"        return new WeibullDistribution(getRan(), shape, scale,",2,0,0,1,3,2,1,1,2,7,54,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,446,"        return new ZipfDistribution(getRan(), numberOfElements, exponent).sample();",2,0,0,1,6,2,2,1,2,7,75,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,457,"        return new BetaDistribution(getRan(), alpha, beta,",2,0,0,1,3,2,1,1,2,7,50,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,469,"        return new BinomialDistribution(getRan(), numberOfTrials, probabilityOfSuccess).sample();",2,0,0,1,6,2,2,1,2,7,89,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,480,"        return new CauchyDistribution(getRan(), median, scale,",2,0,0,1,3,2,1,1,2,7,54,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,491,"        return new ChiSquaredDistribution(getRan(), df,",1,0,0,1,3,2,1,1,2,7,47,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,505,"        return new FDistribution(getRan(), numeratorDf, denominatorDf,",2,0,0,1,3,2,1,1,2,7,62,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,524,"        return nextUniform(lower, upper, false);",0,0,0,0,2,1,3,0,2,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,545,        if (lower >= upper) {,2,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,546,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",2,0,0,0,1,2,0,1,1,5,87,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,550,        if (Double.isInfinite(lower)) {,0,0,0,2,5,1,3,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,551,"            throw new NotFiniteNumberException(LocalizedFormats.INFINITE_BOUND, lower);",3,0,0,0,2,2,0,1,1,5,75,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,553,        if (Double.isInfinite(upper)) {,0,0,0,2,5,1,3,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,554,"            throw new NotFiniteNumberException(LocalizedFormats.INFINITE_BOUND, upper);",3,0,0,0,2,2,0,1,1,5,75,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,557,        if (Double.isNaN(lower) || Double.isNaN(upper)) {,0,1,0,2,7,1,6,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,558,            throw new NotANumberException();,0,0,0,1,2,2,0,1,1,5,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,561,        final RandomGenerator generator = getRan();,1,0,0,1,2,1,1,1,2,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,564,        double u = generator.nextDouble();,1,0,0,1,2,1,2,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,565,        while (!lowerInclusive && u <= 0.0) {,2,2,0,1,3,1,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,566,            u = generator.nextDouble();,1,0,0,1,2,0,2,0,1,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,569,        return u * upper + (1.0 - u) * lower;,4,4,0,1,2,1,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,585,        if (k > n) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,586,"            throw new NumberIsTooLargeException(LocalizedFormats.PERMUTATION_EXCEEDS_N,",2,0,0,0,1,2,0,1,1,5,75,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,589,        if (k <= 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,590,"            throw new NotStrictlyPositiveException(LocalizedFormats.PERMUTATION_SIZE,",2,0,0,0,1,2,0,1,1,5,73,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,594,        int[] index = getNatural(n);,1,0,0,1,4,1,2,0,1,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,595,"        shuffle(index, n - k);",2,1,0,0,2,0,2,0,1,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,596,        int[] result = new int[k];,1,0,1,0,4,3,0,0,0,4,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,597,        for (int i = 0; i < k; i++) {,4,1,0,1,3,2,0,0,1,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,598,            result[i] = index[n - i - 1];,2,1,1,0,4,0,0,0,1,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,601,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,619,        int len = c.size();,1,0,0,1,2,1,2,0,0,5,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,620,        if (k > len) {,2,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,621,"            throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE,",2,0,0,0,1,2,0,1,1,5,89,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,624,        if (k <= 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,625,"            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, k);",3,0,0,0,2,2,0,1,1,5,78,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,628,        Object[] objects = c.toArray();,1,0,0,1,4,0,2,1,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,629,"        int[] index = nextPermutation(len, k);",1,0,0,0,4,1,3,0,1,5,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,630,        Object[] result = new Object[k];,1,0,1,0,4,1,0,2,0,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,631,        for (int i = 0; i < k; i++) {,4,1,0,1,3,2,0,0,1,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,632,            result[i] = objects[index[i]];,0,0,1,0,6,0,0,0,1,3,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,634,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,659,        getSecRan().setSeed(System.currentTimeMillis());,0,0,0,2,6,0,4,0,1,4,48,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,660,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,671,        getSecRan().setSeed(seed);,0,0,0,1,4,0,3,0,1,4,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,672,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,679,        getRan().setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0,1,0,2,8,1,6,0,1,6,77,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,680,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,700,"        secRand = SecureRandom.getInstance(algorithm, provider);",1,0,0,0,2,0,4,0,1,4,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,701,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,738,        if (secRand == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,739,            secRand = new SecureRandom();,1,0,0,1,2,1,0,1,2,6,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,740,            secRand.setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0,1,0,2,6,1,6,0,0,5,76,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,742,        return secRand;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,753,        int target = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,754,        for (int i = list.length - 1; i >= end; i--) {,6,2,0,1,3,2,0,0,1,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,755,            if (i == 0) {,1,1,0,1,3,1,0,0,0,5,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,756,                target = 0;,1,0,0,0,0,0,0,0,1,2,11,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,759,"                target = nextInt(0, i);",1,0,0,0,2,0,2,0,2,4,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,761,            int temp = list[target];,1,0,1,0,2,1,0,0,0,4,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,762,            list[target] = list[i];,0,0,1,0,4,0,0,0,1,3,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,763,            list[i] = temp;,1,0,1,0,2,0,0,0,1,4,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,765,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,774,        int[] natural = new int[n];,1,0,1,0,4,3,0,0,0,4,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,775,        for (int i = 0; i < n; i++) {,4,1,0,1,3,2,0,0,1,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,776,            natural[i] = i;,1,0,1,0,2,0,0,0,1,4,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,778,        return natural;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,12,37,    public MathInternalError() {,1,0,0,1,3,1,0,0,1,5,28,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,12,38,"        getContext().addMessage(LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",2,0,0,1,4,0,3,0,1,5,69,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,12,39,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,12,46,"        super(cause, LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",4,0,0,0,2,1,0,0,1,4,58,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,12,47,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,12,56,"        super(pattern, args);",2,0,0,0,2,1,0,0,1,4,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,12,57,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,12,45,                                     Object ... args) {,1,0,0,0,2,0,0,1,0,3,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,12,46,        context = new ExceptionContext(this);,1,0,0,1,2,2,0,1,2,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,12,47,"        context.addMessage(pattern, args);",0,0,0,0,2,0,4,0,0,2,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,12,48,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,12,60,        super(cause);,1,0,0,1,2,1,0,0,1,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,12,61,        context = new ExceptionContext(this);,1,0,0,1,2,2,0,1,2,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,12,62,"        context.addMessage(pattern, args);",0,0,0,0,2,0,4,0,0,2,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,12,63,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,12,69,        this(LocalizedFormats.ILLEGAL_STATE);,2,0,0,1,2,1,0,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,12,70,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,12,74,        return context;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,12,80,        return context.getMessage();,0,0,0,1,2,1,2,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,12,86,        return context.getLocalizedMessage();,0,0,0,1,2,1,2,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,199,        final UnivariateFunction toSolve = new UnivariateFunction() {,1,0,0,1,3,2,0,2,2,6,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,202,                return cumulativeProbability(x) - p;,1,1,0,1,2,1,2,0,1,7,36,10,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,67,    protected AbstractRealDistribution() {,1,0,0,1,3,1,0,0,1,5,38,2,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,70,        random = null;,1,0,0,0,0,0,0,0,1,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,71,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,91,"        return probability(x0, x1);",0,0,0,0,2,1,3,0,1,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,112,        if (x0 > x1) {,2,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,113,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT,",2,0,0,0,1,2,0,1,1,5,89,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,116,        return cumulativeProbability(x1) - cumulativeProbability(x0);,0,1,0,1,4,1,4,0,2,6,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,157,        if (p < 0.0 || p > 1.0) {,2,3,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,158,"            throw new OutOfRangeException(p, 0, 1);",1,0,0,0,2,2,0,1,1,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,161,        double lowerBound = getSupportLowerBound();,1,0,0,1,2,1,1,0,1,6,43,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,162,        if (p == 0.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,163,            return lowerBound;,1,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,166,        double upperBound = getSupportUpperBound();,1,0,0,1,2,1,1,0,1,6,43,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,167,        if (p == 1.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,168,            return upperBound;,1,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,171,        final double mu = getNumericalMean();,1,0,0,1,2,2,1,0,2,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,172,        final double sig = FastMath.sqrt(getNumericalVariance());,1,0,0,2,4,2,3,0,2,6,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,174,        chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||,1,1,0,1,5,0,6,0,2,6,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,177,        if (lowerBound == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,178,            if (chebyshevApplies) {,1,0,0,1,3,1,0,0,0,4,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,179,                lowerBound = mu - sig * FastMath.sqrt((1. - p) / p);,5,4,0,2,4,0,2,0,1,6,52,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,181,                lowerBound = -1.0;,1,0,0,0,0,0,0,0,2,2,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,182,                while (cumulativeProbability(lowerBound) >= p) {,1,1,0,2,5,1,2,0,1,7,48,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,183,                    lowerBound *= 2.0;,1,0,0,0,0,0,0,0,1,2,18,10,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,188,        if (upperBound == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,189,            if (chebyshevApplies) {,1,0,0,1,3,1,0,0,0,4,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,190,                upperBound = mu + sig * FastMath.sqrt(p / (1. - p));,5,4,0,2,4,0,2,0,1,6,52,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,192,                upperBound = 1.0;,1,0,0,0,0,0,0,0,1,2,17,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,193,                while (cumulativeProbability(upperBound) < p) {,1,1,0,2,5,1,2,0,1,7,47,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,194,                    upperBound *= 2.0;,1,0,0,0,0,0,0,0,1,2,18,10,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,199,        final UnivariateFunction toSolve = new UnivariateFunction() {,1,0,0,1,3,2,0,2,2,6,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,206,"        double x = UnivariateSolverUtils.solve(toSolve,",1,0,0,0,1,1,3,0,0,4,47,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,211,        if (!isSupportConnected()) {,0,0,0,2,5,1,1,0,2,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,213,            final double dx = getSolverAbsoluteAccuracy();,1,0,0,1,2,2,1,0,2,6,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,214,            if (x - dx >= getSupportLowerBound()) {,2,2,0,2,5,1,1,0,1,7,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,215,                double px = cumulativeProbability(x);,1,0,0,1,2,1,2,0,1,6,37,9,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,216,                if (cumulativeProbability(x - dx) == px) {,3,2,0,2,5,1,1,0,1,7,42,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,217,                    upperBound = x;,2,0,0,0,0,0,0,0,1,2,15,10,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,218,                    while (upperBound - lowerBound > dx) {,3,2,0,1,3,1,0,0,0,5,38,10,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,219,                        final double midPoint = 0.5 * (lowerBound + upperBound);,3,2,0,1,2,2,0,0,1,6,56,12,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,220,                        if (cumulativeProbability(midPoint) < px) {,1,1,0,2,5,1,2,0,1,7,43,12,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,221,                            lowerBound = midPoint;,2,0,0,0,0,0,0,0,1,2,22,14,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,223,                            upperBound = midPoint;,2,0,0,0,0,0,0,0,1,2,22,14,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,225,                    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,226,                    return upperBound;,1,0,0,0,0,1,0,0,0,2,18,10,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,230,        return x;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,241,        return solverAbsoluteAccuracy;,1,0,0,0,0,1,0,0,0,2,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,259,        return inverseCumulativeProbability(random.nextDouble());,0,0,0,2,4,1,3,0,1,5,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,269,        if (sampleSize <= 0) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,270,"            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,",2,0,0,0,1,2,0,1,1,5,74,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,273,        double[] out = new double[sampleSize];,1,0,1,0,4,3,0,0,0,4,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,274,        for (int i = 0; i < sampleSize; i++) {,4,1,0,1,3,2,0,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,275,            out[i] = sample();,0,0,1,1,4,0,1,0,2,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,277,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,287,        return 0d;,0,0,0,0,0,1,0,0,0,1,10,2,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,59,"        this(0, 1);",0,0,0,0,2,1,0,0,0,2,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,60,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,107,"            throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sd);",3,0,0,0,2,2,0,1,1,5,80,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,121,        return mean;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,130,        return standardDeviation;,1,0,0,0,0,1,0,0,0,2,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,135,        final double x0 = x - mean;,3,1,0,0,0,2,0,0,1,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,136,        final double x1 = x0 / standardDeviation;,3,1,0,0,0,2,0,0,1,4,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,137,        return FastMath.exp(-0.5 * x1 * x1) / (standardDeviation * SQRT2PI);,4,3,0,1,4,1,2,0,1,7,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,148,        final double dev = x - mean;,3,1,0,0,0,2,0,0,1,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,149,        if (FastMath.abs(dev) > 40 * standardDeviation) {,1,2,0,2,5,1,3,0,0,6,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,150,            return dev < 0 ? 0.0d : 1.0d;,1,1,0,0,0,1,0,0,0,3,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,152,        return 0.5 * (1 + Erf.erf(dev / (standardDeviation * SQRT2)));,3,4,0,3,6,1,2,0,0,6,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,163,"        return probability(x0, x1);",0,0,0,0,2,1,3,0,1,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,171,        if (x0 > x1) {,2,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,172,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT,",2,0,0,0,1,2,0,1,1,5,89,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,175,        final double denom = standardDeviation * SQRT2;,3,1,0,0,0,2,0,0,1,4,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,176,        final double v0 = (x0 - mean) / denom;,4,2,0,1,2,2,0,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,177,        final double v1 = (x1 - mean) / denom;,4,2,0,1,2,2,0,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,178,"        return 0.5 * Erf.erf(v0, v1);",0,1,0,0,2,1,4,0,0,4,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,184,        return solverAbsoluteAccuracy;,1,0,0,0,0,1,0,0,0,2,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,193,        return getMean();,0,0,0,1,2,1,1,0,1,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,202,        final double s = getStandardDeviation();,1,0,0,1,2,2,1,0,2,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,203,        return s * s;,2,1,0,0,0,1,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,216,        return Double.NEGATIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,229,        return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,234,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,239,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,250,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,135,"            throw new NotStrictlyPositiveException(LocalizedFormats.SHAPE, shape);",3,0,0,0,2,2,0,1,1,5,70,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,138,"            throw new NotStrictlyPositiveException(LocalizedFormats.SCALE, scale);",3,0,0,0,2,2,0,1,1,5,70,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,163,        return shape;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,173,        return shape;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,185,        return scale;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,195,        return scale;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,238,        if (x < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,239,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,241,        final double y = x / scale;,3,1,0,0,0,2,0,0,1,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,242,        if ((y <= minY) || (FastMath.log(y) >= maxLogY)) {,3,3,0,3,9,1,3,0,0,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,246,            final double aux1 = (y - shiftedShape) / shiftedShape;,4,2,0,1,2,2,0,0,1,6,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,247,            final double aux2 = shape * (FastMath.log1p(aux1) - aux1);,3,2,0,2,4,2,3,0,1,7,58,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,248,            final double aux3 = -y * (Gamma.LANCZOS_G + 0.5) / shiftedShape +,5,5,0,1,2,2,0,0,2,6,65,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,250,            return densityPrefactor2 / x * FastMath.exp(aux3);,2,2,0,1,2,1,3,0,0,6,50,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,255,        return densityPrefactor1  * FastMath.exp(-y) *,2,1,0,1,2,1,2,0,1,7,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,276,        if (x <= 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,277,            ret = 0;,1,0,0,0,0,0,0,0,1,2,8,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,279,"            ret = Gamma.regularizedGammaP(shape, x / scale);",3,1,0,0,2,0,3,0,1,5,48,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,282,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,288,        return solverAbsoluteAccuracy;,1,0,0,0,0,1,0,0,0,2,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,298,        return shape * scale;,2,1,0,0,0,1,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,310,        return shape * scale * scale;,3,1,0,0,0,1,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,321,        return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,333,        return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,338,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,343,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,354,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,379,                final double u = random.nextDouble();,1,0,0,1,2,2,2,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,380,                final double bGS = 1 + shape / FastMath.E;,4,2,0,0,0,2,0,0,1,4,42,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,381,                final double p = bGS * u;,3,1,0,0,0,2,0,0,1,4,25,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,383,                if (p <= 1) {,1,1,0,1,3,1,0,0,0,5,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,386,"                    final double x = FastMath.pow(p, 1 / shape);",2,1,0,0,2,2,3,0,1,6,44,10,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,387,                    final double u2 = random.nextDouble();,1,0,0,1,2,2,2,0,1,6,38,10,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,389,                    if (u2 > FastMath.exp(-x)) {,2,1,0,2,5,1,2,0,1,7,28,10,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,391,                        continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,393,                        return scale * x;,2,1,0,0,0,1,0,0,0,3,17,12,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,398,                    final double x = -1 * FastMath.log((bGS - p) / shape);,4,3,0,2,4,2,2,0,2,7,54,10,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,399,                    final double u2 = random.nextDouble();,1,0,0,1,2,2,2,0,1,6,38,10,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,401,"                    if (u2 > FastMath.pow(x, shape - 1)) {",2,2,0,0,5,1,3,0,0,5,38,10,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,403,                        continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,405,                        return scale * x;,2,1,0,0,0,1,0,0,0,3,17,12,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,421,                continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,435,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,86,"        this(0, 1);",0,0,0,0,2,1,0,0,0,2,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,87,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,133,"            throw new NotStrictlyPositiveException(LocalizedFormats.SHAPE, shape);",3,0,0,0,2,2,0,1,1,5,70,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,147,        return scale;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,156,        return shape;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,171,        if (x <= 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,172,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,174,        final double x0 = FastMath.log(x) - scale;,2,1,0,1,2,2,3,0,1,7,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,175,        final double x1 = x0 / shape;,3,1,0,0,0,2,0,0,1,4,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,176,        return FastMath.exp(-0.5 * x1 * x1) / (shape * SQRT2PI * x);,5,3,0,1,4,1,2,0,1,7,60,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,195,        if (x <= 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,196,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,198,        final double dev = FastMath.log(x) - scale;,2,1,0,1,2,2,3,0,1,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,199,        if (FastMath.abs(dev) > 40 * shape) {,1,2,0,2,5,1,3,0,0,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,200,            return dev < 0 ? 0.0d : 1.0d;,1,1,0,0,0,1,0,0,0,3,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,202,        return 0.5 + 0.5 * Erf.erf(dev / (shape * SQRT2));,3,4,0,2,4,1,2,0,0,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,213,"        return probability(x0, x1);",0,0,0,0,2,1,3,0,1,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,221,        if (x0 > x1) {,2,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,222,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT,",2,0,0,0,1,2,0,1,1,5,89,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,225,        if (x0 <= 0 || x1 <= 0) {,2,3,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,226,"            return super.probability(x0, x1);",3,0,0,0,2,2,0,0,0,3,33,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,228,        final double denom = shape * SQRT2;,3,1,0,0,0,2,0,0,1,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,229,        final double v0 = (FastMath.log(x0) - scale) / denom;,3,2,0,2,4,2,3,0,1,7,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,230,        final double v1 = (FastMath.log(x1) - scale) / denom;,3,2,0,2,4,2,3,0,1,7,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,231,"        return 0.5 * Erf.erf(v0, v1);",0,1,0,0,2,1,4,0,0,4,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,237,        return solverAbsoluteAccuracy;,1,0,0,0,0,1,0,0,0,2,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,247,        double s = shape;,2,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,248,        return FastMath.exp(scale + (s * s / 2));,3,3,0,2,4,1,2,0,0,6,41,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,258,        final double s = shape;,2,0,0,0,0,2,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,259,        final double ss = s * s;,3,1,0,0,0,2,0,0,1,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,260,        return (FastMath.exp(ss) - 1) * FastMath.exp(2 * scale + ss);,2,4,0,2,6,1,5,0,0,6,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,271,        return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,284,        return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,289,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,294,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,305,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,353,    private FastMath() {},1,0,0,1,4,1,0,0,1,5,21,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,365,        if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN){,6,3,0,1,3,1,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,366,            return d; // These are un-normalised - don't try to convert,1,0,0,0,0,2,0,0,0,2,59,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,368,        long xl = Double.doubleToLongBits(d);,1,0,0,1,2,1,3,0,0,5,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,369,        xl = xl & MASK_30BITS; // Drop low order bits,3,1,0,0,0,0,0,0,1,3,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,370,        return Double.longBitsToDouble(xl);,0,0,0,1,2,1,3,0,0,4,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,387,      if (x != x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,388,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,396,      if (x > 20) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,397,          if (x >= LOG_MAX_VALUE) {,2,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,399,              final double t = exp(0.5 * x);,2,1,0,1,2,2,1,0,2,7,30,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,400,              return (0.5 * t) * t;,2,2,0,1,2,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,402,              return 0.5 * exp(x);,0,1,0,1,2,1,2,0,1,6,20,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,404,      } else if (x < -20) {,1,1,0,1,4,2,0,0,1,6,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,405,          if (x <= -LOG_MAX_VALUE) {,2,1,0,1,3,1,0,0,1,6,26,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,407,              final double t = exp(-0.5 * x);,2,1,0,1,2,2,1,0,3,7,31,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,408,              return (0.5 * t) * t;,2,2,0,1,2,1,0,0,0,5,21,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,410,              return 0.5 * exp(-x);,1,1,0,1,2,1,1,0,2,7,21,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,414,      final double hiPrec[] = new double[2];,1,0,0,0,4,4,0,0,1,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,415,      if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,416,          x = -x;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,418,"      exp(x, 0.0, hiPrec);",0,0,0,0,2,0,3,0,1,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,420,      double ya = hiPrec[0] + hiPrec[1];,1,1,1,0,4,1,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,421,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,2,1,1,1,6,1,0,0,1,7,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,423,      double temp = ya * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,424,      double yaa = ya + temp - temp;,4,2,0,0,0,1,0,0,0,3,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,425,      double yab = ya - yaa;,3,1,0,0,0,1,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,428,      double recip = 1.0/ya;,2,1,0,0,0,1,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,429,      temp = recip * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,430,      double recipa = recip + temp - temp;,4,2,0,0,0,1,0,0,0,3,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,431,      double recipb = recip - recipa;,3,1,0,0,0,1,0,0,0,3,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,434,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,10,9,0,1,2,0,0,0,1,5,76,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,436,      recipb += -yb * recip * recip;,4,1,0,0,0,0,0,0,2,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,439,      temp = ya + recipa;,3,1,0,0,0,0,0,0,1,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,440,      yb += -(temp - ya - recipa);,4,1,0,1,2,0,0,0,2,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,441,      ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,442,      temp = ya + recipb;,3,1,0,0,0,0,0,0,1,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,443,      yb += -(temp - ya - recipb);,4,1,0,1,2,0,0,0,2,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,444,      ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,446,      double result = ya + yb;,3,1,0,0,0,1,0,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,447,      result *= 0.5;,1,0,0,0,0,0,0,0,1,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,448,      return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,456,      boolean negate = false;,1,0,0,0,0,1,0,0,1,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,457,      if (x != x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,458,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,466,      if (x > 20) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,467,          if (x >= LOG_MAX_VALUE) {,2,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,469,              final double t = exp(0.5 * x);,2,1,0,1,2,2,1,0,2,7,30,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,470,              return (0.5 * t) * t;,2,2,0,1,2,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,472,              return 0.5 * exp(x);,0,1,0,1,2,1,2,0,1,6,20,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,474,      } else if (x < -20) {,1,1,0,1,4,2,0,0,1,6,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,475,          if (x <= -LOG_MAX_VALUE) {,2,1,0,1,3,1,0,0,1,6,26,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,477,              final double t = exp(-0.5 * x);,2,1,0,1,2,2,1,0,3,7,31,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,478,              return (-0.5 * t) * t;,2,2,0,1,2,1,0,0,1,6,22,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,480,              return -0.5 * exp(-x);,1,1,0,1,2,1,1,0,3,7,22,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,484,      if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,485,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,488,      if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,489,          x = -x;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,490,          negate = true;,1,0,0,0,0,0,0,0,2,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,495,      if (x > 0.25) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,496,          double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,497,"          exp(x, 0.0, hiPrec);",0,0,0,0,2,0,3,0,1,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,499,          double ya = hiPrec[0] + hiPrec[1];,1,1,1,0,4,1,0,0,0,5,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,500,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,2,1,1,1,6,1,0,0,1,7,42,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,502,          double temp = ya * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,503,          double yaa = ya + temp - temp;,4,2,0,0,0,1,0,0,0,3,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,504,          double yab = ya - yaa;,3,1,0,0,0,1,0,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,507,          double recip = 1.0/ya;,2,1,0,0,0,1,0,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,508,          temp = recip * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,509,          double recipa = recip + temp - temp;,4,2,0,0,0,1,0,0,0,3,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,510,          double recipb = recip - recipa;,3,1,0,0,0,1,0,0,0,3,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,513,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,10,9,0,1,2,0,0,0,1,5,76,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,515,          recipb += -yb * recip * recip;,4,1,0,0,0,0,0,0,2,3,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,517,          recipa = -recipa;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,518,          recipb = -recipb;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,521,          temp = ya + recipa;,3,1,0,0,0,0,0,0,1,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,522,          yb += -(temp - ya - recipa);,4,1,0,1,2,0,0,0,2,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,523,          ya = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,524,          temp = ya + recipb;,3,1,0,0,0,0,0,0,1,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,525,          yb += -(temp - ya - recipb);,4,1,0,1,2,0,0,0,2,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,526,          ya = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,528,          result = ya + yb;,3,1,0,0,0,0,0,0,1,3,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,529,          result *= 0.5;,1,0,0,0,0,0,0,0,1,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,530,      },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,532,          double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,533,"          expm1(x, hiPrec);",0,0,0,0,2,0,3,0,1,3,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,535,          double ya = hiPrec[0] + hiPrec[1];,1,1,1,0,4,1,0,0,0,5,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,536,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,2,1,1,1,6,1,0,0,1,7,42,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,539,          double denom = 1.0 + ya;,2,1,0,0,0,1,0,0,0,3,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,540,          double denomr = 1.0 / denom;,2,1,0,0,0,1,0,0,0,3,28,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,541,          double denomb = -(denom - 1.0 - ya) + yb;,4,2,0,1,2,1,0,0,1,6,41,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,542,          double ratio = ya * denomr;,3,1,0,0,0,1,0,0,0,3,27,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,543,          double temp = ratio * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,35,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,544,          double ra = ratio + temp - temp;,4,2,0,0,0,1,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,545,          double rb = ratio - ra;,3,1,0,0,0,1,0,0,0,3,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,547,          temp = denom * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,548,          double za = denom + temp - temp;,4,2,0,0,0,1,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,549,          double zb = denom - za;,3,1,0,0,0,1,0,0,0,3,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,551,          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;,11,9,0,1,2,0,0,0,1,5,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,554,          rb += yb*denomr;                        // numerator,3,1,0,0,0,0,0,0,1,3,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,555,          rb += -ya * denomb * denomr * denomr;   // denominator,5,1,0,0,0,0,0,0,2,3,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,558,          temp = ya + ra;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,559,          yb += -(temp - ya - ra);,4,1,0,1,2,0,0,0,2,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,560,          ya = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,561,          temp = ya + rb;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,562,          yb += -(temp - ya - rb);,4,1,0,1,2,0,0,0,2,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,563,          ya = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,565,          result = ya + yb;,3,1,0,0,0,0,0,0,1,3,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,566,          result *= 0.5;,1,0,0,0,0,0,0,0,1,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,569,      if (negate) {,1,0,0,1,3,1,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,570,          result = -result;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,573,      return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,581,      boolean negate = false;,1,0,0,0,0,1,0,0,1,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,583,      if (x != x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,584,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,593,      if (x > 20.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,594,          return 1.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,597,      if (x < -20) {,1,1,0,1,3,1,0,0,1,6,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,598,          return -1.0;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,601,      if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,602,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,605,      if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,606,          x = -x;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,607,          negate = true;,1,0,0,0,0,0,0,0,2,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,611,      if (x >= 0.5) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,612,          double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,614,"          exp(x*2.0, 0.0, hiPrec);",1,1,0,0,2,0,2,0,1,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,616,          double ya = hiPrec[0] + hiPrec[1];,1,1,1,0,4,1,0,0,0,5,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,617,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,2,1,1,1,6,1,0,0,1,7,42,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,620,          double na = -1.0 + ya;,2,1,0,0,0,1,0,0,1,4,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,621,          double nb = -(na + 1.0 - ya);,3,2,0,1,2,1,0,0,1,6,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,622,          double temp = na + yb;,3,1,0,0,0,1,0,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,623,          nb += -(temp - na - yb);,4,1,0,1,2,0,0,0,2,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,624,          na = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,627,          double da = 1.0 + ya;,2,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,628,          double db = -(da - 1.0 - ya);,3,1,0,1,2,1,0,0,1,6,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,629,          temp = da + yb;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,630,          db += -(temp - da - yb);,4,1,0,1,2,0,0,0,2,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,631,          da = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,633,          temp = da * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,634,          double daa = da + temp - temp;,4,2,0,0,0,1,0,0,0,3,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,635,          double dab = da - daa;,3,1,0,0,0,1,0,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,638,          double ratio = na/da;,3,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,639,          temp = ratio * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,640,          double ratioa = ratio + temp - temp;,4,2,0,0,0,1,0,0,0,3,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,641,          double ratiob = ratio - ratioa;,3,1,0,0,0,1,0,0,0,3,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,644,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,11,9,0,1,2,0,0,0,1,5,72,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,647,          ratiob += nb / da;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,649,          ratiob += -db * na / da / da;,5,3,0,0,0,0,0,0,2,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,651,          result = ratioa + ratiob;,3,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,652,      },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,654,          double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,656,"          expm1(x*2.0, hiPrec);",1,1,0,0,2,0,2,0,1,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,658,          double ya = hiPrec[0] + hiPrec[1];,1,1,1,0,4,1,0,0,0,5,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,659,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,2,1,1,1,6,1,0,0,1,7,42,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,662,          double na = ya;,2,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,663,          double nb = yb;,2,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,666,          double da = 2.0 + ya;,2,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,667,          double db = -(da - 2.0 - ya);,3,1,0,1,2,1,0,0,1,6,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,668,          double temp = da + yb;,3,1,0,0,0,1,0,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,669,          db += -(temp - da - yb);,4,1,0,1,2,0,0,0,2,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,670,          da = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,672,          temp = da * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,673,          double daa = da + temp - temp;,4,2,0,0,0,1,0,0,0,3,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,674,          double dab = da - daa;,3,1,0,0,0,1,0,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,677,          double ratio = na/da;,3,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,678,          temp = ratio * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,679,          double ratioa = ratio + temp - temp;,4,2,0,0,0,1,0,0,0,3,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,680,          double ratiob = ratio - ratioa;,3,1,0,0,0,1,0,0,0,3,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,683,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,11,9,0,1,2,0,0,0,1,5,72,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,686,          ratiob += nb / da;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,688,          ratiob += -db * na / da / da;,5,3,0,0,0,0,0,0,2,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,690,          result = ratioa + ratiob;,3,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,693,      if (negate) {,1,0,0,1,3,1,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,694,          result = -result;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,697,      return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,705,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,3,3,0,2,4,1,4,0,0,6,50,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,713,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,714,        if (a < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,715,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,716,            a = -a;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,720,        if (a > 0.167) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,721,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,4,3,0,2,4,0,4,0,1,6,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,723,            final double a2 = a * a;,3,1,0,0,0,2,0,0,1,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,724,            if (a > 0.097) {,1,1,0,1,3,1,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,725,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,26,17,0,8,16,0,0,0,1,5,212,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,726,            } else if (a > 0.036) {,1,1,0,1,4,2,0,0,0,5,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,727,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,20,13,0,6,12,0,0,0,1,5,160,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,728,            } else if (a > 0.0036) {,1,1,0,1,4,2,0,0,0,5,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,729,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);,14,9,0,4,8,0,0,0,1,5,109,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,731,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);,8,5,0,2,4,0,0,0,1,5,63,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,735,        return negative ? -absAsinh : absAsinh;,3,0,0,0,0,1,0,0,1,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,743,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,744,        if (a < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,745,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,746,            a = -a;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,750,        if (a > 0.15) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,751,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,3,4,0,2,6,0,2,0,1,6,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,753,            final double a2 = a * a;,3,1,0,0,0,2,0,0,1,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,754,            if (a > 0.087) {,1,1,0,1,3,1,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,755,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));,18,17,0,8,16,0,0,0,1,5,141,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,756,            } else if (a > 0.031) {,1,1,0,1,4,2,0,0,0,5,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,757,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));,14,13,0,6,12,0,0,0,1,5,109,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,758,            } else if (a > 0.003) {,1,1,0,1,4,2,0,0,0,5,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,759,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));,10,9,0,4,8,0,0,0,1,5,77,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,761,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));,6,5,0,2,4,0,0,0,1,5,47,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,765,        return negative ? -absAtanh : absAtanh;,3,0,0,0,0,1,0,0,1,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,774,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,3,2,0,2,6,2,0,0,1,6,87,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,783,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,3,2,0,2,6,2,0,0,1,6,91,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,791,"        return nextAfter(a, Double.POSITIVE_INFINITY);",2,0,0,0,2,1,2,0,1,5,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,799,"        return nextAfter(a, Float.POSITIVE_INFINITY);",2,0,0,0,2,1,2,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,807,        return Math.random();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,854,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,855,                    hiPrec[0] = 0.0;,0,0,1,0,2,0,0,0,1,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,856,                    hiPrec[1] = 0.0;,0,0,1,0,2,0,0,0,1,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,858,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,863,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",2,2,0,0,2,2,3,0,2,6,79,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,864,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,865,                    hiPrec[0] /= 285040095144011776.0;,0,0,1,0,2,0,0,0,1,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,866,                    hiPrec[1] /= 285040095144011776.0;,0,0,1,0,2,0,0,0,1,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,868,                return result;,1,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,873,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",2,2,0,0,2,2,3,0,2,6,79,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,874,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,875,                    hiPrec[0] /= 4.455505956692756620;,0,0,1,0,2,0,0,0,1,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,876,                    hiPrec[1] /= 4.455505956692756620;,0,0,1,0,2,0,0,0,1,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,878,                return result;,1,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,891,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,892,                    hiPrec[0] = Double.POSITIVE_INFINITY;,2,0,1,0,2,0,0,0,1,4,37,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,893,                    hiPrec[1] = 0.0;,0,0,1,0,2,0,0,0,1,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,895,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,951,            hiPrec[0] = tempA;,1,0,1,0,2,0,0,0,1,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,952,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,8,6,1,0,2,0,0,0,1,5,58,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,963,"      return expm1(x, null);",0,0,0,0,2,1,2,0,1,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,972,        if (x != x || x == 0.0) { // NaN or zero,3,3,0,1,3,1,0,0,0,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,973,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,976,        if (x <= -1.0 || x >= 1.0) {,2,3,0,1,3,1,0,0,1,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,979,            double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,980,"            exp(x, 0.0, hiPrec);",0,0,0,0,2,0,3,0,1,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,981,            if (x > 0.0) {,1,1,0,1,3,1,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,982,                return -1.0 + hiPrec[0] + hiPrec[1];,0,1,1,0,4,1,0,0,1,5,36,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,984,                final double ra = -1.0 + hiPrec[0];,1,1,1,0,2,2,0,0,2,6,35,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,985,                double rb = -(ra + 1.0 - hiPrec[0]);,2,2,1,1,4,1,0,0,1,7,36,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,986,                rb += hiPrec[1];,1,0,1,0,2,0,0,0,1,4,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,987,                return ra + rb;,2,1,0,0,0,1,0,0,0,3,15,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,994,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,996,        if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,997,            x = -x;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,998,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1002,            int intFrac = (int) (x * 1024.0);,2,1,0,1,4,2,0,0,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1003,            double tempA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0;,3,1,1,0,2,1,0,0,0,5,60,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1004,            double tempB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,3,0,1,0,2,1,0,0,0,4,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1006,            double temp = tempA + tempB;,3,1,0,0,0,1,0,0,0,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1007,            tempB = -(temp - tempA - tempB);,4,1,0,1,2,0,0,0,2,5,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1008,            tempA = temp;,2,0,0,0,0,0,0,0,1,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1010,            temp = tempA * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1011,            baseA = tempA + temp - temp;,4,2,0,0,0,0,0,0,1,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1012,            baseB = tempB + (tempA - baseA);,4,2,0,1,2,0,0,0,1,5,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1014,            epsilon = x - intFrac/1024.0;,3,2,0,0,0,0,0,0,1,3,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1019,        double zb = 0.008336750013465571;,1,0,0,0,0,1,0,0,0,2,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1020,        zb = zb * epsilon + 0.041666663879186654;,3,2,0,0,0,0,0,0,1,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1021,        zb = zb * epsilon + 0.16666666666745392;,3,2,0,0,0,0,0,0,1,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1022,        zb = zb * epsilon + 0.49999999999999994;,3,2,0,0,0,0,0,0,1,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1023,        zb = zb * epsilon;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1024,        zb = zb * epsilon;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1026,        double za = epsilon;,2,0,0,0,0,1,0,0,0,2,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1027,        double temp = za + zb;,3,1,0,0,0,1,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1028,        zb = -(temp - za - zb);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1029,        za = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1031,        temp = za * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1032,        temp = za + temp - temp;,4,2,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1033,        zb += za - temp;,3,1,0,0,0,0,0,0,1,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1034,        za = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1037,        double ya = za * baseA;,3,1,0,0,0,1,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1039,        temp = ya + za * baseB;,4,2,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1040,        double yb = -(temp - ya - za * baseB);,5,2,0,1,2,1,0,0,1,6,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1041,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1043,        temp = ya + zb * baseA;,4,2,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1044,        yb += -(temp - ya - zb * baseA);,5,2,0,1,2,0,0,0,2,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1045,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1047,        temp = ya + zb * baseB;,4,2,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1048,        yb += -(temp - ya - zb*baseB);,5,2,0,1,2,0,0,0,2,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1049,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1053,        temp = ya + baseA;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1054,        yb += -(temp - baseA - ya);,4,1,0,1,2,0,0,0,2,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1055,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1057,        temp = ya + za;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1059,        yb += -(temp - ya - za);,4,1,0,1,2,0,0,0,2,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1060,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1062,        temp = ya + baseB;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1064,        yb += -(temp - ya - baseB);,4,1,0,1,2,0,0,0,2,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1065,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1067,        temp = ya + zb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1069,        yb += -(temp - ya - zb);,4,1,0,1,2,0,0,0,2,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1070,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1072,        if (negative) {,1,0,0,1,3,1,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1074,            double denom = 1.0 + ya;,2,1,0,0,0,1,0,0,0,3,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1075,            double denomr = 1.0 / denom;,2,1,0,0,0,1,0,0,0,3,28,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1076,            double denomb = -(denom - 1.0 - ya) + yb;,4,2,0,1,2,1,0,0,1,6,41,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1077,            double ratio = ya * denomr;,3,1,0,0,0,1,0,0,0,3,27,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1078,            temp = ratio * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1079,            final double ra = ratio + temp - temp;,4,2,0,0,0,2,0,0,1,4,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1080,            double rb = ratio - ra;,3,1,0,0,0,1,0,0,0,3,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1082,            temp = denom * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1083,            za = denom + temp - temp;,4,2,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1084,            zb = denom - za;,3,1,0,0,0,0,0,0,1,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1086,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,11,9,0,1,2,0,0,0,1,5,60,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1097,            rb += yb * denomr;                      // numerator,3,1,0,0,0,0,0,0,1,3,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1098,            rb += -ya * denomb * denomr * denomr;   // denominator,5,1,0,0,0,0,0,0,2,3,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1101,            ya = -ra;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1102,            yb = -rb;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1105,        if (hiPrecOut != null) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1106,            hiPrecOut[0] = ya;,1,0,1,0,2,0,0,0,1,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1107,            hiPrecOut[1] = yb;,1,0,1,0,2,0,0,0,1,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1110,        return ya + yb;,2,1,0,0,0,1,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1131,            return Double.NEGATIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1137,            if (x != 0.0) {,1,1,0,1,3,1,0,0,0,5,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1138,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1139,                    hiPrec[0] = Double.NaN;,2,0,1,0,2,0,0,0,1,4,23,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1142,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1148,            if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1149,                hiPrec[0] = Double.POSITIVE_INFINITY;,2,0,1,0,2,0,0,0,1,4,37,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1152,            return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1160,            if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1162,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1163,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,2,0,1,0,2,0,0,0,1,4,37,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1166,                return Double.NEGATIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1170,            bits <<= 1;,1,0,0,0,0,0,0,0,1,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1171,            while ( (bits & 0x0010000000000000L) == 0) {,1,2,0,2,5,1,0,0,0,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1172,                --exp;,1,0,0,0,0,0,0,0,1,2,6,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1173,                bits <<= 1;,1,0,0,0,0,0,0,0,1,2,11,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1184,                double xa = x - 1.0;,2,1,0,0,0,1,0,0,0,3,20,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1185,                double xb = xa - x + 1.0;,3,2,0,0,0,1,0,0,0,3,25,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1186,                double tmp = xa * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,31,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1187,                double aa = xa + tmp - tmp;,4,2,0,0,0,1,0,0,0,3,27,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1188,                double ab = xa - aa;,3,1,0,0,0,1,0,0,0,3,20,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1189,                xa = aa;,2,0,0,0,0,0,0,0,1,2,8,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1190,                xb = ab;,2,0,0,0,0,0,0,0,1,2,8,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1192,                final double[] lnCoef_last = LN_QUICK_COEF[LN_QUICK_COEF.length - 1];,3,1,1,0,4,2,0,0,1,6,69,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1193,                double ya = lnCoef_last[0];,1,0,1,0,2,1,0,0,0,4,27,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1194,                double yb = lnCoef_last[1];,1,0,1,0,2,1,0,0,0,4,27,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1196,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,5,2,0,1,3,2,0,0,1,6,53,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1198,                    aa = ya * xa;,3,1,0,0,0,0,0,0,1,3,13,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1199,                    ab = ya * xb + yb * xa + yb * xb;,7,5,0,0,0,0,0,0,1,3,33,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1201,                    tmp = aa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1202,                    ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1203,                    yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1206,                    final double[] lnCoef_i = LN_QUICK_COEF[i];,1,0,1,0,4,2,0,0,1,5,43,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1207,                    aa = ya + lnCoef_i[0];,2,1,1,0,2,0,0,0,1,5,22,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1208,                    ab = yb + lnCoef_i[1];,2,1,1,0,2,0,0,0,1,5,22,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1210,                    tmp = aa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1211,                    ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1212,                    yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1216,                aa = ya * xa;,3,1,0,0,0,0,0,0,1,3,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1217,                ab = ya * xb + yb * xa + yb * xb;,7,5,0,0,0,0,0,0,1,3,33,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1219,                tmp = aa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1220,                ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1221,                yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1223,                return ya + yb;,2,1,0,0,0,1,0,0,0,3,15,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1362,        if (x == -1) {,1,1,0,1,3,1,0,0,1,6,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1363,            return Double.NEGATIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1366,        if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1367,            return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1370,        if (x > 1e-6 ||,1,2,0,0,1,1,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1372,            final double xpa = 1 + x;,2,1,0,0,0,2,0,0,1,4,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1373,            final double xpb = -(xpa - 1 - x);,3,1,0,1,2,2,0,0,2,6,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1375,            final double[] hiPrec = new double[2];,1,0,0,0,4,4,0,0,1,4,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1376,"            final double lores = log(xpa, hiPrec);",1,0,0,0,2,2,3,0,2,5,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1377,            if (Double.isInfinite(lores)) { // Don't allow this to be converted to NaN,0,0,0,2,5,2,3,0,0,4,74,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1378,                return lores;,1,0,0,0,0,1,0,0,0,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1383,            final double fx1 = xpb / xpa;,3,1,0,0,0,2,0,0,1,4,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1384,            final double epsilon = 0.5 * fx1 + 1;,2,2,0,0,0,2,0,0,1,4,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1385,            return epsilon * fx1 + hiPrec[1] + hiPrec[0];,2,3,1,0,4,1,0,0,0,5,45,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1388,            final double y = (x * F_1_3 - F_1_2) * x + 1;,5,4,0,1,2,2,0,0,1,6,45,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1389,            return y * x;,2,1,0,0,0,1,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1398,        final double hiPrec[] = new double[2];,1,0,0,0,4,4,0,0,1,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1400,"        final double lores = log(x, hiPrec);",1,0,0,0,2,2,3,0,2,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1401,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0,0,0,2,5,2,3,0,0,4,73,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1402,            return lores;,1,0,0,0,0,1,0,0,0,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1405,        final double tmp = hiPrec[0] * HEX_40000000;,2,1,1,0,2,2,0,0,1,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1406,        final double lna = hiPrec[0] + tmp - tmp;,3,2,1,0,2,2,0,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1407,        final double lnb = hiPrec[0] - lna + hiPrec[1];,2,2,1,0,4,2,0,0,1,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1409,        final double rln10a = 0.4342944622039795;,1,0,0,0,0,2,0,0,1,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1410,        final double rln10b = 1.9699272335463627E-8;,1,0,0,0,0,2,0,0,1,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1412,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,8,7,0,0,0,1,0,0,0,3,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1432,        return log(x) / log(base);,0,1,0,1,4,1,4,0,2,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1446,            return 1.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1450,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1455,            long bits = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1456,            if ((bits & 0x8000000000000000L) != 0) {,1,2,0,2,5,1,0,0,0,5,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1458,                long yi = (long) y;,2,0,0,1,2,2,0,0,0,4,19,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1460,                if (y < 0 && y == yi && (yi & 1) == 1) {,4,6,0,2,5,1,0,0,0,5,40,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1461,                    return Double.NEGATIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1464,                if (y > 0 && y == yi && (yi & 1) == 1) {,4,6,0,2,5,1,0,0,0,5,40,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1465,                    return -0.0;,0,0,0,0,0,1,0,0,1,2,12,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1469,            if (y < 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1470,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1472,            if (y > 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1473,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1476,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1480,            if (y != y) { // y is NaN,2,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1481,                return y;,1,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1483,            if (y < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1484,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1486,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1491,            if (x * x == 1.0) {,2,2,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1492,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1495,            if (x * x > 1.0) {,2,2,0,1,3,1,0,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1496,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1498,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1503,            if (y != y) { // y is NaN,2,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1504,                return y;,1,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1507,            if (y < 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1508,                long yi = (long) y;,2,0,0,1,2,2,0,0,0,4,19,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1509,                if (y == yi && (yi & 1) == 1) {,3,4,0,2,5,1,0,0,0,5,31,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1510,                    return -0.0;,0,0,0,0,0,1,0,0,1,2,12,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1513,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1516,            if (y > 0)  {,1,1,0,1,3,1,0,0,0,5,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1517,                long yi = (long) y;,2,0,0,1,2,2,0,0,0,4,19,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1518,                if (y == yi && (yi & 1) == 1) {,3,4,0,2,5,1,0,0,0,5,31,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1519,                    return Double.NEGATIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1522,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1528,            if (x * x == 1.0) {,2,2,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1529,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1532,            if (x * x < 1.0) {,2,2,0,1,3,1,0,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1533,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1535,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1542,            if (y >= TWO_POWER_53 || y <= -TWO_POWER_53) {,4,3,0,1,3,1,0,0,1,6,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1543,"                return pow(-x, y);",1,0,0,0,2,1,2,0,2,5,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1546,            if (y == (long) y) {,2,1,0,2,5,2,0,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1548,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",3,2,0,2,8,2,4,0,5,7,53,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1550,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1562,            double tmp1 = y * 9.31322574615478515625E-10;,2,1,0,0,0,1,0,0,0,3,45,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1563,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,2,1,0,0,0,1,0,0,0,3,48,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1564,            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;,6,3,0,1,2,0,0,0,1,5,56,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1565,            yb = y - ya;,3,1,0,0,0,0,0,0,1,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1571,            return lores;,1,0,0,0,0,1,0,0,0,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1613,        if (e == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1614,            return 1.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1615,        } else if (e < 0) {,1,1,0,1,4,2,0,0,0,5,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1616,            e = -e;,2,0,0,0,0,0,0,0,2,2,7,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1617,            d = 1.0 / d;,2,1,0,0,0,0,0,0,1,3,12,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1622,        final int splitFactor = 0x8000001;,1,0,0,0,0,2,0,0,1,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1623,        final double cd       = splitFactor * d;,3,1,0,0,0,2,0,0,1,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1624,        final double d1High   = cd - (cd - d);,4,2,0,1,2,2,0,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1625,        final double d1Low    = d - d1High;,3,1,0,0,0,2,0,0,1,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1628,        double resultHigh = 1;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1629,        double resultLow  = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1632,        double d2p     = d;,2,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1633,        double d2pHigh = d1High;,2,0,0,0,0,1,0,0,0,2,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1634,        double d2pLow  = d1Low;,2,0,0,0,0,1,0,0,0,2,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1636,        while (e != 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1638,            if ((e & 0x1) != 0) {,1,2,0,2,5,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1641,                final double tmpHigh = resultHigh * d2p;,3,1,0,0,0,2,0,0,1,4,40,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1642,                final double cRH     = splitFactor * resultHigh;,3,1,0,0,0,2,0,0,1,4,48,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1643,                final double rHH     = cRH - (cRH - resultHigh);,4,2,0,1,2,2,0,0,1,6,48,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1644,                final double rHL     = resultHigh - rHH;,3,1,0,0,0,2,0,0,1,4,40,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1645,                final double tmpLow  = rHL * d2pLow - (((tmpHigh - rHH * d2pHigh) - rHL * d2pHigh) - rHH * d2pLow);,10,8,0,3,6,2,0,0,1,6,99,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1646,                resultHigh = tmpHigh;,2,0,0,0,0,0,0,0,1,2,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1647,                resultLow  = resultLow * d2p + tmpLow;,4,2,0,0,0,0,0,0,1,3,38,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1652,            final double tmpHigh = d2pHigh * d2p;,3,1,0,0,0,2,0,0,1,4,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1653,            final double cD2pH   = splitFactor * d2pHigh;,3,1,0,0,0,2,0,0,1,4,45,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1654,            final double d2pHH   = cD2pH - (cD2pH - d2pHigh);,4,2,0,1,2,2,0,0,1,6,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1655,            final double d2pHL   = d2pHigh - d2pHH;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1656,            final double tmpLow  = d2pHL * d2pLow - (((tmpHigh - d2pHH * d2pHigh) - d2pHL * d2pHigh) - d2pHH * d2pLow);,10,8,0,3,6,2,0,0,1,6,107,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1657,            final double cTmpH   = splitFactor * tmpHigh;,3,1,0,0,0,2,0,0,1,4,45,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1658,            d2pHigh = cTmpH - (cTmpH - tmpHigh);,4,2,0,1,2,0,0,0,1,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1659,            d2pLow  = d2pLow * d2p + tmpLow + (tmpHigh - d2pHigh);,6,4,0,1,2,0,0,0,1,5,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1660,            d2p     = d2pHigh + d2pLow;,3,1,0,0,0,0,0,0,1,3,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1662,            e = e >> 1;,2,1,0,0,0,0,0,0,1,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1664,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1666,        return resultHigh + resultLow;,2,1,0,0,0,1,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1861,        int idx = (int) ((xa * 8.0) + 0.5);,2,2,0,2,6,2,0,0,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1862,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,2,1,1,0,2,2,0,0,1,6,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1865,        final double sintA = SINE_TABLE_A[idx];,1,0,1,0,2,2,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1866,        final double sintB = SINE_TABLE_B[idx];,1,0,1,0,2,2,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1867,        final double costA = COSINE_TABLE_A[idx];,1,0,1,0,2,2,0,0,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1868,        final double costB = COSINE_TABLE_B[idx];,1,0,1,0,2,2,0,0,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1871,        double sinEpsA = epsilon;,2,0,0,0,0,1,0,0,0,2,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1872,        double sinEpsB = polySine(epsilon);,1,0,0,1,2,1,2,0,1,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1873,        final double cosEpsA = 1.0;,1,0,0,0,0,2,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1874,        final double cosEpsB = polyCosine(epsilon);,1,0,0,1,2,2,2,0,2,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1877,        double temp = sinEpsA * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1878,        double temp2 = (sinEpsA + temp) - temp;,4,2,0,1,2,1,0,0,0,5,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1879,        sinEpsB +=  sinEpsA - temp2;,3,1,0,0,0,0,0,0,1,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1880,        sinEpsA = temp2;,2,0,0,0,0,0,0,0,1,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1905,        double a = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1906,        double b = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1909,        double t = sintA;,2,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1910,        double c = a + t;,3,1,0,0,0,1,0,0,0,3,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1911,        double d = -(c - a - t);,4,1,0,1,2,1,0,0,1,6,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1912,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1913,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1915,        t = costA*sinEpsA;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1916,        c = a + t;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1917,        d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1918,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1919,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1921,        b = b + sintA*cosEpsB + costA*sinEpsB;,6,4,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1922,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,9,6,0,0,0,0,0,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1924,        double sina = a + b;,3,1,0,0,0,1,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1925,        double sinb = -(sina - a - b);,4,1,0,1,2,1,0,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1929,        a = b = c = d = 0.0;,4,0,0,0,0,0,0,0,4,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1931,        t = costA*cosEpsA;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1932,        c = a + t;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1933,        d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1934,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1935,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1937,        t = -sintA*sinEpsA;,3,1,0,0,0,0,0,0,2,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1938,        c = a + t;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1939,        d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1940,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1941,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1943,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,8,6,0,0,0,0,0,0,1,3,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1944,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,8,6,0,1,2,0,0,0,1,5,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1946,        double cosa = a + b;,3,1,0,0,0,1,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1947,        double cosb = -(cosa - a - b);,4,1,0,1,2,1,0,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1949,        if (cotanFlag) {,1,0,0,1,3,1,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1951,            tmp = cosa; cosa = sina; sina = tmp;,6,0,0,0,0,0,0,0,3,2,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1952,            tmp = cosb; cosb = sinb; sinb = tmp;,6,0,0,0,0,0,0,0,3,2,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1966,        double est = sina/cosa;,3,1,0,0,0,1,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1969,        temp = est * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1970,        double esta = (est + temp) - temp;,4,2,0,1,2,1,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1971,        double estb =  est - esta;,3,1,0,0,0,1,0,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1973,        temp = cosa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1974,        double cosaa = (cosa + temp) - temp;,4,2,0,1,2,1,0,0,0,5,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1975,        double cosab =  cosa - cosaa;,3,1,0,0,0,1,0,0,0,3,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1978,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,11,9,0,1,2,2,0,0,0,5,114,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1979,        err += sinb/cosa;                     // Change in est due to sinb,3,1,0,0,0,0,0,0,1,3,66,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1980,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,5,3,0,0,0,0,0,0,2,3,66,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1982,        if (xb != 0.0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1985,            double xbadj = xb + est*est*xb;,5,2,0,0,0,1,0,0,0,3,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1986,            if (cotanFlag) {,1,0,0,1,3,1,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1987,                xbadj = -xbadj;,2,0,0,0,0,0,0,0,2,2,15,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1990,            err += xbadj;,2,0,0,0,0,0,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,1993,        return est+err;,2,1,0,0,0,1,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2010,        long inbits = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,41,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2011,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,2,3,0,2,6,2,0,0,0,5,53,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2014,        inbits &= 0x000fffffffffffffL;,1,0,0,0,0,0,0,0,1,2,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2015,        inbits |= 0x0010000000000000L;,1,0,0,0,0,0,0,0,1,2,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2018,        exponent++;,1,0,0,0,0,0,0,0,1,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2019,        inbits <<= 11;,1,0,0,0,0,0,0,0,1,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2025,        int idx = exponent >> 6;,2,1,0,0,0,1,0,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2026,        int shift = exponent - (idx << 6);,3,2,0,1,2,1,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2028,        if (shift != 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2029,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,4,3,1,1,6,0,0,0,1,6,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2030,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,2,2,1,1,4,0,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2031,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,4,5,1,2,10,0,0,0,1,6,70,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2032,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,5,6,1,2,10,0,0,0,1,6,72,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2034,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,3,2,1,1,4,0,0,0,1,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2035,            shpiA = RECIP_2PI[idx];,1,0,1,0,2,0,0,0,1,4,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2036,            shpiB = RECIP_2PI[idx+1];,2,1,1,0,2,0,0,0,1,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2040,        long a = inbits >>> 32;,2,1,0,0,0,1,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2041,        long b = inbits & 0xffffffffL;,2,1,0,0,0,1,0,0,0,3,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2043,        long c = shpiA >>> 32;,2,1,0,0,0,1,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2044,        long d = shpiA & 0xffffffffL;,2,1,0,0,0,1,0,0,0,3,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2046,        long ac = a * c;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2047,        long bd = b * d;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2048,        long bc = b * c;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2049,        long ad = a * d;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2051,        long prodB = bd + (ad << 32);,3,2,0,1,2,1,0,0,0,5,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2052,        long prodA = ac + (ad >>> 32);,3,2,0,1,2,1,0,0,0,5,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2054,        boolean bita = (bd & 0x8000000000000000L) != 0;,2,2,0,1,2,1,0,0,0,5,47,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2055,        boolean bitb = (ad & 0x80000000L ) != 0;,2,2,0,1,2,1,0,0,0,5,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2056,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,2,2,0,1,2,1,0,0,0,5,52,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2059,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2061,            prodA++;,1,0,0,0,0,0,0,0,1,2,8,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2064,        bita = (prodB & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2065,        bitb = (bc & 0x80000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2067,        prodB = prodB + (bc << 32);,3,2,0,1,2,0,0,0,1,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2068,        prodA = prodA + (bc >>> 32);,3,2,0,1,2,0,0,0,1,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2070,        bitsum = (prodB & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2073,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2075,            prodA++;,1,0,0,0,0,0,0,0,1,2,8,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2079,        c = shpiB >>> 32;,2,1,0,0,0,0,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2080,        d = shpiB & 0xffffffffL;,2,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2081,        ac = a * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2082,        bc = b * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2083,        ad = a * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2086,        ac = ac + ((bc + ad) >>> 32);,4,3,0,2,4,0,0,0,1,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2088,        bita = (prodB & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2089,        bitb = (ac & 0x8000000000000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2090,        prodB += ac;,2,0,0,0,0,0,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2091,        bitsum = (prodB & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2093,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2095,            prodA++;,1,0,0,0,0,0,0,0,1,2,8,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2099,        c = shpi0 >>> 32;,2,1,0,0,0,0,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2100,        d = shpi0 & 0xffffffffL;,2,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2102,        bd = b * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2103,        bc = b * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2104,        ad = a * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2106,        prodA += bd + ((bc + ad) << 32);,4,3,0,2,4,0,0,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2118,        int intPart = (int)(prodA >>> 62);,2,1,0,1,4,2,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2121,        prodA <<= 2;,1,0,0,0,0,0,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2122,        prodA |= prodB >>> 62;,2,1,0,0,0,0,0,0,1,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2123,        prodB <<= 2;,1,0,0,0,0,0,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2126,        a = prodA >>> 32;,2,1,0,0,0,0,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2127,        b = prodA & 0xffffffffL;,2,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2129,        c = PI_O_4_BITS[0] >>> 32;,1,1,1,0,2,0,0,0,1,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2130,        d = PI_O_4_BITS[0] & 0xffffffffL;,1,1,1,0,2,0,0,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2132,        ac = a * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2133,        bd = b * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2134,        bc = b * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2135,        ad = a * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2137,        long prod2B = bd + (ad << 32);,3,2,0,1,2,1,0,0,0,5,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2138,        long prod2A = ac + (ad >>> 32);,3,2,0,1,2,1,0,0,0,5,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2140,        bita = (bd & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2141,        bitb = (ad & 0x80000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2142,        bitsum = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2145,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2147,            prod2A++;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2150,        bita = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2151,        bitb = (bc & 0x80000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2153,        prod2B = prod2B + (bc << 32);,3,2,0,1,2,0,0,0,1,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2154,        prod2A = prod2A + (bc >>> 32);,3,2,0,1,2,0,0,0,1,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2156,        bitsum = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2159,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2161,            prod2A++;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2165,        c = PI_O_4_BITS[1] >>> 32;,1,1,1,0,2,0,0,0,1,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2166,        d = PI_O_4_BITS[1] & 0xffffffffL;,1,1,1,0,2,0,0,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2167,        ac = a * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2168,        bc = b * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2169,        ad = a * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2172,        ac = ac + ((bc + ad) >>> 32);,4,3,0,2,4,0,0,0,1,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2174,        bita = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2175,        bitb = (ac & 0x8000000000000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2176,        prod2B += ac;,2,0,0,0,0,0,0,0,1,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2177,        bitsum = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2179,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2181,            prod2A++;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2185,        a = prodB >>> 32;,2,1,0,0,0,0,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2186,        b = prodB & 0xffffffffL;,2,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2187,        c = PI_O_4_BITS[0] >>> 32;,1,1,1,0,2,0,0,0,1,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2188,        d = PI_O_4_BITS[0] & 0xffffffffL;,1,1,1,0,2,0,0,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2189,        ac = a * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2190,        bc = b * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2191,        ad = a * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2194,        ac = ac + ((bc + ad) >>> 32);,4,3,0,2,4,0,0,0,1,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2196,        bita = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2197,        bitb = (ac & 0x8000000000000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2198,        prod2B += ac;,2,0,0,0,0,0,0,0,1,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2199,        bitsum = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2201,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2203,            prod2A++;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2207,        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits,3,2,0,1,2,1,0,0,0,5,68,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2208,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits,5,5,0,3,8,1,0,0,0,5,102,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2210,        double sumA = tmpA + tmpB;,3,1,0,0,0,1,0,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2211,        double sumB = -(sumA - tmpA - tmpB);,4,1,0,1,2,1,0,0,1,6,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2214,        result[0] = intPart;,1,0,1,0,2,0,0,0,1,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2215,        result[1] = sumA * 2.0;,1,1,1,0,2,0,0,0,1,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2216,        result[2] = sumB * 2.0;,1,1,1,0,2,0,0,0,1,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2217,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2234,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2235,            xa = -xa;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2240,            long bits = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2241,            if (bits < 0) {,1,1,0,1,3,1,0,0,0,5,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2242,                return -0.0;,0,0,0,0,0,1,0,0,1,2,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2244,            return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2248,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2256,            double reduceResults[] = new double[3];,1,0,0,0,4,3,0,0,0,3,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2257,"            reducePayneHanek(xa, reduceResults);",0,0,0,0,2,0,3,0,1,3,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2258,            quadrant = ((int) reduceResults[0]) & 3;,1,1,1,2,6,1,0,0,1,7,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2259,            xa = reduceResults[1];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2260,            xb = reduceResults[2];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2261,        } else if (xa > 1.5707963267948966) {,1,1,0,1,4,2,0,0,0,5,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2269,            quadrant ^= 2;  // Flip bit 1,1,0,0,0,0,0,0,0,1,2,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2276,"                return cosQ(xa, xb);",0,0,0,0,2,1,3,0,1,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2280,"                return -cosQ(xa, xb);",0,0,0,0,2,1,3,0,2,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2282,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2298,            xa = -xa;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2302,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2311,            double reduceResults[] = new double[3];,1,0,0,0,4,3,0,0,0,3,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2312,"            reducePayneHanek(xa, reduceResults);",0,0,0,0,2,0,3,0,1,3,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2313,            quadrant = ((int) reduceResults[0]) & 3;,1,1,1,2,6,1,0,0,1,7,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2314,            xa = reduceResults[1];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2315,            xb = reduceResults[2];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2316,        } else if (xa > 1.5707963267948966) {,1,1,0,1,4,2,0,0,0,5,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2330,"                return -sinQ(xa, xb);",0,0,0,0,2,1,3,0,2,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2334,"                return sinQ(xa, xb);",0,0,0,0,2,1,3,0,1,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2336,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2347,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2348,        int quadrant = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2351,        double xa = x;,2,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2352,        if (x < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2353,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2354,            xa = -xa;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2358,        if (xa == 0.0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2359,            long bits = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2360,            if (bits < 0) {,1,1,0,1,3,1,0,0,0,5,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2361,                return -0.0;,0,0,0,0,0,1,0,0,1,2,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2363,            return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2366,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,5,3,0,1,3,1,0,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2367,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2371,        double xb = 0;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2372,        if (xa > 3294198.0) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2376,            double reduceResults[] = new double[3];,1,0,0,0,4,3,0,0,0,3,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2377,"            reducePayneHanek(xa, reduceResults);",0,0,0,0,2,0,3,0,1,3,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2378,            quadrant = ((int) reduceResults[0]) & 3;,1,1,1,2,6,1,0,0,1,7,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2379,            xa = reduceResults[1];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2380,            xb = reduceResults[2];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2381,        } else if (xa > 1.5707963267948966) {,1,1,0,1,4,2,0,0,0,5,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2382,            final CodyWaite cw = new CodyWaite(xa);,2,0,0,1,2,2,0,2,2,6,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2383,            quadrant = cw.getK() & 3;,1,1,0,1,2,0,2,0,1,6,25,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2384,            xa = cw.getRemA();,1,0,0,1,2,0,2,0,1,5,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2385,            xb = cw.getRemB();,1,0,0,1,2,0,2,0,1,5,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2388,        if (xa > 1.5) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2390,            final double pi2a = 1.5707963267948966;,1,0,0,0,0,2,0,0,1,3,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2391,            final double pi2b = 6.123233995736766E-17;,1,0,0,0,0,2,0,0,1,3,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2393,            final double a = pi2a - xa;,3,1,0,0,0,2,0,0,1,4,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2394,            double b = -(a - pi2a + xa);,4,2,0,1,2,1,0,0,1,6,28,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2395,            b += pi2b - xb;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2397,            xa = a + b;,3,1,0,0,0,0,0,0,1,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2398,            xb = -(xa - a - b);,4,1,0,1,2,0,0,0,2,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2399,            quadrant ^= 1;,1,0,0,0,0,0,0,0,1,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2400,            negative ^= true;,1,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2404,        if ((quadrant & 1) == 0) {,1,2,0,2,5,1,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2405,"            result = tanQ(xa, xb, false);",1,0,0,0,2,0,3,0,3,4,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2407,"            result = -tanQ(xa, xb, true);",1,0,0,0,2,0,3,0,4,4,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2410,        if (negative) {,1,0,0,1,3,1,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2411,            result = -result;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2414,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2423,"        return atan(x, 0.0, false);",0,0,0,0,2,1,2,0,2,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2433,        boolean negate = false;,1,0,0,0,0,1,0,0,1,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2436,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,1,1,0,1,3,2,0,0,0,5,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2437,"            return leftPlane ? copySign(Math.PI, xa) : xa;",4,0,0,0,2,1,2,0,1,5,46,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2440,        if (xa < 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2442,            xa = -xa;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2443,            xb = -xb;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2444,            negate = true;,1,0,0,0,0,0,0,0,2,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2447,        if (xa > 1.633123935319537E16) { // Very large input,1,1,0,1,3,1,0,0,0,5,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2448,            return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);,8,3,0,1,6,1,0,0,1,6,69,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2452,        if (xa < 1) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2453,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,4,4,0,3,8,1,0,0,2,6,65,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2455,            final double oneOverXa = 1 / xa;,2,1,0,0,0,2,0,0,1,4,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2456,            idx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);,4,4,0,3,8,1,0,0,3,6,89,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2458,        double epsA = xa - TANGENT_TABLE_A[idx];,2,1,1,0,2,1,0,0,0,5,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2459,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,3,2,1,1,4,1,0,0,1,7,50,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2460,        epsB += xb - TANGENT_TABLE_B[idx];,2,1,1,0,2,0,0,0,1,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2462,        double temp = epsA + epsB;,3,1,0,0,0,1,0,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2463,        epsB = -(temp - epsA - epsB);,4,1,0,1,2,0,0,0,2,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2464,        epsA = temp;,2,0,0,0,0,0,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2467,        temp = xa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2468,        double ya = xa + temp - temp;,4,2,0,0,0,1,0,0,0,3,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2469,        double yb = xb + xa - ya;,4,2,0,0,0,1,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2470,        xa = ya;,2,0,0,0,0,0,0,0,1,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2471,        xb += yb;,2,0,0,0,0,0,0,0,1,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2474,        if (idx == 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2477,            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,3,5,1,2,10,2,0,0,1,7,91,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2479,            ya = epsA * denom;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2480,            yb = epsB * denom;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2481,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2482,            double temp2 = xa * TANGENT_TABLE_A[idx];,2,1,1,0,2,1,0,0,0,5,41,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2483,            double za = 1d + temp2;,2,1,0,0,0,1,0,0,0,3,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2484,            double zb = -(za - 1d - temp2);,3,1,0,1,2,1,0,0,1,6,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2485,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,3,3,1,0,4,0,0,0,1,5,62,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2486,            temp = za + temp2;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2487,            zb += -(temp - za - temp2);,4,1,0,1,2,0,0,0,2,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2488,            za = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2490,            zb += xb * TANGENT_TABLE_B[idx];,2,1,1,0,2,0,0,0,1,5,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2491,            ya = epsA / za;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2493,            temp = ya * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2494,            final double yaa = (ya + temp) - temp;,4,2,0,1,2,2,0,0,1,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2495,            final double yab = ya - yaa;,3,1,0,0,0,2,0,0,1,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2497,            temp = za * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2498,            final double zaa = (za + temp) - temp;,4,2,0,1,2,2,0,0,1,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2499,            final double zab = za - zaa;,3,1,0,0,0,2,0,0,1,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2502,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,11,9,0,1,2,0,0,0,1,5,65,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2504,            yb += -epsA * zb / za / za;,5,3,0,0,0,0,0,0,2,3,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2505,            yb += epsB / za;,3,1,0,0,0,0,0,0,1,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2509,        epsA = ya;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2510,        epsB = yb;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2513,        final double epsA2 = epsA * epsA;,3,1,0,0,0,2,0,0,1,4,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2524,        yb = 0.07490822288864472;,1,0,0,0,0,0,0,0,1,2,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2525,        yb = yb * epsA2 + -0.09088450866185192;,3,2,0,0,0,0,0,0,2,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2526,        yb = yb * epsA2 + 0.11111095942313305;,3,2,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2527,        yb = yb * epsA2 + -0.1428571423679182;,3,2,0,0,0,0,0,0,2,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2528,        yb = yb * epsA2 + 0.19999999999923582;,3,2,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2529,        yb = yb * epsA2 + -0.33333333333333287;,3,2,0,0,0,0,0,0,2,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2530,        yb = yb * epsA2 * epsA;,4,1,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2533,        ya = epsA;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2535,        temp = ya + yb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2536,        yb = -(temp - ya - yb);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2537,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2540,        yb += epsB / (1d + epsA * epsA);,4,3,0,1,2,0,0,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2543,        double za = EIGHTHS[idx] + ya;,2,1,1,0,2,1,0,0,0,5,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2544,        double zb = -(za - EIGHTHS[idx] - ya);,3,1,1,1,4,1,0,0,1,7,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2545,        temp = za + yb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2546,        zb += -(temp - za - yb);,4,1,0,1,2,0,0,0,2,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2547,        za = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2549,        double result = za + zb;,3,1,0,0,0,1,0,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2550,        double resultb = -(result - za - zb);,4,1,0,1,2,1,0,0,1,6,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2552,        if (leftPlane) {,1,0,0,1,3,1,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2554,            final double pia = 1.5707963267948966 * 2;,1,1,0,0,0,2,0,0,1,4,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2555,            final double pib = 6.123233995736766E-17 * 2;,1,1,0,0,0,2,0,0,1,4,45,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2557,            za = pia - result;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2558,            zb = -(za - pia + result);,4,2,0,1,2,0,0,0,2,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2559,            zb += pib - resultb;,3,1,0,0,0,0,0,0,1,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2561,            result = za + zb;,3,1,0,0,0,0,0,0,1,3,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2562,            resultb = -(result - za - zb);,4,1,0,1,2,0,0,0,2,5,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2566,        if (negate ^ leftPlane) {,2,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2567,            result = -result;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2570,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2580,        if (x != x || y != y) {,4,3,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2581,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2584,        if (y == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2585,            final double result = x * y;,3,1,0,0,0,2,0,0,1,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2586,            final double invx = 1d / x;,2,1,0,0,0,2,0,0,1,4,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2587,            final double invy = 1d / y;,2,1,0,0,0,2,0,0,1,4,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2589,            if (invx == 0) { // X is infinite,1,1,0,1,3,1,0,0,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2590,                if (x > 0) {,1,1,0,1,3,1,0,0,0,5,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2591,                    return y; // return +/- 0.0,1,0,0,0,0,2,0,0,0,2,27,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2593,"                    return copySign(Math.PI, y);",2,0,0,0,2,1,2,0,1,5,28,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2597,            if (x < 0 || invx < 0) {,2,3,0,1,3,1,0,0,0,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2598,                if (y < 0 || invy < 0) {,2,3,0,1,3,1,0,0,0,5,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2599,                    return -Math.PI;,2,0,0,0,0,1,0,0,1,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2601,                    return Math.PI;,2,0,0,0,0,1,0,0,0,2,15,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2604,                return result;,1,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2610,        if (y == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2611,            if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2612,                return Math.PI * F_1_4;,3,1,0,0,0,1,0,0,0,3,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2615,            if (x == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2616,                return Math.PI * F_3_4;,3,1,0,0,0,1,0,0,0,3,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2619,            return Math.PI * F_1_2;,3,1,0,0,0,1,0,0,0,3,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2622,        if (y == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2623,            if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2624,                return -Math.PI * F_1_4;,3,1,0,0,0,1,0,0,1,4,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2627,            if (x == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2628,                return -Math.PI * F_3_4;,3,1,0,0,0,1,0,0,1,4,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2631,            return -Math.PI * F_1_2;,3,1,0,0,0,1,0,0,1,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2634,        if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2635,            if (y > 0 || 1 / y > 0) {,2,4,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2636,                return 0d;,0,0,0,0,0,1,0,0,0,1,10,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2639,            if (y < 0 || 1 / y < 0) {,2,4,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2640,                return -0d;,0,0,0,0,0,1,0,0,1,2,11,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2644,        if (x == Double.NEGATIVE_INFINITY),3,1,0,1,2,1,0,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2646,            if (y > 0.0 || 1 / y > 0.0) {,2,4,0,1,3,1,0,0,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2647,                return Math.PI;,2,0,0,0,0,1,0,0,0,2,15,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2650,            if (y < 0 || 1 / y < 0) {,2,4,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2651,                return -Math.PI;,2,0,0,0,0,1,0,0,1,3,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2657,        if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2658,            if (y > 0 || 1 / y > 0) {,2,4,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2659,                return Math.PI * F_1_2;,3,1,0,0,0,1,0,0,0,3,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2662,            if (y < 0 || 1 / y < 0) {,2,4,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2663,                return -Math.PI * F_1_2;,3,1,0,0,0,1,0,0,1,4,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2668,        final double r = y / x;,3,1,0,0,0,2,0,0,1,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2669,        if (Double.isInfinite(r)) { // bypass calculations that can create NaN,0,0,0,2,5,1,3,0,0,4,70,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2670,"            return atan(r, 0, x < 0);",1,1,0,0,2,1,2,0,1,6,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2673,        double ra = doubleHighPart(r);,1,0,0,1,2,1,2,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2674,        double rb = r - ra;,3,1,0,0,0,1,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2677,        final double xa = doubleHighPart(x);,1,0,0,1,2,2,2,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2678,        final double xb = x - xa;,3,1,0,0,0,2,0,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2680,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,11,9,0,1,2,0,0,0,1,5,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2682,        final double temp = ra + rb;,3,1,0,0,0,2,0,0,1,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2683,        rb = -(temp - ra - rb);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2684,        ra = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2686,        if (ra == 0) { // Fix up the sign so atan works correctly,1,1,0,1,3,1,0,0,0,5,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2687,"            ra = copySign(0d, y);",1,0,0,0,2,0,2,0,2,4,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2691,"        final double result = atan(ra, rb, x < 0);",2,1,0,0,2,2,3,0,2,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2693,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2701,      if (x != x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2702,          return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2705,      if (x > 1.0 || x < -1.0) {,2,3,0,1,3,1,0,0,1,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2706,          return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2709,      if (x == 1.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2710,          return Math.PI/2.0;,2,1,0,0,0,1,0,0,0,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2713,      if (x == -1.0) {,1,1,0,1,3,1,0,0,1,6,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2714,          return -Math.PI/2.0;,2,1,0,0,0,1,0,0,1,4,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2717,      if (x == 0.0) { // Matches +/- 0.0; return correct sign,1,1,0,1,3,2,0,0,0,5,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2718,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2724,      double temp = x * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2725,      final double xa = x + temp - temp;,4,2,0,0,0,2,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2726,      final double xb = x - xa;,3,1,0,0,0,2,0,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2729,      double ya = xa*xa;,3,1,0,0,0,1,0,0,0,3,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2730,      double yb = xa*xb*2.0 + xb*xb;,5,3,0,0,0,1,0,0,0,3,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2733,      ya = -ya;,2,0,0,0,0,0,0,0,2,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2734,      yb = -yb;,2,0,0,0,0,0,0,0,2,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2736,      double za = 1.0 + ya;,2,1,0,0,0,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2737,      double zb = -(za - 1.0 - ya);,3,1,0,1,2,1,0,0,1,6,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2739,      temp = za + yb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2740,      zb += -(temp - za - yb);,4,1,0,1,2,0,0,0,2,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2741,      za = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2745,      y = sqrt(za);,1,0,0,1,2,0,2,0,2,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2746,      temp = y * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2747,      ya = y + temp - temp;,4,2,0,0,0,0,0,0,1,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2748,      yb = y - ya;,3,1,0,0,0,0,0,0,1,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2751,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,9,8,0,1,4,0,0,0,1,5,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2754,      double dx = zb / (2.0*y);,3,2,0,1,2,1,0,0,0,5,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2757,      double r = x/y;,3,1,0,0,0,1,0,0,0,3,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2758,      temp = r * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2759,      double ra = r + temp - temp;,4,2,0,0,0,1,0,0,0,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2760,      double rb = r - ra;,3,1,0,0,0,1,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2762,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,11,9,0,1,2,1,0,0,1,6,83,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2763,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,5,3,0,0,0,0,0,0,2,3,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2765,      temp = ra + rb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2766,      rb = -(temp - ra - rb);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2767,      ra = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2769,"      return atan(ra, rb, false);",0,0,0,0,2,1,3,0,2,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2777,      if (x != x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2778,          return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2781,      if (x > 1.0 || x < -1.0) {,2,3,0,1,3,1,0,0,1,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2782,          return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2785,      if (x == -1.0) {,1,1,0,1,3,1,0,0,1,6,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2786,          return Math.PI;,2,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2789,      if (x == 1.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2790,          return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2793,      if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2794,          return Math.PI/2.0;,2,1,0,0,0,1,0,0,0,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2800,      double temp = x * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2801,      final double xa = x + temp - temp;,4,2,0,0,0,2,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2802,      final double xb = x - xa;,3,1,0,0,0,2,0,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2805,      double ya = xa*xa;,3,1,0,0,0,1,0,0,0,3,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2806,      double yb = xa*xb*2.0 + xb*xb;,5,3,0,0,0,1,0,0,0,3,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2809,      ya = -ya;,2,0,0,0,0,0,0,0,2,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2810,      yb = -yb;,2,0,0,0,0,0,0,0,2,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2812,      double za = 1.0 + ya;,2,1,0,0,0,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2813,      double zb = -(za - 1.0 - ya);,3,1,0,1,2,1,0,0,1,6,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2815,      temp = za + yb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2816,      zb += -(temp - za - yb);,4,1,0,1,2,0,0,0,2,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2817,      za = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2820,      double y = sqrt(za);,1,0,0,1,2,1,2,0,1,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2821,      temp = y * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2822,      ya = y + temp - temp;,4,2,0,0,0,0,0,0,1,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2823,      yb = y - ya;,3,1,0,0,0,0,0,0,1,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2826,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,9,8,0,1,4,0,0,0,1,5,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2829,      yb += zb / (2.0*y);,3,2,0,1,2,0,0,0,1,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2830,      y = ya+yb;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2831,      yb = -(y - ya - yb);,4,1,0,1,2,0,0,0,2,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2834,      double r = y/x;,3,1,0,0,0,1,0,0,0,3,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2837,      if (Double.isInfinite(r)) { // x is effectively zero,0,0,0,2,5,1,3,0,0,4,52,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2838,          return Math.PI/2; // so return the appropriate value,2,1,0,0,0,2,0,0,0,3,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2841,      double ra = doubleHighPart(r);,1,0,0,1,2,1,2,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2842,      double rb = r - ra;,3,1,0,0,0,1,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2844,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,11,9,0,1,2,1,0,0,1,6,83,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2845,      rb += yb / x;  // Add in effect additional bits of sqrt.,3,1,0,0,0,0,0,0,1,3,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2847,      temp = ra + rb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2848,      rb = -(temp - ra - rb);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2849,      ra = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2851,"      return atan(ra, rb, x<0);",1,1,0,0,2,1,3,0,1,6,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2860,      long inbits = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,41,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2861,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,2,3,0,2,6,2,0,0,0,5,53,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2862,      boolean subnormal = false;,1,0,0,0,0,1,0,0,1,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2864,      if (exponent == -1023) {,1,1,0,1,3,1,0,0,1,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2865,          if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2866,              return x;,1,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2870,          subnormal = true;,1,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2871,          x *= 1.8014398509481984E16;  // 2^54,1,0,0,0,0,0,0,0,1,2,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2872,          inbits = Double.doubleToLongBits(x);,1,0,0,1,2,0,3,0,1,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2873,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,2,3,0,2,6,1,0,0,1,6,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2876,      if (exponent == 1024) {,1,1,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2878,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2882,      int exp3 = exponent / 3;,2,1,0,0,0,1,0,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2885,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,2,2,0,1,3,1,2,0,0,6,68,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2889,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,2,2,0,2,4,2,2,0,1,7,98,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2892,      double est = -0.010714690733195933;,1,0,0,0,0,1,0,0,1,3,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2893,      est = est * mant + 0.0875862700108075;,3,2,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2894,      est = est * mant + -0.3058015757857271;,3,2,0,0,0,0,0,0,2,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2895,      est = est * mant + 0.7249995199969751;,3,2,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2896,      est = est * mant + 0.5039018405998233;,3,2,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2898,      est *= CBRTTWO[exponent % 3 + 2];,2,2,1,0,2,0,0,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2903,      final double xs = x / (p2*p2*p2);,5,2,0,1,2,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2904,      est += (xs - est*est*est) / (3*est*est);,7,4,0,1,4,0,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2905,      est += (xs - est*est*est) / (3*est*est);,7,4,0,1,4,0,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2908,      double temp = est * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2909,      double ya = est + temp - temp;,4,2,0,0,0,1,0,0,0,3,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2910,      double yb = est - ya;,3,1,0,0,0,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2912,      double za = ya * ya;,3,1,0,0,0,1,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2913,      double zb = ya * yb * 2.0 + yb * yb;,5,3,0,0,0,1,0,0,0,3,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2914,      temp = za * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2915,      double temp2 = za + temp - temp;,4,2,0,0,0,1,0,0,0,3,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2916,      zb += za - temp2;,3,1,0,0,0,0,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2917,      za = temp2;,2,0,0,0,0,0,0,0,1,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2919,      zb = za * yb + ya * zb + zb * yb;,7,5,0,0,0,0,0,0,1,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2920,      za = za * ya;,3,1,0,0,0,0,0,0,1,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2922,      double na = xs - za;,3,1,0,0,0,1,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2923,      double nb = -(na - xs + za);,4,2,0,1,2,1,0,0,1,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2924,      nb -= zb;,2,0,0,0,0,0,0,0,1,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2926,      est += (na+nb)/(3*est*est);,5,3,0,1,4,0,0,0,1,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2929,      est *= p2;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2931,      if (subnormal) {,1,0,0,1,3,1,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2932,          est *= 3.814697265625E-6;  // 2^-18,1,0,0,0,0,0,0,0,1,2,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2935,      return est;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2945,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,1,2,0,2,5,2,3,0,0,6,79,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2946,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2950,        final double facta = 0.01745329052209854;,1,0,0,0,0,2,0,0,1,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2951,        final double factb = 1.997844754509471E-9;,1,0,0,0,0,2,0,0,1,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2953,        double xa = doubleHighPart(x);,1,0,0,1,2,1,2,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2954,        double xb = x - xa;,3,1,0,0,0,1,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2956,        double result = xb * factb + xb * facta + xa * factb + xa * facta;,9,7,0,0,0,1,0,0,0,3,66,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2957,        if (result == 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2958,            result = result * x; // ensure correct sign if calculation underflows,3,1,0,0,0,1,0,0,1,4,69,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2960,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2970,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,1,2,0,2,5,2,3,0,0,6,79,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2971,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2975,        final double facta = 57.2957763671875;,1,0,0,0,0,2,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2976,        final double factb = 3.145894820876798E-6;,1,0,0,0,0,2,0,0,1,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2978,        double xa = doubleHighPart(x);,1,0,0,1,2,1,2,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2979,        double xb = x - xa;,3,1,0,0,0,1,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2981,        return xb * factb + xb * facta + xa * factb + xa * facta;,8,7,0,0,0,1,0,0,0,3,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2990,        return (x < 0) ? -x : x;,3,1,0,1,2,1,0,0,1,6,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,2999,        return (x < 0l) ? -x : x;,3,1,0,1,2,1,0,0,1,6,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3008,        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0,4,2,0,1,4,1,0,0,1,6,64,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3017,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,4,2,0,1,4,1,0,0,1,6,61,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3026,        if (Double.isInfinite(x)) {,0,0,0,2,5,1,3,0,0,4,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3027,            return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3029,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,1,2,0,3,6,1,6,0,1,7,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3038,        if (Float.isInfinite(x)) {,0,0,0,2,5,1,3,0,0,4,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3039,            return Float.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3041,        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));,1,2,0,3,6,1,6,0,1,7,66,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3053,        if ((n > -1023) && (n < 1024)) {,2,3,0,2,7,1,0,0,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3054,            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);,2,3,0,3,8,2,2,0,0,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3058,        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {,1,2,0,2,9,1,6,0,0,6,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3059,            return d;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3061,        if (n < -2098) {,1,1,0,1,3,1,0,0,1,6,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3062,            return (d > 0) ? 0.0 : -0.0;,1,1,0,1,2,1,0,0,1,6,28,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3064,        if (n > 2097) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3065,            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,5,1,0,1,2,1,0,0,0,5,69,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3069,        final long bits = Double.doubleToLongBits(d);,1,0,0,1,2,2,3,0,1,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3070,        final long sign = bits & 0x8000000000000000L;,2,1,0,0,0,2,0,0,1,4,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3071,        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;,2,2,0,2,6,2,0,0,0,5,48,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3072,        long mantissa   = bits & 0x000fffffffffffffL;,2,1,0,0,0,1,0,0,0,3,45,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3075,        int scaledExponent = exponent + n;,3,1,0,0,0,1,0,0,0,3,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3077,        if (n < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3079,            if (scaledExponent > 0) {,1,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3081,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,3,2,0,4,8,2,2,0,0,6,82,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3082,            } else if (scaledExponent > -53) {,1,1,0,1,4,2,0,0,1,6,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3086,                mantissa = mantissa | (1L << 52);,2,2,0,1,2,0,0,0,1,5,33,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3089,                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));,3,2,0,2,4,2,0,0,2,6,73,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3090,                mantissa = mantissa >>> (1 - scaledExponent);,3,2,0,1,2,0,0,0,1,5,45,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3091,                if (mostSignificantLostBit != 0) {,1,1,0,1,3,1,0,0,0,5,34,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3093,                    mantissa++;,1,0,0,0,0,0,0,0,1,2,11,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3095,                return Double.longBitsToDouble(sign | mantissa);,2,1,0,1,2,1,2,0,0,6,48,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3099,                return (sign == 0L) ? 0.0 : -0.0;,1,1,0,1,2,1,0,0,1,6,33,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3103,            if (exponent == 0) {,1,1,0,1,3,1,0,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3106,                while ((mantissa >>> 52) != 1) {,1,2,0,2,5,1,0,0,0,5,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3107,                    mantissa = mantissa << 1;,2,1,0,0,0,0,0,0,1,3,25,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3108,                    --scaledExponent;,1,0,0,0,0,0,0,0,1,2,17,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3110,                ++scaledExponent;,1,0,0,0,0,0,0,0,1,2,17,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3111,                mantissa = mantissa & 0x000fffffffffffffL;,2,1,0,0,0,0,0,0,1,3,42,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3113,                if (scaledExponent < 2047) {,1,1,0,1,3,1,0,0,0,5,28,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3114,                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,3,2,0,4,8,2,2,0,0,6,82,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3116,                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,5,1,0,1,2,1,0,0,0,5,74,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3119,            } else if (scaledExponent < 2047) {,1,1,0,1,4,2,0,0,0,5,35,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3120,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,3,2,0,4,8,2,2,0,0,6,82,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3122,                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,5,1,0,1,2,1,0,0,0,5,74,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3137,        if ((n > -127) && (n < 128)) {,2,3,0,2,7,1,0,0,1,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3138,            return f * Float.intBitsToFloat((n + 127) << 23);,2,3,0,2,4,1,2,0,0,6,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3142,        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {,1,2,0,2,9,1,6,0,0,6,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3143,            return f;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3145,        if (n < -277) {,1,1,0,1,3,1,0,0,1,6,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3146,            return (f > 0) ? 0.0f : -0.0f;,1,1,0,1,2,1,0,0,1,6,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3148,        if (n > 276) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3149,            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,5,1,0,1,2,1,0,0,0,5,67,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3153,        final int bits = Float.floatToIntBits(f);,1,0,0,1,2,2,3,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3154,        final int sign = bits & 0x80000000;,2,1,0,0,0,2,0,0,1,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3155,        int  exponent  = (bits >>> 23) & 0xff;,2,2,0,1,2,1,0,0,0,5,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3156,        int mantissa   = bits & 0x007fffff;,2,1,0,0,0,1,0,0,0,3,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3159,        int scaledExponent = exponent + n;,3,1,0,0,0,1,0,0,0,3,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3161,        if (n < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3163,            if (scaledExponent > 0) {,1,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3165,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,3,2,0,2,4,1,2,0,0,6,70,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3166,            } else if (scaledExponent > -24) {,1,1,0,1,4,2,0,0,1,6,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3170,                mantissa = mantissa | (1 << 23);,2,2,0,1,2,0,0,0,1,5,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3173,                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));,3,2,0,2,4,2,0,0,2,6,71,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3174,                mantissa = mantissa >>> (1 - scaledExponent);,3,2,0,1,2,0,0,0,1,5,45,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3175,                if (mostSignificantLostBit != 0) {,1,1,0,1,3,1,0,0,0,5,34,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3177,                    mantissa++;,1,0,0,0,0,0,0,0,1,2,11,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3179,                return Float.intBitsToFloat(sign | mantissa);,2,1,0,1,2,1,2,0,0,6,45,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3183,                return (sign == 0) ? 0.0f : -0.0f;,1,1,0,1,2,1,0,0,1,6,34,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3187,            if (exponent == 0) {,1,1,0,1,3,1,0,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3190,                while ((mantissa >>> 23) != 1) {,1,2,0,2,5,1,0,0,0,5,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3191,                    mantissa = mantissa << 1;,2,1,0,0,0,0,0,0,1,3,25,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3192,                    --scaledExponent;,1,0,0,0,0,0,0,0,1,2,17,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3194,                ++scaledExponent;,1,0,0,0,0,0,0,0,1,2,17,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3195,                mantissa = mantissa & 0x007fffff;,2,1,0,0,0,0,0,0,1,3,33,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3197,                if (scaledExponent < 255) {,1,1,0,1,3,1,0,0,0,5,27,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3198,                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,3,2,0,2,4,1,2,0,0,6,70,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3200,                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,5,1,0,1,2,1,0,0,0,5,71,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3203,            } else if (scaledExponent < 255) {,1,1,0,1,4,2,0,0,0,5,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3204,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,3,2,0,2,4,1,2,0,0,6,70,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3206,                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,5,1,0,1,2,1,0,0,0,5,71,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3246,        if (Double.isNaN(d) || Double.isNaN(direction)) {,0,1,0,2,7,1,6,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3247,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3248,        } else if (d == direction) {,2,1,0,1,4,2,0,0,0,5,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3249,            return direction;,1,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3250,        } else if (Double.isInfinite(d)) {,0,0,0,2,6,2,3,0,0,4,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3251,            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;,5,1,0,1,2,1,0,0,1,6,54,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3252,        } else if (d == 0) {,1,1,0,1,4,2,0,0,0,5,20,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3253,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,5,1,0,1,2,1,0,0,1,6,62,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3258,        final long bits = Double.doubleToLongBits(d);,1,0,0,1,2,2,3,0,1,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3259,        final long sign = bits & 0x8000000000000000L;,2,1,0,0,0,2,0,0,1,4,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3260,        if ((direction < d) ^ (sign == 0L)) {,3,3,0,2,7,1,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3261,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));,2,3,0,3,6,1,2,0,0,6,74,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3263,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));,2,3,0,3,6,1,2,0,0,6,74,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3302,        if (Double.isNaN(f) || Double.isNaN(direction)) {,0,1,0,2,7,1,6,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3303,            return Float.NaN;,2,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3304,        } else if (f == direction) {,2,1,0,1,4,2,0,0,0,5,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3305,            return (float) direction;,1,0,0,1,2,2,0,0,0,4,25,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3306,        } else if (Float.isInfinite(f)) {,0,0,0,2,6,2,3,0,0,4,33,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3307,            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;,5,1,0,1,2,1,0,0,1,6,53,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3308,        } else if (f == 0f) {,1,1,0,1,4,2,0,0,0,5,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3309,            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;,5,1,0,1,2,1,0,0,1,6,60,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3314,        final int bits = Float.floatToIntBits(f);,1,0,0,1,2,2,3,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3315,        final int sign = bits & 0x80000000;,2,1,0,0,0,2,0,0,1,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3316,        if ((direction < f) ^ (sign == 0)) {,3,3,0,2,7,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3317,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));,2,3,0,3,6,1,2,0,0,6,62,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3319,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));,2,3,0,3,6,1,2,0,0,6,62,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3331,        if (x != x) { // NaN,2,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3332,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3335,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,4,3,0,1,3,1,0,0,1,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3336,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3339,        y = (long) x;,2,0,0,1,2,1,0,0,1,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3340,        if (x < 0 && y != x) {,3,3,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3341,            y--;,1,0,0,0,0,0,0,0,1,2,4,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3344,        if (y == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3345,            return x*y;,2,1,0,0,0,1,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3348,        return y;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3358,        if (x != x) { // NaN,2,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3359,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3362,        y = floor(x);,1,0,0,1,2,0,2,0,2,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3363,        if (y == x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3364,            return y;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3367,        y += 1.0;,1,0,0,0,0,0,0,0,1,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3369,        if (y == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3370,            return x*y;,2,1,0,0,0,1,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3373,        return y;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3381,        double y = floor(x);,1,0,0,1,2,1,2,0,1,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3382,        double d = x - y;,3,1,0,0,0,1,0,0,0,3,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3384,        if (d > 0.5) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3385,            if (y == -1.0) {,1,1,0,1,3,1,0,0,1,6,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3386,                return -0.0; // Preserve sign of operand,0,0,0,0,0,1,0,0,1,2,40,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3388,            return y+1.0;,1,1,0,0,0,1,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3390,        if (d < 0.5) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3391,            return y;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3395,        long z = (long) y;,2,0,0,1,2,2,0,0,0,4,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3396,        return (z & 1) == 0 ? y : y + 1.0;,3,3,0,1,2,1,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3404,        return (long) floor(x + 0.5);,1,1,0,1,4,2,1,0,1,7,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3412,        return (int) floor(x + 0.5f);,1,1,0,1,4,2,1,0,1,7,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3421,        return (a <= b) ? a : b;,4,1,0,1,2,1,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3430,        return (a <= b) ? a : b;,4,1,0,1,2,1,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3439,        if (a > b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3440,            return b;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3442,        if (a < b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3443,            return a;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3446,        if (a != b) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3447,            return Float.NaN;,2,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3451,        int bits = Float.floatToRawIntBits(a);,1,0,0,1,2,1,3,0,0,5,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3452,        if (bits == 0x80000000) {,1,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3453,            return a;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3455,        return b;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3464,        if (a > b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3465,            return b;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3467,        if (a < b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3468,            return a;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3471,        if (a != b) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3472,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3476,        long bits = Double.doubleToRawLongBits(a);,1,0,0,1,2,1,3,0,0,5,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3477,        if (bits == 0x8000000000000000L) {,1,1,0,1,3,1,0,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3478,            return a;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3480,        return b;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3489,        return (a <= b) ? b : a;,4,1,0,1,2,1,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3498,        return (a <= b) ? b : a;,4,1,0,1,2,1,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3507,        if (a > b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3508,            return a;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3510,        if (a < b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3511,            return b;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3514,        if (a != b) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3515,            return Float.NaN;,2,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3519,        int bits = Float.floatToRawIntBits(a);,1,0,0,1,2,1,3,0,0,5,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3520,        if (bits == 0x80000000) {,1,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3521,            return b;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3523,        return a;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3532,        if (a > b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3533,            return a;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3535,        if (a < b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3536,            return b;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3539,        if (a != b) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3540,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3544,        long bits = Double.doubleToRawLongBits(a);,1,0,0,1,2,1,3,0,0,5,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3545,        if (bits == 0x8000000000000000L) {,1,1,0,1,3,1,0,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3546,            return b;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3548,        return a;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3566,        if (Double.isInfinite(x) || Double.isInfinite(y)) {,0,1,0,2,7,1,6,0,0,5,51,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3567,            return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3568,        } else if (Double.isNaN(x) || Double.isNaN(y)) {,0,1,0,2,8,2,6,0,0,5,48,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3569,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3572,            final int expX = getExponent(x);,1,0,0,1,2,2,2,0,2,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3573,            final int expY = getExponent(y);,1,0,0,1,2,2,2,0,2,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3574,            if (expX > expY + 27) {,2,2,0,1,3,1,0,0,0,5,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3576,                return abs(x);,0,0,0,1,2,1,2,0,1,5,14,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3577,            } else if (expY > expX + 27) {,2,2,0,1,4,2,0,0,0,5,30,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3579,                return abs(y);,0,0,0,1,2,1,2,0,1,5,14,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3583,                final int middleExp = (expX + expY) / 2;,3,2,0,1,2,2,0,0,1,6,40,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3586,"                final double scaledX = scalb(x, -middleExp);",2,0,0,0,2,2,2,0,3,5,44,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3587,"                final double scaledY = scalb(y, -middleExp);",2,0,0,0,2,2,2,0,3,5,44,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3590,                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);,5,3,0,1,2,2,1,0,2,7,67,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3593,"                return scalb(scaledH, middleExp);",0,0,0,0,2,1,3,0,1,4,33,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3621,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation",0,0,0,0,2,1,4,0,0,3,90,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3633,        long m = Double.doubleToLongBits(magnitude);,1,0,0,1,2,1,3,0,0,5,44,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3634,        long s = Double.doubleToLongBits(sign);,1,0,0,1,2,1,3,0,0,5,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3635,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,4,7,0,2,7,1,0,0,0,5,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3636,            return magnitude;,1,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3638,        return -magnitude; // flip sign,1,0,0,0,0,1,0,0,1,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3650,        int m = Float.floatToIntBits(magnitude);,1,0,0,1,2,1,3,0,0,5,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3651,        int s = Float.floatToIntBits(sign);,1,0,0,1,2,1,3,0,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3652,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,4,7,0,2,7,1,0,0,0,5,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3653,            return magnitude;,1,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3655,        return -magnitude; // flip sign,1,0,0,0,0,1,0,0,1,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3668,        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;,0,3,0,3,8,2,3,0,0,5,66,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3681,        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;,0,3,0,3,6,1,3,0,0,5,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3690,        PrintStream out = System.out;,3,0,0,0,0,0,0,1,0,2,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3691,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_A"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);",2,0,0,0,2,0,4,0,1,4,96,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3692,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_B"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);",2,0,0,0,2,0,4,0,1,4,96,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3693,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_A"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);",2,0,0,0,2,0,4,0,1,4,100,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3694,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_B"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);",2,0,0,0,2,0,4,0,1,4,100,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3695,"        FastMathCalc.printarray(out, ""LN_MANT"",LN_MANT_LEN, lnMant.LN_MANT);",2,0,0,0,2,0,4,0,1,4,68,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3696,"        FastMathCalc.printarray(out, ""SINE_TABLE_A"", SINE_TABLE_LEN, SINE_TABLE_A);",0,0,0,0,2,0,5,0,1,3,75,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3697,"        FastMathCalc.printarray(out, ""SINE_TABLE_B"", SINE_TABLE_LEN, SINE_TABLE_B);",0,0,0,0,2,0,5,0,1,3,75,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3698,"        FastMathCalc.printarray(out, ""COSINE_TABLE_A"", SINE_TABLE_LEN, COSINE_TABLE_A);",0,0,0,0,2,0,5,0,1,3,79,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3699,"        FastMathCalc.printarray(out, ""COSINE_TABLE_B"", SINE_TABLE_LEN, COSINE_TABLE_B);",0,0,0,0,2,0,5,0,1,3,79,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3700,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_A"", SINE_TABLE_LEN, TANGENT_TABLE_A);",0,0,0,0,2,0,5,0,1,3,81,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3701,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_B"", SINE_TABLE_LEN, TANGENT_TABLE_B);",0,0,0,0,2,0,5,0,1,3,81,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3702,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,12,45,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,12,46,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,12,73,"        return evaluate(x, DEFAULT_EPSILON, Integer.MAX_VALUE);",2,0,0,0,2,1,3,0,1,5,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,12,84,"        return evaluate(x, epsilon, Integer.MAX_VALUE);",2,0,0,0,2,1,3,0,1,5,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,12,97,"        return evaluate(x, DEFAULT_EPSILON, maxIterations);",0,0,0,0,2,1,4,0,1,4,51,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,12,125,        final double small = 1e-50;,1,0,0,0,0,2,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,12,126,"        double hPrev = getA(0, x);",1,0,0,0,2,1,2,0,1,5,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,12,129,"        if (Precision.equals(hPrev, 0.0, small)) {",0,0,0,0,5,1,4,0,0,3,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,12,130,            hPrev = small;,2,0,0,0,0,0,0,0,1,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,12,133,        int n = 1;,1,0,0,0,0,1,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,12,134,        double dPrev = 0.0;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,12,135,        double cPrev = hPrev;,2,0,0,0,0,1,0,0,0,2,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,12,136,        double hN = hPrev;,2,0,0,0,0,1,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,12,138,        while (n < maxIterations) {,2,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,12,139,"            final double a = getA(n, x);",1,0,0,0,2,2,3,0,2,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,12,140,"            final double b = getB(n, x);",1,0,0,0,2,2,3,0,2,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,12,142,            double dN = a + b * dPrev;,4,2,0,0,0,1,0,0,0,3,26,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,12,143,"            if (Precision.equals(dN, 0.0, small)) {",0,0,0,0,5,1,4,0,0,3,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,12,144,                dN = small;,2,0,0,0,0,0,0,0,1,2,11,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,12,146,            double cN = a + b / cPrev;,4,2,0,0,0,1,0,0,0,3,26,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,12,147,"            if (Precision.equals(cN, 0.0, small)) {",0,0,0,0,5,1,4,0,0,3,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,12,148,                cN = small;,2,0,0,0,0,0,0,0,1,2,11,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,12,151,            dN = 1 / dN;,2,1,0,0,0,0,0,0,1,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,12,152,            final double deltaN = cN * dN;,3,1,0,0,0,2,0,0,1,4,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,12,153,            hN = hPrev * deltaN;,3,1,0,0,0,0,0,0,1,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,12,155,            if (Double.isInfinite(hN)) {,0,0,0,2,5,1,3,0,0,4,28,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,12,156,"                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,",2,0,0,0,1,2,0,1,1,5,87,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,12,159,            if (Double.isNaN(hN)) {,0,0,0,2,5,1,3,0,0,4,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,12,160,"                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,",2,0,0,0,1,2,0,1,1,5,82,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,12,164,            if (FastMath.abs(deltaN - 1.0) < epsilon) {,2,2,0,2,5,1,2,0,0,6,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,12,165,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,12,168,            dPrev = dN;,2,0,0,0,0,0,0,0,1,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,12,169,            cPrev = cN;,2,0,0,0,0,0,0,0,1,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,12,170,            hPrev = hN;,2,0,0,0,0,0,0,0,1,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,12,171,            n++;,1,0,0,0,0,0,0,0,1,2,4,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,12,172,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,12,174,        if (n >= maxIterations) {,2,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,12,175,"            throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,",2,0,0,0,1,2,0,1,1,5,87,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,12,179,        return hN;,1,0,0,0,0,1,0,0,0,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3838,                --k;,1,0,0,0,0,0,0,0,1,2,4,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,12,3839,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,12,6134,    private FastMathLiteralArrays() {},1,0,0,1,4,1,0,0,1,5,34,2,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,404,            ContinuedFraction cf = new ContinuedFraction() {,1,0,0,1,3,1,0,2,1,6,48,8,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,408,                    return ((2.0 * n) + 1.0) - a + x;,3,4,0,2,4,1,0,0,0,5,33,14,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,413,                    return n * (a - n);,3,2,0,1,2,1,0,0,0,5,19,14,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,219,    private Gamma() {},1,0,0,1,4,1,0,0,1,5,18,2,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,247,        if (Double.isNaN(x) || (x <= 0.0)) {,1,2,0,2,7,1,3,0,0,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,248,            ret = Double.NaN;,3,0,0,0,0,0,0,0,1,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,249,        } else if (x < 0.5) {,1,1,0,1,4,2,0,0,0,5,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,250,            return logGamma1p(x) - FastMath.log(x);,0,1,0,1,4,1,5,0,1,6,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,251,        } else if (x <= 2.5) {,1,1,0,1,4,2,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,252,            return logGamma1p((x - 0.5) - 0.5);,1,2,0,2,4,1,1,0,1,7,35,8,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,253,        } else if (x <= 8.0) {,1,1,0,1,4,2,0,0,0,5,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,254,            final int n = (int) FastMath.floor(x - 1.5);,2,1,0,1,4,3,2,0,1,7,44,9,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,255,            double prod = 1.0;,1,0,0,0,0,1,0,0,0,2,18,10,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,256,            for (int i = 1; i <= n; i++) {,4,1,0,1,3,2,0,0,1,6,30,9,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,257,                prod *= x - i;,3,1,0,0,0,0,0,0,1,3,14,11,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,259,            return logGamma1p(x - (n + 1)) + FastMath.log(prod);,2,3,0,2,6,1,4,0,1,7,52,9,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,261,            double sum = lanczos(x);,1,0,0,1,2,1,2,0,1,6,24,10,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,262,            double tmp = x + LANCZOS_G + .5;,3,1,0,0,0,1,0,0,0,3,32,10,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,263,            ret = ((x + .5) * FastMath.log(tmp)) - tmp +,3,5,0,2,6,0,3,0,1,6,44,9,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,267,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,279,"        return regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",2,0,0,0,2,1,4,0,1,5,67,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,316,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,2,3,0,2,11,1,6,0,0,6,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,317,            ret = Double.NaN;,3,0,0,0,0,0,0,0,1,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,318,        } else if (x == 0.0) {,1,1,0,1,4,2,0,0,0,5,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,319,            ret = 0.0;,1,0,0,0,0,0,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,320,        } else if (x >= a + 1) {,2,2,0,1,4,2,0,0,0,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,323,"            ret = 1.0 - regularizedGammaQ(a, x, epsilon, maxIterations);",1,1,0,0,2,0,5,0,2,5,60,8,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,326,            double n = 0.0; // current element index,1,0,0,0,0,1,0,0,0,2,40,9,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,327,            double an = 1.0 / a; // n-th element in the series,2,1,0,0,0,1,0,0,0,3,50,9,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,328,            double sum = an; // partial sum,2,0,0,0,0,1,0,0,0,2,31,9,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,330,                   n < maxIterations &&,2,1,0,0,0,0,0,0,0,2,20,10,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,333,                n = n + 1.0;,2,1,0,0,0,0,0,0,1,3,12,10,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,334,                an = an * (x / (a + n));,5,3,0,2,4,0,0,0,1,5,24,10,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,337,                sum = sum + an;,3,1,0,0,0,0,0,0,1,3,15,10,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,339,            if (n >= maxIterations) {,2,1,0,1,3,1,0,0,0,5,25,8,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,340,                throw new MaxCountExceededException(maxIterations);,1,0,0,1,2,2,0,1,1,6,51,10,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,341,            } else if (Double.isInfinite(sum)) {,0,0,0,2,6,2,3,0,0,4,36,10,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,342,                ret = 1.0;,1,0,0,0,0,0,0,0,1,2,10,11,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,344,                ret = FastMath.exp(-x + (a * FastMath.log(x)) - logGamma(a)) * sum;,4,4,0,3,8,0,7,0,3,6,67,11,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,348,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,360,"        return regularizedGammaQ(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",2,0,0,0,2,1,4,0,1,5,67,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,394,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,2,3,0,2,11,1,6,0,0,6,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,395,            ret = Double.NaN;,3,0,0,0,0,0,0,0,1,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,396,        } else if (x == 0.0) {,1,1,0,1,4,2,0,0,0,5,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,397,            ret = 1.0;,1,0,0,0,0,0,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,398,        } else if (x < a + 1.0) {,2,2,0,1,4,2,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,401,"            ret = 1.0 - regularizedGammaP(a, x, epsilon, maxIterations);",1,1,0,0,2,0,5,0,2,5,60,8,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,404,            ContinuedFraction cf = new ContinuedFraction() {,1,0,0,1,3,1,0,2,1,6,48,8,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,417,"            ret = 1.0 / cf.evaluate(x, epsilon, maxIterations);",1,1,0,0,2,0,5,0,1,5,51,8,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,418,            ret = FastMath.exp(-x + (a * FastMath.log(x)) - logGamma(a)) * ret;,4,4,0,3,8,0,7,0,3,6,67,8,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,421,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,446,        if (x > 0 && x <= S_LIMIT) {,3,3,0,1,3,1,0,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,449,            return -GAMMA - 1 / x;,2,2,0,0,0,1,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,452,        if (x >= C_LIMIT) {,2,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,454,            double inv = 1 / (x * x);,3,2,0,1,2,1,0,0,0,5,25,7,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,458,            return FastMath.log(x) - 0.5 / x - inv * ((1.0 / 12) + inv * (1.0 / 120 - inv / 252));,4,10,0,2,8,1,3,0,0,6,86,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,461,        return digamma(x + 1) - 1 / x;,2,3,0,1,2,1,1,0,1,7,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,476,        if (x > 0 && x <= S_LIMIT) {,3,3,0,1,3,1,0,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,477,            return 1 / (x * x);,2,2,0,1,2,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,480,        if (x >= C_LIMIT) {,2,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,481,            double inv = 1 / (x * x);,3,2,0,1,2,1,0,0,0,5,25,7,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,486,            return 1 / x + inv / 2 + inv / x * (1.0 / 6 - inv * (1.0 / 30 + inv / 42));,6,12,0,2,4,1,0,0,0,5,75,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,489,        return trigamma(x + 1) + 1 / (x * x);,3,4,0,1,4,1,1,0,1,7,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,534,        if (x < -0.5) {,1,1,0,1,3,1,0,0,1,6,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,535,"            throw new NumberIsTooSmallException(x, -0.5, true);",1,0,0,0,2,2,0,1,3,5,51,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,537,        if (x > 1.5) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,538,"            throw new NumberIsTooLargeException(x, 1.5, true);",1,0,0,0,2,2,0,1,2,5,50,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,542,        final double t = x <= 0.5 ? x : (x - 0.5) - 0.5;,4,3,0,1,2,2,0,0,1,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,543,        if (t < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,544,            final double a = INV_GAMMA1P_M1_A0 + t * INV_GAMMA1P_M1_A1;,4,2,0,0,0,2,0,0,1,4,59,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,545,            double b = INV_GAMMA1P_M1_B8;,2,0,0,0,0,1,0,0,0,2,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,546,            b = INV_GAMMA1P_M1_B7 + t * b;,4,2,0,0,0,0,0,0,1,3,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,547,            b = INV_GAMMA1P_M1_B6 + t * b;,4,2,0,0,0,0,0,0,1,3,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,548,            b = INV_GAMMA1P_M1_B5 + t * b;,4,2,0,0,0,0,0,0,1,3,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,549,            b = INV_GAMMA1P_M1_B4 + t * b;,4,2,0,0,0,0,0,0,1,3,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,550,            b = INV_GAMMA1P_M1_B3 + t * b;,4,2,0,0,0,0,0,0,1,3,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,551,            b = INV_GAMMA1P_M1_B2 + t * b;,4,2,0,0,0,0,0,0,1,3,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,552,            b = INV_GAMMA1P_M1_B1 + t * b;,4,2,0,0,0,0,0,0,1,3,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,553,            b = 1.0 + t * b;,3,2,0,0,0,0,0,0,1,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,555,            double c = INV_GAMMA1P_M1_C13 + t * (a / b);,5,3,0,1,2,1,0,0,0,5,44,7,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,556,            c = INV_GAMMA1P_M1_C12 + t * c;,4,2,0,0,0,0,0,0,1,3,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,557,            c = INV_GAMMA1P_M1_C11 + t * c;,4,2,0,0,0,0,0,0,1,3,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,558,            c = INV_GAMMA1P_M1_C10 + t * c;,4,2,0,0,0,0,0,0,1,3,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,559,            c = INV_GAMMA1P_M1_C9 + t * c;,4,2,0,0,0,0,0,0,1,3,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,560,            c = INV_GAMMA1P_M1_C8 + t * c;,4,2,0,0,0,0,0,0,1,3,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,561,            c = INV_GAMMA1P_M1_C7 + t * c;,4,2,0,0,0,0,0,0,1,3,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,562,            c = INV_GAMMA1P_M1_C6 + t * c;,4,2,0,0,0,0,0,0,1,3,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,563,            c = INV_GAMMA1P_M1_C5 + t * c;,4,2,0,0,0,0,0,0,1,3,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,564,            c = INV_GAMMA1P_M1_C4 + t * c;,4,2,0,0,0,0,0,0,1,3,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,565,            c = INV_GAMMA1P_M1_C3 + t * c;,4,2,0,0,0,0,0,0,1,3,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,566,            c = INV_GAMMA1P_M1_C2 + t * c;,4,2,0,0,0,0,0,0,1,3,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,567,            c = INV_GAMMA1P_M1_C1 + t * c;,4,2,0,0,0,0,0,0,1,3,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,568,            c = INV_GAMMA1P_M1_C + t * c;,4,2,0,0,0,0,0,0,1,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,569,            if (x > 0.5) {,1,1,0,1,3,1,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,570,                ret = t * c / x;,4,2,0,0,0,0,0,0,1,3,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,572,                ret = x * ((c + 0.5) + 0.5);,3,3,0,2,4,0,0,0,1,5,28,8,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,574,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,575,            double p = INV_GAMMA1P_M1_P6;,2,0,0,0,0,1,0,0,0,2,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,576,            p = INV_GAMMA1P_M1_P5 + t * p;,4,2,0,0,0,0,0,0,1,3,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,577,            p = INV_GAMMA1P_M1_P4 + t * p;,4,2,0,0,0,0,0,0,1,3,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,578,            p = INV_GAMMA1P_M1_P3 + t * p;,4,2,0,0,0,0,0,0,1,3,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,579,            p = INV_GAMMA1P_M1_P2 + t * p;,4,2,0,0,0,0,0,0,1,3,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,580,            p = INV_GAMMA1P_M1_P1 + t * p;,4,2,0,0,0,0,0,0,1,3,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,581,            p = INV_GAMMA1P_M1_P0 + t * p;,4,2,0,0,0,0,0,0,1,3,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,583,            double q = INV_GAMMA1P_M1_Q4;,2,0,0,0,0,1,0,0,0,2,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,584,            q = INV_GAMMA1P_M1_Q3 + t * q;,4,2,0,0,0,0,0,0,1,3,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,585,            q = INV_GAMMA1P_M1_Q2 + t * q;,4,2,0,0,0,0,0,0,1,3,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,586,            q = INV_GAMMA1P_M1_Q1 + t * q;,4,2,0,0,0,0,0,0,1,3,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,587,            q = 1.0 + t * q;,3,2,0,0,0,0,0,0,1,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,589,            double c = INV_GAMMA1P_M1_C13 + (p / q) * t;,5,3,0,1,2,1,0,0,0,5,44,7,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,590,            c = INV_GAMMA1P_M1_C12 + t * c;,4,2,0,0,0,0,0,0,1,3,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,591,            c = INV_GAMMA1P_M1_C11 + t * c;,4,2,0,0,0,0,0,0,1,3,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,592,            c = INV_GAMMA1P_M1_C10 + t * c;,4,2,0,0,0,0,0,0,1,3,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,593,            c = INV_GAMMA1P_M1_C9 + t * c;,4,2,0,0,0,0,0,0,1,3,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,594,            c = INV_GAMMA1P_M1_C8 + t * c;,4,2,0,0,0,0,0,0,1,3,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,595,            c = INV_GAMMA1P_M1_C7 + t * c;,4,2,0,0,0,0,0,0,1,3,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,596,            c = INV_GAMMA1P_M1_C6 + t * c;,4,2,0,0,0,0,0,0,1,3,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,597,            c = INV_GAMMA1P_M1_C5 + t * c;,4,2,0,0,0,0,0,0,1,3,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,598,            c = INV_GAMMA1P_M1_C4 + t * c;,4,2,0,0,0,0,0,0,1,3,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,599,            c = INV_GAMMA1P_M1_C3 + t * c;,4,2,0,0,0,0,0,0,1,3,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,600,            c = INV_GAMMA1P_M1_C2 + t * c;,4,2,0,0,0,0,0,0,1,3,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,601,            c = INV_GAMMA1P_M1_C1 + t * c;,4,2,0,0,0,0,0,0,1,3,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,602,            c = INV_GAMMA1P_M1_C0 + t * c;,4,2,0,0,0,0,0,0,1,3,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,604,            if (x > 0.5) {,1,1,0,1,3,1,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,605,                ret = (t / x) * ((c - 0.5) - 0.5);,4,4,0,2,6,0,0,0,1,5,34,8,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,607,                ret = x * c;,3,1,0,0,0,0,0,0,1,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,611,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,628,        if (x < -0.5) {,1,1,0,1,3,1,0,0,1,6,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,629,"            throw new NumberIsTooSmallException(x, -0.5, true);",1,0,0,0,2,2,0,1,3,5,51,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,631,        if (x > 1.5) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,632,"            throw new NumberIsTooLargeException(x, 1.5, true);",1,0,0,0,2,2,0,1,2,5,50,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,635,        return -FastMath.log1p(invGamma1pm1(x));,0,0,0,2,4,1,4,0,2,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,650,        if ((x == FastMath.rint(x)) && (x <= 0.0)) {,2,3,0,3,9,1,3,0,0,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,651,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,655,        final double absX = FastMath.abs(x);,1,0,0,1,2,2,3,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,656,        if (absX <= 20.0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,657,            if (x >= 1.0) {,1,1,0,1,3,1,0,0,0,5,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,666,                double prod = 1.0;,1,0,0,0,0,1,0,0,0,2,18,9,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,667,                double t = x;,2,0,0,0,0,1,0,0,0,2,13,9,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,668,                while (t > 2.5) {,1,1,0,1,3,1,0,0,0,5,17,8,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,669,                    t = t - 1.0;,2,1,0,0,0,0,0,0,1,3,12,10,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,670,                    prod *= t;,2,0,0,0,0,0,0,0,1,2,10,10,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,672,                ret = prod / (1.0 + invGamma1pm1(t - 1.0));,3,3,0,2,4,0,1,0,2,6,43,8,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,673,            } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,681,                double prod = x;,2,0,0,0,0,1,0,0,0,2,16,9,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,682,                double t = x;,2,0,0,0,0,1,0,0,0,2,13,9,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,683,                while (t < -0.5) {,1,1,0,1,3,1,0,0,1,6,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,684,                    t = t + 1.0;,2,1,0,0,0,0,0,0,1,3,12,10,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,685,                    prod *= t;,2,0,0,0,0,0,0,0,1,2,10,10,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,687,                ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));,2,3,0,3,6,0,2,0,2,6,45,8,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,688,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,690,            final double y = absX + LANCZOS_G + 0.5;,3,1,0,0,0,2,0,0,1,4,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,691,            final double gammaAbs = SQRT_TWO_PI / x *,3,4,0,0,0,2,0,0,1,4,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,694,            if (x > 0.0) {,1,1,0,1,3,1,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,695,                ret = gammaAbs;,2,0,0,0,0,0,0,0,1,2,15,8,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,705,                ret = -FastMath.PI /,3,1,0,0,0,0,0,0,2,3,20,8,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,12,709,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,12,42,"        this(LocalizedFormats.MAX_COUNT_EXCEEDED, max);",3,0,0,0,2,1,0,0,0,3,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,12,43,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,12,53,                                     Object ... args) {,1,0,0,0,2,0,0,1,0,3,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,12,54,"        getContext().addMessage(specific, max, args);",0,0,0,1,4,0,5,0,1,4,45,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,12,55,        this.max = max;,2,0,0,0,0,1,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,12,56,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,12,62,        return max;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,12,113,"        throws NotStrictlyPositiveException, NumberIsTooSmallException {",2,0,0,0,1,1,0,0,0,3,64,2,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,12,116,        this.relativeAccuracy      = relativeAccuracy;,2,0,0,0,0,1,0,0,1,3,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,12,117,        this.absoluteAccuracy      = absoluteAccuracy;,2,0,0,0,0,1,0,0,1,3,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,12,120,        if (minimalIterationCount <= 0) {,1,1,0,1,3,1,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,12,121,            throw new NotStrictlyPositiveException(minimalIterationCount);,1,0,0,1,2,2,0,1,1,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,12,123,        if (maximalIterationCount <= minimalIterationCount) {,2,1,0,1,3,1,0,0,0,5,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,12,124,"            throw new NumberIsTooSmallException(maximalIterationCount, minimalIterationCount, false);",2,0,0,0,2,2,0,1,2,5,89,6,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,12,126,        this.minimalIterationCount = minimalIterationCount;,2,0,0,0,0,1,0,0,1,3,51,4,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,12,127,        this.iterations            = new Incrementor();,1,0,0,1,2,2,0,1,2,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,12,128,        iterations.setMaximalCount(maximalIterationCount);,0,0,0,1,2,0,3,0,0,3,50,5,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,12,131,        evaluations = new Incrementor();,1,0,0,1,2,1,0,1,2,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,12,133,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,12,142,"        this(relativeAccuracy, absoluteAccuracy,",2,0,0,0,1,1,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,12,144,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,12,158,"        this(DEFAULT_RELATIVE_ACCURACY, DEFAULT_ABSOLUTE_ACCURACY,",2,0,0,0,1,1,0,0,0,3,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,12,160,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,12,164,        return relativeAccuracy;,1,0,0,0,0,1,0,0,0,2,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,12,169,        return absoluteAccuracy;,1,0,0,0,0,1,0,0,0,2,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,12,174,        return minimalIterationCount;,1,0,0,0,0,1,0,0,0,2,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,12,179,        return iterations.getMaximalCount();,0,0,0,1,2,1,2,0,0,4,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,12,184,        return evaluations.getCount();,0,0,0,1,2,1,2,0,0,4,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,12,189,        return iterations.getCount();,0,0,0,1,2,1,2,0,0,4,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,12,196,        return min;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,12,202,        return max;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,12,216,            evaluations.incrementCount();,0,0,0,1,2,0,2,0,0,3,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,12,219,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,12,217,        } catch (MaxCountExceededException e) {,1,0,0,1,4,1,0,1,0,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,12,218,            throw new TooManyEvaluationsException(e.getMax());,0,0,0,2,4,2,2,1,1,6,50,7,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,12,220,        return function.value(point);,0,0,0,1,2,1,3,0,0,4,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,12,241,        MathUtils.checkNotNull(f);,0,0,0,1,2,0,3,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,12,242,"        UnivariateSolverUtils.verifyInterval(lower, upper);",0,0,0,0,2,0,4,0,0,2,51,5,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,12,245,        min = lower;,2,0,0,0,0,0,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,12,246,        max = upper;,2,0,0,0,0,0,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,12,247,        function = f;,2,0,0,0,0,0,0,0,1,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,12,248,        evaluations.setMaximalCount(maxEval);,0,0,0,1,2,0,3,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,12,249,        evaluations.resetCount();,0,0,0,1,2,0,2,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,12,250,        iterations.resetCount();,0,0,0,1,2,0,2,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,12,252,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,12,261,"        setup(maxEval, f, lower, upper);",0,0,0,0,2,0,5,0,1,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,12,264,        return doIntegrate();,0,0,0,1,2,1,1,0,1,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,12,65,"        super(relativeAccuracy, absoluteAccuracy, minimalIterationCount, maximalIterationCount);",4,0,0,0,2,1,0,0,1,4,88,3,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,12,66,        numberOfPoints = n;,2,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,12,67,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,12,79,"        this(n, relativeAccuracy, absoluteAccuracy,",3,0,0,0,1,1,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,12,81,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,12,97,"        this(n, DEFAULT_RELATIVE_ACCURACY, DEFAULT_ABSOLUTE_ACCURACY,",3,0,0,0,1,1,0,0,0,3,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,12,99,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,12,41,    private static final GaussIntegratorFactory FACTORY,1,0,0,0,0,3,0,1,3,4,51,2,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,12,106,        double oldt = stage(1);,1,0,0,1,2,1,1,0,1,6,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,12,108,        int n = 2;,1,0,0,0,0,1,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,12,111,            final double t = stage(n);,1,0,0,1,2,2,2,0,2,6,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,12,114,            final double delta = FastMath.abs(t - oldt);,3,1,0,1,2,2,2,0,1,7,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,12,115,            final double limit =,1,0,0,0,0,2,0,0,1,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,12,120,            if (iterations.getCount() + 1 >= getMinimalIterationCount() &&,0,3,0,1,5,1,3,0,1,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,12,122,                return t;,1,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,12,126,"            final double ratio = FastMath.min(4, FastMath.pow(delta / limit, 0.5 / numberOfPoints));",4,2,0,0,4,2,4,0,1,6,88,6,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,12,127,"            n = FastMath.max((int) (ratio * n), n + 1);",4,2,0,1,6,1,2,0,1,7,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,12,128,            oldt = t;,2,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,12,129,            iterations.incrementCount();,0,0,0,1,2,0,2,0,0,3,28,7,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,12,130,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,12,144,        final UnivariateFunction f = new UnivariateFunction() {,1,0,0,1,3,2,0,2,2,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,12,150,        final double min = getMin();,1,0,0,1,2,2,1,0,2,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,12,151,        final double max = getMax();,1,0,0,1,2,2,1,0,2,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,12,152,        final double step = (max - min) / n;,4,2,0,1,2,2,0,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,12,154,        double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,12,155,        for (int i = 0; i < n; i++) {,4,1,0,1,3,2,0,0,1,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,12,157,            final double a = min + i * step;,4,2,0,0,0,2,0,0,1,4,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,12,158,            final double b = a + step;,3,1,0,0,0,2,0,0,1,4,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,12,159,"            final GaussIntegrator g = FACTORY.legendreHighPrecision(numberOfPoints, a, b);",1,0,0,0,2,1,5,1,1,6,78,6,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,12,160,            sum += g.integrate(f);,1,0,0,1,2,0,3,0,1,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,12,163,        return sum;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,12,144,        final UnivariateFunction f = new UnivariateFunction() {,1,0,0,1,3,2,0,2,2,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,12,146,                    return computeObjectiveValue(x);,0,0,0,1,2,1,2,0,1,5,32,10,0.0,0,0
