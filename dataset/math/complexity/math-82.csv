dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,other,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,308,            return;,0,0,0,0,0,1,0,0,1,2,7,5,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,169,            return;,0,0,0,0,0,1,0,0,1,2,7,5,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,170,                        matrix[row][getSlackVariableOffset() + slackVar++] = 1;  // slack,1,1,1,1,6,0,1,0,3,7,65,8,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,152,                return false;,0,0,0,0,0,1,0,0,1,2,13,8,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,191,            doIteration(tableau);,0,0,0,1,2,0,2,0,1,4,21,6,0.125,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,338,        double[] out = new double[data.length];,3,0,0,0,4,3,0,0,0,3,39,5,0.1,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,339,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.1,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,340,            out[i] = data[i] * d;,1,1,1,0,4,0,0,0,1,5,21,6,0.1,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,342,        return new ArrayRealVector(out);,1,0,0,1,2,2,0,1,1,6,32,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,297,                return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.1,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,884,        checkVectorDimensions(v.length);,2,0,0,1,2,0,1,0,1,5,32,4,0.09091,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,885,        double dot = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.09091,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,886,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.09091,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,887,            dot += data[i] * v[i];,1,1,1,0,4,0,0,0,1,5,22,6,0.09091,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,889,        return dot;,1,0,0,0,0,1,0,0,0,2,11,4,0.09091,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1287,        if (data.length != n) {,3,1,0,1,3,1,0,0,0,5,23,4,0.09091,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1292,    },0,0,0,0,1,0,0,0,0,1,1,2,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,282,"        return getBasicRow(col, false);",0,0,0,0,2,1,2,0,2,4,31,4,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,340,      double[] coefficients = new double[getOriginalNumDecisionVariables()];,1,0,0,1,6,3,1,0,1,6,70,5,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,341,      Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset());,1,0,0,2,4,0,2,1,2,6,90,4,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,342,"      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());",2,1,0,1,4,1,3,0,2,7,102,5,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,343,      Set<Integer> basicRows = new HashSet<Integer>();,1,0,0,1,2,1,0,4,1,6,48,4,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,344,      for (int i = 0; i < coefficients.length; i++) {,5,1,0,1,3,2,0,0,1,6,47,4,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,345,          Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i);,2,1,0,2,4,0,2,1,2,7,74,6,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,346,          if (basicRows.contains(basicRow)) {,0,0,0,2,5,1,3,0,0,4,35,7,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,351,              basicRows.add(basicRow);,0,0,0,1,2,0,3,0,0,3,24,9,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,352,              coefficients[i] =,0,0,1,0,2,0,0,0,1,3,17,8,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,357,"        return new RealPointValuePair(coefficients, f.getValue(coefficients));",1,0,0,1,4,2,3,1,1,7,70,4,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,433,        return getNumObjectiveFunctions() + numDecisionVariables;,1,1,0,1,2,1,1,0,1,7,57,4,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,458,      return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();,0,1,0,1,4,1,2,0,2,6,70,4,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,481,        return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;,3,1,0,0,0,1,0,0,0,3,79,5,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,82,48,"    public RealPointValuePair(final double[] point, final double value) {",3,0,0,0,5,5,0,0,3,4,69,2,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,82,49,        this.point = point.clone();,1,0,0,1,2,1,2,0,1,6,27,4,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,82,50,        this.value  = value;,2,0,0,0,0,1,0,0,1,3,20,4,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,82,51,    },0,0,0,0,1,0,0,0,0,1,1,2,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,82,86,        return value;,1,0,0,0,0,1,0,0,0,2,13,4,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,82,92,        return coefficients.dotProduct(point) + constantTerm;,1,1,0,1,2,1,3,0,0,6,53,4,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,155,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,193,        return tableau.getSolution();,0,0,0,1,2,1,2,0,0,4,29,5,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,81,"        this(new ArrayRealVector(coefficients), relationship, value);",3,0,0,1,4,2,0,1,1,6,61,4,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,82,    },0,0,0,0,1,0,0,0,0,1,1,2,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,296,"            } else if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {",0,0,0,0,8,2,6,0,2,4,63,7,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,307,        if (numArtificialVariables == 0) {,1,1,0,1,3,1,0,0,0,5,34,4,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,147,        if (tableau.getNumArtificialVariables() > 0) {,0,1,0,2,5,1,2,0,0,5,46,4,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,150,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,3,2,0,2,7,2,4,0,1,7,83,4,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,151,"            if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {",0,1,0,0,7,1,6,0,0,4,66,6,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,189,        tableau.discardArtificialVariables();,0,0,0,1,2,0,2,0,0,3,37,5,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,190,        while (!isOptimal(tableau)) {,0,0,0,2,5,1,2,0,2,5,29,4,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,77,    public ArrayRealVector(double[] d) {,2,0,0,1,5,2,0,0,1,5,36,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,78,        data = d.clone();,1,0,0,1,2,0,2,0,1,5,17,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,79,    },0,0,0,0,1,0,0,0,0,1,1,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,36,    private static final RealVectorFormat DEFAULT_FORMAT =,1,0,0,0,0,3,0,1,3,4,54,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,854,        return data.clone();,0,0,0,1,2,1,2,0,0,4,20,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1157,        return data.length;,2,0,0,0,0,1,0,0,0,2,19,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,43,    protected AbstractRealMatrix() {,1,0,0,1,3,1,0,0,1,5,32,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,44,        lu = null;,1,0,0,0,0,0,0,0,1,2,10,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,45,    },0,0,0,0,1,0,0,0,0,1,1,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,94,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",4,0,0,0,2,1,0,0,0,3,64,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,95,    },0,0,0,0,1,0,0,0,0,1,1,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,117,"                            final String separator, final NumberFormat format) {",2,0,0,0,2,2,0,2,2,5,52,3,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,118,        this.prefix      = prefix;,2,0,0,0,0,1,0,0,1,3,26,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,119,        this.suffix      = suffix;,2,0,0,0,0,1,0,0,1,3,26,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,120,        this.separator   = separator;,2,0,0,0,0,1,0,0,1,3,29,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,121,        trimmedPrefix    = prefix.trim();,1,0,0,1,2,0,2,0,1,5,33,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,122,        trimmedSuffix    = suffix.trim();,1,0,0,1,2,0,2,0,1,5,33,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,123,        trimmedSeparator = separator.trim();,1,0,0,1,2,0,2,0,1,5,36,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,124,        this.format      = format;,2,0,0,0,0,1,0,0,1,3,26,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,125,    },0,0,0,0,1,0,0,0,0,1,1,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,173,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,3,0,1,5,40,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,182,        return new RealVectorFormat(getDefaultNumberFormat(locale));,0,0,0,2,4,2,2,1,2,6,60,4,0.07692,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,31,public abstract class CompositeFormat extends Format {,1,0,0,0,1,4,0,1,2,5,54,1,0.07692,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,54,        final NumberFormat nf = NumberFormat.getInstance(locale);,1,0,0,1,2,1,3,1,1,7,57,4,0.07692,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,55,        nf.setMaximumFractionDigits(2);,0,0,0,1,2,0,2,0,0,3,31,5,0.07692,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,56,        return nf;,1,0,0,0,0,1,0,0,0,2,10,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,94,"        throws IllegalArgumentException, NullPointerException {",2,0,0,0,1,1,0,0,0,3,55,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,95,        copyIn(d);,0,0,0,1,2,0,2,0,1,4,10,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,96,    },0,0,0,0,1,0,0,0,0,1,1,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,314,        if (data == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,315,            if (row > 0) {,1,1,0,1,3,1,0,0,0,5,14,6,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,320,            if (column > 0) {,1,1,0,1,3,1,0,0,0,5,17,6,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,325,            final int nRows = subMatrix.length;,3,0,0,0,0,2,0,0,1,3,35,6,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,326,            if (nRows == 0) {,1,1,0,1,3,1,0,0,0,5,17,6,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,330,            final int nCols = subMatrix[0].length;,2,0,1,0,2,2,0,0,1,5,38,6,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,331,            if (nCols == 0) {,1,1,0,1,3,1,0,0,0,5,17,6,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,334,            data = new double[subMatrix.length][nCols];,3,0,1,0,4,2,0,0,1,5,43,6,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,335,            for (int i = 0; i < data.length; ++i) {,5,1,0,1,3,2,0,0,1,6,39,6,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,336,                if (subMatrix[i].length != nCols) {,2,1,1,1,5,1,0,0,0,6,35,8,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,341,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",2,1,1,0,6,0,4,0,0,5,64,9,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,343,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,347,    },0,0,0,0,1,0,0,0,0,1,1,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,354,            return data[row][column];,0,0,1,0,4,1,0,0,0,3,25,7,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,367,            data[row][column] = value;,1,0,1,0,4,0,0,0,1,4,26,6,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,372,        },0,0,0,0,1,0,0,0,0,1,1,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,373,    },0,0,0,0,1,0,0,0,0,1,1,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,404,        return (data == null) ? 0 : data.length;,3,1,0,1,2,1,0,0,0,5,40,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,410,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,2,3,1,2,10,1,0,0,0,6,66,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,622,"        setSubMatrix(in, 0, 0);",0,0,0,0,2,0,2,0,1,3,23,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,623,    },0,0,0,0,1,0,0,0,0,1,1,2,0.07692,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,30,public final class MathUtils {,1,0,0,0,1,3,0,0,2,4,30,1,0.07692,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,473,    private static final long[] factorials = new long[] ,1,0,0,0,4,6,0,0,3,4,51,2,0.07692,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,367,"        if (equals(x, y, eps)) {",0,0,0,0,5,1,4,0,1,4,24,4,0.07692,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,368,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.07692,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,369,        } else if (x < y) {,2,1,0,1,4,2,0,0,0,5,19,5,0.07692,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,370,          return -1;,0,0,0,0,0,1,0,0,1,2,10,7,0.07692,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,372,        return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.07692,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,395,        return ((Double.isNaN(x) && Double.isNaN(y)) || x == y);,2,3,0,3,8,1,6,0,0,6,56,5,0.07692,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,411,"      return equals(x, y) || (Math.abs(y - x) <= eps);",3,3,0,2,6,1,5,0,1,7,48,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,99,                            final double value) {,1,0,0,0,2,2,0,0,1,4,21,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,100,        this.coefficients = coefficients;,2,0,0,0,0,1,0,0,1,3,33,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,101,        this.relationship = relationship;,2,0,0,0,0,1,0,0,1,3,33,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,102,        this.value        = value;,2,0,0,0,0,1,0,0,1,3,26,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,103,    },0,0,0,0,1,0,0,0,0,1,1,2,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,168,        return coefficients;,1,0,0,0,0,1,0,0,0,2,20,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,176,        return relationship;,1,0,0,0,0,1,0,0,0,2,20,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,184,        return value;,1,0,0,0,0,1,0,0,0,2,13,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/Relationship,82,42,    private Relationship(String stringValue) {,2,0,0,1,3,1,0,1,1,6,42,2,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/Relationship,82,43,        this.stringValue = stringValue;,2,0,0,0,0,1,0,0,1,3,31,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/Relationship,82,44,    },0,0,0,0,1,0,0,0,0,1,1,2,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/Relationship,82,28,"    EQ(""=""),",1,0,0,1,2,0,0,0,1,4,8,2,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/Relationship,82,31,"    LEQ(""<=""),",1,0,0,1,2,0,0,0,1,4,10,2,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/Relationship,82,34,"    GEQ("">="");",1,0,0,1,2,0,0,0,1,4,10,2,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/Relationship,82,25,public enum Relationship {,1,0,0,0,1,2,0,0,1,4,26,1,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,104,                   final double epsilon) {,1,0,0,0,2,2,0,0,1,4,23,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,105,        this.f                      = f;,2,0,0,0,0,1,0,0,1,3,32,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,106,        this.constraints            = constraints;,2,0,0,0,0,1,0,0,1,3,42,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,107,        this.restrictToNonNegative  = restrictToNonNegative;,2,0,0,0,0,1,0,0,1,3,52,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,108,        this.epsilon                = epsilon;,2,0,0,0,0,1,0,0,1,3,38,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,109,        this.numDecisionVariables   = getNumVariables() + (restrictToNonNegative ? 0 : 1);,2,1,0,1,4,1,1,0,2,7,82,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,110,        this.numSlackVariables      = getConstraintTypeCounts(Relationship.LEQ) +,3,1,0,1,2,1,1,0,2,7,73,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,112,        this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) +,3,1,0,1,2,1,1,0,2,7,72,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,114,        this.tableau = new Array2DRowRealMatrix(createTableau(goalType == GoalType.MAXIMIZE));,4,1,0,2,4,2,1,1,3,8,86,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,115,        initialize();,0,0,0,1,2,0,1,0,1,4,13,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,116,    },0,0,0,0,1,0,0,0,0,1,1,2,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,126,        List<LinearConstraint> constraints = getNormalizedConstraints();,1,0,0,1,2,0,1,2,1,6,64,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,127,        int width = numDecisionVariables + numSlackVariables +,3,1,0,0,0,1,0,0,0,3,54,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,129,        int height = constraints.size() + getNumObjectiveFunctions();,1,1,0,1,4,1,3,0,1,7,61,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,130,        double[][] matrix = new double[height][width];,1,0,1,0,8,3,0,0,0,4,46,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,133,        if (getNumObjectiveFunctions() == 2) {,0,1,0,2,5,1,1,0,1,6,38,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,136,        int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;,1,1,0,2,4,1,1,0,1,7,55,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,137,        matrix[zIndex][zIndex] = maximize ? 1 : -1;,1,0,1,0,4,0,0,0,2,4,43,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,138,        RealVector objectiveCoefficients =,1,0,0,0,0,0,0,1,0,2,34,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,140,"            copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions());",0,0,1,1,8,0,4,0,2,5,87,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,141,            matrix[zIndex][width - 1] =,1,1,1,0,4,0,0,0,1,5,27,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,144,                if (!restrictToNonNegative) {,1,0,0,1,3,1,0,0,1,5,29,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,150,                int slackVar = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,151,                int artificialVar = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,152,                for (int i = 0; i < constraints.size(); i++) {,3,1,0,2,5,2,2,0,1,7,46,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,153,                    LinearConstraint constraint = constraints.get(i);,1,0,0,1,2,0,3,1,0,5,49,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,154,                    int row = getNumObjectiveFunctions() + i;,2,1,0,1,2,1,1,0,1,7,41,7,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,157,"                    copyArray(constraint.getCoefficients().getData(), matrix[row], 1);",0,0,1,1,8,0,4,0,1,5,66,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,160,                    if (!restrictToNonNegative) {,1,0,0,1,3,1,0,0,1,5,29,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,166,                    matrix[row][width - 1] = constraint.getValue();,1,1,1,1,6,0,2,0,1,7,47,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,169,                    if (constraint.getRelationship() == Relationship.LEQ) {,2,1,0,2,5,1,2,0,0,6,55,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,176,                    if ((constraint.getRelationship() == Relationship.EQ) ||,2,2,0,2,5,1,2,0,0,6,56,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,183,                return matrix;,1,0,0,0,0,1,0,0,0,2,14,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,190,        return f.getCoefficients().getDimension();,0,0,0,1,4,1,3,0,0,4,42,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,198,        List<LinearConstraint> normalized = new ArrayList<LinearConstraint>();,1,0,0,1,2,1,0,4,1,6,70,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,199,        for (LinearConstraint constraint : constraints) {,2,0,0,1,3,1,0,1,0,5,49,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,200,            normalized.add(normalize(constraint));,0,0,0,2,4,0,4,0,1,4,38,7,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,201,        },0,0,0,0,1,0,0,0,0,1,1,2,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,202,        return normalized;,1,0,0,0,0,1,0,0,0,2,18,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,211,        if (constraint.getValue() < 0) {,0,1,0,2,5,1,2,0,0,5,32,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,216,"        return new LinearConstraint(constraint.getCoefficients(), ",0,0,0,1,3,2,2,1,1,6,57,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,225,        return this.numArtificialVariables > 0 ? 2 : 1;,1,1,0,0,0,2,0,0,0,3,47,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,234,        int count = 0;,1,0,0,0,0,1,0,0,0,2,14,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,235,        for (final LinearConstraint constraint : constraints) {,2,0,0,1,3,2,0,1,1,6,55,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,236,            if (constraint.getRelationship() == relationship) {,1,1,0,2,5,1,2,0,0,6,51,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,237,                ++count;,1,0,0,0,0,0,0,0,1,2,8,8,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,239,        },0,0,0,0,1,0,0,0,0,1,1,2,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,240,        return count;,1,0,0,0,0,1,0,0,0,2,13,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,248,        for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) {,4,1,0,1,3,2,0,0,1,6,86,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,252,    },0,0,0,0,1,0,0,0,0,1,1,2,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,291,        Integer row = null;,1,0,0,0,0,0,0,1,0,2,19,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,292,        int start = ignoreObjectiveRows ? getNumObjectiveFunctions() : 0;,2,0,0,1,2,1,1,0,1,6,65,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,293,        for (int i = start; i < getHeight(); i++) {,4,1,0,2,5,2,1,0,2,7,43,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,294,"            if (MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) {",1,2,0,1,9,1,6,0,1,7,72,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,295,                row = i;,2,0,0,0,0,0,0,0,1,2,8,8,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,300,        return row;,1,0,0,0,0,1,0,0,0,2,11,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,331,"        System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length); ",2,0,0,1,4,0,5,0,1,5,71,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,332,    },0,0,0,0,1,0,0,0,0,1,1,2,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,370,        for (int j = 0; j < getWidth(); j++) {,3,1,0,2,5,2,1,0,2,7,38,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,371,"            tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);",1,1,0,0,4,0,8,0,0,4,77,7,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,373,    },0,0,0,0,1,0,0,0,0,1,1,2,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,387,        for (int j = 0; j < getWidth(); j++) {,3,1,0,2,5,2,1,0,2,7,38,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,388,"            tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) -",0,1,0,0,3,0,8,0,0,3,65,7,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,391,    },0,0,0,0,1,0,0,0,0,1,1,2,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,398,        return tableau.getColumnDimension();,0,0,0,1,2,1,2,0,0,4,36,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,406,        return tableau.getRowDimension();,0,0,0,1,2,1,2,0,0,4,33,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,415,"        return tableau.getEntry(row, column);",0,0,0,0,2,1,4,0,0,3,37,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,449,        return getWidth() - 1;,0,1,0,1,2,1,1,0,1,6,22,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,497,        return numArtificialVariables;,1,0,0,0,0,1,0,0,0,2,30,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,82,58,"        this(new ArrayRealVector(coefficients), constantTerm);",2,0,0,1,4,2,0,1,1,6,54,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,82,59,    },0,0,0,0,1,0,0,0,0,1,1,2,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,82,65,"    public LinearObjectiveFunction(RealVector coefficients, double constantTerm) {",3,0,0,0,3,2,0,1,1,5,78,2,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,82,66,        this.coefficients = coefficients;,2,0,0,0,0,1,0,0,1,3,33,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,82,67,        this.constantTerm = constantTerm;,2,0,0,0,0,1,0,0,1,3,33,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,82,68,    },0,0,0,0,1,0,0,0,0,1,1,2,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,82,75,        return coefficients;,1,0,0,0,0,1,0,0,0,2,20,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,82,83,        return constantTerm;,1,0,0,0,0,1,0,0,0,2,20,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,42,        this(DEFAULT_EPSILON);,1,0,0,1,2,1,0,0,0,4,22,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,43,    },0,0,0,0,1,0,0,0,0,1,1,2,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,49,    public SimplexSolver(final double epsilon) {,2,0,0,1,3,3,0,0,2,5,44,2,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,50,        this.epsilon = epsilon;,2,0,0,0,0,1,0,0,1,3,23,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,51,    },0,0,0,0,1,0,0,0,0,1,1,2,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,59,        double minValue = 0;,1,0,0,0,0,1,0,0,0,2,20,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,60,        Integer minPos = null;,1,0,0,0,0,0,0,1,0,2,22,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,61,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,3,2,0,2,7,2,4,0,1,7,83,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,62,"            if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {",0,1,0,0,7,1,7,0,0,4,73,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,63,"                minValue = tableau.getEntry(0, i);",1,0,0,0,2,0,3,0,1,4,34,8,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,64,                minPos = i;,2,0,0,0,0,0,0,0,1,2,11,8,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,67,        return minPos;,1,0,0,0,0,1,0,0,0,2,14,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,77,        double minRatio = Double.MAX_VALUE;,3,0,0,0,0,1,0,0,0,2,35,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,78,        Integer minRatioPos = null;,1,0,0,0,0,0,0,1,0,2,27,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,79,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {,3,1,0,2,7,2,4,0,1,7,80,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,80,"            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);",1,1,0,1,4,2,5,0,1,7,63,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,81,"            final double entry = tableau.getEntry(i, col);",1,0,0,0,2,2,4,0,1,5,46,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,82,"            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {",0,1,0,0,5,1,4,0,0,4,50,6,0.07692,1,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,83,                final double ratio = rhs / entry;,3,1,0,0,0,2,0,0,1,4,33,8,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,84,                if (ratio < minRatio) {,2,1,0,1,3,1,0,0,0,5,23,8,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,85,                    minRatio = ratio;,2,0,0,0,0,0,0,0,1,2,17,10,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,86,                    minRatioPos = i; ,2,0,0,0,0,0,0,0,1,2,16,10,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,90,        return minRatioPos;,1,0,0,0,0,1,0,0,0,2,19,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,103,        incrementIterationsCounter();,0,0,0,1,2,0,1,0,1,4,29,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,105,        Integer pivotCol = getPivotColumn(tableau);,1,0,0,1,2,0,2,1,1,6,43,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,106,"        Integer pivotRow = getPivotRow(pivotCol, tableau);",1,0,0,0,2,0,3,1,1,5,50,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,107,        if (pivotRow == null) {,1,1,0,1,3,1,0,0,0,5,23,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,112,"        double pivotVal = tableau.getEntry(pivotRow, pivotCol);",1,0,0,0,2,1,4,0,0,4,55,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,113,"        tableau.divideRow(pivotRow, pivotVal);",0,0,0,0,2,0,4,0,0,2,38,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,116,        for (int i = 0; i < tableau.getHeight(); i++) {,3,1,0,2,5,2,2,0,1,7,47,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,117,            if (i != pivotRow) {,2,1,0,1,3,1,0,0,0,5,20,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,118,"                double multiplier = tableau.getEntry(i, pivotCol);",1,0,0,0,2,1,4,0,0,4,50,9,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,119,"                tableau.subtractRow(i, pivotRow, multiplier);",0,0,0,0,2,0,5,0,0,2,45,9,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,122,    },0,0,0,0,1,0,0,0,0,1,1,2,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,168,        if (tableau.getNumArtificialVariables() == 0) {,0,1,0,2,5,1,2,0,0,5,47,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,186,        final SimplexTableau tableau =,1,0,0,0,0,1,0,1,1,4,30,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,188,        solvePhase1(tableau);,0,0,0,1,2,0,2,0,1,4,21,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,82,61,    protected AbstractLinearOptimizer() {,1,0,0,1,3,1,0,0,1,5,37,2,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,82,62,        setMaxIterations(DEFAULT_MAX_ITERATIONS);,0,0,0,1,2,0,2,0,1,4,41,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,82,63,    },0,0,0,0,1,0,0,0,0,1,1,2,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,82,67,        this.maxIterations = maxIterations;,2,0,0,0,0,1,0,0,1,3,35,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,82,68,    },0,0,0,0,1,0,0,0,0,1,1,2,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,82,86,        if (++iterations > maxIterations) {,2,1,0,1,3,1,0,0,1,6,35,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,82,89,    },0,0,0,0,1,0,0,0,0,1,1,2,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,82,98,        this.f                     = f;,2,0,0,0,0,1,0,0,1,3,31,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,82,99,        this.constraints           = constraints;,2,0,0,0,0,1,0,0,1,3,41,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,82,100,        this.goalType              = goalType;,2,0,0,0,0,1,0,0,1,3,38,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,82,101,        this.restrictToNonNegative = restrictToNonNegative;,2,0,0,0,0,1,0,0,1,3,51,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,82,103,        iterations  = 0;,1,0,0,0,0,0,0,0,1,2,16,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,82,106,        return doOptimize();,0,0,0,1,2,1,1,0,1,5,20,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,82,27,public enum GoalType implements Serializable {,1,0,0,0,1,3,0,1,1,5,46,1,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,82,30,"    MAXIMIZE,",1,0,0,0,0,0,0,0,0,1,9,2,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,82,33,    MINIMIZE,1,0,0,0,0,0,0,0,0,1,8,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,51,    public ArrayRealVector() {,1,0,0,1,3,1,0,0,1,5,26,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,52,        data = new double[0];,1,0,0,0,2,2,0,0,1,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,53,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,59,    public ArrayRealVector(int size) {,2,0,0,1,3,2,0,0,1,5,34,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,60,        data = new double[size];,1,0,1,0,2,2,0,0,1,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,61,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,68,"    public ArrayRealVector(int size, double preset) {",3,0,0,0,3,3,0,0,1,4,49,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,69,        data = new double[size];,1,0,1,0,2,2,0,0,1,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,70,"        Arrays.fill(data, preset);",0,0,0,0,2,0,4,0,0,2,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,71,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,96,"        throws NullPointerException, IllegalArgumentException {",2,0,0,0,1,1,0,0,0,3,55,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,97,        if (d == null) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,98,            throw new NullPointerException();,0,0,0,1,2,2,0,1,1,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,100,        if (d.length == 0) {,2,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,101,"            throw MathRuntimeException.createIllegalArgumentException(""vector must have at least one element""); ",0,0,0,1,2,1,2,0,1,5,99,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,103,        data = copyArray ? d.clone() :  d;,3,0,0,1,2,0,2,0,1,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,104,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,112,"    public ArrayRealVector(double[] d, int pos, int size) {",4,0,0,0,5,4,0,0,1,4,55,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,113,        if (d.length < pos + size) {,4,2,0,1,3,1,0,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,114,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,118,        data = new double[size];,1,0,1,0,2,2,0,0,1,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,119,"        System.arraycopy(d, pos, data, 0, size);",0,0,0,0,2,0,6,0,0,2,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,120,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,126,    public ArrayRealVector(Double[] d) {,2,0,0,1,5,1,0,1,1,6,36,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,127,        data = new double[d.length];,3,0,0,0,2,2,0,0,1,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,128,        for (int i = 0; i < d.length; i++) {,5,1,0,1,3,2,0,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,129,            data[i] = d[i].doubleValue();,0,0,1,1,6,0,1,0,1,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,131,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,139,"    public ArrayRealVector(Double[] d, int pos, int size) {",4,0,0,0,5,3,0,1,1,5,55,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,140,        if (d.length < pos + size) {,4,2,0,1,3,1,0,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,141,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,145,        data = new double[size];,1,0,1,0,2,2,0,0,1,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,146,        for (int i = pos; i < pos + size; i++) {,6,2,0,1,3,2,0,0,1,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,147,            data[i-pos] = d[i].doubleValue();,2,1,1,1,6,0,1,0,1,7,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,149,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,155,    public ArrayRealVector(RealVector v) {,2,0,0,1,3,1,0,1,1,6,38,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,156,        data = new double[v.getDimension()];,1,0,0,1,4,2,2,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,157,        for (int i = 0; i < data.length; ++i) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,158,            data[i] = v.getEntry(i);,0,0,1,1,4,0,3,0,1,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,160,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,166,    public ArrayRealVector(ArrayRealVector v) {,2,0,0,1,3,1,0,1,1,6,43,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,167,        data = v.data.clone();,3,0,0,1,2,0,1,0,1,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,168,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,175,"    public ArrayRealVector(ArrayRealVector v, boolean deep) {",3,0,0,0,3,2,0,1,1,5,57,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,176,        data = deep ? v.data.clone() : v.data;,6,0,0,1,2,0,1,0,1,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,177,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,184,"    public ArrayRealVector(ArrayRealVector v1, ArrayRealVector v2) {",3,0,0,0,3,1,0,2,1,5,64,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,185,        data = new double[v1.data.length + v2.data.length];,7,1,0,0,2,2,0,0,1,5,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,186,"        System.arraycopy(v1.data, 0, data, 0, v1.data.length);",5,0,0,0,2,0,3,0,0,3,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,187,"        System.arraycopy(v2.data, 0, data, v1.data.length, v2.data.length);",8,0,0,0,2,0,3,0,0,3,67,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,188,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,195,"    public ArrayRealVector(ArrayRealVector v1, double[] v2) {",3,0,0,0,5,2,0,1,1,5,57,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,196,        data = new double[v1.data.length + v2.length];,6,1,0,0,2,2,0,0,1,5,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,197,"        System.arraycopy(v1.data, 0, data, 0, v1.data.length);",5,0,0,0,2,0,3,0,0,3,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,198,"        System.arraycopy(v2, 0, data, v1.data.length, v2.length);",5,0,0,0,2,0,4,0,0,3,57,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,199,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,206,"    public ArrayRealVector(double[] v1, ArrayRealVector v2) {",3,0,0,0,5,2,0,1,1,5,57,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,207,        data = new double[v1.length + v2.data.length];,6,1,0,0,2,2,0,0,1,5,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,208,"        System.arraycopy(v1, 0, data, 0, v1.length);",2,0,0,0,2,0,4,0,0,3,44,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,209,"        System.arraycopy(v2.data, 0, data, v1.length, v2.data.length);",7,0,0,0,2,0,3,0,0,3,62,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,210,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,217,"    public ArrayRealVector(double[] v1, double[] v2) {",3,0,0,0,7,3,0,0,1,4,50,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,218,        data = new double[v1.length + v2.length];,5,1,0,0,2,2,0,0,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,219,"        System.arraycopy(v1, 0, data, 0, v1.length);",2,0,0,0,2,0,4,0,0,3,44,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,220,"        System.arraycopy(v2, 0, data, v1.length, v2.length);",4,0,0,0,2,0,4,0,0,3,52,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,221,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,225,"        return new ArrayRealVector(this, true);",0,0,0,0,2,3,0,1,2,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,232,            return add((ArrayRealVector) v);,1,0,0,2,4,1,1,1,1,7,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,233,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,234,            checkVectorDimensions(v);,0,0,0,1,2,0,2,0,1,4,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,235,            double[] out = new double[data.length];,3,0,0,0,4,3,0,0,0,3,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,236,            for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,237,                out[i] = data[i] + v.getEntry(i);,0,1,1,1,6,0,3,0,1,6,33,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,239,            return new ArrayRealVector(out);,1,0,0,1,2,2,0,1,1,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,246,        checkVectorDimensions(v.length);,2,0,0,1,2,0,1,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,247,        double[] out = new double[data.length];,3,0,0,0,4,3,0,0,0,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,248,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,249,            out[i] = data[i] + v[i];,0,1,1,0,6,0,0,0,1,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,251,        return new ArrayRealVector(out);,1,0,0,1,2,2,0,1,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,262,        return (ArrayRealVector) add(v.data);,2,0,0,1,4,1,1,1,1,7,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,269,            return subtract((ArrayRealVector) v);,1,0,0,2,4,1,1,1,1,7,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,270,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,271,            checkVectorDimensions(v);,0,0,0,1,2,0,2,0,1,4,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,272,            double[] out = new double[data.length];,3,0,0,0,4,3,0,0,0,3,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,273,            for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,274,                out[i] = data[i] - v.getEntry(i);,0,1,1,1,6,0,3,0,1,6,33,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,276,            return new ArrayRealVector(out);,1,0,0,1,2,2,0,1,1,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,283,        checkVectorDimensions(v.length);,2,0,0,1,2,0,1,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,284,        double[] out = new double[data.length];,3,0,0,0,4,3,0,0,0,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,285,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,286,            out[i] = data[i] - v[i];,0,1,1,0,6,0,0,0,1,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,288,        return new ArrayRealVector(out);,1,0,0,1,2,2,0,1,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,299,        return (ArrayRealVector) subtract(v.data);,2,0,0,1,4,1,1,1,1,7,42,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,304,        double[] out = new double[data.length];,3,0,0,0,4,3,0,0,0,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,305,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,306,            out[i] = data[i] + d;,1,1,1,0,4,0,0,0,1,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,308,        return new ArrayRealVector(out);,1,0,0,1,2,2,0,1,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,313,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,314,            data[i] = data[i] + d;,1,1,1,0,4,0,0,0,1,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,316,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,321,        double[] out = new double[data.length];,3,0,0,0,4,3,0,0,0,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,322,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,323,            out[i] = data[i] - d;,1,1,1,0,4,0,0,0,1,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,325,        return new ArrayRealVector(out);,1,0,0,1,2,2,0,1,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,330,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,331,            data[i] = data[i] - d;,1,1,1,0,4,0,0,0,1,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,333,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,347,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,348,            data[i] = data[i] * d;,1,1,1,0,4,0,0,0,1,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,350,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,355,        double[] out = new double[data.length];,3,0,0,0,4,3,0,0,0,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,356,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,357,            out[i] = data[i] / d;,1,1,1,0,4,0,0,0,1,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,359,        return new ArrayRealVector(out);,1,0,0,1,2,2,0,1,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,364,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,365,            data[i] = data[i] / d;,1,1,1,0,4,0,0,0,1,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,367,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,372,        double[] out = new double[data.length];,3,0,0,0,4,3,0,0,0,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,373,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,374,"            out[i] = Math.pow(data[i], d);",0,0,1,0,6,0,3,0,1,4,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,376,        return new ArrayRealVector(out);,1,0,0,1,2,2,0,1,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,381,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,382,"            data[i] = Math.pow(data[i], d);",0,0,1,0,6,0,3,0,1,4,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,384,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,389,        double[] out = new double[data.length];,3,0,0,0,4,3,0,0,0,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,390,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,391,            out[i] = Math.exp(data[i]);,0,0,1,1,6,0,2,0,1,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,393,        return new ArrayRealVector(out);,1,0,0,1,2,2,0,1,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,398,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,399,            data[i] = Math.exp(data[i]);,0,0,1,1,6,0,2,0,1,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,401,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,406,        double[] out = new double[data.length];,3,0,0,0,4,3,0,0,0,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,407,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,408,            out[i] = Math.expm1(data[i]);,0,0,1,1,6,0,2,0,1,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,410,        return new ArrayRealVector(out);,1,0,0,1,2,2,0,1,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,415,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,416,            data[i] = Math.expm1(data[i]);,0,0,1,1,6,0,2,0,1,5,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,418,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,423,        double[] out = new double[data.length];,3,0,0,0,4,3,0,0,0,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,424,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,425,            out[i] = Math.log(data[i]);,0,0,1,1,6,0,2,0,1,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,427,        return new ArrayRealVector(out);,1,0,0,1,2,2,0,1,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,432,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,433,            data[i] = Math.log(data[i]);,0,0,1,1,6,0,2,0,1,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,435,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,440,        double[] out = new double[data.length];,3,0,0,0,4,3,0,0,0,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,441,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,442,            out[i] = Math.log10(data[i]);,0,0,1,1,6,0,2,0,1,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,444,        return new ArrayRealVector(out);,1,0,0,1,2,2,0,1,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,449,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,450,            data[i] = Math.log10(data[i]);,0,0,1,1,6,0,2,0,1,5,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,452,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,457,        double[] out = new double[data.length];,3,0,0,0,4,3,0,0,0,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,458,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,459,            out[i] = Math.log1p(data[i]);,0,0,1,1,6,0,2,0,1,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,461,        return new ArrayRealVector(out);,1,0,0,1,2,2,0,1,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,466,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,467,            data[i] = Math.log1p(data[i]);,0,0,1,1,6,0,2,0,1,5,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,469,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,474,        double[] out = new double[data.length];,3,0,0,0,4,3,0,0,0,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,475,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,476,            out[i] = Math.cosh(data[i]);,0,0,1,1,6,0,2,0,1,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,478,        return new ArrayRealVector(out);,1,0,0,1,2,2,0,1,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,483,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,484,            data[i] = Math.cosh(data[i]);,0,0,1,1,6,0,2,0,1,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,486,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,491,        double[] out = new double[data.length];,3,0,0,0,4,3,0,0,0,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,492,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,493,            out[i] = Math.sinh(data[i]);,0,0,1,1,6,0,2,0,1,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,495,        return new ArrayRealVector(out);,1,0,0,1,2,2,0,1,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,500,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,501,            data[i] = Math.sinh(data[i]);,0,0,1,1,6,0,2,0,1,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,503,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,508,        double[] out = new double[data.length];,3,0,0,0,4,3,0,0,0,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,509,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,510,            out[i] = Math.tanh(data[i]);,0,0,1,1,6,0,2,0,1,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,512,        return new ArrayRealVector(out);,1,0,0,1,2,2,0,1,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,517,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,518,            data[i] = Math.tanh(data[i]);,0,0,1,1,6,0,2,0,1,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,520,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,525,        double[] out = new double[data.length];,3,0,0,0,4,3,0,0,0,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,526,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,527,            out[i] = Math.cos(data[i]);,0,0,1,1,6,0,2,0,1,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,529,        return new ArrayRealVector(out);,1,0,0,1,2,2,0,1,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,534,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,535,            data[i] = Math.cos(data[i]);,0,0,1,1,6,0,2,0,1,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,537,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,542,        double[] out = new double[data.length];,3,0,0,0,4,3,0,0,0,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,543,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,544,            out[i] = Math.sin(data[i]);,0,0,1,1,6,0,2,0,1,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,546,        return new ArrayRealVector(out);,1,0,0,1,2,2,0,1,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,551,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,552,            data[i] = Math.sin(data[i]);,0,0,1,1,6,0,2,0,1,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,554,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,559,        double[] out = new double[data.length];,3,0,0,0,4,3,0,0,0,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,560,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,561,            out[i] = Math.tan(data[i]);,0,0,1,1,6,0,2,0,1,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,563,        return new ArrayRealVector(out);,1,0,0,1,2,2,0,1,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,568,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,569,            data[i] = Math.tan(data[i]);,0,0,1,1,6,0,2,0,1,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,571,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,576,        double[] out = new double[data.length];,3,0,0,0,4,3,0,0,0,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,577,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,578,            out[i] = Math.acos(data[i]);,0,0,1,1,6,0,2,0,1,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,580,        return new ArrayRealVector(out);,1,0,0,1,2,2,0,1,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,585,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,586,            data[i] = Math.acos(data[i]);,0,0,1,1,6,0,2,0,1,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,588,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,593,        double[] out = new double[data.length];,3,0,0,0,4,3,0,0,0,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,594,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,595,            out[i] = Math.asin(data[i]);,0,0,1,1,6,0,2,0,1,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,597,        return new ArrayRealVector(out);,1,0,0,1,2,2,0,1,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,602,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,603,            data[i] = Math.asin(data[i]);,0,0,1,1,6,0,2,0,1,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,605,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,610,        double[] out = new double[data.length];,3,0,0,0,4,3,0,0,0,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,611,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,612,            out[i] = Math.atan(data[i]);,0,0,1,1,6,0,2,0,1,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,614,        return new ArrayRealVector(out);,1,0,0,1,2,2,0,1,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,619,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,620,            data[i] = Math.atan(data[i]);,0,0,1,1,6,0,2,0,1,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,622,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,627,        double[] out = new double[data.length];,3,0,0,0,4,3,0,0,0,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,628,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,629,            out[i] = 1.0 / data[i];,0,1,1,0,4,0,0,0,1,4,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,631,        return new ArrayRealVector(out);,1,0,0,1,2,2,0,1,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,636,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,637,            data[i] = 1.0 / data[i];,0,1,1,0,4,0,0,0,1,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,639,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,644,        double[] out = new double[data.length];,3,0,0,0,4,3,0,0,0,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,645,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,646,            out[i] = Math.abs(data[i]);,0,0,1,1,6,0,2,0,1,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,648,        return new ArrayRealVector(out);,1,0,0,1,2,2,0,1,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,653,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,654,            data[i] = Math.abs(data[i]);,0,0,1,1,6,0,2,0,1,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,656,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,661,        double[] out = new double[data.length];,3,0,0,0,4,3,0,0,0,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,662,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,663,            out[i] = Math.sqrt(data[i]);,0,0,1,1,6,0,2,0,1,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,665,        return new ArrayRealVector(out);,1,0,0,1,2,2,0,1,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,670,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,671,            data[i] = Math.sqrt(data[i]);,0,0,1,1,6,0,2,0,1,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,673,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,678,        double[] out = new double[data.length];,3,0,0,0,4,3,0,0,0,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,679,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,680,            out[i] = Math.cbrt(data[i]);,0,0,1,1,6,0,2,0,1,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,682,        return new ArrayRealVector(out);,1,0,0,1,2,2,0,1,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,687,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,688,            data[i] = Math.cbrt(data[i]);,0,0,1,1,6,0,2,0,1,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,690,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,695,        double[] out = new double[data.length];,3,0,0,0,4,3,0,0,0,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,696,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,697,            out[i] = Math.ceil(data[i]);,0,0,1,1,6,0,2,0,1,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,699,        return new ArrayRealVector(out);,1,0,0,1,2,2,0,1,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,704,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,705,            data[i] = Math.ceil(data[i]);,0,0,1,1,6,0,2,0,1,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,707,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,712,        double[] out = new double[data.length];,3,0,0,0,4,3,0,0,0,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,713,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,714,            out[i] = Math.floor(data[i]);,0,0,1,1,6,0,2,0,1,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,716,        return new ArrayRealVector(out);,1,0,0,1,2,2,0,1,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,721,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,722,            data[i] = Math.floor(data[i]);,0,0,1,1,6,0,2,0,1,5,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,724,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,729,        double[] out = new double[data.length];,3,0,0,0,4,3,0,0,0,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,730,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,731,            out[i] = Math.rint(data[i]);,0,0,1,1,6,0,2,0,1,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,733,        return new ArrayRealVector(out);,1,0,0,1,2,2,0,1,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,738,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,739,            data[i] = Math.rint(data[i]);,0,0,1,1,6,0,2,0,1,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,741,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,746,        double[] out = new double[data.length];,3,0,0,0,4,3,0,0,0,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,747,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,748,            out[i] = Math.signum(data[i]);,0,0,1,1,6,0,2,0,1,5,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,750,        return new ArrayRealVector(out);,1,0,0,1,2,2,0,1,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,755,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,756,            data[i] = Math.signum(data[i]);,0,0,1,1,6,0,2,0,1,5,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,758,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,763,        double[] out = new double[data.length];,3,0,0,0,4,3,0,0,0,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,764,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,765,            out[i] = Math.ulp(data[i]);,0,0,1,1,6,0,2,0,1,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,767,        return new ArrayRealVector(out);,1,0,0,1,2,2,0,1,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,772,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,773,            data[i] = Math.ulp(data[i]);,0,0,1,1,6,0,2,0,1,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,775,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,782,            return ebeMultiply((ArrayRealVector) v);,1,0,0,2,4,1,1,1,1,7,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,783,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,784,            checkVectorDimensions(v);,0,0,0,1,2,0,2,0,1,4,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,785,            double[] out = new double[data.length];,3,0,0,0,4,3,0,0,0,3,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,786,            for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,787,                out[i] = data[i] * v.getEntry(i);,0,1,1,1,6,0,3,0,1,6,33,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,789,            return new ArrayRealVector(out);,1,0,0,1,2,2,0,1,1,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,796,        checkVectorDimensions(v.length);,2,0,0,1,2,0,1,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,797,        double[] out = new double[data.length];,3,0,0,0,4,3,0,0,0,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,798,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,799,            out[i] = data[i] * v[i];,0,1,1,0,6,0,0,0,1,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,801,        return new ArrayRealVector(out);,1,0,0,1,2,2,0,1,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,812,        return (ArrayRealVector) ebeMultiply(v.data);,2,0,0,1,4,1,1,1,1,7,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,819,            return ebeDivide((ArrayRealVector) v);,1,0,0,2,4,1,1,1,1,7,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,820,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,821,            checkVectorDimensions(v);,0,0,0,1,2,0,2,0,1,4,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,822,            double[] out = new double[data.length];,3,0,0,0,4,3,0,0,0,3,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,823,            for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,824,                out[i] = data[i] / v.getEntry(i);,0,1,1,1,6,0,3,0,1,6,33,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,826,            return new ArrayRealVector(out);,1,0,0,1,2,2,0,1,1,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,833,        checkVectorDimensions(v.length);,2,0,0,1,2,0,1,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,834,        double[] out = new double[data.length];,3,0,0,0,4,3,0,0,0,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,835,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,836,                out[i] = data[i] / v[i];,0,1,1,0,6,0,0,0,1,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,838,        return new ArrayRealVector(out);,1,0,0,1,2,2,0,1,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,849,        return (ArrayRealVector) ebeDivide(v.data);,2,0,0,1,4,1,1,1,1,7,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,863,        return data;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,870,            return dotProduct((ArrayRealVector) v);,1,0,0,2,4,1,1,1,1,7,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,871,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,872,            checkVectorDimensions(v);,0,0,0,1,2,0,2,0,1,4,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,873,            double dot = 0;,1,0,0,0,0,1,0,0,0,2,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,874,            for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,875,                dot += data[i] * v.getEntry(i);,1,1,1,1,4,0,3,0,1,7,31,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,877,            return dot;,1,0,0,0,0,1,0,0,0,2,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,900,        return dotProduct(v.data);,2,0,0,1,2,1,1,0,1,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,905,        double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,906,        for (double a : data) {,2,0,0,1,3,2,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,907,            sum += a * a;,3,1,0,0,0,0,0,0,1,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,909,        return Math.sqrt(sum);,0,0,0,1,2,1,3,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,914,        double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,915,        for (double a : data) {,2,0,0,1,3,2,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,916,            sum += Math.abs(a);,1,0,0,1,2,0,3,0,1,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,918,        return sum;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,923,        double max = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,924,        for (double a : data) {,2,0,0,1,3,2,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,925,"            max += Math.max(max, Math.abs(a));",1,0,0,1,4,0,6,0,1,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,927,        return max;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,934,            return getDistance((ArrayRealVector) v);,1,0,0,2,4,1,1,1,1,7,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,935,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,936,            checkVectorDimensions(v);,0,0,0,1,2,0,2,0,1,4,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,937,            double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,938,            for (int i = 0; i < data.length; ++i) {,5,1,0,1,3,2,0,0,1,6,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,939,                final double delta = data[i] - v.getEntry(i); ,1,1,1,1,4,2,3,0,1,8,45,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,940,                sum += delta * delta;,3,1,0,0,0,0,0,0,1,3,21,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,942,            return Math.sqrt(sum);,0,0,0,1,2,1,3,0,0,4,22,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,949,        checkVectorDimensions(v.length);,2,0,0,1,2,0,1,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,950,        double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,951,        for (int i = 0; i < data.length; ++i) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,952,            final double delta = data[i] - v[i];,1,1,1,0,4,2,0,0,1,6,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,953,            sum += delta * delta;,3,1,0,0,0,0,0,0,1,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,955,        return Math.sqrt(sum);,0,0,0,1,2,1,3,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,973,        return getDistance(v.data);,2,0,0,1,2,1,1,0,1,6,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,980,            return getL1Distance((ArrayRealVector) v);,1,0,0,2,4,1,1,1,1,7,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,981,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,982,            checkVectorDimensions(v);,0,0,0,1,2,0,2,0,1,4,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,983,            double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,984,            for (int i = 0; i < data.length; ++i) {,5,1,0,1,3,2,0,0,1,6,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,985,                final double delta = data[i] - v.getEntry(i); ,1,1,1,1,4,2,3,0,1,8,45,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,986,                sum += Math.abs(delta);,1,0,0,1,2,0,3,0,1,5,23,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,988,            return sum;,1,0,0,0,0,1,0,0,0,2,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,995,        checkVectorDimensions(v.length);,2,0,0,1,2,0,1,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,996,        double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,997,        for (int i = 0; i < data.length; ++i) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,998,            final double delta = data[i] - v[i];,1,1,1,0,4,2,0,0,1,6,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,999,            sum += Math.abs(delta);,1,0,0,1,2,0,3,0,1,5,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1001,        return sum;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1019,        return getL1Distance(v.data);,2,0,0,1,2,1,1,0,1,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1026,            return getLInfDistance((ArrayRealVector) v);,1,0,0,2,4,1,1,1,1,7,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1027,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1028,            checkVectorDimensions(v);,0,0,0,1,2,0,2,0,1,4,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1029,            double max = 0;,1,0,0,0,0,1,0,0,0,2,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1030,            for (int i = 0; i < data.length; ++i) {,5,1,0,1,3,2,0,0,1,6,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1031,                final double delta = data[i] - v.getEntry(i); ,1,1,1,1,4,2,3,0,1,8,45,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1032,"                max = Math.max(max, Math.abs(delta));",1,0,0,1,4,0,6,0,1,5,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1034,            return max;,1,0,0,0,0,1,0,0,0,2,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1041,        checkVectorDimensions(v.length);,2,0,0,1,2,0,1,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1042,        double max = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1043,        for (int i = 0; i < data.length; ++i) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1044,            final double delta = data[i] - v[i];,1,1,1,0,4,2,0,0,1,6,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1045,"            max = Math.max(max, Math.abs(delta));",1,0,0,1,4,0,6,0,1,5,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1047,        return max;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1065,        return getLInfDistance(v.data);,2,0,0,1,2,1,1,0,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1070,        final double norm = getNorm();,1,0,0,1,2,2,1,0,2,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1071,        if (norm == 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1072,"            throw MathRuntimeException.createArithmeticException(""zero norm"");",0,0,0,1,2,1,2,0,1,5,66,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1074,        return mapDivide(getNorm());,0,0,0,2,4,1,2,0,2,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1079,        final double norm = getNorm();,1,0,0,1,2,2,1,0,2,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1080,        if (norm == 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1081,"            throw MathRuntimeException.createArithmeticException(""cannot normalize a zero norm vector"");",0,0,0,1,2,1,2,0,1,5,92,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1083,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1084,            data[i] /= norm;,1,0,1,0,2,0,0,0,1,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1086,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1090,        return v.mapMultiply(dotProduct(v) / v.dotProduct(v));,0,1,0,2,6,1,7,0,1,6,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1095,"        return projection(new ArrayRealVector(v, false));",1,0,0,0,4,2,1,1,3,6,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1104,        return (ArrayRealVector) v.mapMultiply(dotProduct(v) / v.dotProduct(v));,0,1,0,2,8,1,7,1,1,7,72,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1111,            return outerProduct((ArrayRealVector) v);,1,0,0,2,4,1,1,1,1,7,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1112,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1113,            checkVectorDimensions(v);,0,0,0,1,2,0,2,0,1,4,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1114,            final int m = data.length;,3,0,0,0,0,2,0,0,1,3,26,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1115,"            final RealMatrix out = MatrixUtils.createRealMatrix(m, m);",1,0,0,0,2,1,4,1,1,6,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1116,            for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1117,                for (int j = 0; j < data.length; j++) {,5,1,0,1,3,2,0,0,1,6,39,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1118,"                    out.setEntry(i, j, data[i] * v.getEntry(j));",0,1,1,1,6,0,7,0,0,5,44,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1121,            return out;,1,0,0,0,0,1,0,0,0,2,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1133,        return outerProduct(v.data);,2,0,0,1,2,1,1,0,1,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1139,        checkVectorDimensions(v.length);,2,0,0,1,2,0,1,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1140,        final int m = data.length;,3,0,0,0,0,2,0,0,1,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1141,"        final RealMatrix out = MatrixUtils.createRealMatrix(m, m);",1,0,0,0,2,1,4,1,1,6,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1142,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1143,            for (int j = 0; j < data.length; j++) {,5,1,0,1,3,2,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1144,"                out.setEntry(i, j, data[i] * v[j]);",0,1,1,0,6,0,4,0,0,4,35,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1147,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1152,        return data[index];,0,0,1,0,2,1,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1163,            return append((ArrayRealVector) v);,1,0,0,2,4,1,1,1,1,7,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1164,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1165,"            return new ArrayRealVector(this,new ArrayRealVector(v));",1,0,0,1,4,4,0,2,2,6,56,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1175,"        return new ArrayRealVector(this, v);",1,0,0,0,2,3,0,1,1,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1180,        final double[] out = new double[data.length + 1];,3,1,0,0,4,4,0,0,1,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1181,"        System.arraycopy(data, 0, out, 0, data.length);",2,0,0,0,2,0,4,0,0,3,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1182,        out[data.length] = in;,3,0,1,0,2,0,0,0,1,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1183,        return new ArrayRealVector(out);,1,0,0,1,2,2,0,1,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1188,"        return new ArrayRealVector(this, in);",1,0,0,0,2,3,0,1,1,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1193,        ArrayRealVector out = new ArrayRealVector(n);,2,0,0,1,2,1,0,2,1,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1195,"            System.arraycopy(data, index, out.data, 0, n);",2,0,0,0,2,0,5,0,0,3,46,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1199,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1196,        } catch (IndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1197,            checkIndex(index);,0,0,0,1,2,0,2,0,1,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1198,            checkIndex(index + n - 1);,2,2,0,1,2,0,1,0,1,6,26,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1200,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1206,            data[index] = value;,1,0,1,0,2,0,0,0,1,4,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1209,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1207,        } catch (IndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1208,            checkIndex(index);,0,0,0,1,2,0,2,0,1,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1210,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1216,"                set(index, (ArrayRealVector) v);",1,0,0,1,4,0,2,1,1,6,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1221,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1217,            } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1218,                for (int i = index; i < index + v.getDimension(); ++i) {,5,2,0,2,5,2,2,0,1,7,56,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1219,                    data[i] = v.getEntry(i-index);,2,1,1,1,4,0,2,0,1,7,30,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1225,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1222,        } catch (IndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1223,            checkIndex(index);,0,0,0,1,2,0,2,0,1,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1224,            checkIndex(index + v.getDimension() - 1);,1,2,0,2,4,0,3,0,1,6,41,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1226,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1231,"            System.arraycopy(v, 0, data, index, v.length);",2,0,0,0,2,0,5,0,0,3,46,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1235,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1232,        } catch (IndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1233,            checkIndex(index);,0,0,0,1,2,0,2,0,1,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1234,            checkIndex(index + v.length - 1);,3,2,0,1,2,0,1,0,1,6,33,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1236,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1248,"        setSubVector(index, v.data);",2,0,0,0,2,0,2,0,1,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1249,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1253,"        Arrays.fill(data, value);",0,0,0,0,2,0,4,0,0,2,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1254,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1258,        return data.clone();,0,0,0,1,2,1,2,0,0,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1264,        return DEFAULT_FORMAT.format(this);,0,0,0,1,2,2,2,0,0,4,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1275,        checkVectorDimensions(v.getDimension());,0,0,0,2,4,0,3,0,1,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1276,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1288,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1299,        for (double v : data) {,2,0,0,1,3,2,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1300,            if (Double.isNaN(v)) {,0,0,0,2,5,1,3,0,0,4,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1301,                return true;,0,0,0,0,0,1,0,0,1,2,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1304,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1315,        if (isNaN()) {,0,0,0,2,5,1,1,0,1,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1316,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1319,        for (double v : data) {,2,0,0,1,3,2,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1320,            if (Double.isInfinite(v)) {,0,0,0,2,5,1,3,0,0,4,27,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1321,                return true;,0,0,0,0,0,1,0,0,1,2,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1325,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1351,      if (this == other) { ,1,1,0,1,3,2,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1352,        return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1355,      if (other == null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1356,        return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1361,          RealVector rhs = (RealVector) other;,2,0,0,1,2,0,0,2,0,4,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1362,          if (data.length != rhs.getDimension()) {,2,1,0,2,5,1,2,0,0,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1363,              return false;,0,0,0,0,0,1,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1366,          if (rhs.isNaN()) {,0,0,0,2,5,1,2,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1367,              return this.isNaN();,0,0,0,1,2,2,1,0,0,4,20,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1370,          for (int i = 0; i < data.length; ++i) {,5,1,0,1,3,2,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1371,              if (data[i] != rhs.getEntry(i)) {,0,1,1,2,7,1,3,0,0,6,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1372,                  return false;,0,0,0,0,0,1,0,0,1,2,13,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1375,          return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1377,      } catch (ClassCastException ex) {,1,0,0,1,4,1,0,1,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1379,          return false;,0,0,0,0,0,1,0,0,1,2,13,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1391,        if (isNaN()) {,0,0,0,2,5,1,1,0,1,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1392,            return 9;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1394,        return MathUtils.hash(data);,0,0,0,1,2,1,3,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1404,        if (index < 0 || index >= getDimension()) {,2,3,0,2,5,1,1,0,1,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1405,            throw new MatrixIndexException(,0,0,0,0,1,2,0,1,1,4,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1409,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixIndexException,82,38,"      super(pattern, arguments);",2,0,0,0,2,1,0,0,1,4,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixIndexException,82,39,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,98,"      super(buildMessage(Locale.US, pattern, arguments));",2,0,0,0,4,1,3,0,2,5,51,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,99,      this.pattern   = pattern;,2,0,0,0,0,1,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,100,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,2,1,0,1,6,2,2,1,1,8,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,101,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,111,        super(rootCause);,1,0,0,1,2,1,0,0,1,5,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,112,        this.pattern   = getMessage();,1,0,0,1,2,1,1,0,2,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,113,        this.arguments = new Object[0];,1,0,0,0,2,2,0,1,1,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,114,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,127,"      super(buildMessage(Locale.US, pattern, arguments), rootCause);",3,0,0,0,4,1,3,0,2,5,62,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,128,      this.pattern   = pattern;,2,0,0,0,0,1,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,129,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,2,1,0,1,6,2,2,1,1,8,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,130,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,61,            ResourceBundle bundle =,1,0,0,0,0,0,0,1,0,2,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,63,            if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {,0,0,0,3,11,1,6,0,0,4,68,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,65,                return bundle.getString(s);,0,0,0,1,2,1,3,0,0,4,27,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,70,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,68,        } catch (MissingResourceException mre) {,1,0,0,1,4,1,0,1,0,5,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,74,        return s;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,87,"        return (pattern == null) ? """" : new MessageFormat(translate(pattern, locale), locale).format(arguments);        ",2,1,0,1,8,2,5,1,3,8,104,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,137,        return pattern;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,145,        return arguments.clone();,0,0,0,1,2,1,2,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,155,"        return buildMessage(locale, pattern, arguments);",0,0,0,0,2,1,4,0,1,4,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,161,        return getMessage(Locale.getDefault());,0,0,0,2,4,1,3,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,169,        printStackTrace(System.err);,2,0,0,1,2,0,1,0,1,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,170,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,179,        synchronized (out) {,1,0,0,1,3,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,180,"            PrintWriter pw = new PrintWriter(out, false);",2,0,0,0,2,1,0,2,2,5,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,181,            printStackTrace(pw);,0,0,0,1,2,0,2,0,1,4,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,183,            pw.flush();,0,0,0,1,2,0,2,0,0,3,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,184,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,185,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,196,"        return new ArithmeticException(buildMessage(Locale.US, pattern, arguments)) {",2,0,0,0,5,2,3,1,2,6,77,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,219,"        return new ArrayIndexOutOfBoundsException(buildMessage(Locale.US, pattern, arguments)) {",2,0,0,0,5,2,3,1,2,6,88,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,242,"        return new EOFException(buildMessage(Locale.US, pattern, arguments)) {",2,0,0,0,5,2,3,1,2,6,70,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,268,        IOException ioe = new IOException(rootCause.getLocalizedMessage());,1,0,0,2,4,1,2,2,1,7,67,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,269,        ioe.initCause(rootCause);,0,0,0,1,2,0,3,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,270,        return ioe;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,282,"        return new IllegalArgumentException(buildMessage(Locale.US, pattern, arguments)) {",2,0,0,0,5,2,3,1,2,6,82,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,304,        IllegalArgumentException iae = new IllegalArgumentException(rootCause.getLocalizedMessage());,1,0,0,2,4,1,2,2,1,7,93,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,305,        iae.initCause(rootCause);,0,0,0,1,2,0,3,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,306,        return iae;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,318,"        return new IllegalStateException(buildMessage(Locale.US, pattern, arguments)) {",2,0,0,0,5,2,3,1,2,6,79,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,341,"        return new ConcurrentModificationException(buildMessage(Locale.US, pattern, arguments)) {",2,0,0,0,5,2,3,1,2,6,89,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,364,"        return new NoSuchElementException(buildMessage(Locale.US, pattern, arguments)) {",2,0,0,0,5,2,3,1,2,6,80,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,387,"        return new NullPointerException(buildMessage(Locale.US, pattern, arguments)) {",2,0,0,0,5,2,3,1,2,6,78,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,413,"        return new ParseException(buildMessage(Locale.US, pattern, arguments), offset) {",3,0,0,0,5,2,3,1,2,6,80,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,433,"        final String pattern  = ""internal error, please fill a bug report at {0}"";",1,0,0,0,2,1,0,1,2,5,74,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,434,"        final String argument = ""https://issues.apache.org/jira/browse/MATH"";",1,0,0,0,0,1,0,1,2,4,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,436,"        return new RuntimeException(buildMessage(Locale.US, pattern, argument)) {",2,0,0,0,5,2,3,1,2,6,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,37,public class MathRuntimeException extends RuntimeException {,1,0,0,0,1,3,0,1,1,5,60,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/NonSquareMatrixException,82,37,"        super(""a {0}x{1} matrix was provided instead of a square matrix"",",0,0,0,0,5,1,0,0,2,3,65,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/NonSquareMatrixException,82,39,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/InvalidMatrixException,82,40,"        super(pattern, arguments);",2,0,0,0,2,1,0,0,1,4,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/InvalidMatrixException,82,41,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/InvalidMatrixException,82,50,        super(cause);,1,0,0,1,2,1,0,0,1,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/InvalidMatrixException,82,51,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,196,"        return new ArithmeticException(buildMessage(Locale.US, pattern, arguments)) {",2,0,0,0,5,2,3,1,2,6,77,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,204,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,282,"        return new IllegalArgumentException(buildMessage(Locale.US, pattern, arguments)) {",2,0,0,0,5,2,3,1,2,6,82,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,290,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,318,"        return new IllegalStateException(buildMessage(Locale.US, pattern, arguments)) {",2,0,0,0,5,2,3,1,2,6,79,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,326,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,242,"        return new EOFException(buildMessage(Locale.US, pattern, arguments)) {",2,0,0,0,5,2,3,1,2,6,70,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,250,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,219,"        return new ArrayIndexOutOfBoundsException(buildMessage(Locale.US, pattern, arguments)) {",2,0,0,0,5,2,3,1,2,6,88,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,227,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,436,"        return new RuntimeException(buildMessage(Locale.US, pattern, argument)) {",2,0,0,0,5,2,3,1,2,6,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,444,"                return buildMessage(Locale.getDefault(), pattern, argument);",0,0,0,1,4,1,5,0,1,5,60,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,413,"        return new ParseException(buildMessage(Locale.US, pattern, arguments), offset) {",3,0,0,0,5,2,3,1,2,6,80,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,421,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,387,"        return new NullPointerException(buildMessage(Locale.US, pattern, arguments)) {",2,0,0,0,5,2,3,1,2,6,78,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,395,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,364,"        return new NoSuchElementException(buildMessage(Locale.US, pattern, arguments)) {",2,0,0,0,5,2,3,1,2,6,80,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,372,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,341,"        return new ConcurrentModificationException(buildMessage(Locale.US, pattern, arguments)) {",2,0,0,0,5,2,3,1,2,6,89,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,82,349,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,195,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,2,1,1,2,6,60,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,210,                this.endRow = endRow;,2,0,0,0,0,1,0,0,1,3,21,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,211,                columnSum   = 0;,1,0,0,0,0,0,0,0,1,2,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,212,                maxColSum   = 0;,1,0,0,0,0,0,0,0,1,2,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,213,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,217,                columnSum += Math.abs(value);,1,0,0,1,2,0,3,0,1,5,29,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,218,                if (row == endRow) {,2,1,0,1,3,1,0,0,0,5,20,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,219,"                    maxColSum = Math.max(maxColSum, columnSum);",1,0,0,0,2,0,4,0,1,4,43,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,220,                    columnSum = 0;,1,0,0,0,0,0,0,0,1,2,14,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,222,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,226,                return maxColSum;,1,0,0,0,0,1,0,0,0,2,17,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,55,        throws IllegalArgumentException {,1,0,0,0,1,1,0,0,0,3,33,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,56,        if (rowDimension <= 0 ) {,1,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,57,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,61,        if (columnDimension <= 0) {,1,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,62,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,66,        lu = null;,1,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,67,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,80,"        MatrixUtils.checkAdditionCompatible(this, m);",0,0,0,0,2,1,3,0,0,3,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,82,        final int rowCount    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,83,        final int columnCount = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,84,"        final RealMatrix out = createMatrix(rowCount, columnCount);",1,0,0,0,2,1,3,1,2,6,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,85,        for (int row = 0; row < rowCount; ++row) {,4,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,86,            for (int col = 0; col < columnCount; ++col) {,4,1,0,1,3,2,0,0,1,6,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,87,"                out.setEntry(row, col, getEntry(row, col) + m.getEntry(row, col));",0,1,0,0,6,0,11,0,1,4,66,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,91,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,99,"        MatrixUtils.checkSubtractionCompatible(this, m);",0,0,0,0,2,1,3,0,0,3,48,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,101,        final int rowCount    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,102,        final int columnCount = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,103,"        final RealMatrix out = createMatrix(rowCount, columnCount);",1,0,0,0,2,1,3,1,2,6,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,104,        for (int row = 0; row < rowCount; ++row) {,4,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,105,            for (int col = 0; col < columnCount; ++col) {,4,1,0,1,3,2,0,0,1,6,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,106,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));",0,1,0,0,6,0,11,0,1,4,66,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,110,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,117,        final int rowCount    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,118,        final int columnCount = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,119,"        final RealMatrix out = createMatrix(rowCount, columnCount);",1,0,0,0,2,1,3,1,2,6,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,120,        for (int row = 0; row < rowCount; ++row) {,4,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,121,            for (int col = 0; col < columnCount; ++col) {,4,1,0,1,3,2,0,0,1,6,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,122,"                out.setEntry(row, col, getEntry(row, col) + d);",1,1,0,0,4,0,7,0,1,5,47,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,126,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,133,        final int rowCount    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,134,        final int columnCount = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,135,"        final RealMatrix out = createMatrix(rowCount, columnCount);",1,0,0,0,2,1,3,1,2,6,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,136,        for (int row = 0; row < rowCount; ++row) {,4,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,137,            for (int col = 0; col < columnCount; ++col) {,4,1,0,1,3,2,0,0,1,6,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,138,"                out.setEntry(row, col, getEntry(row, col) * d);",1,1,0,0,4,0,7,0,1,5,47,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,142,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,151,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0,0,0,0,2,1,3,0,0,3,51,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,153,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,154,        final int nCols = m.getColumnDimension();,1,0,0,1,2,2,2,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,155,        final int nSum  = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,156,"        final RealMatrix out = createMatrix(nRows, nCols);",1,0,0,0,2,1,3,1,2,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,157,        for (int row = 0; row < nRows; ++row) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,158,            for (int col = 0; col < nCols; ++col) {,4,1,0,1,3,2,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,159,                double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,160,                for (int i = 0; i < nSum; ++i) {,4,1,0,1,3,2,0,0,1,6,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,161,"                    sum += getEntry(row, i) * m.getEntry(i, col);",1,1,0,0,4,0,7,0,2,5,45,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,163,"                out.setEntry(row, col, sum);",0,0,0,0,2,0,5,0,0,2,28,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,167,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,174,        return m.multiply(this);,0,0,0,1,2,2,2,0,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,180,        final double[][] data = new double[getRowDimension()][getColumnDimension()];,1,0,0,1,12,4,2,0,3,6,76,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,182,        for (int i = 0; i < data.length; ++i) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,183,            final double[] dataI = data[i];,1,0,1,0,4,2,0,0,1,5,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,184,            for (int j = 0; j < dataI.length; ++j) {,5,1,0,1,3,2,0,0,1,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,185,"                dataI[j] = getEntry(i, j);",0,0,1,0,4,0,3,0,2,4,26,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,189,        return data;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,195,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,2,1,1,2,6,60,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,234,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,2,1,1,2,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,264,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,266,        final RealMatrix subMatrix =,1,0,0,0,0,1,0,1,1,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,268,        for (int i = startRow; i <= endRow; ++i) {,5,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,269,            for (int j = startColumn; j <= endColumn; ++j) {,5,1,0,1,3,2,0,0,1,6,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,270,"                subMatrix.setEntry(i - startRow, j - startColumn, getEntry(i, j));",4,2,0,0,4,0,5,0,1,5,66,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,274,        return subMatrix;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,283,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);",0,0,0,0,2,1,4,0,0,3,69,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,286,        final RealMatrix subMatrix =,1,0,0,0,0,1,0,1,1,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,288,        subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {,0,0,0,1,4,1,2,1,1,6,71,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,298,        return subMatrix;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,309,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,310,        final int rowsCount    = endRow + 1 - startRow;,3,2,0,0,0,2,0,0,1,4,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,311,        final int columnsCount = endColumn + 1 - startColumn;,3,2,0,0,0,2,0,0,1,4,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,312,        if ((destination.length < rowsCount) || (destination[0].length < columnsCount)) {,5,3,1,2,9,1,0,0,0,6,81,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,313,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,320,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,1,1,1,2,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,345,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,352,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);",0,0,0,0,2,1,4,0,0,3,69,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,353,        if ((destination.length < selectedRows.length) ||,4,2,0,1,3,1,0,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,355,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,362,        for (int i = 0; i < selectedRows.length; i++) {,5,1,0,1,3,2,0,0,1,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,363,            final double[] destinationI = destination[i];,1,0,1,0,4,2,0,0,1,5,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,364,            for (int j = 0; j < selectedColumns.length; j++) {,5,1,0,1,3,2,0,0,1,6,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,365,"                destinationI[j] = getEntry(selectedRows[i], selectedColumns[j]);",0,0,1,0,8,0,1,0,2,4,64,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,369,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,375,        final int nRows = subMatrix.length;,3,0,0,0,0,2,0,0,1,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,376,        if (nRows == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,377,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row""); ",0,0,0,1,2,1,2,0,1,5,95,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,380,        final int nCols = subMatrix[0].length;,2,0,1,0,2,2,0,0,1,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,381,        if (nCols == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,382,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column""); ",0,0,0,1,2,1,2,0,1,5,98,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,385,        for (int r = 1; r < nRows; ++r) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,386,            if (subMatrix[r].length != nCols) {,2,1,1,1,5,1,0,0,0,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,387,                throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,393,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,0,2,1,3,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,394,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,0,2,1,3,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,395,"        MatrixUtils.checkRowIndex(this, nRows + row - 1);",2,2,0,0,2,1,2,0,0,5,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,396,"        MatrixUtils.checkColumnIndex(this, nCols + column - 1);",2,2,0,0,2,1,2,0,0,5,55,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,398,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,399,            for (int j = 0; j < nCols; ++j) {,4,1,0,1,3,2,0,0,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,400,"                setEntry(row + i, column + j, subMatrix[i][j]);",4,2,1,0,6,0,1,0,1,6,47,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,404,        lu = null;,1,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,406,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,412,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,0,2,1,3,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,413,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,414,"        final RealMatrix out = createMatrix(1, nCols);",1,0,0,0,2,1,2,1,2,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,415,        for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,416,"            out.setEntry(0, i, getEntry(row, i));",0,0,0,0,4,0,6,0,1,3,37,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,419,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,427,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,0,2,1,3,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,428,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,429,        if ((matrix.getRowDimension() != 1) ||,0,2,0,2,5,1,2,0,0,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,431,            throw new InvalidMatrixException(,0,0,0,0,1,2,0,1,1,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,435,        for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,436,"            setEntry(row, i, matrix.getEntry(0, i));",0,0,0,0,4,0,6,0,1,3,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,439,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,445,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,0,2,1,3,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,446,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,447,"        final RealMatrix out = createMatrix(nRows, 1);",1,0,0,0,2,1,2,1,2,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,448,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,449,"            out.setEntry(i, 0, getEntry(i, column));",0,0,0,0,4,0,6,0,1,3,40,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,452,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,460,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,0,2,1,3,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,461,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,462,        if ((matrix.getRowDimension() != nRows) ||,1,2,0,2,5,1,2,0,0,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,464,            throw new InvalidMatrixException(,0,0,0,0,1,2,0,1,1,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,468,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,469,"            setEntry(i, column, matrix.getEntry(i, 0));",0,0,0,0,4,0,6,0,1,3,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,472,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,477,"        return new ArrayRealVector(getRow(row), false);",0,0,0,1,4,2,2,1,3,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,484,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,0,2,1,3,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,485,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,486,        if (vector.getDimension() != nCols) {,1,1,0,2,5,1,2,0,0,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,487,            throw new InvalidMatrixException(,0,0,0,0,1,2,0,1,1,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,491,        for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,492,"            setEntry(row, i, vector.getEntry(i));",0,0,0,1,4,0,6,0,1,4,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,495,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,500,"        return new ArrayRealVector(getColumn(column), false);",0,0,0,1,4,2,2,1,3,6,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,507,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,0,2,1,3,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,508,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,509,        if (vector.getDimension() != nRows) {,1,1,0,2,5,1,2,0,0,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,510,            throw new InvalidMatrixException(,0,0,0,0,1,2,0,1,1,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,514,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,515,"            setEntry(i, column, vector.getEntry(i));",0,0,0,1,4,0,6,0,1,4,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,518,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,524,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,0,2,1,3,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,525,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,526,        final double[] out = new double[nCols];,1,0,1,0,4,4,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,527,        for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,528,"            out[i] = getEntry(row, i);",0,0,1,0,4,0,3,0,2,4,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,531,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,539,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,0,2,1,3,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,540,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,541,        if (array.length != nCols) {,3,1,0,1,3,1,0,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,542,            throw new InvalidMatrixException(,0,0,0,0,1,2,0,1,1,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,546,        for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,547,"            setEntry(row, i, array[i]);",0,0,1,0,4,0,3,0,1,4,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,550,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,556,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,0,2,1,3,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,557,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,558,        final double[] out = new double[nRows];,1,0,1,0,4,4,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,559,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,560,"            out[i] = getEntry(i, column);",0,0,1,0,4,0,3,0,2,4,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,563,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,571,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,0,2,1,3,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,572,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,573,        if (array.length != nRows) {,3,1,0,1,3,1,0,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,574,            throw new InvalidMatrixException(,0,0,0,0,1,2,0,1,1,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,578,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,579,"            setEntry(i, column, array[i]);",0,0,1,0,4,0,3,0,1,4,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,582,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,603,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,604,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,605,"        final RealMatrix out = createMatrix(nCols, nRows);",1,0,0,0,2,1,3,1,2,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,606,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,1,1,1,2,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,616,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,624,        if (lu == null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,625,"            lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();",3,0,0,1,4,2,1,1,2,7,67,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,627,        return lu.getInverse();,0,0,0,1,2,1,2,0,0,4,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,634,"        return new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getDeterminant();",2,0,0,1,4,3,1,1,1,7,74,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,639,        return (getColumnDimension() == getRowDimension());,0,1,0,2,6,1,2,0,2,6,51,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,645,        if (lu == null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,646,"            lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();",3,0,0,1,4,2,1,1,2,7,67,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,648,        return !lu.isNonSingular();,0,0,0,1,2,1,2,0,1,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,660,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,661,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,662,        if (nRows != nCols) {,2,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,663,"            throw new NonSquareMatrixException(nRows, nCols);",2,0,0,0,2,2,0,1,1,5,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,665,        double trace = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,666,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,667,"            trace += getEntry(i, i);",1,0,0,0,2,0,3,0,2,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,669,        return trace;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,676,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,677,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,678,        if (v.length != nCols) {,3,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,679,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,684,        final double[] out = new double[nRows];,1,0,1,0,4,4,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,685,        for (int row = 0; row < nRows; ++row) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,686,            double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,687,            for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,688,"                sum += getEntry(row, i) * v[i];",1,1,1,0,4,0,3,0,2,6,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,690,            out[row] = sum;,1,0,1,0,2,0,0,0,1,4,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,693,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,701,"            return new ArrayRealVector(operate(((ArrayRealVector) v).getDataRef()), false);",1,0,0,3,10,2,2,2,3,7,79,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,702,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,703,            final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,704,            final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,705,            if (v.getDimension() != nCols) {,1,1,0,2,5,1,2,0,0,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,706,                throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,711,            final double[] out = new double[nRows];,1,0,1,0,4,4,0,0,1,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,712,            for (int row = 0; row < nRows; ++row) {,4,1,0,1,3,2,0,0,1,6,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,713,                double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,714,                for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,715,"                    sum += getEntry(row, i) * v.getEntry(i);",1,1,0,1,4,0,6,0,2,6,40,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,717,                out[row] = sum;,1,0,1,0,2,0,0,0,1,4,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,720,"            return new ArrayRealVector(out, false);",1,0,0,0,2,2,0,1,2,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,728,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,729,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,730,        if (v.length != nRows) {,3,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,731,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,736,        final double[] out = new double[nCols];,1,0,1,0,4,4,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,737,        for (int col = 0; col < nCols; ++col) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,738,            double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,739,            for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,740,"                sum += getEntry(i, col) * v[i];",1,1,1,0,4,0,3,0,2,6,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,742,            out[col] = sum;,1,0,1,0,2,0,0,0,1,4,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,745,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,753,"            return new ArrayRealVector(preMultiply(((ArrayRealVector) v).getDataRef()), false);",1,0,0,3,10,2,2,2,3,7,83,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,754,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,756,            final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,757,            final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,758,            if (v.getDimension() != nRows) {,1,1,0,2,5,1,2,0,0,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,759,                throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,764,            final double[] out = new double[nCols];,1,0,1,0,4,4,0,0,1,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,765,            for (int col = 0; col < nCols; ++col) {,4,1,0,1,3,2,0,0,1,6,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,766,                double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,767,                for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,768,"                    sum += getEntry(i, col) * v.getEntry(i);",1,1,0,1,4,0,6,0,2,6,40,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,770,                out[col] = sum;,1,0,1,0,2,0,0,0,1,4,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,773,            return new ArrayRealVector(out);,1,0,0,1,2,2,0,1,1,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,781,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,782,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,783,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,784,        for (int row = 0; row < rows; ++row) {,4,1,0,1,3,2,0,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,785,            for (int column = 0; column < columns; ++column) {,4,1,0,1,3,2,0,0,1,6,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,786,"                final double oldValue = getEntry(row, column);",1,0,0,0,2,2,3,0,2,5,46,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,787,"                final double newValue = visitor.visit(row, column, oldValue);",1,0,0,0,2,2,5,0,1,5,61,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,788,"                setEntry(row, column, newValue);",0,0,0,0,2,0,4,0,1,3,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,791,        lu = null;,1,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,792,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,798,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,799,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,800,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,801,        for (int row = 0; row < rows; ++row) {,4,1,0,1,3,2,0,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,802,            for (int column = 0; column < columns; ++column) {,4,1,0,1,3,2,0,0,1,6,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,803,"                visitor.visit(row, column, getEntry(row, column));",0,0,0,0,4,0,7,0,1,3,50,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,806,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,814,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,815,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,817,        for (int row = startRow; row <= endRow; ++row) {,5,1,0,1,3,2,0,0,1,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,818,            for (int column = startColumn; column <= endColumn; ++column) {,5,1,0,1,3,2,0,0,1,6,63,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,819,"                final double oldValue = getEntry(row, column);",1,0,0,0,2,2,3,0,2,5,46,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,820,"                final double newValue = visitor.visit(row, column, oldValue);",1,0,0,0,2,2,5,0,1,5,61,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,821,"                setEntry(row, column, newValue);",0,0,0,0,2,0,4,0,1,3,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,824,        lu = null;,1,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,825,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,833,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,834,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,836,        for (int row = startRow; row <= endRow; ++row) {,5,1,0,1,3,2,0,0,1,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,837,            for (int column = startColumn; column <= endColumn; ++column) {,5,1,0,1,3,2,0,0,1,6,63,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,838,"                visitor.visit(row, column, getEntry(row, column));",0,0,0,0,4,0,7,0,1,3,50,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,841,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,847,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,848,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,849,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,850,        for (int column = 0; column < columns; ++column) {,4,1,0,1,3,2,0,0,1,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,851,            for (int row = 0; row < rows; ++row) {,4,1,0,1,3,2,0,0,1,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,852,"                final double oldValue = getEntry(row, column);",1,0,0,0,2,2,3,0,2,5,46,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,853,"                final double newValue = visitor.visit(row, column, oldValue);",1,0,0,0,2,2,5,0,1,5,61,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,854,"                setEntry(row, column, newValue);",0,0,0,0,2,0,4,0,1,3,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,857,        lu = null;,1,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,858,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,864,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,865,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,866,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,867,        for (int column = 0; column < columns; ++column) {,4,1,0,1,3,2,0,0,1,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,868,            for (int row = 0; row < rows; ++row) {,4,1,0,1,3,2,0,0,1,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,869,"                visitor.visit(row, column, getEntry(row, column));",0,0,0,0,4,0,7,0,1,3,50,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,872,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,880,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,881,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,883,        for (int column = startColumn; column <= endColumn; ++column) {,5,1,0,1,3,2,0,0,1,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,884,            for (int row = startRow; row <= endRow; ++row) {,5,1,0,1,3,2,0,0,1,6,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,885,"                final double oldValue = getEntry(row, column);",1,0,0,0,2,2,3,0,2,5,46,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,886,"                final double newValue = visitor.visit(row, column, oldValue);",1,0,0,0,2,2,5,0,1,5,61,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,887,"                setEntry(row, column, newValue);",0,0,0,0,2,0,4,0,1,3,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,890,        lu = null;,1,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,891,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,899,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,900,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,902,        for (int column = startColumn; column <= endColumn; ++column) {,5,1,0,1,3,2,0,0,1,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,903,            for (int row = startRow; row <= endRow; ++row) {,5,1,0,1,3,2,0,0,1,6,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,904,"                visitor.visit(row, column, getEntry(row, column));",0,0,0,0,4,0,7,0,1,3,50,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,907,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,913,        return walkInRowOrder(visitor);,0,0,0,1,2,1,2,0,1,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,919,        return walkInRowOrder(visitor);,0,0,0,1,2,1,2,0,1,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,927,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,1,4,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,935,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,1,4,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,942,        if (lu == null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,943,"            lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();",3,0,0,1,4,2,1,1,2,7,67,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,945,        return lu.solve(b);,0,0,0,1,2,1,3,0,0,4,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,952,        if (lu == null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,953,"            lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();",3,0,0,1,4,2,1,1,2,7,67,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,955,        return lu.solve(b);,0,0,0,1,2,1,3,0,0,4,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,980,        if (lu == null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,981,"            lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();",3,0,0,1,4,2,1,1,2,7,67,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,983,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,991,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,992,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,993,        final StringBuffer res = new StringBuffer();,1,0,0,1,2,2,0,2,2,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,994,        String fullClassName = getClass().getName();,1,0,0,1,4,0,2,1,1,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,995,        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);,1,1,0,2,4,0,4,1,1,7,84,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,996,"        res.append(shortClassName).append(""{"");",0,0,0,1,5,0,4,0,1,4,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,998,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,999,            if (i > 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,1000,"                res.append("","");",0,0,0,0,2,0,2,0,1,3,16,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,1002,"            res.append(""{"");",0,0,0,1,3,0,2,0,1,4,16,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,1003,            for (int j = 0; j < nCols; ++j) {,4,1,0,1,3,2,0,0,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,1004,                if (j > 0) {,1,1,0,1,3,1,0,0,0,5,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,1005,"                    res.append("","");",0,0,0,0,2,0,2,0,1,3,16,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,1007,"                res.append(getEntry(i, j));",0,0,0,0,4,0,5,0,1,3,27,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,1009,"            res.append(""}"");",0,0,0,1,3,0,2,0,1,4,16,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,1012,"        res.append(""}"");",0,0,0,1,3,0,2,0,1,4,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,1013,        return res.toString();,0,0,0,1,2,1,2,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,1027,        if (object == this ) {,1,1,0,1,3,2,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,1028,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,1030,        if (object instanceof RealMatrix == false) {,1,1,0,1,3,2,0,1,1,7,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,1031,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,1033,        RealMatrix m = (RealMatrix) object;,2,0,0,1,2,0,0,2,0,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,1034,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,1035,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,1036,        if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {,2,3,0,2,7,1,4,0,0,6,70,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,1037,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,1039,        for (int row = 0; row < nRows; ++row) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,1040,            for (int col = 0; col < nCols; ++col) {,4,1,0,1,3,2,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,1041,"                if (getEntry(row, col) != m.getEntry(row, col)) {",0,1,0,0,7,1,7,0,1,5,49,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,1042,                    return false;,0,0,0,0,0,1,0,0,1,2,13,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,1046,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,1056,        int ret = 7;,1,0,0,0,0,1,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,1057,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,1058,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,1059,        ret = ret * 31 + nRows;,3,2,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,1060,        ret = ret * 31 + nCols;,3,2,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,1061,        for (int row = 0; row < nRows; ++row) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,1062,            for (int col = 0; col < nCols; ++col) {,4,1,0,1,3,2,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,1063,               ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) * ,4,8,0,2,6,0,0,0,1,5,48,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,1067,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,606,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,1,1,1,2,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,611,"                out.setEntry(column, row, value);",0,0,0,0,2,0,5,0,0,2,33,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,612,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,320,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,1,1,1,2,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,333,                this.startRow    = startRow;,2,0,0,0,0,1,0,0,1,3,28,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,334,                this.startColumn = startColumn;,2,0,0,0,0,1,0,0,1,3,31,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,335,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,340,                destination[row - startRow][column - startColumn] = value;,5,2,1,0,4,0,0,0,1,5,58,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,341,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,86,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, getDefaultNumberFormat());",3,0,0,1,4,1,1,0,1,6,82,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,87,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,105,"        this(prefix, suffix, separator, getDefaultNumberFormat());",3,0,0,1,4,1,1,0,1,6,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,106,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,133,        return NumberFormat.getAvailableLocales();,0,0,0,1,2,1,2,0,0,4,42,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,141,        return prefix;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,149,        return suffix;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,157,        return separator;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,165,        return format;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,193,        return getInstance().format(v);,0,0,0,1,4,1,3,0,1,5,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,207,        pos.setBeginIndex(0);,0,0,0,1,2,0,2,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,208,        pos.setEndIndex(0);,0,0,0,1,2,0,2,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,211,        toAppendTo.append(prefix);,0,0,0,1,2,0,3,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,214,        for (int i = 0; i < vector.getDimension(); ++i) {,3,1,0,2,5,2,2,0,1,7,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,215,            if (i > 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,216,                toAppendTo.append(separator);,0,0,0,1,2,0,3,0,0,3,29,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,218,"            formatDouble(vector.getEntry(i), format, toAppendTo, pos);",0,0,0,1,4,0,7,0,1,4,58,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,222,        toAppendTo.append(suffix);,0,0,0,1,2,0,3,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,224,        return toAppendTo;,1,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,244,        if (obj instanceof RealVector) {,1,0,0,1,3,2,0,1,0,5,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,245,"            return format( (RealVector)obj, toAppendTo, pos);",1,0,0,1,4,1,3,1,1,7,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,248,        throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,262,        ParsePosition parsePosition = new ParsePosition(0);,1,0,0,1,2,1,0,2,1,6,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,263,"        ArrayRealVector result = parse(source, parsePosition);",1,0,0,0,2,0,3,1,1,5,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,264,        if (parsePosition.getIndex() == 0) {,0,1,0,2,5,1,2,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,265,            throw MathRuntimeException.createParseException(,0,0,0,0,1,1,2,0,0,3,48,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,269,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,279,        int initialIndex = pos.getIndex();,1,0,0,1,2,1,2,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,282,"        parseAndIgnoreWhitespace(source, pos);",0,0,0,0,2,0,3,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,283,"        if (!parseFixedstring(source, trimmedPrefix, pos)) {",0,0,0,0,5,1,4,0,2,4,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,284,            return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,288,        List<Number> components = new ArrayList<Number>();,1,0,0,1,2,1,0,4,1,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,289,        for (boolean loop = true; loop;){,2,0,0,1,3,2,0,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,291,            if (!components.isEmpty()) {,0,0,0,2,5,1,2,0,1,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,292,"                parseAndIgnoreWhitespace(source, pos);",0,0,0,0,2,0,3,0,1,3,38,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,293,"                if (!parseFixedstring(source, trimmedSeparator, pos)) {",0,0,0,0,5,1,4,0,2,4,55,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,294,                    loop = false;,1,0,0,0,0,0,0,0,2,2,13,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,298,            if (loop) {,1,0,0,1,3,1,0,0,0,4,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,299,"                parseAndIgnoreWhitespace(source, pos);",0,0,0,0,2,0,3,0,1,3,38,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,300,"                Number component = parseNumber(source, format, pos);",1,0,0,0,2,0,4,1,1,5,52,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,301,                if (component != null) {,1,1,0,1,3,1,0,0,0,5,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,302,                    components.add(component);,0,0,0,1,2,0,3,0,0,3,26,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,306,                    pos.setIndex(initialIndex);,0,0,0,1,2,0,3,0,0,3,27,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,307,                    return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,309,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,314,"        parseAndIgnoreWhitespace(source, pos);",0,0,0,0,2,0,3,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,315,"        if (!parseFixedstring(source, trimmedSuffix, pos)) {",0,0,0,0,5,1,4,0,2,4,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,316,            return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,320,        double[] data = new double[components.size()];,1,0,0,1,6,3,2,0,0,5,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,321,        for (int i = 0; i < data.length; ++i) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,322,            data[i] = components.get(i).doubleValue();,0,0,1,1,6,0,4,0,1,5,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,324,"        return new ArrayRealVector(data, false);",1,0,0,0,2,2,0,1,2,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,337,"        return parse(source, pos);",0,0,0,0,2,1,3,0,1,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,43,        return getDefaultNumberFormat(Locale.getDefault());,0,0,0,2,4,1,3,0,1,5,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,68,"        parseNextCharacter(source, pos);",0,0,0,0,2,0,3,0,1,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,69,        pos.setIndex(pos.getIndex() - 1);,0,1,0,2,4,0,4,0,0,4,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,70,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,81,         int index = pos.getIndex();,1,0,0,1,2,1,2,0,0,5,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,82,         final int n = source.length();,1,0,0,1,2,2,2,0,1,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,83,         char ret = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,85,         if (index < n) {,2,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,88,                 c = source.charAt(index++);,2,0,0,1,2,0,2,0,2,5,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,89,             } while (Character.isWhitespace(c) && index < n);,2,2,0,2,5,1,3,0,0,6,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,90,             pos.setIndex(index);,0,0,0,1,2,0,3,0,0,3,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,92,             if (index < n) {,2,1,0,1,3,1,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,93,                 ret = c;,2,0,0,0,0,0,0,0,1,2,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,97,         return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,111,        Number ret = null;,1,0,0,0,0,0,0,1,0,2,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,113,        StringBuffer sb = new StringBuffer();,1,0,0,1,2,1,0,2,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,114,        sb.append('(');,0,0,0,1,3,0,2,0,1,4,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,115,        sb.append(value);,0,0,0,1,2,0,3,0,0,3,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,116,        sb.append(')');,0,0,0,1,3,0,2,0,1,4,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,118,        final int n = sb.length();,1,0,0,1,2,2,2,0,1,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,119,        final int startIndex = pos.getIndex();,1,0,0,1,2,2,2,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,120,        final int endIndex = startIndex + n;,3,1,0,0,0,2,0,0,1,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,121,        if (endIndex < source.length()) {,1,1,0,2,5,1,2,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,122,"            if (source.substring(startIndex, endIndex).compareTo(sb.toString()) == 0) {",0,1,0,2,9,1,7,0,0,5,75,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,123,                ret = Double.valueOf(value);,1,0,0,1,2,0,3,0,1,5,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,124,                pos.setIndex(endIndex);,0,0,0,1,2,0,3,0,0,3,23,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,128,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,143,        final int startIndex = pos.getIndex();,1,0,0,1,2,2,2,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,144,"        Number number = format.parse(source, pos);",1,0,0,0,2,0,4,1,0,4,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,145,        final int endIndex = pos.getIndex();,1,0,0,1,2,2,2,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,148,        if (startIndex == endIndex) {,2,1,0,1,3,1,0,0,0,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,150,            final double[] special = {,1,0,0,0,3,2,0,0,1,4,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,153,            for (int i = 0; i < special.length; ++i) {,5,1,0,1,3,2,0,0,1,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,154,"                number = parseNumber(source, special[i], pos);",1,0,1,0,4,0,3,0,2,5,46,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,155,                if (number != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,156,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,161,        return number;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,174,        final int startIndex = pos.getIndex();,1,0,0,1,2,2,2,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,175,        final int endIndex = startIndex + expected.length();,2,1,0,1,2,2,2,0,1,7,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,176,        if ((startIndex >= source.length()) ||,1,2,0,2,5,1,2,0,0,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,180,            pos.setIndex(startIndex);,0,0,0,1,2,0,3,0,0,3,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,181,            pos.setErrorIndex(startIndex);,0,0,0,1,2,0,3,0,0,3,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,182,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,186,        pos.setIndex(endIndex);,0,0,0,1,2,0,3,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,187,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,211,        if( Double.isNaN(value) || Double.isInfinite(value) ) {,0,1,0,2,7,1,6,0,0,5,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,212,            toAppendTo.append('(');,0,0,0,1,3,0,2,0,1,4,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,213,            toAppendTo.append(value);,0,0,0,1,2,0,3,0,0,3,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,214,            toAppendTo.append(')');,0,0,0,1,3,0,2,0,1,4,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,216,"            format.format(value, toAppendTo, pos);",0,0,0,0,2,0,5,0,0,2,38,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,218,        return toAppendTo;,1,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,288,        subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {,0,0,0,1,4,1,2,1,1,6,71,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,293,"                return getEntry(selectedRows[row], selectedColumns[column]);",0,0,1,0,6,1,1,0,1,5,60,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,234,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,2,1,1,2,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,243,                sum = 0;,1,0,0,0,0,0,0,0,1,2,8,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,244,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,248,                sum += value * value;,3,1,0,0,0,0,0,0,1,3,21,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,249,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,253,                return Math.sqrt(sum);,0,0,0,1,2,1,3,0,0,4,22,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,63,    public Array2DRowRealMatrix() {,1,0,0,1,3,1,0,0,1,5,31,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,64,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,76,"        super(rowDimension, columnDimension);",2,0,0,0,2,1,0,0,1,4,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,77,        data = new double[rowDimension][columnDimension];,1,0,1,0,4,2,0,0,1,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,78,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,114,"        throws IllegalArgumentException, NullPointerException {",2,0,0,0,1,1,0,0,0,3,55,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,115,        if (copyArray) {,1,0,0,1,3,1,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,116,            copyIn(d);,0,0,0,1,2,0,2,0,1,4,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,118,            if (d == null) {,1,1,0,1,3,1,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,119,                throw new NullPointerException();,0,0,0,1,2,2,0,1,1,5,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,121,            final int nRows = d.length;,3,0,0,0,0,2,0,0,1,3,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,122,            if (nRows == 0) {,1,1,0,1,3,1,0,0,0,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,123,"                throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row""); ",0,0,0,1,2,1,2,0,1,5,95,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,125,            final int nCols = d[0].length;,2,0,1,0,2,2,0,0,1,5,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,126,            if (nCols == 0) {,1,1,0,1,3,1,0,0,0,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,127,"                throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column""); ",0,0,0,1,2,1,2,0,1,5,98,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,129,            for (int r = 1; r < nRows; r++) {,4,1,0,1,3,2,0,0,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,130,                if (d[r].length != nCols) {,2,1,1,1,5,1,0,0,0,6,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,131,                    throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,136,            data = d;,2,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,138,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,148,    public Array2DRowRealMatrix(final double[] v) {,2,0,0,1,5,3,0,0,2,5,47,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,149,        final int nRows = v.length;,3,0,0,0,0,2,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,150,        data = new double[nRows][1];,1,0,1,0,4,2,0,0,1,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,151,        for (int row = 0; row < nRows; row++) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,152,            data[row][0] = v[row];,0,0,1,0,6,0,0,0,1,3,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,154,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,160,"        return new Array2DRowRealMatrix(rowDimension, columnDimension);",2,0,0,0,2,2,0,1,1,5,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,166,"        return new Array2DRowRealMatrix(copyOut(), false);",0,0,0,1,4,2,1,1,3,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,174,            return add((Array2DRowRealMatrix) m);,1,0,0,2,4,1,1,1,1,7,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,175,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,176,            return super.add(m);,2,0,0,1,2,2,0,0,0,4,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,191,"        MatrixUtils.checkAdditionCompatible(this, m);",0,0,0,0,2,1,3,0,0,3,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,193,        final int rowCount    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,194,        final int columnCount = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,195,        final double[][] outData = new double[rowCount][columnCount];,1,0,1,0,8,4,0,0,1,5,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,196,        for (int row = 0; row < rowCount; row++) {,4,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,197,            final double[] dataRow    = data[row];,1,0,1,0,4,2,0,0,1,5,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,198,            final double[] mRow       = m.data[row];,3,0,1,0,4,2,0,0,1,5,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,199,            final double[] outDataRow = outData[row];,1,0,1,0,4,2,0,0,1,5,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,200,            for (int col = 0; col < columnCount; col++) {,4,1,0,1,3,2,0,0,1,6,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,201,                outDataRow[col] = dataRow[col] + mRow[col];,0,1,1,0,6,0,0,0,1,4,43,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,205,"        return new Array2DRowRealMatrix(outData, false);",1,0,0,0,2,2,0,1,2,5,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,214,            return subtract((Array2DRowRealMatrix) m);,1,0,0,2,4,1,1,1,1,7,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,215,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,216,            return super.subtract(m);,2,0,0,1,2,2,0,0,0,4,25,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,231,"        MatrixUtils.checkSubtractionCompatible(this, m);",0,0,0,0,2,1,3,0,0,3,48,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,233,        final int rowCount    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,234,        final int columnCount = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,235,        final double[][] outData = new double[rowCount][columnCount];,1,0,1,0,8,4,0,0,1,5,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,236,        for (int row = 0; row < rowCount; row++) {,4,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,237,            final double[] dataRow    = data[row];,1,0,1,0,4,2,0,0,1,5,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,238,            final double[] mRow       = m.data[row];,3,0,1,0,4,2,0,0,1,5,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,239,            final double[] outDataRow = outData[row];,1,0,1,0,4,2,0,0,1,5,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,240,            for (int col = 0; col < columnCount; col++) {,4,1,0,1,3,2,0,0,1,6,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,241,                outDataRow[col] = dataRow[col] - mRow[col];,0,1,1,0,6,0,0,0,1,4,43,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,245,"        return new Array2DRowRealMatrix(outData, false);",1,0,0,0,2,2,0,1,2,5,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,254,            return multiply((Array2DRowRealMatrix) m);,1,0,0,2,4,1,1,1,1,7,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,255,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,256,            return super.multiply(m);,2,0,0,1,2,2,0,0,0,4,25,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,271,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0,0,0,0,2,1,3,0,0,3,51,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,273,        final int nRows = this.getRowDimension();,1,0,0,1,2,3,1,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,274,        final int nCols = m.getColumnDimension();,1,0,0,1,2,2,2,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,275,        final int nSum = this.getColumnDimension();,1,0,0,1,2,3,1,0,1,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,276,        final double[][] outData = new double[nRows][nCols];,1,0,1,0,8,4,0,0,1,5,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,277,        for (int row = 0; row < nRows; row++) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,278,            final double[] dataRow    = data[row];,1,0,1,0,4,2,0,0,1,5,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,279,            final double[] outDataRow = outData[row];,1,0,1,0,4,2,0,0,1,5,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,280,            for (int col = 0; col < nCols; col++) {,4,1,0,1,3,2,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,281,                double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,282,                for (int i = 0; i < nSum; i++) {,4,1,0,1,3,2,0,0,1,6,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,283,                    sum += dataRow[i] * m.data[i][col];,3,1,1,0,6,0,0,0,1,5,35,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,285,                outDataRow[col] = sum;,1,0,1,0,2,0,0,0,1,4,22,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,289,"        return new Array2DRowRealMatrix(outData, false);",1,0,0,0,2,2,0,1,2,5,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,296,        return copyOut();,0,0,0,1,2,1,1,0,1,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,307,        return data;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,316,                throw MathRuntimeException.createIllegalStateException(,0,0,0,0,1,1,2,0,0,3,55,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,321,                throw MathRuntimeException.createIllegalStateException(,0,0,0,0,1,1,2,0,0,3,55,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,327,"                throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row""); ",0,0,0,1,2,1,2,0,1,5,95,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,332,"                throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column""); ",0,0,0,1,2,1,2,0,1,5,98,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,337,                    throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,344,"            super.setSubMatrix(subMatrix, row, column);",4,0,0,0,2,1,0,0,0,3,43,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,355,        } catch (ArrayIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,356,            throw new MatrixIndexException(,0,0,0,0,1,2,0,1,1,4,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,368,        } catch (ArrayIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,369,            throw new MatrixIndexException(,0,0,0,0,1,2,0,1,1,4,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,380,            data[row][column] += increment;,1,0,1,0,4,0,0,0,1,4,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,385,        }      ,0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,381,        } catch (ArrayIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,382,            throw new MatrixIndexException(,0,0,0,0,1,2,0,1,1,4,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,386,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,393,            data[row][column] *= factor;,1,0,1,0,4,0,0,0,1,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,398,        }      ,0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,394,        } catch (ArrayIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,395,            throw new MatrixIndexException(,0,0,0,0,1,2,0,1,1,4,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,399,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,417,        final int nRows = this.getRowDimension();,1,0,0,1,2,3,1,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,418,        final int nCols = this.getColumnDimension();,1,0,0,1,2,3,1,0,1,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,419,        if (v.length != nCols) {,3,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,420,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,424,        final double[] out = new double[nRows];,1,0,1,0,4,4,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,425,        for (int row = 0; row < nRows; row++) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,426,            final double[] dataRow = data[row];,1,0,1,0,4,2,0,0,1,5,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,427,            double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,428,            for (int i = 0; i < nCols; i++) {,4,1,0,1,3,2,0,0,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,429,                sum += dataRow[i] * v[i];,1,1,1,0,4,0,0,0,1,5,25,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,431,            out[row] = sum;,1,0,1,0,2,0,0,0,1,4,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,433,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,441,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,442,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,443,        if (v.length != nRows) {,3,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,444,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,449,        final double[] out = new double[nCols];,1,0,1,0,4,4,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,450,        for (int col = 0; col < nCols; ++col) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,451,            double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,452,            for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,453,                sum += data[i][col] * v[i];,1,1,1,0,6,0,0,0,1,5,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,455,            out[col] = sum;,1,0,1,0,2,0,0,0,1,4,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,458,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,466,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,467,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,468,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,469,        for (int i = 0; i < rows; ++i) {,4,1,0,1,3,2,0,0,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,470,            final double[] rowI = data[i];,1,0,1,0,4,2,0,0,1,5,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,471,            for (int j = 0; j < columns; ++j) {,4,1,0,1,3,2,0,0,1,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,472,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0,0,1,0,6,0,4,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,475,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,482,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,483,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,484,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,485,        for (int i = 0; i < rows; ++i) {,4,1,0,1,3,2,0,0,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,486,            final double[] rowI = data[i];,1,0,1,0,4,2,0,0,1,5,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,487,            for (int j = 0; j < columns; ++j) {,4,1,0,1,3,2,0,0,1,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,488,"                visitor.visit(i, j, rowI[j]);",0,0,1,0,4,0,4,0,0,3,29,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,491,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,500,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,501,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,503,        for (int i = startRow; i <= endRow; ++i) {,5,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,504,            final double[] rowI = data[i];,1,0,1,0,4,2,0,0,1,5,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,505,            for (int j = startColumn; j <= endColumn; ++j) {,5,1,0,1,3,2,0,0,1,6,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,506,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0,0,1,0,6,0,4,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,509,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,518,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,519,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,521,        for (int i = startRow; i <= endRow; ++i) {,5,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,522,            final double[] rowI = data[i];,1,0,1,0,4,2,0,0,1,5,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,523,            for (int j = startColumn; j <= endColumn; ++j) {,5,1,0,1,3,2,0,0,1,6,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,524,"                visitor.visit(i, j, rowI[j]);",0,0,1,0,4,0,4,0,0,3,29,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,527,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,534,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,535,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,536,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,537,        for (int j = 0; j < columns; ++j) {,4,1,0,1,3,2,0,0,1,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,538,            for (int i = 0; i < rows; ++i) {,4,1,0,1,3,2,0,0,1,6,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,539,                final double[] rowI = data[i];,1,0,1,0,4,2,0,0,1,5,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,540,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0,0,1,0,6,0,4,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,543,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,550,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,551,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,552,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,553,        for (int j = 0; j < columns; ++j) {,4,1,0,1,3,2,0,0,1,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,554,            for (int i = 0; i < rows; ++i) {,4,1,0,1,3,2,0,0,1,6,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,555,"                visitor.visit(i, j, data[i][j]);",0,0,1,0,6,0,4,0,0,3,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,558,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,567,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,568,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,570,        for (int j = startColumn; j <= endColumn; ++j) {,5,1,0,1,3,2,0,0,1,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,571,            for (int i = startRow; i <= endRow; ++i) {,5,1,0,1,3,2,0,0,1,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,572,                final double[] rowI = data[i];,1,0,1,0,4,2,0,0,1,5,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,573,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0,0,1,0,6,0,4,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,576,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,585,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,586,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,588,        for (int j = startColumn; j <= endColumn; ++j) {,5,1,0,1,3,2,0,0,1,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,589,            for (int i = startRow; i <= endRow; ++i) {,5,1,0,1,3,2,0,0,1,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,590,"                visitor.visit(i, j, data[i][j]);",0,0,1,0,6,0,4,0,0,3,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,593,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,602,        final int nRows = this.getRowDimension();,1,0,0,1,2,3,1,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,603,        final double[][] out = new double[nRows][this.getColumnDimension()];,1,0,1,1,10,5,1,0,1,7,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,605,        for (int i = 0; i < nRows; i++) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,606,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",1,0,1,0,8,0,2,0,0,4,56,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,608,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,72,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,73,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,86,        long s = (long)x + (long)y;,3,1,0,1,4,3,0,0,0,5,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,87,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,6,3,0,1,3,1,0,0,0,5,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,88,"            throw new ArithmeticException(""overflow: add"");",0,0,0,1,2,2,0,1,2,5,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,90,        return (int)s;,1,0,0,1,2,2,0,0,0,4,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,104,"        return addAndCheck(a, b, ""overflow: add"");",0,0,0,0,2,1,3,0,2,4,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,120,        if (a > b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,122,"            ret = addAndCheck(b, a, msg);",1,0,0,0,2,0,4,0,2,4,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,126,            if (a < 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,127,                if (b < 0) {,1,1,0,1,3,1,0,0,0,5,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,129,                    if (Long.MIN_VALUE - b <= a) {,4,2,0,1,3,1,0,0,0,5,30,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,130,                        ret = a + b;,3,1,0,0,0,0,0,0,1,3,12,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,132,                        throw new ArithmeticException(msg);,1,0,0,1,2,2,0,1,1,6,35,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,136,                    ret = a + b;,3,1,0,0,0,0,0,0,1,3,12,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,143,                if (a <= Long.MAX_VALUE - b) {,4,2,0,1,3,1,0,0,0,5,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,144,                    ret = a + b;,3,1,0,0,0,0,0,0,1,3,12,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,146,                    throw new ArithmeticException(msg);,1,0,0,1,2,2,0,1,1,6,35,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,150,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,179,"        checkBinomial(n, k);",0,0,0,0,2,0,3,0,1,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,180,        if ((n == k) || (k == 0)) {,3,3,0,2,7,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,181,            return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,183,        if ((k == 1) || (k == n - 1)) {,3,4,0,2,7,1,0,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,184,            return n;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,187,        if (k > n / 2),2,2,0,1,2,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,188,"            return binomialCoefficient(n, n - k);",2,1,0,0,2,1,2,0,1,6,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,195,        long result = 1;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,196,        if (n <= 61) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,198,"            for (int j = 1, i = n - k + 1; j <= k; i++, j++) {",8,3,0,0,3,2,0,0,2,5,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,199,                result = result * i / j;,4,2,0,0,0,0,0,0,1,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,201,        } else if (n <= 66) {,1,1,0,1,4,2,0,0,0,5,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,204,"            for (int j = 1, i = n - k + 1; j <= k; i++, j++) {",8,3,0,0,3,2,0,0,2,5,50,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,211,"                long d = gcd(i, j);",1,0,0,0,2,1,3,0,1,5,19,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,212,                result = (result / (j / d)) * (i / d);,6,4,0,2,6,0,0,0,1,5,38,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,218,"            for (int j = 1, i = n - k + 1; j <= k; i++, j++) {",8,3,0,0,3,2,0,0,2,5,50,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,219,"                long d = gcd(i, j);",1,0,0,0,2,1,3,0,1,5,19,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,220,"                result = mulAndCheck((result / (j / d)), (i / d));",6,3,0,2,8,0,1,0,2,6,50,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,223,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,249,"        checkBinomial(n, k);",0,0,0,0,2,0,3,0,1,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,250,        if ((n == k) || (k == 0)) {,3,3,0,2,7,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,251,            return 1d;,0,0,0,0,0,1,0,0,0,1,10,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,253,        if ((k == 1) || (k == n - 1)) {,3,4,0,2,7,1,0,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,254,            return n;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,256,        if (k > n/2) {,2,2,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,257,"            return binomialCoefficientDouble(n, n - k);",2,1,0,0,2,1,2,0,1,6,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,259,        if (n < 67) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,260,"            return binomialCoefficient(n,k);",0,0,0,0,2,1,3,0,1,4,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,263,        double result = 1d;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,264,        for (int i = 1; i <= k; i++) {,4,1,0,1,3,2,0,0,1,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,265,             result *= (double)(n - k + i) / (double)i;,5,3,0,1,6,2,0,0,1,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,268,        return Math.floor(result + 0.5);,1,1,0,1,2,1,2,0,0,6,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,290,"        checkBinomial(n, k);",0,0,0,0,2,0,3,0,1,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,291,        if ((n == k) || (k == 0)) {,3,3,0,2,7,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,292,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,294,        if ((k == 1) || (k == n - 1)) {,3,4,0,2,7,1,0,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,295,            return Math.log(n);,0,0,0,1,2,1,3,0,0,4,19,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,302,        if (n < 67) {  ,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,303,"            return Math.log(binomialCoefficient(n,k));",0,0,0,0,4,1,5,0,1,4,42,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,310,        if (n < 1030) { ,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,311,"            return Math.log(binomialCoefficientDouble(n, k));",0,0,0,0,4,1,5,0,1,4,49,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,314,        if (k > n / 2) {,2,2,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,315,"            return binomialCoefficientLog(n, n - k);",2,1,0,0,2,1,2,0,1,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,321,        double logSum = 0;,1,0,0,0,0,1,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,324,        for (int i = n - k + 1; i <= n; i++) {,6,3,0,1,3,2,0,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,325,            logSum += Math.log(i);,1,0,0,1,2,0,3,0,1,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,329,        for (int i = 2; i <= k; i++) {,4,1,0,1,3,2,0,0,1,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,330,            logSum -= Math.log(i);,1,0,0,1,2,0,3,0,1,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,333,        return logSum;      ,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,344,        if (n < k) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,345,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,349,        if (n < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,350,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,354,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,383,        return (Math.exp(x) + Math.exp(-x)) / 2.0;,1,2,0,2,6,1,5,0,1,7,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,431,        assert maxUlps > 0 && maxUlps < NAN_GAP;,3,3,0,0,0,1,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,433,        long xInt = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,434,        long yInt = Double.doubleToLongBits(y);,1,0,0,1,2,1,3,0,0,5,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,437,        if (xInt < 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,438,            xInt = SGN_MASK - xInt;,3,1,0,0,0,0,0,0,1,3,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,440,        if (yInt < 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,441,            yInt = SGN_MASK - yInt;,3,1,0,0,0,0,0,0,1,3,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,444,        return Math.abs(xInt - yInt) <= maxUlps;,3,2,0,1,2,1,2,0,0,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,458,        if ((x == null) || (y == null)) {,2,3,0,2,7,1,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,459,            return !((x == null) ^ (y == null));,2,3,0,2,6,1,0,0,1,6,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,461,        if (x.length != y.length) {,4,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,462,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,464,        for (int i = 0; i < x.length; ++i) {,5,1,0,1,3,2,0,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,465,"            if (!equals(x[i], y[i])) {",0,0,1,0,9,1,1,0,2,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,466,                return false;,0,0,0,0,0,1,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,469,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,502,        if (n < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,503,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,507,        if (n > 20) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,508,            throw new ArithmeticException(,0,0,0,0,1,2,0,1,1,4,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,511,        return factorials[n];,0,0,1,0,2,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,535,        if (n < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,536,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,540,        if (n < 21) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,541,            return factorial(n);,0,0,0,1,2,1,2,0,1,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,543,        return Math.floor(Math.exp(factorialLog(n)) + 0.5);,0,1,0,3,6,1,6,0,1,6,51,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,560,        if (n < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,561,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,565,        if (n < 21) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,566,            return Math.log(factorial(n));,0,0,0,2,4,1,4,0,1,5,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,568,        double logSum = 0;,1,0,0,0,0,1,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,569,        for (int i = 2; i <= n; i++) {,4,1,0,1,3,2,0,0,1,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,570,            logSum += Math.log(i);,1,0,0,1,2,0,3,0,1,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,572,        return logSum;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,606,        int u = p;,2,0,0,0,0,1,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,607,        int v = q;,2,0,0,0,0,1,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,608,        if ((u == 0) || (v == 0)) {,2,3,0,2,7,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,609,            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {,6,3,0,2,7,1,0,0,0,5,59,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,610,                throw MathRuntimeException.createArithmeticException(,0,0,0,0,1,1,2,0,0,3,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,614,            return (Math.abs(u) + Math.abs(v));,0,1,0,2,6,1,6,0,0,5,35,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,621,        if (u > 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,622,            u = -u;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,624,        if (v > 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,625,            v = -v;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,628,        int k = 0;,1,0,0,0,0,1,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,629,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,3,7,0,2,7,2,0,0,0,5,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,631,            u /= 2;,1,0,0,0,0,0,0,0,1,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,632,            v /= 2;,1,0,0,0,0,0,0,0,1,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,633,            k++; // cast out twos.,1,0,0,0,0,0,0,0,1,2,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,635,        if (k == 31) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,636,            throw MathRuntimeException.createArithmeticException(,0,0,0,0,1,1,2,0,0,3,53,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,642,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,4,3,0,2,6,1,0,0,1,6,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,648,            while ((t & 1) == 0) { // while t is even..,1,2,0,2,5,2,0,0,0,5,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,649,                t /= 2; // cast out twos,1,0,0,0,0,0,0,0,1,2,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,652,            if (t > 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,653,                u = -t;,2,0,0,0,0,0,0,0,2,2,7,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,655,                v = t;,2,0,0,0,0,0,0,0,1,2,6,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,658,            t = (v - u) / 2;,3,2,0,1,2,0,0,0,1,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,661,        } while (t != 0);,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,662,        return -u * (1 << k); // gcd is u*2^k,2,2,0,1,2,1,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,672,        return new Double(value).hashCode();,1,0,0,1,4,2,1,1,1,7,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,683,        return Arrays.hashCode(value);,0,0,0,1,2,1,3,0,0,4,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,694,        return (x >= ZB) ? PB : NB;,4,1,0,1,2,1,0,0,0,5,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,706,        if (Double.isNaN(x)) {,0,0,0,2,5,1,3,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,707,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,709,        return (x >= 0.0) ? 1.0 : -1.0;,1,1,0,1,2,1,0,0,1,6,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,720,        if (Float.isNaN(x)) {,0,0,0,2,5,1,3,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,721,            return Float.NaN;,2,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,723,        return (x >= 0.0F) ? 1.0F : -1.0F;,1,1,0,1,2,1,0,0,1,6,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,733,        return (x >= 0) ? 1 : -1;,1,1,0,1,2,1,0,0,1,6,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,743,        return (x >= 0L) ? 1L : -1L;,1,1,0,1,2,1,0,0,1,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,754,        return (x >= ZS) ? PS : NS;,4,1,0,1,2,1,0,0,0,5,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,781,        if (a==0 || b==0){,2,3,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,782,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,784,"        int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));",2,1,0,0,6,1,7,0,2,6,50,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,785,        if (lcm == Integer.MIN_VALUE){,3,1,0,1,3,1,0,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,786,"            throw new ArithmeticException(""overflow: lcm is 2^31"");",0,0,0,1,2,2,0,1,2,5,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,788,        return lcm;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,808,        return Math.log(x)/Math.log(base);,0,1,0,1,4,1,6,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,822,        long m = ((long)x) * ((long)y);,3,1,0,2,8,3,0,0,0,5,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,823,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,6,3,0,1,3,1,0,0,0,5,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,824,"            throw new ArithmeticException(""overflow: mul"");",0,0,0,1,2,2,0,1,2,5,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,826,        return (int)m;,1,0,0,1,2,2,0,0,0,4,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,841,"        String msg = ""overflow: multiply"";",1,0,0,0,0,0,0,1,1,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,842,        if (a > b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,844,"            ret = mulAndCheck(b, a);",1,0,0,0,2,0,3,0,2,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,846,            if (a < 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,847,                if (b < 0) {,1,1,0,1,3,1,0,0,0,5,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,849,                    if (a >= Long.MAX_VALUE / b) {,4,2,0,1,3,1,0,0,0,5,30,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,850,                        ret = a * b;,3,1,0,0,0,0,0,0,1,3,12,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,852,                        throw new ArithmeticException(msg);,1,0,0,1,2,2,0,1,1,6,35,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,854,                } else if (b > 0) {,1,1,0,1,4,2,0,0,0,5,19,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,856,                    if (Long.MIN_VALUE / b <= a) {,4,2,0,1,3,1,0,0,0,5,30,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,857,                        ret = a * b;,3,1,0,0,0,0,0,0,1,3,12,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,859,                        throw new ArithmeticException(msg);,1,0,0,1,2,2,0,1,1,6,35,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,864,                    ret = 0;,1,0,0,0,0,0,0,0,1,2,8,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,866,            } else if (a > 0) {,1,1,0,1,4,2,0,0,0,5,19,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,871,                if (a <= Long.MAX_VALUE / b) {,4,2,0,1,3,1,0,0,0,5,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,872,                    ret = a * b;,3,1,0,0,0,0,0,0,1,3,12,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,874,                    throw new ArithmeticException(msg);,1,0,0,1,2,2,0,1,1,6,35,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,878,                ret = 0;,1,0,0,0,0,0,0,0,1,2,8,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,881,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,904,        if (Double.isNaN(d) || Double.isInfinite(d)) {,0,1,0,2,7,1,6,0,0,5,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,905,                return d;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,906,        } else if (d == 0) {,1,1,0,1,4,2,0,0,0,5,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,907,                return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,5,1,0,1,2,1,0,0,1,6,62,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,913,        long bits     = Double.doubleToLongBits(d);,1,0,0,1,2,1,3,0,0,5,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,914,        long sign     = bits & 0x8000000000000000L;,2,1,0,0,0,1,0,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,915,        long exponent = bits & 0x7ff0000000000000L;,2,1,0,0,0,1,0,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,916,        long mantissa = bits & 0x000fffffffffffffL;,2,1,0,0,0,1,0,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,918,        if (d * (direction - d) >= 0) {,3,3,0,2,5,1,0,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,920,                if (mantissa == 0x000fffffffffffffL) {,1,1,0,1,3,1,0,0,0,5,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,921,                        return Double.longBitsToDouble(sign |,1,1,0,0,1,1,2,0,0,5,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,924,                        return Double.longBitsToDouble(sign |,1,1,0,0,1,1,2,0,0,5,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,929,                if (mantissa == 0L) {,1,1,0,1,3,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,930,                        return Double.longBitsToDouble(sign |,1,1,0,0,1,1,2,0,0,5,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,934,                        return Double.longBitsToDouble(sign |,1,1,0,0,1,1,2,0,0,5,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,953,        if ((d == 0) || Double.isNaN(d) || Double.isInfinite(d)) {,1,2,0,2,9,1,6,0,0,6,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,954,            return d;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,958,        final long bits     = Double.doubleToLongBits(d);,1,0,0,1,2,2,3,0,1,6,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,959,        final long exponent = bits & 0x7ff0000000000000L;,2,1,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,960,        final long rest     = bits & 0x800fffffffffffffL;,2,1,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,963,        final long newBits = rest | (exponent + (((long) scaleFactor) << 52));,4,3,0,4,8,3,0,0,1,6,70,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,964,        return Double.longBitsToDouble(newBits);,0,0,0,1,2,1,3,0,0,4,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,988,         return a - TWO_PI * Math.floor((a + Math.PI - center) / TWO_PI);,7,5,0,2,4,1,2,0,0,6,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1001,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",2,0,0,0,2,1,3,0,1,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1018,            return (new BigDecimal,0,0,0,0,1,2,0,1,1,4,22,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1022,        } catch (NumberFormatException ex) {,1,0,0,1,4,1,0,1,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1023,            if (Double.isInfinite(x)) {,0,0,0,2,5,1,3,0,0,4,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1024,                return x;          ,1,0,0,0,0,1,0,0,0,2,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1026,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1041,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",2,0,0,0,2,1,3,0,1,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1057,        float sign = indicator(x);,1,0,0,1,2,1,2,0,1,6,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1058,"        float factor = (float)Math.pow(10.0f, scale) * sign;",2,1,0,1,4,2,3,0,0,6,52,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1059,"        return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor;",3,2,0,1,4,2,3,0,1,7,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1076,        switch (roundingMethod) {,1,0,0,1,3,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1078,            if (sign == -1) {,1,1,0,1,3,1,0,0,1,6,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1079,"                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",3,0,0,0,4,0,4,0,2,4,69,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1081,"                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));",3,0,0,0,4,0,4,0,2,4,68,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1083,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1085,"            unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",3,0,0,0,4,0,4,0,2,4,69,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1086,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1088,            if (sign == -1) {,1,1,0,1,3,1,0,0,1,6,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1089,"                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));",3,0,0,0,4,0,4,0,2,4,68,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1091,"                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",3,0,0,0,4,0,4,0,2,4,69,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1093,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1095,"            unscaled = nextAfter(unscaled, Double.NEGATIVE_INFINITY);",3,0,0,0,2,0,2,0,2,4,57,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1096,            double fraction = unscaled - Math.floor(unscaled);,2,1,0,1,2,1,3,0,0,6,50,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1097,            if (fraction > 0.5) {,1,1,0,1,3,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1098,                unscaled = Math.ceil(unscaled);,1,0,0,1,2,0,3,0,1,5,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1100,                unscaled = Math.floor(unscaled);,1,0,0,1,2,0,3,0,1,5,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1102,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1105,            double fraction = unscaled - Math.floor(unscaled);,2,1,0,1,2,1,3,0,0,6,50,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1106,            if (fraction > 0.5) {,1,1,0,1,3,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1107,                unscaled = Math.ceil(unscaled);,1,0,0,1,2,0,3,0,1,5,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1108,            } else if (fraction < 0.5) {,1,1,0,1,4,2,0,0,0,5,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1109,                unscaled = Math.floor(unscaled);,1,0,0,1,2,0,3,0,1,5,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1112,                if (Math.floor(unscaled) / 2.0 == Math.floor(Math,0,3,0,1,4,1,6,0,0,5,49,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1114,                    unscaled = Math.floor(unscaled);,1,0,0,1,2,0,3,0,1,5,32,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1116,                    unscaled = Math.ceil(unscaled);,1,0,0,1,2,0,3,0,1,5,31,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1119,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1122,"            unscaled = nextAfter(unscaled, Double.POSITIVE_INFINITY);",3,0,0,0,2,0,2,0,2,4,57,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1123,            double fraction = unscaled - Math.floor(unscaled);,2,1,0,1,2,1,3,0,0,6,50,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1124,            if (fraction >= 0.5) {,1,1,0,1,3,1,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1125,                unscaled = Math.ceil(unscaled);,1,0,0,1,2,0,3,0,1,5,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1127,                unscaled = Math.floor(unscaled);,1,0,0,1,2,0,3,0,1,5,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1129,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1132,            if (unscaled != Math.floor(unscaled)) {,1,1,0,2,5,1,3,0,0,6,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1133,"                throw new ArithmeticException(""Inexact result from rounding"");",0,0,0,1,2,2,0,1,2,5,62,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1137,"            unscaled = Math.ceil(nextAfter(unscaled,  Double.POSITIVE_INFINITY));",3,0,0,0,4,0,4,0,2,4,69,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1138,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1140,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1153,        return unscaled;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1167,        return (x == ZB) ? ZB : (x > ZB) ? PB : NB;,7,2,0,1,4,1,0,0,0,5,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1183,        if (Double.isNaN(x)) {,0,0,0,2,5,1,3,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1184,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1186,        return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;,2,2,0,1,4,1,0,0,1,6,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1201,        if (Float.isNaN(x)) {,0,0,0,2,5,1,3,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1202,            return Float.NaN;,2,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1204,        return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;,2,2,0,1,4,1,0,0,1,6,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1218,        return (x == 0) ? 0 : (x > 0) ? 1 : -1;,2,2,0,1,4,1,0,0,1,6,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1232,        return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;,2,2,0,1,4,1,0,0,1,6,44,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1247,        return (x == ZS) ? ZS : (x > ZS) ? PS : NS;,7,2,0,1,4,1,0,0,0,5,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1258,        return (Math.exp(x) - Math.exp(-x)) / 2.0;,1,2,0,2,6,1,5,0,1,7,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1272,        long s = (long)x - (long)y;,3,1,0,1,4,3,0,0,0,5,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1273,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,6,3,0,1,3,1,0,0,0,5,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1274,"            throw new ArithmeticException(""overflow: subtract"");",0,0,0,1,2,2,0,1,2,5,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1276,        return (int)s;,1,0,0,1,2,2,0,0,0,4,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1291,"        String msg = ""overflow: subtract"";",1,0,0,0,0,0,0,1,1,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1292,        if (b == Long.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1293,            if (a < 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1294,                ret = a - b;,3,1,0,0,0,0,0,0,1,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1296,                throw new ArithmeticException(msg);,1,0,0,1,2,2,0,1,1,6,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1300,"            ret = addAndCheck(a, -b, msg);",2,0,0,0,2,0,3,0,3,4,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1302,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1315,        if (e < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1316,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1321,        int result = 1;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1322,        int k2p    = k;,2,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1323,        while (e != 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1324,            if ((e & 0x1) != 0) {,1,2,0,2,5,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1325,                result *= k2p;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1327,            k2p *= k2p;,2,0,0,0,0,0,0,0,1,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1328,            e = e >> 1;,2,1,0,0,0,0,0,0,1,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1331,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1345,        if (e < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1346,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1351,        int result = 1;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1352,        int k2p    = k;,2,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1353,        while (e != 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1354,            if ((e & 0x1) != 0) {,1,2,0,2,5,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1355,                result *= k2p;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1357,            k2p *= k2p;,2,0,0,0,0,0,0,0,1,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1358,            e = e >> 1;,2,1,0,0,0,0,0,0,1,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1361,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1375,        if (e < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1376,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1381,        long result = 1l;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1382,        long k2p    = k;,2,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1383,        while (e != 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1384,            if ((e & 0x1) != 0) {,1,2,0,2,5,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1385,                result *= k2p;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1387,            k2p *= k2p;,2,0,0,0,0,0,0,0,1,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1388,            e = e >> 1;,2,1,0,0,0,0,0,0,1,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1391,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1405,        if (e < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1406,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1411,        long result = 1l;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1412,        long k2p    = k;,2,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1413,        while (e != 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1414,            if ((e & 0x1) != 0) {,1,2,0,2,5,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1415,                result *= k2p;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1417,            k2p *= k2p;,2,0,0,0,0,0,0,0,1,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1418,            e = e >> 1;,2,1,0,0,0,0,0,0,1,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1421,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1435,        if (e < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1436,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1441,        return k.pow(e);,0,0,0,1,2,1,3,0,0,4,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1455,        if (e < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1456,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1461,        BigInteger result = BigInteger.ONE;,3,0,0,0,0,0,0,1,0,2,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1462,        BigInteger k2p    = k;,2,0,0,0,0,0,0,1,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1463,        while (e != 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1464,            if ((e & 0x1) != 0) {,1,2,0,2,5,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1465,                result = result.multiply(k2p);,1,0,0,1,2,0,3,0,1,5,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1467,            k2p = k2p.multiply(k2p);,1,0,0,1,2,0,3,0,1,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1468,            e = e >> 1;,2,1,0,0,0,0,0,0,1,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1471,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1485,        if (e.compareTo(BigInteger.ZERO) < 0) {,2,1,0,2,5,1,2,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1486,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1491,        BigInteger result = BigInteger.ONE;,3,0,0,0,0,0,0,1,0,2,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1492,        BigInteger k2p    = k;,2,0,0,0,0,0,0,1,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1493,        while (!BigInteger.ZERO.equals(e)) {,2,0,0,2,5,1,2,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1494,            if (e.testBit(0)) {,0,0,0,2,5,1,2,0,0,4,19,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1495,                result = result.multiply(k2p);,1,0,0,1,2,0,3,0,1,5,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1497,            k2p = k2p.multiply(k2p);,1,0,0,1,2,0,3,0,1,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1498,            e = e.shiftRight(1);,1,0,0,1,2,0,2,0,1,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1501,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1513,        double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1514,        for (int i = 0; i < p1.length; i++) {,5,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1515,            sum += Math.abs(p1[i] - p2[i]);,1,1,1,1,6,0,2,0,1,7,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1517,        return sum;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1528,      int sum = 0;,1,0,0,0,0,1,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1529,      for (int i = 0; i < p1.length; i++) {,5,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1530,          sum += Math.abs(p1[i] - p2[i]);,1,1,1,1,6,0,2,0,1,7,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1532,      return sum;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1543,        double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1544,        for (int i = 0; i < p1.length; i++) {,5,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1545,            final double dp = p1[i] - p2[i];,1,1,1,0,4,2,0,0,1,6,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1546,            sum += dp * dp;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1548,        return Math.sqrt(sum);,0,0,0,1,2,1,3,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1559,      int sum = 0;,1,0,0,0,0,1,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1560,      for (int i = 0; i < p1.length; i++) {,5,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1561,          final int dp = p1[i] - p2[i];,1,1,1,0,4,2,0,0,1,6,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1562,          sum += dp * dp;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1564,      return Math.sqrt(sum);,0,0,0,1,2,1,3,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1575,        double max = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1576,        for (int i = 0; i < p1.length; i++) {,5,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1577,"            max = Math.max(max, Math.abs(p1[i] - p2[i]));",1,1,1,1,8,0,5,0,1,7,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1579,        return max;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1590,        int max = 0;,1,0,0,0,0,1,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1591,        for (int i = 0; i < p1.length; i++) {,5,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1592,"            max = Math.max(max, Math.abs(p1[i] - p2[i]));",1,1,1,1,8,0,5,0,1,7,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,82,1594,        return max;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,126,"                            final double[] rhsCoefficients, final double rhsConstant) {",2,0,0,0,4,4,0,0,2,4,59,3,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,127,        double[] sub = new double[lhsCoefficients.length];,3,0,0,0,4,3,0,0,0,3,50,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,128,        for (int i = 0; i < sub.length; ++i) {,5,1,0,1,3,2,0,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,129,            sub[i] = lhsCoefficients[i] - rhsCoefficients[i];,0,1,1,0,6,0,0,0,1,4,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,131,"        this.coefficients = new ArrayRealVector(sub, false);",2,0,0,0,2,2,0,1,3,5,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,132,        this.relationship = relationship;,2,0,0,0,0,1,0,0,1,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,133,        this.value        = rhsConstant - lhsConstant;,3,1,0,0,0,1,0,0,1,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,134,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,157,"                            final RealVector rhsCoefficients, final double rhsConstant) {",2,0,0,0,2,3,0,1,2,5,61,3,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,158,        this.coefficients = lhsCoefficients.subtract(rhsCoefficients);,1,0,0,1,2,1,3,0,1,6,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,159,        this.relationship = relationship;,2,0,0,0,0,1,0,0,1,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,160,        this.value        = rhsConstant - lhsConstant;,3,1,0,0,0,1,0,0,1,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,161,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,191,      if (this == other) { ,1,1,0,1,3,2,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,192,        return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,195,      if (other == null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,196,        return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,201,          LinearConstraint rhs = (LinearConstraint) other;,2,0,0,1,2,0,0,2,0,4,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,202,          return (relationship == rhs.relationship) &&,3,2,0,1,2,1,0,0,0,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,206,      } catch (ClassCastException ex) {,1,0,0,1,4,1,0,1,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,208,          return false;,0,0,0,0,0,1,0,0,1,2,13,7,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,216,        return relationship.hashCode() ^,0,1,0,1,2,1,2,0,0,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,227,        oos.defaultWriteObject();,0,0,0,1,2,0,2,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,228,"        MatrixUtils.serializeRealVector(coefficients, oos);",0,0,0,0,2,0,4,0,0,2,51,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,229,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,238,        ois.defaultReadObject();,0,0,0,1,2,0,2,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,239,"        MatrixUtils.deserializeRealVector(this, ""coefficients"", ois);",0,0,0,0,2,1,3,0,1,4,61,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,240,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/Relationship,82,49,        return stringValue;,1,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/Relationship,82,57,        switch (this) {,0,0,0,1,3,2,0,0,0,3,15,2,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/Relationship,82,59,            return GEQ;,1,0,0,0,0,1,0,0,0,2,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/Relationship,82,61,            return LEQ;,1,0,0,0,0,1,0,0,0,2,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/Relationship,82,63,            return EQ;,1,0,0,0,0,1,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,134,            matrix[0][0] = -1;,0,0,1,0,4,0,0,0,2,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,145,                    matrix[zIndex][getSlackVariableOffset() - 1] =,0,1,1,1,6,0,1,0,2,6,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,161,                        matrix[row][getSlackVariableOffset() - 1] =,0,1,1,1,6,0,1,0,2,6,43,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,171,                    } else if (constraint.getRelationship() == Relationship.GEQ) {,2,1,0,2,6,2,2,0,0,6,62,7,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,172,                        matrix[row][getSlackVariableOffset() + slackVar++] = -1; // excess,1,1,1,1,6,0,1,0,4,7,66,9,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,178,                        matrix[0][getArtificialVariableOffset() + artificialVar] = 1; ,1,1,1,1,6,0,1,0,2,7,61,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,179,                        matrix[row][getArtificialVariableOffset() + artificialVar++] = 1; ,1,1,1,1,6,0,1,0,3,7,65,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,212,"            return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),",0,0,0,1,5,2,3,1,2,6,73,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,249,            int row = getBasicRow(getArtificialVariableOffset() + artificialVar);,2,1,0,2,4,1,2,0,2,7,69,7,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,250,"            subtractRow(0, row, 1.0);",0,0,0,0,2,0,2,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,260,        double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,261,        for (double coefficient : coefficients.getData()) {,1,0,0,2,5,2,2,0,0,5,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,262,            sum -= coefficient;,2,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,264,        return sum;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,273,"        return getBasicRow(col, true);",0,0,0,0,2,1,2,0,2,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,310,        int width = getWidth() - numArtificialVariables - 1;,2,1,0,1,2,1,1,0,1,7,52,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,311,        int height = getHeight() - 1;,1,1,0,1,2,1,1,0,1,7,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,312,        double[][] matrix = new double[height][width];,1,0,1,0,8,3,0,0,0,4,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,313,        for (int i = 0; i < height; i++) {,4,1,0,1,3,2,0,0,1,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,314,            for (int j = 0; j < width - 1; j++) {,4,2,0,1,3,2,0,0,1,6,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,315,"                matrix[i][j] = getEntry(i + 1, j + 1);",2,2,1,0,6,0,1,0,2,6,38,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,317,"            matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());",2,2,1,1,8,0,2,0,3,7,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,319,        this.tableau = new Array2DRowRealMatrix(matrix);,2,0,0,1,2,2,0,1,2,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,320,        this.numArtificialVariables = 0;,1,0,0,0,0,1,0,0,1,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,321,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,349,              coefficients[i] = 0;,0,0,1,0,2,0,0,0,1,3,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,425,"        tableau.setEntry(row, column, value);",0,0,0,0,2,0,5,0,0,2,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,426,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,441,        return getNumObjectiveFunctions() + numDecisionVariables + numSlackVariables;,2,1,0,1,2,1,1,0,1,7,77,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,472,        return numDecisionVariables;,1,0,0,0,0,1,0,0,0,2,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,489,        return numSlackVariables;,1,0,0,0,0,1,0,0,0,2,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,505,        return tableau.getData();,0,0,0,1,2,1,2,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,512,      if (this == other) { ,1,1,0,1,3,2,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,513,        return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,516,      if (other == null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,517,        return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,522,          SimplexTableau rhs = (SimplexTableau) other;,2,0,0,1,2,0,0,2,0,4,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,523,          return (restrictToNonNegative  == rhs.restrictToNonNegative) &&,3,2,0,1,2,1,0,0,0,5,63,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,532,      } catch (ClassCastException ex) {,1,0,0,1,4,1,0,1,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,534,          return false;,0,0,0,0,0,1,0,0,1,2,13,7,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,542,        return Boolean.valueOf(restrictToNonNegative).hashCode() ^,0,1,0,1,4,1,4,0,0,5,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,558,        oos.defaultWriteObject();,0,0,0,1,2,0,2,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,559,"        MatrixUtils.serializeRealMatrix(tableau, oos);",0,0,0,0,2,0,4,0,0,2,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,560,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,569,        ois.defaultReadObject();,0,0,0,1,2,0,2,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,570,"        MatrixUtils.deserializeRealMatrix(this, ""tableau"", ois);",0,0,0,0,2,1,3,0,1,4,56,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,571,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,82,61,                                final boolean copyArray) {,1,0,0,0,2,2,0,0,1,4,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,82,62,        this.point = copyArray ? point.clone() : point;,3,0,0,1,2,1,2,0,1,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,82,63,        this.value  = value;,2,0,0,0,0,1,0,0,1,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,82,64,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,82,70,        return point.clone();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,82,79,        return point;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,82,101,        return coefficients.dotProduct(point) + constantTerm;,1,1,0,1,2,1,3,0,0,6,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,82,108,      if (this == other) { ,1,1,0,1,3,2,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,82,109,        return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,82,112,      if (other == null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,82,113,        return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,82,118,          LinearObjectiveFunction rhs = (LinearObjectiveFunction) other;,2,0,0,1,2,0,0,2,0,4,62,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,82,119,          return (constantTerm == rhs.constantTerm) && coefficients.equals(rhs.coefficients);,5,2,0,1,4,1,2,0,0,6,83,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,82,121,      } catch (ClassCastException ex) {,1,0,0,1,4,1,0,1,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,82,123,          return false;,0,0,0,0,0,1,0,0,1,2,13,7,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,82,131,        return Double.valueOf(constantTerm).hashCode() ^ coefficients.hashCode();,0,1,0,1,6,1,6,0,0,5,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,82,140,        oos.defaultWriteObject();,0,0,0,1,2,0,2,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,82,141,"        MatrixUtils.serializeRealVector(coefficients, oos);",0,0,0,0,2,0,4,0,0,2,51,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,82,142,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,82,151,        ois.defaultReadObject();,0,0,0,1,2,0,2,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,82,152,"        MatrixUtils.deserializeRealVector(this, ""coefficients"", ois);",0,0,0,0,2,1,3,0,1,4,61,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,82,153,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/UnboundedSolutionException,82,37,"        super(""unbounded solution"");",0,0,0,1,2,1,0,0,2,4,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/UnboundedSolutionException,82,38,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/OptimizationException,82,42,"        super(specifier, parts);",2,0,0,0,2,1,0,0,1,4,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/OptimizationException,82,43,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/OptimizationException,82,50,        super(cause);,1,0,0,1,2,1,0,0,1,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/OptimizationException,82,51,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,82,34,"        super(""Convergence failed"");",0,0,0,1,2,1,0,0,2,4,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,82,35,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,82,45,"        super(pattern, arguments);",2,0,0,0,2,1,0,0,1,4,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,82,46,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,82,53,        super(cause);,1,0,0,1,2,1,0,0,1,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,82,54,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,82,65,"        super(cause, pattern, arguments);",3,0,0,0,2,1,0,0,1,4,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,82,66,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,82,93,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,82,94,        this.pattern   = null;,1,0,0,0,0,1,0,0,1,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,82,95,        this.arguments = new Object[0];,1,0,0,0,2,2,0,1,1,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,82,96,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,82,106,"      super(buildMessage(Locale.US, pattern, arguments));",2,0,0,0,4,1,3,0,2,5,51,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,82,107,      this.pattern   = pattern;,2,0,0,0,0,1,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,82,108,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,2,1,0,1,6,2,2,1,1,8,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,82,109,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,82,119,        super(rootCause);,1,0,0,1,2,1,0,0,1,5,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,82,120,        this.pattern   = getMessage();,1,0,0,1,2,1,1,0,2,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,82,121,        this.arguments = new Object[0];,1,0,0,0,2,2,0,1,1,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,82,122,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,82,135,"      super(buildMessage(Locale.US, pattern, arguments), rootCause);",3,0,0,0,4,1,3,0,2,5,62,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,82,136,      this.pattern   = pattern;,2,0,0,0,0,1,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,82,137,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,2,1,0,1,6,2,2,1,1,8,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,82,138,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,82,60,            ResourceBundle bundle =,1,0,0,0,0,0,0,1,0,2,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,82,62,            if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {,0,0,0,3,11,1,6,0,0,4,68,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,82,64,                return bundle.getString(s);,0,0,0,1,2,1,3,0,0,4,27,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,82,69,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,82,67,        } catch (MissingResourceException mre) {,1,0,0,1,4,1,0,1,0,5,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,82,73,        return s;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,82,85,"        return (pattern == null) ? """" : new MessageFormat(translate(pattern, locale), locale).format(arguments);        ",2,1,0,1,8,2,5,1,3,8,104,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,82,146,        return pattern;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,82,155,        return arguments.clone();,0,0,0,1,2,1,2,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,82,166,"        return buildMessage(locale, pattern, arguments);",0,0,0,0,2,1,4,0,1,4,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,82,172,        return getMessage(Locale.getDefault());,0,0,0,2,4,1,3,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,82,180,        printStackTrace(System.err);,2,0,0,1,2,0,1,0,1,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,82,181,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,82,190,        synchronized (out) {,1,0,0,1,3,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,82,191,"            PrintWriter pw = new PrintWriter(out, false);",2,0,0,0,2,1,0,2,2,5,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,82,192,            printStackTrace(pw);,0,0,0,1,2,0,2,0,1,4,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,82,194,            pw.flush();,0,0,0,1,2,0,2,0,0,3,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,82,195,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,82,196,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,108,            throw new UnboundedSolutionException();,0,0,0,1,2,2,0,1,1,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,130,        if (tableau.getNumArtificialVariables() == 0) {,0,1,0,2,5,1,2,0,0,5,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,131,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,133,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,3,2,0,2,7,2,4,0,1,7,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,134,"            if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {",0,1,0,0,7,1,6,0,0,4,66,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,135,                return false;,0,0,0,0,0,1,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,138,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,148,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,172,        while (!isPhase1Solved(tableau)) {,0,0,0,2,5,1,2,0,2,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,173,            doIteration(tableau);,0,0,0,1,2,0,2,0,1,4,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,177,"        if (!MathUtils.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0, epsilon)) {",0,0,0,1,9,1,7,0,1,5,81,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,178,            throw new NoFeasibleSolutionException();,0,0,0,1,2,2,0,1,1,5,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,180,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,82,72,        return maxIterations;,1,0,0,0,0,1,0,0,0,2,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,82,77,        return iterations;,1,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,82,87,            throw new OptimizationException(new MaxIterationsExceededException(maxIterations));,1,0,0,2,4,3,0,2,2,6,83,6,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,82,43,"        super(""Maximal number of iterations ({0}) exceeded"", maxIterations);",1,0,0,1,6,1,0,0,2,5,68,3,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,82,44,        this.maxIterations = maxIterations;,2,0,0,0,0,1,0,0,1,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,82,45,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,82,56,"        super(pattern, arguments);",2,0,0,0,2,1,0,0,1,4,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,82,57,        this.maxIterations = maxIterations;,2,0,0,0,0,1,0,0,1,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,82,58,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,82,64,        return maxIterations;,1,0,0,0,0,1,0,0,0,2,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/NoFeasibleSolutionException,82,37,"        super(""no feasible solution"");",0,0,0,1,2,1,0,0,2,4,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/NoFeasibleSolutionException,82,38,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/Relationship,82,57,        switch (this) {,0,0,0,1,3,2,0,0,0,3,15,2,0.0,0,0
