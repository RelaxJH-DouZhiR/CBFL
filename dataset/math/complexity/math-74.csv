dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,other,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,292,          filteredH = maxStep;,2,0,0,0,0,0,0,0,1,2,20,6,1.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,309,                    final double factor = computeStepGrowShrinkFactor(error);,1,0,0,1,2,2,2,0,2,6,57,10,1.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,310,"                    hNew = filterStep(stepSize * factor, forward, false);",3,1,0,0,2,0,2,0,3,5,53,10,1.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,311,                    interpolator.rescale(hNew);,0,0,0,1,2,0,3,0,0,3,27,11,1.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,290,                        final double dt = manager.getEventTime() - stepStart;,2,1,0,1,2,2,2,0,1,7,53,12,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,291,                        if (Math.abs(dt) <= Math.ulp(stepStart)) {,0,1,0,2,7,1,6,0,0,5,42,12,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,296,                            hNew = dt;,2,0,0,0,0,0,0,0,1,2,10,14,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,297,                            interpolator.rescale(hNew);,0,0,0,1,2,0,3,0,0,3,27,15,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,299,                    } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,356,        final double stopTime  = stepStart;,2,0,0,0,0,2,0,0,1,3,35,4,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,357,        stepStart = Double.NaN;,3,0,0,0,0,0,0,0,1,2,23,4,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,358,        stepSize  = Double.NaN;,3,0,0,0,0,0,0,0,1,2,23,4,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,359,        return stopTime;,1,0,0,0,0,1,0,0,0,2,16,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,919,        return walkInRowOrder(visitor);,0,0,0,1,2,1,2,0,1,5,31,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,496,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,497,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,498,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,499,        for (int i = 0; i < rows; ++i) {,4,1,0,1,3,2,0,0,1,6,32,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,500,            final double[] rowI = data[i];,1,0,1,0,4,2,0,0,1,5,30,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,501,            for (int j = 0; j < columns; ++j) {,4,1,0,1,3,2,0,0,1,6,35,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,502,"                visitor.visit(i, j, rowI[j]);",0,0,1,0,4,0,4,0,0,3,29,9,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,505,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,236,"        interpolator.reinitialize(stepStart, stepSize, scaled, nordsieck);",0,0,0,0,2,0,6,0,0,2,66,5,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,237,        interpolator.storeTime(stepStart);,0,0,0,1,2,0,3,0,0,3,34,5,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,239,        double hNew = stepSize;,2,0,0,0,0,1,0,0,0,2,23,5,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,240,        interpolator.rescale(hNew);,0,0,0,1,2,0,3,0,0,3,27,5,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,242,        boolean lastStep = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,243,        while (!lastStep) {,1,0,0,1,3,1,0,0,1,5,19,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,246,            interpolator.shift();,0,0,0,1,2,0,2,0,0,3,21,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,248,            double error = 0;,1,0,0,0,0,1,0,0,0,2,17,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,249,            for (boolean loop = true; loop;) {,2,0,0,1,3,2,0,0,1,5,34,6,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,251,                stepSize = hNew;,2,0,0,0,0,0,0,0,1,2,16,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,254,                final double stepEnd = stepStart + stepSize;,3,1,0,0,0,2,0,0,1,4,44,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,255,                interpolator.setInterpolatedTime(stepEnd);,0,0,0,1,2,0,3,0,0,3,42,9,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,256,"                System.arraycopy(interpolator.getInterpolatedState(), 0, yTmp, 0, y0.length);",2,0,0,1,4,0,5,0,0,4,77,9,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,259,"                computeDerivatives(stepEnd, yTmp, yDot);",0,0,0,0,2,0,4,0,1,3,40,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,262,                final double[] predictedScaled = new double[y0.length];,3,0,0,0,4,4,0,0,1,4,55,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,263,                for (int j = 0; j < y0.length; ++j) {,5,1,0,1,3,2,0,0,1,6,37,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,264,                    predictedScaled[j] = stepSize * yDot[j];,1,1,1,0,4,0,0,0,1,5,40,10,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,266,                final Array2DRowRealMatrix nordsieckTmp = updateHighOrderDerivativesPhase1(nordsieck);,1,0,0,1,2,1,2,1,2,7,86,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,267,"                updateHighOrderDerivativesPhase2(scaled, predictedScaled, nordsieckTmp);",0,0,0,0,2,0,4,0,1,3,72,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,270,"                error = nordsieckTmp.walkInOptimizedOrder(new Corrector(y, predictedScaled, yTmp));",4,0,0,0,4,1,2,1,2,6,83,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,272,                if (error <= 1.0) {,1,1,0,1,3,1,0,0,0,5,19,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,275,"                    computeDerivatives(stepEnd, yTmp, yDot);",0,0,0,0,2,0,4,0,1,3,40,10,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,278,                    final double[] correctedScaled = new double[y0.length];,3,0,0,0,4,4,0,0,1,4,55,10,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,279,                    for (int j = 0; j < y0.length; ++j) {,5,1,0,1,3,2,0,0,1,6,37,10,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,280,                        correctedScaled[j] = stepSize * yDot[j];,1,1,1,0,4,0,0,0,1,5,40,12,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,282,"                    updateHighOrderDerivativesPhase2(predictedScaled, correctedScaled, nordsieckTmp);",0,0,0,0,2,0,4,0,1,3,81,10,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,285,"                    interpolatorTmp.reinitialize(stepEnd, stepSize, correctedScaled, nordsieckTmp);",0,0,0,0,2,0,6,0,0,2,79,11,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,286,                    interpolatorTmp.storeTime(stepStart);,0,0,0,1,2,0,3,0,0,3,37,11,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,287,                    interpolatorTmp.shift();,0,0,0,1,2,0,2,0,0,3,24,11,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,288,                    interpolatorTmp.storeTime(stepEnd);,0,0,0,1,2,0,3,0,0,3,35,11,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,289,                    if (manager.evaluateStep(interpolatorTmp)) {,0,0,0,2,5,1,3,0,0,4,44,11,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,301,                        scaled    = correctedScaled;,2,0,0,0,0,0,0,0,1,2,28,12,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,302,                        nordsieck = nordsieckTmp;,2,0,0,0,0,0,0,0,1,2,25,12,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,303,"                        interpolator.reinitialize(stepEnd, stepSize, scaled, nordsieck);",0,0,0,0,2,0,6,0,0,2,64,13,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,304,                        loop = false;,1,0,0,0,0,0,0,0,2,2,13,12,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,307,                } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,314,            },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,317,            final double nextStep = stepStart + stepSize;,3,1,0,0,0,2,0,0,1,4,45,6,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,318,"            System.arraycopy(yTmp, 0, y, 0, n);",0,0,0,0,2,0,5,0,0,2,35,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,319,            interpolator.storeTime(nextStep);,0,0,0,1,2,0,3,0,0,3,33,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,320,"            manager.stepAccepted(nextStep, y);",0,0,0,0,2,0,4,0,0,2,34,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,321,            lastStep = manager.stop();,1,0,0,1,2,0,2,0,1,5,26,6,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,324,            for (StepHandler handler : stepHandlers) {,2,0,0,1,3,1,0,1,0,5,42,6,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,325,                interpolator.setInterpolatedTime(nextStep);,0,0,0,1,2,0,3,0,0,3,43,9,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,326,"                handler.handleStep(interpolator, lastStep);",0,0,0,0,2,0,4,0,0,2,43,9,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,327,            },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,328,            stepStart = nextStep;,2,0,0,0,0,0,0,0,1,2,21,6,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,330,"            if (!lastStep && manager.reset(stepStart, y)) {",1,1,0,0,5,1,4,0,1,6,47,6,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,339,            if (! lastStep) {,1,0,0,1,3,1,0,0,1,5,17,6,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,343,"                stepSize = filterStep(stepSize, forward, true);",1,0,0,0,2,0,3,0,3,4,47,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,346,                final double  factor     = computeStepGrowShrinkFactor(error);,1,0,0,1,2,2,2,0,2,6,62,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,347,                final double  scaledH    = stepSize * factor;,3,1,0,0,0,2,0,0,1,4,45,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,348,                final double  nextT      = stepStart + scaledH;,3,1,0,0,0,2,0,0,1,4,47,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,349,                final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);,6,2,0,1,4,2,0,0,1,6,65,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,350,"                hNew = filterStep(scaledH, forward, nextIsLast);",1,0,0,0,2,0,4,0,2,4,48,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,351,                interpolator.rescale(hNew);,0,0,0,1,2,0,3,0,0,3,27,9,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,354,        },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,390,"        public Corrector(final double[] previous, final double[] scaled, final double[] state) {",4,0,0,0,9,7,0,0,4,4,88,3,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,391,            this.previous = previous;,2,0,0,0,0,1,0,0,1,3,25,5,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,392,            this.scaled   = scaled;,2,0,0,0,0,1,0,0,1,3,23,5,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,393,            this.after    = state;,2,0,0,0,0,1,0,0,1,3,22,5,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,394,            this.before   = state.clone();,1,0,0,1,2,1,2,0,1,6,30,5,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,395,        },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,400,"            Arrays.fill(after, 0.0);",0,0,0,0,2,0,3,0,0,2,24,6,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,401,        },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,406,            if ((row & 0x1) == 0) {,1,2,0,2,5,1,0,0,0,5,23,5,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,407,                after[column] -= value;,1,0,1,0,2,0,0,0,1,4,23,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,409,                after[column] += value;,1,0,1,0,2,0,0,0,1,4,23,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,411,        },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,424,            double error = 0;,1,0,0,0,0,1,0,0,0,2,17,6,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,425,            for (int i = 0; i < after.length; ++i) {,5,1,0,1,3,2,0,0,1,6,40,5,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,426,                after[i] += previous[i] + scaled[i];,0,1,1,0,6,0,0,0,1,4,36,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,427,"                final double yScale = Math.max(Math.abs(previous[i]), Math.abs(after[i]));",1,0,1,1,10,2,6,0,1,7,74,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,428,                final double tol = (vecAbsoluteTolerance == null) ?,2,1,0,1,2,2,0,0,1,6,51,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,431,                final double ratio  = (after[i] - before[i]) / tol;,2,2,1,1,6,2,0,0,1,7,51,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,432,                error += ratio * ratio;,3,1,0,0,0,0,0,0,1,3,23,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,435,            return Math.sqrt(error / after.length);,3,1,0,1,2,1,2,0,0,6,39,6,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,176,"        super(""Adams-Moulton"", nSteps, nSteps + 1, minStep, maxStep,",4,1,0,0,1,1,0,0,2,5,60,3,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,178,    },0,0,0,0,1,0,0,0,0,1,1,2,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,210,        setEquations(equations);,0,0,0,1,2,0,2,0,1,4,24,4,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,211,        resetEvaluations();,0,0,0,1,2,0,1,0,1,4,19,4,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,212,        final boolean forward = t > t0;,3,1,0,0,0,2,0,0,1,4,31,4,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,215,        if (y != y0) {,2,1,0,1,3,1,0,0,0,5,14,4,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,216,"            System.arraycopy(y0, 0, y, 0, n);",0,0,0,0,2,0,5,0,0,2,33,7,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,218,        final double[] yDot = new double[y0.length];,3,0,0,0,4,4,0,0,1,4,44,4,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,219,        final double[] yTmp = new double[y0.length];,3,0,0,0,4,4,0,0,1,4,44,4,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,222,        final NordsieckStepInterpolator interpolator = new NordsieckStepInterpolator();,1,0,0,1,2,2,0,2,2,6,79,4,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,223,"        interpolator.reinitialize(y, forward);",0,0,0,0,2,0,4,0,0,2,38,5,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,224,        final NordsieckStepInterpolator interpolatorTmp = new NordsieckStepInterpolator();,1,0,0,1,2,2,0,2,2,6,82,4,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,225,"        interpolatorTmp.reinitialize(yTmp, forward);",0,0,0,0,2,0,4,0,0,2,44,5,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,228,        for (StepHandler handler : stepHandlers) {,2,0,0,1,3,1,0,1,0,5,42,4,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,229,            handler.reset();,0,0,0,1,2,0,2,0,0,3,16,7,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,230,        },0,0,0,0,1,0,0,0,0,1,1,2,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,231,"        CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);",1,0,0,0,2,0,4,1,1,5,80,4,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,235,"        start(t0, y, t);",0,0,0,0,2,0,4,0,1,3,16,4,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,208,        final int n = y0.length;,3,0,0,0,0,2,0,0,1,3,24,4,0.2,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,209,"        sanityChecks(equations, t0, y0, t, y);",0,0,0,0,2,0,6,0,1,3,38,4,0.2,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,292,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0,0,0,0,2,1,3,0,0,3,51,5,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,294,        final int nRows = this.getRowDimension();,1,0,0,1,2,3,1,0,1,6,41,4,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,295,        final int nCols = m.getColumnDimension();,1,0,0,1,2,2,2,0,1,6,41,4,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,296,        final int nSum = this.getColumnDimension();,1,0,0,1,2,3,1,0,1,6,43,4,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,297,        final double[][] outData = new double[nRows][nCols];,1,0,1,0,8,4,0,0,1,5,52,4,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,298,        for (int row = 0; row < nRows; row++) {,4,1,0,1,3,2,0,0,1,6,39,4,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,299,            final double[] dataRow    = data[row];,1,0,1,0,4,2,0,0,1,5,38,6,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,300,            final double[] outDataRow = outData[row];,1,0,1,0,4,2,0,0,1,5,41,6,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,301,            for (int col = 0; col < nCols; col++) {,4,1,0,1,3,2,0,0,1,6,39,6,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,302,                double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,9,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,303,                for (int i = 0; i < nSum; i++) {,4,1,0,1,3,2,0,0,1,6,32,8,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,304,                    sum += dataRow[i] * m.data[i][col];,3,1,1,0,6,0,0,0,1,5,35,10,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,306,                outDataRow[col] = sum;,1,0,1,0,2,0,0,0,1,4,22,8,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,310,"        return new Array2DRowRealMatrix(outData, false);",1,0,0,0,2,2,0,1,2,5,48,4,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,328,        return data;,1,0,0,0,0,1,0,0,0,2,12,4,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,420,        return (data == null) ? 0 : data.length;,3,1,0,1,2,1,0,0,0,5,40,5,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,426,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,2,3,1,2,10,1,0,0,0,6,66,5,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,103,                    sum = sum.subtract(luRow[i].multiply(lu[i][col]));,1,0,1,2,10,0,3,0,1,6,50,10,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,650,        if (left.getColumnDimension() != right.getRowDimension()) {,0,1,0,2,7,1,4,0,0,5,59,4,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,656,    },0,0,0,0,1,0,0,0,0,1,1,2,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,153,        return evaluations;,1,0,0,0,0,1,0,0,0,2,19,4,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,127,        this.referenceTime = time;,2,0,0,0,0,1,0,0,1,3,26,4,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,128,        this.scalingH      = stepSize;,2,0,0,0,0,1,0,0,1,3,30,4,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,129,        this.scaled        = scaledDerivative;,2,0,0,0,0,1,0,0,1,3,38,4,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,130,        this.nordsieck     = nordsieckVector;,2,0,0,0,0,1,0,0,1,3,37,4,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,133,        setInterpolatedTime(getInterpolatedTime());,0,0,0,2,4,0,2,0,2,4,43,4,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,135,    },0,0,0,0,1,0,0,0,0,1,1,2,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,144,        final double ratio = stepSize / scalingH;,3,1,0,0,0,2,0,0,1,4,41,4,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,145,        for (int i = 0; i < scaled.length; ++i) {,5,1,0,1,3,2,0,0,1,6,41,4,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,146,            scaled[i] *= ratio;,1,0,1,0,2,0,0,0,1,4,19,6,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,149,        final double[][] nData = nordsieck.getDataRef();,1,0,0,1,6,2,2,0,1,6,48,4,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,150,        double power = ratio;,2,0,0,0,0,1,0,0,0,2,21,5,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,151,        for (int i = 0; i < nData.length; ++i) {,5,1,0,1,3,2,0,0,1,6,40,4,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,152,            power *= ratio;,2,0,0,0,0,0,0,0,1,2,15,6,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,153,            final double[] nDataI = nData[i];,1,0,1,0,4,2,0,0,1,5,33,6,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,154,            for (int j = 0; j < nDataI.length; ++j) {,5,1,0,1,3,2,0,0,1,6,41,6,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,155,                nDataI[j] *= power;,1,0,1,0,2,0,0,0,1,4,19,8,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,159,        scalingH = stepSize;,2,0,0,0,0,0,0,0,1,2,20,4,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,161,    },0,0,0,0,1,0,0,0,0,1,1,2,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,188,        final double x = interpolatedTime - referenceTime;,3,1,0,0,0,2,0,0,1,4,50,4,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,189,        final double normalizedAbscissa = x / scalingH;,3,1,0,0,0,2,0,0,1,4,47,4,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,191,"        Arrays.fill(stateVariation, 0.0);",0,0,0,0,2,0,3,0,0,2,33,5,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,192,"        Arrays.fill(interpolatedDerivatives, 0.0);",0,0,0,0,2,0,3,0,0,2,42,5,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,196,        final double[][] nData = nordsieck.getDataRef();,1,0,0,1,6,2,2,0,1,6,48,4,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,197,        for (int i = nData.length - 1; i >= 0; --i) {,5,2,0,1,3,2,0,0,1,6,45,4,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,198,            final int order = i + 2;,2,1,0,0,0,2,0,0,1,4,24,6,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,199,            final double[] nDataI = nData[i];,1,0,1,0,4,2,0,0,1,5,33,6,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,200,"            final double power = Math.pow(normalizedAbscissa, order);",1,0,0,0,2,2,4,0,1,5,57,6,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,201,            for (int j = 0; j < nDataI.length; ++j) {,5,1,0,1,3,2,0,0,1,6,41,6,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,202,                final double d = nDataI[j] * power;,2,1,1,0,2,2,0,0,1,6,35,8,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,203,                stateVariation[j]          += d;,1,0,1,0,2,0,0,0,1,4,32,8,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,204,                interpolatedDerivatives[j] += order * d;,2,1,1,0,2,0,0,0,1,5,40,8,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,208,        for (int j = 0; j < currentState.length; ++j) {,5,1,0,1,3,2,0,0,1,6,47,4,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,209,            stateVariation[j] += scaled[j] * normalizedAbscissa;,1,1,1,0,4,0,0,0,1,5,52,6,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,210,            interpolatedState[j] = currentState[j] + stateVariation[j];,0,1,1,0,6,0,0,0,1,4,59,6,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,211,            interpolatedDerivatives[j] =,0,0,1,0,2,0,0,0,1,3,28,6,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,215,    },0,0,0,0,1,0,0,0,0,1,1,2,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,225,        } catch (DerivativeException de) {,1,0,0,1,4,1,0,1,0,5,34,6,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,226,            if (!(de instanceof InitializationCompletedMarkerException)) {,1,0,0,2,5,2,0,1,1,6,62,7,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,233,        starter.clearStepHandlers();,0,0,0,1,2,0,2,0,0,3,28,5,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,235,    },0,0,0,0,1,0,0,0,0,1,1,2,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,293,"        return Math.min(maxGrowth, Math.max(minReduction, safety * Math.pow(error, exp)));",1,1,0,0,6,1,10,0,0,5,82,5,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,59,public abstract class MultistepIntegrator extends AdaptiveStepsizeIntegrator {,1,0,0,0,1,4,0,1,2,5,78,1,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,324,            final double prev = interpolator.getPreviousTime();,1,0,0,1,2,2,2,0,1,6,51,5,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,325,            final double curr = interpolator.getCurrentTime();,1,0,0,1,2,2,2,0,1,6,50,5,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,326,            stepStart = prev;,2,0,0,0,0,0,0,0,1,2,17,5,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,327,            stepSize  = (curr - prev) / (nSteps + 1);,4,3,0,1,4,0,0,0,1,5,41,5,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,330,            interpolator.setInterpolatedTime(prev);,0,0,0,1,2,0,3,0,0,3,39,6,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,331,            scaled = interpolator.getInterpolatedDerivatives().clone();,1,0,0,1,4,0,3,0,1,5,59,5,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,332,            for (int j = 0; j < n; ++j) {,4,1,0,1,3,2,0,0,1,6,29,5,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,333,                scaled[j] *= stepSize;,1,0,1,0,2,0,0,0,1,4,22,7,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,337,            final double[][] multistep = new double[nSteps][];,1,0,1,0,8,4,0,0,1,5,50,5,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,338,            for (int i = 1; i <= nSteps; ++i) {,4,1,0,1,3,2,0,0,1,6,35,5,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,339,                interpolator.setInterpolatedTime(prev + stepSize * i);,3,2,0,1,2,0,2,0,0,5,54,8,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,340,                final double[] msI = interpolator.getInterpolatedDerivatives().clone();,1,0,0,1,6,2,3,0,1,6,71,7,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,341,                for (int j = 0; j < n; ++j) {,4,1,0,1,3,2,0,0,1,6,29,7,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,342,                    msI[j] *= stepSize;,1,0,1,0,2,0,0,0,1,4,19,9,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,344,                multistep[i - 1] = msI;,2,1,1,0,2,0,0,0,1,5,23,7,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,346,"            nordsieck = initializeHighOrderDerivatives(scaled, multistep);",1,0,0,0,2,0,3,0,2,4,62,5,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,349,            throw new InitializationCompletedMarkerException();,0,0,0,1,2,2,0,1,1,5,51,5,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,374,            super((Throwable) null);,0,0,0,2,4,1,0,1,1,5,24,4,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,375,        },0,0,0,0,1,0,0,0,0,1,1,2,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,262,        for (int i = 0; i < multistep.length; ++i) {,5,1,0,1,3,2,0,0,1,6,44,4,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,263,            final double[] msI = multistep[i];,1,0,1,0,4,2,0,0,1,5,34,6,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,264,            for (int j = 0; j < first.length; ++j) {,5,1,0,1,3,2,0,0,1,6,40,6,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,265,                msI[j] -= first[j];,0,0,1,0,4,0,0,0,1,3,19,8,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,268,"        return initialization.multiply(new Array2DRowRealMatrix(multistep, false));",1,0,0,0,4,2,2,1,2,6,75,5,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,283,        return update.multiply(highOrder);,0,0,0,1,2,1,3,0,0,4,34,5,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,302,        final double[][] data = highOrder.getDataRef();,1,0,0,1,6,2,2,0,1,6,47,4,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,303,        for (int i = 0; i < data.length; ++i) {,5,1,0,1,3,2,0,0,1,6,39,4,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,304,            final double[] dataI = data[i];,1,0,1,0,4,2,0,0,1,5,31,6,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,305,            final double c1I = c1[i];,1,0,1,0,2,2,0,0,1,5,25,6,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,306,            for (int j = 0; j < dataI.length; ++j) {,5,1,0,1,3,2,0,0,1,6,40,6,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,307,                dataI[j] += c1I * (start[j] - end[j]);,1,2,1,1,8,0,0,0,1,6,38,8,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,310,    },0,0,0,0,1,0,0,0,0,1,1,2,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsIntegrator,74,94,"        return transformer.initializeHighOrderDerivatives(first, multistep);",0,0,0,0,2,1,4,0,0,3,68,5,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsIntegrator,74,109,        return transformer.updateHighOrderDerivativesPhase1(highOrder);,0,0,0,1,2,1,3,0,0,4,63,5,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsIntegrator,74,128,"        transformer.updateHighOrderDerivativesPhase2(start, end, highOrder);",0,0,0,0,2,0,5,0,0,2,68,5,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsIntegrator,74,129,    },0,0,0,0,1,0,0,0,0,1,1,2,0.11111,0,0
defect4j,math,org/apache/commons/math/ode/DerivativeException,74,48,    super(cause);,1,0,0,1,2,1,0,0,1,5,13,3,0.1,0,0
defect4j,math,org/apache/commons/math/ode/DerivativeException,74,49,  },0,0,0,0,1,0,0,0,0,1,1,2,0.1,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,97,        stepHandlers.clear();,0,0,0,1,2,0,2,0,0,3,21,5,0.09091,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,98,    },0,0,0,0,1,0,0,0,0,1,1,2,0.09091,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,72,    public NordsieckStepInterpolator() {,1,0,0,1,3,1,0,0,1,5,36,2,0.09091,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,73,    },0,0,0,0,1,0,0,0,0,1,1,2,0.09091,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,110,"        super.reinitialize(y, forward);",3,0,0,0,2,1,0,0,0,3,31,5,0.09091,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,111,        stateVariation = new double[y.length];,3,0,0,0,2,2,0,0,1,4,38,4,0.09091,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,112,    },0,0,0,0,1,0,0,0,0,1,1,2,0.09091,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,112,"        super(name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);",5,0,0,0,2,1,0,0,1,4,76,3,0.09091,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,114,        if (nSteps <= 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.09091,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,120,"        starter = new DormandPrince853Integrator(minStep, maxStep,",3,0,0,0,1,1,0,1,2,5,58,4,0.09091,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,123,        this.nSteps = nSteps;,2,0,0,0,0,1,0,0,1,3,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,125,        exp = -1.0 / order;,2,1,0,0,0,0,0,0,2,3,19,4,0.09091,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,128,        setSafety(0.9);,0,0,0,1,2,0,1,0,1,4,15,4,0.09091,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,129,        setMinReduction(0.2);,0,0,0,1,2,0,1,0,1,4,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,130,"        setMaxGrowth(Math.pow(2.0, -exp));",1,0,0,0,4,0,3,0,2,4,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,132,    },0,0,0,0,1,0,0,0,0,1,1,2,0.09091,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,215,        starter.clearEventHandlers();,0,0,0,1,2,0,2,0,0,3,29,5,0.09091,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,216,        starter.clearStepHandlers();,0,0,0,1,2,0,2,0,0,3,28,5,0.09091,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,219,        starter.addStepHandler(new NordsieckInitializer(y0.length));,2,0,0,2,4,1,2,1,1,7,60,5,0.09091,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,223,"            starter.integrate(new CountingDifferentialEquations(y0.length),",2,0,0,1,3,1,2,1,1,7,63,7,0.09091,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,316,        public NordsieckInitializer(final int n) {,2,0,0,1,3,3,0,0,2,5,42,3,0.09091,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,317,            this.n = n;,2,0,0,0,0,1,0,0,1,3,11,5,0.09091,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,318,        },0,0,0,0,1,0,0,0,0,1,1,2,0.09091,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,355,            return true;,0,0,0,0,0,1,0,0,1,2,12,5,0.09091,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,361,        },0,0,0,0,1,0,0,0,0,1,1,2,0.09091,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,388,        public CountingDifferentialEquations(final int dimension) {,2,0,0,1,3,3,0,0,2,5,59,3,0.09091,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,389,            this.dimension = dimension;,2,0,0,0,0,1,0,0,1,3,27,5,0.09091,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,390,        },0,0,0,0,1,0,0,0,0,1,1,2,0.09091,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,395,"            MultistepIntegrator.this.computeDerivatives(t, y, dot);",1,0,0,0,2,1,4,0,0,4,55,6,0.09091,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,396,        },0,0,0,0,1,0,0,0,0,1,1,2,0.09091,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,400,            return dimension;,1,0,0,0,0,1,0,0,0,2,17,5,0.09091,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsIntegrator,74,55,"        super(name, nSteps, order, minStep, maxStep,",5,0,0,0,1,1,0,0,1,4,44,3,0.09091,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsIntegrator,74,57,        transformer = AdamsNordsieckTransformer.getInstance(nSteps);,1,0,0,1,2,0,3,0,1,5,60,4,0.09091,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsIntegrator,74,58,    },0,0,0,0,1,0,0,0,0,1,1,2,0.09091,0,0
defect4j,math,org/apache/commons/math/MathException,74,80,        super(rootCause);,1,0,0,1,2,1,0,0,1,5,17,3,0.08333,0,0
defect4j,math,org/apache/commons/math/MathException,74,81,        this.pattern   = getMessage();,1,0,0,1,2,1,1,0,2,6,30,4,0.08333,0,0
defect4j,math,org/apache/commons/math/MathException,74,82,        this.arguments = new Object[0];,1,0,0,0,2,2,0,1,1,5,31,4,0.08333,0,0
defect4j,math,org/apache/commons/math/MathException,74,83,    },0,0,0,0,1,0,0,0,0,1,1,2,0.08333,0,0
defect4j,math,org/apache/commons/math/MathException,74,153,"        return (pattern == null) ? """" : new MessageFormat(translate(pattern, locale), locale).format(arguments);",2,1,0,1,8,2,5,1,3,8,104,5,0.08333,0,0
defect4j,math,org/apache/commons/math/MathException,74,159,        return getMessage(Locale.US);,2,0,0,1,2,1,1,0,1,6,29,4,0.08333,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,288,          final double oneMinusThetaH = currentTime - interpolatedTime;,3,1,0,0,0,2,0,0,1,4,61,6,0.08333,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,289,          final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;,5,3,0,1,4,2,0,0,1,6,61,6,0.08333,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,290,"          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);",0,0,0,0,2,0,3,0,1,3,62,6,0.08333,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,291,          dirtyState = false;,1,0,0,0,0,0,0,0,2,2,19,6,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor,74,42,    public DefaultFieldMatrixChangingVisitor(final T zero) {,2,0,0,1,3,2,0,1,2,6,56,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor,74,43,        this.zero = zero;,2,0,0,0,0,1,0,0,1,3,17,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor,74,44,    },0,0,0,0,1,0,0,0,0,1,1,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor,74,49,    },0,0,0,0,1,0,0,0,0,1,1,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor,74,59,        return zero;,1,0,0,0,0,1,0,0,0,2,12,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,721,            super(BigFraction.ZERO);,2,0,0,1,2,1,0,0,1,5,24,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,722,        },0,0,0,0,1,0,0,0,0,1,1,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,728,            data = new double[rows][columns];,1,0,1,0,4,2,0,0,1,5,33,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,729,        },0,0,0,0,1,0,0,0,0,1,1,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,734,            data[row][column] = value.doubleValue();,0,0,1,1,6,0,2,0,1,5,40,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,735,        },0,0,0,0,1,0,0,0,0,1,1,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,741,"            return new Array2DRowRealMatrix(data, false);",1,0,0,0,2,2,0,1,2,5,45,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,714,    private static class BigFractionMatrixConverter extends DefaultFieldMatrixPreservingVisitor<BigFraction> {,1,0,0,0,1,4,0,2,2,5,106,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor,74,42,    public DefaultFieldMatrixPreservingVisitor(final T zero) {,2,0,0,1,3,2,0,1,2,6,58,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor,74,43,        this.zero = zero;,2,0,0,0,0,1,0,0,1,3,17,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor,74,44,    },0,0,0,0,1,0,0,0,0,1,1,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor,74,58,        return zero;,1,0,0,0,0,1,0,0,0,2,12,4,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,124,"    public BigFraction(BigInteger num, BigInteger den) {",3,0,0,0,3,1,0,2,1,5,52,2,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,125,        if (num == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,128,        if (den == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,131,        if (BigInteger.ZERO.equals(den)) {,2,0,0,2,5,1,2,0,0,5,34,5,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,134,        if (BigInteger.ZERO.equals(num)) {,2,0,0,2,5,1,2,0,0,5,34,5,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,135,            numerator   = BigInteger.ZERO;,3,0,0,0,0,0,0,0,1,2,30,6,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,136,            denominator = BigInteger.ONE;,3,0,0,0,0,0,0,0,1,2,29,6,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,140,            final BigInteger gcd = num.gcd(den);,1,0,0,1,2,1,3,1,1,7,36,6,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,141,            if (BigInteger.ONE.compareTo(gcd) < 0) {,2,1,0,2,5,1,2,0,0,6,40,6,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,142,                num = num.divide(gcd);,1,0,0,1,2,0,3,0,1,5,22,8,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,143,                den = den.divide(gcd);,1,0,0,1,2,0,3,0,1,5,22,8,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,147,            if (BigInteger.ZERO.compareTo(den) > 0) {,2,1,0,2,5,1,2,0,0,6,41,6,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,148,                num = num.negate();,1,0,0,1,2,0,2,0,1,5,19,8,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,149,                den = den.negate();,1,0,0,1,2,0,2,0,1,5,19,8,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,153,            numerator   = num;,2,0,0,0,0,0,0,0,1,2,18,6,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,154,            denominator = den;,2,0,0,0,0,0,0,0,1,2,18,6,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,157,    },0,0,0,0,1,0,0,0,0,1,1,2,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,375,"        this(BigInteger.valueOf(num), BigInteger.ONE);",2,0,0,1,4,1,3,0,0,5,46,4,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,376,    },0,0,0,0,1,0,0,0,0,1,1,2,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,390,"        this(BigInteger.valueOf(num), BigInteger.valueOf(den));",0,0,0,1,6,1,6,0,0,4,55,5,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,391,    },0,0,0,0,1,0,0,0,0,1,1,2,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,39,    public static final BigFraction TWO = new BigFraction(2);,1,0,0,1,2,4,0,2,4,6,57,2,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,42,    public static final BigFraction ONE = new BigFraction(1);,1,0,0,1,2,4,0,2,4,6,57,2,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,45,    public static final BigFraction ZERO = new BigFraction(0);,1,0,0,1,2,4,0,2,4,6,58,2,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,48,    public static final BigFraction MINUS_ONE = new BigFraction(-1);,1,0,0,1,2,4,0,2,5,6,64,2,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,51,"    public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);",1,0,0,0,2,4,0,2,4,5,68,2,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,54,"    public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);",1,0,0,0,2,4,0,2,4,5,66,2,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,57,"    public static final BigFraction ONE_HALF = new BigFraction(1, 2);",1,0,0,0,2,4,0,2,4,5,65,2,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,60,"    public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);",1,0,0,0,2,4,0,2,4,5,68,2,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,63,"    public static final BigFraction ONE_THIRD = new BigFraction(1, 3);",1,0,0,0,2,4,0,2,4,5,66,2,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,66,"    public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);",1,0,0,0,2,4,0,2,4,5,69,2,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,69,"    public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);",1,0,0,0,2,4,0,2,4,5,71,2,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,72,"    public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);",1,0,0,0,2,4,0,2,4,5,67,2,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,75,"    public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);",1,0,0,0,2,4,0,2,4,5,69,2,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,78,"    public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);",1,0,0,0,2,4,0,2,4,5,67,2,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,88,    private static final BigInteger ONE_HUNDRED_DOUBLE = BigInteger.valueOf(100);,1,0,0,1,2,3,2,1,3,7,77,2,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,674,        if (BigInteger.ZERO.equals(fraction.numerator)) {,4,0,0,2,5,1,1,0,0,5,49,5,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,678,        return multiply(fraction.reciprocal());,0,0,0,2,4,1,3,0,1,5,39,4,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,692,        return numerator.doubleValue() / denominator.doubleValue();,0,1,0,1,4,1,4,0,0,5,59,4,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,712,        boolean ret = false;,1,0,0,0,0,1,0,0,1,3,20,5,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,714,        if (this == other) {,1,1,0,1,3,2,0,0,0,5,20,4,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,715,            ret = true;,1,0,0,0,0,0,0,0,2,2,11,6,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,716,        } else if (other instanceof BigFraction) {,1,0,0,1,4,3,0,1,0,5,42,6,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,717,            BigFraction rhs = ((BigFraction) other).reduce();,2,0,0,2,6,0,1,2,0,5,49,7,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,718,            BigFraction thisOne = this.reduce();,1,0,0,1,2,1,1,1,0,6,36,7,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,719,            ret = thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator);,9,1,0,1,4,0,2,0,1,6,93,7,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,722,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,791,        return numerator.intValue();,0,0,0,1,2,1,2,0,0,4,28,5,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,903,        BigFraction ret = ZERO;,2,0,0,0,0,0,0,1,0,2,23,4,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,905,        if (getNumeratorAsInt() != 0 && fraction.getNumeratorAsInt() != 0) {,0,3,0,2,7,1,3,0,1,6,68,4,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,906,"            ret = new BigFraction(numerator.multiply(fraction.numerator), denominator.multiply(fraction.denominator));",5,0,0,1,6,1,4,1,2,7,106,6,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,909,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,921,"        return new BigFraction(numerator.negate(), denominator);",1,0,0,1,4,2,2,1,1,7,56,4,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,1016,"        return new BigFraction(denominator, numerator);",2,0,0,0,2,2,0,1,1,5,47,4,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,1028,        final BigInteger gcd = numerator.gcd(denominator);,1,0,0,1,2,1,3,1,1,7,50,4,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,1029,"        return new BigFraction(numerator.divide(gcd), denominator.divide(gcd));",0,0,0,1,6,2,6,1,1,6,71,4,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,1092,        if (ZERO.equals(fraction)) {,0,0,0,2,5,1,3,0,0,4,28,5,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,1093,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,1096,        BigInteger num = null;,1,0,0,0,0,0,0,1,0,2,22,4,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,1097,        BigInteger den = null;,1,0,0,0,0,0,0,1,0,2,22,4,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,1098,        if (denominator.equals(fraction.denominator)) {,2,0,0,2,5,1,2,0,0,5,47,5,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,1099,            num = numerator.subtract(fraction.numerator);,3,0,0,1,2,0,2,0,1,5,45,6,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,1100,            den = denominator;,2,0,0,0,0,0,0,0,1,2,18,6,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,1102,            num = (numerator.multiply(fraction.denominator)).subtract((fraction.numerator).multiply(denominator));,5,0,0,2,10,0,5,0,1,5,102,6,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,1103,            den = denominator.multiply(fraction.denominator);,3,0,0,1,2,0,2,0,1,5,49,6,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,1105,"        return new BigFraction(num, den);",2,0,0,0,2,2,0,1,1,5,33,4,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,1133,        return BigFractionField.getInstance();,0,0,0,1,2,1,2,0,0,4,38,5,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,34,public class BigFraction,1,0,0,0,0,2,0,0,1,3,24,1,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,52,    protected AbstractFieldMatrix(final Field<T> field) {,2,0,0,1,3,2,0,2,2,6,53,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,53,        this.field = field;,2,0,0,0,0,1,0,0,1,3,19,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,54,    },0,0,0,0,1,0,0,0,0,1,1,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,66,        throws IllegalArgumentException {,1,0,0,0,1,1,0,0,0,3,33,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,67,        if (rowDimension <= 0 ) {,1,1,0,1,3,1,0,0,0,5,25,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,72,        if (columnDimension <= 0) {,1,1,0,1,3,1,0,0,0,5,27,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,77,        this.field = field;,2,0,0,0,0,1,0,0,1,3,19,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,78,    },0,0,0,0,1,0,0,0,0,1,1,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,89,        if (d.length == 0) {,2,1,0,1,3,1,0,0,0,5,20,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,92,        if (d[0].length == 0) {,1,1,1,1,5,1,0,0,0,6,23,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,95,        return d[0][0].getField();,0,0,1,1,6,1,1,0,0,5,26,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,128,        if (columns < 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,132,        T[][] array =,1,0,0,0,4,0,0,1,0,3,13,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,134,        for (int i = 0; i < array.length; ++i) {,5,1,0,1,3,2,0,0,1,6,40,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,135,"            Arrays.fill(array[i], field.getZero());",0,0,1,1,6,0,4,0,0,4,39,7,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,137,        return array;,1,0,0,0,0,1,0,0,0,2,13,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,159,        return field;,1,0,0,0,0,1,0,0,0,2,13,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,647,        return getColumnDimension() == getRowDimension();,0,1,0,1,4,1,2,0,2,6,49,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,908,        return walkInRowOrder(visitor);,0,0,0,1,2,1,2,0,1,5,31,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,914,        return walkInRowOrder(visitor);,0,0,0,1,2,1,2,0,1,5,31,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,43,    protected AbstractRealMatrix() {,1,0,0,1,3,1,0,0,1,5,32,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,44,        lu = null;,1,0,0,0,0,0,0,0,1,2,10,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,45,    },0,0,0,0,1,0,0,0,0,1,1,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,134,"        throws IllegalArgumentException, NullPointerException {",2,0,0,0,1,1,0,0,0,3,55,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,135,        if (copyArray) {,1,0,0,1,3,1,0,0,0,4,16,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,138,            if (d == null) {,1,1,0,1,3,1,0,0,0,5,16,6,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,141,            final int nRows = d.length;,3,0,0,0,0,2,0,0,1,3,27,6,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,142,            if (nRows == 0) {,1,1,0,1,3,1,0,0,0,5,17,6,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,146,            final int nCols = d[0].length;,2,0,1,0,2,2,0,0,1,5,30,6,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,147,            if (nCols == 0) {,1,1,0,1,3,1,0,0,0,5,17,6,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,151,            for (int r = 1; r < nRows; r++) {,4,1,0,1,3,2,0,0,1,6,33,6,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,152,                if (d[r].length != nCols) {,2,1,1,1,5,1,0,0,0,6,27,8,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,157,            data = d;,2,0,0,0,0,0,0,0,1,2,9,6,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,159,    },0,0,0,0,1,0,0,0,0,1,1,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,72,        throws NonSquareMatrixException {,1,0,0,0,1,1,0,0,0,3,33,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,74,        if (!matrix.isSquare()) {,0,0,0,2,5,1,2,0,1,5,25,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,78,        final int m = matrix.getColumnDimension();,1,0,0,1,2,2,2,0,1,6,42,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,79,        field = matrix.getField();,1,0,0,1,2,0,2,0,1,5,26,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,80,        lu = matrix.getData();,1,0,0,1,2,0,2,0,1,5,22,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,81,        pivot = new int[m];,1,0,1,0,2,2,0,0,1,5,19,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,82,        cachedL = null;,1,0,0,0,0,0,0,0,1,2,15,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,83,        cachedU = null;,1,0,0,0,0,0,0,0,1,2,15,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,84,        cachedP = null;,1,0,0,0,0,0,0,0,1,2,15,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,87,        for (int row = 0; row < m; row++) {,4,1,0,1,3,2,0,0,1,6,35,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,88,            pivot[row] = row;,1,0,1,0,2,0,0,0,1,4,17,6,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,90,        even     = true;,1,0,0,0,0,0,0,0,2,2,16,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,91,        singular = false;,1,0,0,0,0,0,0,0,2,2,17,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,94,        for (int col = 0; col < m; col++) {,4,1,0,1,3,2,0,0,1,6,35,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,96,            T sum = field.getZero();,1,0,0,1,2,0,2,1,0,5,24,6,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,99,            for (int row = 0; row < col; row++) {,4,1,0,1,3,2,0,0,1,6,37,6,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,100,                final T[] luRow = lu[row];,1,0,1,0,4,1,0,1,1,6,26,8,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,101,                sum = luRow[col];,1,0,1,0,2,0,0,0,1,4,17,8,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,102,                for (int i = 0; i < row; i++) {,4,1,0,1,3,2,0,0,1,6,31,8,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,105,                luRow[col] = sum;,1,0,1,0,2,0,0,0,1,4,17,8,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,109,            int nonZero = col; // permutation row,2,0,0,0,0,1,0,0,0,2,37,7,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,110,            for (int row = col; row < m; row++) {,5,1,0,1,3,2,0,0,1,6,37,6,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,111,                final T[] luRow = lu[row];,1,0,1,0,4,1,0,1,1,6,26,8,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,112,                sum = luRow[col];,1,0,1,0,2,0,0,0,1,4,17,8,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,113,                for (int i = 0; i < col; i++) {,4,1,0,1,3,2,0,0,1,6,31,8,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,114,                    sum = sum.subtract(luRow[i].multiply(lu[i][col]));,1,0,1,2,10,0,3,0,1,6,50,10,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,116,                luRow[col] = sum;,1,0,1,0,2,0,0,0,1,4,17,8,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,118,                if (lu[nonZero][col].equals(field.getZero())) {,0,0,1,3,11,1,3,0,0,5,47,9,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,125,            if (nonZero >= m) {,2,1,0,1,3,1,0,0,0,5,19,6,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,131,            if (nonZero != col) {,2,1,0,1,3,1,0,0,0,5,21,6,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,145,            final T luDiag = lu[col][col];,1,0,1,0,4,1,0,1,1,6,30,6,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,146,            for (int row = col + 1; row < m; row++) {,5,2,0,1,3,2,0,0,1,6,41,6,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,147,                final T[] luRow = lu[row];,1,0,1,0,4,1,0,1,1,6,26,8,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,148,                luRow[col] = luRow[col].divide(luDiag);,0,0,1,1,6,0,2,0,1,5,39,8,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,152,    },0,0,0,0,1,0,0,0,0,1,1,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,218,"        return new Solver<T>(field, lu, pivot, singular);",4,0,0,0,2,2,0,2,1,5,49,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,247,"                       final int[] pivot, final boolean singular) {",2,0,0,0,4,4,0,0,2,4,44,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,248,            this.field    = field;,2,0,0,0,0,1,0,0,1,3,22,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,249,            this.lu       = lu;,2,0,0,0,0,1,0,0,1,3,19,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,250,            this.pivot    = pivot;,2,0,0,0,0,1,0,0,1,3,22,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,251,            this.singular = singular;,2,0,0,0,0,1,0,0,1,3,25,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,252,        },0,0,0,0,1,0,0,0,0,1,1,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,222,    private static class Solver<T extends FieldElement<T>> implements FieldDecompositionSolver<T> {,2,0,0,0,1,5,0,4,2,5,95,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,263,            final int m = pivot.length;,3,0,0,0,0,2,0,0,1,3,27,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,264,            if (b.length != m) {,3,1,0,1,3,1,0,0,0,5,20,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,269,            if (singular) {,1,0,0,1,3,1,0,0,0,4,15,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,274,"            final T[] bp = (T[]) Array.newInstance(field.getZero().getClass(), m);",1,0,0,1,12,1,6,2,1,7,70,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,277,            for (int row = 0; row < m; row++) {,4,1,0,1,3,2,0,0,1,6,35,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,278,                bp[row] = b[pivot[row]];,0,0,1,0,6,0,0,0,1,3,24,7,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,282,            for (int col = 0; col < m; col++) {,4,1,0,1,3,2,0,0,1,6,35,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,283,                final T bpCol = bp[col];,1,0,1,0,2,1,0,1,1,6,24,7,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,284,                for (int i = col + 1; i < m; i++) {,5,2,0,1,3,2,0,0,1,6,35,7,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,285,                    bp[i] = bp[i].subtract(bpCol.multiply(lu[i][col]));,0,0,1,2,12,0,3,0,1,5,51,9,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,290,            for (int col = m - 1; col >= 0; col--) {,4,2,0,1,3,2,0,0,1,6,40,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,291,                bp[col] = bp[col].divide(lu[col][col]);,0,0,1,1,10,0,1,0,1,5,39,7,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,292,                final T bpCol = bp[col];,1,0,1,0,2,1,0,1,1,6,24,7,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,293,                for (int i = 0; i < col; i++) {,4,1,0,1,3,2,0,0,1,6,31,7,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,294,                    bp[i] = bp[i].subtract(bpCol.multiply(lu[i][col]));,0,0,1,2,12,0,3,0,1,5,51,9,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,298,            return bp;,1,0,0,0,0,1,0,0,0,2,10,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,365,            final int m = pivot.length;,3,0,0,0,0,2,0,0,1,3,27,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,366,            if (b.getRowDimension() != m) {,1,1,0,2,5,1,2,0,0,6,31,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,371,            if (singular) {,1,0,0,1,3,1,0,0,0,4,15,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,375,            final int nColB = b.getColumnDimension();,1,0,0,1,2,2,2,0,1,6,41,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,379,"            final T[][] bp = (T[][]) Array.newInstance(field.getZero().getClass(), new int[] { m, nColB });",3,0,0,1,20,3,5,2,1,7,95,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,380,            for (int row = 0; row < m; row++) {,4,1,0,1,3,2,0,0,1,6,35,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,381,                final T[] bpRow = bp[row];,1,0,1,0,4,1,0,1,1,6,26,7,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,382,                final int pRow = pivot[row];,1,0,1,0,2,2,0,0,1,5,28,7,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,383,                for (int col = 0; col < nColB; col++) {,4,1,0,1,3,2,0,0,1,6,39,7,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,384,"                    bpRow[col] = b.getEntry(pRow, col);",0,0,1,0,4,0,4,0,1,4,35,9,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,389,            for (int col = 0; col < m; col++) {,4,1,0,1,3,2,0,0,1,6,35,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,390,                final T[] bpCol = bp[col];,1,0,1,0,4,1,0,1,1,6,26,7,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,391,                for (int i = col + 1; i < m; i++) {,5,2,0,1,3,2,0,0,1,6,35,7,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,392,                    final T[] bpI = bp[i];,1,0,1,0,4,1,0,1,1,6,22,9,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,393,                    final T luICol = lu[i][col];,1,0,1,0,4,1,0,1,1,6,28,9,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,394,                    for (int j = 0; j < nColB; j++) {,4,1,0,1,3,2,0,0,1,6,33,9,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,395,                        bpI[j] = bpI[j].subtract(bpCol[j].multiply(luICol));,0,0,1,2,10,0,3,0,1,5,52,11,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,401,            for (int col = m - 1; col >= 0; col--) {,4,2,0,1,3,2,0,0,1,6,40,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,402,                final T[] bpCol = bp[col];,1,0,1,0,4,1,0,1,1,6,26,7,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,403,                final T luDiag = lu[col][col];,1,0,1,0,4,1,0,1,1,6,30,7,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,404,                for (int j = 0; j < nColB; j++) {,4,1,0,1,3,2,0,0,1,6,33,7,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,405,                    bpCol[j] = bpCol[j].divide(luDiag);,0,0,1,1,6,0,2,0,1,5,35,9,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,407,                for (int i = 0; i < col; i++) {,4,1,0,1,3,2,0,0,1,6,31,7,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,408,                    final T[] bpI = bp[i];,1,0,1,0,4,1,0,1,1,6,22,9,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,409,                    final T luICol = lu[i][col];,1,0,1,0,4,1,0,1,1,6,28,9,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,410,                    for (int j = 0; j < nColB; j++) {,4,1,0,1,3,2,0,0,1,6,33,9,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,411,                        bpI[j] = bpI[j].subtract(bpCol[j].multiply(luICol));,0,0,1,2,10,0,3,0,1,5,52,11,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,416,"            return new Array2DRowFieldMatrix<T>(bp, false);",1,0,0,0,2,2,0,2,2,5,47,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,422,            final int m = pivot.length;,3,0,0,0,0,2,0,0,1,3,27,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,423,            final T one = field.getOne();,1,0,0,1,2,1,2,1,1,7,29,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,424,"            FieldMatrix<T> identity = new Array2DRowFieldMatrix<T>(field, m, m);",4,0,0,0,2,1,0,4,1,5,68,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,425,            for (int i = 0; i < m; ++i) {,4,1,0,1,3,2,0,0,1,6,29,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,426,"                identity.setEntry(i, i, one);",0,0,0,0,2,0,5,0,0,2,29,8,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,428,            return solve(identity);,0,0,0,1,2,1,2,0,1,5,23,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,708,        final BigFractionMatrixConverter converter = new BigFractionMatrixConverter();,1,0,0,1,2,2,0,2,2,6,78,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,709,        m.walkInOptimizedOrder(converter);,0,0,0,1,2,0,3,0,0,3,34,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,710,        return converter.getConvertedMatrix();,0,0,0,1,2,1,2,0,0,4,38,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,85,"        super(field, rowDimension, columnDimension);",3,0,0,0,2,1,0,0,1,4,44,3,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,86,"        data = buildArray(field, rowDimension, columnDimension);",1,0,0,0,2,0,4,0,2,4,56,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,87,    },0,0,0,0,1,0,0,0,0,1,1,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,125,        super(extractField(d));,0,0,0,2,4,1,2,0,2,5,23,3,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,126,        if (copyArray) {,1,0,0,1,3,1,0,0,0,4,16,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,129,            if (d == null) {,1,1,0,1,3,1,0,0,0,5,16,6,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,132,            final int nRows = d.length;,3,0,0,0,0,2,0,0,1,3,27,6,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,133,            if (nRows == 0) {,1,1,0,1,3,1,0,0,0,5,17,6,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,137,            final int nCols = d[0].length;,2,0,1,0,2,2,0,0,1,5,30,6,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,138,            if (nCols == 0) {,1,1,0,1,3,1,0,0,0,5,17,6,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,142,            for (int r = 1; r < nRows; r++) {,4,1,0,1,3,2,0,0,1,6,33,6,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,143,                if (d[r].length != nCols) {,2,1,1,1,5,1,0,0,0,6,27,8,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,148,            data = d;,2,0,0,0,0,0,0,0,1,2,9,6,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,150,    },0,0,0,0,1,0,0,0,0,1,1,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,309,        return copyOut();,0,0,0,1,2,1,1,0,1,5,17,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,366,            return data[row][column];,0,0,1,0,4,1,0,0,0,3,25,7,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,378,            data[row][column] = value;,1,0,1,0,4,0,0,0,1,4,26,6,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,382,        },0,0,0,0,1,0,0,0,0,1,1,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,383,    },0,0,0,0,1,0,0,0,0,1,1,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,412,        return (data == null) ? 0 : data.length;,3,1,0,1,2,1,0,0,0,5,40,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,418,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,2,3,1,2,10,1,0,0,0,6,66,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,472,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,473,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,474,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,475,        for (int i = 0; i < rows; ++i) {,4,1,0,1,3,2,0,0,1,6,32,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,476,            final T[] rowI = data[i];,1,0,1,0,4,1,0,1,1,6,25,6,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,477,            for (int j = 0; j < columns; ++j) {,4,1,0,1,3,2,0,0,1,6,35,6,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,478,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0,0,1,0,6,0,4,0,1,4,39,8,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,481,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,488,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,489,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,490,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,491,        for (int i = 0; i < rows; ++i) {,4,1,0,1,3,2,0,0,1,6,32,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,492,            final T[] rowI = data[i];,1,0,1,0,4,1,0,1,1,6,25,6,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,493,            for (int j = 0; j < columns; ++j) {,4,1,0,1,3,2,0,0,1,6,35,6,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,494,"                visitor.visit(i, j, rowI[j]);",0,0,1,0,4,0,4,0,0,3,29,9,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,497,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,608,        final int nRows = this.getRowDimension();,1,0,0,1,2,3,1,0,1,6,41,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,609,"        final T[][] out = buildArray(getField(), nRows, getColumnDimension());",1,0,0,1,10,1,4,1,4,7,70,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,611,        for (int i = 0; i < nRows; i++) {,4,1,0,1,3,2,0,0,1,6,33,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,612,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",1,0,1,0,8,0,2,0,0,4,56,7,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,614,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFractionField,74,40,    private BigFractionField() {,1,0,0,1,3,1,0,0,1,5,28,2,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFractionField,74,41,    },0,0,0,0,1,0,0,0,0,1,1,2,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFractionField,74,33,"public class BigFractionField implements Field<BigFraction>, Serializable  {",1,0,0,0,1,3,0,3,1,5,76,1,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFractionField,74,47,        return LazyHolder.INSTANCE;,2,0,0,0,0,1,0,0,0,2,27,5,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFractionField,74,52,        return BigFraction.ONE;,2,0,0,0,0,1,0,0,0,2,23,5,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFractionField,74,57,        return BigFraction.ZERO;,2,0,0,0,0,1,0,0,0,2,24,5,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFractionField,74,64,    private static class LazyHolder {,1,0,0,0,1,3,0,0,2,4,33,2,0.07692,0,0
defect4j,math,org/apache/commons/math/fraction/BigFractionField,74,66,        private static final BigFractionField INSTANCE = new BigFractionField();,1,0,0,1,2,4,0,2,4,6,72,3,0.07692,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,257,        this.minReduction = minReduction;,2,0,0,0,0,1,0,0,1,3,33,4,0.07692,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,258,    },0,0,0,0,1,0,0,0,0,1,1,2,0.07692,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,271,        this.maxGrowth = maxGrowth;,2,0,0,0,0,1,0,0,1,3,27,4,0.07692,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,272,    },0,0,0,0,1,0,0,0,0,1,1,2,0.07692,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,285,      this.safety = safety;,2,0,0,0,0,1,0,0,1,3,21,4,0.07692,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,286,    },0,0,0,0,1,0,0,0,0,1,1,2,0.07692,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,177,        bigP.walkInOptimizedOrder(new DefaultFieldMatrixChangingVisitor<BigFraction>(BigFraction.ZERO) {,2,0,0,1,4,1,2,2,1,7,96,5,0.07692,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,181,                return ((column & 0x1) == 0x1) ? value : value.negate();,2,2,0,2,6,1,2,0,0,6,56,11,0.07692,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,152,    private AdamsNordsieckTransformer(final int nSteps) {,2,0,0,1,3,3,0,0,2,5,53,2,0.07692,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,155,        FieldMatrix<BigFraction> bigP = buildP(nSteps);,1,0,0,1,2,0,2,2,1,6,47,4,0.07692,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,156,        FieldDecompositionSolver<BigFraction> pSolver =,1,0,0,0,0,0,0,2,0,2,47,4,0.07692,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,159,        BigFraction[] u = new BigFraction[nSteps];,1,0,1,0,4,1,0,2,0,5,42,4,0.07692,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,160,"        Arrays.fill(u, BigFraction.ONE);",2,0,0,0,2,0,3,0,0,3,32,5,0.07692,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,161,        BigFraction[] bigC1 = pSolver.solve(u);,1,0,0,1,4,0,3,1,0,5,39,4,0.07692,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,166,        BigFraction[][] shiftedP = bigP.getData();,1,0,0,1,6,0,2,1,0,5,42,4,0.07692,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,167,        for (int i = shiftedP.length - 1; i > 0; --i) {,5,2,0,1,3,2,0,0,1,6,47,4,0.07692,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,169,            shiftedP[i] = shiftedP[i - 1];,1,1,1,0,4,0,0,0,1,5,30,6,0.07692,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,171,        shiftedP[0] = new BigFraction[nSteps];,0,0,1,0,4,1,0,1,1,5,38,4,0.07692,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,172,"        Arrays.fill(shiftedP[0], BigFraction.ZERO);",2,0,1,0,4,0,2,0,0,4,43,5,0.07692,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,173,        FieldMatrix<BigFraction> bigMSupdate =,1,0,0,0,0,0,0,2,0,2,38,4,0.07692,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,177,        bigP.walkInOptimizedOrder(new DefaultFieldMatrixChangingVisitor<BigFraction>(BigFraction.ZERO) {,2,0,0,1,4,1,2,2,1,7,96,5,0.07692,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,184,        FieldMatrix<BigFraction> bigRInverse =,1,0,0,0,0,0,0,2,0,2,38,4,0.07692,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,188,        initialization = MatrixUtils.bigFractionMatrixToRealMatrix(bigRInverse);,1,0,0,1,2,0,3,0,1,5,72,4,0.07692,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,189,        update         = MatrixUtils.bigFractionMatrixToRealMatrix(bigMSupdate);,1,0,0,1,2,0,3,0,1,5,72,4,0.07692,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,190,        c1             = new double[nSteps];,1,0,1,0,2,2,0,0,1,5,36,4,0.07692,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,191,        for (int i = 0; i < nSteps; ++i) {,4,1,0,1,3,2,0,0,1,6,34,4,0.07692,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,192,            c1[i] = bigC1[i].doubleValue();,0,0,1,1,6,0,1,0,1,5,31,6,0.07692,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,195,    },0,0,0,0,1,0,0,0,0,1,1,2,0.07692,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,136,"    private static final Map<Integer, AdamsNordsieckTransformer> CACHE =",1,0,0,0,0,3,0,3,3,4,68,2,0.07692,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,203,        synchronized(CACHE) {,1,0,0,1,3,1,0,0,0,4,21,4,0.07692,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,204,            AdamsNordsieckTransformer t = CACHE.get(nSteps);,1,0,0,1,2,0,3,1,0,5,48,6,0.07692,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,205,            if (t == null) {,1,1,0,1,3,1,0,0,0,5,16,6,0.07692,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,206,                t = new AdamsNordsieckTransformer(nSteps);,2,0,0,1,2,1,0,1,2,6,42,8,0.07692,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,207,"                CACHE.put(nSteps, t);",0,0,0,0,2,0,4,0,0,2,21,9,0.07692,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,209,            return t;,1,0,0,0,0,1,0,0,0,2,9,6,0.07692,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,237,        final BigFraction[][] pData = new BigFraction[nSteps][nSteps];,1,0,1,0,8,2,0,2,1,6,62,4,0.07692,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,239,        for (int i = 0; i < pData.length; ++i) {,5,1,0,1,3,2,0,0,1,6,40,4,0.07692,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,241,            final BigFraction[] pI = pData[i];,1,0,1,0,4,1,0,1,1,6,34,6,0.07692,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,242,            final int factor = -(i + 1);,2,1,0,1,2,2,0,0,2,6,28,6,0.07692,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,243,            int aj = factor;,2,0,0,0,0,1,0,0,0,2,16,7,0.07692,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,244,            for (int j = 0; j < pI.length; ++j) {,5,1,0,1,3,2,0,0,1,6,37,6,0.07692,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,245,                pI[j] = new BigFraction(aj * (j + 2));,2,2,1,2,6,1,0,1,2,8,38,8,0.07692,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,246,                aj *= factor;,2,0,0,0,0,0,0,0,1,2,13,8,0.07692,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,250,"        return new Array2DRowFieldMatrix<BigFraction>(pData, false);",1,0,0,0,2,2,0,2,2,5,60,4,0.07692,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,116,        eventsHandlersManager.clearEventsHandlers();,0,0,0,1,2,0,2,0,0,3,44,5,0.07143,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,117,    },0,0,0,0,1,0,0,0,0,1,1,2,0.07143,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,94,        states.clear();,0,0,0,1,2,0,2,0,0,3,15,5,0.07143,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,95,    },0,0,0,0,1,0,0,0,0,1,1,2,0.07143,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,287,      if (dirtyState) {,1,0,0,1,3,1,0,0,0,4,17,4,0.07143,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,294,      return interpolatedDerivatives;,1,0,0,0,0,1,0,0,0,2,31,4,0.07143,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,138,        return stepSize;,1,0,0,0,0,1,0,0,0,2,16,4,0.05556,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,310,    return stepStart;,1,0,0,0,0,1,0,0,0,2,17,4,0.05556,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,318,    if (! vectorsInitialized) {,1,0,0,1,3,1,0,0,1,5,27,4,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,320,      if (v == null) {,1,1,0,1,3,1,0,0,0,5,16,6,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,328,      finalizeStep();,0,0,0,1,2,0,1,0,1,4,15,6,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,331,      for (int i = 0; i < interpolatedState.length; ++i) {,5,1,0,1,3,2,0,0,1,6,52,6,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,332,          final double yDot1  = yDotK[0][i];,1,0,1,0,4,2,0,0,1,5,34,8,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,333,          final double yDot6  = yDotK[5][i];,1,0,1,0,4,2,0,0,1,5,34,8,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,334,          final double yDot7  = yDotK[6][i];,1,0,1,0,4,2,0,0,1,5,34,8,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,335,          final double yDot8  = yDotK[7][i];,1,0,1,0,4,2,0,0,1,5,34,8,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,336,          final double yDot9  = yDotK[8][i];,1,0,1,0,4,2,0,0,1,5,34,8,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,337,          final double yDot10 = yDotK[9][i];,1,0,1,0,4,2,0,0,1,5,34,8,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,338,          final double yDot11 = yDotK[10][i];,1,0,1,0,4,2,0,0,1,5,35,8,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,339,          final double yDot12 = yDotK[11][i];,1,0,1,0,4,2,0,0,1,5,35,8,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,340,          final double yDot13 = yDotK[12][i];,1,0,1,0,4,2,0,0,1,5,35,8,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,341,          final double yDot14 = yDotKLast[0][i];,1,0,1,0,4,2,0,0,1,5,38,8,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,342,          final double yDot15 = yDotKLast[1][i];,1,0,1,0,4,2,0,0,1,5,38,8,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,343,          final double yDot16 = yDotKLast[2][i];,1,0,1,0,4,2,0,0,1,5,38,8,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,344,          v[0][i] = B_01 * yDot1  + B_06 * yDot6 + B_07 * yDot7 +,6,10,1,0,4,0,0,0,1,5,55,8,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,347,          v[1][i] = yDot1 - v[0][i];,1,1,1,0,8,0,0,0,1,5,26,8,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,348,          v[2][i] = v[0][i] - v[1][i] - yDotK[12][i];,0,1,1,0,16,0,0,0,1,4,43,8,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,349,          for (int k = 0; k < D.length; ++k) {,5,1,0,1,3,2,0,0,1,6,36,8,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,350,              v[k+3][i] = D[k][0] * yDot1  + D[k][1]  * yDot6  + D[k][2]  * yDot7  +,4,15,1,0,16,0,0,0,1,5,70,10,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,357,      vectorsInitialized = true;,1,0,0,0,0,0,0,0,2,2,26,6,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,361,    final double eta      = 1 - theta;,2,1,0,0,0,2,0,0,1,4,34,4,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,362,    final double twoTheta = 2 * theta;,2,1,0,0,0,2,0,0,1,4,34,4,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,363,    final double theta2   = theta * theta;,3,1,0,0,0,2,0,0,1,4,38,4,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,364,    final double dot1 = 1 - twoTheta;,2,1,0,0,0,2,0,0,1,4,33,4,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,365,    final double dot2 = theta * (2 - 3 * theta);,3,3,0,1,2,2,0,0,1,6,44,4,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,366,    final double dot3 = twoTheta * (1 + theta * (twoTheta -3));,4,4,0,2,4,2,0,0,1,6,59,4,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,367,    final double dot4 = theta2 * (3 + theta * (5 * theta - 8));,4,5,0,2,4,2,0,0,1,6,59,4,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,368,    final double dot5 = theta2 * (3 + theta * (-12 + theta * (15 - 6 * theta)));,5,7,0,3,6,2,0,0,2,6,76,4,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,369,    final double dot6 = theta2 * theta * (4 + theta * (-15 + theta * (18 - 7 * theta)));,6,7,0,3,6,2,0,0,2,6,84,4,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,371,    for (int i = 0; i < interpolatedState.length; ++i) {,5,1,0,1,3,2,0,0,1,6,52,4,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,372,      interpolatedState[i] = currentState[i] -,0,1,1,0,4,0,0,0,1,4,40,6,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,380,      interpolatedDerivatives[i] =  v[0][i] + dot1 * v[1][i] + dot2 * v[2][i] +,2,8,1,0,14,0,0,0,1,5,73,6,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,385,  },0,0,0,0,1,0,0,0,0,1,1,2,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,398,    final double[] yTmp = new double[currentState.length];,3,0,0,0,4,4,0,0,1,4,54,4,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,401,    for (int j = 0; j < currentState.length; ++j) {,5,1,0,1,3,2,0,0,1,6,47,4,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,402,      s = K14_01 * yDotK[0][j]  + K14_06 * yDotK[5][j]  + K14_07 * yDotK[6][j] +,4,11,1,0,12,0,0,0,1,5,74,6,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,405,      yTmp[j] = currentState[j] + h * s;,2,2,1,0,4,0,0,0,1,5,34,6,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,407,"    integrator.computeDerivatives(previousTime + C14 * h, yTmp, yDotKLast[0]);",3,2,1,0,4,0,3,0,0,5,74,5,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,410,    for (int j = 0; j < currentState.length; ++j) {,5,1,0,1,3,2,0,0,1,6,47,4,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,411,     s = K15_01 * yDotK[0][j]  + K15_06 * yDotK[5][j]  + K15_07 * yDotK[6][j] +,4,12,1,0,12,0,0,0,1,5,74,6,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,415,     yTmp[j] = currentState[j] + h * s;,2,2,1,0,4,0,0,0,1,5,34,6,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,417,"    integrator.computeDerivatives(previousTime + C15 * h, yTmp, yDotKLast[1]);",3,2,1,0,4,0,3,0,0,5,74,5,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,420,    for (int j = 0; j < currentState.length; ++j) {,5,1,0,1,3,2,0,0,1,6,47,4,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,421,      s = K16_01 * yDotK[0][j]  + K16_06 * yDotK[5][j]  + K16_07 * yDotK[6][j] +,4,13,1,0,12,0,0,0,1,5,74,6,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,425,      yTmp[j] = currentState[j] + h * s;,2,2,1,0,4,0,0,0,1,5,34,6,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,427,"    integrator.computeDerivatives(previousTime + C16 * h, yTmp, yDotKLast[2]);",3,2,1,0,4,0,3,0,0,5,74,5,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,429,  },0,0,0,0,1,0,0,0,0,1,1,2,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,245,    super(interpolator);,1,0,0,1,2,1,0,0,1,5,20,3,0.04545,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,247,    if (interpolator.currentState == null) {,2,1,0,1,3,1,0,0,0,5,40,4,0.04545,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,249,      yDotKLast = null;,1,0,0,0,0,0,0,0,1,2,17,6,0.04545,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,250,      v         = null;,1,0,0,0,0,0,0,0,1,2,17,6,0.04545,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,251,      vectorsInitialized = false;,1,0,0,0,0,0,0,0,2,2,27,6,0.04545,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,274,  },0,0,0,0,1,0,0,0,0,1,1,2,0.04545,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,279,    return new DormandPrince853StepInterpolator(this);,0,0,0,1,2,3,0,1,1,5,50,4,0.04545,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,287,"    super.reinitialize(integrator, y, yDotK, forward);",5,0,0,0,2,1,0,0,0,3,50,5,0.04545,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,289,    final int dimension = currentState.length;,3,0,0,0,0,2,0,0,1,3,42,4,0.04545,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,291,    yDotKLast = new double[3][];,1,0,0,0,4,2,0,0,1,4,28,4,0.04545,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,292,    for (int k = 0; k < yDotKLast.length; ++k) {,5,1,0,1,3,2,0,0,1,6,44,4,0.04545,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,293,      yDotKLast[k] = new double[dimension];,0,0,1,0,4,2,0,0,1,4,37,6,0.04545,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,296,    v = new double[7][];,1,0,0,0,4,2,0,0,1,4,20,4,0.04545,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,297,    for (int k = 0; k < v.length; ++k) {,5,1,0,1,3,2,0,0,1,6,36,4,0.04545,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,298,      v[k]  = new double[dimension];,0,0,1,0,4,2,0,0,1,4,30,6,0.04545,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,301,    vectorsInitialized = false;,1,0,0,0,0,0,0,0,2,2,27,4,0.04545,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,303,  },0,0,0,0,1,0,0,0,0,1,1,2,0.04545,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,308,    super.storeTime(t);,2,0,0,1,2,1,0,0,0,4,19,5,0.04545,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,309,    vectorsInitialized = false;,1,0,0,0,0,0,0,0,2,2,27,4,0.04545,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,310,  },0,0,0,0,1,0,0,0,0,1,1,2,0.04545,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,392,    if (currentState == null) {,1,1,0,1,3,1,0,0,0,5,27,4,0.04545,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,394,      return;,0,0,0,0,0,1,0,0,1,2,7,5,0.04545,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,74,249,    double error1 = 0;,1,0,0,0,0,1,0,0,0,2,18,5,0.04348,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,74,250,    double error2 = 0;,1,0,0,0,0,1,0,0,0,2,18,5,0.04348,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,74,252,    for (int j = 0; j < y0.length; ++j) {,5,1,0,1,3,2,0,0,1,6,37,4,0.04348,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,74,253,      final double errSum1 = E1_01 * yDotK[0][j]  + E1_06 * yDotK[5][j] +,3,9,1,0,8,2,0,0,1,6,67,6,0.04348,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,74,257,      final double errSum2 = E2_01 * yDotK[0][j]  + E2_06 * yDotK[5][j] +,3,9,1,0,8,2,0,0,1,6,67,6,0.04348,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,74,262,"      final double yScale = Math.max(Math.abs(y0[j]), Math.abs(y1[j]));",1,0,1,1,10,2,6,0,1,7,65,6,0.04348,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,74,263,      final double tol = (vecAbsoluteTolerance == null) ?,2,1,0,1,2,2,0,0,1,6,51,6,0.04348,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,74,266,      final double ratio1  = errSum1 / tol;,3,1,0,0,0,2,0,0,1,4,37,6,0.04348,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,74,267,      error1        += ratio1 * ratio1;,3,1,0,0,0,0,0,0,1,3,33,6,0.04348,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,74,268,      final double ratio2  = errSum2 / tol;,3,1,0,0,0,2,0,0,1,4,37,6,0.04348,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,74,269,      error2        += ratio2 * ratio2;,3,1,0,0,0,0,0,0,1,3,33,6,0.04348,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,74,272,    double den = error1 + 0.01 * error2;,3,2,0,0,0,1,0,0,0,3,36,5,0.04348,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,74,273,    if (den <= 0.0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.04348,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,74,277,    return Math.abs(h) * error1 / Math.sqrt(y0.length * den);,4,3,0,1,4,1,5,0,0,6,57,4,0.04348,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,74,216,"    super(METHOD_NAME, true, STATIC_C, STATIC_A, STATIC_B,",4,0,0,0,1,1,0,0,2,4,54,3,0.04167,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,74,219,  },0,0,0,0,1,0,0,0,0,1,1,2,0.04167,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,275,                    p = -p;,2,0,0,0,0,0,0,0,2,2,7,10,0.03846,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,240,    return interpolatedTime;,1,0,0,0,0,1,0,0,0,2,24,4,0.03846,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,74,61,  private static final double[] STATIC_C = {,1,0,0,0,3,4,0,0,3,4,42,2,0.03704,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,74,68,  private static final double[][] STATIC_A = {,1,0,0,0,5,4,0,0,3,4,44,2,0.03704,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,74,135,  private static final double[] STATIC_B = {,1,0,0,0,3,4,0,0,3,4,42,2,0.03704,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,74,241,    return 8;,0,0,0,0,0,1,0,0,0,1,9,2,0.03704,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,232,    super();,0,0,0,1,2,1,0,0,1,4,8,3,0.03704,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,233,    yDotKLast = null;,1,0,0,0,0,0,0,0,1,2,17,4,0.03704,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,234,    v         = null;,1,0,0,0,0,0,0,0,1,2,17,4,0.03704,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,235,    vectorsInitialized = false;,1,0,0,0,0,0,0,0,2,2,27,4,0.03704,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,236,  },0,0,0,0,1,0,0,0,0,1,1,2,0.03704,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,181,    private static final double[][] D = {,1,0,0,0,5,4,0,0,3,4,37,2,0.03704,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,273,                    p1 = -p1;,2,0,0,0,0,0,0,0,2,2,9,10,0.02941,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,302,                x2 = x0;,2,0,0,0,0,0,0,0,1,2,8,8,0.02857,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,303,                y2 = y0;,2,0,0,0,0,0,0,0,1,2,8,8,0.02857,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,304,                delta = x1 - x0;,3,1,0,0,0,0,0,0,1,3,16,8,0.02857,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,305,                oldDelta = delta;,2,0,0,0,0,0,0,0,1,2,17,8,0.02857,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,262,            return STOP;,1,0,0,0,0,1,0,0,0,2,12,5,0.02857,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,228,                x0 = x1;,2,0,0,0,0,0,0,0,1,2,8,8,0.02703,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,229,                x1 = x2;,2,0,0,0,0,0,0,0,1,2,8,8,0.02703,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,230,                x2 = x0;,2,0,0,0,0,0,0,0,1,2,8,8,0.02703,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,231,                y0 = y1;,2,0,0,0,0,0,0,0,1,2,8,8,0.02703,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,232,                y1 = y2;,2,0,0,0,0,0,0,0,1,2,8,8,0.02703,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,233,                y2 = y0;,2,0,0,0,0,0,0,0,1,2,8,8,0.02703,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,74,141,        this.result         = newResult;,2,0,0,0,0,1,0,0,1,3,32,4,0.02632,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,74,142,        this.iterationCount = iterationCount;,2,0,0,0,0,1,0,0,1,3,37,4,0.02632,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,74,143,        this.resultComputed = true;,1,0,0,0,0,1,0,0,2,3,27,4,0.02632,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,74,144,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02632,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,195,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.02632,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,239,"                setResult(x1, i);",0,0,0,0,2,0,3,0,1,3,17,8,0.02632,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,240,                return result;,1,0,0,0,0,1,0,0,0,2,14,8,0.02632,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,153,                    if (first == null) {,1,1,0,1,3,1,0,0,0,5,20,10,0.02632,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,154,                        first = state;,2,0,0,0,0,0,0,0,1,2,14,12,0.02632,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,187,        return (first == null) ? Double.NaN : first.getEventTime();,3,1,0,1,4,1,2,0,0,6,59,5,0.02632,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,217,                return true;,0,0,0,0,0,1,0,0,1,2,12,8,0.02632,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,230,                    if ((Math.abs(root - ta) <= convergence) &&,3,3,0,2,5,1,2,0,0,6,43,10,0.02632,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,235,                    } else if (Double.isNaN(previousEventTime) ||,0,1,0,1,4,2,3,0,0,5,45,11,0.02632,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,237,                        pendingEventTime = root;,2,0,0,0,0,0,0,0,1,2,24,13,0.02632,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,238,                        if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {,4,3,0,3,7,1,2,0,0,6,71,13,0.02632,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,243,                            return false;,0,0,0,0,0,1,0,0,1,2,13,15,0.02632,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,247,                        pendingEvent = true;,1,0,0,0,0,0,0,0,2,2,20,13,0.02632,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,248,                        return true;,0,0,0,0,0,1,0,0,1,2,12,13,0.02632,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,282,        return pendingEventTime;,1,0,0,0,0,1,0,0,0,2,24,4,0.02632,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,301,            previousEventTime = t;,2,0,0,0,0,0,0,0,1,2,22,6,0.02632,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,302,            g0Positive        = increasing;,2,0,0,0,0,0,0,0,1,2,31,6,0.02632,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,303,"            nextAction        = handler.eventOccurred(t, y, !(increasing ^ forward));",3,1,0,1,4,0,4,0,2,6,73,6,0.02632,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,74,61,                                      final double defaultAbsoluteAccuracy) {,1,0,0,0,2,2,0,0,1,4,39,3,0.02564,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,74,62,        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;,2,0,0,0,0,1,0,0,1,3,55,4,0.02564,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,74,63,        this.defaultRelativeAccuracy = 1.0e-14;,1,0,0,0,0,1,0,0,1,3,39,4,0.02564,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,74,64,        this.absoluteAccuracy = defaultAbsoluteAccuracy;,2,0,0,0,0,1,0,0,1,3,48,4,0.02564,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,74,65,        this.relativeAccuracy = defaultRelativeAccuracy;,2,0,0,0,0,1,0,0,1,3,48,4,0.02564,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,74,66,        this.defaultMaximalIterationCount = defaultMaximalIterationCount;,2,0,0,0,0,1,0,0,1,3,65,4,0.02564,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,74,67,        this.maximalIterationCount = defaultMaximalIterationCount;,2,0,0,0,0,1,0,0,1,3,58,4,0.02564,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,74,68,        this.iterationCount = 0;,1,0,0,0,0,1,0,0,1,3,24,4,0.02564,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,74,69,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02564,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,74,78,        absoluteAccuracy = accuracy;,2,0,0,0,0,0,0,0,1,2,28,4,0.02564,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,74,79,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02564,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,74,93,        maximalIterationCount = count;,2,0,0,0,0,0,0,0,1,2,30,4,0.02564,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,74,94,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02564,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,74,41,    protected boolean resultComputed = false;,1,0,0,0,0,2,0,0,2,3,41,2,0.02564,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,74,93,"        super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);",2,0,0,0,2,1,0,0,1,4,61,3,0.02564,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,74,94,        this.defaultFunctionValueAccuracy = 1.0e-15;,1,0,0,0,0,1,0,0,1,3,44,4,0.02564,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,74,95,        this.functionValueAccuracy = defaultFunctionValueAccuracy;,2,0,0,0,0,1,0,0,1,3,58,4,0.02564,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,74,96,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02564,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,74,165,        this.iterationCount = 0;,1,0,0,0,0,1,0,0,1,3,24,4,0.02564,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,74,166,        this.resultComputed = false;,1,0,0,0,0,1,0,0,2,3,28,4,0.02564,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,74,167,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02564,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,74,208,        if (lower >= upper) {,2,1,0,1,3,1,0,0,0,5,21,4,0.02564,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,74,213,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02564,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,56,"        super(100, 1E-6);",0,0,0,0,2,1,0,0,1,3,17,3,0.02564,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,57,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02564,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,158,        clearResult();,0,0,0,1,2,0,1,0,1,4,14,4,0.02564,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,159,"        verifyInterval(min, max);",0,0,0,0,2,0,3,0,1,3,25,4,0.02564,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,161,        double ret = Double.NaN;,3,0,0,0,0,1,0,0,0,2,24,5,0.02564,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,163,        double yMin = f.value(min);,1,0,0,1,2,1,3,0,0,5,27,5,0.02564,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,164,        double yMax = f.value(max);,1,0,0,1,2,1,3,0,0,5,27,5,0.02564,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,167,        double sign = yMin * yMax;,3,1,0,0,0,1,0,0,0,3,26,5,0.02564,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,168,        if (sign > 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.02564,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,183,        } else if (sign < 0){,1,1,0,1,4,2,0,0,0,5,21,5,0.02564,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,185,"            ret = solve(f, min, yMin, max, yMax, min, yMin);",1,0,0,0,2,0,8,0,2,4,48,7,0.02564,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,221,        double delta = x1 - x0;,3,1,0,0,0,1,0,0,0,3,23,5,0.02564,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,222,        double oldDelta = delta;,2,0,0,0,0,1,0,0,0,2,24,5,0.02564,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,224,        int i = 0;,1,0,0,0,0,1,0,0,0,2,10,5,0.02564,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,225,        while (i < maximalIterationCount) {,2,1,0,1,3,1,0,0,0,5,35,4,0.02564,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,226,            if (Math.abs(y2) < Math.abs(y1)) {,0,1,0,2,7,1,6,0,0,5,34,6,0.02564,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,235,            if (Math.abs(y1) <= functionValueAccuracy) {,1,1,0,2,5,1,3,0,0,6,44,6,0.02564,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,242,            double dx = x2 - x1;,3,1,0,0,0,1,0,0,0,3,20,7,0.02564,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,243,            double tolerance =,1,0,0,0,0,1,0,0,0,2,18,7,0.02564,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,245,            if (Math.abs(dx) <= tolerance) {,1,1,0,2,5,1,3,0,0,6,32,6,0.02564,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,249,            if ((Math.abs(oldDelta) < tolerance) ||,1,2,0,2,5,1,3,0,0,6,39,6,0.02564,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,255,                double r3 = y1 / y0;,3,1,0,0,0,1,0,0,0,3,20,9,0.02564,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,261,                if (x0 == x2) {,2,1,0,1,3,1,0,0,0,5,15,8,0.02564,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,263,                    p = dx * r3;,3,1,0,0,0,0,0,0,1,3,12,10,0.02564,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,264,                    p1 = 1.0 - r3;,2,1,0,0,0,0,0,0,1,3,14,10,0.02564,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,272,                if (p > 0.0) {,1,1,0,1,3,1,0,0,0,5,14,8,0.02564,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,277,                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||,5,6,0,1,3,1,2,0,0,6,58,8,0.02564,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,285,                    oldDelta = delta;,2,0,0,0,0,0,0,0,1,2,17,10,0.02564,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,286,                    delta = p / p1;,3,1,0,0,0,0,0,0,1,3,15,10,0.02564,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,290,            x0 = x1;,2,0,0,0,0,0,0,0,1,2,8,6,0.02564,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,291,            y0 = y1;,2,0,0,0,0,0,0,0,1,2,8,6,0.02564,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,293,            if (Math.abs(delta) > tolerance) {,1,1,0,2,5,1,3,0,0,6,34,6,0.02564,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,294,                x1 = x1 + delta;,3,1,0,0,0,0,0,0,1,3,16,8,0.02564,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,300,            y1 = f.value(x1);,1,0,0,1,2,0,3,0,1,5,17,6,0.02564,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,301,            if ((y1 > 0) == (y2 > 0)) {,2,3,0,2,7,1,0,0,0,5,27,6,0.02564,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,307,            i++;,1,0,0,0,0,0,0,0,1,2,4,6,0.02564,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,308,        },0,0,0,0,1,0,0,0,0,1,1,2,0.02564,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,191,                    if (ga * gb > 0) {,2,2,0,1,3,1,0,0,0,5,18,10,0.02564,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,212,                    increasing = gb >= ga;,3,1,0,0,0,0,0,0,1,3,22,10,0.02564,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,214,                    final UnivariateRealFunction f = new UnivariateRealFunction() {,1,0,0,1,3,2,0,2,2,6,63,10,0.02564,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,226,                    final BrentSolver solver = new BrentSolver();,1,0,0,1,2,2,0,2,2,6,45,10,0.02564,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,227,                    solver.setAbsoluteAccuracy(convergence);,0,0,0,1,2,0,3,0,0,3,40,11,0.02564,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,228,                    solver.setMaximalIterationCount(maxIterationCount);,0,0,0,1,2,0,3,0,0,3,51,11,0.02564,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,229,"                    final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);",3,1,0,1,6,2,10,0,1,7,83,10,0.02564,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,42,public class EventState {,1,0,0,0,1,2,0,0,1,4,25,1,0.02564,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,214,                    final UnivariateRealFunction f = new UnivariateRealFunction() {,1,0,0,1,3,2,0,2,2,6,63,10,0.02564,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,217,                                interpolator.setInterpolatedTime(t);,0,0,0,1,2,0,3,0,0,3,36,19,0.02564,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,218,"                                return handler.g(t, interpolator.getInterpolatedState());",0,0,0,1,4,1,5,0,0,4,57,19,0.02564,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,247,              scale = new double[y0.length];,3,0,0,0,2,2,0,0,1,4,30,12,0.02439,1,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,248,"              java.util.Arrays.fill(scale, scalAbsoluteTolerance);",3,0,0,0,2,0,3,0,0,3,52,13,0.02439,1,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,322,"          handler.handleStep(interpolator, lastStep);",0,0,0,0,2,0,4,0,0,2,43,9,0.02439,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,125,                return true;,0,0,0,0,0,1,0,0,1,2,12,8,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,267,            return t - endTime;,2,1,0,0,0,1,0,0,0,3,19,5,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,127,            first = null;,1,0,0,0,0,0,0,0,1,2,13,6,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,128,            if (states.isEmpty()) {,0,0,0,2,5,1,2,0,0,4,23,7,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,135,            if (! initialized) {,1,0,0,1,3,1,0,0,1,5,20,6,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,138,                final double t0 = interpolator.getPreviousTime();,1,0,0,1,2,2,2,0,1,6,49,8,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,139,                interpolator.setInterpolatedTime(t0);,0,0,0,1,2,0,3,0,0,3,37,9,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,140,                final double [] y = interpolator.getInterpolatedState();,1,0,0,1,4,2,2,0,1,6,56,8,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,141,                for (EventState state : states) {,2,0,0,1,3,1,0,1,0,5,33,8,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,142,"                    state.reinitializeBegin(t0, y);",0,0,0,0,2,0,4,0,0,2,31,11,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,143,                },0,0,0,0,1,0,0,0,0,1,1,2,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,145,                initialized = true;,1,0,0,0,0,0,0,0,2,2,19,8,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,150,            for (EventState state : states) {,2,0,0,1,3,1,0,1,0,5,33,6,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,152,                if (state.evaluateStep(interpolator)) {,0,0,0,2,5,1,3,0,0,4,39,9,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,168,            },0,0,0,0,1,0,0,0,0,1,1,2,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,170,            return first != null;,1,1,0,0,0,1,0,0,0,3,21,6,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,202,            for (EventState state : states) {,2,0,0,1,3,1,0,1,0,5,33,6,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,203,"                state.stepAccepted(t, y);",0,0,0,0,2,0,4,0,0,2,25,9,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,204,            },0,0,0,0,1,0,0,0,0,1,1,2,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,207,        },0,0,0,0,1,0,0,0,0,1,1,2,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,208,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,215,        for (EventState state : states) {,2,0,0,1,3,1,0,1,0,5,33,4,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,216,            if (state.stop()) {,0,0,0,2,5,1,2,0,0,4,19,7,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,219,        },0,0,0,0,1,0,0,0,0,1,1,2,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,220,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,235,            boolean resetDerivatives = false;,1,0,0,0,0,1,0,0,1,3,33,7,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,236,            for (EventState state : states) {,2,0,0,1,3,1,0,1,0,5,33,6,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,237,"                if (state.reset(t, y)) {",0,0,0,0,5,1,4,0,0,3,24,9,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,240,            },0,0,0,0,1,0,0,0,0,1,1,2,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,241,            return resetDerivatives;,1,0,0,0,0,1,0,0,0,2,24,6,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,151,        t0 = tStart;,2,0,0,0,0,0,0,0,1,2,12,4,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,152,"        g0 = handler.g(tStart, yStart);",1,0,0,0,2,0,4,0,1,4,31,4,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,153,        g0Positive = g0 >= 0;,2,1,0,0,0,0,0,0,1,3,21,4,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,154,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,172,            forward = interpolator.isForward();,1,0,0,1,2,0,2,0,1,5,35,6,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,173,            final double t1 = interpolator.getCurrentTime();,1,0,0,1,2,2,2,0,1,6,48,6,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,174,"            final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));",4,2,0,2,8,3,6,0,1,7,85,6,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,175,            final double h  = (t1 - t0) / n;,4,2,0,1,2,2,0,0,1,6,32,6,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,177,            double ta = t0;,2,0,0,0,0,1,0,0,0,2,15,7,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,178,            double ga = g0;,2,0,0,0,0,1,0,0,0,2,15,7,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,179,            double tb = t0 + (interpolator.isForward() ? convergence : -convergence);,4,1,0,2,4,1,2,0,1,7,73,7,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,180,            for (int i = 0; i < n; ++i) {,4,1,0,1,3,2,0,0,1,6,29,6,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,183,                tb += h;,2,0,0,0,0,0,0,0,1,2,8,8,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,184,                interpolator.setInterpolatedTime(tb);,0,0,0,1,2,0,3,0,0,3,37,9,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,185,"                final double gb = handler.g(tb, interpolator.getInterpolatedState());",1,0,0,1,4,2,5,0,1,6,69,8,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,188,                if (g0Positive ^ (gb >= 0)) {,2,2,0,2,5,1,0,0,0,5,29,8,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,253,                    ta = tb;,2,0,0,0,0,0,0,0,1,2,8,10,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,254,                    ga = gb;,2,0,0,0,0,0,0,0,1,2,8,10,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,260,            pendingEvent     = false;,1,0,0,0,0,0,0,0,2,2,25,6,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,261,            pendingEventTime = Double.NaN;,3,0,0,0,0,0,0,0,1,2,30,6,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,262,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,296,        t0 = t;,2,0,0,0,0,0,0,0,1,2,7,4,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,297,"        g0 = handler.g(t, y);",1,0,0,0,2,0,4,0,1,4,21,4,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,299,        if (pendingEvent) {,1,0,0,1,3,1,0,0,0,4,19,4,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,305,            g0Positive = g0 >= 0;,2,1,0,0,0,0,0,0,1,3,21,6,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,306,            nextAction = EventHandler.CONTINUE;,3,0,0,0,0,0,0,0,1,2,35,6,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,308,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,315,        return nextAction == EventHandler.STOP;,3,1,0,0,0,1,0,0,0,3,39,4,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,330,        if (! pendingEvent) {,1,0,0,1,3,1,0,0,1,5,21,4,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,331,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,291,      if (filteredH > maxStep) {,2,1,0,1,3,1,0,0,0,5,26,4,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,293,      } else if (filteredH < -maxStep) {,2,1,0,1,4,2,0,0,1,6,34,5,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,297,      return filteredH;,1,0,0,0,0,1,0,0,0,2,17,4,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,288,          interpolator.storeTime(stepStart + stepSize);,2,1,0,1,2,0,2,0,0,5,45,11,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,289,          if (manager.evaluateStep(interpolator)) {,0,0,0,2,5,1,3,0,0,4,41,11,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,300,            loop = false;,1,0,0,0,0,0,0,0,2,2,13,12,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,314,      final double nextStep = stepStart + stepSize;,3,1,0,0,0,2,0,0,1,4,45,6,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,315,"      System.arraycopy(yTmp, 0, y, 0, y0.length);",2,0,0,0,2,0,4,0,0,3,43,7,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,316,"      manager.stepAccepted(nextStep, y);",0,0,0,0,2,0,4,0,0,2,34,7,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,317,      lastStep = manager.stop();,1,0,0,1,2,0,2,0,1,5,26,6,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,320,      interpolator.storeTime(nextStep);,0,0,0,1,2,0,3,0,0,3,33,7,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,321,      for (StepHandler handler : stepHandlers) {,2,0,0,1,3,1,0,1,0,5,42,6,0.02381,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,153,      currentState            = null;,1,0,0,0,0,0,0,0,1,2,31,6,0.02326,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,154,      interpolatedState       = null;,1,0,0,0,0,0,0,0,1,2,31,6,0.02326,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,155,      interpolatedDerivatives = null;,1,0,0,0,0,0,0,0,1,2,31,6,0.02326,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,171,    previousTime      = Double.NaN;,3,0,0,0,0,0,0,0,1,2,31,4,0.02326,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,172,    currentTime       = Double.NaN;,3,0,0,0,0,0,0,0,1,2,31,4,0.02326,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,173,    h                 = Double.NaN;,3,0,0,0,0,0,0,0,1,2,31,4,0.02326,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,174,    interpolatedTime  = Double.NaN;,3,0,0,0,0,0,0,0,1,2,31,4,0.02326,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,176,    currentState            = y;,2,0,0,0,0,0,0,0,1,2,28,4,0.02326,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,177,    interpolatedState       = new double[y.length];,3,0,0,0,2,2,0,0,1,4,47,4,0.02326,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,178,    interpolatedDerivatives = new double[y.length];,3,0,0,0,2,2,0,0,1,4,47,4,0.02326,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,180,    finalized         = false;,1,0,0,0,0,0,0,0,2,2,26,4,0.02326,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,181,    this.forward      = isForward;,2,0,0,0,0,1,0,0,1,3,30,4,0.02326,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,182,    this.dirtyState   = true;,1,0,0,0,0,1,0,0,2,3,25,4,0.02326,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,184,  },0,0,0,0,1,0,0,0,0,1,1,2,0.02326,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,230,    return previousTime;,1,0,0,0,0,1,0,0,0,2,20,4,0.02326,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,235,    return currentTime;,1,0,0,0,0,1,0,0,0,2,19,4,0.02326,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,251,    return forward;,1,0,0,0,0,1,0,0,0,2,15,4,0.02326,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,272,      if (dirtyState) {,1,0,0,1,3,1,0,0,0,4,17,4,0.02326,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,273,          final double oneMinusThetaH = currentTime - interpolatedTime;,3,1,0,0,0,2,0,0,1,4,61,6,0.02326,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,274,          final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;,5,3,0,1,4,2,0,0,1,6,61,6,0.02326,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,275,"          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);",0,0,0,0,2,0,3,0,1,3,62,6,0.02326,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,276,          dirtyState = false;,1,0,0,0,0,0,0,0,2,2,19,6,0.02326,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,279,      return interpolatedState;,1,0,0,0,0,1,0,0,0,2,25,4,0.02326,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,74,81,    super(interpolator);,1,0,0,1,2,1,0,0,1,5,20,3,0.02326,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,74,83,    if (interpolator.currentState != null) {,2,1,0,1,3,1,0,0,0,5,40,4,0.02326,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,74,94,      yDotK = null;,1,0,0,0,0,0,0,0,1,2,13,6,0.02326,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,74,99,    integrator = null;,1,0,0,0,0,0,0,0,1,2,18,4,0.02326,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,74,101,  },0,0,0,0,1,0,0,0,0,1,1,2,0.02326,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,74,126,"    reinitialize(y, forward);",0,0,0,0,2,0,3,0,1,3,25,4,0.02326,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,74,127,    this.yDotK = yDotArray;,2,0,0,0,0,1,0,0,1,3,23,4,0.02326,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,74,128,    this.integrator = rkIntegrator;,2,0,0,0,0,1,0,0,1,3,31,4,0.02326,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,74,129,  },0,0,0,0,1,0,0,0,0,1,1,2,0.02326,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,213,      final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();,1,0,0,1,4,1,2,2,1,7,85,6,0.02326,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,214,"      rki.reinitialize(this, yTmp, yDotK, forward);",0,0,0,0,2,1,5,0,0,3,45,7,0.02326,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,215,      interpolator = rki;,2,0,0,0,0,0,0,0,1,2,19,6,0.02326,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,216,    } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.02326,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,141,  protected AbstractStepInterpolator(final AbstractStepInterpolator interpolator) {,2,0,0,1,3,2,0,1,2,6,81,2,0.02273,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,143,    previousTime      = interpolator.previousTime;,3,0,0,0,0,0,0,0,1,2,46,4,0.02273,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,144,    currentTime       = interpolator.currentTime;,3,0,0,0,0,0,0,0,1,2,45,4,0.02273,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,145,    h                 = interpolator.h;,3,0,0,0,0,0,0,0,1,2,35,4,0.02273,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,146,    interpolatedTime  = interpolator.interpolatedTime;,3,0,0,0,0,0,0,0,1,2,50,4,0.02273,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,148,    if (interpolator.currentState != null) {,2,1,0,1,3,1,0,0,0,5,40,4,0.02273,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,158,    finalized  = interpolator.finalized;,3,0,0,0,0,0,0,0,1,2,36,4,0.02273,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,159,    forward    = interpolator.forward;,3,0,0,0,0,0,0,0,1,2,34,4,0.02273,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,160,    dirtyState = interpolator.dirtyState;,3,0,0,0,0,0,0,0,1,2,37,4,0.02273,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,162,  },0,0,0,0,1,0,0,0,0,1,1,2,0.02273,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,190,     finalizeStep();,0,0,0,1,2,0,1,0,1,4,15,4,0.02273,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,193,     return doCopy();,0,0,0,1,2,1,1,0,1,5,16,4,0.02273,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,341,    if (! finalized) {,1,0,0,1,3,1,0,0,1,5,18,4,0.02273,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,342,      doFinalize();,0,0,0,1,2,0,1,0,1,4,13,6,0.02273,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,343,      finalized = true;,1,0,0,0,0,0,0,0,2,2,17,6,0.02273,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,345,  },0,0,0,0,1,0,0,0,0,1,1,2,0.02273,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,87,        stepHandlers.add(handler);,0,0,0,1,2,0,3,0,0,3,26,5,0.02174,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,88,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02174,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,124,            if (handler.requiresDenseOutput()) {,0,0,0,2,5,1,2,0,0,4,36,7,0.02174,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,217,    double yOnScale2 = 0;,1,0,0,0,0,1,0,0,0,2,21,5,0.02174,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,218,    double yDotOnScale2 = 0;,1,0,0,0,0,1,0,0,0,2,24,5,0.02174,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,219,    for (int j = 0; j < y0.length; ++j) {,5,1,0,1,3,2,0,0,1,6,37,4,0.02174,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,220,      ratio         = y0[j] / scale[j];,1,1,1,0,4,0,0,0,1,5,33,6,0.02174,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,221,      yOnScale2    += ratio * ratio;,3,1,0,0,0,0,0,0,1,3,30,6,0.02174,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,222,      ratio         = yDot0[j] / scale[j];,1,1,1,0,4,0,0,0,1,5,36,6,0.02174,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,223,      yDotOnScale2 += ratio * ratio;,3,1,0,0,0,0,0,0,1,3,30,6,0.02174,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,226,    double h = ((yOnScale2 < 1.0e-10) || (yDotOnScale2 < 1.0e-10)) ?,3,3,0,2,6,1,0,0,0,5,64,5,0.02174,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,228,    if (! forward) {,1,0,0,1,3,1,0,0,1,5,16,4,0.02174,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,233,    for (int j = 0; j < y0.length; ++j) {,5,1,0,1,3,2,0,0,1,6,37,4,0.02174,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,234,      y1[j] = y0[j] + h * yDot0[j];,1,2,1,0,6,0,0,0,1,5,29,6,0.02174,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,236,"    computeDerivatives(t0 + h, y1, yDot1);",2,1,0,0,2,0,3,0,1,5,38,4,0.02174,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,239,    double yDDotOnScale = 0;,1,0,0,0,0,1,0,0,0,2,24,5,0.02174,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,240,    for (int j = 0; j < y0.length; ++j) {,5,1,0,1,3,2,0,0,1,6,37,4,0.02174,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,241,      ratio         = (yDot1[j] - yDot0[j]) / scale[j];,1,2,1,1,8,0,0,0,1,6,49,6,0.02174,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,242,      yDDotOnScale += ratio * ratio;,3,1,0,0,0,0,0,0,1,3,30,6,0.02174,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,244,    yDDotOnScale = Math.sqrt(yDDotOnScale) / h;,2,1,0,1,2,0,3,0,1,6,43,4,0.02174,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,248,"    final double maxInv2 = Math.max(Math.sqrt(yDotOnScale2), yDDotOnScale);",1,0,0,1,4,2,6,0,1,6,71,4,0.02174,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,249,    final double h1 = (maxInv2 < 1.0e-15) ?,2,1,0,1,2,2,0,0,1,6,39,4,0.02174,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,252,"    h = Math.min(100.0 * Math.abs(h), h1);",1,1,0,1,4,0,6,0,1,6,38,4,0.02174,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,253,"    h = Math.max(h, 1.0e-12 * Math.abs(t0));  // avoids cancellation when computing t1 - t0",1,1,0,1,4,0,6,0,1,6,87,4,0.02174,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,254,    if (h < getMinStep()) {,1,1,0,2,5,1,1,0,1,7,23,4,0.02174,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,257,    if (h > getMaxStep()) {,1,1,0,2,5,1,1,0,1,7,23,4,0.02174,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,260,    if (! forward) {,1,0,0,1,3,1,0,0,1,5,16,4,0.02174,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,264,    return h;,1,0,0,0,0,1,0,0,0,2,9,4,0.02174,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,323,    return minStep;,1,0,0,0,0,1,0,0,0,2,15,4,0.02174,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,330,    return maxStep;,1,0,0,0,0,1,0,0,0,2,15,4,0.02174,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,226,        handler.reset();,0,0,0,1,2,0,2,0,0,3,16,7,0.02174,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,227,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02174,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,183,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02128,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,209,    if (initialStep > 0) {,1,1,0,1,3,1,0,0,0,5,22,4,0.02128,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,280,      double filteredH = h;,2,0,0,0,0,1,0,0,0,2,21,5,0.02128,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,281,      if (Math.abs(h) < minStep) {,1,1,0,2,5,1,3,0,0,6,28,4,0.02128,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,244,        if (firstTime) {,1,0,0,1,3,1,0,0,0,4,16,8,0.02128,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,246,          if (vecAbsoluteTolerance == null) {,1,1,0,1,3,1,0,0,0,5,35,10,0.02128,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,252,"          hNew = initializeStep(equations, forward, getOrder(), scale,",1,0,0,1,3,0,5,0,3,5,60,10,0.02128,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,254,          firstTime = false;,1,0,0,0,0,0,0,0,2,2,18,10,0.02128,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,257,        stepSize = hNew;,2,0,0,0,0,0,0,0,1,2,16,8,0.02128,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,260,        for (int k = 1; k < stages; ++k) {,4,1,0,1,3,2,0,0,1,6,34,8,0.02128,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,262,          for (int j = 0; j < y0.length; ++j) {,5,1,0,1,3,2,0,0,1,6,37,10,0.02128,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,263,            double sum = a[k-1][0] * yDotK[0][j];,2,2,1,0,8,1,0,0,0,5,37,13,0.02128,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,264,            for (int l = 1; l < k; ++l) {,4,1,0,1,3,2,0,0,1,6,29,12,0.02128,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,265,              sum += a[k-1][l] * yDotK[l][j];,2,2,1,0,8,0,0,0,1,5,31,14,0.02128,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,267,            yTmp[j] = y[j] + stepSize * sum;,2,2,1,0,4,0,0,0,1,5,32,12,0.02128,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,270,"          computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);",3,3,1,0,6,0,2,0,1,6,66,10,0.02128,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,275,        for (int j = 0; j < y0.length; ++j) {,5,1,0,1,3,2,0,0,1,6,37,8,0.02128,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,276,          double sum    = b[0] * yDotK[0][j];,1,1,1,0,6,1,0,0,0,5,35,11,0.02128,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,277,          for (int l = 1; l < stages; ++l) {,4,1,0,1,3,2,0,0,1,6,34,10,0.02128,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,278,            sum    += b[l] * yDotK[l][j];,1,1,1,0,6,0,0,0,1,5,29,12,0.02128,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,280,          yTmp[j] = y[j] + stepSize * sum;,2,2,1,0,4,0,0,0,1,5,32,10,0.02128,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,284,"        error = estimateError(yDotK, y, yTmp, stepSize);",1,0,0,0,2,0,5,0,2,4,48,8,0.02128,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,285,        if (error <= 1.0) {,1,1,0,1,3,1,0,0,0,5,19,8,0.02128,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,123,        for (StepHandler handler : stepHandlers) {,2,0,0,1,3,1,0,1,0,5,42,4,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,167,        this.equations = equations;,2,0,0,0,0,1,0,0,1,3,27,4,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,168,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,179,        if (++evaluations > maxEvaluations) {,2,1,0,1,3,1,0,0,1,6,37,4,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,182,"        equations.computeDerivatives(t, y, yDot);",0,0,0,0,2,0,5,0,0,2,41,5,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,233,        CombinedEventsManager newManager = new CombinedEventsManager();,1,0,0,1,2,1,0,2,1,6,63,4,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,234,        for (final EventState state : manager.getEventsStates()) {,1,0,0,2,5,2,2,1,1,7,58,4,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,240,"        newManager.addEventHandler(new EndTimeChecker(endTime),",1,0,0,1,3,1,2,1,1,7,55,5,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,244,        return newManager;,1,0,0,0,0,1,0,0,0,2,18,4,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,256,        public EndTimeChecker(final double endTime) {,2,0,0,1,3,3,0,0,2,5,45,3,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,257,            this.endTime = endTime;,2,0,0,0,0,1,0,0,1,3,23,5,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,258,        },0,0,0,0,1,0,0,0,0,1,1,2,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,71,"        states.add(new EventState(handler, maxCheckInterval,",2,0,0,0,2,1,2,1,1,6,52,5,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,73,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,102,        return states;,1,0,0,0,0,1,0,0,0,2,14,4,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,95,"                      final double convergence, final int maxIterationCount) {",2,0,0,0,2,4,0,0,2,4,56,3,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,96,        this.handler           = handler;,2,0,0,0,0,1,0,0,1,3,33,4,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,97,        this.maxCheckInterval  = maxCheckInterval;,2,0,0,0,0,1,0,0,1,3,42,4,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,98,        this.convergence       = Math.abs(convergence);,1,0,0,1,2,1,3,0,1,6,47,4,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,99,        this.maxIterationCount = maxIterationCount;,2,0,0,0,0,1,0,0,1,3,43,4,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,102,        t0                = Double.NaN;,3,0,0,0,0,0,0,0,1,2,31,4,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,103,        g0                = Double.NaN;,3,0,0,0,0,0,0,0,1,2,31,4,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,104,        g0Positive        = true;,1,0,0,0,0,0,0,0,2,2,25,4,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,105,        pendingEvent      = false;,1,0,0,0,0,0,0,0,2,2,26,4,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,106,        pendingEventTime  = Double.NaN;,3,0,0,0,0,0,0,0,1,2,31,4,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,107,        previousEventTime = Double.NaN;,3,0,0,0,0,0,0,0,1,2,31,4,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,108,        increasing        = true;,1,0,0,0,0,0,0,0,2,2,25,4,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,109,        nextAction        = EventHandler.CONTINUE;,3,0,0,0,0,0,0,0,1,2,42,4,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,111,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,93,    super(name);,1,0,0,1,2,1,0,0,1,5,12,3,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,95,    this.minStep     = Math.abs(minStep);,1,0,0,1,2,1,3,0,1,6,37,4,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,96,    this.maxStep     = Math.abs(maxStep);,1,0,0,1,2,1,3,0,1,6,37,4,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,97,    this.initialStep = -1.0;,1,0,0,0,0,1,0,0,2,3,24,4,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,99,    this.scalAbsoluteTolerance = scalAbsoluteTolerance;,2,0,0,0,0,1,0,0,1,3,51,4,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,100,    this.scalRelativeTolerance = scalRelativeTolerance;,2,0,0,0,0,1,0,0,1,3,51,4,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,101,    this.vecAbsoluteTolerance  = null;,1,0,0,0,0,1,0,0,1,3,34,4,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,102,    this.vecRelativeTolerance  = null;,1,0,0,0,0,1,0,0,1,3,34,4,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,104,    resetInternalState();,0,0,0,1,2,0,1,0,1,4,21,4,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,106,  },0,0,0,0,1,0,0,0,0,1,1,2,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,187,  },0,0,0,0,1,0,0,0,0,1,1,2,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,116,"    super(name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);",5,0,0,0,2,1,0,0,1,4,76,3,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,118,    this.fsal      = fsal;,2,0,0,0,0,1,0,0,1,3,22,4,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,119,    this.c         = c;,2,0,0,0,0,1,0,0,1,3,19,4,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,120,    this.a         = a;,2,0,0,0,0,1,0,0,1,3,19,4,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,121,    this.b         = b;,2,0,0,0,0,1,0,0,1,3,19,4,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,122,    this.prototype = prototype;,2,0,0,0,0,1,0,0,1,3,27,4,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,124,    exp = -1.0 / getOrder();,1,1,0,1,2,0,1,0,3,6,24,4,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,127,    setSafety(0.9);,0,0,0,1,2,0,1,0,1,4,15,4,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,128,    setMinReduction(0.2);,0,0,0,1,2,0,1,0,1,4,21,4,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,129,    setMaxGrowth(10.0);,0,0,0,1,2,0,1,0,1,4,19,4,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,131,  },0,0,0,0,1,0,0,0,0,1,1,2,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,198,    setEquations(equations);,0,0,0,1,2,0,2,0,1,4,24,4,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,199,    resetEvaluations();,0,0,0,1,2,0,1,0,1,4,19,4,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,200,    final boolean forward = t > t0;,3,1,0,0,0,2,0,0,1,4,31,4,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,203,    final int stages = c.length + 1;,3,1,0,0,0,2,0,0,1,4,32,4,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,204,    if (y != y0) {,2,1,0,1,3,1,0,0,0,5,14,4,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,205,"      System.arraycopy(y0, 0, y, 0, y0.length);",2,0,0,0,2,0,4,0,0,3,41,7,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,207,    final double[][] yDotK = new double[stages][y0.length];,3,0,1,0,8,4,0,0,1,5,55,4,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,208,    final double[] yTmp = new double[y0.length];,3,0,0,0,4,4,0,0,1,4,44,4,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,212,    if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) {,0,1,0,3,9,1,3,0,2,6,67,4,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,219,    interpolator.storeTime(t0);,0,0,0,1,2,0,3,0,0,3,27,5,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,222,    stepStart         = t0;,2,0,0,0,0,0,0,0,1,2,23,4,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,223,    double  hNew      = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,224,    boolean firstTime = true;,1,0,0,0,0,1,0,0,1,3,25,5,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,225,    for (StepHandler handler : stepHandlers) {,2,0,0,1,3,1,0,1,0,5,42,4,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,228,"    CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);",1,0,0,0,2,0,4,1,1,5,80,4,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,229,    boolean lastStep = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,232,    while (!lastStep) {,1,0,0,1,3,1,0,0,1,5,19,4,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,234,      interpolator.shift();,0,0,0,1,2,0,2,0,0,3,21,7,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,236,      double error = 0;,1,0,0,0,0,1,0,0,0,2,17,7,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,237,      for (boolean loop = true; loop;) {,2,0,0,1,3,2,0,0,1,5,34,6,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,239,        if (firstTime || !fsal) {,2,1,0,1,3,1,0,0,1,6,25,8,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,241,"          computeDerivatives(stepStart, y, yDotK[0]);",0,0,1,0,4,0,3,0,1,4,43,10,0.02083,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,218,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02041,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,211,    previousTime = currentTime;,2,0,0,0,0,0,0,0,1,2,27,4,0.02041,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,212,  },0,0,0,0,1,0,0,0,0,1,1,2,0.02041,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,219,    currentTime = t;,2,0,0,0,0,0,0,0,1,2,16,4,0.02041,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,220,    h           = currentTime - previousTime;,3,1,0,0,0,0,0,0,1,3,41,4,0.02041,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,221,    setInterpolatedTime(t);,0,0,0,1,2,0,2,0,1,4,23,4,0.02041,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,224,    finalized  = false;,1,0,0,0,0,0,0,0,2,2,19,4,0.02041,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,226,  },0,0,0,0,1,0,0,0,0,1,1,2,0.02041,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,245,      interpolatedTime = time;,2,0,0,0,0,0,0,0,1,2,24,4,0.02041,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,246,      dirtyState       = true;,1,0,0,0,0,0,0,0,2,2,24,4,0.02041,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,247,  },0,0,0,0,1,0,0,0,0,1,1,2,0.02041,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,173,      if ((vecAbsoluteTolerance != null) && (vecAbsoluteTolerance.length != y0.length)) {,5,3,0,2,7,1,0,0,0,5,83,4,0.02041,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,180,      if ((vecRelativeTolerance != null) && (vecRelativeTolerance.length != y0.length)) {,5,3,0,2,7,1,0,0,0,5,83,4,0.02041,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,205,        if (ode.getDimension() != y.length) {,2,1,0,2,5,1,2,0,0,6,37,4,0.02,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,212,"        if (Math.abs(t - t0) <= 1.0e-12 * Math.max(Math.abs(t0), Math.abs(t))) {",2,3,0,1,11,1,10,0,0,6,72,4,0.02,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,197,"    sanityChecks(equations, t0, y0, t, y);",0,0,0,0,2,0,6,0,1,3,38,4,0.01923,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,198,        if (ode.getDimension() != y0.length) {,2,1,0,2,5,1,2,0,0,6,38,4,0.01852,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,171,"      super.sanityChecks(equations, t0, y0, t, y);",6,0,0,0,2,1,0,0,0,3,44,5,0.01852,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,64,    public AbstractIntegrator(final String name) {,2,0,0,1,3,2,0,1,2,6,46,2,0.01818,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,65,        this.name = name;,2,0,0,0,0,1,0,0,1,3,17,4,0.01818,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,66,        stepHandlers = new ArrayList<StepHandler>();,1,0,0,1,2,1,0,2,2,6,44,4,0.01818,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,67,        stepStart = Double.NaN;,3,0,0,0,0,0,0,0,1,2,23,4,0.01818,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,68,        stepSize  = Double.NaN;,3,0,0,0,0,0,0,0,1,2,23,4,0.01818,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,69,        eventsHandlersManager = new CombinedEventsManager();,1,0,0,1,2,1,0,1,2,6,52,4,0.01818,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,70,        setMaxEvaluations(-1);,0,0,0,1,2,0,1,0,2,4,22,4,0.01818,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,71,        resetEvaluations();,0,0,0,1,2,0,1,0,1,4,19,4,0.01818,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,72,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01818,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,143,        this.maxEvaluations = (maxEvaluations < 0) ? Integer.MAX_VALUE : maxEvaluations;,5,1,0,1,2,1,0,0,1,6,80,4,0.01818,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,144,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01818,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,159,        evaluations = 0;,1,0,0,0,0,0,0,0,1,2,16,4,0.01818,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,160,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01818,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,52,    public CombinedEventsManager() {,1,0,0,1,3,1,0,0,1,5,32,2,0.01818,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,53,        states      = new ArrayList<EventState>();,1,0,0,1,2,1,0,2,2,6,42,4,0.01818,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,54,        first       = null;,1,0,0,0,0,0,0,0,1,2,19,4,0.01818,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,55,        initialized = false;,1,0,0,0,0,0,0,0,2,2,20,4,0.01818,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,56,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01818,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,89,  protected AbstractStepInterpolator() {,1,0,0,1,3,1,0,0,1,5,38,2,0.01818,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,90,    previousTime            = Double.NaN;,3,0,0,0,0,0,0,0,1,2,37,4,0.01818,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,91,    currentTime             = Double.NaN;,3,0,0,0,0,0,0,0,1,2,37,4,0.01818,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,92,    h                       = Double.NaN;,3,0,0,0,0,0,0,0,1,2,37,4,0.01818,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,93,    interpolatedTime        = Double.NaN;,3,0,0,0,0,0,0,0,1,2,37,4,0.01818,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,94,    currentState            = null;,1,0,0,0,0,0,0,0,1,2,31,4,0.01818,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,95,    interpolatedState       = null;,1,0,0,0,0,0,0,0,1,2,31,4,0.01818,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,96,    interpolatedDerivatives = null;,1,0,0,0,0,0,0,0,1,2,31,4,0.01818,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,97,    finalized               = false;,1,0,0,0,0,0,0,0,2,2,32,4,0.01818,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,98,    this.forward            = true;,1,0,0,0,0,1,0,0,2,3,31,4,0.01818,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,99,    this.dirtyState         = true;,1,0,0,0,0,1,0,0,2,3,31,4,0.01818,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,100,  },0,0,0,0,1,0,0,0,0,1,1,2,0.01818,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,315,    stepStart = Double.NaN;,3,0,0,0,0,0,0,0,1,2,23,4,0.01818,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,316,    stepSize  = Math.sqrt(minStep * maxStep);,3,1,0,1,2,0,2,0,1,6,41,4,0.01818,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,317,  },0,0,0,0,1,0,0,0,0,1,1,2,0.01818,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,74,57,    super();,0,0,0,1,2,1,0,0,1,4,8,3,0.01818,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,74,58,    yDotK      = null;,1,0,0,0,0,0,0,0,1,2,18,4,0.01818,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,74,59,    integrator = null;,1,0,0,0,0,0,0,0,1,2,18,4,0.01818,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,74,60,  },0,0,0,0,1,0,0,0,0,1,1,2,0.01818,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,187,    this.safety = safety;,2,0,0,0,0,1,0,0,1,3,21,4,0.01818,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,188,  },0,0,0,0,1,0,0,0,0,1,1,2,0.01818,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,372,    this.minReduction = minReduction;,2,0,0,0,0,1,0,0,1,3,33,4,0.01818,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,373,  },0,0,0,0,1,0,0,0,0,1,1,2,0.01818,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,386,    this.maxGrowth = maxGrowth;,2,0,0,0,0,1,0,0,1,3,27,4,0.01818,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,387,  },0,0,0,0,1,0,0,0,0,1,1,2,0.01818,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,259,        return new EOFException() {,0,0,0,1,3,2,0,1,1,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,267,"                return buildMessage(Locale.US, pattern, arguments);",2,0,0,0,2,1,3,0,1,5,51,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,273,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,59,"    public MathRuntimeException(final String pattern, final Object ... arguments) {",3,0,0,0,3,3,0,2,3,5,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,60,        this.pattern   = pattern;,2,0,0,0,0,1,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,61,        this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,2,1,0,1,6,2,2,1,1,8,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,62,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,72,        super(rootCause);,1,0,0,1,2,1,0,0,1,5,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,73,        this.pattern   = getMessage();,1,0,0,1,2,1,1,0,2,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,74,        this.arguments = new Object[0];,1,0,0,0,2,2,0,1,1,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,75,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,88,        super(rootCause);,1,0,0,1,2,1,0,0,1,5,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,89,        this.pattern   = pattern;,2,0,0,0,0,1,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,90,        this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,2,1,0,1,6,2,2,1,1,8,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,91,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,102,            ResourceBundle bundle =,1,0,0,0,0,0,0,1,0,2,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,104,            if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {,0,0,0,3,11,1,6,0,0,4,68,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,106,                return bundle.getString(s);,0,0,0,1,2,1,3,0,0,4,27,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,111,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,109,        } catch (MissingResourceException mre) {,1,0,0,1,4,1,0,1,0,5,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,115,        return s;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,128,"        return (pattern == null) ? """" : new MessageFormat(translate(pattern, locale), locale).format(arguments);",2,1,0,1,8,2,5,1,3,8,104,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,136,        return pattern;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,144,        return arguments.clone();,0,0,0,1,2,1,2,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,154,"        return buildMessage(locale, pattern, arguments);",0,0,0,0,2,1,4,0,1,4,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,160,        return getMessage(Locale.US);,2,0,0,1,2,1,1,0,1,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,166,        return getMessage(Locale.getDefault());,0,0,0,2,4,1,3,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,174,        printStackTrace(System.err);,2,0,0,1,2,0,1,0,1,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,175,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,184,        synchronized (out) {,1,0,0,1,3,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,185,"            PrintWriter pw = new PrintWriter(out, false);",2,0,0,0,2,1,0,2,2,5,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,186,            printStackTrace(pw);,0,0,0,1,2,0,2,0,1,4,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,188,            pw.flush();,0,0,0,1,2,0,2,0,0,3,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,189,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,190,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,201,        return new ArithmeticException() {,0,0,0,1,3,2,0,1,1,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,230,        return new ArrayIndexOutOfBoundsException() {,0,0,0,1,3,2,0,1,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,259,        return new EOFException() {,0,0,0,1,3,2,0,1,1,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,291,        IOException ioe = new IOException(rootCause.getLocalizedMessage());,1,0,0,2,4,1,2,2,1,7,67,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,292,        ioe.initCause(rootCause);,0,0,0,1,2,0,3,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,293,        return ioe;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,305,        return new IllegalArgumentException() {,0,0,0,1,3,2,0,1,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,333,        IllegalArgumentException iae = new IllegalArgumentException(rootCause.getLocalizedMessage());,1,0,0,2,4,1,2,2,1,7,93,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,334,        iae.initCause(rootCause);,0,0,0,1,2,0,3,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,335,        return iae;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,347,        return new IllegalStateException() {,0,0,0,1,3,2,0,1,1,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,376,        return new ConcurrentModificationException() {,0,0,0,1,3,2,0,1,1,5,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,405,        return new NoSuchElementException() {,0,0,0,1,3,2,0,1,1,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,434,        return new NullPointerException() {,0,0,0,1,3,2,0,1,1,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,466,"        return new ParseException(null, offset) {",1,0,0,0,3,2,0,1,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,492,"        final String pattern  = ""internal error, please fill a bug report at {0}"";",1,0,0,0,2,1,0,1,2,5,74,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,493,"        final String argument = ""https://issues.apache.org/jira/browse/MATH"";",1,0,0,0,0,1,0,1,2,4,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,495,        return new RuntimeException() {,0,0,0,1,3,2,0,1,1,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,37,public class MathRuntimeException extends RuntimeException {,1,0,0,0,1,3,0,1,1,5,60,1,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,74,73,        return iterationCount;,1,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,74,83,        return absoluteAccuracy;,1,0,0,0,0,1,0,0,0,2,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,74,88,        absoluteAccuracy = defaultAbsoluteAccuracy;,2,0,0,0,0,0,0,0,1,2,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,74,89,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,74,98,        return maximalIterationCount;,1,0,0,0,0,1,0,0,0,2,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,74,103,        maximalIterationCount = defaultMaximalIterationCount;,2,0,0,0,0,0,0,0,1,2,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,74,104,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,74,108,        relativeAccuracy = accuracy;,2,0,0,0,0,0,0,0,1,2,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,74,109,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,74,113,        return relativeAccuracy;,1,0,0,0,0,1,0,0,0,2,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,74,118,        relativeAccuracy = defaultRelativeAccuracy;,2,0,0,0,0,0,0,0,1,2,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,74,119,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,74,55,    public MathException() {,1,0,0,1,3,1,0,0,1,5,24,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,74,56,        this.pattern   = null;,1,0,0,0,0,1,0,0,1,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,74,57,        this.arguments = new Object[0];,1,0,0,0,2,2,0,1,1,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,74,58,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,74,67,"    public MathException(String pattern, Object ... arguments) {",3,0,0,0,3,1,0,2,1,5,60,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,74,68,      this.pattern   = pattern;,2,0,0,0,0,1,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,74,69,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,2,1,0,1,6,2,2,1,1,8,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,74,70,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,74,96,      super(rootCause);,1,0,0,1,2,1,0,0,1,5,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,74,97,      this.pattern   = pattern;,2,0,0,0,0,1,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,74,98,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,2,1,0,1,6,2,2,1,1,8,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,74,99,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,74,110,            ResourceBundle bundle =,1,0,0,0,0,0,0,1,0,2,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,74,112,            if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {,0,0,0,3,11,1,6,0,0,4,68,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,74,114,                return bundle.getString(s);,0,0,0,1,2,1,3,0,0,4,27,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,74,119,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,74,117,        } catch (MissingResourceException mre) {,1,0,0,1,4,1,0,1,0,5,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,74,123,        return s;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,74,133,        return pattern;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,74,142,        return arguments.clone();,0,0,0,1,2,1,2,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,74,165,        return getMessage(Locale.getDefault());,0,0,0,2,4,1,3,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,74,173,        printStackTrace(System.err);,2,0,0,1,2,0,1,0,1,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,74,174,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,74,183,        synchronized (out) {,1,0,0,1,3,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,74,184,"            PrintWriter pw = new PrintWriter(out, false);",2,0,0,0,2,1,0,2,2,5,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,74,185,            printStackTrace(pw);,0,0,0,1,2,0,2,0,1,4,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,74,187,            pw.flush();,0,0,0,1,2,0,2,0,0,3,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,74,188,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,74,189,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,230,        return new ArrayIndexOutOfBoundsException() {,0,0,0,1,3,2,0,1,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,238,"                return buildMessage(Locale.US, pattern, arguments);",2,0,0,0,2,1,3,0,1,5,51,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,244,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,434,        return new NullPointerException() {,0,0,0,1,3,2,0,1,1,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,442,"                return buildMessage(Locale.US, pattern, arguments);",2,0,0,0,2,1,3,0,1,5,51,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,448,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,466,"        return new ParseException(null, offset) {",1,0,0,0,3,2,0,1,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,474,"                return buildMessage(Locale.US, pattern, arguments);",2,0,0,0,2,1,3,0,1,5,51,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,480,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,74,74,"        super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);",2,0,0,0,2,1,0,0,1,4,61,3,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,74,75,        if (f == null) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,74,76,"            throw MathRuntimeException.createIllegalArgumentException(""function to solve cannot be null"");",0,0,0,1,2,1,2,0,1,5,94,7,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,74,78,        this.f = f;,2,0,0,0,0,1,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,74,79,        this.defaultFunctionValueAccuracy = 1.0e-15;,1,0,0,0,0,1,0,0,1,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,74,80,        this.functionValueAccuracy = defaultFunctionValueAccuracy;,2,0,0,0,0,1,0,0,1,3,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,74,81,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,74,102,        if (!resultComputed) {,1,0,0,1,3,1,0,0,1,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,74,103,"            throw MathRuntimeException.createIllegalStateException(""no result available"");",0,0,0,1,2,1,2,0,1,5,78,7,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,74,105,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,74,109,        checkResultComputed();,0,0,0,1,2,0,1,0,1,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,74,110,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,74,115,        checkResultComputed();,0,0,0,1,2,0,1,0,1,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,74,116,        return functionValue;,1,0,0,0,0,1,0,0,0,2,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,74,121,        functionValueAccuracy = accuracy;,2,0,0,0,0,0,0,0,1,2,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,74,122,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,74,126,        return functionValueAccuracy;,1,0,0,0,0,1,0,0,0,2,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,74,131,        functionValueAccuracy = defaultFunctionValueAccuracy;,2,0,0,0,0,0,0,0,1,2,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,74,132,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,74,155,        this.result         = x;,2,0,0,0,0,1,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,74,156,        this.functionValue  = fx;,2,0,0,0,0,1,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,74,157,        this.iterationCount = iterationCount;,2,0,0,0,0,1,0,0,1,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,74,158,        this.resultComputed = true;,1,0,0,0,0,1,0,0,2,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,74,159,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,74,182,        final double f1 = function.value(lower);,1,0,0,1,2,2,3,0,1,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,74,183,        final double f2 = function.value(upper);,1,0,0,1,2,2,3,0,1,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,74,184,        return (f1 > 0 && f2 < 0) || (f1 < 0 && f2 > 0);,4,7,0,1,4,1,0,0,0,5,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,74,196,        return (start < mid) && (mid < end);,4,3,0,1,4,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,74,209,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,74,225,"        if (!isSequence(lower, initial, upper)) {",0,0,0,0,5,1,4,0,2,4,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,74,226,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,74,230,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,74,247,"        verifyInterval(lower, upper);",0,0,0,0,2,0,3,0,1,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,74,248,"        if (!isBracketing(lower, upper, function)) {",0,0,0,0,5,1,4,0,2,4,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,74,249,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,74,254,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,49,"        super(f, 100, 1E-6);",1,0,0,0,2,1,0,0,1,4,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,50,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,63,"        return solve(f, min, max);",0,0,0,0,2,1,4,0,1,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,70,"        return solve(f, min, max, initial);",0,0,0,0,2,1,5,0,1,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,97,        clearResult();,0,0,0,1,2,0,1,0,1,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,98,"        verifySequence(min, initial, max);",0,0,0,0,2,0,4,0,1,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,101,        double yInitial = f.value(initial);,1,0,0,1,2,1,3,0,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,102,        if (Math.abs(yInitial) <= functionValueAccuracy) {,1,1,0,2,5,1,3,0,0,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,103,"            setResult(initial, 0);",0,0,0,0,2,0,2,0,1,3,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,104,            return result;,1,0,0,0,0,1,0,0,0,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,108,        double yMin = f.value(min);,1,0,0,1,2,1,3,0,0,5,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,109,        if (Math.abs(yMin) <= functionValueAccuracy) {,1,1,0,2,5,1,3,0,0,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,110,"            setResult(yMin, 0);",0,0,0,0,2,0,2,0,1,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,111,            return result;,1,0,0,0,0,1,0,0,0,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,115,        if (yInitial * yMin < 0) {,2,2,0,1,3,1,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,116,"            return solve(f, min, yMin, initial, yInitial, min, yMin);",0,0,0,0,2,1,8,0,1,4,57,6,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,120,        double yMax = f.value(max);,1,0,0,1,2,1,3,0,0,5,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,121,        if (Math.abs(yMax) <= functionValueAccuracy) {,1,1,0,2,5,1,3,0,0,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,122,"            setResult(yMax, 0);",0,0,0,0,2,0,2,0,1,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,123,            return result;,1,0,0,0,0,1,0,0,0,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,127,        if (yInitial * yMax < 0) {,2,2,0,1,3,1,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,128,"            return solve(f, initial, yInitial, max, yMax, initial, yInitial);",0,0,0,0,2,1,8,0,1,4,65,6,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,132,"        return solve(f, min, yMin, max, yMax, initial, yInitial);",0,0,0,0,2,1,8,0,1,4,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,170,            if (Math.abs(yMin) <= functionValueAccuracy) {,1,1,0,2,5,1,3,0,0,6,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,171,"                setResult(min, 0);",0,0,0,0,2,0,2,0,1,3,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,172,                ret = min;,2,0,0,0,0,0,0,0,1,2,10,8,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,173,            } else if (Math.abs(yMax) <= functionValueAccuracy) {,1,1,0,2,6,2,3,0,0,6,53,7,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,174,"                setResult(max, 0);",0,0,0,0,2,0,2,0,1,3,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,175,                ret = max;,2,0,0,0,0,0,0,0,1,2,10,9,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,178,                throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,10,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,188,            if (yMin == 0.0) {,1,1,0,1,3,1,0,0,0,5,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,189,                ret = min;,2,0,0,0,0,0,0,0,1,2,10,9,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,191,                ret = max;,2,0,0,0,0,0,0,0,1,2,10,9,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,246,"                setResult(x1, i);",0,0,0,0,2,0,3,0,1,3,17,8,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,247,                return result;,1,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,252,                delta = 0.5 * dx;,2,1,0,0,0,0,0,0,1,3,17,8,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,253,                oldDelta = delta;,2,0,0,0,0,0,0,0,1,2,17,8,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,267,                    double r1 = y0 / y2;,3,1,0,0,0,1,0,0,0,3,20,11,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,268,                    double r2 = y1 / y2;,3,1,0,0,0,1,0,0,0,3,20,11,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,269,                    p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));,9,7,0,2,8,0,0,0,1,5,56,10,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,270,                    p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);,4,4,0,1,6,0,0,0,1,5,42,10,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,282,                    delta = 0.5 * dx;,2,1,0,0,0,0,0,0,1,3,17,10,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,283,                    oldDelta = delta;,2,0,0,0,0,0,0,0,1,2,17,10,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,295,            } else if (dx > 0.0) {,1,1,0,1,4,2,0,0,0,5,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,296,                x1 = x1 + 0.5 * tolerance;,3,2,0,0,0,0,0,0,1,3,26,9,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,297,            } else if (dx <= 0.0) {,1,1,0,1,4,2,0,0,0,5,23,8,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,298,                x1 = x1 - 0.5 * tolerance;,3,2,0,0,0,0,0,0,1,3,26,10,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,74,309,        throw new MaxIterationsExceededException(maximalIterationCount);,1,0,0,1,2,2,0,1,1,6,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,74,43,"        super(""Maximal number of iterations ({0}) exceeded"", maxIterations);",1,0,0,1,6,1,0,0,2,5,68,3,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,74,44,        this.maxIterations = maxIterations;,2,0,0,0,0,1,0,0,1,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,74,45,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,74,56,"        super(pattern, arguments);",2,0,0,0,2,1,0,0,1,4,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,74,57,        this.maxIterations = maxIterations;,2,0,0,0,0,1,0,0,1,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,74,58,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,74,64,        return maxIterations;,1,0,0,0,0,1,0,0,0,2,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,74,34,"        super(""Convergence failed"");",0,0,0,1,2,1,0,0,2,4,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,74,35,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,74,45,"        super(pattern, arguments);",2,0,0,0,2,1,0,0,1,4,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,74,46,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,74,53,        super(cause);,1,0,0,1,2,1,0,0,1,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,74,54,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,74,65,"        super(cause, pattern, arguments);",3,0,0,0,2,1,0,0,1,4,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,74,66,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,74,48,"        super(FAILED_EVALUATION_MESSAGE, argument);",2,0,0,0,2,1,0,0,1,4,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,74,49,        this.argument = new double[] { argument };,2,0,0,0,4,3,0,0,1,4,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,74,50,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,74,60,"        super(FAILED_EVALUATION_MESSAGE, new ArrayRealVector(argument));",2,0,0,1,4,2,0,1,2,6,64,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,74,61,        this.argument = argument.clone();,1,0,0,1,2,1,2,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,74,62,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,74,74,"        super(pattern, arguments);",2,0,0,0,2,1,0,0,1,4,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,74,75,        this.argument = new double[] { argument };,2,0,0,0,4,3,0,0,1,4,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,74,76,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,74,88,"        super(pattern, arguments);",2,0,0,0,2,1,0,0,1,4,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,74,89,        this.argument = argument.clone();,1,0,0,1,2,1,2,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,74,90,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,74,100,        super(cause);,1,0,0,1,2,1,0,0,1,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,74,101,        this.argument = new double[] { argument };,2,0,0,0,4,3,0,0,1,4,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,74,102,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,74,112,        super(cause);,1,0,0,1,2,1,0,0,1,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,74,113,        this.argument = argument.clone();,1,0,0,1,2,1,2,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,74,114,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,74,128,"        super(cause, pattern, arguments);",3,0,0,0,2,1,0,0,1,4,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,74,129,        this.argument = new double[] { argument };,2,0,0,0,4,3,0,0,1,4,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,74,130,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,74,144,"        super(cause, pattern, arguments);",3,0,0,0,2,1,0,0,1,4,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,74,145,        this.argument = argument.clone();,1,0,0,1,2,1,2,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,74,146,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,74,154,        return argument.clone();,0,0,0,1,2,1,2,0,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,201,        return new ArithmeticException() {,0,0,0,1,3,2,0,1,1,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,209,"                return buildMessage(Locale.US, pattern, arguments);",2,0,0,0,2,1,3,0,1,5,51,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,215,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,347,        return new IllegalStateException() {,0,0,0,1,3,2,0,1,1,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,355,"                return buildMessage(Locale.US, pattern, arguments);",2,0,0,0,2,1,3,0,1,5,51,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,361,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor,74,54,        return value;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor,74,49,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor,74,54,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,106,"        this(num, BigInteger.ONE);",3,0,0,0,2,1,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,107,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,126,"            throw MathRuntimeException.createNullPointerException(""numerator is null"");",0,0,0,1,2,1,2,0,1,5,75,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,129,"            throw MathRuntimeException.createNullPointerException(""denominator is null"");",0,0,0,1,2,1,2,0,1,5,77,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,132,            throw MathRuntimeException.createArithmeticException(FORBIDDEN_ZERO_DENOMINATOR);,0,0,0,1,2,1,3,0,0,4,81,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,180,    public BigFraction(final double value) throws IllegalArgumentException {,3,0,0,1,3,4,0,0,2,5,72,2,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,181,        if (Double.isNaN(value)) {,0,0,0,2,5,1,3,0,0,4,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,182,"            throw MathRuntimeException.createIllegalArgumentException(""cannot convert NaN value"");",0,0,0,1,2,1,2,0,1,5,86,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,184,        if (Double.isInfinite(value)) {,0,0,0,2,5,1,3,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,185,"            throw MathRuntimeException.createIllegalArgumentException(""cannot convert infinite value"");",0,0,0,1,2,1,2,0,1,5,91,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,189,        final long bits     = Double.doubleToLongBits(value);,1,0,0,1,2,2,3,0,1,6,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,190,        final long sign     = bits & 0x8000000000000000L;,2,1,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,191,        final long exponent = bits & 0x7ff0000000000000L;,2,1,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,192,        long m              = bits & 0x000fffffffffffffL;,2,1,0,0,0,1,0,0,0,3,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,193,        if (exponent != 0) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,195,            m |= 0x0010000000000000L;,1,0,0,0,0,0,0,0,1,2,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,197,        if (sign != 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,198,            m = -m;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,200,        int k = ((int) (exponent >> 52)) - 1075;,2,2,0,2,6,2,0,0,0,5,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,201,        while (((m & 0x001ffffffffffffeL) != 0) && ((m & 0x1) == 0)) {,2,5,0,3,11,1,0,0,0,5,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,202,            m = m >> 1;,2,1,0,0,0,0,0,0,1,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,203,            ++k;,1,0,0,0,0,0,0,0,1,2,4,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,206,        if (k < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,207,            numerator   = BigInteger.valueOf(m);,1,0,0,1,2,0,3,0,1,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,208,            denominator = BigInteger.ZERO.flipBit(-k);,4,0,0,1,2,0,1,0,2,5,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,210,            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));,3,0,0,2,6,0,6,0,1,5,73,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,211,            denominator = BigInteger.ONE;,3,0,0,0,0,0,0,0,1,2,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,214,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,240,"        this(value, epsilon, Integer.MAX_VALUE, maxIterations);",5,0,0,0,2,1,0,0,0,3,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,241,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,279,        throws FractionConversionException {,1,0,0,0,1,1,0,0,0,3,36,2,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,280,        long overflow = Integer.MAX_VALUE;,3,0,0,0,0,1,0,0,0,2,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,281,        double r0 = value;,2,0,0,0,0,1,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,282,        long a0 = (long) Math.floor(r0);,1,0,0,1,4,2,3,0,0,5,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,283,        if (a0 > overflow) {,2,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,284,"            throw new FractionConversionException(value, a0, 1l);",2,0,0,0,2,2,0,1,1,5,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,289,        if (Math.abs(a0 - value) < epsilon) {,3,2,0,2,5,1,2,0,0,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,290,            numerator = BigInteger.valueOf(a0);,1,0,0,1,2,0,3,0,1,5,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,291,            denominator = BigInteger.ONE;,3,0,0,0,0,0,0,0,1,2,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,292,            return;,0,0,0,0,0,1,0,0,1,2,7,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,295,        long p0 = 1;,1,0,0,0,0,1,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,296,        long q0 = 0;,1,0,0,0,0,1,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,297,        long p1 = a0;,2,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,298,        long q1 = 1;,1,0,0,0,0,1,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,300,        long p2 = 0;,1,0,0,0,0,1,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,301,        long q2 = 1;,1,0,0,0,0,1,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,303,        int n = 0;,1,0,0,0,0,1,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,304,        boolean stop = false;,1,0,0,0,0,1,0,0,1,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,306,            ++n;,1,0,0,0,0,0,0,0,1,2,4,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,307,            final double r1 = 1.0 / (r0 - a0);,3,2,0,1,2,2,0,0,1,6,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,308,            final long a1 = (long) Math.floor(r1);,1,0,0,1,4,3,3,0,1,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,309,            p2 = (a1 * p1) + p0;,4,2,0,1,2,0,0,0,1,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,310,            q2 = (a1 * q1) + q0;,4,2,0,1,2,0,0,0,1,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,311,            if ((p2 > overflow) || (q2 > overflow)) {,4,3,0,2,7,1,0,0,0,5,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,312,"                throw new FractionConversionException(value, p2, q2);",3,0,0,0,2,2,0,1,1,5,53,8,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,315,            final double convergent = (double) p2 / (double) q2;,3,1,0,1,4,4,0,0,1,6,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,316,            if ((n < maxIterations) &&,2,2,0,1,3,1,0,0,0,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,319,                p0 = p1;,2,0,0,0,0,0,0,0,1,2,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,320,                p1 = p2;,2,0,0,0,0,0,0,0,1,2,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,321,                q0 = q1;,2,0,0,0,0,0,0,0,1,2,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,322,                q1 = q2;,2,0,0,0,0,0,0,0,1,2,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,323,                a0 = a1;,2,0,0,0,0,0,0,0,1,2,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,324,                r0 = r1;,2,0,0,0,0,0,0,0,1,2,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,326,                stop = true;,1,0,0,0,0,0,0,0,2,2,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,328,        } while (!stop);,1,0,0,1,3,1,0,0,1,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,330,        if (n >= maxIterations) {,2,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,331,"            throw new FractionConversionException(value, maxIterations);",2,0,0,0,2,2,0,1,1,5,60,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,334,        if (q2 < maxDenominator) {,2,1,0,1,3,1,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,335,            numerator   = BigInteger.valueOf(p2);,1,0,0,1,2,0,3,0,1,5,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,336,            denominator = BigInteger.valueOf(q2);,1,0,0,1,2,0,3,0,1,5,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,338,            numerator   = BigInteger.valueOf(p1);,1,0,0,1,2,0,3,0,1,5,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,339,            denominator = BigInteger.valueOf(q1);,1,0,0,1,2,0,3,0,1,5,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,341,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,362,"        this(value, 0, maxDenominator, 100);",2,0,0,0,2,1,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,363,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,402,"        this(BigInteger.valueOf(num), BigInteger.ONE);",2,0,0,1,4,1,3,0,0,5,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,403,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,417,"        this(BigInteger.valueOf(num), BigInteger.valueOf(den));",0,0,0,1,6,1,6,0,0,4,55,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,418,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,441,        if (numerator == 0) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,442,            return ZERO; // normalize zero.,1,0,0,0,0,1,0,0,0,2,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,445,"        return new BigFraction(numerator, denominator);",2,0,0,0,2,2,0,1,1,5,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,456,        return (BigInteger.ZERO.compareTo(numerator) <= 0) ? this : negate();,2,1,0,2,6,2,3,0,1,7,69,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,472,"        return new BigFraction(numerator.add(denominator.multiply(bg)), denominator);",1,0,0,2,6,2,5,1,1,7,77,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,486,        return add(BigInteger.valueOf(i));,0,0,0,2,4,1,4,0,1,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,500,        return add(BigInteger.valueOf(l));,0,0,0,2,4,1,4,0,1,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,516,        if (ZERO.equals(fraction)) {,0,0,0,2,5,1,3,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,517,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,520,        BigInteger num = null;,1,0,0,0,0,0,0,1,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,521,        BigInteger den = null;,1,0,0,0,0,0,0,1,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,523,        if (denominator.equals(fraction.denominator)) {,2,0,0,2,5,1,2,0,0,5,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,524,            num = numerator.add(fraction.numerator);,3,0,0,1,2,0,2,0,1,5,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,525,            den = denominator;,2,0,0,0,0,0,0,0,1,2,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,527,            num = (numerator.multiply(fraction.denominator)).add((fraction.numerator).multiply(denominator));,5,0,0,2,10,0,5,0,1,5,97,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,528,            den = denominator.multiply(fraction.denominator);,3,0,0,1,2,0,2,0,1,5,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,530,"        return new BigFraction(num, den);",2,0,0,0,2,2,0,1,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,547,        return new BigDecimal(numerator).divide(new BigDecimal(denominator));,2,0,0,2,6,3,1,2,2,7,69,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,566,"        return new BigDecimal(numerator).divide(new BigDecimal(denominator), roundingMode);",2,0,0,1,6,3,2,2,2,7,83,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,585,"        return new BigDecimal(numerator).divide(new BigDecimal(denominator), scale, roundingMode);",2,0,0,1,6,3,3,2,2,7,90,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,600,        BigInteger nOd = numerator.multiply(object.denominator);,3,0,0,1,2,0,2,1,0,5,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,601,        BigInteger dOn = denominator.multiply(object.numerator);,3,0,0,1,2,0,2,1,0,5,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,602,        return nOd.compareTo(dOn);,0,0,0,1,2,1,3,0,0,4,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,621,        if (BigInteger.ZERO.equals(bg)) {,2,0,0,2,5,1,2,0,0,5,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,622,            throw MathRuntimeException.createArithmeticException(FORBIDDEN_ZERO_DENOMINATOR);,0,0,0,1,2,1,3,0,0,4,81,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,624,"        return new BigFraction(numerator, denominator.multiply(bg));",1,0,0,1,4,2,3,1,1,7,60,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,640,        return divide(BigInteger.valueOf(i));,0,0,0,2,4,1,4,0,1,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,656,        return divide(BigInteger.valueOf(l));,0,0,0,2,4,1,4,0,1,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,675,            throw MathRuntimeException.createArithmeticException(FORBIDDEN_ZERO_DENOMINATOR);,0,0,0,1,2,1,3,0,0,4,81,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,736,        return numerator.floatValue() / denominator.floatValue();,0,1,0,1,4,1,4,0,0,5,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,747,        return denominator;,1,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,758,        return denominator.intValue();,0,0,0,1,2,1,2,0,0,4,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,769,        return denominator.longValue();,0,0,0,1,2,1,2,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,780,        return numerator;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,802,        return numerator.longValue();,0,0,0,1,2,1,2,0,0,4,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,815,        return 37 * (37 * 17 + numerator.hashCode()) + denominator.hashCode();,0,4,0,2,6,1,4,0,0,5,70,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,829,        return numerator.divide(denominator).intValue();,0,0,0,1,4,1,4,0,0,4,48,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,843,        return numerator.divide(denominator).longValue();,0,0,0,1,4,1,4,0,0,4,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,859,"        return new BigFraction(bg.multiply(numerator), denominator);",1,0,0,1,4,2,3,1,1,7,60,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,873,        return multiply(BigInteger.valueOf(i));,0,0,0,2,4,1,4,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,887,        return multiply(BigInteger.valueOf(l));,0,0,0,2,4,1,4,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,933,        return (numerator.divide(denominator)).multiply(ONE_HUNDRED_DOUBLE).doubleValue();,0,0,0,2,8,1,6,0,0,4,82,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,948,        if (exponent < 0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,949,"            return new BigFraction(denominator.pow(-exponent), numerator.pow(-exponent));",2,0,0,1,6,2,4,1,3,7,77,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,951,"        return new BigFraction(numerator.pow(exponent), denominator.pow(exponent));",0,0,0,1,6,2,6,1,1,6,75,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,965,        if (exponent < 0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,966,"            return new BigFraction(MathUtils.pow(denominator, -exponent),",1,0,0,0,3,2,3,1,2,6,61,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,969,"        return new BigFraction(MathUtils.pow(numerator,   exponent),",0,0,0,0,3,2,4,1,1,5,60,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,984,        if (exponent.compareTo(BigInteger.ZERO) < 0) {,2,1,0,2,5,1,2,0,0,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,985,            final BigInteger eNeg = exponent.negate();,1,0,0,1,2,1,2,1,1,7,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,986,"            return new BigFraction(MathUtils.pow(denominator, eNeg),",0,0,0,0,3,2,4,1,1,5,56,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,989,"        return new BigFraction(MathUtils.pow(numerator,   exponent),",0,0,0,0,3,2,4,1,1,5,60,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,1004,"        return Math.pow(numerator.doubleValue(),   exponent) /",0,1,0,1,4,1,5,0,0,5,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,1046,"        return new BigFraction(numerator.subtract(denominator.multiply(bg)), denominator);",1,0,0,2,6,2,5,1,1,7,82,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,1060,        return subtract(BigInteger.valueOf(i));,0,0,0,2,4,1,4,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,1075,        return subtract(BigInteger.valueOf(l));,0,0,0,2,4,1,4,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,1120,        String str = null;,1,0,0,0,0,0,0,1,0,2,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,1121,        if (BigInteger.ONE.equals(denominator)) {,2,0,0,2,5,1,2,0,0,5,41,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,1122,            str = numerator.toString();,1,0,0,1,2,0,2,0,1,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,1123,        } else if (BigInteger.ZERO.equals(numerator)) {,2,0,0,2,6,2,2,0,0,5,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,1124,"            str = ""0"";",1,0,0,0,0,0,0,0,2,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,1126,"            str = numerator + "" / "" + denominator;",3,1,0,0,0,0,0,0,2,3,38,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,1128,        return str;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,677,            super(Fraction.ZERO);,2,0,0,1,2,1,0,0,1,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,678,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,684,            data = new double[rows][columns];,1,0,1,0,4,2,0,0,1,5,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,685,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,690,            data[row][column] = value.doubleValue();,0,0,1,1,6,0,2,0,1,5,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,691,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,697,"            return new Array2DRowRealMatrix(data, false);",1,0,0,0,2,2,0,1,2,5,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,670,    private static class FractionMatrixConverter extends DefaultFieldMatrixPreservingVisitor<Fraction> {,1,0,0,0,1,4,0,2,2,5,100,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,347,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0,0,0,2,6,1,3,2,2,6,82,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,360,                this.startRow    = startRow;,2,0,0,0,0,1,0,0,1,3,28,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,361,                this.startColumn = startColumn;,2,0,0,0,0,1,0,0,1,3,31,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,362,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,367,                destination[row - startRow][column - startColumn] = value;,5,2,1,0,4,0,0,0,1,5,58,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,368,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,44,    protected AbstractFieldMatrix() {,1,0,0,1,3,1,0,0,1,5,33,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,45,        field = null;,1,0,0,0,0,0,0,0,1,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,46,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,68,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,73,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,90,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");",0,0,0,1,2,1,2,0,1,5,95,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,93,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");",0,0,0,1,2,1,2,0,1,5,98,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,107,        if (d.length == 0) {,2,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,108,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");",0,0,0,1,2,1,2,0,1,5,95,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,110,        return d[0].getField();,0,0,1,1,4,1,1,0,0,5,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,129,"            T[] dummyRow = (T[]) Array.newInstance(field.getZero().getClass(), 0);",1,0,0,1,12,0,5,2,0,5,70,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,130,"            return (T[][]) Array.newInstance(dummyRow.getClass(), rows);",0,0,0,1,10,1,5,1,0,5,60,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,152,"        T[] array = (T[]) Array.newInstance(field.getZero().getClass(), length);",1,0,0,1,12,0,6,2,0,5,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,153,"        Arrays.fill(array, field.getZero());",0,0,0,1,4,0,5,0,0,3,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,154,        return array;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,173,        checkAdditionCompatible(m);,0,0,0,1,2,0,2,0,1,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,175,        final int rowCount    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,176,        final int columnCount = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,177,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",1,0,0,0,2,1,3,2,2,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,178,        for (int row = 0; row < rowCount; ++row) {,4,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,179,            for (int col = 0; col < columnCount; ++col) {,4,1,0,1,3,2,0,0,1,6,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,180,"                out.setEntry(row, col, getEntry(row, col).add(m.getEntry(row, col)));",0,0,0,0,8,0,12,0,1,3,69,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,184,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,192,        checkSubtractionCompatible(m);,0,0,0,1,2,0,2,0,1,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,194,        final int rowCount    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,195,        final int columnCount = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,196,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",1,0,0,0,2,1,3,2,2,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,197,        for (int row = 0; row < rowCount; ++row) {,4,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,198,            for (int col = 0; col < columnCount; ++col) {,4,1,0,1,3,2,0,0,1,6,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,199,"                out.setEntry(row, col, getEntry(row, col).subtract(m.getEntry(row, col)));",0,0,0,0,8,0,12,0,1,3,74,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,203,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,210,        final int rowCount    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,211,        final int columnCount = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,212,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",1,0,0,0,2,1,3,2,2,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,213,        for (int row = 0; row < rowCount; ++row) {,4,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,214,            for (int col = 0; col < columnCount; ++col) {,4,1,0,1,3,2,0,0,1,6,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,215,"                out.setEntry(row, col, getEntry(row, col).add(d));",0,0,0,1,6,0,9,0,1,4,50,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,219,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,226,        final int rowCount    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,227,        final int columnCount = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,228,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",1,0,0,0,2,1,3,2,2,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,229,        for (int row = 0; row < rowCount; ++row) {,4,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,230,            for (int col = 0; col < columnCount; ++col) {,4,1,0,1,3,2,0,0,1,6,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,231,"                out.setEntry(row, col, getEntry(row, col).multiply(d));",0,0,0,1,6,0,9,0,1,4,55,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,235,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,244,        checkMultiplicationCompatible(m);,0,0,0,1,2,0,2,0,1,4,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,246,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,247,        final int nCols = m.getColumnDimension();,1,0,0,1,2,2,2,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,248,        final int nSum  = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,249,"        final FieldMatrix<T> out = createMatrix(nRows, nCols);",1,0,0,0,2,1,3,2,2,6,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,250,        for (int row = 0; row < nRows; ++row) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,251,            for (int col = 0; col < nCols; ++col) {,4,1,0,1,3,2,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,252,                T sum = field.getZero();,1,0,0,1,2,0,2,1,0,5,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,253,                for (int i = 0; i < nSum; ++i) {,4,1,0,1,3,2,0,0,1,6,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,254,"                    sum = sum.add(getEntry(row, i).multiply(m.getEntry(i, col)));",1,0,0,0,8,0,10,0,2,4,61,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,256,"                out.setEntry(row, col, sum);",0,0,0,0,2,0,5,0,0,2,28,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,260,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,267,        return m.multiply(this);,0,0,0,1,2,2,2,0,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,273,"        final T[][] data = buildArray(field, getRowDimension(), getColumnDimension());",1,0,0,1,10,1,4,1,4,7,78,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,275,        for (int i = 0; i < data.length; ++i) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,276,            final T[] dataI = data[i];,1,0,1,0,4,1,0,1,1,6,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,277,            for (int j = 0; j < dataI.length; ++j) {,5,1,0,1,3,2,0,0,1,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,278,"                dataI[j] = getEntry(i, j);",0,0,1,0,4,0,3,0,2,4,26,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,282,        return data;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,291,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,5,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,293,        final FieldMatrix<T> subMatrix =,1,0,0,0,0,1,0,2,1,4,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,295,        for (int i = startRow; i <= endRow; ++i) {,5,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,296,            for (int j = startColumn; j <= endColumn; ++j) {,5,1,0,1,3,2,0,0,1,6,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,297,"                subMatrix.setEntry(i - startRow, j - startColumn, getEntry(i, j));",4,2,0,0,4,0,5,0,1,5,66,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,301,        return subMatrix;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,310,"        checkSubMatrixIndex(selectedRows, selectedColumns);",0,0,0,0,2,0,3,0,1,3,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,313,        final FieldMatrix<T> subMatrix =,1,0,0,0,0,1,0,2,1,4,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,315,        subMatrix.walkInOptimizedOrder(new DefaultFieldMatrixChangingVisitor<T>(field.getZero()) {,0,0,0,2,6,1,4,2,1,6,90,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,325,        return subMatrix;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,336,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,5,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,337,        final int rowsCount    = endRow + 1 - startRow;,3,2,0,0,0,2,0,0,1,4,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,338,        final int columnsCount = endColumn + 1 - startColumn;,3,2,0,0,0,2,0,0,1,4,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,339,        if ((destination.length < rowsCount) || (destination[0].length < columnsCount)) {,5,3,1,2,9,1,0,0,0,6,81,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,340,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,347,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0,0,0,2,6,1,3,2,2,6,82,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,372,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,379,"        checkSubMatrixIndex(selectedRows, selectedColumns);",0,0,0,0,2,0,3,0,1,3,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,380,        if ((destination.length < selectedRows.length) ||,4,2,0,1,3,1,0,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,382,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,389,        for (int i = 0; i < selectedRows.length; i++) {,5,1,0,1,3,2,0,0,1,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,390,            final T[] destinationI = destination[i];,1,0,1,0,4,1,0,1,1,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,391,            for (int j = 0; j < selectedColumns.length; j++) {,5,1,0,1,3,2,0,0,1,6,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,392,"                destinationI[j] = getEntry(selectedRows[i], selectedColumns[j]);",0,0,1,0,8,0,1,0,2,4,64,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,396,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,402,        final int nRows = subMatrix.length;,3,0,0,0,0,2,0,0,1,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,403,        if (nRows == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,404,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");",0,0,0,1,2,1,2,0,1,5,95,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,407,        final int nCols = subMatrix[0].length;,2,0,1,0,2,2,0,0,1,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,408,        if (nCols == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,409,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");",0,0,0,1,2,1,2,0,1,5,98,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,412,        for (int r = 1; r < nRows; ++r) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,413,            if (subMatrix[r].length != nCols) {,2,1,1,1,5,1,0,0,0,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,414,                throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,420,        checkRowIndex(row);,0,0,0,1,2,0,2,0,1,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,421,        checkColumnIndex(column);,0,0,0,1,2,0,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,422,        checkRowIndex(nRows + row - 1);,2,2,0,1,2,0,1,0,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,423,        checkColumnIndex(nCols + column - 1);,2,2,0,1,2,0,1,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,425,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,426,            for (int j = 0; j < nCols; ++j) {,4,1,0,1,3,2,0,0,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,427,"                setEntry(row + i, column + j, subMatrix[i][j]);",4,2,1,0,6,0,1,0,1,6,47,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,431,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,437,        checkRowIndex(row);,0,0,0,1,2,0,2,0,1,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,438,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,439,"        final FieldMatrix<T> out = createMatrix(1, nCols);",1,0,0,0,2,1,2,2,2,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,440,        for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,441,"            out.setEntry(0, i, getEntry(row, i));",0,0,0,0,4,0,6,0,1,3,37,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,444,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,452,        checkRowIndex(row);,0,0,0,1,2,0,2,0,1,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,453,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,454,        if ((matrix.getRowDimension() != 1) ||,0,2,0,2,5,1,2,0,0,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,456,            throw new InvalidMatrixException(,0,0,0,0,1,2,0,1,1,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,460,        for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,461,"            setEntry(row, i, matrix.getEntry(0, i));",0,0,0,0,4,0,6,0,1,3,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,464,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,470,        checkColumnIndex(column);,0,0,0,1,2,0,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,471,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,472,"        final FieldMatrix<T> out = createMatrix(nRows, 1);",1,0,0,0,2,1,2,2,2,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,473,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,474,"            out.setEntry(i, 0, getEntry(i, column));",0,0,0,0,4,0,6,0,1,3,40,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,477,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,485,        checkColumnIndex(column);,0,0,0,1,2,0,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,486,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,487,        if ((matrix.getRowDimension() != nRows) ||,1,2,0,2,5,1,2,0,0,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,489,            throw new InvalidMatrixException(,0,0,0,0,1,2,0,1,1,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,493,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,494,"            setEntry(i, column, matrix.getEntry(i, 0));",0,0,0,0,4,0,6,0,1,3,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,497,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,502,"        return new ArrayFieldVector<T>(getRow(row), false);",0,0,0,1,4,2,2,2,3,6,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,509,        checkRowIndex(row);,0,0,0,1,2,0,2,0,1,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,510,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,511,        if (vector.getDimension() != nCols) {,1,1,0,2,5,1,2,0,0,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,512,            throw new InvalidMatrixException(,0,0,0,0,1,2,0,1,1,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,516,        for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,517,"            setEntry(row, i, vector.getEntry(i));",0,0,0,1,4,0,6,0,1,4,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,520,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,525,"        return new ArrayFieldVector<T>(getColumn(column), false);",0,0,0,1,4,2,2,2,3,6,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,532,        checkColumnIndex(column);,0,0,0,1,2,0,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,533,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,534,        if (vector.getDimension() != nRows) {,1,1,0,2,5,1,2,0,0,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,535,            throw new InvalidMatrixException(,0,0,0,0,1,2,0,1,1,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,539,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,540,"            setEntry(i, column, vector.getEntry(i));",0,0,0,1,4,0,6,0,1,4,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,543,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,549,        checkRowIndex(row);,0,0,0,1,2,0,2,0,1,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,550,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,551,"        final T[] out = buildArray(field, nCols);",1,0,0,0,4,1,3,1,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,552,        for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,553,"            out[i] = getEntry(row, i);",0,0,1,0,4,0,3,0,2,4,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,556,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,564,        checkRowIndex(row);,0,0,0,1,2,0,2,0,1,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,565,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,566,        if (array.length != nCols) {,3,1,0,1,3,1,0,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,567,            throw new InvalidMatrixException(,0,0,0,0,1,2,0,1,1,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,571,        for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,572,"            setEntry(row, i, array[i]);",0,0,1,0,4,0,3,0,1,4,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,575,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,581,        checkColumnIndex(column);,0,0,0,1,2,0,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,582,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,583,"        final T[] out = buildArray(field, nRows);",1,0,0,0,4,1,3,1,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,584,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,585,"            out[i] = getEntry(i, column);",0,0,1,0,4,0,3,0,2,4,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,588,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,596,        checkColumnIndex(column);,0,0,0,1,2,0,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,597,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,598,        if (array.length != nRows) {,3,1,0,1,3,1,0,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,599,            throw new InvalidMatrixException(,0,0,0,0,1,2,0,1,1,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,603,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,604,"            setEntry(i, column, array[i]);",0,0,1,0,4,0,3,0,1,4,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,607,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,628,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,629,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,630,"        final FieldMatrix<T> out = createMatrix(nCols, nRows);",1,0,0,0,2,1,3,2,2,6,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,631,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0,0,0,2,6,1,3,2,2,6,82,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,641,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,659,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,660,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,661,        if (nRows != nCols) {,2,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,662,"            throw new NonSquareMatrixException(nRows, nCols);",2,0,0,0,2,2,0,1,1,5,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,664,        T trace = field.getZero();,1,0,0,1,2,0,2,1,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,665,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,666,"            trace = trace.add(getEntry(i, i));",1,0,0,0,4,0,5,0,2,4,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,668,        return trace;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,675,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,676,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,677,        if (v.length != nCols) {,3,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,678,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,683,"        final T[] out = buildArray(field, nRows);",1,0,0,0,4,1,3,1,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,684,        for (int row = 0; row < nRows; ++row) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,685,            T sum = field.getZero();,1,0,0,1,2,0,2,1,0,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,686,            for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,687,"                sum = sum.add(getEntry(row, i).multiply(v[i]));",1,0,1,1,8,0,6,0,2,6,47,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,689,            out[row] = sum;,1,0,1,0,2,0,0,0,1,4,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,692,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,700,"            return new ArrayFieldVector<T>(operate(((ArrayFieldVector<T>) v).getDataRef()), false);",1,0,0,3,10,2,2,4,3,7,87,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,701,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,702,            final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,703,            final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,704,            if (v.getDimension() != nCols) {,1,1,0,2,5,1,2,0,0,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,705,                throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,710,"            final T[] out = buildArray(field, nRows);",1,0,0,0,4,1,3,1,2,6,41,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,711,            for (int row = 0; row < nRows; ++row) {,4,1,0,1,3,2,0,0,1,6,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,712,                T sum = field.getZero();,1,0,0,1,2,0,2,1,0,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,713,                for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,714,"                    sum = sum.add(getEntry(row, i).multiply(v.getEntry(i)));",1,0,0,2,8,0,9,0,2,5,56,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,716,                out[row] = sum;,1,0,1,0,2,0,0,0,1,4,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,719,"            return new ArrayFieldVector<T>(out, false);",1,0,0,0,2,2,0,2,2,5,43,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,727,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,728,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,729,        if (v.length != nRows) {,3,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,730,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,735,"        final T[] out = buildArray(field, nCols);",1,0,0,0,4,1,3,1,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,736,        for (int col = 0; col < nCols; ++col) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,737,            T sum = field.getZero();,1,0,0,1,2,0,2,1,0,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,738,            for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,739,"                sum = sum.add(getEntry(i, col).multiply(v[i]));",1,0,1,1,8,0,6,0,2,6,47,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,741,            out[col] = sum;,1,0,1,0,2,0,0,0,1,4,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,744,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,752,"            return new ArrayFieldVector<T>(preMultiply(((ArrayFieldVector<T>) v).getDataRef()), false);",1,0,0,3,10,2,2,4,3,7,91,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,753,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,755,            final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,756,            final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,757,            if (v.getDimension() != nRows) {,1,1,0,2,5,1,2,0,0,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,758,                throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,763,"            final T[] out = buildArray(field, nCols);",1,0,0,0,4,1,3,1,2,6,41,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,764,            for (int col = 0; col < nCols; ++col) {,4,1,0,1,3,2,0,0,1,6,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,765,                T sum = field.getZero();,1,0,0,1,2,0,2,1,0,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,766,                for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,767,"                    sum = sum.add(getEntry(i, col).multiply(v.getEntry(i)));",1,0,0,2,8,0,9,0,2,5,56,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,769,                out[col] = sum;,1,0,1,0,2,0,0,0,1,4,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,772,            return new ArrayFieldVector<T>(out);,1,0,0,1,2,2,0,2,1,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,780,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,781,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,782,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,783,        for (int row = 0; row < rows; ++row) {,4,1,0,1,3,2,0,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,784,            for (int column = 0; column < columns; ++column) {,4,1,0,1,3,2,0,0,1,6,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,785,"                final T oldValue = getEntry(row, column);",1,0,0,0,2,1,3,1,2,6,41,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,786,"                final T newValue = visitor.visit(row, column, oldValue);",1,0,0,0,2,1,5,1,1,6,56,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,787,"                setEntry(row, column, newValue);",0,0,0,0,2,0,4,0,1,3,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,790,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,796,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,797,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,798,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,799,        for (int row = 0; row < rows; ++row) {,4,1,0,1,3,2,0,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,800,            for (int column = 0; column < columns; ++column) {,4,1,0,1,3,2,0,0,1,6,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,801,"                visitor.visit(row, column, getEntry(row, column));",0,0,0,0,4,0,7,0,1,3,50,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,804,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,812,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,5,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,813,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,815,        for (int row = startRow; row <= endRow; ++row) {,5,1,0,1,3,2,0,0,1,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,816,            for (int column = startColumn; column <= endColumn; ++column) {,5,1,0,1,3,2,0,0,1,6,63,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,817,"                final T oldValue = getEntry(row, column);",1,0,0,0,2,1,3,1,2,6,41,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,818,"                final T newValue = visitor.visit(row, column, oldValue);",1,0,0,0,2,1,5,1,1,6,56,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,819,"                setEntry(row, column, newValue);",0,0,0,0,2,0,4,0,1,3,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,822,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,830,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,5,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,831,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,833,        for (int row = startRow; row <= endRow; ++row) {,5,1,0,1,3,2,0,0,1,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,834,            for (int column = startColumn; column <= endColumn; ++column) {,5,1,0,1,3,2,0,0,1,6,63,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,835,"                visitor.visit(row, column, getEntry(row, column));",0,0,0,0,4,0,7,0,1,3,50,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,838,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,844,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,845,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,846,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,847,        for (int column = 0; column < columns; ++column) {,4,1,0,1,3,2,0,0,1,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,848,            for (int row = 0; row < rows; ++row) {,4,1,0,1,3,2,0,0,1,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,849,"                final T oldValue = getEntry(row, column);",1,0,0,0,2,1,3,1,2,6,41,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,850,"                final T newValue = visitor.visit(row, column, oldValue);",1,0,0,0,2,1,5,1,1,6,56,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,851,"                setEntry(row, column, newValue);",0,0,0,0,2,0,4,0,1,3,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,854,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,860,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,861,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,862,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,863,        for (int column = 0; column < columns; ++column) {,4,1,0,1,3,2,0,0,1,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,864,            for (int row = 0; row < rows; ++row) {,4,1,0,1,3,2,0,0,1,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,865,"                visitor.visit(row, column, getEntry(row, column));",0,0,0,0,4,0,7,0,1,3,50,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,868,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,876,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,5,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,877,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,879,        for (int column = startColumn; column <= endColumn; ++column) {,5,1,0,1,3,2,0,0,1,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,880,            for (int row = startRow; row <= endRow; ++row) {,5,1,0,1,3,2,0,0,1,6,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,881,"                final T oldValue = getEntry(row, column);",1,0,0,0,2,1,3,1,2,6,41,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,882,"                final T newValue = visitor.visit(row, column, oldValue);",1,0,0,0,2,1,5,1,1,6,56,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,883,"                setEntry(row, column, newValue);",0,0,0,0,2,0,4,0,1,3,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,886,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,894,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,5,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,895,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,897,        for (int column = startColumn; column <= endColumn; ++column) {,5,1,0,1,3,2,0,0,1,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,898,            for (int row = startRow; row <= endRow; ++row) {,5,1,0,1,3,2,0,0,1,6,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,899,"                visitor.visit(row, column, getEntry(row, column));",0,0,0,0,4,0,7,0,1,3,50,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,902,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,922,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,1,4,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,930,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,1,4,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,939,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,940,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,941,        final StringBuffer res = new StringBuffer();,1,0,0,1,2,2,0,2,2,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,942,        String fullClassName = getClass().getName();,1,0,0,1,4,0,2,1,1,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,943,        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);,1,1,0,2,4,0,4,1,1,7,84,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,944,"        res.append(shortClassName).append(""{"");",0,0,0,1,5,0,4,0,1,4,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,946,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,947,            if (i > 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,948,"                res.append("","");",0,0,0,0,2,0,2,0,1,3,16,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,950,"            res.append(""{"");",0,0,0,1,3,0,2,0,1,4,16,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,951,            for (int j = 0; j < nCols; ++j) {,4,1,0,1,3,2,0,0,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,952,                if (j > 0) {,1,1,0,1,3,1,0,0,0,5,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,953,"                    res.append("","");",0,0,0,0,2,0,2,0,1,3,16,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,955,"                res.append(getEntry(i, j));",0,0,0,0,4,0,5,0,1,3,27,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,957,"            res.append(""}"");",0,0,0,1,3,0,2,0,1,4,16,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,960,"        res.append(""}"");",0,0,0,1,3,0,2,0,1,4,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,961,        return res.toString();,0,0,0,1,2,1,2,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,975,        if (object == this ) {,1,1,0,1,3,2,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,976,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,978,        if (object instanceof FieldMatrix<?> == false) {,1,1,0,1,3,2,0,1,1,7,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,979,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,981,        FieldMatrix<?> m = (FieldMatrix<?>) object;,2,0,0,1,2,0,0,2,0,4,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,982,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,983,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,984,        if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {,2,3,0,2,7,1,4,0,0,6,70,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,985,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,987,        for (int row = 0; row < nRows; ++row) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,988,            for (int col = 0; col < nCols; ++col) {,4,1,0,1,3,2,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,989,"                if (!getEntry(row, col).equals(m.getEntry(row, col))) {",0,0,0,0,9,1,8,0,2,4,55,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,990,                    return false;,0,0,0,0,0,1,0,0,1,2,13,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,994,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,1004,        int ret = 322562;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,1005,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,1006,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,1007,        ret = ret * 31 + nRows;,3,2,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,1008,        ret = ret * 31 + nCols;,3,2,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,1009,        for (int row = 0; row < nRows; ++row) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,1010,            for (int col = 0; col < nCols; ++col) {,4,1,0,1,3,2,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,1011,"               ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) * getEntry(row, col).hashCode();",4,8,0,2,10,0,4,0,2,6,79,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,1014,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,1023,        if (row < 0 || row >= getRowDimension()) {,2,3,0,2,5,1,1,0,1,7,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,1024,"            throw new MatrixIndexException(""row index {0} out of allowed range [{1}, {2}]"",",0,0,0,0,9,2,0,1,2,4,79,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,1027,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,1036,        if (column < 0 || column >= getColumnDimension()) {,2,3,0,2,5,1,1,0,1,7,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,1037,"            throw new MatrixIndexException(""column index {0} out of allowed range [{1}, {2}]"",",0,0,0,0,9,2,0,1,2,4,82,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,1040,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,1054,        checkRowIndex(startRow);,0,0,0,1,2,0,2,0,1,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,1055,        checkRowIndex(endRow);,0,0,0,1,2,0,2,0,1,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,1056,        if (startRow > endRow) {,2,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,1057,"            throw new MatrixIndexException(""initial row {0} after final row {1}"",",0,0,0,0,5,3,0,1,2,4,69,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,1061,        checkColumnIndex(startColumn);,0,0,0,1,2,0,2,0,1,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,1062,        checkColumnIndex(endColumn);,0,0,0,1,2,0,2,0,1,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,1063,        if (startColumn > endColumn) {,2,1,0,1,3,1,0,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,1064,"            throw new MatrixIndexException(""initial column {0} after final column {1}"",",0,0,0,0,5,3,0,1,2,4,75,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,1069,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,1080,        if (selectedRows.length * selectedColumns.length == 0) {,4,2,0,1,3,1,0,0,0,5,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,1081,            if (selectedRows.length == 0) {,2,1,0,1,3,1,0,0,0,5,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,1082,"                throw new MatrixIndexException(""empty selected row index array"");",0,0,0,1,2,2,0,1,2,5,65,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,1084,"            throw new MatrixIndexException(""empty selected column index array"");",0,0,0,1,2,2,0,1,2,5,68,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,1087,        for (final int row : selectedRows) {,2,0,0,1,3,3,0,0,1,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,1088,            checkRowIndex(row);,0,0,0,1,2,0,2,0,1,4,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,1090,        for (final int column : selectedColumns) {,2,0,0,1,3,3,0,0,1,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,1091,            checkColumnIndex(column);,0,0,0,1,2,0,2,0,1,4,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,1093,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,1101,        if ((getRowDimension()    != m.getRowDimension()) ||,0,2,0,2,7,1,3,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,1103,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,1108,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,1116,        if ((getRowDimension()    != m.getRowDimension()) ||,0,2,0,2,7,1,3,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,1118,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,1123,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,1131,        if (getColumnDimension() != m.getRowDimension()) {,0,1,0,2,7,1,3,0,1,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,1132,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,1137,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,320,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,1,1,1,2,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,333,                this.startRow    = startRow;,2,0,0,0,0,1,0,0,1,3,28,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,334,                this.startColumn = startColumn;,2,0,0,0,0,1,0,0,1,3,31,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,335,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,340,                destination[row - startRow][column - startColumn] = value;,5,2,1,0,4,0,0,0,1,5,58,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,341,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,55,        throws IllegalArgumentException {,1,0,0,0,1,1,0,0,0,3,33,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,56,        if (rowDimension <= 0 ) {,1,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,57,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,61,        if (columnDimension <= 0) {,1,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,62,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,66,        lu = null;,1,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,67,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,80,"        MatrixUtils.checkAdditionCompatible(this, m);",0,0,0,0,2,1,3,0,0,3,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,82,        final int rowCount    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,83,        final int columnCount = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,84,"        final RealMatrix out = createMatrix(rowCount, columnCount);",1,0,0,0,2,1,3,1,2,6,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,85,        for (int row = 0; row < rowCount; ++row) {,4,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,86,            for (int col = 0; col < columnCount; ++col) {,4,1,0,1,3,2,0,0,1,6,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,87,"                out.setEntry(row, col, getEntry(row, col) + m.getEntry(row, col));",0,1,0,0,6,0,11,0,1,4,66,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,91,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,99,"        MatrixUtils.checkSubtractionCompatible(this, m);",0,0,0,0,2,1,3,0,0,3,48,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,101,        final int rowCount    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,102,        final int columnCount = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,103,"        final RealMatrix out = createMatrix(rowCount, columnCount);",1,0,0,0,2,1,3,1,2,6,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,104,        for (int row = 0; row < rowCount; ++row) {,4,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,105,            for (int col = 0; col < columnCount; ++col) {,4,1,0,1,3,2,0,0,1,6,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,106,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));",0,1,0,0,6,0,11,0,1,4,66,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,110,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,117,        final int rowCount    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,118,        final int columnCount = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,119,"        final RealMatrix out = createMatrix(rowCount, columnCount);",1,0,0,0,2,1,3,1,2,6,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,120,        for (int row = 0; row < rowCount; ++row) {,4,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,121,            for (int col = 0; col < columnCount; ++col) {,4,1,0,1,3,2,0,0,1,6,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,122,"                out.setEntry(row, col, getEntry(row, col) + d);",1,1,0,0,4,0,7,0,1,5,47,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,126,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,133,        final int rowCount    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,134,        final int columnCount = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,135,"        final RealMatrix out = createMatrix(rowCount, columnCount);",1,0,0,0,2,1,3,1,2,6,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,136,        for (int row = 0; row < rowCount; ++row) {,4,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,137,            for (int col = 0; col < columnCount; ++col) {,4,1,0,1,3,2,0,0,1,6,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,138,"                out.setEntry(row, col, getEntry(row, col) * d);",1,1,0,0,4,0,7,0,1,5,47,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,142,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,151,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0,0,0,0,2,1,3,0,0,3,51,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,153,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,154,        final int nCols = m.getColumnDimension();,1,0,0,1,2,2,2,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,155,        final int nSum  = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,156,"        final RealMatrix out = createMatrix(nRows, nCols);",1,0,0,0,2,1,3,1,2,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,157,        for (int row = 0; row < nRows; ++row) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,158,            for (int col = 0; col < nCols; ++col) {,4,1,0,1,3,2,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,159,                double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,160,                for (int i = 0; i < nSum; ++i) {,4,1,0,1,3,2,0,0,1,6,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,161,"                    sum += getEntry(row, i) * m.getEntry(i, col);",1,1,0,0,4,0,7,0,2,5,45,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,163,"                out.setEntry(row, col, sum);",0,0,0,0,2,0,5,0,0,2,28,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,167,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,174,        return m.multiply(this);,0,0,0,1,2,2,2,0,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,180,        final double[][] data = new double[getRowDimension()][getColumnDimension()];,1,0,0,1,12,4,2,0,3,6,76,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,182,        for (int i = 0; i < data.length; ++i) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,183,            final double[] dataI = data[i];,1,0,1,0,4,2,0,0,1,5,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,184,            for (int j = 0; j < dataI.length; ++j) {,5,1,0,1,3,2,0,0,1,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,185,"                dataI[j] = getEntry(i, j);",0,0,1,0,4,0,3,0,2,4,26,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,189,        return data;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,195,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,2,1,1,2,6,60,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,234,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,2,1,1,2,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,264,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,266,        final RealMatrix subMatrix =,1,0,0,0,0,1,0,1,1,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,268,        for (int i = startRow; i <= endRow; ++i) {,5,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,269,            for (int j = startColumn; j <= endColumn; ++j) {,5,1,0,1,3,2,0,0,1,6,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,270,"                subMatrix.setEntry(i - startRow, j - startColumn, getEntry(i, j));",4,2,0,0,4,0,5,0,1,5,66,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,274,        return subMatrix;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,283,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);",0,0,0,0,2,1,4,0,0,3,69,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,286,        final RealMatrix subMatrix =,1,0,0,0,0,1,0,1,1,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,288,        subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {,0,0,0,1,4,1,2,1,1,6,71,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,298,        return subMatrix;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,309,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,310,        final int rowsCount    = endRow + 1 - startRow;,3,2,0,0,0,2,0,0,1,4,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,311,        final int columnsCount = endColumn + 1 - startColumn;,3,2,0,0,0,2,0,0,1,4,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,312,        if ((destination.length < rowsCount) || (destination[0].length < columnsCount)) {,5,3,1,2,9,1,0,0,0,6,81,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,313,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,320,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,1,1,1,2,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,345,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,352,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);",0,0,0,0,2,1,4,0,0,3,69,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,353,        if ((destination.length < selectedRows.length) ||,4,2,0,1,3,1,0,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,355,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,362,        for (int i = 0; i < selectedRows.length; i++) {,5,1,0,1,3,2,0,0,1,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,363,            final double[] destinationI = destination[i];,1,0,1,0,4,2,0,0,1,5,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,364,            for (int j = 0; j < selectedColumns.length; j++) {,5,1,0,1,3,2,0,0,1,6,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,365,"                destinationI[j] = getEntry(selectedRows[i], selectedColumns[j]);",0,0,1,0,8,0,1,0,2,4,64,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,369,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,375,        final int nRows = subMatrix.length;,3,0,0,0,0,2,0,0,1,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,376,        if (nRows == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,377,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");",0,0,0,1,2,1,2,0,1,5,95,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,380,        final int nCols = subMatrix[0].length;,2,0,1,0,2,2,0,0,1,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,381,        if (nCols == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,382,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");",0,0,0,1,2,1,2,0,1,5,98,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,385,        for (int r = 1; r < nRows; ++r) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,386,            if (subMatrix[r].length != nCols) {,2,1,1,1,5,1,0,0,0,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,387,                throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,393,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,0,2,1,3,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,394,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,0,2,1,3,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,395,"        MatrixUtils.checkRowIndex(this, nRows + row - 1);",2,2,0,0,2,1,2,0,0,5,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,396,"        MatrixUtils.checkColumnIndex(this, nCols + column - 1);",2,2,0,0,2,1,2,0,0,5,55,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,398,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,399,            for (int j = 0; j < nCols; ++j) {,4,1,0,1,3,2,0,0,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,400,"                setEntry(row + i, column + j, subMatrix[i][j]);",4,2,1,0,6,0,1,0,1,6,47,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,404,        lu = null;,1,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,406,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,412,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,0,2,1,3,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,413,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,414,"        final RealMatrix out = createMatrix(1, nCols);",1,0,0,0,2,1,2,1,2,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,415,        for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,416,"            out.setEntry(0, i, getEntry(row, i));",0,0,0,0,4,0,6,0,1,3,37,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,419,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,427,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,0,2,1,3,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,428,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,429,        if ((matrix.getRowDimension() != 1) ||,0,2,0,2,5,1,2,0,0,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,431,            throw new InvalidMatrixException(,0,0,0,0,1,2,0,1,1,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,435,        for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,436,"            setEntry(row, i, matrix.getEntry(0, i));",0,0,0,0,4,0,6,0,1,3,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,439,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,445,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,0,2,1,3,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,446,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,447,"        final RealMatrix out = createMatrix(nRows, 1);",1,0,0,0,2,1,2,1,2,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,448,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,449,"            out.setEntry(i, 0, getEntry(i, column));",0,0,0,0,4,0,6,0,1,3,40,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,452,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,460,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,0,2,1,3,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,461,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,462,        if ((matrix.getRowDimension() != nRows) ||,1,2,0,2,5,1,2,0,0,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,464,            throw new InvalidMatrixException(,0,0,0,0,1,2,0,1,1,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,468,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,469,"            setEntry(i, column, matrix.getEntry(i, 0));",0,0,0,0,4,0,6,0,1,3,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,472,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,477,"        return new ArrayRealVector(getRow(row), false);",0,0,0,1,4,2,2,1,3,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,484,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,0,2,1,3,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,485,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,486,        if (vector.getDimension() != nCols) {,1,1,0,2,5,1,2,0,0,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,487,            throw new InvalidMatrixException(,0,0,0,0,1,2,0,1,1,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,491,        for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,492,"            setEntry(row, i, vector.getEntry(i));",0,0,0,1,4,0,6,0,1,4,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,495,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,500,"        return new ArrayRealVector(getColumn(column), false);",0,0,0,1,4,2,2,1,3,6,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,507,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,0,2,1,3,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,508,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,509,        if (vector.getDimension() != nRows) {,1,1,0,2,5,1,2,0,0,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,510,            throw new InvalidMatrixException(,0,0,0,0,1,2,0,1,1,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,514,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,515,"            setEntry(i, column, vector.getEntry(i));",0,0,0,1,4,0,6,0,1,4,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,518,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,524,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,0,2,1,3,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,525,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,526,        final double[] out = new double[nCols];,1,0,1,0,4,4,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,527,        for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,528,"            out[i] = getEntry(row, i);",0,0,1,0,4,0,3,0,2,4,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,531,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,539,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,0,2,1,3,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,540,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,541,        if (array.length != nCols) {,3,1,0,1,3,1,0,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,542,            throw new InvalidMatrixException(,0,0,0,0,1,2,0,1,1,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,546,        for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,547,"            setEntry(row, i, array[i]);",0,0,1,0,4,0,3,0,1,4,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,550,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,556,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,0,2,1,3,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,557,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,558,        final double[] out = new double[nRows];,1,0,1,0,4,4,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,559,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,560,"            out[i] = getEntry(i, column);",0,0,1,0,4,0,3,0,2,4,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,563,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,571,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,0,2,1,3,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,572,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,573,        if (array.length != nRows) {,3,1,0,1,3,1,0,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,574,            throw new InvalidMatrixException(,0,0,0,0,1,2,0,1,1,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,578,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,579,"            setEntry(i, column, array[i]);",0,0,1,0,4,0,3,0,1,4,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,582,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,603,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,604,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,605,"        final RealMatrix out = createMatrix(nCols, nRows);",1,0,0,0,2,1,3,1,2,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,606,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,1,1,1,2,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,616,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,624,        if (lu == null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,625,"            lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();",3,0,0,1,4,2,1,1,2,7,67,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,627,        return lu.getInverse();,0,0,0,1,2,1,2,0,0,4,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,634,"        return new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getDeterminant();",2,0,0,1,4,3,1,1,1,7,74,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,639,        return getColumnDimension() == getRowDimension();,0,1,0,1,4,1,2,0,2,6,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,645,        if (lu == null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,646,"            lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();",3,0,0,1,4,2,1,1,2,7,67,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,648,        return !lu.isNonSingular();,0,0,0,1,2,1,2,0,1,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,660,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,661,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,662,        if (nRows != nCols) {,2,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,663,"            throw new NonSquareMatrixException(nRows, nCols);",2,0,0,0,2,2,0,1,1,5,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,665,        double trace = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,666,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,667,"            trace += getEntry(i, i);",1,0,0,0,2,0,3,0,2,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,669,        return trace;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,676,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,677,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,678,        if (v.length != nCols) {,3,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,679,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,684,        final double[] out = new double[nRows];,1,0,1,0,4,4,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,685,        for (int row = 0; row < nRows; ++row) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,686,            double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,687,            for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,688,"                sum += getEntry(row, i) * v[i];",1,1,1,0,4,0,3,0,2,6,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,690,            out[row] = sum;,1,0,1,0,2,0,0,0,1,4,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,693,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,701,"            return new ArrayRealVector(operate(((ArrayRealVector) v).getDataRef()), false);",1,0,0,3,10,2,2,2,3,7,79,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,702,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,703,            final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,704,            final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,705,            if (v.getDimension() != nCols) {,1,1,0,2,5,1,2,0,0,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,706,                throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,711,            final double[] out = new double[nRows];,1,0,1,0,4,4,0,0,1,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,712,            for (int row = 0; row < nRows; ++row) {,4,1,0,1,3,2,0,0,1,6,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,713,                double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,714,                for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,715,"                    sum += getEntry(row, i) * v.getEntry(i);",1,1,0,1,4,0,6,0,2,6,40,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,717,                out[row] = sum;,1,0,1,0,2,0,0,0,1,4,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,720,"            return new ArrayRealVector(out, false);",1,0,0,0,2,2,0,1,2,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,728,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,729,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,730,        if (v.length != nRows) {,3,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,731,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,736,        final double[] out = new double[nCols];,1,0,1,0,4,4,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,737,        for (int col = 0; col < nCols; ++col) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,738,            double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,739,            for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,740,"                sum += getEntry(i, col) * v[i];",1,1,1,0,4,0,3,0,2,6,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,742,            out[col] = sum;,1,0,1,0,2,0,0,0,1,4,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,745,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,753,"            return new ArrayRealVector(preMultiply(((ArrayRealVector) v).getDataRef()), false);",1,0,0,3,10,2,2,2,3,7,83,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,754,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,756,            final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,757,            final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,758,            if (v.getDimension() != nRows) {,1,1,0,2,5,1,2,0,0,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,759,                throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,764,            final double[] out = new double[nCols];,1,0,1,0,4,4,0,0,1,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,765,            for (int col = 0; col < nCols; ++col) {,4,1,0,1,3,2,0,0,1,6,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,766,                double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,767,                for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,768,"                    sum += getEntry(i, col) * v.getEntry(i);",1,1,0,1,4,0,6,0,2,6,40,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,770,                out[col] = sum;,1,0,1,0,2,0,0,0,1,4,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,773,            return new ArrayRealVector(out);,1,0,0,1,2,2,0,1,1,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,781,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,782,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,783,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,784,        for (int row = 0; row < rows; ++row) {,4,1,0,1,3,2,0,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,785,            for (int column = 0; column < columns; ++column) {,4,1,0,1,3,2,0,0,1,6,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,786,"                final double oldValue = getEntry(row, column);",1,0,0,0,2,2,3,0,2,5,46,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,787,"                final double newValue = visitor.visit(row, column, oldValue);",1,0,0,0,2,2,5,0,1,5,61,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,788,"                setEntry(row, column, newValue);",0,0,0,0,2,0,4,0,1,3,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,791,        lu = null;,1,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,792,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,798,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,799,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,800,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,801,        for (int row = 0; row < rows; ++row) {,4,1,0,1,3,2,0,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,802,            for (int column = 0; column < columns; ++column) {,4,1,0,1,3,2,0,0,1,6,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,803,"                visitor.visit(row, column, getEntry(row, column));",0,0,0,0,4,0,7,0,1,3,50,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,806,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,814,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,815,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,817,        for (int row = startRow; row <= endRow; ++row) {,5,1,0,1,3,2,0,0,1,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,818,            for (int column = startColumn; column <= endColumn; ++column) {,5,1,0,1,3,2,0,0,1,6,63,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,819,"                final double oldValue = getEntry(row, column);",1,0,0,0,2,2,3,0,2,5,46,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,820,"                final double newValue = visitor.visit(row, column, oldValue);",1,0,0,0,2,2,5,0,1,5,61,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,821,"                setEntry(row, column, newValue);",0,0,0,0,2,0,4,0,1,3,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,824,        lu = null;,1,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,825,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,833,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,834,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,836,        for (int row = startRow; row <= endRow; ++row) {,5,1,0,1,3,2,0,0,1,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,837,            for (int column = startColumn; column <= endColumn; ++column) {,5,1,0,1,3,2,0,0,1,6,63,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,838,"                visitor.visit(row, column, getEntry(row, column));",0,0,0,0,4,0,7,0,1,3,50,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,841,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,847,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,848,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,849,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,850,        for (int column = 0; column < columns; ++column) {,4,1,0,1,3,2,0,0,1,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,851,            for (int row = 0; row < rows; ++row) {,4,1,0,1,3,2,0,0,1,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,852,"                final double oldValue = getEntry(row, column);",1,0,0,0,2,2,3,0,2,5,46,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,853,"                final double newValue = visitor.visit(row, column, oldValue);",1,0,0,0,2,2,5,0,1,5,61,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,854,"                setEntry(row, column, newValue);",0,0,0,0,2,0,4,0,1,3,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,857,        lu = null;,1,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,858,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,864,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,865,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,866,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,867,        for (int column = 0; column < columns; ++column) {,4,1,0,1,3,2,0,0,1,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,868,            for (int row = 0; row < rows; ++row) {,4,1,0,1,3,2,0,0,1,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,869,"                visitor.visit(row, column, getEntry(row, column));",0,0,0,0,4,0,7,0,1,3,50,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,872,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,880,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,881,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,883,        for (int column = startColumn; column <= endColumn; ++column) {,5,1,0,1,3,2,0,0,1,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,884,            for (int row = startRow; row <= endRow; ++row) {,5,1,0,1,3,2,0,0,1,6,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,885,"                final double oldValue = getEntry(row, column);",1,0,0,0,2,2,3,0,2,5,46,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,886,"                final double newValue = visitor.visit(row, column, oldValue);",1,0,0,0,2,2,5,0,1,5,61,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,887,"                setEntry(row, column, newValue);",0,0,0,0,2,0,4,0,1,3,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,890,        lu = null;,1,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,891,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,899,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,900,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,902,        for (int column = startColumn; column <= endColumn; ++column) {,5,1,0,1,3,2,0,0,1,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,903,            for (int row = startRow; row <= endRow; ++row) {,5,1,0,1,3,2,0,0,1,6,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,904,"                visitor.visit(row, column, getEntry(row, column));",0,0,0,0,4,0,7,0,1,3,50,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,907,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,913,        return walkInRowOrder(visitor);,0,0,0,1,2,1,2,0,1,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,927,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,1,4,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,935,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,1,4,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,942,        if (lu == null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,943,"            lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();",3,0,0,1,4,2,1,1,2,7,67,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,945,        return lu.solve(b);,0,0,0,1,2,1,3,0,0,4,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,952,        if (lu == null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,953,"            lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();",3,0,0,1,4,2,1,1,2,7,67,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,955,        return lu.solve(b);,0,0,0,1,2,1,3,0,0,4,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,980,        if (lu == null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,981,"            lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();",3,0,0,1,4,2,1,1,2,7,67,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,983,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,991,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,992,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,993,        final StringBuffer res = new StringBuffer();,1,0,0,1,2,2,0,2,2,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,994,        String fullClassName = getClass().getName();,1,0,0,1,4,0,2,1,1,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,995,        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);,1,1,0,2,4,0,4,1,1,7,84,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,996,"        res.append(shortClassName).append(""{"");",0,0,0,1,5,0,4,0,1,4,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,998,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,999,            if (i > 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,1000,"                res.append("","");",0,0,0,0,2,0,2,0,1,3,16,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,1002,"            res.append(""{"");",0,0,0,1,3,0,2,0,1,4,16,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,1003,            for (int j = 0; j < nCols; ++j) {,4,1,0,1,3,2,0,0,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,1004,                if (j > 0) {,1,1,0,1,3,1,0,0,0,5,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,1005,"                    res.append("","");",0,0,0,0,2,0,2,0,1,3,16,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,1007,"                res.append(getEntry(i, j));",0,0,0,0,4,0,5,0,1,3,27,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,1009,"            res.append(""}"");",0,0,0,1,3,0,2,0,1,4,16,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,1012,"        res.append(""}"");",0,0,0,1,3,0,2,0,1,4,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,1013,        return res.toString();,0,0,0,1,2,1,2,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,1027,        if (object == this ) {,1,1,0,1,3,2,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,1028,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,1030,        if (object instanceof RealMatrix == false) {,1,1,0,1,3,2,0,1,1,7,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,1031,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,1033,        RealMatrix m = (RealMatrix) object;,2,0,0,1,2,0,0,2,0,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,1034,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,1035,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,1036,        if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {,2,3,0,2,7,1,4,0,0,6,70,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,1037,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,1039,        for (int row = 0; row < nRows; ++row) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,1040,            for (int col = 0; col < nCols; ++col) {,4,1,0,1,3,2,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,1041,"                if (getEntry(row, col) != m.getEntry(row, col)) {",0,1,0,0,7,1,7,0,1,5,49,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,1042,                    return false;,0,0,0,0,0,1,0,0,1,2,13,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,1046,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,1056,        int ret = 7;,1,0,0,0,0,1,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,1057,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,1058,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,1059,        ret = ret * 31 + nRows;,3,2,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,1060,        ret = ret * 31 + nCols;,3,2,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,1061,        for (int row = 0; row < nRows; ++row) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,1062,            for (int col = 0; col < nCols; ++col) {,4,1,0,1,3,2,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,1063,               ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) *,4,8,0,2,6,0,0,0,1,5,48,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,1067,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,83,    public Array2DRowRealMatrix() {,1,0,0,1,3,1,0,0,1,5,31,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,84,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,96,"        super(rowDimension, columnDimension);",2,0,0,0,2,1,0,0,1,4,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,97,        data = new double[rowDimension][columnDimension];,1,0,1,0,4,2,0,0,1,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,98,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,114,"        throws IllegalArgumentException, NullPointerException {",2,0,0,0,1,1,0,0,0,3,55,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,115,        copyIn(d);,0,0,0,1,2,0,2,0,1,4,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,116,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,136,            copyIn(d);,0,0,0,1,2,0,2,0,1,4,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,139,                throw new NullPointerException();,0,0,0,1,2,2,0,1,1,5,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,143,                throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,148,                throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,153,                    throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,169,    public Array2DRowRealMatrix(final double[] v) {,2,0,0,1,5,3,0,0,2,5,47,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,170,        final int nRows = v.length;,3,0,0,0,0,2,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,171,        data = new double[nRows][1];,1,0,1,0,4,2,0,0,1,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,172,        for (int row = 0; row < nRows; row++) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,173,            data[row][0] = v[row];,0,0,1,0,6,0,0,0,1,3,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,175,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,181,"        return new Array2DRowRealMatrix(rowDimension, columnDimension);",2,0,0,0,2,2,0,1,1,5,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,187,"        return new Array2DRowRealMatrix(copyOut(), false);",0,0,0,1,4,2,1,1,3,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,195,            return add((Array2DRowRealMatrix) m);,1,0,0,2,4,1,1,1,1,7,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,196,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,197,            return super.add(m);,2,0,0,1,2,2,0,0,0,4,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,212,"        MatrixUtils.checkAdditionCompatible(this, m);",0,0,0,0,2,1,3,0,0,3,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,214,        final int rowCount    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,215,        final int columnCount = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,216,        final double[][] outData = new double[rowCount][columnCount];,1,0,1,0,8,4,0,0,1,5,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,217,        for (int row = 0; row < rowCount; row++) {,4,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,218,            final double[] dataRow    = data[row];,1,0,1,0,4,2,0,0,1,5,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,219,            final double[] mRow       = m.data[row];,3,0,1,0,4,2,0,0,1,5,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,220,            final double[] outDataRow = outData[row];,1,0,1,0,4,2,0,0,1,5,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,221,            for (int col = 0; col < columnCount; col++) {,4,1,0,1,3,2,0,0,1,6,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,222,                outDataRow[col] = dataRow[col] + mRow[col];,0,1,1,0,6,0,0,0,1,4,43,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,226,"        return new Array2DRowRealMatrix(outData, false);",1,0,0,0,2,2,0,1,2,5,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,235,            return subtract((Array2DRowRealMatrix) m);,1,0,0,2,4,1,1,1,1,7,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,236,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,237,            return super.subtract(m);,2,0,0,1,2,2,0,0,0,4,25,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,252,"        MatrixUtils.checkSubtractionCompatible(this, m);",0,0,0,0,2,1,3,0,0,3,48,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,254,        final int rowCount    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,255,        final int columnCount = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,256,        final double[][] outData = new double[rowCount][columnCount];,1,0,1,0,8,4,0,0,1,5,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,257,        for (int row = 0; row < rowCount; row++) {,4,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,258,            final double[] dataRow    = data[row];,1,0,1,0,4,2,0,0,1,5,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,259,            final double[] mRow       = m.data[row];,3,0,1,0,4,2,0,0,1,5,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,260,            final double[] outDataRow = outData[row];,1,0,1,0,4,2,0,0,1,5,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,261,            for (int col = 0; col < columnCount; col++) {,4,1,0,1,3,2,0,0,1,6,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,262,                outDataRow[col] = dataRow[col] - mRow[col];,0,1,1,0,6,0,0,0,1,4,43,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,266,"        return new Array2DRowRealMatrix(outData, false);",1,0,0,0,2,2,0,1,2,5,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,275,            return multiply((Array2DRowRealMatrix) m);,1,0,0,2,4,1,1,1,1,7,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,276,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,277,            return super.multiply(m);,2,0,0,1,2,2,0,0,0,4,25,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,317,        return copyOut();,0,0,0,1,2,1,1,0,1,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,335,        if (data == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,336,            if (row > 0) {,1,1,0,1,3,1,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,337,                throw MathRuntimeException.createIllegalStateException(,0,0,0,0,1,1,2,0,0,3,55,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,340,            if (column > 0) {,1,1,0,1,3,1,0,0,0,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,341,                throw MathRuntimeException.createIllegalStateException(,0,0,0,0,1,1,2,0,0,3,55,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,344,            final int nRows = subMatrix.length;,3,0,0,0,0,2,0,0,1,3,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,345,            if (nRows == 0) {,1,1,0,1,3,1,0,0,0,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,346,                throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,350,            final int nCols = subMatrix[0].length;,2,0,1,0,2,2,0,0,1,5,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,351,            if (nCols == 0) {,1,1,0,1,3,1,0,0,0,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,352,                throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,355,            data = new double[subMatrix.length][nCols];,3,0,1,0,4,2,0,0,1,5,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,356,            for (int i = 0; i < data.length; ++i) {,5,1,0,1,3,2,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,357,                if (subMatrix[i].length != nCols) {,2,1,1,1,5,1,0,0,0,6,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,358,                    throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,361,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",2,1,1,0,6,0,4,0,0,5,64,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,363,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,364,"            super.setSubMatrix(subMatrix, row, column);",4,0,0,0,2,1,0,0,0,3,43,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,367,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,374,            return data[row][column];,0,0,1,0,4,1,0,0,0,3,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,375,        } catch (ArrayIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,376,            throw new MatrixIndexException(,0,0,0,0,1,2,0,1,1,4,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,386,            data[row][column] = value;,1,0,1,0,4,0,0,0,1,4,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,390,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,387,        } catch (ArrayIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,388,            throw new MatrixIndexException(,0,0,0,0,1,2,0,1,1,4,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,391,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,398,            data[row][column] += increment;,1,0,1,0,4,0,0,0,1,4,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,402,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,399,        } catch (ArrayIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,400,            throw new MatrixIndexException(,0,0,0,0,1,2,0,1,1,4,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,403,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,410,            data[row][column] *= factor;,1,0,1,0,4,0,0,0,1,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,414,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,411,        } catch (ArrayIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,412,            throw new MatrixIndexException(,0,0,0,0,1,2,0,1,1,4,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,415,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,433,        final int nRows = this.getRowDimension();,1,0,0,1,2,3,1,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,434,        final int nCols = this.getColumnDimension();,1,0,0,1,2,3,1,0,1,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,435,        if (v.length != nCols) {,3,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,436,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,439,        final double[] out = new double[nRows];,1,0,1,0,4,4,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,440,        for (int row = 0; row < nRows; row++) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,441,            final double[] dataRow = data[row];,1,0,1,0,4,2,0,0,1,5,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,442,            double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,443,            for (int i = 0; i < nCols; i++) {,4,1,0,1,3,2,0,0,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,444,                sum += dataRow[i] * v[i];,1,1,1,0,4,0,0,0,1,5,25,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,446,            out[row] = sum;,1,0,1,0,2,0,0,0,1,4,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,448,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,456,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,457,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,458,        if (v.length != nRows) {,3,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,459,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,463,        final double[] out = new double[nCols];,1,0,1,0,4,4,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,464,        for (int col = 0; col < nCols; ++col) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,465,            double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,466,            for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,467,                sum += data[i][col] * v[i];,1,1,1,0,6,0,0,0,1,5,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,469,            out[col] = sum;,1,0,1,0,2,0,0,0,1,4,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,472,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,480,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,481,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,482,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,483,        for (int i = 0; i < rows; ++i) {,4,1,0,1,3,2,0,0,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,484,            final double[] rowI = data[i];,1,0,1,0,4,2,0,0,1,5,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,485,            for (int j = 0; j < columns; ++j) {,4,1,0,1,3,2,0,0,1,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,486,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0,0,1,0,6,0,4,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,489,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,514,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,515,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,517,        for (int i = startRow; i <= endRow; ++i) {,5,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,518,            final double[] rowI = data[i];,1,0,1,0,4,2,0,0,1,5,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,519,            for (int j = startColumn; j <= endColumn; ++j) {,5,1,0,1,3,2,0,0,1,6,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,520,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0,0,1,0,6,0,4,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,523,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,532,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,533,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,535,        for (int i = startRow; i <= endRow; ++i) {,5,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,536,            final double[] rowI = data[i];,1,0,1,0,4,2,0,0,1,5,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,537,            for (int j = startColumn; j <= endColumn; ++j) {,5,1,0,1,3,2,0,0,1,6,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,538,"                visitor.visit(i, j, rowI[j]);",0,0,1,0,4,0,4,0,0,3,29,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,541,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,548,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,549,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,550,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,551,        for (int j = 0; j < columns; ++j) {,4,1,0,1,3,2,0,0,1,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,552,            for (int i = 0; i < rows; ++i) {,4,1,0,1,3,2,0,0,1,6,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,553,                final double[] rowI = data[i];,1,0,1,0,4,2,0,0,1,5,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,554,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0,0,1,0,6,0,4,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,557,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,564,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,565,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,566,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,567,        for (int j = 0; j < columns; ++j) {,4,1,0,1,3,2,0,0,1,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,568,            for (int i = 0; i < rows; ++i) {,4,1,0,1,3,2,0,0,1,6,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,569,"                visitor.visit(i, j, data[i][j]);",0,0,1,0,6,0,4,0,0,3,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,572,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,581,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,582,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,584,        for (int j = startColumn; j <= endColumn; ++j) {,5,1,0,1,3,2,0,0,1,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,585,            for (int i = startRow; i <= endRow; ++i) {,5,1,0,1,3,2,0,0,1,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,586,                final double[] rowI = data[i];,1,0,1,0,4,2,0,0,1,5,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,587,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0,0,1,0,6,0,4,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,590,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,599,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,600,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,602,        for (int j = startColumn; j <= endColumn; ++j) {,5,1,0,1,3,2,0,0,1,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,603,            for (int i = startRow; i <= endRow; ++i) {,5,1,0,1,3,2,0,0,1,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,604,"                visitor.visit(i, j, data[i][j]);",0,0,1,0,6,0,4,0,0,3,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,607,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,616,        final int nRows = this.getRowDimension();,1,0,0,1,2,3,1,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,617,        final double[][] out = new double[nRows][this.getColumnDimension()];,1,0,1,1,10,5,1,0,1,7,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,619,        for (int i = 0; i < nRows; i++) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,620,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",1,0,1,0,8,0,2,0,0,4,56,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,622,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,636,"        setSubMatrix(in, 0, 0);",0,0,0,0,2,0,2,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,637,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/NonSquareMatrixException,74,37,"        super(""a {0}x{1} matrix was provided instead of a square matrix"",",0,0,0,0,5,1,0,0,2,3,65,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/NonSquareMatrixException,74,39,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/InvalidMatrixException,74,40,"        super(pattern, arguments);",2,0,0,0,2,1,0,0,1,4,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/InvalidMatrixException,74,41,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/InvalidMatrixException,74,50,        super(cause);,1,0,0,1,2,1,0,0,1,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/InvalidMatrixException,74,51,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixIndexException,74,38,"      super(pattern, arguments);",2,0,0,0,2,1,0,0,1,4,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixIndexException,74,39,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,195,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,2,1,1,2,6,60,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,210,                this.endRow = endRow;,2,0,0,0,0,1,0,0,1,3,21,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,211,                columnSum   = 0;,1,0,0,0,0,0,0,0,1,2,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,212,                maxColSum   = 0;,1,0,0,0,0,0,0,0,1,2,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,213,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,217,                columnSum += Math.abs(value);,1,0,0,1,2,0,3,0,1,5,29,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,218,                if (row == endRow) {,2,1,0,1,3,1,0,0,0,5,20,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,219,"                    maxColSum = Math.max(maxColSum, columnSum);",1,0,0,0,2,0,4,0,1,4,43,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,220,                    columnSum = 0;,1,0,0,0,0,0,0,0,1,2,14,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,222,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,226,                return maxColSum;,1,0,0,0,0,1,0,0,0,2,17,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,101,"        super(field, rows, columns);",3,0,0,0,2,1,0,0,1,4,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,102,        this.rows    = rows;,2,0,0,0,0,1,0,0,1,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,103,        this.columns = columns;,2,0,0,0,0,1,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,106,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,4,3,0,1,2,0,0,0,1,5,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,107,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,4,3,0,1,2,0,0,0,1,5,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,110,"        blocks = createBlocksLayout(field, rows, columns);",1,0,0,0,2,0,4,0,2,4,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,112,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,129,"        this(rawData.length, rawData[0].length, toBlocksLayout(rawData), false);",3,0,1,1,6,1,2,0,2,7,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,130,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,151,"        super(extractField(blockData), rows, columns);",2,0,0,1,4,1,2,0,2,6,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,152,        this.rows    = rows;,2,0,0,0,0,1,0,0,1,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,153,        this.columns = columns;,2,0,0,0,0,1,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,156,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,4,3,0,1,2,0,0,0,1,5,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,157,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,4,3,0,1,2,0,0,0,1,5,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,159,        if (copyArray) {,1,0,0,1,3,1,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,161,"            blocks = buildArray(getField(), blockRows * blockColumns, -1);",3,1,0,1,4,0,2,0,4,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,164,            blocks = blockData;,2,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,167,        int index = 0;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,168,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,169,            final int iHeight = blockHeight(iBlock);,1,0,0,1,2,2,2,0,2,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,170,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++index) {",5,1,0,0,3,2,0,0,2,5,64,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,171,                if (blockData[index].length != iHeight * blockWidth(jBlock)) {,2,2,1,2,7,1,2,0,1,8,62,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,172,                    throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,176,                if (copyArray) {,1,0,0,1,3,1,0,0,0,4,16,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,177,                    blocks[index] = blockData[index].clone();,0,0,1,1,6,0,1,0,1,5,41,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,182,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,211,        final int rows         = rawData.length;,3,0,0,0,0,2,0,0,1,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,212,        final int columns      = rawData[0].length;,2,0,1,0,2,2,0,0,1,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,213,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,4,3,0,1,2,2,0,0,1,6,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,214,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,4,3,0,1,2,2,0,0,1,6,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,217,        for (int i = 0; i < rawData.length; ++i) {,5,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,218,            final int length = rawData[i].length;,2,0,1,0,2,2,0,0,1,5,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,219,            if (length != columns) {,2,1,0,1,3,1,0,0,0,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,220,                throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,227,        final Field<T> field = extractField(rawData);,1,0,0,1,2,1,2,2,2,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,228,"        final T[][] blocks = buildArray(field, blockRows * blockColumns, -1);",3,1,0,0,6,1,2,1,3,7,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,229,        int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,230,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,231,            final int pStart  = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,232,"            final int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,56,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,233,            final int iHeight = pEnd - pStart;,3,1,0,0,0,2,0,0,1,4,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,234,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,235,                final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,236,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,58,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,237,                final int jWidth = qEnd - qStart;,3,1,0,0,0,2,0,0,1,4,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,240,"                final T[] block = buildArray(field, iHeight * jWidth);",3,1,0,0,4,1,2,1,2,7,54,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,241,                blocks[blockIndex] = block;,1,0,1,0,2,0,0,0,1,4,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,244,                int index = 0;,1,0,0,0,0,1,0,0,0,2,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,245,                for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,246,"                    System.arraycopy(rawData[p], qStart, block, index, jWidth);",0,0,1,0,4,0,6,0,0,3,59,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,247,                    index += jWidth;,2,0,0,0,0,0,0,0,1,2,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,250,                ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,255,        return blocks;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,277,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,4,3,0,1,2,2,0,0,1,6,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,278,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,4,3,0,1,2,2,0,0,1,6,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,280,"        final T[][] blocks = buildArray(field, blockRows * blockColumns, -1);",3,1,0,0,6,1,2,1,3,7,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,281,        int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,282,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,283,            final int pStart  = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,284,"            final int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,56,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,285,            final int iHeight = pEnd - pStart;,3,1,0,0,0,2,0,0,1,4,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,286,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,287,                final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,288,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,58,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,289,                final int jWidth = qEnd - qStart;,3,1,0,0,0,2,0,0,1,4,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,290,"                blocks[blockIndex] = buildArray(field, iHeight * jWidth);",2,1,1,0,4,0,2,0,2,6,57,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,291,                ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,295,        return blocks;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,303,"        return new BlockFieldMatrix<T>(getField(), rowDimension, columnDimension);",2,0,0,1,4,2,1,2,2,7,74,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,311,"        BlockFieldMatrix<T> copied = new BlockFieldMatrix<T>(getField(), rows, columns);",3,0,0,1,4,1,1,4,2,7,80,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,314,        for (int i = 0; i < blocks.length; ++i) {,5,1,0,1,3,2,0,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,315,"            System.arraycopy(blocks[i], 0, copied.blocks[i], 0, blocks[i].length);",3,0,1,0,8,0,2,0,0,4,70,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,318,        return copied;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,327,            return add((BlockFieldMatrix<T>) m);,1,0,0,2,4,1,1,2,1,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,328,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,331,            checkAdditionCompatible(m);,0,0,0,1,2,0,2,0,1,4,27,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,333,"            final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",3,0,0,1,4,2,1,4,3,7,83,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,336,            int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,337,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,5,1,0,1,3,2,0,0,1,6,56,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,338,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,5,1,0,1,3,2,0,0,1,6,59,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,341,                    final T[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,1,0,1,1,6,44,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,342,                    final T[] tBlock   = blocks[blockIndex];,1,0,1,0,4,1,0,1,1,6,40,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,343,                    final int      pStart   = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,46,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,344,"                    final int      pEnd     = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,62,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,345,                    final int      qStart   = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,46,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,346,"                    final int      qEnd     = Math.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,65,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,347,                    int k = 0;,1,0,0,0,0,1,0,0,0,2,10,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,348,                    for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,349,                        for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,13,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,350,"                            outBlock[k] = tBlock[k].add(m.getEntry(p, q));",0,0,1,0,8,0,5,0,1,4,46,15,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,351,                            ++k;,1,0,0,0,0,0,0,0,1,2,4,15,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,356,                    ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,361,            return out;,1,0,0,0,0,1,0,0,0,2,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,377,        checkAdditionCompatible(m);,0,0,0,1,2,0,2,0,1,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,379,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",3,0,0,1,4,2,1,4,3,7,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,382,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,6,1,0,1,3,2,0,0,1,6,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,383,            final T[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,1,0,1,1,6,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,384,            final T[] tBlock   = blocks[blockIndex];,1,0,1,0,4,1,0,1,1,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,385,            final T[] mBlock   = m.blocks[blockIndex];,3,0,1,0,4,1,0,1,1,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,386,            for (int k = 0; k < outBlock.length; ++k) {,5,1,0,1,3,2,0,0,1,6,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,387,                outBlock[k] = tBlock[k].add(mBlock[k]);,0,0,1,1,8,0,1,0,1,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,391,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,400,            return subtract((BlockFieldMatrix<T>) m);,1,0,0,2,4,1,1,2,1,7,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,401,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,404,            checkSubtractionCompatible(m);,0,0,0,1,2,0,2,0,1,4,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,406,"            final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",3,0,0,1,4,2,1,4,3,7,83,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,409,            int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,410,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,5,1,0,1,3,2,0,0,1,6,56,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,411,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,5,1,0,1,3,2,0,0,1,6,59,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,414,                    final T[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,1,0,1,1,6,44,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,415,                    final T[] tBlock   = blocks[blockIndex];,1,0,1,0,4,1,0,1,1,6,40,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,416,                    final int      pStart   = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,46,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,417,"                    final int      pEnd     = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,62,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,418,                    final int      qStart   = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,46,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,419,"                    final int      qEnd     = Math.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,65,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,420,                    int k = 0;,1,0,0,0,0,1,0,0,0,2,10,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,421,                    for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,422,                        for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,13,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,423,"                            outBlock[k] = tBlock[k].subtract(m.getEntry(p, q));",0,0,1,0,8,0,5,0,1,4,51,15,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,424,                            ++k;,1,0,0,0,0,0,0,0,1,2,4,15,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,429,                    ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,434,            return out;,1,0,0,0,0,1,0,0,0,2,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,450,        checkSubtractionCompatible(m);,0,0,0,1,2,0,2,0,1,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,452,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",3,0,0,1,4,2,1,4,3,7,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,455,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,6,1,0,1,3,2,0,0,1,6,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,456,            final T[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,1,0,1,1,6,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,457,            final T[] tBlock   = blocks[blockIndex];,1,0,1,0,4,1,0,1,1,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,458,            final T[] mBlock   = m.blocks[blockIndex];,3,0,1,0,4,1,0,1,1,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,459,            for (int k = 0; k < outBlock.length; ++k) {,5,1,0,1,3,2,0,0,1,6,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,460,                outBlock[k] = tBlock[k].subtract(mBlock[k]);,0,0,1,1,8,0,1,0,1,5,44,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,464,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,473,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",3,0,0,1,4,2,1,4,3,7,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,476,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,6,1,0,1,3,2,0,0,1,6,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,477,            final T[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,1,0,1,1,6,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,478,            final T[] tBlock   = blocks[blockIndex];,1,0,1,0,4,1,0,1,1,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,479,            for (int k = 0; k < outBlock.length; ++k) {,5,1,0,1,3,2,0,0,1,6,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,480,                outBlock[k] = tBlock[k].add(d);,0,0,1,1,6,0,2,0,1,5,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,484,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,493,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",3,0,0,1,4,2,1,4,3,7,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,496,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,6,1,0,1,3,2,0,0,1,6,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,497,            final T[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,1,0,1,1,6,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,498,            final T[] tBlock   = blocks[blockIndex];,1,0,1,0,4,1,0,1,1,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,499,            for (int k = 0; k < outBlock.length; ++k) {,5,1,0,1,3,2,0,0,1,6,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,500,                outBlock[k] = tBlock[k].multiply(d);,0,0,1,1,6,0,2,0,1,5,36,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,504,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,513,            return multiply((BlockFieldMatrix<T>) m);,1,0,0,2,4,1,1,2,1,7,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,514,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,517,            checkMultiplicationCompatible(m);,0,0,0,1,2,0,2,0,1,4,33,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,519,"            final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, m.getColumnDimension());",2,0,0,1,6,2,3,4,3,7,98,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,520,            final T zero = getField().getZero();,1,0,0,1,4,1,2,1,2,7,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,523,            int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,524,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,5,1,0,1,3,2,0,0,1,6,56,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,526,                final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,527,"                final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,55,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,529,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,5,1,0,1,3,2,0,0,1,6,59,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,531,                    final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,532,"                    final int qEnd   = Math.min(qStart + BLOCK_SIZE, m.getColumnDimension());",3,1,0,1,4,2,4,0,1,7,73,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,535,                    final T[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,1,0,1,1,6,44,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,538,                    for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,4,1,0,1,3,2,0,0,1,6,55,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,539,                        final int kWidth      = blockWidth(kBlock);,1,0,0,1,2,2,2,0,2,6,43,13,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,540,                        final T[] tBlock = blocks[iBlock * blockColumns + kBlock];,4,2,1,0,4,1,0,1,1,7,58,13,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,541,                        final int rStart      = kBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,44,13,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,542,                        int k = 0;,1,0,0,0,0,1,0,0,0,2,10,14,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,543,                        for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,13,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,544,                            final int lStart = (p - pStart) * kWidth;,4,2,0,1,2,2,0,0,1,6,41,15,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,545,                            final int lEnd   = lStart + kWidth;,3,1,0,0,0,2,0,0,1,4,35,15,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,546,                            for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,15,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,547,                                T sum = zero;,2,0,0,0,0,0,0,1,0,2,13,17,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,548,                                int r = rStart;,2,0,0,0,0,1,0,0,0,2,15,18,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,549,                                for (int l = lStart; l < lEnd; ++l) {,5,1,0,1,3,2,0,0,1,6,37,17,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,550,"                                    sum = sum.add(tBlock[l].multiply(m.getEntry(r, q)));",1,0,1,0,8,0,7,0,1,5,52,19,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,551,                                    ++r;,1,0,0,0,0,0,0,0,1,2,4,19,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,553,                                outBlock[k] = outBlock[k].add(sum);,0,0,1,1,6,0,2,0,1,5,35,17,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,554,                                ++k;,1,0,0,0,0,0,0,0,1,2,4,17,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,560,                    ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,565,            return out;,1,0,0,0,0,1,0,0,0,2,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,581,        checkMultiplicationCompatible(m);,0,0,0,1,2,0,2,0,1,4,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,583,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, m.columns);",4,0,0,1,4,2,1,4,3,7,85,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,584,        final T zero = getField().getZero();,1,0,0,1,4,1,2,1,2,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,587,        int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,588,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,5,1,0,1,3,2,0,0,1,6,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,590,            final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,591,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,593,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,5,1,0,1,3,2,0,0,1,6,59,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,594,                final int jWidth = out.blockWidth(jBlock);,1,0,0,1,2,2,3,0,1,6,42,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,595,                final int jWidth2 = jWidth  + jWidth;,3,1,0,0,0,2,0,0,1,4,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,596,                final int jWidth3 = jWidth2 + jWidth;,3,1,0,0,0,2,0,0,1,4,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,597,                final int jWidth4 = jWidth3 + jWidth;,3,1,0,0,0,2,0,0,1,4,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,600,                final T[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,1,0,1,1,6,44,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,603,                for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,4,1,0,1,3,2,0,0,1,6,55,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,604,                    final int kWidth = blockWidth(kBlock);,1,0,0,1,2,2,2,0,2,6,38,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,605,                    final T[] tBlock = blocks[iBlock * blockColumns + kBlock];,4,2,1,0,4,1,0,1,1,7,58,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,606,                    final T[] mBlock = m.blocks[kBlock * m.blockColumns + jBlock];,7,2,0,0,4,1,0,1,1,6,62,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,607,                    int k = 0;,1,0,0,0,0,1,0,0,0,2,10,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,608,                    for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,609,                        final int lStart = (p - pStart) * kWidth;,4,2,0,1,2,2,0,0,1,6,41,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,610,                        final int lEnd   = lStart + kWidth;,3,1,0,0,0,2,0,0,1,4,35,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,611,                        for (int nStart = 0; nStart < jWidth; ++nStart) {,4,1,0,1,3,2,0,0,1,6,49,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,612,                            T sum = zero;,2,0,0,0,0,0,0,1,0,2,13,14,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,613,                            int l = lStart;,2,0,0,0,0,1,0,0,0,2,15,15,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,614,                            int n = nStart;,2,0,0,0,0,1,0,0,0,2,15,15,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,615,                            while (l < lEnd - 3) {,2,2,0,1,3,1,0,0,0,5,22,14,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,616,                                sum = sum.,1,0,0,0,0,0,1,0,1,3,10,16,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,621,                                l += 4;,1,0,0,0,0,0,0,0,1,2,7,16,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,622,                                n += jWidth4;,2,0,0,0,0,0,0,0,1,2,13,16,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,624,                            while (l < lEnd) {,2,1,0,1,3,1,0,0,0,5,18,14,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,625,                                sum = sum.add(tBlock[l++].multiply(mBlock[n]));,2,0,1,2,8,0,3,0,2,6,47,16,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,626,                                n += jWidth;,2,0,0,0,0,0,0,0,1,2,12,16,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,628,                            outBlock[k] = outBlock[k].add(sum);,0,0,1,1,6,0,2,0,1,5,35,14,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,629,                            ++k;,1,0,0,0,0,0,0,0,1,2,4,14,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,635,                ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,640,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,648,"        final T[][] data = buildArray(getField(), getRowDimension(), getColumnDimension());",1,0,0,1,12,1,4,1,5,7,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,649,        final int lastColumns = columns - (blockColumns - 1) * BLOCK_SIZE;,4,3,0,1,2,2,0,0,1,6,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,651,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,652,            final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,653,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,654,            int regularPos   = 0;,1,0,0,0,0,1,0,0,0,2,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,655,            int lastPos      = 0;,1,0,0,0,0,1,0,0,0,2,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,656,            for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,657,                final T[] dataP = data[p];,1,0,1,0,4,1,0,1,1,6,26,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,658,                int blockIndex = iBlock * blockColumns;,3,1,0,0,0,1,0,0,0,3,39,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,659,                int dataPos    = 0;,1,0,0,0,0,1,0,0,0,2,19,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,660,                for (int jBlock = 0; jBlock < blockColumns - 1; ++jBlock) {,4,2,0,1,3,2,0,0,1,6,59,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,661,"                    System.arraycopy(blocks[blockIndex++], regularPos, dataP, dataPos, BLOCK_SIZE);",1,0,1,0,4,0,6,0,1,5,79,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,662,                    dataPos += BLOCK_SIZE;,2,0,0,0,0,0,0,0,1,2,22,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,664,"                System.arraycopy(blocks[blockIndex], lastPos, dataP, dataPos, lastColumns);",0,0,1,0,4,0,6,0,0,3,75,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,665,                regularPos += BLOCK_SIZE;,2,0,0,0,0,0,0,0,1,2,25,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,666,                lastPos    += lastColumns;,2,0,0,0,0,0,0,0,1,2,26,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,670,        return data;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,681,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,5,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,684,        final BlockFieldMatrix<T> out =,1,0,0,0,0,1,0,2,1,4,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,688,        final int blockStartRow    = startRow    / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,689,        final int rowsShift        = startRow    % BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,690,        final int blockStartColumn = startColumn / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,691,        final int columnsShift     = startColumn % BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,694,        int pBlock = blockStartRow;,2,0,0,0,0,1,0,0,0,2,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,695,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,5,1,0,1,3,2,0,0,1,6,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,696,            final int iHeight = out.blockHeight(iBlock);,1,0,0,1,2,2,3,0,1,6,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,697,            int qBlock = blockStartColumn;,2,0,0,0,0,1,0,0,0,2,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,698,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,5,1,0,1,3,2,0,0,1,6,59,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,699,                final int jWidth = out.blockWidth(jBlock);,1,0,0,1,2,2,3,0,1,6,42,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,702,                final int      outIndex = iBlock * out.blockColumns + jBlock;,5,2,0,0,0,2,0,0,1,4,61,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,703,                final T[] outBlock = out.blocks[outIndex];,3,0,1,0,4,1,0,1,1,6,42,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,704,                final int      index    = pBlock * blockColumns + qBlock;,4,2,0,0,0,2,0,0,1,4,57,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,705,                final int      width    = blockWidth(qBlock);,1,0,0,1,2,2,2,0,2,6,45,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,707,                final int heightExcess = iHeight + rowsShift - BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,58,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,708,                final int widthExcess  = jWidth + columnsShift - BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,60,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,709,                if (heightExcess > 0) {,1,1,0,1,3,1,0,0,0,5,23,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,711,                    if (widthExcess > 0) {,1,1,0,1,3,1,0,0,0,5,22,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,713,                        final int width2 = blockWidth(qBlock + 1);,2,1,0,1,2,2,1,0,2,7,42,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,714,"                        copyBlockPart(blocks[index], width,",0,0,1,0,3,0,2,0,1,4,35,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,718,"                        copyBlockPart(blocks[index + 1], width2,",1,1,1,0,3,0,2,0,1,6,40,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,722,"                        copyBlockPart(blocks[index + blockColumns], width,",2,1,1,0,3,0,2,0,1,6,50,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,726,"                        copyBlockPart(blocks[index + blockColumns + 1], width2,",2,1,1,0,3,0,2,0,1,6,55,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,730,                    } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,732,"                        copyBlockPart(blocks[index], width,",0,0,1,0,3,0,2,0,1,4,35,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,736,"                        copyBlockPart(blocks[index + blockColumns], width,",2,1,1,0,3,0,2,0,1,6,50,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,743,                    if (widthExcess > 0) {,1,1,0,1,3,1,0,0,0,5,22,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,745,                        final int width2 = blockWidth(qBlock + 1);,2,1,0,1,2,2,1,0,2,7,42,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,746,"                        copyBlockPart(blocks[index], width,",0,0,1,0,3,0,2,0,1,4,35,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,750,"                        copyBlockPart(blocks[index + 1], width2,",1,1,1,0,3,0,2,0,1,6,40,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,754,                    } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,756,"                        copyBlockPart(blocks[index], width,",0,0,1,0,3,0,2,0,1,4,35,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,763,                ++qBlock;,1,0,0,0,0,0,0,0,1,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,766,            ++pBlock;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,770,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,794,        final int length = srcEndColumn - srcStartColumn;,3,1,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,795,        int srcPos = srcStartRow * srcWidth + srcStartColumn;,4,2,0,0,0,1,0,0,0,3,53,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,796,        int dstPos = dstStartRow * dstWidth + dstStartColumn;,4,2,0,0,0,1,0,0,0,3,53,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,797,        for (int srcRow = srcStartRow; srcRow < srcEndRow; ++srcRow) {,5,1,0,1,3,2,0,0,1,6,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,798,"            System.arraycopy(srcBlock, srcPos, dstBlock, dstPos, length);",0,0,0,0,2,0,7,0,0,2,61,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,799,            srcPos += srcWidth;,2,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,800,            dstPos += dstWidth;,2,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,802,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,810,        final int refLength = subMatrix[0].length;,2,0,1,0,2,2,0,0,1,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,811,        if (refLength < 1) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,812,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");",0,0,0,1,2,1,2,0,1,5,98,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,814,        final int endRow    = row + subMatrix.length - 1;,4,2,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,815,        final int endColumn = column + refLength - 1;,3,2,0,0,0,2,0,0,1,4,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,816,"        checkSubMatrixIndex(row, endRow, column, endColumn);",0,0,0,0,2,0,5,0,1,3,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,817,        for (final T[] subRow : subMatrix) {,2,0,0,1,5,2,0,1,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,818,            if (subRow.length != refLength) {,3,1,0,1,3,1,0,0,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,819,                throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,826,        final int blockStartRow    = row / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,827,        final int blockEndRow      = (endRow + BLOCK_SIZE) / BLOCK_SIZE;,4,2,0,1,2,2,0,0,1,6,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,828,        final int blockStartColumn = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,829,        final int blockEndColumn   = (endColumn + BLOCK_SIZE) / BLOCK_SIZE;,4,2,0,1,2,2,0,0,1,6,67,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,832,        for (int iBlock = blockStartRow; iBlock < blockEndRow; ++iBlock) {,5,1,0,1,3,2,0,0,1,6,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,833,            final int iHeight  = blockHeight(iBlock);,1,0,0,1,2,2,2,0,2,6,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,834,            final int firstRow = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,835,"            final int iStart   = Math.max(row,    firstRow);",1,0,0,0,2,2,4,0,1,5,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,836,"            final int iEnd     = Math.min(endRow + 1, firstRow + iHeight);",4,2,0,0,2,2,2,0,1,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,838,            for (int jBlock = blockStartColumn; jBlock < blockEndColumn; ++jBlock) {,5,1,0,1,3,2,0,0,1,6,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,839,                final int jWidth      = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,43,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,840,                final int firstColumn = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,44,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,841,"                final int jStart      = Math.max(column,    firstColumn);",1,0,0,0,2,2,4,0,1,5,57,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,842,"                final int jEnd        = Math.min(endColumn + 1, firstColumn + jWidth);",4,2,0,0,2,2,2,0,1,6,70,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,843,                final int jLength     = jEnd - jStart;,3,1,0,0,0,2,0,0,1,4,38,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,846,                final T[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,57,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,847,                for (int i = iStart; i < iEnd; ++i) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,848,"                    System.arraycopy(subMatrix[i - row], jStart - column,",4,2,1,0,3,0,2,0,0,5,53,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,855,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,862,        checkRowIndex(row);,0,0,0,1,2,0,2,0,1,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,863,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), 1, columns);",2,0,0,1,4,2,1,4,3,7,80,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,866,        final int iBlock  = row / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,867,        final int iRow    = row - iBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,868,        int outBlockIndex = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,869,        int outIndex      = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,870,        T[] outBlock = out.blocks[outBlockIndex];,3,0,1,0,4,0,0,1,0,4,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,871,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,872,            final int jWidth     = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,873,            final T[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,57,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,874,            final int available  = outBlock.length - outIndex;,4,1,0,0,0,2,0,0,1,4,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,875,            if (jWidth > available) {,2,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,876,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, available);",2,1,0,0,2,0,6,0,0,4,70,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,877,                outBlock = out.blocks[++outBlockIndex];,4,0,0,0,2,0,0,0,2,3,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,878,"                System.arraycopy(block, iRow * jWidth, outBlock, 0, jWidth - available);",4,2,0,0,2,0,4,0,0,4,72,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,879,                outIndex = jWidth - available;,3,1,0,0,0,0,0,0,1,3,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,881,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, jWidth);",2,1,0,0,2,0,6,0,0,4,67,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,882,                outIndex += jWidth;,2,0,0,0,0,0,0,0,1,2,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,886,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,895,"            setRowMatrix(row, (BlockFieldMatrix<T>) matrix);",1,0,0,1,4,0,2,2,1,6,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,898,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,896,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,897,"            super.setRowMatrix(row, matrix);",3,0,0,0,2,1,0,0,0,3,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,899,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,915,        checkRowIndex(row);,0,0,0,1,2,0,2,0,1,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,916,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,917,        if ((matrix.getRowDimension() != 1) ||,0,2,0,2,5,1,2,0,0,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,919,            throw new InvalidMatrixException(,0,0,0,0,1,2,0,1,1,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,926,        final int iBlock = row / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,927,        final int iRow   = row - iBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,928,        int mBlockIndex  = 0;,1,0,0,0,0,1,0,0,0,2,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,929,        int mIndex       = 0;,1,0,0,0,0,1,0,0,0,2,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,930,        T[] mBlock  = matrix.blocks[mBlockIndex];,3,0,1,0,4,0,0,1,0,4,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,931,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,932,            final int jWidth     = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,933,            final T[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,57,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,934,            final int available  = mBlock.length - mIndex;,4,1,0,0,0,2,0,0,1,4,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,935,            if (jWidth > available) {,2,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,936,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, available);",2,1,0,0,2,0,6,0,0,4,66,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,937,                mBlock = matrix.blocks[++mBlockIndex];,4,0,0,0,2,0,0,0,2,3,38,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,938,"                System.arraycopy(mBlock, 0, block, iRow * jWidth, jWidth - available);",4,2,0,0,2,0,4,0,0,4,70,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,939,                mIndex = jWidth - available;,3,1,0,0,0,0,0,0,1,3,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,941,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, jWidth);",2,1,0,0,2,0,6,0,0,4,63,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,942,                mIndex += jWidth;,2,0,0,0,0,0,0,0,1,2,17,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,946,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,953,        checkColumnIndex(column);,0,0,0,1,2,0,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,954,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, 1);",2,0,0,1,4,2,1,4,3,7,77,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,957,        final int jBlock  = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,958,        final int jColumn = column - jBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,959,        final int jWidth  = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,960,        int outBlockIndex = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,961,        int outIndex      = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,962,        T[] outBlock = out.blocks[outBlockIndex];,3,0,1,0,4,0,0,1,0,4,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,963,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,964,            final int iHeight = blockHeight(iBlock);,1,0,0,1,2,2,2,0,2,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,965,            final T[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,57,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,966,            for (int i = 0; i < iHeight; ++i) {,4,1,0,1,3,2,0,0,1,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,967,                if (outIndex >= outBlock.length) {,3,1,0,1,3,1,0,0,0,5,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,968,                    outBlock = out.blocks[++outBlockIndex];,4,0,0,0,2,0,0,0,2,3,39,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,969,                    outIndex = 0;,1,0,0,0,0,0,0,0,1,2,13,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,971,                outBlock[outIndex++] = block[i * jWidth + jColumn];,4,2,1,0,4,0,0,0,2,5,51,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,975,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,984,"            setColumnMatrix(column, (BlockFieldMatrix<T>) matrix);",1,0,0,1,4,0,2,2,1,6,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,987,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,985,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,986,"            super.setColumnMatrix(column, matrix);",3,0,0,0,2,1,0,0,0,3,38,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,988,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1004,        checkColumnIndex(column);,0,0,0,1,2,0,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1005,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1006,        if ((matrix.getRowDimension() != nRows) ||,1,2,0,2,5,1,2,0,0,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1008,            throw new InvalidMatrixException(,0,0,0,0,1,2,0,1,1,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1015,        final int jBlock  = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1016,        final int jColumn = column - jBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1017,        final int jWidth  = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1018,        int mBlockIndex = 0;,1,0,0,0,0,1,0,0,0,2,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1019,        int mIndex      = 0;,1,0,0,0,0,1,0,0,0,2,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1020,        T[] mBlock = matrix.blocks[mBlockIndex];,3,0,1,0,4,0,0,1,0,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1021,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1022,            final int iHeight = blockHeight(iBlock);,1,0,0,1,2,2,2,0,2,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1023,            final T[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,57,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1024,            for (int i = 0; i < iHeight; ++i) {,4,1,0,1,3,2,0,0,1,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1025,                if (mIndex >= mBlock.length) {,3,1,0,1,3,1,0,0,0,5,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1026,                    mBlock = matrix.blocks[++mBlockIndex];,4,0,0,0,2,0,0,0,2,3,38,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1027,                    mIndex = 0;,1,0,0,0,0,0,0,0,1,2,11,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1029,                block[i * jWidth + jColumn] = mBlock[mIndex++];,4,2,1,0,4,0,0,0,2,5,47,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1033,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1040,        checkRowIndex(row);,0,0,0,1,2,0,2,0,1,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1041,"        final T[] outData = buildArray(getField(), columns);",1,0,0,1,6,1,3,1,3,7,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1044,        final int iBlock  = row / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1045,        final int iRow    = row - iBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1046,        int outIndex      = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1047,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1048,            final int jWidth     = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1049,            final T[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,57,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1050,"            System.arraycopy(block, iRow * jWidth, outData, outIndex, jWidth);",2,1,0,0,2,0,6,0,0,4,66,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1051,            outIndex += jWidth;,2,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1054,"        return new ArrayFieldVector<T>(outData, false);",1,0,0,0,2,2,0,2,2,5,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1063,"            setRow(row, ((ArrayFieldVector<T>) vector).getDataRef());",1,0,0,2,8,0,3,2,1,6,57,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1066,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1064,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1065,"            super.setRowVector(row, vector);",3,0,0,0,2,1,0,0,0,3,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1067,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1074,        checkColumnIndex(column);,0,0,0,1,2,0,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1075,"        final T[] outData = buildArray(getField(), rows);",1,0,0,1,6,1,3,1,3,7,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1078,        final int jBlock  = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1079,        final int jColumn = column - jBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1080,        final int jWidth  = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1081,        int outIndex      = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1082,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1083,            final int iHeight = blockHeight(iBlock);,1,0,0,1,2,2,2,0,2,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1084,            final T[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,57,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1085,            for (int i = 0; i < iHeight; ++i) {,4,1,0,1,3,2,0,0,1,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1086,                outData[outIndex++] = block[i * jWidth + jColumn];,4,2,1,0,4,0,0,0,2,5,50,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1090,"        return new ArrayFieldVector<T>(outData, false);",1,0,0,0,2,2,0,2,2,5,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1099,"            setColumn(column, ((ArrayFieldVector<T>) vector).getDataRef());",1,0,0,2,8,0,3,2,1,6,63,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1102,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1100,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1101,"            super.setColumnVector(column, vector);",3,0,0,0,2,1,0,0,0,3,38,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1103,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1110,        checkRowIndex(row);,0,0,0,1,2,0,2,0,1,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1111,"        final T[] out = buildArray(getField(), columns);",1,0,0,1,6,1,3,1,3,7,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1114,        final int iBlock  = row / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1115,        final int iRow    = row - iBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1116,        int outIndex      = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1117,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1118,            final int jWidth     = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1119,            final T[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,57,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1120,"            System.arraycopy(block, iRow * jWidth, out, outIndex, jWidth);",2,1,0,0,2,0,6,0,0,4,62,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1121,            outIndex += jWidth;,2,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1124,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1133,        checkRowIndex(row);,0,0,0,1,2,0,2,0,1,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1134,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1135,        if (array.length != nCols) {,3,1,0,1,3,1,0,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1136,            throw new InvalidMatrixException(,0,0,0,0,1,2,0,1,1,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1142,        final int iBlock  = row / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1143,        final int iRow    = row - iBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1144,        int outIndex      = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1145,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1146,            final int jWidth     = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1147,            final T[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,57,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1148,"            System.arraycopy(array, outIndex, block, iRow * jWidth, jWidth);",2,1,0,0,2,0,6,0,0,4,64,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1149,            outIndex += jWidth;,2,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1152,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1159,        checkColumnIndex(column);,0,0,0,1,2,0,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1160,"        final T[] out = buildArray(getField(), rows);",1,0,0,1,6,1,3,1,3,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1163,        final int jBlock  = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1164,        final int jColumn = column - jBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1165,        final int jWidth  = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1166,        int outIndex      = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1167,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1168,            final int iHeight = blockHeight(iBlock);,1,0,0,1,2,2,2,0,2,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1169,            final T[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,57,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1170,            for (int i = 0; i < iHeight; ++i) {,4,1,0,1,3,2,0,0,1,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1171,                out[outIndex++] = block[i * jWidth + jColumn];,4,2,1,0,4,0,0,0,2,5,46,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1175,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1184,        checkColumnIndex(column);,0,0,0,1,2,0,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1185,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1186,        if (array.length != nRows) {,3,1,0,1,3,1,0,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1187,            throw new InvalidMatrixException(,0,0,0,0,1,2,0,1,1,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1193,        final int jBlock  = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1194,        final int jColumn = column - jBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1195,        final int jWidth  = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1196,        int outIndex      = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1197,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1198,            final int iHeight = blockHeight(iBlock);,1,0,0,1,2,2,2,0,2,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1199,            final T[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,57,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1200,            for (int i = 0; i < iHeight; ++i) {,4,1,0,1,3,2,0,0,1,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1201,                block[i * jWidth + jColumn] = array[outIndex++];,4,2,1,0,4,0,0,0,2,5,48,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1205,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1212,            final int iBlock = row    / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1213,            final int jBlock = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1214,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,4,4,0,1,4,2,2,0,2,7,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1216,            return blocks[iBlock * blockColumns + jBlock][k];,3,2,1,0,4,1,0,0,0,5,49,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1217,        } catch (ArrayIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1218,            throw new MatrixIndexException(,0,0,0,0,1,2,0,1,1,4,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1229,            final int iBlock = row    / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1230,            final int jBlock = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1231,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,4,4,0,1,4,2,2,0,2,7,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1233,            blocks[iBlock * blockColumns + jBlock][k] = value;,4,2,1,0,4,0,0,0,1,5,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1238,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1234,        } catch (ArrayIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1235,            throw new MatrixIndexException(,0,0,0,0,1,2,0,1,1,4,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1239,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1246,            final int iBlock = row    / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1247,            final int jBlock = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1248,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,4,4,0,1,4,2,2,0,2,7,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1250,            final T[] blockIJ = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,59,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1251,            blockIJ[k] = blockIJ[k].add(increment);,0,0,1,1,6,0,2,0,1,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1256,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1252,        } catch (ArrayIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1253,            throw new MatrixIndexException(,0,0,0,0,1,2,0,1,1,4,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1257,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1264,            final int iBlock = row    / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1265,            final int jBlock = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1266,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,4,4,0,1,4,2,2,0,2,7,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1268,            final T[] blockIJ = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,59,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1269,            blockIJ[k] = blockIJ[k].multiply(factor);,0,0,1,1,6,0,2,0,1,5,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1274,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1270,        } catch (ArrayIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1271,            throw new MatrixIndexException(,0,0,0,0,1,2,0,1,1,4,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1275,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1281,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1282,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1283,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), nCols, nRows);",3,0,0,1,4,2,1,4,3,7,82,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1286,        int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1287,        for (int iBlock = 0; iBlock < blockColumns; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1288,            for (int jBlock = 0; jBlock < blockRows; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1291,                final T[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,1,0,1,1,6,44,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1292,                final T[] tBlock   = blocks[jBlock * blockColumns + iBlock];,4,2,1,0,4,1,0,1,1,7,60,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1293,                final int      pStart   = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,46,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1294,"                final int      pEnd     = Math.min(pStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,65,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1295,                final int      qStart   = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,46,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1296,"                final int      qEnd     = Math.min(qStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,62,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1297,                int k = 0;,1,0,0,0,0,1,0,0,0,2,10,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1298,                for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1299,                    final int lInc = pEnd - pStart;,3,1,0,0,0,2,0,0,1,4,31,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1300,                    int l = p - pStart;,3,1,0,0,0,1,0,0,0,3,19,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1301,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1302,                        outBlock[k] = tBlock[l];,0,0,1,0,4,0,0,0,1,3,24,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1303,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1304,                        l+= lInc;,2,0,0,0,0,0,0,0,1,2,9,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1309,                ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1314,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1321,        return rows;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1327,        return columns;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1335,        if (v.length != columns) {,3,1,0,1,3,1,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1336,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1340,"        final T[] out = buildArray(getField(), rows);",1,0,0,1,6,1,3,1,3,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1341,        final T zero = getField().getZero();,1,0,0,1,4,1,2,1,2,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1344,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1345,            final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1346,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1347,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1348,                final T[] block  = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,58,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1349,                final int      qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,44,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1350,"                final int      qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,63,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1351,                int k = 0;,1,0,0,0,0,1,0,0,0,2,10,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1352,                for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1353,                    T sum = zero;,2,0,0,0,0,0,0,1,0,2,13,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1354,                    int q = qStart;,2,0,0,0,0,1,0,0,0,2,15,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1355,                    while (q < qEnd - 3) {,2,2,0,1,3,1,0,0,0,5,22,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1356,                        sum = sum.,1,0,0,0,0,0,1,0,1,3,10,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1361,                        k += 4;,1,0,0,0,0,0,0,0,1,2,7,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1362,                        q += 4;,1,0,0,0,0,0,0,0,1,2,7,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1364,                    while (q < qEnd) {,2,1,0,1,3,1,0,0,0,5,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1365,                        sum = sum.add(block[k++].multiply(v[q++]));,3,0,1,2,8,0,3,0,3,6,43,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1367,                    out[p] = out[p].add(sum);,0,0,1,1,6,0,2,0,1,5,25,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1372,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1381,        if (v.length != rows) {,3,1,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1382,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1386,"        final T[] out = buildArray(getField(), columns);",1,0,0,1,6,1,3,1,3,7,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1387,        final T zero = getField().getZero();,1,0,0,1,4,1,2,1,2,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1390,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1391,            final int jWidth  = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1392,            final int jWidth2 = jWidth  + jWidth;,3,1,0,0,0,2,0,0,1,4,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1393,            final int jWidth3 = jWidth2 + jWidth;,3,1,0,0,0,2,0,0,1,4,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1394,            final int jWidth4 = jWidth3 + jWidth;,3,1,0,0,0,2,0,0,1,4,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1395,            final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1396,"            final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,58,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1397,            for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1398,                final T[] block  = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,58,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1399,                final int      pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,44,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1400,"                final int      pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,60,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1401,                for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1402,                    int k = q - qStart;,3,1,0,0,0,1,0,0,0,3,19,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1403,                    T sum = zero;,2,0,0,0,0,0,0,1,0,2,13,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1404,                    int p = pStart;,2,0,0,0,0,1,0,0,0,2,15,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1405,                    while (p < pEnd - 3) {,2,2,0,1,3,1,0,0,0,5,22,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1406,                        sum = sum.,1,0,0,0,0,0,1,0,1,3,10,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1411,                        k += jWidth4;,2,0,0,0,0,0,0,0,1,2,13,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1412,                        p += 4;,1,0,0,0,0,0,0,0,1,2,7,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1414,                    while (p < pEnd) {,2,1,0,1,3,1,0,0,0,5,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1415,                        sum = sum.add(block[k].multiply(v[p++]));,2,0,1,2,8,0,3,0,2,6,41,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1416,                        k += jWidth;,2,0,0,0,0,0,0,0,1,2,12,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1418,                    out[q] = out[q].add(sum);,0,0,1,1,6,0,2,0,1,5,25,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1423,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1431,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1432,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1433,            final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1434,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1435,            for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1436,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1437,                    final int jWidth = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,38,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1438,                    final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1439,"                    final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,58,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1440,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,57,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1441,                    int k = (p - pStart) * jWidth;,4,2,0,1,2,1,0,0,0,5,30,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1442,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1443,"                        block[k] = visitor.visit(p, q, block[k]);",0,0,1,0,6,0,4,0,1,4,41,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1444,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1449,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1456,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1457,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1458,            final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1459,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1460,            for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1461,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1462,                    final int jWidth = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,38,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1463,                    final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1464,"                    final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,58,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1465,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,57,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1466,                    int k = (p - pStart) * jWidth;,4,2,0,1,2,1,0,0,0,5,30,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1467,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1468,"                        visitor.visit(p, q, block[k]);",0,0,1,0,4,0,4,0,0,3,30,13,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1469,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1474,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1483,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,5,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1484,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,8,0,0,2,71,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1485,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,7,4,0,1,3,2,0,0,1,6,86,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1486,            final int p0     = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1487,"            final int pStart = Math.max(startRow, p0);",1,0,0,0,2,2,4,0,1,5,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1488,"            final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",4,3,0,1,4,2,2,0,1,7,67,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1489,            for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1490,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,7,4,0,1,3,2,0,0,1,6,92,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1491,                    final int jWidth = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,38,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1492,                    final int q0     = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1493,"                    final int qStart = Math.max(startColumn, q0);",1,0,0,0,2,2,4,0,1,5,45,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1494,"                    final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",4,3,0,1,4,2,2,0,1,7,70,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1495,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,57,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1496,                    int k = (p - p0) * jWidth + qStart - q0;,6,4,0,1,2,1,0,0,0,5,40,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1497,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1498,"                        block[k] = visitor.visit(p, q, block[k]);",0,0,1,0,6,0,4,0,1,4,41,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1499,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1504,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1513,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,5,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1514,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,8,0,0,2,71,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1515,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,7,4,0,1,3,2,0,0,1,6,86,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1516,            final int p0     = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1517,"            final int pStart = Math.max(startRow, p0);",1,0,0,0,2,2,4,0,1,5,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1518,"            final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",4,3,0,1,4,2,2,0,1,7,67,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1519,            for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1520,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,7,4,0,1,3,2,0,0,1,6,92,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1521,                    final int jWidth = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,38,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1522,                    final int q0     = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1523,"                    final int qStart = Math.max(startColumn, q0);",1,0,0,0,2,2,4,0,1,5,45,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1524,"                    final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",4,3,0,1,4,2,2,0,1,7,70,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1525,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,57,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1526,                    int k = (p - p0) * jWidth + qStart - q0;,6,4,0,1,2,1,0,0,0,5,40,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1527,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1528,"                        visitor.visit(p, q, block[k]);",0,0,1,0,4,0,4,0,0,3,30,13,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1529,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1534,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1541,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1542,        int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1543,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1544,            final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1545,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1546,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1547,                final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1548,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,58,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1549,                final T[] block = blocks[blockIndex];,1,0,1,0,4,1,0,1,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1550,                int k = 0;,1,0,0,0,0,1,0,0,0,2,10,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1551,                for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1552,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1553,"                        block[k] = visitor.visit(p, q, block[k]);",0,0,1,0,6,0,4,0,1,4,41,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1554,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1557,                ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1560,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1567,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1568,        int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1569,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1570,            final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1571,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1572,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1573,                final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1574,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,58,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1575,                final T[] block = blocks[blockIndex];,1,0,1,0,4,1,0,1,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1576,                int k = 0;,1,0,0,0,0,1,0,0,0,2,10,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1577,                for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1578,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1579,"                        visitor.visit(p, q, block[k]);",0,0,1,0,4,0,4,0,0,3,30,13,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1580,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1583,                ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1586,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1595,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,5,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1596,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,8,0,0,2,71,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1597,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,7,4,0,1,3,2,0,0,1,6,86,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1598,            final int p0     = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1599,"            final int pStart = Math.max(startRow, p0);",1,0,0,0,2,2,4,0,1,5,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1600,"            final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",4,3,0,1,4,2,2,0,1,7,67,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1601,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,7,4,0,1,3,2,0,0,1,6,92,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1602,                final int jWidth = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,38,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1603,                final int q0     = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1604,"                final int qStart = Math.max(startColumn, q0);",1,0,0,0,2,2,4,0,1,5,45,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1605,"                final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",4,3,0,1,4,2,2,0,1,7,70,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1606,                final T[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,57,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1607,                for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1608,                    int k = (p - p0) * jWidth + qStart - q0;,6,4,0,1,2,1,0,0,0,5,40,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1609,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1610,"                        block[k] = visitor.visit(p, q, block[k]);",0,0,1,0,6,0,4,0,1,4,41,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1611,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1616,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1625,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,5,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1626,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,8,0,0,2,71,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1627,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,7,4,0,1,3,2,0,0,1,6,86,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1628,            final int p0     = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1629,"            final int pStart = Math.max(startRow, p0);",1,0,0,0,2,2,4,0,1,5,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1630,"            final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",4,3,0,1,4,2,2,0,1,7,67,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1631,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,7,4,0,1,3,2,0,0,1,6,92,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1632,                final int jWidth = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,38,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1633,                final int q0     = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1634,"                final int qStart = Math.max(startColumn, q0);",1,0,0,0,2,2,4,0,1,5,45,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1635,"                final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",4,3,0,1,4,2,2,0,1,7,70,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1636,                final T[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,57,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1637,                for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1638,                    int k = (p - p0) * jWidth + qStart - q0;,6,4,0,1,2,1,0,0,0,5,40,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1639,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1640,"                        visitor.visit(p, q, block[k]);",0,0,1,0,4,0,4,0,0,3,30,13,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1641,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1646,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1655,        return (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;,6,4,0,1,2,1,0,0,0,5,79,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,74,1664,        return (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;,6,4,0,1,2,1,0,0,0,5,91,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,234,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,2,1,1,2,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,243,                sum = 0;,1,0,0,0,0,0,0,0,1,2,8,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,244,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,248,                sum += value * value;,3,1,0,0,0,0,0,0,1,3,21,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,249,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,253,                return Math.sqrt(sum);,0,0,0,1,2,1,3,0,0,4,22,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,75,"            throw new NonSquareMatrixException(matrix.getRowDimension(), matrix.getColumnDimension());",0,0,0,1,6,2,4,1,1,6,90,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,120,                    ++nonZero;,1,0,0,0,0,0,0,0,1,2,10,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,126,                singular = true;,1,0,0,0,0,0,0,0,2,2,16,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,127,                return;,0,0,0,0,0,1,0,0,1,2,7,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,132,                T tmp = field.getZero();,1,0,0,1,2,0,2,1,0,5,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,133,                for (int i = 0; i < m; i++) {,4,1,0,1,3,2,0,0,1,6,29,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,134,                    tmp = lu[nonZero][i];,1,0,1,0,4,0,0,0,1,4,21,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,135,                    lu[nonZero][i] = lu[col][i];,0,0,1,0,8,0,0,0,1,3,28,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,136,                    lu[col][i] = tmp;,1,0,1,0,4,0,0,0,1,4,17,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,138,                int temp = pivot[nonZero];,1,0,1,0,2,1,0,0,0,4,26,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,139,                pivot[nonZero] = pivot[col];,0,0,1,0,4,0,0,0,1,3,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,140,                pivot[col] = temp;,1,0,1,0,2,0,0,0,1,4,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,141,                even = !even;,2,0,0,0,0,0,0,0,2,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,156,        if ((cachedL == null) && !singular) {,2,2,0,2,5,1,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,157,            final int m = pivot.length;,3,0,0,0,0,2,0,0,1,3,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,158,"            cachedL = new Array2DRowFieldMatrix<T>(field, m, m);",4,0,0,0,2,1,0,2,2,5,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,159,            for (int i = 0; i < m; ++i) {,4,1,0,1,3,2,0,0,1,6,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,160,                final T[] luI = lu[i];,1,0,1,0,4,1,0,1,1,6,22,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,161,                for (int j = 0; j < i; ++j) {,4,1,0,1,3,2,0,0,1,6,29,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,162,"                    cachedL.setEntry(i, j, luI[j]);",0,0,1,0,4,0,4,0,0,3,31,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,164,"                cachedL.setEntry(i, i, field.getOne());",0,0,0,1,4,0,6,0,0,3,39,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,167,        return cachedL;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,172,        if ((cachedU == null) && !singular) {,2,2,0,2,5,1,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,173,            final int m = pivot.length;,3,0,0,0,0,2,0,0,1,3,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,174,"            cachedU = new Array2DRowFieldMatrix<T>(field, m, m);",4,0,0,0,2,1,0,2,2,5,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,175,            for (int i = 0; i < m; ++i) {,4,1,0,1,3,2,0,0,1,6,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,176,                final T[] luI = lu[i];,1,0,1,0,4,1,0,1,1,6,22,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,177,                for (int j = i; j < m; ++j) {,5,1,0,1,3,2,0,0,1,6,29,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,178,"                    cachedU.setEntry(i, j, luI[j]);",0,0,1,0,4,0,4,0,0,3,31,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,182,        return cachedU;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,187,        if ((cachedP == null) && !singular) {,2,2,0,2,5,1,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,188,            final int m = pivot.length;,3,0,0,0,0,2,0,0,1,3,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,189,"            cachedP = new Array2DRowFieldMatrix<T>(field, m, m);",4,0,0,0,2,1,0,2,2,5,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,190,            for (int i = 0; i < m; ++i) {,4,1,0,1,3,2,0,0,1,6,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,191,"                cachedP.setEntry(i, pivot[i], field.getOne());",0,0,1,1,6,0,5,0,0,4,46,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,194,        return cachedP;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,199,        return pivot.clone();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,204,        if (singular) {,1,0,0,1,3,1,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,205,            return field.getZero();,0,0,0,1,2,1,2,0,0,4,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,207,            final int m = pivot.length;,3,0,0,0,0,2,0,0,1,3,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,208,            T determinant = even ? field.getOne() : field.getZero().subtract(field.getOne());,2,0,0,2,8,0,7,1,0,5,81,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,209,            for (int i = 0; i < m; i++) {,4,1,0,1,3,2,0,0,1,6,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,210,                determinant = determinant.multiply(lu[i][i]);,1,0,1,1,6,0,2,0,1,6,45,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,212,            return determinant;,1,0,0,0,0,1,0,0,0,2,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,606,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,1,1,1,2,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,611,"                out.setEntry(column, row, value);",0,0,0,0,2,0,5,0,0,2,33,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,612,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,495,        return new RuntimeException() {,0,0,0,1,3,2,0,1,1,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,503,"                return buildMessage(Locale.US, pattern, argument);",2,0,0,0,2,1,3,0,1,5,50,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,509,"                return buildMessage(Locale.getDefault(), pattern, argument);",0,0,0,1,4,1,5,0,1,5,60,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,405,        return new NoSuchElementException() {,0,0,0,1,3,2,0,1,1,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,413,"                return buildMessage(Locale.US, pattern, arguments);",2,0,0,0,2,1,3,0,1,5,51,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,419,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,376,        return new ConcurrentModificationException() {,0,0,0,1,3,2,0,1,1,5,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,384,"                return buildMessage(Locale.US, pattern, arguments);",2,0,0,0,2,1,3,0,1,5,51,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,390,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,305,        return new IllegalArgumentException() {,0,0,0,1,3,2,0,1,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,313,"                return buildMessage(Locale.US, pattern, arguments);",2,0,0,0,2,1,3,0,1,5,51,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,74,319,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,631,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0,0,0,2,6,1,3,2,2,6,82,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,636,"                out.setEntry(column, row, value);",0,0,0,0,2,0,5,0,0,2,33,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,637,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/SingularMatrixException,74,35,"        super(""matrix is singular"");",0,0,0,1,2,1,0,0,2,4,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/SingularMatrixException,74,36,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,256,            return !singular;,1,0,0,0,0,1,0,0,1,3,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,265,                throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,270,                throw new SingularMatrixException();,0,0,0,1,2,2,0,1,1,5,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,306,                return solve((ArrayFieldVector<T>) b);,1,0,0,2,4,1,1,2,1,7,38,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,307,            } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,309,                final int m = pivot.length;,3,0,0,0,0,2,0,0,1,3,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,310,                if (b.getDimension() != m) {,1,1,0,2,5,1,2,0,0,6,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,311,                    throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,315,                if (singular) {,1,0,0,1,3,1,0,0,0,4,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,316,                    throw new SingularMatrixException();,0,0,0,1,2,2,0,1,1,5,36,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,320,"                final T[] bp = (T[]) Array.newInstance(field.getZero().getClass(), m);",1,0,0,1,12,1,6,2,1,7,70,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,323,                for (int row = 0; row < m; row++) {,4,1,0,1,3,2,0,0,1,6,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,324,                    bp[row] = b.getEntry(pivot[row]);,0,0,1,1,6,0,2,0,1,5,33,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,328,                for (int col = 0; col < m; col++) {,4,1,0,1,3,2,0,0,1,6,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,329,                    final T bpCol = bp[col];,1,0,1,0,2,1,0,1,1,6,24,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,330,                    for (int i = col + 1; i < m; i++) {,5,2,0,1,3,2,0,0,1,6,35,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,331,                        bp[i] = bp[i].subtract(bpCol.multiply(lu[i][col]));,0,0,1,2,12,0,3,0,1,5,51,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,336,                for (int col = m - 1; col >= 0; col--) {,4,2,0,1,3,2,0,0,1,6,40,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,337,                    bp[col] = bp[col].divide(lu[col][col]);,0,0,1,1,10,0,1,0,1,5,39,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,338,                    final T bpCol = bp[col];,1,0,1,0,2,1,0,1,1,6,24,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,339,                    for (int i = 0; i < col; i++) {,4,1,0,1,3,2,0,0,1,6,31,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,340,                        bp[i] = bp[i].subtract(bpCol.multiply(lu[i][col]));,0,0,1,2,12,0,3,0,1,5,51,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,344,"                return new ArrayFieldVector<T>(bp, false);",1,0,0,0,2,2,0,2,2,5,42,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,358,"            return new ArrayFieldVector<T>(solve(b.getDataRef()), false);",0,0,0,2,6,2,3,2,3,6,61,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,367,                throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,372,                throw new SingularMatrixException();,0,0,0,1,2,2,0,1,1,5,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,288,        subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {,0,0,0,1,4,1,2,1,1,6,71,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,293,"                return getEntry(selectedRows[row], selectedColumns[column]);",0,0,1,0,6,1,1,0,1,5,60,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,44,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,45,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,61,        return (rows * columns <= 4096) ?,2,2,0,1,2,1,0,0,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,83,        return (rows * columns <= 4096) ?,2,2,0,1,2,1,0,0,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,106,        return (data.length * data[0].length <= 4096) ?,3,2,1,1,4,1,0,0,0,6,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,129,        return (data.length * data[0].length <= 4096) ?,3,2,1,1,4,1,0,0,0,6,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,142,"        final RealMatrix m = createRealMatrix(dimension, dimension);",1,0,0,0,2,1,3,1,2,6,60,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,143,        for (int i = 0; i < dimension; ++i) {,4,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,144,"            m.setEntry(i, i, 1.0);",0,0,0,0,2,0,4,0,0,2,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,146,        return m;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,161,        final T zero = field.getZero();,1,0,0,1,2,1,2,1,1,7,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,162,        final T one  = field.getOne();,1,0,0,1,2,1,2,1,1,7,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,164,"        final T[][] d = (T[][]) Array.newInstance(zero.getClass(), new int[] { dimension, dimension });",3,0,0,1,18,3,4,2,1,7,95,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,165,        for (int row = 0; row < dimension; row++) {,4,1,0,1,3,2,0,0,1,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,166,            final T[] dRow = d[row];,1,0,1,0,4,1,0,1,1,6,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,167,"            Arrays.fill(dRow, zero);",0,0,0,0,2,0,4,0,0,2,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,168,            dRow[row] = one;,1,0,1,0,2,0,0,0,1,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,170,"        return new Array2DRowFieldMatrix<T>(d, false);",1,0,0,0,2,2,0,2,2,5,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,184,        final BigDecimal[][] d = new BigDecimal[dimension][dimension];,1,0,1,0,8,2,0,2,1,6,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,185,        for (int row = 0; row < dimension; row++) {,4,1,0,1,3,2,0,0,1,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,186,            final BigDecimal[] dRow = d[row];,1,0,1,0,4,1,0,1,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,187,"            Arrays.fill(dRow, BigMatrixImpl.ZERO);",2,0,0,0,2,0,3,0,0,3,38,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,188,            dRow[row] = BigMatrixImpl.ONE;,2,0,1,0,2,0,0,0,1,4,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,190,"        return new BigMatrixImpl(d, false);",1,0,0,0,2,2,0,1,2,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,202,"        final RealMatrix m = createRealMatrix(diagonal.length, diagonal.length);",5,0,0,0,2,1,1,1,2,6,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,203,        for (int i = 0; i < diagonal.length; ++i) {,5,1,0,1,3,2,0,0,1,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,204,"            m.setEntry(i, i, diagonal[i]);",0,0,1,0,4,0,4,0,0,3,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,206,        return m;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,220,        final FieldMatrix<T> m =,1,0,0,0,0,1,0,2,1,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,222,        for (int i = 0; i < diagonal.length; ++i) {,5,1,0,1,3,2,0,0,1,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,223,"            m.setEntry(i, i, diagonal[i]);",0,0,1,0,4,0,4,0,0,3,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,225,        return m;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,241,        return new BigMatrixImpl(data);,1,0,0,1,2,2,0,1,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,257,        return new BigMatrixImpl(data);,1,0,0,1,2,2,0,1,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,279,"        return new BigMatrixImpl(data, copyArray);",2,0,0,0,2,2,0,1,1,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,295,        return new BigMatrixImpl(data);,1,0,0,1,2,2,0,1,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,307,"        return new ArrayRealVector(data, true);",1,0,0,0,2,2,0,1,2,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,320,"        return new ArrayFieldVector<T>(data, true);",1,0,0,0,2,2,0,2,2,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,333,        final int nCols = rowData.length;,3,0,0,0,0,2,0,0,1,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,334,"        final RealMatrix m = createRealMatrix(1, nCols);",1,0,0,0,2,1,2,1,2,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,335,        for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,336,"            m.setEntry(0, i, rowData[i]);",0,0,1,0,4,0,3,0,0,3,29,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,338,        return m;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,353,        final int nCols = rowData.length;,3,0,0,0,0,2,0,0,1,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,354,        if (nCols == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,355,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");",0,0,0,1,2,1,2,0,1,5,98,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,357,"        final FieldMatrix<T> m = createFieldMatrix(rowData[0].getField(), 1, nCols);",1,0,1,1,6,1,3,2,2,8,76,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,358,        for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,359,"            m.setEntry(0, i, rowData[i]);",0,0,1,0,4,0,3,0,0,3,29,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,361,        return m;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,376,        final int nCols = rowData.length;,3,0,0,0,0,2,0,0,1,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,377,        final BigDecimal[][] data = new BigDecimal[1][nCols];,1,0,1,0,8,2,0,2,1,6,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,378,        for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,379,            data[0][i] = new BigDecimal(rowData[i]);,0,0,1,1,8,1,0,1,2,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,381,"        return new BigMatrixImpl(data, false);",1,0,0,0,2,2,0,1,2,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,396,        final int nCols = rowData.length;,3,0,0,0,0,2,0,0,1,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,397,        final BigDecimal[][] data = new BigDecimal[1][nCols];,1,0,1,0,8,2,0,2,1,6,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,398,"        System.arraycopy(rowData, 0, data[0], 0, nCols);",0,0,1,0,4,0,4,0,0,3,48,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,399,"        return new BigMatrixImpl(data, false);",1,0,0,0,2,2,0,1,2,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,414,        final int nCols = rowData.length;,3,0,0,0,0,2,0,0,1,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,415,        final BigDecimal[][] data = new BigDecimal[1][nCols];,1,0,1,0,8,2,0,2,1,6,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,416,        for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,417,            data[0][i] = new BigDecimal(rowData[i]);,0,0,1,1,8,1,0,1,2,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,419,"        return new BigMatrixImpl(data, false);",1,0,0,0,2,2,0,1,2,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,432,        final int nRows = columnData.length;,3,0,0,0,0,2,0,0,1,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,433,"        final RealMatrix m = createRealMatrix(nRows, 1);",1,0,0,0,2,1,2,1,2,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,434,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,435,"            m.setEntry(i, 0, columnData[i]);",0,0,1,0,4,0,3,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,437,        return m;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,452,        final int nRows = columnData.length;,3,0,0,0,0,2,0,0,1,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,453,        if (nRows == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,454,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");",0,0,0,1,2,1,2,0,1,5,95,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,456,"        final FieldMatrix<T> m = createFieldMatrix(columnData[0].getField(), nRows, 1);",1,0,1,1,6,1,3,2,2,8,79,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,457,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,458,"            m.setEntry(i, 0, columnData[i]);",0,0,1,0,4,0,3,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,460,        return m;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,475,        final int nRows = columnData.length;,3,0,0,0,0,2,0,0,1,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,476,        final BigDecimal[][] data = new BigDecimal[nRows][1];,1,0,1,0,8,2,0,2,1,6,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,477,        for (int row = 0; row < nRows; row++) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,478,            data[row][0] = new BigDecimal(columnData[row]);,0,0,1,1,8,1,0,1,2,6,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,480,"        return new BigMatrixImpl(data, false);",1,0,0,0,2,2,0,1,2,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,495,        final int nRows = columnData.length;,3,0,0,0,0,2,0,0,1,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,496,        final BigDecimal[][] data = new BigDecimal[nRows][1];,1,0,1,0,8,2,0,2,1,6,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,497,        for (int row = 0; row < nRows; row++) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,498,            data[row][0] = columnData[row];,0,0,1,0,6,0,0,0,1,3,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,500,"        return new BigMatrixImpl(data, false);",1,0,0,0,2,2,0,1,2,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,515,        int nRows = columnData.length;,3,0,0,0,0,1,0,0,0,2,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,516,        final BigDecimal[][] data = new BigDecimal[nRows][1];,1,0,1,0,8,2,0,2,1,6,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,517,        for (int row = 0; row < nRows; row++) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,518,            data[row][0] = new BigDecimal(columnData[row]);,0,0,1,1,8,1,0,1,2,6,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,520,"        return new BigMatrixImpl(data, false);",1,0,0,0,2,2,0,1,2,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,530,        if (row < 0 || row >= m.getRowDimension()) {,2,3,0,2,5,1,2,0,0,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,531,"            throw new MatrixIndexException(""row index {0} out of allowed range [{1}, {2}]"",",0,0,0,0,9,2,0,1,2,4,79,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,534,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,544,        if (column < 0 || column >= m.getColumnDimension()) {,2,3,0,2,5,1,2,0,0,6,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,545,"            throw new MatrixIndexException(""column index {0} out of allowed range [{1}, {2}]"",",0,0,0,0,9,2,0,1,2,4,82,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,548,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,564,"        checkRowIndex(m, startRow);",0,0,0,0,2,0,3,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,565,"        checkRowIndex(m, endRow);",0,0,0,0,2,0,3,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,566,        if (startRow > endRow) {,2,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,567,"            throw new MatrixIndexException(""initial row {0} after final row {1}"",",0,0,0,0,5,3,0,1,2,4,69,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,571,"        checkColumnIndex(m, startColumn);",0,0,0,0,2,0,3,0,1,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,572,"        checkColumnIndex(m, endColumn);",0,0,0,0,2,0,3,0,1,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,573,        if (startColumn > endColumn) {,2,1,0,1,3,1,0,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,574,"            throw new MatrixIndexException(""initial column {0} after final column {1}"",",0,0,0,0,5,3,0,1,2,4,75,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,579,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,593,        if (selectedRows.length * selectedColumns.length == 0) {,4,2,0,1,3,1,0,0,0,5,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,594,            if (selectedRows.length == 0) {,2,1,0,1,3,1,0,0,0,5,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,595,"                throw new MatrixIndexException(""empty selected row index array"");",0,0,0,1,2,2,0,1,2,5,65,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,597,"            throw new MatrixIndexException(""empty selected column index array"");",0,0,0,1,2,2,0,1,2,5,68,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,600,        for (final int row : selectedRows) {,2,0,0,1,3,3,0,0,1,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,601,"            checkRowIndex(m, row);",0,0,0,0,2,0,3,0,1,3,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,603,        for (final int column : selectedColumns) {,2,0,0,1,3,3,0,0,1,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,604,"            checkColumnIndex(m, column);",0,0,0,0,2,0,3,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,606,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,616,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0,2,0,2,7,1,4,0,0,5,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,618,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,623,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,633,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0,2,0,2,7,1,4,0,0,5,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,635,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,640,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,651,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,664,        final FractionMatrixConverter converter = new FractionMatrixConverter();,1,0,0,1,2,2,0,2,2,6,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,665,        m.walkInOptimizedOrder(converter);,0,0,0,1,2,0,3,0,0,3,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,666,        return converter.getConvertedMatrix();,0,0,0,1,2,1,2,0,0,4,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,789,        final int n = vector.getDimension();,1,0,0,1,2,2,2,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,790,        oos.writeInt(n);,0,0,0,1,2,0,3,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,791,        for (int i = 0; i < n; ++i) {,4,1,0,1,3,2,0,0,1,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,792,            oos.writeDouble(vector.getEntry(i));,0,0,0,2,4,0,5,0,0,3,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,794,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,820,            final int n = ois.readInt();,1,0,0,1,2,2,2,0,1,6,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,821,            final double[] data = new double[n];,1,0,1,0,4,4,0,0,1,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,822,            for (int i = 0; i < n; ++i) {,4,1,0,1,3,2,0,0,1,6,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,823,                data[i] = ois.readDouble();,0,0,1,1,4,0,2,0,1,5,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,827,"            final RealVector vector = new ArrayRealVector(data, false);",2,0,0,0,2,2,0,2,3,5,59,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,830,            final java.lang.reflect.Field f =,5,0,0,0,0,1,0,0,1,3,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,832,            f.setAccessible(true);,0,0,0,1,2,0,2,0,1,4,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,833,"            f.set(instance, vector);",0,0,0,0,2,0,4,0,0,2,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,843,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,835,        } catch (NoSuchFieldException nsfe) {,1,0,0,1,4,1,0,1,0,5,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,836,            IOException ioe = new IOException();,1,0,0,1,2,1,0,2,1,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,837,            ioe.initCause(nsfe);,0,0,0,1,2,0,3,0,0,3,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,838,            throw ioe;,1,0,0,0,0,1,0,0,0,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,839,        } catch (IllegalAccessException iae) {,1,0,0,1,4,1,0,1,0,5,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,840,            IOException ioe = new IOException();,1,0,0,1,2,1,0,2,1,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,841,            ioe.initCause(iae);,0,0,0,1,2,0,3,0,0,3,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,842,            throw ioe;,1,0,0,0,0,1,0,0,0,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,845,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,890,        final int n = matrix.getRowDimension();,1,0,0,1,2,2,2,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,891,        final int m = matrix.getColumnDimension();,1,0,0,1,2,2,2,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,892,        oos.writeInt(n);,0,0,0,1,2,0,3,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,893,        oos.writeInt(m);,0,0,0,1,2,0,3,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,894,        for (int i = 0; i < n; ++i) {,4,1,0,1,3,2,0,0,1,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,895,            for (int j = 0; j < m; ++j) {,4,1,0,1,3,2,0,0,1,6,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,896,"                oos.writeDouble(matrix.getEntry(i, j));",0,0,0,0,4,0,6,0,0,2,39,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,899,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,925,            final int n = ois.readInt();,1,0,0,1,2,2,2,0,1,6,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,926,            final int m = ois.readInt();,1,0,0,1,2,2,2,0,1,6,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,927,            final double[][] data = new double[n][m];,1,0,1,0,8,4,0,0,1,5,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,928,            for (int i = 0; i < n; ++i) {,4,1,0,1,3,2,0,0,1,6,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,929,                final double[] dataI = data[i];,1,0,1,0,4,2,0,0,1,5,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,930,                for (int j = 0; j < m; ++j) {,4,1,0,1,3,2,0,0,1,6,29,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,931,                    dataI[j] = ois.readDouble();,0,0,1,1,4,0,2,0,1,5,28,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,936,"            final RealMatrix matrix = new Array2DRowRealMatrix(data, false);",2,0,0,0,2,2,0,2,3,5,64,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,939,            final java.lang.reflect.Field f =,5,0,0,0,0,1,0,0,1,3,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,941,            f.setAccessible(true);,0,0,0,1,2,0,2,0,1,4,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,942,"            f.set(instance, matrix);",0,0,0,0,2,0,4,0,0,2,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,952,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,944,        } catch (NoSuchFieldException nsfe) {,1,0,0,1,4,1,0,1,0,5,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,945,            IOException ioe = new IOException();,1,0,0,1,2,1,0,2,1,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,946,            ioe.initCause(nsfe);,0,0,0,1,2,0,3,0,0,3,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,947,            throw ioe;,1,0,0,0,0,1,0,0,0,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,948,        } catch (IllegalAccessException iae) {,1,0,0,1,4,1,0,1,0,5,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,949,            IOException ioe = new IOException();,1,0,0,1,2,1,0,2,1,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,950,            ioe.initCause(iae);,0,0,0,1,2,0,3,0,0,3,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,951,            throw ioe;,1,0,0,0,0,1,0,0,0,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,954,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,70,        super(field);,1,0,0,1,2,1,0,0,1,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,71,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,104,        super(extractField(d));,0,0,0,2,4,1,2,0,2,5,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,105,        copyIn(d);,0,0,0,1,2,0,2,0,1,4,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,106,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,127,            copyIn(d);,0,0,0,1,2,0,2,0,1,4,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,130,                throw new NullPointerException();,0,0,0,1,2,2,0,1,1,5,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,134,                throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,139,                throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,144,                    throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,161,        super(extractField(v));,0,0,0,2,4,1,2,0,2,5,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,162,        final int nRows = v.length;,3,0,0,0,0,2,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,163,"        data = buildArray(getField(), nRows, 1);",1,0,0,1,4,0,3,0,3,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,164,        for (int row = 0; row < nRows; row++) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,165,            data[row][0] = v[row];,0,0,1,0,6,0,0,0,1,3,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,167,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,173,"        return new Array2DRowFieldMatrix<T>(getField(), rowDimension, columnDimension);",2,0,0,1,4,2,1,2,2,7,79,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,179,"        return new Array2DRowFieldMatrix<T>(copyOut(), false);",0,0,0,1,4,2,1,2,3,6,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,187,            return add((Array2DRowFieldMatrix<T>) m);,1,0,0,2,4,1,1,2,1,7,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,188,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,189,            return super.add(m);,2,0,0,1,2,2,0,0,0,4,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,204,        checkAdditionCompatible(m);,0,0,0,1,2,0,2,0,1,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,206,        final int rowCount    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,207,        final int columnCount = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,208,"        final T[][] outData = buildArray(getField(), rowCount, columnCount);",1,0,0,1,8,1,4,1,3,7,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,209,        for (int row = 0; row < rowCount; row++) {,4,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,210,            final T[] dataRow    = data[row];,1,0,1,0,4,1,0,1,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,211,            final T[] mRow       = m.data[row];,3,0,1,0,4,1,0,1,1,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,212,            final T[] outDataRow = outData[row];,1,0,1,0,4,1,0,1,1,6,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,213,            for (int col = 0; col < columnCount; col++) {,4,1,0,1,3,2,0,0,1,6,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,214,                outDataRow[col] = dataRow[col].add(mRow[col]);,0,0,1,1,8,0,1,0,1,5,46,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,218,"        return new Array2DRowFieldMatrix<T>(outData, false);",1,0,0,0,2,2,0,2,2,5,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,227,            return subtract((Array2DRowFieldMatrix<T>) m);,1,0,0,2,4,1,1,2,1,7,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,228,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,229,            return super.subtract(m);,2,0,0,1,2,2,0,0,0,4,25,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,244,        checkSubtractionCompatible(m);,0,0,0,1,2,0,2,0,1,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,246,        final int rowCount    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,247,        final int columnCount = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,248,"        final T[][] outData = buildArray(getField(), rowCount, columnCount);",1,0,0,1,8,1,4,1,3,7,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,249,        for (int row = 0; row < rowCount; row++) {,4,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,250,            final T[] dataRow    = data[row];,1,0,1,0,4,1,0,1,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,251,            final T[] mRow       = m.data[row];,3,0,1,0,4,1,0,1,1,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,252,            final T[] outDataRow = outData[row];,1,0,1,0,4,1,0,1,1,6,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,253,            for (int col = 0; col < columnCount; col++) {,4,1,0,1,3,2,0,0,1,6,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,254,                outDataRow[col] = dataRow[col].subtract(mRow[col]);,0,0,1,1,8,0,1,0,1,5,51,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,258,"        return new Array2DRowFieldMatrix<T>(outData, false);",1,0,0,0,2,2,0,2,2,5,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,267,            return multiply((Array2DRowFieldMatrix<T>) m);,1,0,0,2,4,1,1,2,1,7,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,268,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,269,            return super.multiply(m);,2,0,0,1,2,2,0,0,0,4,25,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,284,        checkMultiplicationCompatible(m);,0,0,0,1,2,0,2,0,1,4,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,286,        final int nRows = this.getRowDimension();,1,0,0,1,2,3,1,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,287,        final int nCols = m.getColumnDimension();,1,0,0,1,2,2,2,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,288,        final int nSum = this.getColumnDimension();,1,0,0,1,2,3,1,0,1,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,289,"        final T[][] outData = buildArray(getField(), nRows, nCols);",1,0,0,1,8,1,4,1,3,7,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,290,        for (int row = 0; row < nRows; row++) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,291,            final T[] dataRow    = data[row];,1,0,1,0,4,1,0,1,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,292,            final T[] outDataRow = outData[row];,1,0,1,0,4,1,0,1,1,6,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,293,            for (int col = 0; col < nCols; col++) {,4,1,0,1,3,2,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,294,                T sum = getField().getZero();,1,0,0,1,4,0,2,1,1,6,29,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,295,                for (int i = 0; i < nSum; i++) {,4,1,0,1,3,2,0,0,1,6,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,296,                    sum = sum.add(dataRow[i].multiply(m.data[i][col]));,3,0,1,2,10,0,3,0,1,6,51,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,298,                outDataRow[col] = sum;,1,0,1,0,2,0,0,0,1,4,22,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,302,"        return new Array2DRowFieldMatrix<T>(outData, false);",1,0,0,0,2,2,0,2,2,5,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,320,        return data;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,327,        if (data == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,328,            if (row > 0) {,1,1,0,1,3,1,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,329,                throw MathRuntimeException.createIllegalStateException(,0,0,0,0,1,1,2,0,0,3,55,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,332,            if (column > 0) {,1,1,0,1,3,1,0,0,0,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,333,                throw MathRuntimeException.createIllegalStateException(,0,0,0,0,1,1,2,0,0,3,55,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,336,            final int nRows = subMatrix.length;,3,0,0,0,0,2,0,0,1,3,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,337,            if (nRows == 0) {,1,1,0,1,3,1,0,0,0,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,338,                throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,342,            final int nCols = subMatrix[0].length;,2,0,1,0,2,2,0,0,1,5,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,343,            if (nCols == 0) {,1,1,0,1,3,1,0,0,0,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,344,                throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,347,"            data = buildArray(getField(), subMatrix.length, nCols);",3,0,0,1,4,0,3,0,3,5,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,348,            for (int i = 0; i < data.length; ++i) {,5,1,0,1,3,2,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,349,                if (subMatrix[i].length != nCols) {,2,1,1,1,5,1,0,0,0,6,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,350,                    throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,353,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",2,1,1,0,6,0,4,0,0,5,64,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,355,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,356,"            super.setSubMatrix(subMatrix, row, column);",4,0,0,0,2,1,0,0,0,3,43,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,359,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,367,        } catch (ArrayIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,368,            throw new MatrixIndexException(,0,0,0,0,1,2,0,1,1,4,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,379,        } catch (ArrayIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,380,            throw new MatrixIndexException(,0,0,0,0,1,2,0,1,1,4,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,390,            data[row][column] = data[row][column].add(increment);,0,0,1,1,10,0,2,0,1,5,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,394,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,391,        } catch (ArrayIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,392,            throw new MatrixIndexException(,0,0,0,0,1,2,0,1,1,4,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,395,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,402,            data[row][column] = data[row][column].multiply(factor);,0,0,1,1,10,0,2,0,1,5,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,406,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,403,        } catch (ArrayIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,404,            throw new MatrixIndexException(,0,0,0,0,1,2,0,1,1,4,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,407,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,425,        final int nRows = this.getRowDimension();,1,0,0,1,2,3,1,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,426,        final int nCols = this.getColumnDimension();,1,0,0,1,2,3,1,0,1,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,427,        if (v.length != nCols) {,3,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,428,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,431,"        final T[] out = buildArray(getField(), nRows);",1,0,0,1,6,1,3,1,3,7,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,432,        for (int row = 0; row < nRows; row++) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,433,            final T[] dataRow = data[row];,1,0,1,0,4,1,0,1,1,6,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,434,            T sum = getField().getZero();,1,0,0,1,4,0,2,1,1,6,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,435,            for (int i = 0; i < nCols; i++) {,4,1,0,1,3,2,0,0,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,436,                sum = sum.add(dataRow[i].multiply(v[i]));,1,0,1,2,8,0,3,0,1,6,41,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,438,            out[row] = sum;,1,0,1,0,2,0,0,0,1,4,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,440,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,448,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,449,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,450,        if (v.length != nRows) {,3,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,451,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,455,"        final T[] out = buildArray(getField(), nCols);",1,0,0,1,6,1,3,1,3,7,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,456,        for (int col = 0; col < nCols; ++col) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,457,            T sum = getField().getZero();,1,0,0,1,4,0,2,1,1,6,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,458,            for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,459,                sum = sum.add(data[i][col].multiply(v[i]));,1,0,1,2,10,0,3,0,1,6,43,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,461,            out[col] = sum;,1,0,1,0,2,0,0,0,1,4,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,464,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,506,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,5,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,507,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,509,        for (int i = startRow; i <= endRow; ++i) {,5,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,510,            final T[] rowI = data[i];,1,0,1,0,4,1,0,1,1,6,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,511,            for (int j = startColumn; j <= endColumn; ++j) {,5,1,0,1,3,2,0,0,1,6,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,512,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0,0,1,0,6,0,4,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,515,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,524,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,5,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,525,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,527,        for (int i = startRow; i <= endRow; ++i) {,5,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,528,            final T[] rowI = data[i];,1,0,1,0,4,1,0,1,1,6,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,529,            for (int j = startColumn; j <= endColumn; ++j) {,5,1,0,1,3,2,0,0,1,6,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,530,"                visitor.visit(i, j, rowI[j]);",0,0,1,0,4,0,4,0,0,3,29,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,533,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,540,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,541,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,542,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,543,        for (int j = 0; j < columns; ++j) {,4,1,0,1,3,2,0,0,1,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,544,            for (int i = 0; i < rows; ++i) {,4,1,0,1,3,2,0,0,1,6,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,545,                final T[] rowI = data[i];,1,0,1,0,4,1,0,1,1,6,25,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,546,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0,0,1,0,6,0,4,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,549,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,556,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,557,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,558,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,559,        for (int j = 0; j < columns; ++j) {,4,1,0,1,3,2,0,0,1,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,560,            for (int i = 0; i < rows; ++i) {,4,1,0,1,3,2,0,0,1,6,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,561,"                visitor.visit(i, j, data[i][j]);",0,0,1,0,6,0,4,0,0,3,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,564,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,573,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,5,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,574,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,576,        for (int j = startColumn; j <= endColumn; ++j) {,5,1,0,1,3,2,0,0,1,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,577,            for (int i = startRow; i <= endRow; ++i) {,5,1,0,1,3,2,0,0,1,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,578,                final T[] rowI = data[i];,1,0,1,0,4,1,0,1,1,6,25,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,579,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0,0,1,0,6,0,4,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,582,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,591,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,5,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,592,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,594,        for (int j = startColumn; j <= endColumn; ++j) {,5,1,0,1,3,2,0,0,1,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,595,            for (int i = startRow; i <= endRow; ++i) {,5,1,0,1,3,2,0,0,1,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,596,"                visitor.visit(i, j, data[i][j]);",0,0,1,0,6,0,4,0,0,3,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,599,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,628,"        setSubMatrix(in, 0, 0);",0,0,0,0,2,0,2,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,74,629,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,98,"        super(rows, columns);",2,0,0,0,2,1,0,0,1,4,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,99,        this.rows    = rows;,2,0,0,0,0,1,0,0,1,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,100,        this.columns = columns;,2,0,0,0,0,1,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,103,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,4,3,0,1,2,0,0,0,1,5,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,104,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,4,3,0,1,2,0,0,0,1,5,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,107,"        blocks = createBlocksLayout(rows, columns);",1,0,0,0,2,0,3,0,2,4,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,109,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,126,"        this(rawData.length, rawData[0].length, toBlocksLayout(rawData), false);",3,0,1,1,6,1,2,0,2,7,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,127,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,148,"        super(rows, columns);",2,0,0,0,2,1,0,0,1,4,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,149,        this.rows    = rows;,2,0,0,0,0,1,0,0,1,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,150,        this.columns = columns;,2,0,0,0,0,1,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,153,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,4,3,0,1,2,0,0,0,1,5,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,154,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,4,3,0,1,2,0,0,0,1,5,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,156,        if (copyArray) {,1,0,0,1,3,1,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,158,            blocks = new double[blockRows * blockColumns][];,3,1,0,0,4,2,0,0,1,5,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,161,            blocks = blockData;,2,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,164,        int index = 0;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,165,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,166,            final int iHeight = blockHeight(iBlock);,1,0,0,1,2,2,2,0,2,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,167,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++index) {",5,1,0,0,3,2,0,0,2,5,64,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,168,                if (blockData[index].length != iHeight * blockWidth(jBlock)) {,2,2,1,2,7,1,2,0,1,8,62,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,169,                    throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,173,                if (copyArray) {,1,0,0,1,3,1,0,0,0,4,16,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,174,                    blocks[index] = blockData[index].clone();,0,0,1,1,6,0,1,0,1,5,41,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,179,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,206,        final int rows         = rawData.length;,3,0,0,0,0,2,0,0,1,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,207,        final int columns      = rawData[0].length;,2,0,1,0,2,2,0,0,1,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,208,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,4,3,0,1,2,2,0,0,1,6,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,209,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,4,3,0,1,2,2,0,0,1,6,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,212,        for (int i = 0; i < rawData.length; ++i) {,5,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,213,            final int length = rawData[i].length;,2,0,1,0,2,2,0,0,1,5,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,214,            if (length != columns) {,2,1,0,1,3,1,0,0,0,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,215,                throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,222,        final double[][] blocks = new double[blockRows * blockColumns][];,3,1,0,0,8,4,0,0,1,5,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,223,        int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,224,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,225,            final int pStart  = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,226,"            final int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,56,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,227,            final int iHeight = pEnd - pStart;,3,1,0,0,0,2,0,0,1,4,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,228,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,229,                final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,230,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,58,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,231,                final int jWidth = qEnd - qStart;,3,1,0,0,0,2,0,0,1,4,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,234,                final double[] block = new double[iHeight * jWidth];,3,1,0,0,4,4,0,0,1,5,52,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,235,                blocks[blockIndex] = block;,1,0,1,0,2,0,0,0,1,4,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,238,                int index = 0;,1,0,0,0,0,1,0,0,0,2,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,239,                for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,240,"                    System.arraycopy(rawData[p], qStart, block, index, jWidth);",0,0,1,0,4,0,6,0,0,3,59,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,241,                    index += jWidth;,2,0,0,0,0,0,0,0,1,2,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,244,                ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,249,        return blocks;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,267,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,4,3,0,1,2,2,0,0,1,6,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,268,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,4,3,0,1,2,2,0,0,1,6,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,270,        final double[][] blocks = new double[blockRows * blockColumns][];,3,1,0,0,8,4,0,0,1,5,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,271,        int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,272,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,273,            final int pStart  = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,274,"            final int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,56,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,275,            final int iHeight = pEnd - pStart;,3,1,0,0,0,2,0,0,1,4,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,276,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,277,                final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,278,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,58,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,279,                final int jWidth = qEnd - qStart;,3,1,0,0,0,2,0,0,1,4,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,280,                blocks[blockIndex] = new double[iHeight * jWidth];,2,1,1,0,4,2,0,0,1,6,50,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,281,                ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,285,        return blocks;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,293,"        return new BlockRealMatrix(rowDimension, columnDimension);",2,0,0,0,2,2,0,1,1,5,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,301,"        BlockRealMatrix copied = new BlockRealMatrix(rows, columns);",3,0,0,0,2,1,0,2,1,5,60,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,304,        for (int i = 0; i < blocks.length; ++i) {,5,1,0,1,3,2,0,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,305,"            System.arraycopy(blocks[i], 0, copied.blocks[i], 0, blocks[i].length);",3,0,1,0,8,0,2,0,0,4,70,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,308,        return copied;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,317,            return add((BlockRealMatrix) m);,1,0,0,2,4,1,1,1,1,7,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,318,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,321,"            MatrixUtils.checkAdditionCompatible(this, m);",0,0,0,0,2,1,3,0,0,3,45,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,323,"            final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",3,0,0,0,2,2,0,2,2,5,63,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,326,            int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,327,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,5,1,0,1,3,2,0,0,1,6,56,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,328,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,5,1,0,1,3,2,0,0,1,6,59,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,331,                    final double[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,2,0,0,1,5,49,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,332,                    final double[] tBlock   = blocks[blockIndex];,1,0,1,0,4,2,0,0,1,5,45,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,333,                    final int      pStart   = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,46,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,334,"                    final int      pEnd     = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,62,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,335,                    final int      qStart   = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,46,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,336,"                    final int      qEnd     = Math.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,65,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,337,                    int k = 0;,1,0,0,0,0,1,0,0,0,2,10,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,338,                    for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,339,                        for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,13,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,340,"                            outBlock[k] = tBlock[k] + m.getEntry(p, q);",0,1,1,0,6,0,4,0,1,5,43,15,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,341,                            ++k;,1,0,0,0,0,0,0,0,1,2,4,15,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,346,                    ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,351,            return out;,1,0,0,0,0,1,0,0,0,2,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,367,"        MatrixUtils.checkAdditionCompatible(this, m);",0,0,0,0,2,1,3,0,0,3,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,369,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",3,0,0,0,2,2,0,2,2,5,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,372,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,6,1,0,1,3,2,0,0,1,6,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,373,            final double[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,2,0,0,1,5,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,374,            final double[] tBlock   = blocks[blockIndex];,1,0,1,0,4,2,0,0,1,5,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,375,            final double[] mBlock   = m.blocks[blockIndex];,3,0,1,0,4,2,0,0,1,5,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,376,            for (int k = 0; k < outBlock.length; ++k) {,5,1,0,1,3,2,0,0,1,6,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,377,                outBlock[k] = tBlock[k] + mBlock[k];,0,1,1,0,6,0,0,0,1,4,36,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,381,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,390,            return subtract((BlockRealMatrix) m);,1,0,0,2,4,1,1,1,1,7,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,391,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,394,"            MatrixUtils.checkSubtractionCompatible(this, m);",0,0,0,0,2,1,3,0,0,3,48,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,396,"            final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",3,0,0,0,2,2,0,2,2,5,63,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,399,            int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,400,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,5,1,0,1,3,2,0,0,1,6,56,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,401,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,5,1,0,1,3,2,0,0,1,6,59,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,404,                    final double[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,2,0,0,1,5,49,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,405,                    final double[] tBlock   = blocks[blockIndex];,1,0,1,0,4,2,0,0,1,5,45,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,406,                    final int      pStart   = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,46,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,407,"                    final int      pEnd     = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,62,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,408,                    final int      qStart   = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,46,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,409,"                    final int      qEnd     = Math.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,65,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,410,                    int k = 0;,1,0,0,0,0,1,0,0,0,2,10,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,411,                    for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,412,                        for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,13,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,413,"                            outBlock[k] = tBlock[k] - m.getEntry(p, q);",0,1,1,0,6,0,4,0,1,5,43,15,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,414,                            ++k;,1,0,0,0,0,0,0,0,1,2,4,15,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,419,                    ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,424,            return out;,1,0,0,0,0,1,0,0,0,2,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,440,"        MatrixUtils.checkSubtractionCompatible(this, m);",0,0,0,0,2,1,3,0,0,3,48,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,442,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",3,0,0,0,2,2,0,2,2,5,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,445,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,6,1,0,1,3,2,0,0,1,6,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,446,            final double[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,2,0,0,1,5,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,447,            final double[] tBlock   = blocks[blockIndex];,1,0,1,0,4,2,0,0,1,5,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,448,            final double[] mBlock   = m.blocks[blockIndex];,3,0,1,0,4,2,0,0,1,5,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,449,            for (int k = 0; k < outBlock.length; ++k) {,5,1,0,1,3,2,0,0,1,6,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,450,                outBlock[k] = tBlock[k] - mBlock[k];,0,1,1,0,6,0,0,0,1,4,36,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,454,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,463,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",3,0,0,0,2,2,0,2,2,5,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,466,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,6,1,0,1,3,2,0,0,1,6,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,467,            final double[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,2,0,0,1,5,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,468,            final double[] tBlock   = blocks[blockIndex];,1,0,1,0,4,2,0,0,1,5,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,469,            for (int k = 0; k < outBlock.length; ++k) {,5,1,0,1,3,2,0,0,1,6,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,470,                outBlock[k] = tBlock[k] + d;,1,1,1,0,4,0,0,0,1,5,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,474,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,483,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",3,0,0,0,2,2,0,2,2,5,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,486,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,6,1,0,1,3,2,0,0,1,6,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,487,            final double[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,2,0,0,1,5,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,488,            final double[] tBlock   = blocks[blockIndex];,1,0,1,0,4,2,0,0,1,5,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,489,            for (int k = 0; k < outBlock.length; ++k) {,5,1,0,1,3,2,0,0,1,6,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,490,                outBlock[k] = tBlock[k] * d;,1,1,1,0,4,0,0,0,1,5,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,494,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,503,            return multiply((BlockRealMatrix) m);,1,0,0,2,4,1,1,1,1,7,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,504,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,507,"            MatrixUtils.checkMultiplicationCompatible(this, m);",0,0,0,0,2,1,3,0,0,3,51,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,509,"            final BlockRealMatrix out = new BlockRealMatrix(rows, m.getColumnDimension());",2,0,0,1,4,2,2,2,2,7,78,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,512,            int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,513,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,5,1,0,1,3,2,0,0,1,6,56,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,515,                final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,516,"                final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,55,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,518,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,5,1,0,1,3,2,0,0,1,6,59,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,520,                    final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,521,"                    final int qEnd   = Math.min(qStart + BLOCK_SIZE, m.getColumnDimension());",3,1,0,1,4,2,4,0,1,7,73,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,524,                    final double[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,2,0,0,1,5,49,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,527,                    for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,4,1,0,1,3,2,0,0,1,6,55,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,528,                        final int kWidth      = blockWidth(kBlock);,1,0,0,1,2,2,2,0,2,6,43,13,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,529,                        final double[] tBlock = blocks[iBlock * blockColumns + kBlock];,4,2,1,0,4,2,0,0,1,6,63,13,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,530,                        final int rStart      = kBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,44,13,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,531,                        int k = 0;,1,0,0,0,0,1,0,0,0,2,10,14,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,532,                        for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,13,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,533,                            final int lStart = (p - pStart) * kWidth;,4,2,0,1,2,2,0,0,1,6,41,15,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,534,                            final int lEnd   = lStart + kWidth;,3,1,0,0,0,2,0,0,1,4,35,15,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,535,                            for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,15,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,536,                                double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,18,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,537,                                int r = rStart;,2,0,0,0,0,1,0,0,0,2,15,18,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,538,                                for (int l = lStart; l < lEnd; ++l) {,5,1,0,1,3,2,0,0,1,6,37,17,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,539,"                                    sum += tBlock[l] * m.getEntry(r, q);",1,1,1,0,4,0,4,0,1,6,36,19,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,540,                                    ++r;,1,0,0,0,0,0,0,0,1,2,4,19,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,542,                                outBlock[k] += sum;,1,0,1,0,2,0,0,0,1,4,19,17,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,543,                                ++k;,1,0,0,0,0,0,0,0,1,2,4,17,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,549,                    ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,554,            return out;,1,0,0,0,0,1,0,0,0,2,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,570,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0,0,0,0,2,1,3,0,0,3,51,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,572,"        final BlockRealMatrix out = new BlockRealMatrix(rows, m.columns);",4,0,0,0,2,2,0,2,2,5,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,575,        int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,576,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,5,1,0,1,3,2,0,0,1,6,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,578,            final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,579,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,581,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,5,1,0,1,3,2,0,0,1,6,59,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,582,                final int jWidth = out.blockWidth(jBlock);,1,0,0,1,2,2,3,0,1,6,42,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,583,                final int jWidth2 = jWidth  + jWidth;,3,1,0,0,0,2,0,0,1,4,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,584,                final int jWidth3 = jWidth2 + jWidth;,3,1,0,0,0,2,0,0,1,4,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,585,                final int jWidth4 = jWidth3 + jWidth;,3,1,0,0,0,2,0,0,1,4,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,588,                final double[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,2,0,0,1,5,49,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,591,                for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,4,1,0,1,3,2,0,0,1,6,55,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,592,                    final int kWidth = blockWidth(kBlock);,1,0,0,1,2,2,2,0,2,6,38,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,593,                    final double[] tBlock = blocks[iBlock * blockColumns + kBlock];,4,2,1,0,4,2,0,0,1,6,63,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,594,                    final double[] mBlock = m.blocks[kBlock * m.blockColumns + jBlock];,7,2,0,0,4,2,0,0,1,5,67,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,595,                    int k = 0;,1,0,0,0,0,1,0,0,0,2,10,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,596,                    for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,597,                        final int lStart = (p - pStart) * kWidth;,4,2,0,1,2,2,0,0,1,6,41,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,598,                        final int lEnd   = lStart + kWidth;,3,1,0,0,0,2,0,0,1,4,35,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,599,                        for (int nStart = 0; nStart < jWidth; ++nStart) {,4,1,0,1,3,2,0,0,1,6,49,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,600,                            double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,15,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,601,                            int l = lStart;,2,0,0,0,0,1,0,0,0,2,15,15,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,602,                            int n = nStart;,2,0,0,0,0,1,0,0,0,2,15,15,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,603,                            while (l < lEnd - 3) {,2,2,0,1,3,1,0,0,0,5,22,14,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,604,                                sum += tBlock[l] * mBlock[n] +,1,4,1,0,4,0,0,0,1,5,30,16,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,608,                                l += 4;,1,0,0,0,0,0,0,0,1,2,7,16,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,609,                                n += jWidth4;,2,0,0,0,0,0,0,0,1,2,13,16,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,611,                            while (l < lEnd) {,2,1,0,1,3,1,0,0,0,5,18,14,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,612,                                sum += tBlock[l++] * mBlock[n];,2,1,1,0,4,0,0,0,2,5,31,16,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,613,                                n += jWidth;,2,0,0,0,0,0,0,0,1,2,12,16,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,615,                            outBlock[k] += sum;,1,0,1,0,2,0,0,0,1,4,19,14,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,616,                            ++k;,1,0,0,0,0,0,0,0,1,2,4,14,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,622,                ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,627,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,635,        final double[][] data = new double[getRowDimension()][getColumnDimension()];,1,0,0,1,12,4,2,0,3,6,76,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,636,        final int lastColumns = columns - (blockColumns - 1) * BLOCK_SIZE;,4,3,0,1,2,2,0,0,1,6,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,638,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,639,            final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,640,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,641,            int regularPos   = 0;,1,0,0,0,0,1,0,0,0,2,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,642,            int lastPos      = 0;,1,0,0,0,0,1,0,0,0,2,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,643,            for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,644,                final double[] dataP = data[p];,1,0,1,0,4,2,0,0,1,5,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,645,                int blockIndex = iBlock * blockColumns;,3,1,0,0,0,1,0,0,0,3,39,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,646,                int dataPos    = 0;,1,0,0,0,0,1,0,0,0,2,19,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,647,                for (int jBlock = 0; jBlock < blockColumns - 1; ++jBlock) {,4,2,0,1,3,2,0,0,1,6,59,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,648,"                    System.arraycopy(blocks[blockIndex++], regularPos, dataP, dataPos, BLOCK_SIZE);",1,0,1,0,4,0,6,0,1,5,79,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,649,                    dataPos += BLOCK_SIZE;,2,0,0,0,0,0,0,0,1,2,22,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,651,"                System.arraycopy(blocks[blockIndex], lastPos, dataP, dataPos, lastColumns);",0,0,1,0,4,0,6,0,0,3,75,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,652,                regularPos += BLOCK_SIZE;,2,0,0,0,0,0,0,0,1,2,25,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,653,                lastPos    += lastColumns;,2,0,0,0,0,0,0,0,1,2,26,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,657,        return data;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,664,        final double[] colSums = new double[BLOCK_SIZE];,1,0,1,0,4,4,0,0,1,5,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,665,        double maxColSum = 0;,1,0,0,0,0,1,0,0,0,2,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,666,        for (int jBlock = 0; jBlock < blockColumns; jBlock++) {,4,1,0,1,3,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,667,            final int jWidth = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,668,"            Arrays.fill(colSums, 0, jWidth, 0.0);",0,0,0,0,2,0,4,0,0,2,37,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,669,            for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,670,                final int iHeight = blockHeight(iBlock);,1,0,0,1,2,2,2,0,2,6,40,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,671,                final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,672,                for (int j = 0; j < jWidth; ++j) {,4,1,0,1,3,2,0,0,1,6,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,673,                    double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,674,                    for (int i = 0; i < iHeight; ++i) {,4,1,0,1,3,2,0,0,1,6,35,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,675,                        sum += Math.abs(block[i * jWidth + j]);,4,2,1,1,4,0,2,0,1,7,39,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,677,                    colSums[j] += sum;,1,0,1,0,2,0,0,0,1,4,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,680,            for (int j = 0; j < jWidth; ++j) {,4,1,0,1,3,2,0,0,1,6,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,681,"                maxColSum = Math.max(maxColSum, colSums[j]);",1,0,1,0,4,0,3,0,1,5,44,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,684,        return maxColSum;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,690,        double sum2 = 0;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,691,        for (int blockIndex = 0; blockIndex < blocks.length; ++blockIndex) {,5,1,0,1,3,2,0,0,1,6,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,692,            for (final double entry : blocks[blockIndex]) {,1,0,1,1,5,3,0,0,1,6,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,693,                sum2 += entry * entry;,3,1,0,0,0,0,0,0,1,3,22,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,696,        return Math.sqrt(sum2);,0,0,0,1,2,1,3,0,0,4,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,706,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,709,        final BlockRealMatrix out =,1,0,0,0,0,1,0,1,1,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,713,        final int blockStartRow    = startRow    / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,714,        final int rowsShift        = startRow    % BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,715,        final int blockStartColumn = startColumn / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,716,        final int columnsShift     = startColumn % BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,719,        int pBlock = blockStartRow;,2,0,0,0,0,1,0,0,0,2,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,720,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,5,1,0,1,3,2,0,0,1,6,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,721,            final int iHeight = out.blockHeight(iBlock);,1,0,0,1,2,2,3,0,1,6,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,722,            int qBlock = blockStartColumn;,2,0,0,0,0,1,0,0,0,2,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,723,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,5,1,0,1,3,2,0,0,1,6,59,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,724,                final int jWidth = out.blockWidth(jBlock);,1,0,0,1,2,2,3,0,1,6,42,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,727,                final int      outIndex = iBlock * out.blockColumns + jBlock;,5,2,0,0,0,2,0,0,1,4,61,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,728,                final double[] outBlock = out.blocks[outIndex];,3,0,1,0,4,2,0,0,1,5,47,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,729,                final int      index    = pBlock * blockColumns + qBlock;,4,2,0,0,0,2,0,0,1,4,57,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,730,                final int      width    = blockWidth(qBlock);,1,0,0,1,2,2,2,0,2,6,45,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,732,                final int heightExcess = iHeight + rowsShift - BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,58,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,733,                final int widthExcess  = jWidth + columnsShift - BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,60,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,734,                if (heightExcess > 0) {,1,1,0,1,3,1,0,0,0,5,23,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,736,                    if (widthExcess > 0) {,1,1,0,1,3,1,0,0,0,5,22,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,738,                        final int width2 = blockWidth(qBlock + 1);,2,1,0,1,2,2,1,0,2,7,42,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,739,"                        copyBlockPart(blocks[index], width,",0,0,1,0,3,0,2,0,1,4,35,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,743,"                        copyBlockPart(blocks[index + 1], width2,",1,1,1,0,3,0,2,0,1,6,40,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,747,"                        copyBlockPart(blocks[index + blockColumns], width,",2,1,1,0,3,0,2,0,1,6,50,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,751,"                        copyBlockPart(blocks[index + blockColumns + 1], width2,",2,1,1,0,3,0,2,0,1,6,55,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,755,                    } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,757,"                        copyBlockPart(blocks[index], width,",0,0,1,0,3,0,2,0,1,4,35,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,761,"                        copyBlockPart(blocks[index + blockColumns], width,",2,1,1,0,3,0,2,0,1,6,50,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,768,                    if (widthExcess > 0) {,1,1,0,1,3,1,0,0,0,5,22,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,770,                        final int width2 = blockWidth(qBlock + 1);,2,1,0,1,2,2,1,0,2,7,42,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,771,"                        copyBlockPart(blocks[index], width,",0,0,1,0,3,0,2,0,1,4,35,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,775,"                        copyBlockPart(blocks[index + 1], width2,",1,1,1,0,3,0,2,0,1,6,40,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,779,                    } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,781,"                        copyBlockPart(blocks[index], width,",0,0,1,0,3,0,2,0,1,4,35,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,788,                ++qBlock;,1,0,0,0,0,0,0,0,1,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,792,            ++pBlock;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,796,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,820,        final int length = srcEndColumn - srcStartColumn;,3,1,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,821,        int srcPos = srcStartRow * srcWidth + srcStartColumn;,4,2,0,0,0,1,0,0,0,3,53,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,822,        int dstPos = dstStartRow * dstWidth + dstStartColumn;,4,2,0,0,0,1,0,0,0,3,53,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,823,        for (int srcRow = srcStartRow; srcRow < srcEndRow; ++srcRow) {,5,1,0,1,3,2,0,0,1,6,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,824,"            System.arraycopy(srcBlock, srcPos, dstBlock, dstPos, length);",0,0,0,0,2,0,7,0,0,2,61,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,825,            srcPos += srcWidth;,2,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,826,            dstPos += dstWidth;,2,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,828,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,836,        final int refLength = subMatrix[0].length;,2,0,1,0,2,2,0,0,1,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,837,        if (refLength < 1) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,838,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");",0,0,0,1,2,1,2,0,1,5,98,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,840,        final int endRow    = row + subMatrix.length - 1;,4,2,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,841,        final int endColumn = column + refLength - 1;,3,2,0,0,0,2,0,0,1,4,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,842,"        MatrixUtils.checkSubMatrixIndex(this, row, endRow, column, endColumn);",0,0,0,0,2,1,6,0,0,3,70,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,843,        for (final double[] subRow : subMatrix) {,2,0,0,1,5,3,0,0,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,844,            if (subRow.length != refLength) {,3,1,0,1,3,1,0,0,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,845,                throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,852,        final int blockStartRow    = row / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,853,        final int blockEndRow      = (endRow + BLOCK_SIZE) / BLOCK_SIZE;,4,2,0,1,2,2,0,0,1,6,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,854,        final int blockStartColumn = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,855,        final int blockEndColumn   = (endColumn + BLOCK_SIZE) / BLOCK_SIZE;,4,2,0,1,2,2,0,0,1,6,67,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,858,        for (int iBlock = blockStartRow; iBlock < blockEndRow; ++iBlock) {,5,1,0,1,3,2,0,0,1,6,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,859,            final int iHeight  = blockHeight(iBlock);,1,0,0,1,2,2,2,0,2,6,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,860,            final int firstRow = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,861,"            final int iStart   = Math.max(row,    firstRow);",1,0,0,0,2,2,4,0,1,5,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,862,"            final int iEnd     = Math.min(endRow + 1, firstRow + iHeight);",4,2,0,0,2,2,2,0,1,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,864,            for (int jBlock = blockStartColumn; jBlock < blockEndColumn; ++jBlock) {,5,1,0,1,3,2,0,0,1,6,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,865,                final int jWidth      = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,43,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,866,                final int firstColumn = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,44,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,867,"                final int jStart      = Math.max(column,    firstColumn);",1,0,0,0,2,2,4,0,1,5,57,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,868,"                final int jEnd        = Math.min(endColumn + 1, firstColumn + jWidth);",4,2,0,0,2,2,2,0,1,6,70,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,869,                final int jLength     = jEnd - jStart;,3,1,0,0,0,2,0,0,1,4,38,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,872,                final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,873,                for (int i = iStart; i < iEnd; ++i) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,874,"                    System.arraycopy(subMatrix[i - row], jStart - column,",4,2,1,0,3,0,2,0,0,5,53,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,881,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,888,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,0,2,1,3,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,889,"        final BlockRealMatrix out = new BlockRealMatrix(1, columns);",2,0,0,0,2,2,0,2,2,5,60,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,892,        final int iBlock  = row / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,893,        final int iRow    = row - iBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,894,        int outBlockIndex = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,895,        int outIndex      = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,896,        double[] outBlock = out.blocks[outBlockIndex];,3,0,1,0,4,1,0,0,0,4,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,897,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,898,            final int jWidth     = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,899,            final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,900,            final int available  = outBlock.length - outIndex;,4,1,0,0,0,2,0,0,1,4,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,901,            if (jWidth > available) {,2,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,902,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, available);",2,1,0,0,2,0,6,0,0,4,70,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,903,                outBlock = out.blocks[++outBlockIndex];,4,0,0,0,2,0,0,0,2,3,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,904,"                System.arraycopy(block, iRow * jWidth, outBlock, 0, jWidth - available);",4,2,0,0,2,0,4,0,0,4,72,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,905,                outIndex = jWidth - available;,3,1,0,0,0,0,0,0,1,3,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,907,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, jWidth);",2,1,0,0,2,0,6,0,0,4,67,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,908,                outIndex += jWidth;,2,0,0,0,0,0,0,0,1,2,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,912,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,921,"            setRowMatrix(row, (BlockRealMatrix) matrix);",1,0,0,1,4,0,2,1,1,6,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,924,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,922,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,923,"            super.setRowMatrix(row, matrix);",3,0,0,0,2,1,0,0,0,3,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,925,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,941,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,0,2,1,3,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,942,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,943,        if ((matrix.getRowDimension() != 1) ||,0,2,0,2,5,1,2,0,0,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,945,            throw new InvalidMatrixException(,0,0,0,0,1,2,0,1,1,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,952,        final int iBlock = row / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,953,        final int iRow   = row - iBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,954,        int mBlockIndex  = 0;,1,0,0,0,0,1,0,0,0,2,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,955,        int mIndex       = 0;,1,0,0,0,0,1,0,0,0,2,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,956,        double[] mBlock  = matrix.blocks[mBlockIndex];,3,0,1,0,4,1,0,0,0,4,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,957,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,958,            final int jWidth     = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,959,            final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,960,            final int available  = mBlock.length - mIndex;,4,1,0,0,0,2,0,0,1,4,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,961,            if (jWidth > available) {,2,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,962,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, available);",2,1,0,0,2,0,6,0,0,4,66,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,963,                mBlock = matrix.blocks[++mBlockIndex];,4,0,0,0,2,0,0,0,2,3,38,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,964,"                System.arraycopy(mBlock, 0, block, iRow * jWidth, jWidth - available);",4,2,0,0,2,0,4,0,0,4,70,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,965,                mIndex = jWidth - available;,3,1,0,0,0,0,0,0,1,3,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,967,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, jWidth);",2,1,0,0,2,0,6,0,0,4,63,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,968,                mIndex += jWidth;,2,0,0,0,0,0,0,0,1,2,17,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,972,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,979,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,0,2,1,3,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,980,"        final BlockRealMatrix out = new BlockRealMatrix(rows, 1);",2,0,0,0,2,2,0,2,2,5,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,983,        final int jBlock  = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,984,        final int jColumn = column - jBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,985,        final int jWidth  = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,986,        int outBlockIndex = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,987,        int outIndex      = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,988,        double[] outBlock = out.blocks[outBlockIndex];,3,0,1,0,4,1,0,0,0,4,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,989,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,990,            final int iHeight = blockHeight(iBlock);,1,0,0,1,2,2,2,0,2,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,991,            final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,992,            for (int i = 0; i < iHeight; ++i) {,4,1,0,1,3,2,0,0,1,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,993,                if (outIndex >= outBlock.length) {,3,1,0,1,3,1,0,0,0,5,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,994,                    outBlock = out.blocks[++outBlockIndex];,4,0,0,0,2,0,0,0,2,3,39,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,995,                    outIndex = 0;,1,0,0,0,0,0,0,0,1,2,13,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,997,                outBlock[outIndex++] = block[i * jWidth + jColumn];,4,2,1,0,4,0,0,0,2,5,51,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1001,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1010,"            setColumnMatrix(column, (BlockRealMatrix) matrix);",1,0,0,1,4,0,2,1,1,6,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1013,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1011,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1012,"            super.setColumnMatrix(column, matrix);",3,0,0,0,2,1,0,0,0,3,38,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1014,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1030,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,0,2,1,3,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1031,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1032,        if ((matrix.getRowDimension() != nRows) ||,1,2,0,2,5,1,2,0,0,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1034,            throw new InvalidMatrixException(,0,0,0,0,1,2,0,1,1,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1041,        final int jBlock  = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1042,        final int jColumn = column - jBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1043,        final int jWidth  = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1044,        int mBlockIndex = 0;,1,0,0,0,0,1,0,0,0,2,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1045,        int mIndex      = 0;,1,0,0,0,0,1,0,0,0,2,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1046,        double[] mBlock = matrix.blocks[mBlockIndex];,3,0,1,0,4,1,0,0,0,4,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1047,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1048,            final int iHeight = blockHeight(iBlock);,1,0,0,1,2,2,2,0,2,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1049,            final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1050,            for (int i = 0; i < iHeight; ++i) {,4,1,0,1,3,2,0,0,1,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1051,                if (mIndex >= mBlock.length) {,3,1,0,1,3,1,0,0,0,5,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1052,                    mBlock = matrix.blocks[++mBlockIndex];,4,0,0,0,2,0,0,0,2,3,38,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1053,                    mIndex = 0;,1,0,0,0,0,0,0,0,1,2,11,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1055,                block[i * jWidth + jColumn] = mBlock[mIndex++];,4,2,1,0,4,0,0,0,2,5,47,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1059,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1066,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,0,2,1,3,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1067,        final double[] outData = new double[columns];,1,0,1,0,4,4,0,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1070,        final int iBlock  = row / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1071,        final int iRow    = row - iBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1072,        int outIndex      = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1073,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1074,            final int jWidth     = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1075,            final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1076,"            System.arraycopy(block, iRow * jWidth, outData, outIndex, jWidth);",2,1,0,0,2,0,6,0,0,4,66,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1077,            outIndex += jWidth;,2,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1080,"        return new ArrayRealVector(outData, false);",1,0,0,0,2,2,0,1,2,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1089,"            setRow(row, ((ArrayRealVector) vector).getDataRef());",1,0,0,2,8,0,3,1,1,6,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1092,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1090,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1091,"            super.setRowVector(row, vector);",3,0,0,0,2,1,0,0,0,3,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1093,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1100,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,0,2,1,3,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1101,        final double[] outData = new double[rows];,1,0,1,0,4,4,0,0,1,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1104,        final int jBlock  = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1105,        final int jColumn = column - jBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1106,        final int jWidth  = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1107,        int outIndex      = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1108,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1109,            final int iHeight = blockHeight(iBlock);,1,0,0,1,2,2,2,0,2,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1110,            final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1111,            for (int i = 0; i < iHeight; ++i) {,4,1,0,1,3,2,0,0,1,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1112,                outData[outIndex++] = block[i * jWidth + jColumn];,4,2,1,0,4,0,0,0,2,5,50,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1116,"        return new ArrayRealVector(outData, false);",1,0,0,0,2,2,0,1,2,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1125,"            setColumn(column, ((ArrayRealVector) vector).getDataRef());",1,0,0,2,8,0,3,1,1,6,59,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1128,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1126,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1127,"            super.setColumnVector(column, vector);",3,0,0,0,2,1,0,0,0,3,38,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1129,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1136,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,0,2,1,3,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1137,        final double[] out = new double[columns];,1,0,1,0,4,4,0,0,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1140,        final int iBlock  = row / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1141,        final int iRow    = row - iBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1142,        int outIndex      = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1143,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1144,            final int jWidth     = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1145,            final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1146,"            System.arraycopy(block, iRow * jWidth, out, outIndex, jWidth);",2,1,0,0,2,0,6,0,0,4,62,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1147,            outIndex += jWidth;,2,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1150,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1159,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,0,2,1,3,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1160,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1161,        if (array.length != nCols) {,3,1,0,1,3,1,0,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1162,            throw new InvalidMatrixException(,0,0,0,0,1,2,0,1,1,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1168,        final int iBlock  = row / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1169,        final int iRow    = row - iBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1170,        int outIndex      = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1171,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1172,            final int jWidth     = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1173,            final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1174,"            System.arraycopy(array, outIndex, block, iRow * jWidth, jWidth);",2,1,0,0,2,0,6,0,0,4,64,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1175,            outIndex += jWidth;,2,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1178,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1185,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,0,2,1,3,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1186,        final double[] out = new double[rows];,1,0,1,0,4,4,0,0,1,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1189,        final int jBlock  = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1190,        final int jColumn = column - jBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1191,        final int jWidth  = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1192,        int outIndex      = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1193,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1194,            final int iHeight = blockHeight(iBlock);,1,0,0,1,2,2,2,0,2,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1195,            final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1196,            for (int i = 0; i < iHeight; ++i) {,4,1,0,1,3,2,0,0,1,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1197,                out[outIndex++] = block[i * jWidth + jColumn];,4,2,1,0,4,0,0,0,2,5,46,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1201,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1210,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,0,2,1,3,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1211,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1212,        if (array.length != nRows) {,3,1,0,1,3,1,0,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1213,            throw new InvalidMatrixException(,0,0,0,0,1,2,0,1,1,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1219,        final int jBlock  = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1220,        final int jColumn = column - jBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1221,        final int jWidth  = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1222,        int outIndex      = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1223,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1224,            final int iHeight = blockHeight(iBlock);,1,0,0,1,2,2,2,0,2,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1225,            final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1226,            for (int i = 0; i < iHeight; ++i) {,4,1,0,1,3,2,0,0,1,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1227,                block[i * jWidth + jColumn] = array[outIndex++];,4,2,1,0,4,0,0,0,2,5,48,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1231,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1238,            final int iBlock = row    / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1239,            final int jBlock = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1240,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,4,4,0,1,4,2,2,0,2,7,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1242,            return blocks[iBlock * blockColumns + jBlock][k];,3,2,1,0,4,1,0,0,0,5,49,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1243,        } catch (ArrayIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1244,            throw new MatrixIndexException(,0,0,0,0,1,2,0,1,1,4,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1255,            final int iBlock = row    / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1256,            final int jBlock = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1257,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,4,4,0,1,4,2,2,0,2,7,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1259,            blocks[iBlock * blockColumns + jBlock][k] = value;,4,2,1,0,4,0,0,0,1,5,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1264,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1260,        } catch (ArrayIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1261,            throw new MatrixIndexException(,0,0,0,0,1,2,0,1,1,4,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1265,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1272,            final int iBlock = row    / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1273,            final int jBlock = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1274,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,4,4,0,1,4,2,2,0,2,7,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1276,            blocks[iBlock * blockColumns + jBlock][k] += increment;,4,2,1,0,4,0,0,0,1,5,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1281,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1277,        } catch (ArrayIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1278,            throw new MatrixIndexException(,0,0,0,0,1,2,0,1,1,4,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1282,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1289,            final int iBlock = row    / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1290,            final int jBlock = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1291,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,4,4,0,1,4,2,2,0,2,7,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1293,            blocks[iBlock * blockColumns + jBlock][k] *= factor;,4,2,1,0,4,0,0,0,1,5,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1298,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1294,        } catch (ArrayIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1295,            throw new MatrixIndexException(,0,0,0,0,1,2,0,1,1,4,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1299,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1305,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1306,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1307,"        final BlockRealMatrix out = new BlockRealMatrix(nCols, nRows);",3,0,0,0,2,2,0,2,2,5,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1310,        int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1311,        for (int iBlock = 0; iBlock < blockColumns; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1312,            for (int jBlock = 0; jBlock < blockRows; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1315,                final double[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,2,0,0,1,5,49,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1316,                final double[] tBlock   = blocks[jBlock * blockColumns + iBlock];,4,2,1,0,4,2,0,0,1,6,65,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1317,                final int      pStart   = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,46,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1318,"                final int      pEnd     = Math.min(pStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,65,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1319,                final int      qStart   = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,46,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1320,"                final int      qEnd     = Math.min(qStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,62,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1321,                int k = 0;,1,0,0,0,0,1,0,0,0,2,10,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1322,                for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1323,                    final int lInc = pEnd - pStart;,3,1,0,0,0,2,0,0,1,4,31,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1324,                    int l = p - pStart;,3,1,0,0,0,1,0,0,0,3,19,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1325,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1326,                        outBlock[k] = tBlock[l];,0,0,1,0,4,0,0,0,1,3,24,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1327,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1328,                        l+= lInc;,2,0,0,0,0,0,0,0,1,2,9,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1333,                ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1338,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1345,        return rows;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1351,        return columns;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1359,        if (v.length != columns) {,3,1,0,1,3,1,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1360,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1364,        final double[] out = new double[rows];,1,0,1,0,4,4,0,0,1,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1367,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1368,            final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1369,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1370,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1371,                final double[] block  = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,63,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1372,                final int      qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,44,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1373,"                final int      qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,63,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1374,                int k = 0;,1,0,0,0,0,1,0,0,0,2,10,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1375,                for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1376,                    double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1377,                    int q = qStart;,2,0,0,0,0,1,0,0,0,2,15,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1378,                    while (q < qEnd - 3) {,2,2,0,1,3,1,0,0,0,5,22,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1379,                        sum += block[k]     * v[q]     +,1,4,1,0,4,0,0,0,1,5,32,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1383,                        k += 4;,1,0,0,0,0,0,0,0,1,2,7,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1384,                        q += 4;,1,0,0,0,0,0,0,0,1,2,7,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1386,                    while (q < qEnd) {,2,1,0,1,3,1,0,0,0,5,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1387,                        sum += block[k++] * v[q++];,3,1,1,0,4,0,0,0,3,5,27,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1389,                    out[p] += sum;,1,0,1,0,2,0,0,0,1,4,14,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1394,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1403,        if (v.length != rows) {,3,1,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1404,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1408,        final double[] out = new double[columns];,1,0,1,0,4,4,0,0,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1411,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1412,            final int jWidth  = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1413,            final int jWidth2 = jWidth  + jWidth;,3,1,0,0,0,2,0,0,1,4,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1414,            final int jWidth3 = jWidth2 + jWidth;,3,1,0,0,0,2,0,0,1,4,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1415,            final int jWidth4 = jWidth3 + jWidth;,3,1,0,0,0,2,0,0,1,4,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1416,            final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1417,"            final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,58,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1418,            for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1419,                final double[] block  = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,63,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1420,                final int      pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,44,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1421,"                final int      pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,60,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1422,                for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1423,                    int k = q - qStart;,3,1,0,0,0,1,0,0,0,3,19,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1424,                    double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1425,                    int p = pStart;,2,0,0,0,0,1,0,0,0,2,15,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1426,                    while (p < pEnd - 3) {,2,2,0,1,3,1,0,0,0,5,22,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1427,                        sum += block[k]           * v[p]     +,1,4,1,0,4,0,0,0,1,5,38,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1431,                        k += jWidth4;,2,0,0,0,0,0,0,0,1,2,13,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1432,                        p += 4;,1,0,0,0,0,0,0,0,1,2,7,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1434,                    while (p < pEnd) {,2,1,0,1,3,1,0,0,0,5,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1435,                        sum += block[k] * v[p++];,2,1,1,0,4,0,0,0,2,5,25,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1436,                        k += jWidth;,2,0,0,0,0,0,0,0,1,2,12,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1438,                    out[q] += sum;,1,0,1,0,2,0,0,0,1,4,14,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1443,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1451,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1452,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1453,            final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1454,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1455,            for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1456,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1457,                    final int jWidth = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,38,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1458,                    final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1459,"                    final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,58,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1460,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1461,                    int k = (p - pStart) * jWidth;,4,2,0,1,2,1,0,0,0,5,30,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1462,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1463,"                        block[k] = visitor.visit(p, q, block[k]);",0,0,1,0,6,0,4,0,1,4,41,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1464,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1469,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1476,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1477,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1478,            final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1479,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1480,            for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1481,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1482,                    final int jWidth = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,38,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1483,                    final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1484,"                    final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,58,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1485,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1486,                    int k = (p - pStart) * jWidth;,4,2,0,1,2,1,0,0,0,5,30,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1487,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1488,"                        visitor.visit(p, q, block[k]);",0,0,1,0,4,0,4,0,0,3,30,13,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1489,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1494,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1503,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1504,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,8,0,0,2,71,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1505,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,7,4,0,1,3,2,0,0,1,6,86,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1506,            final int p0     = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1507,"            final int pStart = Math.max(startRow, p0);",1,0,0,0,2,2,4,0,1,5,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1508,"            final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",4,3,0,1,4,2,2,0,1,7,67,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1509,            for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1510,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,7,4,0,1,3,2,0,0,1,6,92,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1511,                    final int jWidth = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,38,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1512,                    final int q0     = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1513,"                    final int qStart = Math.max(startColumn, q0);",1,0,0,0,2,2,4,0,1,5,45,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1514,"                    final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",4,3,0,1,4,2,2,0,1,7,70,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1515,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1516,                    int k = (p - p0) * jWidth + qStart - q0;,6,4,0,1,2,1,0,0,0,5,40,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1517,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1518,"                        block[k] = visitor.visit(p, q, block[k]);",0,0,1,0,6,0,4,0,1,4,41,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1519,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1524,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1533,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1534,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,8,0,0,2,71,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1535,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,7,4,0,1,3,2,0,0,1,6,86,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1536,            final int p0     = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1537,"            final int pStart = Math.max(startRow, p0);",1,0,0,0,2,2,4,0,1,5,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1538,"            final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",4,3,0,1,4,2,2,0,1,7,67,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1539,            for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1540,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,7,4,0,1,3,2,0,0,1,6,92,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1541,                    final int jWidth = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,38,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1542,                    final int q0     = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1543,"                    final int qStart = Math.max(startColumn, q0);",1,0,0,0,2,2,4,0,1,5,45,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1544,"                    final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",4,3,0,1,4,2,2,0,1,7,70,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1545,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1546,                    int k = (p - p0) * jWidth + qStart - q0;,6,4,0,1,2,1,0,0,0,5,40,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1547,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1548,"                        visitor.visit(p, q, block[k]);",0,0,1,0,4,0,4,0,0,3,30,13,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1549,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1554,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1561,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1562,        int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1563,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1564,            final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1565,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1566,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1567,                final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1568,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,58,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1569,                final double[] block = blocks[blockIndex];,1,0,1,0,4,2,0,0,1,5,42,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1570,                int k = 0;,1,0,0,0,0,1,0,0,0,2,10,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1571,                for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1572,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1573,"                        block[k] = visitor.visit(p, q, block[k]);",0,0,1,0,6,0,4,0,1,4,41,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1574,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1577,                ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1580,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1587,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1588,        int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1589,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1590,            final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1591,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1592,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1593,                final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1594,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,58,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1595,                final double[] block = blocks[blockIndex];,1,0,1,0,4,2,0,0,1,5,42,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1596,                int k = 0;,1,0,0,0,0,1,0,0,0,2,10,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1597,                for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1598,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1599,"                        visitor.visit(p, q, block[k]);",0,0,1,0,4,0,4,0,0,3,30,13,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1600,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1603,                ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1606,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1615,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1616,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,8,0,0,2,71,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1617,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,7,4,0,1,3,2,0,0,1,6,86,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1618,            final int p0     = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1619,"            final int pStart = Math.max(startRow, p0);",1,0,0,0,2,2,4,0,1,5,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1620,"            final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",4,3,0,1,4,2,2,0,1,7,67,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1621,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,7,4,0,1,3,2,0,0,1,6,92,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1622,                final int jWidth = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,38,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1623,                final int q0     = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1624,"                final int qStart = Math.max(startColumn, q0);",1,0,0,0,2,2,4,0,1,5,45,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1625,"                final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",4,3,0,1,4,2,2,0,1,7,70,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1626,                final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1627,                for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1628,                    int k = (p - p0) * jWidth + qStart - q0;,6,4,0,1,2,1,0,0,0,5,40,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1629,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1630,"                        block[k] = visitor.visit(p, q, block[k]);",0,0,1,0,6,0,4,0,1,4,41,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1631,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1636,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1645,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1646,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,8,0,0,2,71,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1647,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,7,4,0,1,3,2,0,0,1,6,86,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1648,            final int p0     = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1649,"            final int pStart = Math.max(startRow, p0);",1,0,0,0,2,2,4,0,1,5,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1650,"            final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",4,3,0,1,4,2,2,0,1,7,67,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1651,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,7,4,0,1,3,2,0,0,1,6,92,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1652,                final int jWidth = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,38,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1653,                final int q0     = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1654,"                final int qStart = Math.max(startColumn, q0);",1,0,0,0,2,2,4,0,1,5,45,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1655,"                final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",4,3,0,1,4,2,2,0,1,7,70,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1656,                final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1657,                for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1658,                    int k = (p - p0) * jWidth + qStart - q0;,6,4,0,1,2,1,0,0,0,5,40,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1659,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1660,"                        visitor.visit(p, q, block[k]);",0,0,1,0,4,0,4,0,0,3,30,13,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1661,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1666,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1675,        return (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;,6,4,0,1,2,1,0,0,0,5,79,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,1684,        return (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;,6,4,0,1,2,1,0,0,0,5,91,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,74,64,public class BlockRealMatrix extends AbstractRealMatrix implements Serializable {,1,0,0,0,1,4,0,2,1,5,81,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,315,        subMatrix.walkInOptimizedOrder(new DefaultFieldMatrixChangingVisitor<T>(field.getZero()) {,0,0,0,2,6,1,4,2,1,6,90,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,320,"                return getEntry(selectedRows[row], selectedColumns[column]);",0,0,1,0,6,1,1,0,1,5,60,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,74,72,    public abstract class Entry {,1,0,0,0,1,3,0,0,2,4,29,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,74,91,            return index;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,74,98,            this.index = index;,2,0,0,0,0,1,0,0,1,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,74,99,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MaxEvaluationsExceededException,74,43,"        super(""Maximal number of evaluations ({0}) exceeded"", maxEvaluations);",1,0,0,1,6,1,0,0,2,5,70,3,0.0,0,0
defect4j,math,org/apache/commons/math/MaxEvaluationsExceededException,74,44,        this.maxEvaluations = maxEvaluations;,2,0,0,0,0,1,0,0,1,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxEvaluationsExceededException,74,45,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MaxEvaluationsExceededException,74,56,"        super(pattern, arguments);",2,0,0,0,2,1,0,0,1,4,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/MaxEvaluationsExceededException,74,57,        this.maxEvaluations = maxEvaluations;,2,0,0,0,0,1,0,0,1,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxEvaluationsExceededException,74,58,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MaxEvaluationsExceededException,74,64,        return maxEvaluations;,1,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/FractionConversionException,74,41,"        super(""Unable to convert {0} to fraction after {1} iterations"", value, maxIterations);",2,0,0,0,6,1,0,0,2,4,86,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/FractionConversionException,74,42,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/FractionConversionException,74,52,"        super(""Overflow trying to convert {0} to fraction ({1}/{2})"", value, p, q);",3,0,0,1,10,1,0,0,2,5,75,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/FractionConversionException,74,53,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFractionField,74,75,        return LazyHolder.INSTANCE;,2,0,0,0,0,1,0,0,0,2,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,77,        this(null);,0,0,0,1,2,1,0,0,0,3,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,78,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,82,        return name;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,92,        return Collections.unmodifiableCollection(stepHandlers);,0,0,0,1,2,1,3,0,0,4,56,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,105,"        eventsHandlersManager.addEventHandler(function, maxCheckInterval,",0,0,0,0,1,0,4,0,0,2,65,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,107,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,111,        return eventsHandlersManager.getEventsHandlers();,0,0,0,1,2,1,2,0,0,4,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,127,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,128,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,133,        return stepStart;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,148,        return maxEvaluations;,1,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,180,            throw new DerivativeException(new MaxEvaluationsExceededException(maxEvaluations));,1,0,0,2,4,3,0,2,2,6,83,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,199,            throw new IntegratorException(,0,0,0,0,1,2,0,1,1,4,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,206,            throw new IntegratorException(,0,0,0,0,1,2,0,1,1,4,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,213,            throw new IntegratorException(,0,0,0,0,1,2,0,1,1,4,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,235,"            newManager.addEventHandler(state.getEventHandler(),",0,0,0,1,3,0,4,0,0,3,51,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,239,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,272,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/EventException,74,39,"        super(specifier, parts);",2,0,0,0,2,1,0,0,1,4,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/EventException,74,40,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/EventException,74,47,        super(cause);,1,0,0,1,2,1,0,0,1,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/EventException,74,48,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/IntegratorException,74,40,"    super(specifier, parts);",2,0,0,0,2,1,0,0,1,4,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/ode/IntegratorException,74,41,  },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/IntegratorException,74,48,    super(cause);,1,0,0,1,2,1,0,0,1,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/ode/IntegratorException,74,49,  },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,82,        final List<EventHandler> list = new ArrayList<EventHandler>();,1,0,0,1,2,2,0,4,2,6,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,83,        for (EventState state : states) {,2,0,0,1,3,1,0,1,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,84,            list.add(state.getEventHandler());,0,0,0,2,4,0,4,0,0,3,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,85,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,86,        return Collections.unmodifiableCollection(list);,0,0,0,1,2,1,3,0,0,4,48,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,109,        return states.isEmpty();,0,0,0,1,2,1,2,0,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,132,                return false;,0,0,0,0,0,1,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,156,                        if (interpolator.isForward()) {,0,0,0,2,5,1,2,0,0,4,31,13,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,157,                            if (state.getEventTime() < first.getEventTime()) {,0,1,0,2,7,1,4,0,0,5,50,14,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,158,                                first = state;,2,0,0,0,0,0,0,0,1,2,14,16,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,161,                            if (state.getEventTime() > first.getEventTime()) {,0,1,0,2,7,1,4,0,0,5,50,14,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,162,                                first = state;,2,0,0,0,0,0,0,0,1,2,14,16,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,172,        } catch (EventException se) {,1,0,0,1,4,1,0,1,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,173,            throw new IntegratorException(se);,1,0,0,1,2,2,0,1,1,6,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,174,        } catch (ConvergenceException ce) {,1,0,0,1,4,1,0,1,0,5,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,175,            throw new IntegratorException(ce);,1,0,0,1,2,2,0,1,1,6,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,205,        } catch (EventException se) {,1,0,0,1,4,1,0,1,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,206,            throw new IntegratorException(se);,1,0,0,1,2,2,0,1,1,6,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,238,                    resetDerivatives = true;,1,0,0,0,0,0,0,0,2,2,24,10,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,242,        } catch (EventException se) {,1,0,0,1,4,1,0,1,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,74,243,            throw new IntegratorException(se);,1,0,0,1,2,2,0,1,1,6,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/DerivativeException,74,41,"    super(specifier, parts);",2,0,0,0,2,1,0,0,1,4,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/ode/DerivativeException,74,42,  },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,117,        return handler;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,124,        return maxCheckInterval;,1,0,0,0,0,1,0,0,0,2,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,131,        return convergence;,1,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,138,        return maxIterationCount;,1,0,0,0,0,1,0,0,0,2,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,199,                        final double epsilon = (forward ? 0.25 : -0.25) * convergence;,3,1,0,1,2,2,0,0,2,6,62,12,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,200,                        for (int k = 0; (k < 4) && (ga * gb > 0); ++k) {,5,4,0,2,7,2,0,0,1,6,48,12,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,201,                            ta += epsilon;,2,0,0,0,0,0,0,0,1,2,14,14,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,202,                            interpolator.setInterpolatedTime(ta);,0,0,0,1,2,0,3,0,0,3,37,15,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,203,"                            ga = handler.g(ta, interpolator.getInterpolatedState());",1,0,0,1,4,0,5,0,1,5,56,14,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,205,                        if (ga * gb > 0) {,2,2,0,1,3,1,0,0,0,5,18,12,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,207,                            throw MathRuntimeException.createInternalError(null);,0,0,0,1,2,1,2,0,0,4,53,15,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,233,                        ta = tb;,2,0,0,0,0,0,0,0,1,2,8,12,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,234,                        ga = gb;,2,0,0,0,0,0,0,0,1,2,8,12,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,251,                } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,264,        } catch (FunctionEvaluationException e) {,1,0,0,1,4,1,0,1,0,5,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,265,            final Throwable cause = e.getCause();,1,0,0,1,2,1,2,1,1,7,37,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,266,            if ((cause != null) && (cause instanceof DerivativeException)) {,2,2,0,2,7,2,0,1,0,6,64,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,267,                throw (DerivativeException) cause;,1,0,0,1,2,1,0,1,0,5,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,268,            } else if ((cause != null) && (cause instanceof EventException)) {,2,2,0,2,8,3,0,1,0,6,66,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,269,                throw (EventException) cause;,1,0,0,1,2,1,0,1,0,5,29,11,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,271,            throw new EventException(e);,1,0,0,1,2,2,0,1,1,6,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,334,        if (nextAction == EventHandler.RESET_STATE) {,3,1,0,1,3,1,0,0,0,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,335,"            handler.resetState(t, y);",0,0,0,0,2,0,4,0,0,2,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,337,        pendingEvent      = false;,1,0,0,0,0,0,0,0,2,2,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,338,        pendingEventTime  = Double.NaN;,3,0,0,0,0,0,0,0,1,2,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,340,        return (nextAction == EventHandler.RESET_STATE) ||,3,2,0,1,2,1,0,0,0,5,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,219,                            } catch (DerivativeException e) {,1,0,0,1,4,1,0,1,0,5,33,18,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,220,"                                throw new FunctionEvaluationException(e, t);",2,0,0,0,2,2,0,1,1,5,44,19,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,221,                            } catch (EventException e) {,1,0,0,1,4,1,0,1,0,5,28,18,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,74,222,"                                throw new FunctionEvaluationException(e, t);",2,0,0,0,2,2,0,1,1,5,44,19,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,81,        super(interpolator);,1,0,0,1,2,1,0,0,1,5,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,82,        scalingH      = interpolator.scalingH;,3,0,0,0,0,0,0,0,1,2,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,83,        referenceTime = interpolator.referenceTime;,3,0,0,0,0,0,0,0,1,2,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,84,        if (interpolator.scaled != null) {,2,1,0,1,3,1,0,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,85,            scaled = interpolator.scaled.clone();,3,0,0,1,2,0,1,0,1,5,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,87,        if (interpolator.nordsieck != null) {,2,1,0,1,3,1,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,88,"            nordsieck = new Array2DRowRealMatrix(interpolator.nordsieck.getDataRef(), true);",3,0,0,1,4,1,1,1,3,7,80,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,90,        if (interpolator.stateVariation != null) {,2,1,0,1,3,1,0,0,0,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,91,            stateVariation = interpolator.stateVariation.clone();,3,0,0,1,2,0,1,0,1,5,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,93,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,98,        return new NordsieckStepInterpolator(this);,0,0,0,1,2,3,0,1,1,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,180,        getInterpolatedState();,0,0,0,1,2,0,1,0,1,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,181,        return stateVariation;,1,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,223,        writeBaseExternal(out);,0,0,0,1,2,0,2,0,1,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,226,        out.writeDouble(scalingH);,0,0,0,1,2,0,3,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,227,        out.writeDouble(referenceTime);,0,0,0,1,2,0,3,0,0,3,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,229,        final int n = (currentState == null) ? -1 : currentState.length;,4,1,0,1,2,2,0,0,2,6,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,230,        if (scaled == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,231,            out.writeBoolean(false);,0,0,0,1,2,0,2,0,1,4,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,233,            out.writeBoolean(true);,0,0,0,1,2,0,2,0,1,4,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,234,            for (int j = 0; j < n; ++j) {,4,1,0,1,3,2,0,0,1,6,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,235,                out.writeDouble(scaled[j]);,0,0,1,1,4,0,2,0,0,4,27,9,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,239,        if (nordsieck == null) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,240,            out.writeBoolean(false);,0,0,0,1,2,0,2,0,1,4,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,242,            out.writeBoolean(true);,0,0,0,1,2,0,2,0,1,4,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,243,            out.writeObject(nordsieck);,0,0,0,1,2,0,3,0,0,3,27,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,248,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,256,        final double t = readBaseExternal(in);,1,0,0,1,2,2,2,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,259,        scalingH      = in.readDouble();,1,0,0,1,2,0,2,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,260,        referenceTime = in.readDouble();,1,0,0,1,2,0,2,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,262,        final int n = (currentState == null) ? -1 : currentState.length;,4,1,0,1,2,2,0,0,2,6,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,263,        final boolean hasScaled = in.readBoolean();,1,0,0,1,2,2,2,0,1,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,264,        if (hasScaled) {,1,0,0,1,3,1,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,265,            scaled = new double[n];,1,0,1,0,2,2,0,0,1,5,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,266,            for (int j = 0; j < n; ++j) {,4,1,0,1,3,2,0,0,1,6,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,267,                scaled[j] = in.readDouble();,0,0,1,1,4,0,2,0,1,5,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,270,            scaled = null;,1,0,0,0,0,0,0,0,1,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,273,        final boolean hasNordsieck = in.readBoolean();,1,0,0,1,2,2,2,0,1,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,274,        if (hasNordsieck) {,1,0,0,1,3,1,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,275,            nordsieck = (Array2DRowRealMatrix) in.readObject();,1,0,0,1,4,0,2,1,1,6,51,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,277,            nordsieck = null;,1,0,0,0,0,0,0,0,1,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,280,        if (hasScaled && hasNordsieck) {,2,1,0,1,3,1,0,0,0,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,282,            stateVariation = new double[n];,1,0,1,0,2,2,0,0,1,5,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,283,            setInterpolatedTime(t);,0,0,0,1,2,0,2,0,1,4,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,285,            stateVariation = null;,1,0,0,0,0,0,0,0,1,2,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,288,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,107,"  protected AbstractStepInterpolator(final double[] y, final boolean forward) {",3,0,0,0,5,5,0,0,3,4,77,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,109,    previousTime      = Double.NaN;,3,0,0,0,0,0,0,0,1,2,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,110,    currentTime       = Double.NaN;,3,0,0,0,0,0,0,0,1,2,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,111,    h                 = Double.NaN;,3,0,0,0,0,0,0,0,1,2,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,112,    interpolatedTime  = Double.NaN;,3,0,0,0,0,0,0,0,1,2,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,114,    currentState            = y;,2,0,0,0,0,0,0,0,1,2,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,115,    interpolatedState       = new double[y.length];,3,0,0,0,2,2,0,0,1,4,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,116,    interpolatedDerivatives = new double[y.length];,3,0,0,0,2,2,0,0,1,4,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,118,    finalized         = false;,1,0,0,0,0,0,0,0,2,2,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,119,    this.forward      = forward;,2,0,0,0,0,1,0,0,1,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,120,    this.dirtyState   = true;,1,0,0,0,0,1,0,0,2,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,122,  },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,149,      currentState            = interpolator.currentState.clone();,3,0,0,1,2,0,1,0,1,5,60,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,150,      interpolatedState       = interpolator.interpolatedState.clone();,3,0,0,1,2,0,1,0,1,5,65,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,151,      interpolatedDerivatives = interpolator.interpolatedDerivatives.clone();,3,0,0,1,2,0,1,0,1,5,71,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,355,  },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,374,    if (currentState == null) {,1,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,375,        out.writeInt(-1);,0,0,0,1,2,0,2,0,1,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,377,        out.writeInt(currentState.length);,2,0,0,1,2,0,2,0,0,4,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,379,    out.writeDouble(previousTime);,0,0,0,1,2,0,3,0,0,3,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,380,    out.writeDouble(currentTime);,0,0,0,1,2,0,3,0,0,3,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,381,    out.writeDouble(h);,0,0,0,1,2,0,3,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,382,    out.writeBoolean(forward);,0,0,0,1,2,0,3,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,384,    if (currentState != null) {,1,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,385,        for (int i = 0; i < currentState.length; ++i) {,5,1,0,1,3,2,0,0,1,6,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,386,            out.writeDouble(currentState[i]);,0,0,1,1,4,0,2,0,0,4,33,9,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,390,    out.writeDouble(interpolatedTime);,0,0,0,1,2,0,3,0,0,3,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,397,      finalizeStep();,0,0,0,1,2,0,1,0,1,4,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,400,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,398,    } catch (DerivativeException e) {,1,0,0,1,4,1,0,1,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,399,      throw MathRuntimeException.createIOException(e);,0,0,0,1,2,1,3,0,0,4,48,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,402,  },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,416,    final int dimension = in.readInt();,1,0,0,1,2,2,2,0,1,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,417,    previousTime  = in.readDouble();,1,0,0,1,2,0,2,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,418,    currentTime   = in.readDouble();,1,0,0,1,2,0,2,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,419,    h             = in.readDouble();,1,0,0,1,2,0,2,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,420,    forward       = in.readBoolean();,1,0,0,1,2,0,2,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,421,    dirtyState    = true;,1,0,0,0,0,0,0,0,2,2,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,423,    if (dimension < 0) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,424,        currentState = null;,1,0,0,0,0,0,0,0,1,2,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,426,        currentState  = new double[dimension];,1,0,1,0,2,2,0,0,1,5,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,427,        for (int i = 0; i < currentState.length; ++i) {,5,1,0,1,3,2,0,0,1,6,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,428,            currentState[i] = in.readDouble();,0,0,1,1,4,0,2,0,1,5,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,433,    interpolatedTime        = Double.NaN;,3,0,0,0,0,0,0,0,1,2,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,434,    interpolatedState       = (dimension < 0) ? null : new double[dimension];,2,1,1,1,4,2,0,0,1,7,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,435,    interpolatedDerivatives = (dimension < 0) ? null : new double[dimension];,2,1,1,1,4,2,0,0,1,7,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,437,    finalized = true;,1,0,0,0,0,0,0,0,2,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,439,    return in.readDouble();,0,0,0,1,2,1,2,0,0,4,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,74,57,    super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,74,58,  },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,74,66,"    super(y, forward);",2,0,0,0,2,1,0,0,1,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,74,67,  },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,74,75,    super(interpolator);,1,0,0,1,2,1,0,0,1,5,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,74,76,  },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,74,83,    return new DummyStepInterpolator(this);,0,0,0,1,2,3,0,1,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,74,99,"      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);",2,0,0,0,2,0,4,0,0,3,77,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,74,100,  },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,74,110,    writeBaseExternal(out);,0,0,0,1,2,0,2,0,1,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,74,111,  },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,74,122,    final double t = readBaseExternal(in);,1,0,0,1,2,2,2,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,74,125,    setInterpolatedTime(t);,0,0,0,1,2,0,2,0,1,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,74,127,  },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,115,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,158,"        super(name, minStep, maxStep, vecAbsoluteTolerance, vecRelativeTolerance);",5,0,0,0,2,1,0,0,1,4,74,3,0.0,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,159,"        starter = new DormandPrince853Integrator(minStep, maxStep,",3,0,0,0,1,1,0,1,2,5,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,162,        this.nSteps = nSteps;,2,0,0,0,0,1,0,0,1,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,164,        exp = -1.0 / order;,2,1,0,0,0,0,0,0,2,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,167,        setSafety(0.9);,0,0,0,1,2,0,1,0,1,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,168,        setMinReduction(0.2);,0,0,0,1,2,0,1,0,1,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,169,"        setMaxGrowth(Math.pow(2.0, -exp));",1,0,0,0,4,0,3,0,2,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,171,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,178,        return starter;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,189,        this.starter = starterIntegrator;,2,0,0,0,0,1,0,0,1,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,190,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,230,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,228,                throw de;,1,0,0,0,0,1,0,0,0,2,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,250,        return minReduction;,1,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,264,        return maxGrowth;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,278,      return safety;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,123,    super(name);,1,0,0,1,2,1,0,0,1,5,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,125,    this.minStep     = minStep;,2,0,0,0,0,1,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,126,    this.maxStep     = maxStep;,2,0,0,0,0,1,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,127,    this.initialStep = -1.0;,1,0,0,0,0,1,0,0,2,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,129,    this.scalAbsoluteTolerance = 0;,1,0,0,0,0,1,0,0,1,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,130,    this.scalRelativeTolerance = 0;,1,0,0,0,0,1,0,0,1,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,131,    this.vecAbsoluteTolerance  = vecAbsoluteTolerance.clone();,1,0,0,1,2,1,2,0,1,6,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,132,    this.vecRelativeTolerance  = vecRelativeTolerance.clone();,1,0,0,1,2,1,2,0,1,6,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,134,    resetInternalState();,0,0,0,1,2,0,1,0,1,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,136,  },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,150,    if ((initialStepSize < minStep) || (initialStepSize > maxStep)) {,4,3,0,2,7,1,0,0,0,5,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,151,      initialStep = -1.0;,1,0,0,0,0,0,0,0,2,2,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,153,      initialStep = initialStepSize;,2,0,0,0,0,0,0,0,1,2,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,155,  },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,174,          throw new IntegratorException(,0,0,0,0,1,2,0,1,1,4,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,181,          throw new IntegratorException(,0,0,0,0,1,2,0,1,1,4,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,211,      return forward ? initialStep : -initialStep;,3,0,0,0,0,1,0,0,1,3,44,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,229,      h = -h;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,255,      h = getMinStep();,1,0,0,1,2,0,1,0,2,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,258,      h = getMaxStep();,1,0,0,1,2,0,1,0,2,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,261,      h = -h;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,282,          if (acceptSmall) {,1,0,0,1,3,1,0,0,0,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,283,              filteredH = forward ? minStep : -minStep;,4,0,0,0,0,0,0,0,2,2,41,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,285,              throw new IntegratorException(,0,0,0,0,1,2,0,1,1,4,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,294,          filteredH = -maxStep;,2,0,0,0,0,0,0,0,2,2,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,210,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,219,        return c1.length;,2,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,196,"        super(""Adams-Moulton"", nSteps, nSteps + 1, minStep, maxStep,",4,1,0,0,1,1,0,0,2,5,60,3,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,198,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,293,                            loop = false;,1,0,0,0,0,0,0,0,2,2,13,14,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,334,"                start(stepStart, y, t);",0,0,0,0,2,0,4,0,1,3,23,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,335,"                interpolator.reinitialize(stepStart, stepSize, scaled, nordsieck);",0,0,0,0,2,0,6,0,0,2,66,9,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsIntegrator,74,78,"        super(name, nSteps, order, minStep, maxStep,",5,0,0,0,1,1,0,0,1,4,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsIntegrator,74,80,        transformer = AdamsNordsieckTransformer.getInstance(nSteps);,1,0,0,1,2,0,3,0,1,5,60,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsIntegrator,74,81,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,74,84,      final int dimension = currentState.length;,3,0,0,0,0,2,0,0,1,3,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,74,86,      yDotK = new double[interpolator.yDotK.length][];,4,0,0,0,4,2,0,0,1,4,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,74,87,      for (int k = 0; k < interpolator.yDotK.length; ++k) {,6,1,0,1,3,2,0,0,1,6,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,74,88,        yDotK[k] = new double[dimension];,0,0,1,0,4,2,0,0,1,4,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,74,89,"        System.arraycopy(interpolator.yDotK[k], 0,",2,0,1,0,3,0,2,0,0,4,42,9,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,74,93,    } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,74,137,    writeBaseExternal(out);,0,0,0,1,2,0,2,0,1,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,74,140,    final int n = (currentState == null) ? -1 : currentState.length;,4,1,0,1,2,2,0,0,2,6,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,74,141,    final int kMax = (yDotK == null) ? -1 : yDotK.length;,4,1,0,1,2,2,0,0,2,6,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,74,142,    out.writeInt(kMax);,0,0,0,1,2,0,3,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,74,143,    for (int k = 0; k < kMax; ++k) {,4,1,0,1,3,2,0,0,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,74,144,      for (int i = 0; i < n; ++i) {,4,1,0,1,3,2,0,0,1,6,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,74,145,        out.writeDouble(yDotK[k][i]);,0,0,1,1,6,0,2,0,0,4,29,9,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,74,151,  },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,74,159,    final double t = readBaseExternal(in);,1,0,0,1,2,2,2,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,74,162,    final int n = (currentState == null) ? -1 : currentState.length;,4,1,0,1,2,2,0,0,2,6,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,74,163,    final int kMax = in.readInt();,1,0,0,1,2,2,2,0,1,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,74,164,    yDotK = (kMax < 0) ? null : new double[kMax][];,2,1,1,1,6,2,0,0,1,7,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,74,165,    for (int k = 0; k < kMax; ++k) {,4,1,0,1,3,2,0,0,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,74,166,      yDotK[k] = (n < 0) ? null : new double[n];,1,1,1,1,6,2,0,0,1,7,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,74,167,      for (int i = 0; i < n; ++i) {,4,1,0,1,3,2,0,0,1,6,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,74,168,        yDotK[k][i] = in.readDouble();,0,0,1,1,6,0,2,0,1,5,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,74,172,    integrator = null;,1,0,0,0,0,0,0,0,1,2,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,74,174,    if (currentState != null) {,1,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,74,176,        setInterpolatedTime(t);,0,0,0,1,2,0,2,0,1,4,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,74,178,        interpolatedTime = t;,2,0,0,0,0,0,0,0,1,2,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,74,181,  },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,74,233,"    super(METHOD_NAME, true, STATIC_C, STATIC_A, STATIC_B,",4,0,0,0,1,1,0,0,2,4,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,74,236,  },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,74,274,      den = 1.0;,1,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,154,"    super(name, minStep, maxStep, vecAbsoluteTolerance, vecRelativeTolerance);",5,0,0,0,2,1,0,0,1,4,74,3,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,156,    this.fsal      = fsal;,2,0,0,0,0,1,0,0,1,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,157,    this.c         = c;,2,0,0,0,0,1,0,0,1,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,158,    this.a         = a;,2,0,0,0,0,1,0,0,1,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,159,    this.b         = b;,2,0,0,0,0,1,0,0,1,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,160,    this.prototype = prototype;,2,0,0,0,0,1,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,162,    exp = -1.0 / getOrder();,1,1,0,1,2,0,1,0,3,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,165,    setSafety(0.9);,0,0,0,1,2,0,1,0,1,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,166,    setMinReduction(0.2);,0,0,0,1,2,0,1,0,1,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,167,    setMaxGrowth(10.0);,0,0,0,1,2,0,1,0,1,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,169,  },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,180,    return safety;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,217,"      interpolator = new DummyStepInterpolator(yTmp, forward);",3,0,0,0,2,1,0,1,2,5,56,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,250,              scale = vecAbsoluteTolerance;,2,0,0,0,0,0,0,0,1,2,29,12,0.0,1,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,290,              final double dt = manager.getEventTime() - stepStart;,2,1,0,1,2,2,2,0,1,7,53,12,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,291,              if (Math.abs(dt) <= Math.ulp(stepStart)) {,0,1,0,2,7,1,6,0,0,5,42,12,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,293,                  loop = false;,1,0,0,0,0,0,0,0,2,2,13,14,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,296,                  hNew = dt;,2,0,0,0,0,0,0,0,1,2,10,14,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,298,          } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,305,          final double factor =,1,0,0,0,0,2,0,0,1,3,21,10,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,308,"          hNew = filterStep(stepSize * factor, forward, false);",3,1,0,0,2,0,2,0,3,5,53,10,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,309,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,323,      },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,324,      stepStart = nextStep;,2,0,0,0,0,0,0,0,1,2,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,326,      if (fsal) {,1,0,0,1,3,1,0,0,0,4,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,328,"        System.arraycopy(yDotK[stages - 1], 0, yDotK[0], 0, y0.length);",3,1,1,0,6,0,2,0,0,5,63,9,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,331,"      if (manager.reset(stepStart, y) && ! lastStep) {",1,1,0,0,5,1,4,0,1,6,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,334,"        computeDerivatives(stepStart, y, yDotK[0]);",0,0,1,0,4,0,3,0,1,4,43,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,337,      if (! lastStep) {,1,0,0,1,3,1,0,0,1,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,341,"          stepSize = filterStep(stepSize, forward, true);",1,0,0,0,2,0,3,0,3,4,47,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,344,"        final double factor = Math.min(maxGrowth,",1,0,0,0,1,2,3,0,1,5,41,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,347,        final double  scaledH    = stepSize * factor;,3,1,0,0,0,2,0,0,1,4,45,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,348,        final double  nextT      = stepStart + scaledH;,3,1,0,0,0,2,0,0,1,4,47,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,349,        final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);,6,2,0,1,4,2,0,0,1,6,65,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,350,"        hNew = filterStep(scaledH, forward, nextIsLast);",1,0,0,0,2,0,4,0,2,4,48,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,353,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,355,    final double stopTime = stepStart;,2,0,0,0,0,2,0,0,1,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,356,    resetInternalState();,0,0,0,1,2,0,1,0,1,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,357,    return stopTime;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,365,    return minReduction;,1,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,379,    return maxGrowth;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,255,      final int dimension = interpolator.currentState.length;,4,0,0,0,0,2,0,0,1,3,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,257,      yDotKLast    = new double[3][];,1,0,0,0,4,2,0,0,1,4,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,258,      for (int k = 0; k < yDotKLast.length; ++k) {,5,1,0,1,3,2,0,0,1,6,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,259,        yDotKLast[k] = new double[dimension];,0,0,1,0,4,2,0,0,1,4,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,260,"        System.arraycopy(interpolator.yDotKLast[k], 0, yDotKLast[k], 0,",2,0,1,0,5,0,2,0,0,4,63,9,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,264,      v = new double[7][];,1,0,0,0,4,2,0,0,1,4,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,265,      for (int k = 0; k < v.length; ++k) {,5,1,0,1,3,2,0,0,1,6,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,266,        v[k] = new double[dimension];,0,0,1,0,4,2,0,0,1,4,29,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,267,"        System.arraycopy(interpolator.v[k], 0, v[k], 0, dimension);",2,0,1,0,6,0,3,0,0,4,59,9,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,270,      vectorsInitialized = interpolator.vectorsInitialized;,3,0,0,0,0,0,0,0,1,2,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,321,        v = new double[7][];,1,0,0,0,4,2,0,0,1,4,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,322,        for (int k = 0; k < 7; ++k) {,3,1,0,1,3,2,0,0,1,6,29,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,323,          v[k] = new double[interpolatedState.length];,2,0,1,0,4,2,0,0,1,5,44,10,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,438,      finalizeStep();,0,0,0,1,2,0,1,0,1,4,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,441,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,439,    } catch (DerivativeException e) {,1,0,0,1,4,1,0,1,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,440,      throw MathRuntimeException.createIOException(e);,0,0,0,1,2,1,3,0,0,4,48,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,442,    final int dimension = (currentState == null) ? -1 : currentState.length;,4,1,0,1,2,2,0,0,2,6,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,443,    out.writeInt(dimension);,0,0,0,1,2,0,3,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,444,    for (int i = 0; i < dimension; ++i) {,4,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,445,      out.writeDouble(yDotKLast[0][i]);,0,0,1,1,6,0,2,0,0,4,33,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,446,      out.writeDouble(yDotKLast[1][i]);,0,0,1,1,6,0,2,0,0,4,33,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,447,      out.writeDouble(yDotKLast[2][i]);,0,0,1,1,6,0,2,0,0,4,33,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,451,    super.writeExternal(out);,2,0,0,1,2,1,0,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,453,  },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,461,    yDotKLast = new double[3][];,1,0,0,0,4,2,0,0,1,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,462,    final int dimension = in.readInt();,1,0,0,1,2,2,2,0,1,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,463,    yDotKLast[0] = (dimension < 0) ? null : new double[dimension];,1,1,1,1,6,2,0,0,1,7,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,464,    yDotKLast[1] = (dimension < 0) ? null : new double[dimension];,1,1,1,1,6,2,0,0,1,7,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,465,    yDotKLast[2] = (dimension < 0) ? null : new double[dimension];,1,1,1,1,6,2,0,0,1,7,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,467,    for (int i = 0; i < dimension; ++i) {,4,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,468,      yDotKLast[0][i] = in.readDouble();,0,0,1,1,6,0,2,0,1,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,469,      yDotKLast[1][i] = in.readDouble();,0,0,1,1,6,0,2,0,1,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,470,      yDotKLast[2][i] = in.readDouble();,0,0,1,1,6,0,2,0,1,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,474,    super.readExternal(in);,2,0,0,1,2,1,0,0,0,4,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,74,476,  },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
