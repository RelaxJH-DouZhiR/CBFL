dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,other,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,193,        return inverseCumulativeProbability(random.nextDouble());,0,0,0,2,4,1,3,0,1,5,57,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,86,        final int indexRm1 = iRm1[index];,1,0,1,0,2,2,0,0,1,5,33,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,87,        final int indexRm2 = iRm2[index];,1,0,1,0,2,2,0,0,1,5,33,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,89,        final int v0       = v[index];,1,0,1,0,2,2,0,0,1,5,30,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,90,        final int vM1      = v[i1[index]];,1,0,1,0,4,2,0,0,1,5,34,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,91,        final int vM2      = v[i2[index]];,1,0,1,0,4,2,0,0,1,5,34,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,92,        final int vM3      = v[i3[index]];,1,0,1,0,4,2,0,0,1,5,34,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,94,        final int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);,1,3,1,1,8,2,0,0,1,7,71,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,95,        final int z1 = (v0 ^ (v0 << 25))  ^ (vM1 ^ (vM1 >>> 27));,5,5,0,2,8,2,0,0,1,6,57,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,96,        final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));,4,4,0,2,6,2,0,0,1,6,49,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,97,        final int z3 = z1      ^ z2;,3,1,0,0,0,2,0,0,1,4,28,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,98,        int z4 = z0 ^ (z1 ^ (z1 << 9)) ^ (z2 ^ (z2 << 21)) ^ (z3 ^ (z3 >>> 21));,8,7,0,2,12,1,0,0,0,5,72,5,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,100,        v[index]     = z3;,1,0,1,0,2,0,0,0,1,4,18,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,101,        v[indexRm1]  = z4;,1,0,1,0,2,0,0,0,1,4,18,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,102,        v[indexRm2] &= 0x80000000;,0,0,1,0,2,0,0,0,1,3,26,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,103,        index        = indexRm1;,2,0,0,0,0,0,0,0,1,2,24,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,108,        z4 = z4 ^ ((z4 <<  7) & 0xe46e1700);,3,3,0,2,4,0,0,0,1,5,36,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,109,        z4 = z4 ^ ((z4 << 15) & 0x9b868000);,3,3,0,2,4,0,0,0,1,5,36,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,111,        return z4 >>> (32 - bits);,2,2,0,1,2,1,0,0,0,5,26,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,90,        final long high = ((long) next(26)) << 26;,1,1,0,2,6,3,1,0,2,7,42,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,91,        final int  low  = next(26);,1,0,0,1,2,2,1,0,2,6,27,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,92,        return (high | low) * 0x1.0p-52d;,2,2,0,1,2,1,0,0,0,5,33,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,130,            double k = FastMath.sqrt((1.0 - p) / p);,3,2,0,2,4,1,2,0,0,6,40,7,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,131,            double tmp = mu - k * sigma;,4,2,0,0,0,1,0,0,0,3,28,7,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,132,            if (tmp > lower) {,2,1,0,1,3,1,0,0,0,5,18,6,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,135,            k = 1.0 / k;,2,1,0,0,0,0,0,0,1,3,12,6,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,136,            tmp = mu + k * sigma;,4,2,0,0,0,0,0,0,1,3,21,6,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,137,            if (tmp < upper) {,2,1,0,1,3,1,0,0,0,5,18,6,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,138,                upper = ((int) Math.ceil(tmp)) - 1;,1,1,0,2,6,1,3,0,1,7,35,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,385,        return Math.sqrt(a);,0,0,0,1,2,1,3,0,0,4,20,5,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,125,        final double mu = getNumericalMean();,1,0,0,1,2,2,1,0,2,6,37,4,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,126,        final double sigma = FastMath.sqrt(getNumericalVariance());,1,0,0,2,4,2,3,0,2,6,59,4,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,127,        final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||,1,1,0,1,5,2,6,0,2,7,79,4,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,129,        if (chebyshevApplies) {,1,0,0,1,3,1,0,0,0,4,23,4,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,142,"        return solveInverseCumulativeProbability(p, lower, upper);",0,0,0,0,2,1,4,0,1,4,58,4,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,158,        while (lower + 1 < upper) {,2,2,0,1,3,1,0,0,0,5,27,4,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,176,        return upper;,1,0,0,0,0,1,0,0,0,2,13,4,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,268,        return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();,0,2,0,2,12,3,3,0,3,6,90,4,0.16667,1,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,279,        if (!numericalVarianceIsCalculated) {,1,0,0,1,3,1,0,0,1,5,37,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,280,            numericalVariance = calculateNumericalVariance();,1,0,0,1,2,0,1,0,2,5,49,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,281,            numericalVarianceIsCalculated = true;,1,0,0,0,0,0,0,0,2,2,37,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,283,        return numericalVariance;,1,0,0,0,0,1,0,0,0,2,25,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,292,        final double N = getPopulationSize();,1,0,0,1,2,2,1,0,2,6,37,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,293,        final double m = getNumberOfSuccesses();,1,0,0,1,2,2,1,0,2,6,40,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,294,        final double n = getSampleSize();,1,0,0,1,2,2,1,0,2,6,33,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,295,        return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));,9,6,0,2,10,1,0,0,0,5,55,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,308,"        return FastMath.max(0,",0,0,0,0,1,1,2,0,0,3,22,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,321,"        return FastMath.min(getNumberOfSuccesses(), getSampleSize());",0,0,0,1,6,1,4,0,2,5,61,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,105,        int lower = getSupportLowerBound();,1,0,0,1,2,1,1,0,1,6,35,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,106,        if (p == 0.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,109,        if (lower == Integer.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,33,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,114,"            lower -= 1; // this ensures cumulativeProbability(lower) < p, which",1,0,0,1,2,1,0,0,1,5,67,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,118,        int upper = getSupportUpperBound();,1,0,0,1,2,1,1,0,1,6,35,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,119,        if (p == 1.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,101,        if (p < 0.0 || p > 1.0) {,2,3,0,1,3,1,0,0,0,5,25,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,161,        return numberOfSuccesses;,1,0,0,0,0,1,0,0,0,2,25,4,0.125,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,170,        return populationSize;,1,0,0,0,0,1,0,0,0,2,22,4,0.125,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,179,        return sampleSize;,1,0,0,0,0,1,0,0,0,2,18,4,0.125,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,97,    private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);,3,0,0,1,2,4,2,0,3,6,77,2,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,115,    private static final double LN_QUICK_COEF[][] = {,1,0,0,0,5,4,0,0,3,4,49,2,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,128,    private static final double LN_HI_PREC_COEF[][] = {,1,0,0,0,5,4,0,0,3,4,51,2,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,141,    private static final double SINE_TABLE_A[] =,1,0,0,0,2,4,0,0,3,4,44,2,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,160,    private static final double SINE_TABLE_B[] =,1,0,0,0,2,4,0,0,3,4,44,2,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,179,    private static final double COSINE_TABLE_A[] =,1,0,0,0,2,4,0,0,3,4,46,2,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,198,    private static final double COSINE_TABLE_B[] =,1,0,0,0,2,4,0,0,3,4,46,2,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,218,    private static final double TANGENT_TABLE_A[] =,1,0,0,0,2,4,0,0,3,4,47,2,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,237,    private static final double TANGENT_TABLE_B[] =,1,0,0,0,2,4,0,0,3,4,47,2,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,256,    private static final long RECIP_2PI[] = new long[] {,1,0,0,0,5,6,0,0,3,4,52,2,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,277,    private static final long PI_O_4_BITS[] = new long[] {,1,0,0,0,5,6,0,0,3,4,54,2,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,285,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",1,0,0,0,4,4,0,0,3,4,126,2,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,288,"    private static final double CBRTTWO[] = { 0.6299605249474366,",1,0,0,0,3,4,0,0,3,4,61,2,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3429,        return (a <= b) ? a : b;,4,1,0,1,2,1,0,0,0,5,24,5,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3497,        return (a <= b) ? b : a;,4,1,0,1,2,1,0,0,0,5,24,5,0.09091,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,63,"        this(new Well19937c(), populationSize, numberOfSuccesses, sampleSize);",3,0,0,1,4,2,0,1,1,6,70,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,64,    },0,0,0,0,1,0,0,0,0,1,1,2,0.06667,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,84,        super(rng);,1,0,0,1,2,1,0,0,1,5,11,3,0.06667,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,45,    private double numericalVariance = Double.NaN;,3,0,0,0,0,2,0,0,1,3,46,2,0.06667,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,47,    private boolean numericalVarianceIsCalculated = false;,1,0,0,0,0,2,0,0,2,3,54,2,0.06667,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,86,        if (populationSize <= 0) {,1,1,0,1,3,1,0,0,0,5,26,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,90,        if (numberOfSuccesses < 0) {,1,1,0,1,3,1,0,0,0,5,28,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,94,        if (sampleSize < 0) {,1,1,0,1,3,1,0,0,0,5,21,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,99,        if (numberOfSuccesses > populationSize) {,2,1,0,1,3,1,0,0,0,5,41,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,103,        if (sampleSize > populationSize) {,2,1,0,1,3,1,0,0,0,5,34,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,108,        this.numberOfSuccesses = numberOfSuccesses;,2,0,0,0,0,1,0,0,1,3,43,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,109,        this.populationSize = populationSize;,2,0,0,0,0,1,0,0,1,3,37,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,110,        this.sampleSize = sampleSize;,2,0,0,0,0,1,0,0,1,3,29,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,111,    },0,0,0,0,1,0,0,0,0,1,1,2,0.06667,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,47,    @Deprecated,1,0,0,0,0,0,0,0,0,1,11,3,0.06667,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,71,    protected AbstractIntegerDistribution(RandomGenerator rng) {,2,0,0,1,3,1,0,1,1,6,60,2,0.06667,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,72,        random = rng;,2,0,0,0,0,0,0,0,1,2,13,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,73,    },0,0,0,0,1,0,0,0,0,1,1,2,0.06667,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,57,"        super(K, M1, M2, M3);",4,0,0,0,2,1,0,0,1,4,21,3,0.06667,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,58,    },0,0,0,0,1,0,0,0,0,1,1,2,0.06667,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,72,"        this(k, m1, m2, m3, null);",4,0,0,0,2,1,0,0,0,3,26,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,73,    },0,0,0,0,1,0,0,0,0,1,1,2,0.06667,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,94,"    protected AbstractWell(final int k, final int m1, final int m2, final int m3, final int[] seed) {",6,0,0,0,5,11,0,0,6,4,97,2,0.06667,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,99,        final int w = 32;,1,0,0,0,0,2,0,0,1,3,17,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,100,        final int r = (k + w - 1) / w;,4,3,0,1,2,2,0,0,1,6,30,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,101,        this.v      = new int[r];,1,0,1,0,2,3,0,0,1,5,25,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,102,        this.index  = 0;,1,0,0,0,0,1,0,0,1,3,16,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,106,        iRm1 = new int[r];,1,0,1,0,2,2,0,0,1,5,18,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,107,        iRm2 = new int[r];,1,0,1,0,2,2,0,0,1,5,18,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,108,        i1   = new int[r];,1,0,1,0,2,2,0,0,1,5,18,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,109,        i2   = new int[r];,1,0,1,0,2,2,0,0,1,5,18,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,110,        i3   = new int[r];,1,0,1,0,2,2,0,0,1,5,18,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,111,        for (int j = 0; j < r; ++j) {,4,1,0,1,3,2,0,0,1,6,29,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,112,            iRm1[j] = (j + r - 1) % r;,3,3,1,1,4,0,0,0,1,6,26,6,0.06667,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,113,            iRm2[j] = (j + r - 2) % r;,3,3,1,1,4,0,0,0,1,6,26,6,0.06667,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,114,            i1[j]   = (j + m1)    % r;,3,2,1,1,4,0,0,0,1,6,26,6,0.06667,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,115,            i2[j]   = (j + m2)    % r;,3,2,1,1,4,0,0,0,1,6,26,6,0.06667,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,116,            i3[j]   = (j + m3)    % r;,3,2,1,1,4,0,0,0,1,6,26,6,0.06667,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,120,        setSeed(seed);,0,0,0,1,2,0,2,0,1,4,14,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,122,    },0,0,0,0,1,0,0,0,0,1,1,2,0.06667,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,154,        if (seed == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,155,            setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0,1,0,2,6,1,5,0,1,6,68,6,0.06667,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,156,            return;,0,0,0,0,0,1,0,0,1,2,7,5,0.06667,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,159,"        System.arraycopy(seed, 0, v, 0, Math.min(seed.length, v.length));",4,0,0,0,4,0,6,0,0,3,65,5,0.06667,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,161,        if (seed.length < v.length) {,4,1,0,1,3,1,0,0,0,5,29,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,162,            for (int i = seed.length; i < v.length; ++i) {,7,1,0,1,3,2,0,0,1,6,46,6,0.06667,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,163,                final long l = v[i - seed.length];,4,1,1,0,2,2,0,0,1,6,34,8,0.06667,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,164,                v[i] = (int) ((1812433253l * (l ^ (l >> 30)) + i) & 0xffffffffL);,3,5,1,4,12,1,0,0,1,7,65,8,0.06667,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,168,        index = 0;,1,0,0,0,0,0,0,0,1,2,10,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,169,        clear();  // Clear normal deviate cache,0,0,0,1,2,0,1,0,1,4,39,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,170,    },0,0,0,0,1,0,0,0,0,1,1,2,0.06667,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,179,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",2,2,0,1,14,4,1,0,1,7,71,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,180,    },0,0,0,0,1,0,0,0,0,1,1,2,0.06667,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,40,    public BitsStreamGenerator() {,1,0,0,1,3,1,0,0,1,5,30,2,0.06667,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,41,        nextGaussian = Double.NaN;,3,0,0,0,0,0,0,0,1,2,26,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,42,    },0,0,0,0,1,0,0,0,0,1,1,2,0.06667,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,195,        nextGaussian = Double.NaN;,3,0,0,0,0,0,0,0,1,2,26,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,196,    },0,0,0,0,1,0,0,0,0,1,1,2,0.06667,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,132,    public RandomDataGenerator() {,1,0,0,1,3,1,0,0,1,5,30,2,0.06667,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,119,    private RandomGenerator rand = null;,1,0,0,0,0,1,0,1,1,4,36,2,0.06667,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,122,    private RandomGenerator secRand = null;,1,0,0,0,0,1,0,1,1,4,39,2,0.06667,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,133,    },0,0,0,0,1,0,0,0,0,1,1,2,0.06667,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,2,114,    public RandomDataImpl() {,1,0,0,1,3,1,0,0,1,5,25,2,0.06667,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,2,115,        delegate = new RandomDataGenerator();,1,0,0,1,2,1,0,1,2,6,37,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,2,116,    },0,0,0,0,1,0,0,0,0,1,1,2,0.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,2,6134,    private FastMathLiteralArrays() {},1,0,0,1,4,1,0,0,1,5,34,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,2,29,    private static final double[] EXP_INT_A = new double[] {,1,0,0,0,5,6,0,0,3,4,56,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,2,1535,    private static final double[] EXP_INT_B = new double[] {,1,0,0,0,5,6,0,0,3,4,56,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,2,3043,    private static final double[] EXP_FRAC_A = new double[] {,1,0,0,0,5,6,0,0,3,4,57,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,2,4074,    private static final double[] EXP_FRAC_B = new double[] {,1,0,0,0,5,6,0,0,3,4,57,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,2,5103,    private static final double[][] LN_MANT = new double[][] {,1,0,0,0,9,6,0,0,3,4,58,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,2,6142,        return EXP_INT_A.clone();,0,0,0,1,2,1,2,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,2,6150,        return EXP_INT_B.clone();,0,0,0,1,2,1,2,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,2,6158,        return EXP_FRAC_A.clone();,0,0,0,1,2,1,2,0,0,4,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,2,6166,        return EXP_FRAC_B.clone();,0,0,0,1,2,1,2,0,0,4,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,2,6174,        return LN_MANT.clone();,0,0,0,1,2,1,2,0,0,4,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3723,    private static class ExpIntTable {,1,0,0,0,1,3,0,0,2,4,34,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3755,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,1,0,0,1,2,0,2,0,1,5,54,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3756,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,1,0,0,1,2,0,2,0,1,5,54,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3758,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3826,        CodyWaite(double xa) {,2,0,0,1,3,1,0,0,0,4,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3829,            int k = (int)(xa * 0.6366197723675814);,2,1,0,1,4,2,0,0,0,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3835,                double a = -k * 1.570796251296997;,2,1,0,0,0,1,0,0,1,4,34,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3836,                remA = xa + a;,3,1,0,0,0,0,0,0,1,3,14,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3837,                remB = -(remA - xa - a);,4,1,0,1,2,0,0,0,2,5,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3839,                a = -k * 7.549789948768648E-8;,2,1,0,0,0,0,0,0,2,3,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3840,                double b = remA;,2,0,0,0,0,1,0,0,0,2,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3841,                remA = a + b;,3,1,0,0,0,0,0,0,1,3,13,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3842,                remB += -(remA - b - a);,4,1,0,1,2,0,0,0,2,5,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3844,                a = -k * 6.123233995736766E-17;,2,1,0,0,0,0,0,0,2,3,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3845,                b = remA;,2,0,0,0,0,0,0,0,1,2,9,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3846,                remA = a + b;,3,1,0,0,0,0,0,0,1,3,13,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3847,                remB += -(remA - b - a);,4,1,0,1,2,0,0,0,2,5,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3849,                if (remA > 0) {,1,1,0,1,3,1,0,0,0,5,15,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3850,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3856,                --k;,1,0,0,0,0,0,0,0,1,2,4,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3857,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3859,            this.finalK = k;,2,0,0,0,0,1,0,0,1,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3860,            this.finalRemA = remA;,2,0,0,0,0,1,0,0,1,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3861,            this.finalRemB = remB;,2,0,0,0,0,1,0,0,1,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3862,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3868,            return finalK;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3874,            return finalRemA;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3880,            return finalRemB;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3795,    private static class lnMant {,1,0,0,0,1,3,0,0,2,4,29,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3809,                LN_MANT = FastMathLiteralArrays.loadLnMant();,1,0,0,1,2,0,2,0,1,5,45,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3811,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,359,    private FastMath() {},1,0,0,1,4,1,0,0,1,5,21,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,371,        if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN){,6,3,0,1,3,1,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,372,            return d; // These are un-normalised - don't try to convert,1,0,0,0,0,2,0,0,0,2,59,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,374,        long xl = Double.doubleToRawLongBits(d); // can take raw bits because just gonna convert it back,1,0,0,1,2,1,3,0,0,5,96,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,375,        xl = xl & MASK_30BITS; // Drop low order bits,3,1,0,0,0,0,0,0,1,3,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,376,        return Double.longBitsToDouble(xl);,0,0,0,1,2,1,3,0,0,4,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,393,      if (x != x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,394,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,402,      if (x > 20) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,403,          if (x >= LOG_MAX_VALUE) {,2,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,405,              final double t = exp(0.5 * x);,2,1,0,1,2,2,1,0,2,7,30,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,406,              return (0.5 * t) * t;,2,2,0,1,2,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,408,              return 0.5 * exp(x);,0,1,0,1,2,1,2,0,1,6,20,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,410,      } else if (x < -20) {,1,1,0,1,4,2,0,0,1,6,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,411,          if (x <= -LOG_MAX_VALUE) {,2,1,0,1,3,1,0,0,1,6,26,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,413,              final double t = exp(-0.5 * x);,2,1,0,1,2,2,1,0,3,7,31,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,414,              return (0.5 * t) * t;,2,2,0,1,2,1,0,0,0,5,21,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,416,              return 0.5 * exp(-x);,1,1,0,1,2,1,1,0,2,7,21,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,420,      final double hiPrec[] = new double[2];,1,0,0,0,4,4,0,0,1,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,421,      if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,422,          x = -x;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,424,"      exp(x, 0.0, hiPrec);",0,0,0,0,2,0,3,0,1,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,426,      double ya = hiPrec[0] + hiPrec[1];,1,1,1,0,4,1,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,427,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,2,1,1,1,6,1,0,0,1,7,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,429,      double temp = ya * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,430,      double yaa = ya + temp - temp;,4,2,0,0,0,1,0,0,0,3,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,431,      double yab = ya - yaa;,3,1,0,0,0,1,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,434,      double recip = 1.0/ya;,2,1,0,0,0,1,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,435,      temp = recip * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,436,      double recipa = recip + temp - temp;,4,2,0,0,0,1,0,0,0,3,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,437,      double recipb = recip - recipa;,3,1,0,0,0,1,0,0,0,3,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,440,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,10,9,0,1,2,0,0,0,1,5,76,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,442,      recipb += -yb * recip * recip;,4,1,0,0,0,0,0,0,2,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,445,      temp = ya + recipa;,3,1,0,0,0,0,0,0,1,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,446,      yb += -(temp - ya - recipa);,4,1,0,1,2,0,0,0,2,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,447,      ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,448,      temp = ya + recipb;,3,1,0,0,0,0,0,0,1,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,449,      yb += -(temp - ya - recipb);,4,1,0,1,2,0,0,0,2,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,450,      ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,452,      double result = ya + yb;,3,1,0,0,0,1,0,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,453,      result *= 0.5;,1,0,0,0,0,0,0,0,1,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,454,      return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,462,      boolean negate = false;,1,0,0,0,0,1,0,0,1,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,463,      if (x != x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,464,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,472,      if (x > 20) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,473,          if (x >= LOG_MAX_VALUE) {,2,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,475,              final double t = exp(0.5 * x);,2,1,0,1,2,2,1,0,2,7,30,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,476,              return (0.5 * t) * t;,2,2,0,1,2,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,478,              return 0.5 * exp(x);,0,1,0,1,2,1,2,0,1,6,20,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,480,      } else if (x < -20) {,1,1,0,1,4,2,0,0,1,6,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,481,          if (x <= -LOG_MAX_VALUE) {,2,1,0,1,3,1,0,0,1,6,26,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,483,              final double t = exp(-0.5 * x);,2,1,0,1,2,2,1,0,3,7,31,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,484,              return (-0.5 * t) * t;,2,2,0,1,2,1,0,0,1,6,22,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,486,              return -0.5 * exp(-x);,1,1,0,1,2,1,1,0,3,7,22,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,490,      if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,491,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,494,      if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,495,          x = -x;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,496,          negate = true;,1,0,0,0,0,0,0,0,2,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,501,      if (x > 0.25) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,502,          double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,503,"          exp(x, 0.0, hiPrec);",0,0,0,0,2,0,3,0,1,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,505,          double ya = hiPrec[0] + hiPrec[1];,1,1,1,0,4,1,0,0,0,5,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,506,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,2,1,1,1,6,1,0,0,1,7,42,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,508,          double temp = ya * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,509,          double yaa = ya + temp - temp;,4,2,0,0,0,1,0,0,0,3,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,510,          double yab = ya - yaa;,3,1,0,0,0,1,0,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,513,          double recip = 1.0/ya;,2,1,0,0,0,1,0,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,514,          temp = recip * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,515,          double recipa = recip + temp - temp;,4,2,0,0,0,1,0,0,0,3,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,516,          double recipb = recip - recipa;,3,1,0,0,0,1,0,0,0,3,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,519,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,10,9,0,1,2,0,0,0,1,5,76,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,521,          recipb += -yb * recip * recip;,4,1,0,0,0,0,0,0,2,3,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,523,          recipa = -recipa;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,524,          recipb = -recipb;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,527,          temp = ya + recipa;,3,1,0,0,0,0,0,0,1,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,528,          yb += -(temp - ya - recipa);,4,1,0,1,2,0,0,0,2,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,529,          ya = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,530,          temp = ya + recipb;,3,1,0,0,0,0,0,0,1,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,531,          yb += -(temp - ya - recipb);,4,1,0,1,2,0,0,0,2,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,532,          ya = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,534,          result = ya + yb;,3,1,0,0,0,0,0,0,1,3,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,535,          result *= 0.5;,1,0,0,0,0,0,0,0,1,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,536,      },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,538,          double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,539,"          expm1(x, hiPrec);",0,0,0,0,2,0,3,0,1,3,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,541,          double ya = hiPrec[0] + hiPrec[1];,1,1,1,0,4,1,0,0,0,5,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,542,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,2,1,1,1,6,1,0,0,1,7,42,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,545,          double denom = 1.0 + ya;,2,1,0,0,0,1,0,0,0,3,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,546,          double denomr = 1.0 / denom;,2,1,0,0,0,1,0,0,0,3,28,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,547,          double denomb = -(denom - 1.0 - ya) + yb;,4,2,0,1,2,1,0,0,1,6,41,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,548,          double ratio = ya * denomr;,3,1,0,0,0,1,0,0,0,3,27,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,549,          double temp = ratio * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,35,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,550,          double ra = ratio + temp - temp;,4,2,0,0,0,1,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,551,          double rb = ratio - ra;,3,1,0,0,0,1,0,0,0,3,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,553,          temp = denom * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,554,          double za = denom + temp - temp;,4,2,0,0,0,1,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,555,          double zb = denom - za;,3,1,0,0,0,1,0,0,0,3,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,557,          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;,11,9,0,1,2,0,0,0,1,5,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,560,          rb += yb*denomr;                        // numerator,3,1,0,0,0,0,0,0,1,3,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,561,          rb += -ya * denomb * denomr * denomr;   // denominator,5,1,0,0,0,0,0,0,2,3,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,564,          temp = ya + ra;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,565,          yb += -(temp - ya - ra);,4,1,0,1,2,0,0,0,2,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,566,          ya = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,567,          temp = ya + rb;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,568,          yb += -(temp - ya - rb);,4,1,0,1,2,0,0,0,2,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,569,          ya = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,571,          result = ya + yb;,3,1,0,0,0,0,0,0,1,3,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,572,          result *= 0.5;,1,0,0,0,0,0,0,0,1,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,575,      if (negate) {,1,0,0,1,3,1,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,576,          result = -result;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,579,      return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,587,      boolean negate = false;,1,0,0,0,0,1,0,0,1,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,589,      if (x != x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,590,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,599,      if (x > 20.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,600,          return 1.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,603,      if (x < -20) {,1,1,0,1,3,1,0,0,1,6,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,604,          return -1.0;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,607,      if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,608,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,611,      if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,612,          x = -x;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,613,          negate = true;,1,0,0,0,0,0,0,0,2,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,617,      if (x >= 0.5) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,618,          double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,620,"          exp(x*2.0, 0.0, hiPrec);",1,1,0,0,2,0,2,0,1,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,622,          double ya = hiPrec[0] + hiPrec[1];,1,1,1,0,4,1,0,0,0,5,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,623,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,2,1,1,1,6,1,0,0,1,7,42,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,626,          double na = -1.0 + ya;,2,1,0,0,0,1,0,0,1,4,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,627,          double nb = -(na + 1.0 - ya);,3,2,0,1,2,1,0,0,1,6,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,628,          double temp = na + yb;,3,1,0,0,0,1,0,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,629,          nb += -(temp - na - yb);,4,1,0,1,2,0,0,0,2,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,630,          na = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,633,          double da = 1.0 + ya;,2,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,634,          double db = -(da - 1.0 - ya);,3,1,0,1,2,1,0,0,1,6,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,635,          temp = da + yb;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,636,          db += -(temp - da - yb);,4,1,0,1,2,0,0,0,2,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,637,          da = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,639,          temp = da * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,640,          double daa = da + temp - temp;,4,2,0,0,0,1,0,0,0,3,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,641,          double dab = da - daa;,3,1,0,0,0,1,0,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,644,          double ratio = na/da;,3,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,645,          temp = ratio * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,646,          double ratioa = ratio + temp - temp;,4,2,0,0,0,1,0,0,0,3,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,647,          double ratiob = ratio - ratioa;,3,1,0,0,0,1,0,0,0,3,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,650,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,11,9,0,1,2,0,0,0,1,5,72,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,653,          ratiob += nb / da;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,655,          ratiob += -db * na / da / da;,5,3,0,0,0,0,0,0,2,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,657,          result = ratioa + ratiob;,3,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,658,      },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,660,          double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,662,"          expm1(x*2.0, hiPrec);",1,1,0,0,2,0,2,0,1,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,664,          double ya = hiPrec[0] + hiPrec[1];,1,1,1,0,4,1,0,0,0,5,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,665,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,2,1,1,1,6,1,0,0,1,7,42,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,668,          double na = ya;,2,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,669,          double nb = yb;,2,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,672,          double da = 2.0 + ya;,2,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,673,          double db = -(da - 2.0 - ya);,3,1,0,1,2,1,0,0,1,6,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,674,          double temp = da + yb;,3,1,0,0,0,1,0,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,675,          db += -(temp - da - yb);,4,1,0,1,2,0,0,0,2,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,676,          da = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,678,          temp = da * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,679,          double daa = da + temp - temp;,4,2,0,0,0,1,0,0,0,3,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,680,          double dab = da - daa;,3,1,0,0,0,1,0,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,683,          double ratio = na/da;,3,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,684,          temp = ratio * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,685,          double ratioa = ratio + temp - temp;,4,2,0,0,0,1,0,0,0,3,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,686,          double ratiob = ratio - ratioa;,3,1,0,0,0,1,0,0,0,3,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,689,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,11,9,0,1,2,0,0,0,1,5,72,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,692,          ratiob += nb / da;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,694,          ratiob += -db * na / da / da;,5,3,0,0,0,0,0,0,2,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,696,          result = ratioa + ratiob;,3,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,699,      if (negate) {,1,0,0,1,3,1,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,700,          result = -result;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,703,      return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,711,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,3,3,0,2,4,1,4,0,0,6,50,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,719,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,720,        if (a < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,721,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,722,            a = -a;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,726,        if (a > 0.167) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,727,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,4,3,0,2,4,0,4,0,1,6,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,729,            final double a2 = a * a;,3,1,0,0,0,2,0,0,1,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,730,            if (a > 0.097) {,1,1,0,1,3,1,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,731,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,26,17,0,8,16,0,0,0,1,5,212,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,732,            } else if (a > 0.036) {,1,1,0,1,4,2,0,0,0,5,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,733,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,20,13,0,6,12,0,0,0,1,5,160,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,734,            } else if (a > 0.0036) {,1,1,0,1,4,2,0,0,0,5,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,735,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);,14,9,0,4,8,0,0,0,1,5,109,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,737,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);,8,5,0,2,4,0,0,0,1,5,63,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,741,        return negative ? -absAsinh : absAsinh;,3,0,0,0,0,1,0,0,1,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,749,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,750,        if (a < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,751,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,752,            a = -a;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,756,        if (a > 0.15) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,757,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,3,4,0,2,6,0,2,0,1,6,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,759,            final double a2 = a * a;,3,1,0,0,0,2,0,0,1,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,760,            if (a > 0.087) {,1,1,0,1,3,1,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,761,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));,18,17,0,8,16,0,0,0,1,5,141,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,762,            } else if (a > 0.031) {,1,1,0,1,4,2,0,0,0,5,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,763,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));,14,13,0,6,12,0,0,0,1,5,109,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,764,            } else if (a > 0.003) {,1,1,0,1,4,2,0,0,0,5,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,765,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));,10,9,0,4,8,0,0,0,1,5,77,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,767,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));,6,5,0,2,4,0,0,0,1,5,47,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,771,        return negative ? -absAtanh : absAtanh;,3,0,0,0,0,1,0,0,1,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,780,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,3,2,0,2,6,2,0,0,1,6,87,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,789,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,3,2,0,2,6,2,0,0,1,6,91,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,797,"        return nextAfter(a, Double.POSITIVE_INFINITY);",2,0,0,0,2,1,2,0,1,5,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,805,"        return nextAfter(a, Float.POSITIVE_INFINITY);",2,0,0,0,2,1,2,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,813,        return Math.random();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,837,"        return exp(x, 0.0, null);",0,0,0,0,2,1,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,856,        if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,857,            intVal = (int) -x;,2,0,0,1,2,1,0,0,2,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,859,            if (intVal > 746) {,1,1,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,860,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,861,                    hiPrec[0] = 0.0;,0,0,1,0,2,0,0,0,1,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,862,                    hiPrec[1] = 0.0;,0,0,1,0,2,0,0,0,1,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,864,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,867,            if (intVal > 709) {,1,1,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,869,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",2,2,0,0,2,2,3,0,2,6,79,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,870,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,871,                    hiPrec[0] /= 285040095144011776.0;,0,0,1,0,2,0,0,0,1,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,872,                    hiPrec[1] /= 285040095144011776.0;,0,0,1,0,2,0,0,0,1,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,874,                return result;,1,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,877,            if (intVal == 709) {,1,1,0,1,3,1,0,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,879,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",2,2,0,0,2,2,3,0,2,6,79,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,880,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,881,                    hiPrec[0] /= 4.455505956692756620;,0,0,1,0,2,0,0,0,1,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,882,                    hiPrec[1] /= 4.455505956692756620;,0,0,1,0,2,0,0,0,1,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,884,                return result;,1,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,887,            intVal++;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,889,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,5,1,0,0,2,0,0,0,1,4,71,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,890,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,5,1,0,0,2,0,0,0,1,4,71,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,892,            intVal = -intVal;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,894,            intVal = (int) x;,2,0,0,1,2,1,0,0,1,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,896,            if (intVal > 709) {,1,1,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,897,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,898,                    hiPrec[0] = Double.POSITIVE_INFINITY;,2,0,1,0,2,0,0,0,1,4,37,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,899,                    hiPrec[1] = 0.0;,0,0,1,0,2,0,0,0,1,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,901,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,904,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,5,1,0,0,2,0,0,0,1,4,71,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,905,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,5,1,0,0,2,0,0,0,1,4,71,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,912,        final int intFrac = (int) ((x - intVal) * 1024.0);,3,2,0,2,6,3,0,0,1,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,913,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,3,0,1,0,2,2,0,0,1,5,64,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,914,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,3,0,1,0,2,2,0,0,1,5,64,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,920,        final double epsilon = x - (intVal + intFrac / 1024.0);,4,3,0,1,2,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,929,        double z = 0.04168701738764507;,1,0,0,0,0,1,0,0,0,2,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,930,        z = z * epsilon + 0.1666666505023083;,3,2,0,0,0,0,0,0,1,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,931,        z = z * epsilon + 0.5000000000042687;,3,2,0,0,0,0,0,0,1,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,932,        z = z * epsilon + 1.0;,3,2,0,0,0,0,0,0,1,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,933,        z = z * epsilon + -3.940510424527919E-20;,3,2,0,0,0,0,0,0,2,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,940,        double tempA = intPartA * fracPartA;,3,1,0,0,0,1,0,0,0,3,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,941,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,7,5,0,0,0,1,0,0,0,3,82,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,947,        final double tempC = tempB + tempA;,3,1,0,0,0,2,0,0,1,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,949,        if (extra != 0.0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,950,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,10,7,0,0,0,0,0,0,1,3,63,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,952,            result = tempC*z + tempB + tempA;,5,3,0,0,0,0,0,0,1,3,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,955,        if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,957,            hiPrec[0] = tempA;,1,0,1,0,2,0,0,0,1,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,958,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,8,6,1,0,2,0,0,0,1,5,58,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,961,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,969,"      return expm1(x, null);",0,0,0,0,2,1,2,0,1,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,978,        if (x != x || x == 0.0) { // NaN or zero,3,3,0,1,3,1,0,0,0,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,979,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,982,        if (x <= -1.0 || x >= 1.0) {,2,3,0,1,3,1,0,0,1,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,985,            double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,986,"            exp(x, 0.0, hiPrec);",0,0,0,0,2,0,3,0,1,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,987,            if (x > 0.0) {,1,1,0,1,3,1,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,988,                return -1.0 + hiPrec[0] + hiPrec[1];,0,1,1,0,4,1,0,0,1,5,36,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,990,                final double ra = -1.0 + hiPrec[0];,1,1,1,0,2,2,0,0,2,6,35,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,991,                double rb = -(ra + 1.0 - hiPrec[0]);,2,2,1,1,4,1,0,0,1,7,36,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,992,                rb += hiPrec[1];,1,0,1,0,2,0,0,0,1,4,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,993,                return ra + rb;,2,1,0,0,0,1,0,0,0,3,15,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1000,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1002,        if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1003,            x = -x;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1004,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1008,            int intFrac = (int) (x * 1024.0);,2,1,0,1,4,2,0,0,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1009,            double tempA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0;,3,1,1,0,2,1,0,0,0,5,60,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1010,            double tempB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,3,0,1,0,2,1,0,0,0,4,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1012,            double temp = tempA + tempB;,3,1,0,0,0,1,0,0,0,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1013,            tempB = -(temp - tempA - tempB);,4,1,0,1,2,0,0,0,2,5,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1014,            tempA = temp;,2,0,0,0,0,0,0,0,1,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1016,            temp = tempA * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1017,            baseA = tempA + temp - temp;,4,2,0,0,0,0,0,0,1,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1018,            baseB = tempB + (tempA - baseA);,4,2,0,1,2,0,0,0,1,5,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1020,            epsilon = x - intFrac/1024.0;,3,2,0,0,0,0,0,0,1,3,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1025,        double zb = 0.008336750013465571;,1,0,0,0,0,1,0,0,0,2,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1026,        zb = zb * epsilon + 0.041666663879186654;,3,2,0,0,0,0,0,0,1,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1027,        zb = zb * epsilon + 0.16666666666745392;,3,2,0,0,0,0,0,0,1,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1028,        zb = zb * epsilon + 0.49999999999999994;,3,2,0,0,0,0,0,0,1,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1029,        zb = zb * epsilon;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1030,        zb = zb * epsilon;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1032,        double za = epsilon;,2,0,0,0,0,1,0,0,0,2,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1033,        double temp = za + zb;,3,1,0,0,0,1,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1034,        zb = -(temp - za - zb);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1035,        za = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1037,        temp = za * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1038,        temp = za + temp - temp;,4,2,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1039,        zb += za - temp;,3,1,0,0,0,0,0,0,1,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1040,        za = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1043,        double ya = za * baseA;,3,1,0,0,0,1,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1045,        temp = ya + za * baseB;,4,2,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1046,        double yb = -(temp - ya - za * baseB);,5,2,0,1,2,1,0,0,1,6,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1047,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1049,        temp = ya + zb * baseA;,4,2,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1050,        yb += -(temp - ya - zb * baseA);,5,2,0,1,2,0,0,0,2,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1051,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1053,        temp = ya + zb * baseB;,4,2,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1054,        yb += -(temp - ya - zb*baseB);,5,2,0,1,2,0,0,0,2,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1055,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1059,        temp = ya + baseA;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1060,        yb += -(temp - baseA - ya);,4,1,0,1,2,0,0,0,2,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1061,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1063,        temp = ya + za;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1065,        yb += -(temp - ya - za);,4,1,0,1,2,0,0,0,2,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1066,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1068,        temp = ya + baseB;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1070,        yb += -(temp - ya - baseB);,4,1,0,1,2,0,0,0,2,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1071,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1073,        temp = ya + zb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1075,        yb += -(temp - ya - zb);,4,1,0,1,2,0,0,0,2,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1076,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1078,        if (negative) {,1,0,0,1,3,1,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1080,            double denom = 1.0 + ya;,2,1,0,0,0,1,0,0,0,3,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1081,            double denomr = 1.0 / denom;,2,1,0,0,0,1,0,0,0,3,28,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1082,            double denomb = -(denom - 1.0 - ya) + yb;,4,2,0,1,2,1,0,0,1,6,41,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1083,            double ratio = ya * denomr;,3,1,0,0,0,1,0,0,0,3,27,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1084,            temp = ratio * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1085,            final double ra = ratio + temp - temp;,4,2,0,0,0,2,0,0,1,4,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1086,            double rb = ratio - ra;,3,1,0,0,0,1,0,0,0,3,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1088,            temp = denom * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1089,            za = denom + temp - temp;,4,2,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1090,            zb = denom - za;,3,1,0,0,0,0,0,0,1,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1092,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,11,9,0,1,2,0,0,0,1,5,60,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1103,            rb += yb * denomr;                      // numerator,3,1,0,0,0,0,0,0,1,3,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1104,            rb += -ya * denomb * denomr * denomr;   // denominator,5,1,0,0,0,0,0,0,2,3,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1107,            ya = -ra;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1108,            yb = -rb;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1111,        if (hiPrecOut != null) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1112,            hiPrecOut[0] = ya;,1,0,1,0,2,0,0,0,1,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1113,            hiPrecOut[1] = yb;,1,0,1,0,2,0,0,0,1,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1116,        return ya + yb;,2,1,0,0,0,1,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1126,"        return log(x, null);",0,0,0,0,2,1,2,0,1,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1136,        if (x==0) { // Handle special case of +0/-0,1,1,0,1,3,2,0,0,0,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1137,            return Double.NEGATIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1139,        long bits = Double.doubleToRawLongBits(x);,1,0,0,1,2,1,3,0,0,5,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1142,        if (((bits & 0x8000000000000000L) != 0 || x != x) && x != 0.0) {,4,6,0,3,7,1,0,0,0,5,64,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1143,            if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1144,                hiPrec[0] = Double.NaN;,2,0,1,0,2,0,0,0,1,4,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1147,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1151,        if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1152,            if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1153,                hiPrec[0] = Double.POSITIVE_INFINITY;,2,0,1,0,2,0,0,0,1,4,37,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1156,            return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1160,        int exp = (int)(bits >> 52)-1023;,2,2,0,1,4,2,0,0,0,5,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1162,        if ((bits & 0x7ff0000000000000L) == 0) {,1,2,0,2,5,1,0,0,0,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1164,            if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1166,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1167,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,2,0,1,0,2,0,0,0,1,4,37,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1170,                return Double.NEGATIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1174,            bits <<= 1;,1,0,0,0,0,0,0,0,1,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1175,            while ( (bits & 0x0010000000000000L) == 0) {,1,2,0,2,5,1,0,0,0,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1176,                --exp;,1,0,0,0,0,0,0,0,1,2,6,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1177,                bits <<= 1;,1,0,0,0,0,0,0,0,1,2,11,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1182,        if ((exp == -1 || exp == 0) && x < 1.01 && x > 0.99 && hiPrec == null) {,5,9,0,2,5,1,0,0,1,6,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1187,            double xa = x - 1.0;,2,1,0,0,0,1,0,0,0,3,20,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1188,            double xb = xa - x + 1.0;,3,2,0,0,0,1,0,0,0,3,25,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1189,            double tmp = xa * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1190,            double aa = xa + tmp - tmp;,4,2,0,0,0,1,0,0,0,3,27,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1191,            double ab = xa - aa;,3,1,0,0,0,1,0,0,0,3,20,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1192,            xa = aa;,2,0,0,0,0,0,0,0,1,2,8,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1193,            xb = ab;,2,0,0,0,0,0,0,0,1,2,8,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1195,            final double[] lnCoef_last = LN_QUICK_COEF[LN_QUICK_COEF.length - 1];,3,1,1,0,4,2,0,0,1,6,69,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1196,            double ya = lnCoef_last[0];,1,0,1,0,2,1,0,0,0,4,27,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1197,            double yb = lnCoef_last[1];,1,0,1,0,2,1,0,0,0,4,27,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1199,            for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,5,2,0,1,3,2,0,0,1,6,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1201,                aa = ya * xa;,3,1,0,0,0,0,0,0,1,3,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1202,                ab = ya * xb + yb * xa + yb * xb;,7,5,0,0,0,0,0,0,1,3,33,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1204,                tmp = aa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1205,                ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1206,                yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1209,                final double[] lnCoef_i = LN_QUICK_COEF[i];,1,0,1,0,4,2,0,0,1,5,43,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1210,                aa = ya + lnCoef_i[0];,2,1,1,0,2,0,0,0,1,5,22,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1211,                ab = yb + lnCoef_i[1];,2,1,1,0,2,0,0,0,1,5,22,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1213,                tmp = aa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1214,                ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1215,                yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1219,            aa = ya * xa;,3,1,0,0,0,0,0,0,1,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1220,            ab = ya * xb + yb * xa + yb * xb;,7,5,0,0,0,0,0,0,1,3,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1222,            tmp = aa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1223,            ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1224,            yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1226,            return ya + yb;,2,1,0,0,0,1,0,0,0,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1230,        final double[] lnm = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,4,2,0,2,10,3,0,0,1,6,79,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1241,        final double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,4,4,0,2,6,2,0,0,1,6,95,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1243,        double lnza = 0.0;,1,0,0,0,0,1,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1244,        double lnzb = 0.0;,1,0,0,0,0,1,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1246,        if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1248,            double tmp = epsilon * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1249,            double aa = epsilon + tmp - tmp;,4,2,0,0,0,1,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1250,            double ab = epsilon - aa;,3,1,0,0,0,1,0,0,0,3,25,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1251,            double xa = aa;,2,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1252,            double xb = ab;,2,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1255,            final double numer = bits & 0x3ffffffffffL;,2,1,0,0,0,2,0,0,1,4,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1256,            final double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,3,2,0,1,2,2,0,0,1,6,65,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1257,            aa = numer - xa*denom - xb * denom;,6,4,0,0,0,0,0,0,1,3,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1258,            xb += aa / denom;,3,1,0,0,0,0,0,0,1,3,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1261,            final double[] lnCoef_last = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];,3,1,1,0,4,2,0,0,1,6,71,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1262,            double ya = lnCoef_last[0];,1,0,1,0,2,1,0,0,0,4,27,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1263,            double yb = lnCoef_last[1];,1,0,1,0,2,1,0,0,0,4,27,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1265,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,5,2,0,1,3,2,0,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1267,                aa = ya * xa;,3,1,0,0,0,0,0,0,1,3,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1268,                ab = ya * xb + yb * xa + yb * xb;,7,5,0,0,0,0,0,0,1,3,33,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1270,                tmp = aa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1271,                ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1272,                yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1275,                final double[] lnCoef_i = LN_HI_PREC_COEF[i];,1,0,1,0,4,2,0,0,1,5,45,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1276,                aa = ya + lnCoef_i[0];,2,1,1,0,2,0,0,0,1,5,22,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1277,                ab = yb + lnCoef_i[1];,2,1,1,0,2,0,0,0,1,5,22,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1279,                tmp = aa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1280,                ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1281,                yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1285,            aa = ya * xa;,3,1,0,0,0,0,0,0,1,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1286,            ab = ya * xb + yb * xa + yb * xb;,7,5,0,0,0,0,0,0,1,3,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1294,            lnza = aa + ab;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1295,            lnzb = -(lnza - aa - ab);,4,1,0,1,2,0,0,0,2,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1296,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1299,            lnza = -0.16624882440418567;,1,0,0,0,0,0,0,0,2,2,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1300,            lnza = lnza * epsilon + 0.19999954120254515;,3,2,0,0,0,0,0,0,1,3,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1301,            lnza = lnza * epsilon + -0.2499999997677497;,3,2,0,0,0,0,0,0,2,3,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1302,            lnza = lnza * epsilon + 0.3333333333332802;,3,2,0,0,0,0,0,0,1,3,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1303,            lnza = lnza * epsilon + -0.5;,3,2,0,0,0,0,0,0,2,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1304,            lnza = lnza * epsilon + 1.0;,3,2,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1305,            lnza = lnza * epsilon;,3,1,0,0,0,0,0,0,1,3,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1322,        double a = LN_2_A*exp;,3,1,0,0,0,1,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1323,        double b = 0.0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1324,        double c = a+lnm[0];,2,1,1,0,2,1,0,0,0,5,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1325,        double d = -(c-a-lnm[0]);,3,1,1,1,4,1,0,0,1,7,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1326,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1327,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1329,        c = a + lnza;,3,1,0,0,0,0,0,0,1,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1330,        d = -(c - a - lnza);,4,1,0,1,2,0,0,0,2,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1331,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1332,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1334,        c = a + LN_2_B*exp;,4,2,0,0,0,0,0,0,1,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1335,        d = -(c - a - LN_2_B*exp);,5,2,0,1,2,0,0,0,2,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1336,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1337,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1339,        c = a + lnm[1];,2,1,1,0,2,0,0,0,1,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1340,        d = -(c - a - lnm[1]);,3,1,1,1,4,0,0,0,2,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1341,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1342,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1344,        c = a + lnzb;,3,1,0,0,0,0,0,0,1,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1345,        d = -(c - a - lnzb);,4,1,0,1,2,0,0,0,2,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1346,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1347,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1349,        if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1350,            hiPrec[0] = a;,1,0,1,0,2,0,0,0,1,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1351,            hiPrec[1] = b;,1,0,1,0,2,0,0,0,1,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1354,        return a + b;,2,1,0,0,0,1,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1364,        if (x == -1) {,1,1,0,1,3,1,0,0,1,6,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1365,            return Double.NEGATIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1368,        if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1369,            return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1372,        if (x > 1e-6 ||,1,2,0,0,1,1,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1374,            final double xpa = 1 + x;,2,1,0,0,0,2,0,0,1,4,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1375,            final double xpb = -(xpa - 1 - x);,3,1,0,1,2,2,0,0,2,6,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1377,            final double[] hiPrec = new double[2];,1,0,0,0,4,4,0,0,1,4,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1378,"            final double lores = log(xpa, hiPrec);",1,0,0,0,2,2,3,0,2,5,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1379,            if (Double.isInfinite(lores)) { // Don't allow this to be converted to NaN,0,0,0,2,5,2,3,0,0,4,74,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1380,                return lores;,1,0,0,0,0,1,0,0,0,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1385,            final double fx1 = xpb / xpa;,3,1,0,0,0,2,0,0,1,4,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1386,            final double epsilon = 0.5 * fx1 + 1;,2,2,0,0,0,2,0,0,1,4,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1387,            return epsilon * fx1 + hiPrec[1] + hiPrec[0];,2,3,1,0,4,1,0,0,0,5,45,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1390,            final double y = (x * F_1_3 - F_1_2) * x + 1;,5,4,0,1,2,2,0,0,1,6,45,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1391,            return y * x;,2,1,0,0,0,1,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1400,        final double hiPrec[] = new double[2];,1,0,0,0,4,4,0,0,1,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1402,"        final double lores = log(x, hiPrec);",1,0,0,0,2,2,3,0,2,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1403,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0,0,0,2,5,2,3,0,0,4,73,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1404,            return lores;,1,0,0,0,0,1,0,0,0,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1407,        final double tmp = hiPrec[0] * HEX_40000000;,2,1,1,0,2,2,0,0,1,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1408,        final double lna = hiPrec[0] + tmp - tmp;,3,2,1,0,2,2,0,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1409,        final double lnb = hiPrec[0] - lna + hiPrec[1];,2,2,1,0,4,2,0,0,1,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1411,        final double rln10a = 0.4342944622039795;,1,0,0,0,0,2,0,0,1,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1412,        final double rln10b = 1.9699272335463627E-8;,1,0,0,0,0,2,0,0,1,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1414,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,8,7,0,0,0,1,0,0,0,3,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1434,        return log(x) / log(base);,0,1,0,1,4,1,4,0,2,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1445,        final double lns[] = new double[2];,1,0,0,0,4,4,0,0,1,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1447,        if (y == 0.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1448,            return 1.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1451,        if (x != x) { // X is NaN,2,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1452,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1456,        if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1457,            long bits = Double.doubleToRawLongBits(x);,1,0,0,1,2,1,3,0,0,5,42,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1458,            if ((bits & 0x8000000000000000L) != 0) {,1,2,0,2,5,1,0,0,0,5,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1460,                long yi = (long) y;,2,0,0,1,2,2,0,0,0,4,19,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1462,                if (y < 0 && y == yi && (yi & 1) == 1) {,4,6,0,2,5,1,0,0,0,5,40,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1463,                    return Double.NEGATIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1466,                if (y > 0 && y == yi && (yi & 1) == 1) {,4,6,0,2,5,1,0,0,0,5,40,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1467,                    return -0.0;,0,0,0,0,0,1,0,0,1,2,12,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1471,            if (y < 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1472,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1474,            if (y > 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1475,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1478,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1481,        if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1482,            if (y != y) { // y is NaN,2,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1483,                return y;,1,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1485,            if (y < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1486,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1488,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1492,        if (y == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1493,            if (x * x == 1.0) {,2,2,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1494,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1497,            if (x * x > 1.0) {,2,2,0,1,3,1,0,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1498,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1500,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1504,        if (x == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1505,            if (y != y) { // y is NaN,2,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1506,                return y;,1,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1509,            if (y < 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1510,                long yi = (long) y;,2,0,0,1,2,2,0,0,0,4,19,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1511,                if (y == yi && (yi & 1) == 1) {,3,4,0,2,5,1,0,0,0,5,31,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1512,                    return -0.0;,0,0,0,0,0,1,0,0,1,2,12,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1515,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1518,            if (y > 0)  {,1,1,0,1,3,1,0,0,0,5,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1519,                long yi = (long) y;,2,0,0,1,2,2,0,0,0,4,19,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1520,                if (y == yi && (yi & 1) == 1) {,3,4,0,2,5,1,0,0,0,5,31,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1521,                    return Double.NEGATIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1524,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1528,        if (y == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1530,            if (x * x == 1.0) {,2,2,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1531,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1534,            if (x * x < 1.0) {,2,2,0,1,3,1,0,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1535,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1537,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1542,        if (x < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1544,            if (y >= TWO_POWER_53 || y <= -TWO_POWER_53) {,4,3,0,1,3,1,0,0,1,6,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1545,"                return pow(-x, y);",1,0,0,0,2,1,2,0,2,5,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1548,            if (y == (long) y) {,2,1,0,2,5,2,0,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1550,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",3,2,0,2,8,2,4,0,5,7,53,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1552,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1559,        if (y < 8e298 && y > -8e298) {,2,3,0,1,3,1,0,0,1,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1560,            double tmp1 = y * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1561,            ya = y + tmp1 - tmp1;,4,2,0,0,0,0,0,0,1,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1562,            yb = y - ya;,3,1,0,0,0,0,0,0,1,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1563,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1564,            double tmp1 = y * 9.31322574615478515625E-10;,2,1,0,0,0,1,0,0,0,3,45,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1565,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,2,1,0,0,0,1,0,0,0,3,48,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1566,            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;,6,3,0,1,2,0,0,0,1,5,56,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1567,            yb = y - ya;,3,1,0,0,0,0,0,0,1,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1571,"        final double lores = log(x, lns);",1,0,0,0,2,2,3,0,2,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1572,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0,0,0,2,5,2,3,0,0,4,73,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1573,            return lores;,1,0,0,0,0,1,0,0,0,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1576,        double lna = lns[0];,1,0,1,0,2,1,0,0,0,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1577,        double lnb = lns[1];,1,0,1,0,2,1,0,0,0,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1580,        double tmp1 = lna * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1581,        double tmp2 = lna + tmp1 - tmp1;,4,2,0,0,0,1,0,0,0,3,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1582,        lnb += lna - tmp2;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1583,        lna = tmp2;,2,0,0,0,0,0,0,0,1,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1586,        final double aa = lna * ya;,3,1,0,0,0,2,0,0,1,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1587,        final double ab = lna * yb + lnb * ya + lnb * yb;,7,5,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1589,        lna = aa+ab;,3,1,0,0,0,0,0,0,1,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1590,        lnb = -(lna - aa - ab);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1592,        double z = 1.0 / 120.0;,1,1,0,0,0,1,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1593,        z = z * lnb + (1.0 / 24.0);,3,3,0,1,2,0,0,0,1,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1594,        z = z * lnb + (1.0 / 6.0);,3,3,0,1,2,0,0,0,1,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1595,        z = z * lnb + 0.5;,3,2,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1596,        z = z * lnb + 1.0;,3,2,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1597,        z = z * lnb;,3,1,0,0,0,0,0,0,1,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1599,"        final double result = exp(lna, z, null);",1,0,0,0,2,2,3,0,2,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1601,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1615,        if (e == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1616,            return 1.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1617,        } else if (e < 0) {,1,1,0,1,4,2,0,0,0,5,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1618,            e = -e;,2,0,0,0,0,0,0,0,2,2,7,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1619,            d = 1.0 / d;,2,1,0,0,0,0,0,0,1,3,12,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1624,        final int splitFactor = 0x8000001;,1,0,0,0,0,2,0,0,1,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1625,        final double cd       = splitFactor * d;,3,1,0,0,0,2,0,0,1,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1626,        final double d1High   = cd - (cd - d);,4,2,0,1,2,2,0,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1627,        final double d1Low    = d - d1High;,3,1,0,0,0,2,0,0,1,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1630,        double resultHigh = 1;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1631,        double resultLow  = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1634,        double d2p     = d;,2,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1635,        double d2pHigh = d1High;,2,0,0,0,0,1,0,0,0,2,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1636,        double d2pLow  = d1Low;,2,0,0,0,0,1,0,0,0,2,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1638,        while (e != 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1640,            if ((e & 0x1) != 0) {,1,2,0,2,5,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1643,                final double tmpHigh = resultHigh * d2p;,3,1,0,0,0,2,0,0,1,4,40,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1644,                final double cRH     = splitFactor * resultHigh;,3,1,0,0,0,2,0,0,1,4,48,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1645,                final double rHH     = cRH - (cRH - resultHigh);,4,2,0,1,2,2,0,0,1,6,48,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1646,                final double rHL     = resultHigh - rHH;,3,1,0,0,0,2,0,0,1,4,40,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1647,                final double tmpLow  = rHL * d2pLow - (((tmpHigh - rHH * d2pHigh) - rHL * d2pHigh) - rHH * d2pLow);,10,8,0,3,6,2,0,0,1,6,99,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1648,                resultHigh = tmpHigh;,2,0,0,0,0,0,0,0,1,2,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1649,                resultLow  = resultLow * d2p + tmpLow;,4,2,0,0,0,0,0,0,1,3,38,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1654,            final double tmpHigh = d2pHigh * d2p;,3,1,0,0,0,2,0,0,1,4,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1655,            final double cD2pH   = splitFactor * d2pHigh;,3,1,0,0,0,2,0,0,1,4,45,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1656,            final double d2pHH   = cD2pH - (cD2pH - d2pHigh);,4,2,0,1,2,2,0,0,1,6,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1657,            final double d2pHL   = d2pHigh - d2pHH;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1658,            final double tmpLow  = d2pHL * d2pLow - (((tmpHigh - d2pHH * d2pHigh) - d2pHL * d2pHigh) - d2pHH * d2pLow);,10,8,0,3,6,2,0,0,1,6,107,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1659,            final double cTmpH   = splitFactor * tmpHigh;,3,1,0,0,0,2,0,0,1,4,45,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1660,            d2pHigh = cTmpH - (cTmpH - tmpHigh);,4,2,0,1,2,0,0,0,1,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1661,            d2pLow  = d2pLow * d2p + tmpLow + (tmpHigh - d2pHigh);,6,4,0,1,2,0,0,0,1,5,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1662,            d2p     = d2pHigh + d2pLow;,3,1,0,0,0,0,0,0,1,3,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1664,            e = e >> 1;,2,1,0,0,0,0,0,0,1,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1666,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1668,        return resultHigh + resultLow;,2,1,0,0,0,1,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1680,        double x2 = x*x;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1682,        double p = 2.7553817452272217E-6;,1,0,0,0,0,1,0,0,0,2,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1683,        p = p * x2 + -1.9841269659586505E-4;,3,2,0,0,0,0,0,0,2,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1684,        p = p * x2 + 0.008333333333329196;,3,2,0,0,0,0,0,0,1,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1685,        p = p * x2 + -0.16666666666666666;,3,2,0,0,0,0,0,0,2,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1688,        p = p * x2 * x;,4,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1690,        return p;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1700,        double x2 = x*x;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1702,        double p = 2.479773539153719E-5;,1,0,0,0,0,1,0,0,0,2,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1703,        p = p * x2 + -0.0013888888689039883;,3,2,0,0,0,0,0,0,2,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1704,        p = p * x2 + 0.041666666666621166;,3,2,0,0,0,0,0,0,1,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1705,        p = p * x2 + -0.49999999999999994;,3,2,0,0,0,0,0,0,2,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1706,        p *= x2;,2,0,0,0,0,0,0,0,1,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1708,        return p;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1719,        int idx = (int) ((xa * 8.0) + 0.5);,2,2,0,2,6,2,0,0,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1720,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,2,1,1,0,2,2,0,0,1,6,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1723,        final double sintA = SINE_TABLE_A[idx];,1,0,1,0,2,2,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1724,        final double sintB = SINE_TABLE_B[idx];,1,0,1,0,2,2,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1725,        final double costA = COSINE_TABLE_A[idx];,1,0,1,0,2,2,0,0,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1726,        final double costB = COSINE_TABLE_B[idx];,1,0,1,0,2,2,0,0,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1729,        double sinEpsA = epsilon;,2,0,0,0,0,1,0,0,0,2,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1730,        double sinEpsB = polySine(epsilon);,1,0,0,1,2,1,2,0,1,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1731,        final double cosEpsA = 1.0;,1,0,0,0,0,2,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1732,        final double cosEpsB = polyCosine(epsilon);,1,0,0,1,2,2,2,0,2,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1735,        final double temp = sinEpsA * HEX_40000000;,3,1,0,0,0,2,0,0,1,4,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1736,        double temp2 = (sinEpsA + temp) - temp;,4,2,0,1,2,1,0,0,0,5,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1737,        sinEpsB +=  sinEpsA - temp2;,3,1,0,0,0,0,0,0,1,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1738,        sinEpsA = temp2;,2,0,0,0,0,0,0,0,1,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1764,        double a = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1765,        double b = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1767,        double t = sintA;,2,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1768,        double c = a + t;,3,1,0,0,0,1,0,0,0,3,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1769,        double d = -(c - a - t);,4,1,0,1,2,1,0,0,1,6,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1770,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1771,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1773,        t = costA * sinEpsA;,3,1,0,0,0,0,0,0,1,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1774,        c = a + t;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1775,        d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1776,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1777,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1779,        b = b + sintA * cosEpsB + costA * sinEpsB;,6,4,0,0,0,0,0,0,1,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1794,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,9,6,0,0,0,0,0,0,1,3,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1821,        if (xb != 0.0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1822,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,5,5,0,1,5,0,0,0,1,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1824,            c = a + t;,3,1,0,0,0,0,0,0,1,3,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1825,            d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1826,            a = c;,2,0,0,0,0,0,0,0,1,2,6,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1827,            b = b + d;,3,1,0,0,0,0,0,0,1,3,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1830,        result = a + b;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1832,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1843,        final double pi2a = 1.5707963267948966;,1,0,0,0,0,2,0,0,1,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1844,        final double pi2b = 6.123233995736766E-17;,1,0,0,0,0,2,0,0,1,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1846,        final double a = pi2a - xa;,3,1,0,0,0,2,0,0,1,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1847,        double b = -(a - pi2a + xa);,4,2,0,1,2,1,0,0,1,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1848,        b += pi2b - xb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1850,"        return sinQ(a, b);",0,0,0,0,2,1,3,0,1,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1863,        int idx = (int) ((xa * 8.0) + 0.5);,2,2,0,2,6,2,0,0,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1864,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,2,1,1,0,2,2,0,0,1,6,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1867,        final double sintA = SINE_TABLE_A[idx];,1,0,1,0,2,2,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1868,        final double sintB = SINE_TABLE_B[idx];,1,0,1,0,2,2,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1869,        final double costA = COSINE_TABLE_A[idx];,1,0,1,0,2,2,0,0,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1870,        final double costB = COSINE_TABLE_B[idx];,1,0,1,0,2,2,0,0,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1873,        double sinEpsA = epsilon;,2,0,0,0,0,1,0,0,0,2,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1874,        double sinEpsB = polySine(epsilon);,1,0,0,1,2,1,2,0,1,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1875,        final double cosEpsA = 1.0;,1,0,0,0,0,2,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1876,        final double cosEpsB = polyCosine(epsilon);,1,0,0,1,2,2,2,0,2,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1879,        double temp = sinEpsA * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1880,        double temp2 = (sinEpsA + temp) - temp;,4,2,0,1,2,1,0,0,0,5,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1881,        sinEpsB +=  sinEpsA - temp2;,3,1,0,0,0,0,0,0,1,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1882,        sinEpsA = temp2;,2,0,0,0,0,0,0,0,1,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1907,        double a = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1908,        double b = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1911,        double t = sintA;,2,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1912,        double c = a + t;,3,1,0,0,0,1,0,0,0,3,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1913,        double d = -(c - a - t);,4,1,0,1,2,1,0,0,1,6,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1914,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1915,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1917,        t = costA*sinEpsA;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1918,        c = a + t;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1919,        d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1920,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1921,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1923,        b = b + sintA*cosEpsB + costA*sinEpsB;,6,4,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1924,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,9,6,0,0,0,0,0,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1926,        double sina = a + b;,3,1,0,0,0,1,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1927,        double sinb = -(sina - a - b);,4,1,0,1,2,1,0,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1931,        a = b = c = d = 0.0;,4,0,0,0,0,0,0,0,4,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1933,        t = costA*cosEpsA;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1934,        c = a + t;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1935,        d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1936,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1937,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1939,        t = -sintA*sinEpsA;,3,1,0,0,0,0,0,0,2,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1940,        c = a + t;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1941,        d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1942,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1943,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1945,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,8,6,0,0,0,0,0,0,1,3,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1946,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,8,6,0,1,2,0,0,0,1,5,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1948,        double cosa = a + b;,3,1,0,0,0,1,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1949,        double cosb = -(cosa - a - b);,4,1,0,1,2,1,0,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1951,        if (cotanFlag) {,1,0,0,1,3,1,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1953,            tmp = cosa; cosa = sina; sina = tmp;,6,0,0,0,0,0,0,0,3,2,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1954,            tmp = cosb; cosb = sinb; sinb = tmp;,6,0,0,0,0,0,0,0,3,2,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1968,        double est = sina/cosa;,3,1,0,0,0,1,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1971,        temp = est * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1972,        double esta = (est + temp) - temp;,4,2,0,1,2,1,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1973,        double estb =  est - esta;,3,1,0,0,0,1,0,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1975,        temp = cosa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1976,        double cosaa = (cosa + temp) - temp;,4,2,0,1,2,1,0,0,0,5,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1977,        double cosab =  cosa - cosaa;,3,1,0,0,0,1,0,0,0,3,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1980,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,11,9,0,1,2,2,0,0,0,5,114,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1981,        err += sinb/cosa;                     // Change in est due to sinb,3,1,0,0,0,0,0,0,1,3,66,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1982,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,5,3,0,0,0,0,0,0,2,3,66,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1984,        if (xb != 0.0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1987,            double xbadj = xb + est*est*xb;,5,2,0,0,0,1,0,0,0,3,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1988,            if (cotanFlag) {,1,0,0,1,3,1,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1989,                xbadj = -xbadj;,2,0,0,0,0,0,0,0,2,2,15,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1992,            err += xbadj;,2,0,0,0,0,0,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,1995,        return est+err;,2,1,0,0,0,1,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2012,        long inbits = Double.doubleToRawLongBits(x);,1,0,0,1,2,1,3,0,0,5,44,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2013,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,2,3,0,2,6,2,0,0,0,5,53,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2016,        inbits &= 0x000fffffffffffffL;,1,0,0,0,0,0,0,0,1,2,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2017,        inbits |= 0x0010000000000000L;,1,0,0,0,0,0,0,0,1,2,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2020,        exponent++;,1,0,0,0,0,0,0,0,1,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2021,        inbits <<= 11;,1,0,0,0,0,0,0,0,1,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2027,        int idx = exponent >> 6;,2,1,0,0,0,1,0,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2028,        int shift = exponent - (idx << 6);,3,2,0,1,2,1,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2030,        if (shift != 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2031,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,4,3,1,1,6,0,0,0,1,6,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2032,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,2,2,1,1,4,0,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2033,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,4,5,1,2,10,0,0,0,1,6,70,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2034,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,5,6,1,2,10,0,0,0,1,6,72,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2036,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,3,2,1,1,4,0,0,0,1,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2037,            shpiA = RECIP_2PI[idx];,1,0,1,0,2,0,0,0,1,4,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2038,            shpiB = RECIP_2PI[idx+1];,2,1,1,0,2,0,0,0,1,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2042,        long a = inbits >>> 32;,2,1,0,0,0,1,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2043,        long b = inbits & 0xffffffffL;,2,1,0,0,0,1,0,0,0,3,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2045,        long c = shpiA >>> 32;,2,1,0,0,0,1,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2046,        long d = shpiA & 0xffffffffL;,2,1,0,0,0,1,0,0,0,3,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2048,        long ac = a * c;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2049,        long bd = b * d;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2050,        long bc = b * c;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2051,        long ad = a * d;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2053,        long prodB = bd + (ad << 32);,3,2,0,1,2,1,0,0,0,5,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2054,        long prodA = ac + (ad >>> 32);,3,2,0,1,2,1,0,0,0,5,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2056,        boolean bita = (bd & 0x8000000000000000L) != 0;,2,2,0,1,2,1,0,0,0,5,47,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2057,        boolean bitb = (ad & 0x80000000L ) != 0;,2,2,0,1,2,1,0,0,0,5,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2058,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,2,2,0,1,2,1,0,0,0,5,52,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2061,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2063,            prodA++;,1,0,0,0,0,0,0,0,1,2,8,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2066,        bita = (prodB & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2067,        bitb = (bc & 0x80000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2069,        prodB = prodB + (bc << 32);,3,2,0,1,2,0,0,0,1,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2070,        prodA = prodA + (bc >>> 32);,3,2,0,1,2,0,0,0,1,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2072,        bitsum = (prodB & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2075,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2077,            prodA++;,1,0,0,0,0,0,0,0,1,2,8,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2081,        c = shpiB >>> 32;,2,1,0,0,0,0,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2082,        d = shpiB & 0xffffffffL;,2,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2083,        ac = a * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2084,        bc = b * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2085,        ad = a * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2088,        ac = ac + ((bc + ad) >>> 32);,4,3,0,2,4,0,0,0,1,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2090,        bita = (prodB & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2091,        bitb = (ac & 0x8000000000000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2092,        prodB += ac;,2,0,0,0,0,0,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2093,        bitsum = (prodB & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2095,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2097,            prodA++;,1,0,0,0,0,0,0,0,1,2,8,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2101,        c = shpi0 >>> 32;,2,1,0,0,0,0,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2102,        d = shpi0 & 0xffffffffL;,2,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2104,        bd = b * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2105,        bc = b * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2106,        ad = a * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2108,        prodA += bd + ((bc + ad) << 32);,4,3,0,2,4,0,0,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2120,        int intPart = (int)(prodA >>> 62);,2,1,0,1,4,2,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2123,        prodA <<= 2;,1,0,0,0,0,0,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2124,        prodA |= prodB >>> 62;,2,1,0,0,0,0,0,0,1,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2125,        prodB <<= 2;,1,0,0,0,0,0,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2128,        a = prodA >>> 32;,2,1,0,0,0,0,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2129,        b = prodA & 0xffffffffL;,2,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2131,        c = PI_O_4_BITS[0] >>> 32;,1,1,1,0,2,0,0,0,1,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2132,        d = PI_O_4_BITS[0] & 0xffffffffL;,1,1,1,0,2,0,0,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2134,        ac = a * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2135,        bd = b * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2136,        bc = b * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2137,        ad = a * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2139,        long prod2B = bd + (ad << 32);,3,2,0,1,2,1,0,0,0,5,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2140,        long prod2A = ac + (ad >>> 32);,3,2,0,1,2,1,0,0,0,5,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2142,        bita = (bd & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2143,        bitb = (ad & 0x80000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2144,        bitsum = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2147,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2149,            prod2A++;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2152,        bita = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2153,        bitb = (bc & 0x80000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2155,        prod2B = prod2B + (bc << 32);,3,2,0,1,2,0,0,0,1,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2156,        prod2A = prod2A + (bc >>> 32);,3,2,0,1,2,0,0,0,1,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2158,        bitsum = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2161,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2163,            prod2A++;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2167,        c = PI_O_4_BITS[1] >>> 32;,1,1,1,0,2,0,0,0,1,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2168,        d = PI_O_4_BITS[1] & 0xffffffffL;,1,1,1,0,2,0,0,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2169,        ac = a * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2170,        bc = b * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2171,        ad = a * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2174,        ac = ac + ((bc + ad) >>> 32);,4,3,0,2,4,0,0,0,1,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2176,        bita = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2177,        bitb = (ac & 0x8000000000000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2178,        prod2B += ac;,2,0,0,0,0,0,0,0,1,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2179,        bitsum = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2181,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2183,            prod2A++;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2187,        a = prodB >>> 32;,2,1,0,0,0,0,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2188,        b = prodB & 0xffffffffL;,2,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2189,        c = PI_O_4_BITS[0] >>> 32;,1,1,1,0,2,0,0,0,1,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2190,        d = PI_O_4_BITS[0] & 0xffffffffL;,1,1,1,0,2,0,0,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2191,        ac = a * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2192,        bc = b * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2193,        ad = a * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2196,        ac = ac + ((bc + ad) >>> 32);,4,3,0,2,4,0,0,0,1,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2198,        bita = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2199,        bitb = (ac & 0x8000000000000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2200,        prod2B += ac;,2,0,0,0,0,0,0,0,1,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2201,        bitsum = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2203,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2205,            prod2A++;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2209,        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits,3,2,0,1,2,1,0,0,0,5,68,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2210,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits,5,5,0,3,8,1,0,0,0,5,102,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2212,        double sumA = tmpA + tmpB;,3,1,0,0,0,1,0,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2213,        double sumB = -(sumA - tmpA - tmpB);,4,1,0,1,2,1,0,0,1,6,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2216,        result[0] = intPart;,1,0,1,0,2,0,0,0,1,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2217,        result[1] = sumA * 2.0;,1,1,1,0,2,0,0,0,1,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2218,        result[2] = sumB * 2.0;,1,1,1,0,2,0,0,0,1,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2219,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2228,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2229,        int quadrant = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2231,        double xb = 0.0;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2234,        xa = x;,2,0,0,0,0,0,0,0,1,2,7,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2235,        if (x < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2236,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2237,            xa = -xa;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2241,        if (xa == 0.0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2242,            long bits = Double.doubleToRawLongBits(x);,1,0,0,1,2,1,3,0,0,5,42,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2243,            if (bits < 0) {,1,1,0,1,3,1,0,0,0,5,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2244,                return -0.0;,0,0,0,0,0,1,0,0,1,2,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2246,            return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2249,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,5,3,0,1,3,1,0,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2250,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2254,        if (xa > 3294198.0) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2258,            double reduceResults[] = new double[3];,1,0,0,0,4,3,0,0,0,3,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2259,"            reducePayneHanek(xa, reduceResults);",0,0,0,0,2,0,3,0,1,3,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2260,            quadrant = ((int) reduceResults[0]) & 3;,1,1,1,2,6,1,0,0,1,7,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2261,            xa = reduceResults[1];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2262,            xb = reduceResults[2];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2263,        } else if (xa > 1.5707963267948966) {,1,1,0,1,4,2,0,0,0,5,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2264,            final CodyWaite cw = new CodyWaite(xa);,2,0,0,1,2,2,0,2,2,6,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2265,            quadrant = cw.getK() & 3;,1,1,0,1,2,0,2,0,1,6,25,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2266,            xa = cw.getRemA();,1,0,0,1,2,0,2,0,1,5,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2267,            xb = cw.getRemB();,1,0,0,1,2,0,2,0,1,5,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2270,        if (negative) {,1,0,0,1,3,1,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2271,            quadrant ^= 2;  // Flip bit 1,1,0,0,0,0,0,0,0,1,2,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2274,        switch (quadrant) {,1,0,0,1,3,1,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2276,"                return sinQ(xa, xb);",0,0,0,0,2,1,3,0,1,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2278,"                return cosQ(xa, xb);",0,0,0,0,2,1,3,0,1,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2280,"                return -sinQ(xa, xb);",0,0,0,0,2,1,3,0,2,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2282,"                return -cosQ(xa, xb);",0,0,0,0,2,1,3,0,2,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2284,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2295,        int quadrant = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2298,        double xa = x;,2,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2299,        if (x < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2300,            xa = -xa;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2303,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,5,3,0,1,3,1,0,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2304,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2308,        double xb = 0;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2309,        if (xa > 3294198.0) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2313,            double reduceResults[] = new double[3];,1,0,0,0,4,3,0,0,0,3,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2314,"            reducePayneHanek(xa, reduceResults);",0,0,0,0,2,0,3,0,1,3,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2315,            quadrant = ((int) reduceResults[0]) & 3;,1,1,1,2,6,1,0,0,1,7,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2316,            xa = reduceResults[1];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2317,            xb = reduceResults[2];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2318,        } else if (xa > 1.5707963267948966) {,1,1,0,1,4,2,0,0,0,5,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2319,            final CodyWaite cw = new CodyWaite(xa);,2,0,0,1,2,2,0,2,2,6,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2320,            quadrant = cw.getK() & 3;,1,1,0,1,2,0,2,0,1,6,25,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2321,            xa = cw.getRemA();,1,0,0,1,2,0,2,0,1,5,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2322,            xb = cw.getRemB();,1,0,0,1,2,0,2,0,1,5,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2328,        switch (quadrant) {,1,0,0,1,3,1,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2330,"                return cosQ(xa, xb);",0,0,0,0,2,1,3,0,1,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2332,"                return -sinQ(xa, xb);",0,0,0,0,2,1,3,0,2,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2334,"                return -cosQ(xa, xb);",0,0,0,0,2,1,3,0,2,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2336,"                return sinQ(xa, xb);",0,0,0,0,2,1,3,0,1,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2338,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2349,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2350,        int quadrant = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2353,        double xa = x;,2,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2354,        if (x < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2355,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2356,            xa = -xa;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2360,        if (xa == 0.0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2361,            long bits = Double.doubleToRawLongBits(x);,1,0,0,1,2,1,3,0,0,5,42,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2362,            if (bits < 0) {,1,1,0,1,3,1,0,0,0,5,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2363,                return -0.0;,0,0,0,0,0,1,0,0,1,2,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2365,            return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2368,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,5,3,0,1,3,1,0,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2369,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2373,        double xb = 0;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2374,        if (xa > 3294198.0) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2378,            double reduceResults[] = new double[3];,1,0,0,0,4,3,0,0,0,3,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2379,"            reducePayneHanek(xa, reduceResults);",0,0,0,0,2,0,3,0,1,3,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2380,            quadrant = ((int) reduceResults[0]) & 3;,1,1,1,2,6,1,0,0,1,7,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2381,            xa = reduceResults[1];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2382,            xb = reduceResults[2];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2383,        } else if (xa > 1.5707963267948966) {,1,1,0,1,4,2,0,0,0,5,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2384,            final CodyWaite cw = new CodyWaite(xa);,2,0,0,1,2,2,0,2,2,6,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2385,            quadrant = cw.getK() & 3;,1,1,0,1,2,0,2,0,1,6,25,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2386,            xa = cw.getRemA();,1,0,0,1,2,0,2,0,1,5,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2387,            xb = cw.getRemB();,1,0,0,1,2,0,2,0,1,5,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2390,        if (xa > 1.5) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2392,            final double pi2a = 1.5707963267948966;,1,0,0,0,0,2,0,0,1,3,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2393,            final double pi2b = 6.123233995736766E-17;,1,0,0,0,0,2,0,0,1,3,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2395,            final double a = pi2a - xa;,3,1,0,0,0,2,0,0,1,4,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2396,            double b = -(a - pi2a + xa);,4,2,0,1,2,1,0,0,1,6,28,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2397,            b += pi2b - xb;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2399,            xa = a + b;,3,1,0,0,0,0,0,0,1,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2400,            xb = -(xa - a - b);,4,1,0,1,2,0,0,0,2,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2401,            quadrant ^= 1;,1,0,0,0,0,0,0,0,1,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2402,            negative ^= true;,1,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2406,        if ((quadrant & 1) == 0) {,1,2,0,2,5,1,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2407,"            result = tanQ(xa, xb, false);",1,0,0,0,2,0,3,0,3,4,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2409,"            result = -tanQ(xa, xb, true);",1,0,0,0,2,0,3,0,4,4,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2412,        if (negative) {,1,0,0,1,3,1,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2413,            result = -result;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2416,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2425,"        return atan(x, 0.0, false);",0,0,0,0,2,1,2,0,2,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2435,        boolean negate = false;,1,0,0,0,0,1,0,0,1,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2438,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,1,1,0,1,3,2,0,0,0,5,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2439,"            return leftPlane ? copySign(Math.PI, xa) : xa;",4,0,0,0,2,1,2,0,1,5,46,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2442,        if (xa < 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2444,            xa = -xa;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2445,            xb = -xb;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2446,            negate = true;,1,0,0,0,0,0,0,0,2,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2449,        if (xa > 1.633123935319537E16) { // Very large input,1,1,0,1,3,1,0,0,0,5,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2450,            return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);,8,3,0,1,6,1,0,0,1,6,69,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2454,        if (xa < 1) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2455,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,4,4,0,3,8,1,0,0,2,6,65,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2457,            final double oneOverXa = 1 / xa;,2,1,0,0,0,2,0,0,1,4,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2458,            idx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);,4,4,0,3,8,1,0,0,3,6,89,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2460,        double epsA = xa - TANGENT_TABLE_A[idx];,2,1,1,0,2,1,0,0,0,5,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2461,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,3,2,1,1,4,1,0,0,1,7,50,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2462,        epsB += xb - TANGENT_TABLE_B[idx];,2,1,1,0,2,0,0,0,1,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2464,        double temp = epsA + epsB;,3,1,0,0,0,1,0,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2465,        epsB = -(temp - epsA - epsB);,4,1,0,1,2,0,0,0,2,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2466,        epsA = temp;,2,0,0,0,0,0,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2469,        temp = xa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2470,        double ya = xa + temp - temp;,4,2,0,0,0,1,0,0,0,3,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2471,        double yb = xb + xa - ya;,4,2,0,0,0,1,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2472,        xa = ya;,2,0,0,0,0,0,0,0,1,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2473,        xb += yb;,2,0,0,0,0,0,0,0,1,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2476,        if (idx == 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2479,            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,3,5,1,2,10,2,0,0,1,7,91,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2481,            ya = epsA * denom;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2482,            yb = epsB * denom;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2483,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2484,            double temp2 = xa * TANGENT_TABLE_A[idx];,2,1,1,0,2,1,0,0,0,5,41,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2485,            double za = 1d + temp2;,2,1,0,0,0,1,0,0,0,3,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2486,            double zb = -(za - 1d - temp2);,3,1,0,1,2,1,0,0,1,6,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2487,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,3,3,1,0,4,0,0,0,1,5,62,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2488,            temp = za + temp2;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2489,            zb += -(temp - za - temp2);,4,1,0,1,2,0,0,0,2,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2490,            za = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2492,            zb += xb * TANGENT_TABLE_B[idx];,2,1,1,0,2,0,0,0,1,5,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2493,            ya = epsA / za;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2495,            temp = ya * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2496,            final double yaa = (ya + temp) - temp;,4,2,0,1,2,2,0,0,1,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2497,            final double yab = ya - yaa;,3,1,0,0,0,2,0,0,1,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2499,            temp = za * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2500,            final double zaa = (za + temp) - temp;,4,2,0,1,2,2,0,0,1,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2501,            final double zab = za - zaa;,3,1,0,0,0,2,0,0,1,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2504,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,11,9,0,1,2,0,0,0,1,5,65,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2506,            yb += -epsA * zb / za / za;,5,3,0,0,0,0,0,0,2,3,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2507,            yb += epsB / za;,3,1,0,0,0,0,0,0,1,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2511,        epsA = ya;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2512,        epsB = yb;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2515,        final double epsA2 = epsA * epsA;,3,1,0,0,0,2,0,0,1,4,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2526,        yb = 0.07490822288864472;,1,0,0,0,0,0,0,0,1,2,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2527,        yb = yb * epsA2 + -0.09088450866185192;,3,2,0,0,0,0,0,0,2,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2528,        yb = yb * epsA2 + 0.11111095942313305;,3,2,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2529,        yb = yb * epsA2 + -0.1428571423679182;,3,2,0,0,0,0,0,0,2,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2530,        yb = yb * epsA2 + 0.19999999999923582;,3,2,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2531,        yb = yb * epsA2 + -0.33333333333333287;,3,2,0,0,0,0,0,0,2,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2532,        yb = yb * epsA2 * epsA;,4,1,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2535,        ya = epsA;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2537,        temp = ya + yb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2538,        yb = -(temp - ya - yb);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2539,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2542,        yb += epsB / (1d + epsA * epsA);,4,3,0,1,2,0,0,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2545,        double za = EIGHTHS[idx] + ya;,2,1,1,0,2,1,0,0,0,5,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2546,        double zb = -(za - EIGHTHS[idx] - ya);,3,1,1,1,4,1,0,0,1,7,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2547,        temp = za + yb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2548,        zb += -(temp - za - yb);,4,1,0,1,2,0,0,0,2,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2549,        za = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2551,        double result = za + zb;,3,1,0,0,0,1,0,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2552,        double resultb = -(result - za - zb);,4,1,0,1,2,1,0,0,1,6,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2554,        if (leftPlane) {,1,0,0,1,3,1,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2556,            final double pia = 1.5707963267948966 * 2;,1,1,0,0,0,2,0,0,1,4,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2557,            final double pib = 6.123233995736766E-17 * 2;,1,1,0,0,0,2,0,0,1,4,45,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2559,            za = pia - result;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2560,            zb = -(za - pia + result);,4,2,0,1,2,0,0,0,2,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2561,            zb += pib - resultb;,3,1,0,0,0,0,0,0,1,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2563,            result = za + zb;,3,1,0,0,0,0,0,0,1,3,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2564,            resultb = -(result - za - zb);,4,1,0,1,2,0,0,0,2,5,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2568,        if (negate ^ leftPlane) {,2,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2569,            result = -result;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2572,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2582,        if (x != x || y != y) {,4,3,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2583,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2586,        if (y == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2587,            final double result = x * y;,3,1,0,0,0,2,0,0,1,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2588,            final double invx = 1d / x;,2,1,0,0,0,2,0,0,1,4,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2589,            final double invy = 1d / y;,2,1,0,0,0,2,0,0,1,4,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2591,            if (invx == 0) { // X is infinite,1,1,0,1,3,1,0,0,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2592,                if (x > 0) {,1,1,0,1,3,1,0,0,0,5,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2593,                    return y; // return +/- 0.0,1,0,0,0,0,2,0,0,0,2,27,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2595,"                    return copySign(Math.PI, y);",2,0,0,0,2,1,2,0,1,5,28,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2599,            if (x < 0 || invx < 0) {,2,3,0,1,3,1,0,0,0,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2600,                if (y < 0 || invy < 0) {,2,3,0,1,3,1,0,0,0,5,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2601,                    return -Math.PI;,2,0,0,0,0,1,0,0,1,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2603,                    return Math.PI;,2,0,0,0,0,1,0,0,0,2,15,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2606,                return result;,1,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2612,        if (y == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2613,            if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2614,                return Math.PI * F_1_4;,3,1,0,0,0,1,0,0,0,3,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2617,            if (x == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2618,                return Math.PI * F_3_4;,3,1,0,0,0,1,0,0,0,3,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2621,            return Math.PI * F_1_2;,3,1,0,0,0,1,0,0,0,3,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2624,        if (y == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2625,            if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2626,                return -Math.PI * F_1_4;,3,1,0,0,0,1,0,0,1,4,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2629,            if (x == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2630,                return -Math.PI * F_3_4;,3,1,0,0,0,1,0,0,1,4,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2633,            return -Math.PI * F_1_2;,3,1,0,0,0,1,0,0,1,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2636,        if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2637,            if (y > 0 || 1 / y > 0) {,2,4,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2638,                return 0d;,0,0,0,0,0,1,0,0,0,1,10,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2641,            if (y < 0 || 1 / y < 0) {,2,4,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2642,                return -0d;,0,0,0,0,0,1,0,0,1,2,11,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2646,        if (x == Double.NEGATIVE_INFINITY),3,1,0,1,2,1,0,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2648,            if (y > 0.0 || 1 / y > 0.0) {,2,4,0,1,3,1,0,0,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2649,                return Math.PI;,2,0,0,0,0,1,0,0,0,2,15,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2652,            if (y < 0 || 1 / y < 0) {,2,4,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2653,                return -Math.PI;,2,0,0,0,0,1,0,0,1,3,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2659,        if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2660,            if (y > 0 || 1 / y > 0) {,2,4,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2661,                return Math.PI * F_1_2;,3,1,0,0,0,1,0,0,0,3,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2664,            if (y < 0 || 1 / y < 0) {,2,4,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2665,                return -Math.PI * F_1_2;,3,1,0,0,0,1,0,0,1,4,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2670,        final double r = y / x;,3,1,0,0,0,2,0,0,1,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2671,        if (Double.isInfinite(r)) { // bypass calculations that can create NaN,0,0,0,2,5,1,3,0,0,4,70,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2672,"            return atan(r, 0, x < 0);",1,1,0,0,2,1,2,0,1,6,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2675,        double ra = doubleHighPart(r);,1,0,0,1,2,1,2,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2676,        double rb = r - ra;,3,1,0,0,0,1,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2679,        final double xa = doubleHighPart(x);,1,0,0,1,2,2,2,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2680,        final double xb = x - xa;,3,1,0,0,0,2,0,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2682,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,11,9,0,1,2,0,0,0,1,5,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2684,        final double temp = ra + rb;,3,1,0,0,0,2,0,0,1,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2685,        rb = -(temp - ra - rb);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2686,        ra = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2688,        if (ra == 0) { // Fix up the sign so atan works correctly,1,1,0,1,3,1,0,0,0,5,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2689,"            ra = copySign(0d, y);",1,0,0,0,2,0,2,0,2,4,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2693,"        final double result = atan(ra, rb, x < 0);",2,1,0,0,2,2,3,0,2,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2695,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2703,      if (x != x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2704,          return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2707,      if (x > 1.0 || x < -1.0) {,2,3,0,1,3,1,0,0,1,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2708,          return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2711,      if (x == 1.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2712,          return Math.PI/2.0;,2,1,0,0,0,1,0,0,0,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2715,      if (x == -1.0) {,1,1,0,1,3,1,0,0,1,6,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2716,          return -Math.PI/2.0;,2,1,0,0,0,1,0,0,1,4,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2719,      if (x == 0.0) { // Matches +/- 0.0; return correct sign,1,1,0,1,3,2,0,0,0,5,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2720,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2726,      double temp = x * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2727,      final double xa = x + temp - temp;,4,2,0,0,0,2,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2728,      final double xb = x - xa;,3,1,0,0,0,2,0,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2731,      double ya = xa*xa;,3,1,0,0,0,1,0,0,0,3,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2732,      double yb = xa*xb*2.0 + xb*xb;,5,3,0,0,0,1,0,0,0,3,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2735,      ya = -ya;,2,0,0,0,0,0,0,0,2,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2736,      yb = -yb;,2,0,0,0,0,0,0,0,2,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2738,      double za = 1.0 + ya;,2,1,0,0,0,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2739,      double zb = -(za - 1.0 - ya);,3,1,0,1,2,1,0,0,1,6,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2741,      temp = za + yb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2742,      zb += -(temp - za - yb);,4,1,0,1,2,0,0,0,2,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2743,      za = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2747,      y = sqrt(za);,1,0,0,1,2,0,2,0,2,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2748,      temp = y * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2749,      ya = y + temp - temp;,4,2,0,0,0,0,0,0,1,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2750,      yb = y - ya;,3,1,0,0,0,0,0,0,1,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2753,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,9,8,0,1,4,0,0,0,1,5,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2756,      double dx = zb / (2.0*y);,3,2,0,1,2,1,0,0,0,5,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2759,      double r = x/y;,3,1,0,0,0,1,0,0,0,3,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2760,      temp = r * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2761,      double ra = r + temp - temp;,4,2,0,0,0,1,0,0,0,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2762,      double rb = r - ra;,3,1,0,0,0,1,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2764,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,11,9,0,1,2,1,0,0,1,6,83,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2765,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,5,3,0,0,0,0,0,0,2,3,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2767,      temp = ra + rb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2768,      rb = -(temp - ra - rb);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2769,      ra = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2771,"      return atan(ra, rb, false);",0,0,0,0,2,1,3,0,2,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2779,      if (x != x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2780,          return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2783,      if (x > 1.0 || x < -1.0) {,2,3,0,1,3,1,0,0,1,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2784,          return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2787,      if (x == -1.0) {,1,1,0,1,3,1,0,0,1,6,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2788,          return Math.PI;,2,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2791,      if (x == 1.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2792,          return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2795,      if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2796,          return Math.PI/2.0;,2,1,0,0,0,1,0,0,0,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2802,      double temp = x * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2803,      final double xa = x + temp - temp;,4,2,0,0,0,2,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2804,      final double xb = x - xa;,3,1,0,0,0,2,0,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2807,      double ya = xa*xa;,3,1,0,0,0,1,0,0,0,3,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2808,      double yb = xa*xb*2.0 + xb*xb;,5,3,0,0,0,1,0,0,0,3,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2811,      ya = -ya;,2,0,0,0,0,0,0,0,2,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2812,      yb = -yb;,2,0,0,0,0,0,0,0,2,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2814,      double za = 1.0 + ya;,2,1,0,0,0,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2815,      double zb = -(za - 1.0 - ya);,3,1,0,1,2,1,0,0,1,6,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2817,      temp = za + yb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2818,      zb += -(temp - za - yb);,4,1,0,1,2,0,0,0,2,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2819,      za = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2822,      double y = sqrt(za);,1,0,0,1,2,1,2,0,1,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2823,      temp = y * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2824,      ya = y + temp - temp;,4,2,0,0,0,0,0,0,1,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2825,      yb = y - ya;,3,1,0,0,0,0,0,0,1,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2828,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,9,8,0,1,4,0,0,0,1,5,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2831,      yb += zb / (2.0*y);,3,2,0,1,2,0,0,0,1,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2832,      y = ya+yb;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2833,      yb = -(y - ya - yb);,4,1,0,1,2,0,0,0,2,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2836,      double r = y/x;,3,1,0,0,0,1,0,0,0,3,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2839,      if (Double.isInfinite(r)) { // x is effectively zero,0,0,0,2,5,1,3,0,0,4,52,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2840,          return Math.PI/2; // so return the appropriate value,2,1,0,0,0,2,0,0,0,3,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2843,      double ra = doubleHighPart(r);,1,0,0,1,2,1,2,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2844,      double rb = r - ra;,3,1,0,0,0,1,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2846,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,11,9,0,1,2,1,0,0,1,6,83,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2847,      rb += yb / x;  // Add in effect additional bits of sqrt.,3,1,0,0,0,0,0,0,1,3,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2849,      temp = ra + rb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2850,      rb = -(temp - ra - rb);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2851,      ra = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2853,"      return atan(ra, rb, x<0);",1,1,0,0,2,1,3,0,1,6,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2862,      long inbits = Double.doubleToRawLongBits(x);,1,0,0,1,2,1,3,0,0,5,44,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2863,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,2,3,0,2,6,2,0,0,0,5,53,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2864,      boolean subnormal = false;,1,0,0,0,0,1,0,0,1,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2866,      if (exponent == -1023) {,1,1,0,1,3,1,0,0,1,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2867,          if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2868,              return x;,1,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2872,          subnormal = true;,1,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2873,          x *= 1.8014398509481984E16;  // 2^54,1,0,0,0,0,0,0,0,1,2,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2874,          inbits = Double.doubleToRawLongBits(x);,1,0,0,1,2,0,3,0,1,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2875,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,2,3,0,2,6,1,0,0,1,6,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2878,      if (exponent == 1024) {,1,1,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2880,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2884,      int exp3 = exponent / 3;,2,1,0,0,0,1,0,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2887,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,2,2,0,1,3,1,2,0,0,6,68,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2891,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,2,2,0,2,4,2,2,0,1,7,98,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2894,      double est = -0.010714690733195933;,1,0,0,0,0,1,0,0,1,3,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2895,      est = est * mant + 0.0875862700108075;,3,2,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2896,      est = est * mant + -0.3058015757857271;,3,2,0,0,0,0,0,0,2,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2897,      est = est * mant + 0.7249995199969751;,3,2,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2898,      est = est * mant + 0.5039018405998233;,3,2,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2900,      est *= CBRTTWO[exponent % 3 + 2];,2,2,1,0,2,0,0,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2905,      final double xs = x / (p2*p2*p2);,5,2,0,1,2,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2906,      est += (xs - est*est*est) / (3*est*est);,7,4,0,1,4,0,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2907,      est += (xs - est*est*est) / (3*est*est);,7,4,0,1,4,0,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2910,      double temp = est * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2911,      double ya = est + temp - temp;,4,2,0,0,0,1,0,0,0,3,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2912,      double yb = est - ya;,3,1,0,0,0,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2914,      double za = ya * ya;,3,1,0,0,0,1,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2915,      double zb = ya * yb * 2.0 + yb * yb;,5,3,0,0,0,1,0,0,0,3,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2916,      temp = za * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2917,      double temp2 = za + temp - temp;,4,2,0,0,0,1,0,0,0,3,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2918,      zb += za - temp2;,3,1,0,0,0,0,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2919,      za = temp2;,2,0,0,0,0,0,0,0,1,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2921,      zb = za * yb + ya * zb + zb * yb;,7,5,0,0,0,0,0,0,1,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2922,      za = za * ya;,3,1,0,0,0,0,0,0,1,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2924,      double na = xs - za;,3,1,0,0,0,1,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2925,      double nb = -(na - xs + za);,4,2,0,1,2,1,0,0,1,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2926,      nb -= zb;,2,0,0,0,0,0,0,0,1,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2928,      est += (na+nb)/(3*est*est);,5,3,0,1,4,0,0,0,1,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2931,      est *= p2;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2933,      if (subnormal) {,1,0,0,1,3,1,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2934,          est *= 3.814697265625E-6;  // 2^-18,1,0,0,0,0,0,0,0,1,2,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2937,      return est;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2947,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,1,2,0,2,5,2,3,0,0,6,79,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2948,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2952,        final double facta = 0.01745329052209854;,1,0,0,0,0,2,0,0,1,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2953,        final double factb = 1.997844754509471E-9;,1,0,0,0,0,2,0,0,1,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2955,        double xa = doubleHighPart(x);,1,0,0,1,2,1,2,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2956,        double xb = x - xa;,3,1,0,0,0,1,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2958,        double result = xb * factb + xb * facta + xa * factb + xa * facta;,9,7,0,0,0,1,0,0,0,3,66,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2959,        if (result == 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2960,            result = result * x; // ensure correct sign if calculation underflows,3,1,0,0,0,1,0,0,1,4,69,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2962,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2972,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,1,2,0,2,5,2,3,0,0,6,79,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2973,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2977,        final double facta = 57.2957763671875;,1,0,0,0,0,2,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2978,        final double factb = 3.145894820876798E-6;,1,0,0,0,0,2,0,0,1,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2980,        double xa = doubleHighPart(x);,1,0,0,1,2,1,2,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2981,        double xb = x - xa;,3,1,0,0,0,1,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2983,        return xb * factb + xb * facta + xa * factb + xa * facta;,8,7,0,0,0,1,0,0,0,3,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2992,        final int i = x >>> 31;,2,1,0,0,0,2,0,0,1,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,2993,        return (x ^ (~i + 1)) + i;,3,3,0,2,4,1,0,0,1,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3002,        final long l = x >>> 63;,2,1,0,0,0,2,0,0,1,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3007,        return (x ^ (~l + 1)) + l;,3,3,0,2,4,1,0,0,1,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3016,        return Float.intBitsToFloat(MASK_NON_SIGN_INT & Float.floatToRawIntBits(x));,1,1,0,2,4,1,5,0,0,6,76,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3025,        return Double.longBitsToDouble(MASK_NON_SIGN_LONG & Double.doubleToRawLongBits(x));,1,1,0,2,4,1,5,0,0,6,83,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3034,        if (Double.isInfinite(x)) {,0,0,0,2,5,1,3,0,0,4,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3035,            return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3037,        return abs(x - Double.longBitsToDouble(Double.doubleToRawLongBits(x) ^ 1));,1,2,0,3,6,1,6,0,1,7,75,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3046,        if (Float.isInfinite(x)) {,0,0,0,2,5,1,3,0,0,4,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3047,            return Float.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3049,        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));,1,2,0,3,6,1,6,0,1,7,66,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3061,        if ((n > -1023) && (n < 1024)) {,2,3,0,2,7,1,0,0,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3062,            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);,2,3,0,3,8,2,2,0,0,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3066,        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {,1,2,0,2,9,1,6,0,0,6,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3067,            return d;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3069,        if (n < -2098) {,1,1,0,1,3,1,0,0,1,6,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3070,            return (d > 0) ? 0.0 : -0.0;,1,1,0,1,2,1,0,0,1,6,28,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3072,        if (n > 2097) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3073,            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,5,1,0,1,2,1,0,0,0,5,69,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3077,        final long bits = Double.doubleToRawLongBits(d);,1,0,0,1,2,2,3,0,1,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3078,        final long sign = bits & 0x8000000000000000L;,2,1,0,0,0,2,0,0,1,4,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3079,        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;,2,2,0,2,6,2,0,0,0,5,48,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3080,        long mantissa   = bits & 0x000fffffffffffffL;,2,1,0,0,0,1,0,0,0,3,45,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3083,        int scaledExponent = exponent + n;,3,1,0,0,0,1,0,0,0,3,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3085,        if (n < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3087,            if (scaledExponent > 0) {,1,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3089,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,3,2,0,4,8,2,2,0,0,6,82,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3090,            } else if (scaledExponent > -53) {,1,1,0,1,4,2,0,0,1,6,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3094,                mantissa = mantissa | (1L << 52);,2,2,0,1,2,0,0,0,1,5,33,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3097,                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));,3,2,0,2,4,2,0,0,2,6,73,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3098,                mantissa = mantissa >>> (1 - scaledExponent);,3,2,0,1,2,0,0,0,1,5,45,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3099,                if (mostSignificantLostBit != 0) {,1,1,0,1,3,1,0,0,0,5,34,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3101,                    mantissa++;,1,0,0,0,0,0,0,0,1,2,11,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3103,                return Double.longBitsToDouble(sign | mantissa);,2,1,0,1,2,1,2,0,0,6,48,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3107,                return (sign == 0L) ? 0.0 : -0.0;,1,1,0,1,2,1,0,0,1,6,33,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3111,            if (exponent == 0) {,1,1,0,1,3,1,0,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3114,                while ((mantissa >>> 52) != 1) {,1,2,0,2,5,1,0,0,0,5,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3115,                    mantissa = mantissa << 1;,2,1,0,0,0,0,0,0,1,3,25,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3116,                    --scaledExponent;,1,0,0,0,0,0,0,0,1,2,17,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3118,                ++scaledExponent;,1,0,0,0,0,0,0,0,1,2,17,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3119,                mantissa = mantissa & 0x000fffffffffffffL;,2,1,0,0,0,0,0,0,1,3,42,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3121,                if (scaledExponent < 2047) {,1,1,0,1,3,1,0,0,0,5,28,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3122,                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,3,2,0,4,8,2,2,0,0,6,82,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3124,                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,5,1,0,1,2,1,0,0,0,5,74,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3127,            } else if (scaledExponent < 2047) {,1,1,0,1,4,2,0,0,0,5,35,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3128,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,3,2,0,4,8,2,2,0,0,6,82,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3130,                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,5,1,0,1,2,1,0,0,0,5,74,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3145,        if ((n > -127) && (n < 128)) {,2,3,0,2,7,1,0,0,1,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3146,            return f * Float.intBitsToFloat((n + 127) << 23);,2,3,0,2,4,1,2,0,0,6,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3150,        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {,1,2,0,2,9,1,6,0,0,6,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3151,            return f;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3153,        if (n < -277) {,1,1,0,1,3,1,0,0,1,6,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3154,            return (f > 0) ? 0.0f : -0.0f;,1,1,0,1,2,1,0,0,1,6,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3156,        if (n > 276) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3157,            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,5,1,0,1,2,1,0,0,0,5,67,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3161,        final int bits = Float.floatToIntBits(f);,1,0,0,1,2,2,3,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3162,        final int sign = bits & 0x80000000;,2,1,0,0,0,2,0,0,1,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3163,        int  exponent  = (bits >>> 23) & 0xff;,2,2,0,1,2,1,0,0,0,5,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3164,        int mantissa   = bits & 0x007fffff;,2,1,0,0,0,1,0,0,0,3,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3167,        int scaledExponent = exponent + n;,3,1,0,0,0,1,0,0,0,3,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3169,        if (n < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3171,            if (scaledExponent > 0) {,1,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3173,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,3,2,0,2,4,1,2,0,0,6,70,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3174,            } else if (scaledExponent > -24) {,1,1,0,1,4,2,0,0,1,6,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3178,                mantissa = mantissa | (1 << 23);,2,2,0,1,2,0,0,0,1,5,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3181,                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));,3,2,0,2,4,2,0,0,2,6,71,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3182,                mantissa = mantissa >>> (1 - scaledExponent);,3,2,0,1,2,0,0,0,1,5,45,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3183,                if (mostSignificantLostBit != 0) {,1,1,0,1,3,1,0,0,0,5,34,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3185,                    mantissa++;,1,0,0,0,0,0,0,0,1,2,11,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3187,                return Float.intBitsToFloat(sign | mantissa);,2,1,0,1,2,1,2,0,0,6,45,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3191,                return (sign == 0) ? 0.0f : -0.0f;,1,1,0,1,2,1,0,0,1,6,34,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3195,            if (exponent == 0) {,1,1,0,1,3,1,0,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3198,                while ((mantissa >>> 23) != 1) {,1,2,0,2,5,1,0,0,0,5,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3199,                    mantissa = mantissa << 1;,2,1,0,0,0,0,0,0,1,3,25,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3200,                    --scaledExponent;,1,0,0,0,0,0,0,0,1,2,17,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3202,                ++scaledExponent;,1,0,0,0,0,0,0,0,1,2,17,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3203,                mantissa = mantissa & 0x007fffff;,2,1,0,0,0,0,0,0,1,3,33,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3205,                if (scaledExponent < 255) {,1,1,0,1,3,1,0,0,0,5,27,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3206,                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,3,2,0,2,4,1,2,0,0,6,70,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3208,                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,5,1,0,1,2,1,0,0,0,5,71,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3211,            } else if (scaledExponent < 255) {,1,1,0,1,4,2,0,0,0,5,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3212,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,3,2,0,2,4,1,2,0,0,6,70,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3214,                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,5,1,0,1,2,1,0,0,0,5,71,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3254,        if (Double.isNaN(d) || Double.isNaN(direction)) {,0,1,0,2,7,1,6,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3255,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3256,        } else if (d == direction) {,2,1,0,1,4,2,0,0,0,5,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3257,            return direction;,1,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3258,        } else if (Double.isInfinite(d)) {,0,0,0,2,6,2,3,0,0,4,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3259,            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;,5,1,0,1,2,1,0,0,1,6,54,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3260,        } else if (d == 0) {,1,1,0,1,4,2,0,0,0,5,20,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3261,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,5,1,0,1,2,1,0,0,1,6,62,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3266,        final long bits = Double.doubleToRawLongBits(d);,1,0,0,1,2,2,3,0,1,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3267,        final long sign = bits & 0x8000000000000000L;,2,1,0,0,0,2,0,0,1,4,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3268,        if ((direction < d) ^ (sign == 0L)) {,3,3,0,2,7,1,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3269,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));,2,3,0,3,6,1,2,0,0,6,74,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3271,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));,2,3,0,3,6,1,2,0,0,6,74,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3310,        if (Double.isNaN(f) || Double.isNaN(direction)) {,0,1,0,2,7,1,6,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3311,            return Float.NaN;,2,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3312,        } else if (f == direction) {,2,1,0,1,4,2,0,0,0,5,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3313,            return (float) direction;,1,0,0,1,2,2,0,0,0,4,25,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3314,        } else if (Float.isInfinite(f)) {,0,0,0,2,6,2,3,0,0,4,33,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3315,            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;,5,1,0,1,2,1,0,0,1,6,53,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3316,        } else if (f == 0f) {,1,1,0,1,4,2,0,0,0,5,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3317,            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;,5,1,0,1,2,1,0,0,1,6,60,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3322,        final int bits = Float.floatToIntBits(f);,1,0,0,1,2,2,3,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3323,        final int sign = bits & 0x80000000;,2,1,0,0,0,2,0,0,1,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3324,        if ((direction < f) ^ (sign == 0)) {,3,3,0,2,7,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3325,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));,2,3,0,3,6,1,2,0,0,6,62,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3327,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));,2,3,0,3,6,1,2,0,0,6,62,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3339,        if (x != x) { // NaN,2,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3340,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3343,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,4,3,0,1,3,1,0,0,1,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3344,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3347,        y = (long) x;,2,0,0,1,2,1,0,0,1,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3348,        if (x < 0 && y != x) {,3,3,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3349,            y--;,1,0,0,0,0,0,0,0,1,2,4,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3352,        if (y == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3353,            return x*y;,2,1,0,0,0,1,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3356,        return y;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3366,        if (x != x) { // NaN,2,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3367,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3370,        y = floor(x);,1,0,0,1,2,0,2,0,2,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3371,        if (y == x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3372,            return y;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3375,        y += 1.0;,1,0,0,0,0,0,0,0,1,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3377,        if (y == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3378,            return x*y;,2,1,0,0,0,1,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3381,        return y;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3389,        double y = floor(x);,1,0,0,1,2,1,2,0,1,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3390,        double d = x - y;,3,1,0,0,0,1,0,0,0,3,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3392,        if (d > 0.5) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3393,            if (y == -1.0) {,1,1,0,1,3,1,0,0,1,6,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3394,                return -0.0; // Preserve sign of operand,0,0,0,0,0,1,0,0,1,2,40,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3396,            return y+1.0;,1,1,0,0,0,1,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3398,        if (d < 0.5) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3399,            return y;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3403,        long z = (long) y;,2,0,0,1,2,2,0,0,0,4,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3404,        return (z & 1) == 0 ? y : y + 1.0;,3,3,0,1,2,1,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3412,        return (long) floor(x + 0.5);,1,1,0,1,4,2,1,0,1,7,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3420,        return (int) floor(x + 0.5f);,1,1,0,1,4,2,1,0,1,7,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3438,        return (a <= b) ? a : b;,4,1,0,1,2,1,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3447,        if (a > b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3448,            return b;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3450,        if (a < b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3451,            return a;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3454,        if (a != b) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3455,            return Float.NaN;,2,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3459,        int bits = Float.floatToRawIntBits(a);,1,0,0,1,2,1,3,0,0,5,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3460,        if (bits == 0x80000000) {,1,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3461,            return a;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3463,        return b;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3472,        if (a > b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3473,            return b;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3475,        if (a < b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3476,            return a;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3479,        if (a != b) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3480,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3484,        long bits = Double.doubleToRawLongBits(a);,1,0,0,1,2,1,3,0,0,5,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3485,        if (bits == 0x8000000000000000L) {,1,1,0,1,3,1,0,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3486,            return a;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3488,        return b;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3506,        return (a <= b) ? b : a;,4,1,0,1,2,1,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3515,        if (a > b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3516,            return a;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3518,        if (a < b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3519,            return b;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3522,        if (a != b) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3523,            return Float.NaN;,2,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3527,        int bits = Float.floatToRawIntBits(a);,1,0,0,1,2,1,3,0,0,5,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3528,        if (bits == 0x80000000) {,1,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3529,            return b;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3531,        return a;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3540,        if (a > b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3541,            return a;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3543,        if (a < b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3544,            return b;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3547,        if (a != b) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3548,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3552,        long bits = Double.doubleToRawLongBits(a);,1,0,0,1,2,1,3,0,0,5,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3553,        if (bits == 0x8000000000000000L) {,1,1,0,1,3,1,0,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3554,            return b;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3556,        return a;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3574,        if (Double.isInfinite(x) || Double.isInfinite(y)) {,0,1,0,2,7,1,6,0,0,5,51,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3575,            return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3576,        } else if (Double.isNaN(x) || Double.isNaN(y)) {,0,1,0,2,8,2,6,0,0,5,48,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3577,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3580,            final int expX = getExponent(x);,1,0,0,1,2,2,2,0,2,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3581,            final int expY = getExponent(y);,1,0,0,1,2,2,2,0,2,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3582,            if (expX > expY + 27) {,2,2,0,1,3,1,0,0,0,5,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3584,                return abs(x);,0,0,0,1,2,1,2,0,1,5,14,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3585,            } else if (expY > expX + 27) {,2,2,0,1,4,2,0,0,0,5,30,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3587,                return abs(y);,0,0,0,1,2,1,2,0,1,5,14,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3591,                final int middleExp = (expX + expY) / 2;,3,2,0,1,2,2,0,0,1,6,40,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3594,"                final double scaledX = scalb(x, -middleExp);",2,0,0,0,2,2,2,0,3,5,44,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3595,"                final double scaledY = scalb(y, -middleExp);",2,0,0,0,2,2,2,0,3,5,44,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3598,                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);,5,3,0,1,2,2,1,0,2,7,67,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3601,"                return scalb(scaledH, middleExp);",0,0,0,0,2,1,3,0,1,4,33,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3629,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation",0,0,0,0,2,1,4,0,0,3,90,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3645,        final long m = Double.doubleToRawLongBits(magnitude); // don't care about NaN,1,0,0,1,2,2,3,0,1,6,77,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3646,        final long s = Double.doubleToRawLongBits(sign);,1,0,0,1,2,2,3,0,1,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3647,        if ((m^s) >= 0) {,2,2,0,2,5,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3648,            return magnitude;,1,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3650,        return -magnitude; // flip sign,1,0,0,0,0,1,0,0,1,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3666,        final int m = Float.floatToRawIntBits(magnitude);,1,0,0,1,2,2,3,0,1,6,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3667,        final int s = Float.floatToRawIntBits(sign);,1,0,0,1,2,2,3,0,1,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3668,        if ((m^s) >= 0) {,2,2,0,2,5,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3669,            return magnitude;,1,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3671,        return -magnitude; // flip sign,1,0,0,0,0,1,0,0,1,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3685,        return (int) ((Double.doubleToRawLongBits(d) >>> 52) & 0x7ff) - 1023;,0,3,0,3,8,2,3,0,0,5,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3699,        return ((Float.floatToRawIntBits(f) >>> 23) & 0xff) - 127;,0,3,0,3,6,1,3,0,0,5,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3708,        PrintStream out = System.out;,3,0,0,0,0,0,0,1,0,2,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3709,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_A"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);",2,0,0,0,2,0,4,0,1,4,96,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3710,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_B"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);",2,0,0,0,2,0,4,0,1,4,96,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3711,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_A"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);",2,0,0,0,2,0,4,0,1,4,100,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3712,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_B"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);",2,0,0,0,2,0,4,0,1,4,100,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3713,"        FastMathCalc.printarray(out, ""LN_MANT"",LN_MANT_LEN, lnMant.LN_MANT);",2,0,0,0,2,0,4,0,1,4,68,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3714,"        FastMathCalc.printarray(out, ""SINE_TABLE_A"", SINE_TABLE_LEN, SINE_TABLE_A);",0,0,0,0,2,0,5,0,1,3,75,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3715,"        FastMathCalc.printarray(out, ""SINE_TABLE_B"", SINE_TABLE_LEN, SINE_TABLE_B);",0,0,0,0,2,0,5,0,1,3,75,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3716,"        FastMathCalc.printarray(out, ""COSINE_TABLE_A"", SINE_TABLE_LEN, COSINE_TABLE_A);",0,0,0,0,2,0,5,0,1,3,79,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3717,"        FastMathCalc.printarray(out, ""COSINE_TABLE_B"", SINE_TABLE_LEN, COSINE_TABLE_B);",0,0,0,0,2,0,5,0,1,3,79,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3718,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_A"", SINE_TABLE_LEN, TANGENT_TABLE_A);",0,0,0,0,2,0,5,0,1,3,81,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3719,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_B"", SINE_TABLE_LEN, TANGENT_TABLE_B);",0,0,0,0,2,0,5,0,1,3,81,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3720,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3762,    private static class ExpFracTable {,1,0,0,0,1,3,0,0,2,4,35,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3788,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,1,0,0,1,2,0,2,0,1,5,56,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3789,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,1,0,0,1,2,0,2,0,1,5,56,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,3791,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,87,"            throw new NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,",2,0,0,0,1,2,0,1,1,5,72,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,91,"            throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,",2,0,0,0,1,2,0,1,1,5,68,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,95,"            throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,",2,0,0,0,1,2,0,1,1,5,66,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,100,"            throw new NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,",2,0,0,0,1,2,0,1,1,5,99,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,104,"            throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,",2,0,0,0,1,2,0,1,1,5,93,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,117,"        int[] domain = getDomain(populationSize, numberOfSuccesses, sampleSize);",1,0,0,0,4,1,4,0,1,5,72,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,118,        if (x < domain[0]) {,1,1,1,1,5,1,0,0,0,6,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,119,            ret = 0.0;,1,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,120,        } else if (x >= domain[1]) {,1,1,1,1,6,2,0,0,0,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,121,            ret = 1.0;,1,0,0,0,0,0,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,123,"            ret = innerCumulativeProbability(domain[0], x, 1);",1,0,1,0,4,0,2,0,2,5,50,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,126,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,139,"        return new int[] { getLowerDomain(n, m, k), getUpperDomain(m, k) };",0,0,0,0,8,3,7,0,2,4,67,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,152,"        return FastMath.max(0, m - (n - k));",3,2,0,1,4,1,2,0,0,6,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,191,"        return FastMath.min(k, m);",0,0,0,0,2,1,4,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,198,"        int[] domain = getDomain(populationSize, numberOfSuccesses, sampleSize);",1,0,0,0,4,1,4,0,1,5,72,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,199,        if (x < domain[0] || x > domain[1]) {,2,3,1,1,7,1,0,0,0,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,200,            ret = 0.0;,1,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,202,            double p = (double) sampleSize / (double) populationSize;,3,1,0,1,4,3,0,0,0,5,57,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,203,            double q = (double) (populationSize - sampleSize) / (double) populationSize;,4,2,0,1,6,3,0,0,0,5,76,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,204,"            double p1 = SaddlePointExpansion.logBinomialProbability(x,",1,0,0,0,1,1,3,0,0,4,58,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,206,            double p2 =,1,0,0,0,0,1,0,0,0,2,11,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,209,            double p3 =,1,0,0,0,0,1,0,0,0,2,11,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,211,            ret = FastMath.exp(p1 + p2 - p3);,4,2,0,1,2,0,2,0,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,214,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,227,"        final int[] domain = getDomain(populationSize, numberOfSuccesses, sampleSize);",1,0,0,0,4,2,4,0,2,5,78,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,228,        if (x <= domain[0]) {,1,1,1,1,5,1,0,0,0,6,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,229,            ret = 1.0;,1,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,230,        } else if (x > domain[1]) {,1,1,1,1,6,2,0,0,0,6,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,231,            ret = 0.0;,1,0,0,0,0,0,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,233,"            ret = innerCumulativeProbability(domain[1], x, -1);",1,0,1,0,4,0,2,0,3,5,51,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,236,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,253,        double ret = probability(x0);,1,0,0,1,2,1,2,0,1,6,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,254,        while (x0 != x1) {,2,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,255,            x0 += dx;,2,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,256,            ret += probability(x0);,1,0,0,1,2,0,2,0,2,5,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,258,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,332,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,61,    protected AbstractIntegerDistribution() {,1,0,0,1,3,1,0,0,1,5,41,2,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,64,        random = null;,1,0,0,0,0,0,0,0,1,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,65,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,82,        if (x1 < x0) {,2,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,83,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT,",2,0,0,0,1,2,0,1,1,5,89,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,86,        return cumulativeProbability(x1) - cumulativeProbability(x0);,0,1,0,1,4,1,4,0,2,6,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,102,"            throw new OutOfRangeException(p, 0, 1);",1,0,0,0,2,2,0,1,1,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,107,            return lower;,1,0,0,0,0,1,0,0,0,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,110,            if (checkedCumulativeProbability(lower) >= p) {,1,1,0,2,5,1,2,0,1,7,47,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,111,                return lower;,1,0,0,0,0,1,0,0,0,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,120,            return upper;,1,0,0,0,0,1,0,0,0,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,133,                lower = ((int) Math.ceil(tmp)) - 1;,1,1,0,2,6,1,3,0,1,7,35,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,159,            int xm = (lower + upper) / 2;,3,2,0,1,2,1,0,0,0,5,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,160,            if (xm < lower || xm > upper) {,4,3,0,1,3,1,0,0,0,5,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,166,                xm = lower + (upper - lower) / 2;,4,3,0,1,2,0,0,0,1,5,33,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,169,            double pm = checkedCumulativeProbability(xm);,1,0,0,1,2,1,2,0,1,6,45,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,170,            if (pm >= p) {,2,1,0,1,3,1,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,171,                upper = xm;,2,0,0,0,0,0,0,0,1,2,11,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,173,                lower = xm;,2,0,0,0,0,0,0,0,1,2,11,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,175,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,181,        random.setSeed(seed);,0,0,0,1,2,0,3,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,182,        randomData.reSeed(seed);,0,0,0,1,2,0,3,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,183,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,203,        if (sampleSize <= 0) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,204,            throw new NotStrictlyPositiveException(,0,0,0,0,1,2,0,1,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,207,        int[] out = new int[sampleSize];,1,0,1,0,4,3,0,0,0,4,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,208,        for (int i = 0; i < sampleSize; i++) {,4,1,0,1,3,2,0,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,209,            out[i] = sample();,0,0,1,1,4,0,1,0,2,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,211,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,227,        double result = Double.NaN;,3,0,0,0,0,1,0,0,0,2,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,228,        result = cumulativeProbability(argument);,1,0,0,1,2,0,2,0,2,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,229,        if (Double.isNaN(result)) {,0,0,0,2,5,1,3,0,0,4,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,230,            throw new MathInternalError(LocalizedFormats,1,0,0,0,1,2,0,1,1,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,233,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,2,50,        this(boundIsAllowed ?,1,0,0,0,1,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,2,54,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,2,67,"        super(specific, wrong, max);",3,0,0,0,2,1,0,0,1,4,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,2,69,        this.max = max;,2,0,0,0,0,1,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,2,70,        this.boundIsAllowed = boundIsAllowed;,2,0,0,0,0,1,0,0,1,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,2,71,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,2,77,        return boundIsAllowed;,1,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,2,84,        return max;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,2,51,"        super(pattern, wrong, arguments);",3,0,0,0,2,1,0,0,1,4,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,2,52,        argument = wrong;,2,0,0,0,0,0,0,0,1,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,2,53,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,2,33,    protected static final Integer INTEGER_ZERO = Integer.valueOf(0);,1,0,0,1,2,3,2,1,3,7,65,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,2,59,        return argument;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,2,44,                                        Object ... args) {,1,0,0,0,2,0,0,1,0,3,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,2,45,        context = new ExceptionContext(this);,1,0,0,1,2,2,0,1,2,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,2,46,"        context.addMessage(pattern, args);",0,0,0,0,2,0,4,0,0,2,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,2,47,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,2,51,        return context;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,2,57,        return context.getMessage();,0,0,0,1,2,1,2,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,2,63,        return context.getLocalizedMessage();,0,0,0,1,2,1,2,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,2,46,"        this(LocalizedFormats.OUT_OF_RANGE_SIMPLE, wrong, lo, hi);",5,0,0,0,2,1,0,0,0,3,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,2,47,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,2,62,"        super(specific, wrong, lo, hi);",4,0,0,0,2,1,0,0,1,4,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,2,63,        this.lo = lo;,2,0,0,0,0,1,0,0,1,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,2,64,        this.hi = hi;,2,0,0,0,0,1,0,0,1,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,2,65,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,2,71,        return lo;,1,0,0,0,0,1,0,0,0,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,2,77,        return hi;,1,0,0,0,0,1,0,0,0,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,2,38,"        super(value, INTEGER_ZERO, false);",2,0,0,0,2,1,0,0,2,4,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,2,39,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,2,48,"        super(specific, value, INTEGER_ZERO, false);",3,0,0,0,2,1,0,0,2,4,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,2,49,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,2,50,        this(boundIsAllowed ?,1,0,0,0,1,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,2,54,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,2,68,"        super(specific, wrong, min);",3,0,0,0,2,1,0,0,1,4,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,2,70,        this.min = min;,2,0,0,0,0,1,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,2,71,        this.boundIsAllowed = boundIsAllowed;,2,0,0,0,0,1,0,0,1,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,2,72,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,2,78,        return boundIsAllowed;,1,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,2,85,        return min;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,2,37,    public MathInternalError() {,1,0,0,1,3,1,0,0,1,5,28,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,2,38,"        getContext().addMessage(LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",2,0,0,1,4,0,3,0,1,5,69,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,2,39,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,2,46,"        super(cause, LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",4,0,0,0,2,1,0,0,1,4,58,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,2,47,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,2,56,"        super(pattern, args);",2,0,0,0,2,1,0,0,1,4,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,2,57,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,2,45,                                     Object ... args) {,1,0,0,0,2,0,0,1,0,3,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,2,46,        context = new ExceptionContext(this);,1,0,0,1,2,2,0,1,2,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,2,47,"        context.addMessage(pattern, args);",0,0,0,0,2,0,4,0,0,2,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,2,48,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,2,60,        super(cause);,1,0,0,1,2,1,0,0,1,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,2,61,        context = new ExceptionContext(this);,1,0,0,1,2,2,0,1,2,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,2,62,"        context.addMessage(pattern, args);",0,0,0,0,2,0,4,0,0,2,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,2,63,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,2,69,        this(LocalizedFormats.ILLEGAL_STATE);,2,0,0,1,2,1,0,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,2,70,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,2,74,        return context;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,2,80,        return context.getMessage();,0,0,0,1,2,1,2,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,2,86,        return context.getLocalizedMessage();,0,0,0,1,2,1,2,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,2,37,"        super(value, INTEGER_ZERO, true);",2,0,0,0,2,1,0,0,2,4,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,2,38,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,2,47,"        super(specific, value, INTEGER_ZERO, true);",3,0,0,0,2,1,0,0,2,4,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,2,48,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/SaddlePointExpansion,2,89,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/SaddlePointExpansion,2,90,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/SaddlePointExpansion,2,49,    private static final double HALF_LOG_2_PI = 0.5 * FastMath.log(MathUtils.TWO_PI);,3,1,0,1,2,4,2,0,3,7,81,2,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/SaddlePointExpansion,2,52,"    private static final double[] EXACT_STIRLING_ERRORS = { 0.0, /* 0.0 */",1,0,0,0,3,4,0,0,3,4,70,2,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/SaddlePointExpansion,2,109,        if (z < 15.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/SaddlePointExpansion,2,110,            double z2 = 2.0 * z;,2,1,0,0,0,1,0,0,0,3,20,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/SaddlePointExpansion,2,111,            if (FastMath.floor(z2) == z2) {,1,1,0,2,5,1,3,0,0,6,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/SaddlePointExpansion,2,112,                ret = EXACT_STIRLING_ERRORS[(int) z2];,2,0,1,1,4,1,0,0,1,6,38,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/SaddlePointExpansion,2,114,                ret = Gamma.logGamma(z + 1.0) - (z + 0.5) * FastMath.log(z) +,3,6,0,1,6,0,5,0,1,6,61,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/SaddlePointExpansion,2,117,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/SaddlePointExpansion,2,118,            double z2 = z * z;,3,1,0,0,0,1,0,0,0,3,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/SaddlePointExpansion,2,119,            ret = (0.083333333333333333333 -,1,2,0,0,1,0,0,0,1,4,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/SaddlePointExpansion,2,126,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/SaddlePointExpansion,2,147,        if (FastMath.abs(x - mu) < 0.1 * (x + mu)) {,4,4,0,2,7,1,2,0,0,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/SaddlePointExpansion,2,148,            double d = x - mu;,3,1,0,0,0,1,0,0,0,3,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/SaddlePointExpansion,2,149,            double v = d / (x + mu);,4,2,0,1,2,1,0,0,0,5,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/SaddlePointExpansion,2,150,            double s1 = v * d;,3,1,0,0,0,1,0,0,0,3,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/SaddlePointExpansion,2,151,            double s = Double.NaN;,3,0,0,0,0,1,0,0,0,2,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/SaddlePointExpansion,2,152,            double ej = 2.0 * x * v;,3,1,0,0,0,1,0,0,0,3,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/SaddlePointExpansion,2,153,            v = v * v;,3,1,0,0,0,0,0,0,1,3,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/SaddlePointExpansion,2,154,            int j = 1;,1,0,0,0,0,1,0,0,0,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/SaddlePointExpansion,2,155,            while (s1 != s) {,2,1,0,1,3,1,0,0,0,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/SaddlePointExpansion,2,156,                s = s1;,2,0,0,0,0,0,0,0,1,2,7,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/SaddlePointExpansion,2,157,                ej *= v;,2,0,0,0,0,0,0,0,1,2,8,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/SaddlePointExpansion,2,158,                s1 = s + ej / ((j * 2) + 1);,4,4,0,2,4,0,0,0,1,5,28,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/SaddlePointExpansion,2,159,                ++j;,1,0,0,0,0,0,0,0,1,2,4,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/SaddlePointExpansion,2,161,            ret = s1;,2,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/SaddlePointExpansion,2,162,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/SaddlePointExpansion,2,163,            ret = x * FastMath.log(x / mu) + mu - x;,6,4,0,1,2,0,2,0,1,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/SaddlePointExpansion,2,165,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/SaddlePointExpansion,2,180,        if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/SaddlePointExpansion,2,181,            if (p < 0.1) {,1,1,0,1,3,1,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/SaddlePointExpansion,2,182,"                ret = -getDeviancePart(n, n * q) - n * p;",5,3,0,0,2,0,2,0,3,5,41,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/SaddlePointExpansion,2,184,                ret = n * FastMath.log(q);,2,1,0,1,2,0,3,0,1,6,26,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/SaddlePointExpansion,2,186,        } else if (x == n) {,2,1,0,1,4,2,0,0,0,5,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/SaddlePointExpansion,2,187,            if (q < 0.1) {,1,1,0,1,3,1,0,0,0,5,14,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/SaddlePointExpansion,2,188,"                ret = -getDeviancePart(n, n * p) - n * q;",5,3,0,0,2,0,2,0,3,5,41,9,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/SaddlePointExpansion,2,190,                ret = n * FastMath.log(p);,2,1,0,1,2,0,3,0,1,6,26,9,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/SaddlePointExpansion,2,193,            ret = getStirlingError(n) - getStirlingError(x) -,1,1,0,1,4,0,4,0,3,6,49,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/SaddlePointExpansion,2,196,            double f = (MathUtils.TWO_PI * x * (n - x)) / n;,7,3,0,2,4,1,0,0,0,5,48,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/SaddlePointExpansion,2,197,            ret = -0.5 * FastMath.log(f) + ret;,2,2,0,1,2,0,3,0,2,6,35,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/SaddlePointExpansion,2,199,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,64,"        super(K, M1, M2, M3, seed);",5,0,0,0,2,1,0,0,1,4,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,65,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,72,"        super(K, M1, M2, M3, seed);",5,0,0,0,2,1,0,0,1,4,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,73,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,79,"        super(K, M1, M2, M3, seed);",5,0,0,0,2,1,0,0,1,4,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,80,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,83,"        this(k, m1, m2, m3, new int[] { seed });",5,0,0,0,6,3,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,84,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,132,"        this(k, m1, m2, m3, new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",6,2,0,1,14,5,0,0,0,5,83,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,133,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,142,        setSeed(new int[] { seed });,1,0,0,1,6,2,1,0,1,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,143,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,66,        return next(1) != 0;,0,1,0,1,2,1,1,0,1,6,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,71,        int i = 0;,1,0,0,0,0,1,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,72,        final int iEnd = bytes.length - 3;,3,1,0,0,0,2,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,73,        while (i < iEnd) {,2,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,74,            final int random = next(32);,1,0,0,1,2,2,1,0,2,6,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,75,            bytes[i]     = (byte) (random & 0xff);,1,1,1,1,6,1,0,0,1,7,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,76,            bytes[i + 1] = (byte) ((random >>  8) & 0xff);,2,3,1,2,8,1,0,0,1,7,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,77,            bytes[i + 2] = (byte) ((random >> 16) & 0xff);,2,3,1,2,8,1,0,0,1,7,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,78,            bytes[i + 3] = (byte) ((random >> 24) & 0xff);,2,3,1,2,8,1,0,0,1,7,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,79,            i += 4;,1,0,0,0,0,0,0,0,1,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,80,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,81,        int random = next(32);,1,0,0,1,2,1,1,0,1,6,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,82,        while (i < bytes.length) {,3,1,0,1,3,1,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,83,            bytes[i++] = (byte) (random & 0xff);,2,1,1,1,6,1,0,0,2,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,84,            random     = random >> 8;,2,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,86,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,97,        return next(23) * 0x1.0p-23f;,0,1,0,1,2,1,1,0,1,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,104,        if (Double.isNaN(nextGaussian)) {,0,0,0,2,5,1,3,0,0,4,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,106,            final double x = nextDouble();,1,0,0,1,2,2,1,0,2,6,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,107,            final double y = nextDouble();,1,0,0,1,2,2,1,0,2,6,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,108,            final double alpha = 2 * FastMath.PI * x;,4,1,0,0,0,2,0,0,1,4,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,109,            final double r      = FastMath.sqrt(-2 * FastMath.log(y));,1,1,0,2,4,2,5,0,2,7,58,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,110,            random       = r * FastMath.cos(alpha);,2,1,0,1,2,0,3,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,111,            nextGaussian = r * FastMath.sin(alpha);,2,1,0,1,2,0,3,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,112,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,114,            random = nextGaussian;,2,0,0,0,0,0,0,0,1,2,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,115,            nextGaussian = Double.NaN;,3,0,0,0,0,0,0,0,1,2,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,118,        return random;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,124,        return next(32);,0,0,0,1,2,1,1,0,1,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,143,        if (n > 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,144,            if ((n & -n) == n) {,3,2,0,2,5,1,0,0,1,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,145,                return (int) ((n * (long) next(31)) >> 31);,1,2,0,3,10,3,1,0,1,7,43,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,150,                bits = next(31);,1,0,0,1,2,0,1,0,2,5,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,151,                val = bits % n;,3,1,0,0,0,0,0,0,1,3,15,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,152,            } while (bits - val + (n - 1) < 0);,3,4,0,2,5,1,0,0,0,5,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,153,            return val;,1,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,155,        throw new NotStrictlyPositiveException(n);,1,0,0,1,2,2,0,1,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,160,        final long high  = ((long) next(32)) << 32;,1,1,0,2,6,3,1,0,2,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,161,        final long  low  = ((long) next(32)) & 0xffffffffL;,1,1,0,2,6,3,1,0,2,7,51,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,162,        return high | low;,2,1,0,0,0,1,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,177,        if (n > 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,181,                bits = ((long) next(31)) << 32;,1,1,0,2,6,1,1,0,2,7,31,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,182,                bits = bits | (((long) next(32)) & 0xffffffffL);,2,2,0,3,8,1,1,0,2,7,48,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,183,                val  = bits % n;,3,1,0,0,0,0,0,0,1,3,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,184,            } while (bits - val + (n - 1) < 0);,3,4,0,2,5,1,0,0,0,5,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,185,            return val;,1,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,187,        throw new NotStrictlyPositiveException(n);,1,0,0,1,2,2,0,1,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,142,    public RandomDataGenerator(RandomGenerator rand) {,2,0,0,1,3,1,0,1,1,6,50,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,143,        this.rand = rand;,2,0,0,0,0,1,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,144,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,163,        if (len <= 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,164,"            throw new NotStrictlyPositiveException(LocalizedFormats.LENGTH, len);",3,0,0,0,2,2,0,1,1,5,69,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,168,        RandomGenerator ran = getRandomGenerator();,1,0,0,1,2,0,1,1,1,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,171,        StringBuilder outBuffer = new StringBuilder();,1,0,0,1,2,1,0,2,1,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,174,        byte[] randomBytes = new byte[(len / 2) + 1];,2,2,0,1,6,3,0,0,0,5,45,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,175,        ran.nextBytes(randomBytes);,0,0,0,1,2,0,3,0,0,3,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,178,        for (int i = 0; i < randomBytes.length; i++) {,5,1,0,1,3,2,0,0,1,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,179,            Integer c = Integer.valueOf(randomBytes[i]);,1,0,1,1,4,0,2,1,0,6,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,186,            String hex = Integer.toHexString(c.intValue() + 128);,1,1,0,2,4,0,4,1,0,6,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,189,            if (hex.length() == 1) {,0,1,0,2,5,1,2,0,0,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,190,"                hex = ""0"" + hex;",2,1,0,0,0,0,0,0,2,3,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,192,            outBuffer.append(hex);,0,0,0,1,2,0,3,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,194,"        return outBuffer.toString().substring(0, len);",0,0,0,1,4,1,4,0,0,4,46,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,199,"        return new UniformIntegerDistribution(getRandomGenerator(), lower, upper).sample();",2,0,0,1,6,2,2,1,2,7,83,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,204,        if (lower >= upper) {,2,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,205,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",2,0,0,0,1,2,0,1,1,5,87,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,208,        final long max = (upper - lower) + 1;,3,2,0,1,2,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,209,        if (max <= 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,212,            final RandomGenerator rng = getRandomGenerator();,1,0,0,1,2,1,1,1,2,7,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,214,                final long r = rng.nextLong();,1,0,0,1,2,2,2,0,1,6,30,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,215,                if (r >= lower && r <= upper) {,4,3,0,1,3,1,0,0,0,5,31,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,216,                    return r;,1,0,0,0,0,1,0,0,0,2,9,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,218,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,219,        } else if (max < Integer.MAX_VALUE){,3,1,0,1,4,2,0,0,0,5,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,221,            return lower + getRandomGenerator().nextInt((int) max);,2,1,0,2,6,2,2,0,1,7,55,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,224,"            return lower + nextLong(getRandomGenerator(), max);",1,1,0,1,4,1,3,0,2,7,51,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,241,        if (n > 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,242,            final byte[] byteArray = new byte[8];,1,0,0,0,4,4,0,0,1,4,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,246,                rng.nextBytes(byteArray);,0,0,0,1,2,0,3,0,0,3,25,9,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,247,                bits = 0;,1,0,0,0,0,0,0,0,1,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,248,                for (final byte b : byteArray) {,2,0,0,1,3,3,0,0,1,5,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,249,                    bits = (bits << 8) | (((long) b) & 0xffL);,3,3,0,3,8,1,0,0,1,6,42,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,251,                bits = bits & 0x7fffffffffffffffL;,2,1,0,0,0,0,0,0,1,3,34,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,252,                val  = bits % n;,3,1,0,0,0,0,0,0,1,3,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,253,            } while (bits - val + (n - 1) < 0);,3,4,0,2,5,1,0,0,0,5,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,254,            return val;,1,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,256,        throw new NotStrictlyPositiveException(n);,1,0,0,1,2,2,0,1,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,277,        if (len <= 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,278,"            throw new NotStrictlyPositiveException(LocalizedFormats.LENGTH, len);",3,0,0,0,2,2,0,1,1,5,69,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,282,        final RandomGenerator secRan = getSecRan();,1,0,0,1,2,1,1,1,2,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,283,        MessageDigest alg = null;,1,0,0,0,0,0,0,1,0,2,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,285,"            alg = MessageDigest.getInstance(""SHA-1"");",1,0,0,1,2,0,2,0,2,5,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,289,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,286,        } catch (NoSuchAlgorithmException ex) {,1,0,0,1,4,1,0,1,0,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,288,            throw new MathInternalError(ex);,1,0,0,1,2,2,0,1,1,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,290,        alg.reset();,0,0,0,1,2,0,2,0,0,3,12,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,293,        int numIter = (len / 40) + 1;,2,2,0,1,2,1,0,0,0,5,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,295,        StringBuilder outBuffer = new StringBuilder();,1,0,0,1,2,1,0,2,1,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,296,        for (int iter = 1; iter < numIter + 1; iter++) {,4,2,0,1,3,2,0,0,1,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,297,            byte[] randomBytes = new byte[40];,1,0,0,0,4,3,0,0,0,3,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,298,            secRan.nextBytes(randomBytes);,0,0,0,1,2,0,3,0,0,3,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,299,            alg.update(randomBytes);,0,0,0,1,2,0,3,0,0,3,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,302,            byte[] hash = alg.digest();,1,0,0,1,4,1,2,0,0,5,27,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,305,            for (int i = 0; i < hash.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,306,                Integer c = Integer.valueOf(hash[i]);,1,0,1,1,4,0,2,1,0,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,313,                String hex = Integer.toHexString(c.intValue() + 128);,1,1,0,2,4,0,4,1,0,6,53,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,316,                if (hex.length() == 1) {,0,1,0,2,5,1,2,0,0,5,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,317,"                    hex = ""0"" + hex;",2,1,0,0,0,0,0,0,2,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,319,                outBuffer.append(hex);,0,0,0,1,2,0,3,0,0,3,22,9,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,322,"        return outBuffer.toString().substring(0, len);",0,0,0,1,4,1,4,0,0,4,46,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,327,"        return new UniformIntegerDistribution(getSecRan(), lower, upper).sample();",2,0,0,1,6,2,2,1,2,7,74,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,332,        if (lower >= upper) {,2,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,333,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",2,0,0,0,1,2,0,1,1,5,87,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,336,        final RandomGenerator rng = getSecRan();,1,0,0,1,2,1,1,1,2,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,337,        final long max = (upper - lower) + 1;,3,2,0,1,2,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,338,        if (max <= 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,342,                final long r = rng.nextLong();,1,0,0,1,2,2,2,0,1,6,30,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,343,                if (r >= lower && r <= upper) {,4,3,0,1,3,1,0,0,0,5,31,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,344,                    return r;,1,0,0,0,0,1,0,0,0,2,9,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,346,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,347,        } else if (max < Integer.MAX_VALUE){,3,1,0,1,4,2,0,0,0,5,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,349,            return lower + rng.nextInt((int) max);,2,1,0,2,4,2,2,0,0,6,38,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,352,"            return lower + nextLong(rng, max);",1,1,0,0,2,1,3,0,1,6,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,371,"        return new PoissonDistribution(getRandomGenerator(), mean,",1,0,0,1,3,2,1,1,2,7,58,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,378,        if (sigma <= 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,379,"            throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sigma);",3,0,0,0,2,2,0,1,1,5,83,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,381,        return sigma * getRandomGenerator().nextGaussian() + mu;,2,2,0,1,4,1,2,0,1,7,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,396,"        return new ExponentialDistribution(getRandomGenerator(), mean,",1,0,0,1,3,2,1,1,2,7,62,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,423,"        return new GammaDistribution(getRandomGenerator(),shape, scale,",2,0,0,1,3,2,1,1,2,7,63,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,440,"        return new HypergeometricDistribution(getRandomGenerator(),populationSize,",1,0,0,1,3,2,1,1,2,7,74,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,455,"        return new PascalDistribution(getRandomGenerator(), r, p).sample();",2,0,0,1,6,2,2,1,2,7,67,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,466,"        return new TDistribution(getRandomGenerator(), df,",1,0,0,1,3,2,1,1,2,7,50,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,480,"        return new WeibullDistribution(getRandomGenerator(), shape, scale,",2,0,0,1,3,2,1,1,2,7,66,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,494,"        return new ZipfDistribution(getRandomGenerator(), numberOfElements, exponent).sample();",2,0,0,1,6,2,2,1,2,7,87,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,505,"        return new BetaDistribution(getRandomGenerator(), alpha, beta,",2,0,0,1,3,2,1,1,2,7,62,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,517,"        return new BinomialDistribution(getRandomGenerator(), numberOfTrials, probabilityOfSuccess).sample();",2,0,0,1,6,2,2,1,2,7,101,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,528,"        return new CauchyDistribution(getRandomGenerator(), median, scale,",2,0,0,1,3,2,1,1,2,7,66,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,539,"        return new ChiSquaredDistribution(getRandomGenerator(), df,",1,0,0,1,3,2,1,1,2,7,59,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,553,"        return new FDistribution(getRandomGenerator(), numeratorDf, denominatorDf,",2,0,0,1,3,2,1,1,2,7,74,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,572,"        return nextUniform(lower, upper, false);",0,0,0,0,2,1,3,0,2,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,593,        if (lower >= upper) {,2,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,594,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",2,0,0,0,1,2,0,1,1,5,87,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,598,        if (Double.isInfinite(lower)) {,0,0,0,2,5,1,3,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,599,"            throw new NotFiniteNumberException(LocalizedFormats.INFINITE_BOUND, lower);",3,0,0,0,2,2,0,1,1,5,75,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,601,        if (Double.isInfinite(upper)) {,0,0,0,2,5,1,3,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,602,"            throw new NotFiniteNumberException(LocalizedFormats.INFINITE_BOUND, upper);",3,0,0,0,2,2,0,1,1,5,75,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,605,        if (Double.isNaN(lower) || Double.isNaN(upper)) {,0,1,0,2,7,1,6,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,606,            throw new NotANumberException();,0,0,0,1,2,2,0,1,1,5,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,609,        final RandomGenerator generator = getRandomGenerator();,1,0,0,1,2,1,1,1,2,7,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,612,        double u = generator.nextDouble();,1,0,0,1,2,1,2,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,613,        while (!lowerInclusive && u <= 0.0) {,2,2,0,1,3,1,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,614,            u = generator.nextDouble();,1,0,0,1,2,0,2,0,1,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,617,        return u * upper + (1.0 - u) * lower;,4,4,0,1,2,1,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,633,        if (k > n) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,634,"            throw new NumberIsTooLargeException(LocalizedFormats.PERMUTATION_EXCEEDS_N,",2,0,0,0,1,2,0,1,1,5,75,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,637,        if (k <= 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,638,"            throw new NotStrictlyPositiveException(LocalizedFormats.PERMUTATION_SIZE,",2,0,0,0,1,2,0,1,1,5,73,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,642,        int[] index = getNatural(n);,1,0,0,1,4,1,2,0,1,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,643,"        MathArrays.shuffle(index, getRandomGenerator());",0,0,0,1,4,0,4,0,1,4,48,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,646,"        return MathArrays.copyOf(index, k);",0,0,0,0,2,1,4,0,0,3,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,664,        int len = c.size();,1,0,0,1,2,1,2,0,0,5,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,665,        if (k > len) {,2,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,666,"            throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE,",2,0,0,0,1,2,0,1,1,5,89,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,669,        if (k <= 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,670,"            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, k);",3,0,0,0,2,2,0,1,1,5,78,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,673,        Object[] objects = c.toArray();,1,0,0,1,4,0,2,1,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,674,"        int[] index = nextPermutation(len, k);",1,0,0,0,4,1,3,0,1,5,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,675,        Object[] result = new Object[k];,1,0,1,0,4,1,0,2,0,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,676,        for (int i = 0; i < k; i++) {,4,1,0,1,3,2,0,0,1,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,677,            result[i] = objects[index[i]];,0,0,1,0,6,0,0,0,1,3,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,679,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,693,       getRandomGenerator().setSeed(seed);,0,0,0,1,4,0,3,0,1,4,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,694,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,704,        getSecRan().setSeed(System.currentTimeMillis());,0,0,0,2,6,0,4,0,1,4,48,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,705,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,716,        getSecRan().setSeed(seed);,0,0,0,1,4,0,3,0,1,4,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,717,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,724,        getRandomGenerator().setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0,1,0,2,8,1,6,0,1,6,89,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,725,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,745,"        secRand = RandomGeneratorFactory.createRandomGenerator(SecureRandom.getInstance(algorithm, provider));",1,0,0,0,4,0,6,0,1,4,102,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,746,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,760,        if (rand == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,761,            initRan();,0,0,0,1,2,0,1,0,1,4,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,763,        return rand;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,771,        rand = new Well19937c(System.currentTimeMillis() + System.identityHashCode(this));,1,1,0,2,6,2,4,1,2,8,82,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,772,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,785,        if (secRand == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,786,            secRand = RandomGeneratorFactory.createRandomGenerator(new SecureRandom());,1,0,0,2,4,1,2,1,2,7,75,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,787,            secRand.setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0,1,0,2,6,1,6,0,0,5,76,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,789,        return secRand;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,800,        int target = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,801,        for (int i = list.length - 1; i >= end; i--) {,6,2,0,1,3,2,0,0,1,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,802,            if (i == 0) {,1,1,0,1,3,1,0,0,0,5,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,803,                target = 0;,1,0,0,0,0,0,0,0,1,2,11,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,806,"                target = nextInt(0, i);",1,0,0,0,2,0,2,0,2,4,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,808,            int temp = list[target];,1,0,1,0,2,1,0,0,0,4,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,809,            list[target] = list[i];,0,0,1,0,4,0,0,0,1,3,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,810,            list[i] = temp;,1,0,1,0,2,0,0,0,1,4,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,812,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,821,        int[] natural = new int[n];,1,0,1,0,4,3,0,0,0,4,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,822,        for (int i = 0; i < n; i++) {,4,1,0,1,3,2,0,0,1,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,823,            natural[i] = i;,1,0,1,0,2,0,0,0,1,4,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,825,        return natural;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotFiniteNumberException,2,40,"        this(LocalizedFormats.NOT_FINITE_NUMBER, wrong, args);",4,0,0,0,2,1,0,0,0,3,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotFiniteNumberException,2,41,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotFiniteNumberException,2,53,"        super(specific, wrong, args);",3,0,0,0,2,1,0,0,1,4,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotFiniteNumberException,2,54,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotANumberException,2,35,"        super(LocalizedFormats.NAN_NOT_ALLOWED, Double.valueOf(Double.NaN));",4,0,0,1,4,1,2,0,1,6,68,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotANumberException,2,36,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,2,126,    public RandomDataImpl(RandomGenerator rand) {,2,0,0,1,3,1,0,1,1,6,45,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,2,127,        delegate = new RandomDataGenerator(rand);,2,0,0,1,2,1,0,1,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,2,128,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,2,136,        return delegate;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,2,156,        return delegate.nextHexString(len);,0,0,0,1,2,1,3,0,0,4,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,2,161,"       return delegate.nextInt(lower, upper);",0,0,0,0,2,1,4,0,0,3,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,2,166,"        return delegate.nextLong(lower, upper);",0,0,0,0,2,1,4,0,0,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,2,186,        return delegate.nextSecureHexString(len);,0,0,0,1,2,1,3,0,0,4,41,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,2,191,"        return delegate.nextSecureInt(lower, upper);",0,0,0,0,2,1,4,0,0,3,44,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,2,196,"        return delegate.nextSecureLong(lower,upper);",0,0,0,0,2,1,4,0,0,3,44,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,2,213,        return delegate.nextPoisson(mean);,0,0,0,1,2,1,3,0,0,4,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,2,218,"        return delegate.nextGaussian(mu,sigma);",0,0,0,0,2,1,4,0,0,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,2,233,        return delegate.nextExponential(mean);,0,0,0,1,2,1,3,0,0,4,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,2,248,"        return delegate.nextUniform(lower, upper);",0,0,0,0,2,1,4,0,0,3,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,2,265,"        return delegate.nextUniform(lower, upper, lowerInclusive);",0,0,0,0,2,1,5,0,0,3,58,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,2,279,"        return delegate.nextBeta(alpha, beta);",0,0,0,0,2,1,4,0,0,3,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,2,293,"        return delegate.nextBinomial(numberOfTrials, probabilityOfSuccess);",0,0,0,0,2,1,4,0,0,3,67,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,2,307,"        return delegate.nextCauchy(median, scale);",0,0,0,0,2,1,4,0,0,3,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,2,320,       return delegate.nextChiSquare(df);,0,0,0,1,2,1,3,0,0,4,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,2,336,"        return delegate.nextF(numeratorDf, denominatorDf);",0,0,0,0,2,1,4,0,0,3,50,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,2,363,"        return delegate.nextGamma(shape, scale);",0,0,0,0,2,1,4,0,0,3,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,2,383,"        return delegate.nextHypergeometric(populationSize, numberOfSuccesses, sampleSize);",0,0,0,0,2,1,5,0,0,3,82,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,2,401,"        return delegate.nextPascal(r, p);",0,0,0,0,2,1,4,0,0,3,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,2,415,        return delegate.nextT(df);,0,0,0,1,2,1,3,0,0,4,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,2,431,"        return delegate.nextWeibull(shape, scale);",0,0,0,0,2,1,4,0,0,3,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,2,447,"        return delegate.nextZipf(numberOfElements, exponent);",0,0,0,0,2,1,4,0,0,3,53,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,2,461,        delegate.reSeed(seed);,0,0,0,1,2,0,3,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,2,462,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,2,472,        delegate.reSeedSecure();,0,0,0,1,2,0,2,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,2,473,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,2,485,        delegate.reSeedSecure(seed);,0,0,0,1,2,0,3,0,0,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,2,486,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,2,493,        delegate.reSeed();,0,0,0,1,2,0,2,0,0,3,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,2,494,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,2,518,"       delegate.setSecureAlgorithm(algorithm, provider);",0,0,0,0,2,0,4,0,0,2,49,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,2,519,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,2,532,"        return delegate.nextPermutation(n, k);",0,0,0,0,2,1,4,0,0,3,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,2,550,"        return delegate.nextSample(c, k);",0,0,0,0,2,1,4,0,0,3,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,2,566,"        return distribution.inverseCumulativeProbability(nextUniform(0, 1));",0,0,0,0,4,1,3,0,1,4,68,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,2,583,"        return distribution.inverseCumulativeProbability(nextUniform(0, 1));",0,0,0,0,4,1,3,0,1,4,68,5,0.0,0,0
