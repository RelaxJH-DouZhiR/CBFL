dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,other,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line
defect4j,math,org/apache/commons/math/stat/Frequency,90,132,        } catch (ClassCastException ex) {   ,1,0,0,1,4,1,0,1,0,5,33,6,1.0,1,1
defect4j,math,org/apache/commons/math/stat/Frequency,90,134,"            throw new IllegalArgumentException(""Value not comparable to existing values."");",0,0,0,1,2,2,0,1,2,5,79,7,1.0,1,1
defect4j,math,org/apache/commons/math/stat/Frequency,90,121,        Object obj = v;,2,0,0,0,0,0,0,1,0,2,15,4,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,122,        if (v instanceof Integer) {,1,0,0,1,3,2,0,1,0,5,27,5,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,126,            Long count = (Long) freqTable.get(obj);,1,0,0,1,4,0,3,2,0,5,39,6,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,57,    public Frequency() {,1,0,0,1,3,1,0,0,1,5,20,2,0.16667,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,58,        freqTable = new TreeMap();,1,0,0,1,2,1,0,1,2,6,26,4,0.16667,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,59,    },0,0,0,0,1,0,0,0,0,1,1,2,0.16667,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,66,    public Frequency(Comparator comparator) {,2,0,0,1,3,1,0,1,1,6,41,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,67,        freqTable = new TreeMap(comparator);,2,0,0,1,2,1,0,1,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,68,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,78,        NumberFormat nf = NumberFormat.getPercentInstance();,1,0,0,1,2,0,2,1,0,5,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,79,        StringBuffer outBuffer = new StringBuffer();,1,0,0,1,2,1,0,2,1,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,80,"        outBuffer.append(""Value \t Freq. \t Pct. \t Cum Pct. \n"");",0,0,0,1,2,0,2,0,1,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,81,        Iterator iter = freqTable.keySet().iterator();,1,0,0,1,4,0,3,1,0,5,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,82,        while (iter.hasNext()) {,0,0,0,2,5,1,2,0,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,83,            Object value = iter.next();,1,0,0,1,2,0,2,1,0,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,84,            outBuffer.append(value);,0,0,0,1,2,0,3,0,0,3,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,85,            outBuffer.append('\t');,0,0,0,1,2,0,2,0,1,4,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,86,            outBuffer.append(getCount(value));,0,0,0,2,4,0,4,0,1,4,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,87,            outBuffer.append('\t');,0,0,0,1,2,0,2,0,1,4,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,88,            outBuffer.append(nf.format(getPct(value)));,0,0,0,3,6,0,6,0,1,4,43,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,89,            outBuffer.append('\t');,0,0,0,1,2,0,2,0,1,4,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,90,            outBuffer.append(nf.format(getCumPct(value)));,0,0,0,3,6,0,6,0,1,4,46,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,91,            outBuffer.append('\n');,0,0,0,1,2,0,2,0,1,4,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,92,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,93,        return outBuffer.toString();,0,0,0,1,2,1,2,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,123,           obj = Long.valueOf(((Integer) v).longValue());,2,0,0,3,8,0,3,1,1,6,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,127,            if (count == null) {,1,1,0,1,3,1,0,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,128,"                freqTable.put(obj, Long.valueOf(1));",0,0,0,1,4,0,5,0,0,3,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,130,"                freqTable.put(obj, Long.valueOf(count.longValue() + 1));",0,1,0,2,6,0,7,0,0,4,56,9,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,135,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,136,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,144,        addValue(Long.valueOf(v));,0,0,0,2,4,0,4,0,1,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,145,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,153,        addValue(Long.valueOf(v.longValue()));,0,0,0,3,6,0,5,0,1,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,154,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,162,        addValue(Long.valueOf(v));,0,0,0,2,4,0,4,0,1,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,163,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,171,        addValue(Character.valueOf(v));,0,0,0,2,4,0,4,0,1,4,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,172,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,176,        freqTable.clear();,0,0,0,1,2,0,2,0,0,3,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,177,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,189,        return freqTable.keySet().iterator();,0,0,0,1,4,1,3,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,200,        long result = 0;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,201,        Iterator iterator = freqTable.values().iterator();,1,0,0,1,4,0,3,1,0,5,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,202,        while (iterator.hasNext())  {,0,0,0,2,5,1,2,0,0,4,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,203,            result += ((Long) iterator.next()).longValue();,1,0,0,2,8,0,3,1,1,6,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,205,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,216,        if (v instanceof Integer) {,1,0,0,1,3,2,0,1,0,5,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,217,            return getCount(((Integer) v).longValue());,1,0,0,3,8,1,2,1,1,7,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,219,        long result = 0;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,221,            Long count =  (Long) freqTable.get(v);,1,0,0,1,4,0,3,2,0,5,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,222,            if (count != null) {,1,1,0,1,3,1,0,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,223,                result = count.longValue();,1,0,0,1,2,0,2,0,1,5,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,227,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,225,        } catch (ClassCastException ex) {,1,0,0,1,4,1,0,1,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,228,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,238,        return getCount(Long.valueOf(v));,0,0,0,2,4,1,4,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,248,        return getCount(Long.valueOf(v));,0,0,0,2,4,1,4,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,258,        return getCount(Character.valueOf(v));,0,0,0,2,4,1,4,0,1,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,273,        final long sumFreq = getSumFreq();,1,0,0,1,2,2,1,0,2,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,274,        if (sumFreq == 0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,275,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,277,        return (double) getCount(v) / (double) sumFreq;        ,1,1,0,1,6,3,2,0,1,7,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,288,        return getPct(Long.valueOf(v));       ,0,0,0,2,4,1,4,0,1,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,299,        return getPct(Long.valueOf(v));         ,0,0,0,2,4,1,4,0,1,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,310,        return getPct(Character.valueOf(v));         ,0,0,0,2,4,1,4,0,1,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,324,        if (getSumFreq() == 0) {,0,1,0,2,5,1,1,0,1,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,325,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,327,        if (v instanceof Integer) {,1,0,0,1,3,2,0,1,0,5,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,328,            return getCumFreq(((Integer) v).longValue());,1,0,0,3,8,1,2,1,1,7,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,330,        Comparator c = freqTable.comparator();,1,0,0,1,2,0,2,1,0,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,331,        if (c == null) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,332,            c = new NaturalComparator();,1,0,0,1,2,1,0,1,2,6,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,334,        long result = 0;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,337,            Long value = (Long) freqTable.get(v);,1,0,0,1,4,0,3,2,0,5,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,338,            if (value != null) {,1,1,0,1,3,1,0,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,339,                result = value.longValue();,1,0,0,1,2,0,2,0,1,5,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,343,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,341,        } catch (ClassCastException ex) {,1,0,0,1,4,1,0,1,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,342,            return result;   // v is not comparable,1,0,0,0,0,1,0,0,0,2,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,345,"        if (c.compare(v, freqTable.firstKey()) < 0) {",0,1,0,1,7,1,5,0,0,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,346,"            return 0;  // v is comparable, but less than first value",0,0,0,0,0,1,0,0,0,1,56,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,349,"        if (c.compare(v, freqTable.lastKey()) >= 0) {",0,1,0,1,7,1,5,0,0,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,350,"            return getSumFreq();    // v is comparable, but greater than the last value",0,0,0,1,2,1,1,0,1,5,75,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,353,        Iterator values = valuesIterator();,1,0,0,1,2,0,1,1,1,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,354,        while (values.hasNext()) {,0,0,0,2,5,1,2,0,0,4,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,355,            Object nextValue = values.next();,1,0,0,1,2,0,2,1,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,356,"            if (c.compare(v, nextValue) > 0) {",0,1,0,0,5,1,4,0,0,4,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,357,                result += getCount(nextValue);,1,0,0,1,2,0,2,0,2,5,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,359,                return result;,1,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,361,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,362,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,374,        return getCumFreq(Long.valueOf(v));       ,0,0,0,2,4,1,4,0,1,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,386,        return getCumFreq(Long.valueOf(v));         ,0,0,0,2,4,1,4,0,1,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,398,        return getCumFreq(Character.valueOf(v));         ,0,0,0,2,4,1,4,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,415,        final long sumFreq = getSumFreq();,1,0,0,1,2,2,1,0,2,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,416,        if (sumFreq == 0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,417,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,419,        return (double) getCumFreq(v) / (double) sumFreq;        ,1,1,0,1,6,3,2,0,1,7,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,432,        return getCumPct(Long.valueOf(v));       ,0,0,0,2,4,1,4,0,1,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,445,        return getCumPct(Long.valueOf(v));         ,0,0,0,2,4,1,4,0,1,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,458,        return getCumPct(Character.valueOf(v));         ,0,0,0,2,4,1,4,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,465,"    private static class NaturalComparator implements Comparator, Serializable {",1,0,0,0,1,4,0,2,2,5,76,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,484,            return ((Comparable)o1).compareTo(o2);,1,0,0,2,6,1,2,1,0,6,38,6,0.0,0,0
