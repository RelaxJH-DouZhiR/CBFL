dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,other,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,138,                Integer minRow = null;,1,0,0,0,0,0,0,1,0,2,22,7,0.33333,1,1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,139,                int minIndex = tableau.getWidth();,1,0,0,1,2,1,2,0,0,5,34,8,0.33333,1,1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,140,                for (Integer row : minRatioPositions) {,2,0,0,1,3,1,0,1,0,5,39,7,0.33333,1,1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,141,                    int i = tableau.getNumObjectiveFunctions();,1,0,0,1,2,1,2,0,0,5,43,10,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,142,                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {,4,4,0,2,5,1,2,0,1,7,58,9,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,143,                        if (row == tableau.getBasicRow(i)) {,1,1,0,2,5,1,3,0,0,6,36,11,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,144,                            if (i < minIndex) {,2,1,0,1,3,1,0,0,0,5,19,13,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,145,                                minIndex = i;,2,0,0,0,0,0,0,0,1,2,13,15,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,146,                                minRow = row;,2,0,0,0,0,0,0,0,1,2,13,15,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,150,                },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,151,                return minRow;,1,0,0,0,0,1,0,0,0,2,14,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,45,                                     Object ... args) {,1,0,0,0,2,0,0,1,0,3,18,3,0.25,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,46,        context = new ExceptionContext(this);,1,0,0,1,2,2,0,1,2,6,37,4,0.25,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,47,"        context.addMessage(pattern, args);",0,0,0,0,2,0,4,0,0,2,34,5,0.25,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,48,    },0,0,0,0,1,0,0,0,0,1,1,2,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,127,                },0,0,0,0,1,0,0,0,0,1,1,2,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,121,                        int column = i + tableau.getArtificialVariableOffset();,2,1,0,1,2,1,2,0,0,6,55,12,0.125,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,122,"                        final double entry = tableau.getEntry(row, column);",1,0,0,0,2,2,4,0,1,5,51,11,0.125,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,123,"                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {",0,1,0,2,9,1,9,0,0,5,86,11,0.125,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,124,                            return row;,1,0,0,0,0,1,0,0,0,2,11,13,0.125,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,104,                    minRatioPositions.add(i);,0,0,0,1,2,0,3,0,0,3,25,11,0.11111,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,119,                for (Integer row : minRatioPositions) {,2,0,0,1,3,1,0,1,0,5,39,7,0.11111,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,120,                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {,3,1,0,2,5,2,2,0,1,7,63,9,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,117,            return -1;,0,0,0,0,0,1,0,0,1,2,10,7,0.07692,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,231,"                matrix.setEntry(row, getSlackVariableOffset() + slackVar++, -1); // excess",1,1,0,1,4,0,4,0,3,6,74,10,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,227,            doIteration(tableau);,0,0,0,1,2,0,2,0,1,4,21,6,0.06667,1,1
defect4j,math,org/apache/commons/math3/util/Precision,28,115,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0625,0,0
defect4j,math,org/apache/commons/math3/util/MathUtils,28,257,        if (o == null) {,1,1,0,1,3,1,0,0,0,5,16,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/util/MathUtils,28,260,    },0,0,0,0,1,0,0,0,0,1,1,2,0.05556,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,74,"        throws DimensionMismatchException, NoDataException, NullArgumentException {",3,0,0,0,1,1,0,0,0,3,75,2,0.05556,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,75,        copyIn(d);,0,0,0,1,2,0,2,0,1,4,10,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,76,    },0,0,0,0,1,0,0,0,0,1,1,2,0.05556,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,262,        if (data == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,263,            if (row > 0) {,1,1,0,1,3,1,0,0,0,5,14,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,266,            if (column > 0) {,1,1,0,1,3,1,0,0,0,5,17,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,269,            MathUtils.checkNotNull(subMatrix);,0,0,0,1,2,0,3,0,0,3,34,7,0.05556,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,270,            final int nRows = subMatrix.length;,3,0,0,0,0,2,0,0,1,3,35,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,271,            if (nRows == 0) {,1,1,0,1,3,1,0,0,0,5,17,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,275,            final int nCols = subMatrix[0].length;,2,0,1,0,2,2,0,0,1,5,38,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,276,            if (nCols == 0) {,1,1,0,1,3,1,0,0,0,5,17,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,279,            data = new double[subMatrix.length][nCols];,3,0,1,0,4,2,0,0,1,5,43,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,280,            for (int i = 0; i < data.length; ++i) {,5,1,0,1,3,2,0,0,1,6,39,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,281,                if (subMatrix[i].length != nCols) {,2,1,1,1,5,1,0,0,0,6,35,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,284,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",2,1,1,0,6,0,4,0,0,5,64,9,0.05556,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,286,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.05556,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,290,    },0,0,0,0,1,0,0,0,0,1,1,2,0.05556,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,526,"        setSubMatrix(in, 0, 0);",0,0,0,0,2,0,2,0,1,3,23,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,527,    },0,0,0,0,1,0,0,0,0,1,1,2,0.05556,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,52,    protected AbstractRealMatrix() {},1,0,0,1,4,1,0,0,1,5,33,2,0.05556,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,209,    },0,0,0,0,1,0,0,0,0,1,1,2,0.05556,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,337,        Set<Integer> columnsToDrop = new TreeSet<Integer>();,1,0,0,1,2,1,0,4,1,6,52,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,338,        columnsToDrop.add(0);,0,0,0,1,2,0,2,0,0,3,21,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,341,        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {,3,1,0,2,7,2,2,0,3,7,82,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,342,"            final double entry = tableau.getEntry(0, i);",1,0,0,0,2,2,3,0,1,5,44,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,343,"            if (Precision.compareTo(entry, 0d, epsilon) > 0) {",0,1,0,0,5,1,4,0,0,4,50,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,349,        for (int i = 0; i < getNumArtificialVariables(); i++) {,3,1,0,2,5,2,1,0,2,7,55,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,350,            int col = i + getArtificialVariableOffset();,2,1,0,1,2,1,1,0,1,7,44,7,0.05556,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,351,            if (getBasicRow(col) == null) {,0,1,0,2,5,1,2,0,1,6,31,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,352,                columnsToDrop.add(col);,0,0,0,1,2,0,3,0,0,3,23,9,0.05556,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,356,        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];,1,2,0,1,14,3,4,0,2,7,83,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,357,        for (int i = 1; i < getHeight(); i++) {,3,1,0,2,5,2,1,0,2,7,39,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,358,            int col = 0;,1,0,0,0,0,1,0,0,0,2,12,7,0.05556,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,359,            for (int j = 0; j < getWidth(); j++) {,3,1,0,2,5,2,1,0,2,7,38,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,360,                if (!columnsToDrop.contains(j)) {,0,0,0,2,5,1,3,0,1,5,33,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,361,"                    matrix[i - 1][col++] = tableau.getEntry(i, j);",2,1,1,0,6,0,4,0,2,6,46,10,0.05556,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,367,        Integer[] drop = columnsToDrop.toArray(new Integer[columnsToDrop.size()]);,1,0,0,2,8,1,4,2,0,6,74,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,368,        for (int i = drop.length - 1; i >= 0; i--) {,5,2,0,1,3,2,0,0,1,6,44,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,369,            columnLabels.remove((int) drop[i]);,0,0,1,2,6,1,2,0,0,5,35,7,0.05556,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,372,        this.tableau = new Array2DRowRealMatrix(matrix);,2,0,0,1,2,2,0,1,2,6,48,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,373,        this.numArtificialVariables = 0;,1,0,0,0,0,1,0,0,1,3,32,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,374,    },0,0,0,0,1,0,0,0,0,1,1,2,0.05556,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,202,            doIteration(tableau);,0,0,0,1,2,0,2,0,1,4,21,6,0.05,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,325,        return row;,1,0,0,0,0,1,0,0,0,2,11,4,0.05,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,486,"        return new ArrayRealVector(getRow(row), false);",0,0,0,1,4,2,2,1,3,6,47,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,491,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,0,2,1,3,0,0,3,37,5,0.04762,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,492,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,493,        if (vector.getDimension() != nCols) {,1,1,0,2,5,1,2,0,0,6,37,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,497,        for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,498,"            setEntry(row, i, vector.getEntry(i));",0,0,0,1,4,0,6,0,1,4,37,6,0.04762,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,500,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04762,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,522,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,0,2,1,3,0,0,3,37,5,0.04762,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,523,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,524,        final double[] out = new double[nCols];,1,0,1,0,4,4,0,0,1,5,39,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,525,        for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,526,"            out[i] = getEntry(row, i);",0,0,1,0,4,0,3,0,2,4,26,6,0.04762,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,529,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,64,    public ArrayRealVector(int size) {,2,0,0,1,3,2,0,0,1,5,34,2,0.04762,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,65,        data = new double[size];,1,0,1,0,2,2,0,0,1,5,24,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,66,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04762,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,317,        if (v instanceof ArrayRealVector) {,1,0,0,1,3,2,0,1,0,5,35,5,0.04762,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,318,            final double[] vData = ((ArrayRealVector) v).data;,3,0,0,2,6,2,0,1,1,6,50,6,0.04762,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,319,            final int dim = vData.length;,3,0,0,0,0,2,0,0,1,3,29,6,0.04762,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,320,            checkVectorDimensions(dim);,0,0,0,1,2,0,2,0,1,4,27,6,0.04762,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,321,            ArrayRealVector result = new ArrayRealVector(dim);,2,0,0,1,2,1,0,2,1,6,50,6,0.04762,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,322,            double[] resultData = result.data;,3,0,0,0,2,1,0,0,0,3,34,7,0.04762,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,323,            for (int i = 0; i < dim; i++) {,4,1,0,1,3,2,0,0,1,6,31,6,0.04762,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,324,                resultData[i] = data[i] - vData[i];,0,1,1,0,6,0,0,0,1,4,35,8,0.04762,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,326,            return result;,1,0,0,0,0,1,0,0,0,2,14,6,0.04762,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,591,            return data[index];,0,0,1,0,2,1,0,0,0,3,19,7,0.04762,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,201,        while (!tableau.isOptimal()) {,0,0,0,2,5,1,2,0,1,5,30,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,206,"        if (!Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, epsilon)) {",0,0,0,1,9,1,7,0,1,5,82,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,160,"        columnLabels.add(""W"");",0,0,0,1,2,0,2,0,1,4,22,7,0.04762,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,170,"        columnLabels.add(""s"" + i);",1,1,0,1,2,0,2,0,1,6,26,7,0.04762,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,173,"        columnLabels.add(""a"" + i);",1,1,0,1,2,0,2,0,1,6,26,7,0.04762,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,193,"            matrix.setEntry(0, 0, -1);",0,0,0,0,2,0,2,0,1,3,26,7,0.04762,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,230,            } else if (constraint.getRelationship() == Relationship.GEQ) {,2,1,0,2,6,2,2,0,0,6,62,7,0.04762,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,237,"                matrix.setEntry(0, getArtificialVariableOffset() + artificialVar, 1);",1,1,0,1,4,0,3,0,1,6,69,9,0.04762,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,238,"                matrix.setEntry(row, getArtificialVariableOffset() + artificialVar++, 1);",1,1,0,1,4,0,4,0,2,6,73,9,0.04762,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,239,"                matrix.setRowVector(0, matrix.getRowVector(0).subtract(matrix.getRowVector(row)));",0,0,0,2,8,0,8,0,0,3,82,9,0.04762,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,521,        return getNumObjectiveFunctions() + numDecisionVariables + numSlackVariables;,2,1,0,1,2,1,1,0,1,7,77,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,224,        tableau.dropPhase1Objective();,0,0,0,1,2,0,2,0,0,3,30,5,0.04545,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,226,        while (!tableau.isOptimal()) {,0,0,0,2,5,1,2,0,1,5,30,4,0.04545,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,316,        Integer row = null;,1,0,0,0,0,0,0,1,0,2,19,4,0.04545,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,317,        for (int i = 0; i < getHeight(); i++) {,3,1,0,2,5,2,1,0,2,7,39,4,0.04545,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,318,"            final double entry = getEntry(i, col);",1,0,0,0,2,2,3,0,2,5,38,6,0.04545,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,319,"            if (Precision.equals(entry, 1d, maxUlps) && (row == null)) {",1,2,0,1,7,1,4,0,0,6,60,6,0.04545,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,320,                row = i;,2,0,0,0,0,0,0,0,1,2,8,8,0.04545,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,321,"            } else if (!Precision.equals(entry, 0d, maxUlps)) {",0,0,0,0,6,2,4,0,1,4,51,7,0.04545,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,322,                return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.04545,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,333,        if (getNumObjectiveFunctions() == 1) {,0,1,0,2,5,1,1,0,1,6,38,4,0.04545,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,513,        return getNumObjectiveFunctions() + numDecisionVariables;,1,1,0,1,2,1,1,0,1,7,57,4,0.04545,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,91,            return -1;,0,0,0,0,0,1,0,0,1,2,10,7,0.04348,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,114,"        if (equals(x, y, maxUlps)) {",0,0,0,0,5,1,4,0,1,4,28,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,116,        } else if (x < y) {,2,1,0,1,4,2,0,0,0,5,19,5,0.04348,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,119,        return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,70,        double minValue = 0;,1,0,0,0,0,1,0,0,0,2,20,5,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,71,        Integer minPos = null;,1,0,0,0,0,0,0,1,0,2,22,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,72,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,3,2,0,2,7,2,4,0,1,7,83,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,73,"            final double entry = tableau.getEntry(0, i);",1,0,0,0,2,2,3,0,1,5,44,6,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,76,            if (entry < minValue) {,2,1,0,1,3,1,0,0,0,5,23,6,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,77,                minValue = entry;,2,0,0,0,0,0,0,0,1,2,17,8,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,78,                minPos = i;,2,0,0,0,0,0,0,0,1,2,11,8,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,81,        return minPos;,1,0,0,0,0,1,0,0,0,2,14,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,92,        List<Integer> minRatioPositions = new ArrayList<Integer>();,1,0,0,1,2,1,0,4,1,6,59,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,93,        double minRatio = Double.MAX_VALUE;,3,0,0,0,0,1,0,0,0,2,35,5,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,94,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {,3,1,0,2,7,2,4,0,1,7,80,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,95,"            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);",1,1,0,1,4,2,5,0,1,7,63,6,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,96,"            final double entry = tableau.getEntry(i, col);",1,0,0,0,2,2,4,0,1,5,46,6,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,98,"            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {",0,1,0,0,5,1,4,0,0,4,50,6,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,99,                final double ratio = rhs / entry;,3,1,0,0,0,2,0,0,1,4,33,8,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,102,"                final int cmp = Double.compare(ratio, minRatio);",1,0,0,0,2,2,4,0,1,5,48,8,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,103,                if (cmp == 0) {,1,1,0,1,3,1,0,0,0,5,15,8,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,105,                } else if (cmp < 0) {,1,1,0,1,4,2,0,0,0,5,21,9,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,106,                    minRatio = ratio;,2,0,0,0,0,0,0,0,1,2,17,11,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,107,                    minRatioPositions = new ArrayList<Integer>();,1,0,0,1,2,1,0,2,2,6,45,11,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,108,                    minRatioPositions.add(i);,0,0,0,1,2,0,3,0,0,3,25,12,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,113,        if (minRatioPositions.size() == 0) {,0,1,0,2,5,1,2,0,0,5,36,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,115,        } else if (minRatioPositions.size() > 1) {,0,1,0,2,6,2,2,0,0,5,42,5,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,153,        return minRatioPositions.get(0);,0,0,0,1,2,1,2,0,0,4,32,5,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,165,        incrementIterationsCounter();,0,0,0,1,2,0,1,0,1,4,29,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,167,        Integer pivotCol = getPivotColumn(tableau);,1,0,0,1,2,0,2,1,1,6,43,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,168,"        Integer pivotRow = getPivotRow(tableau, pivotCol);",1,0,0,0,2,0,3,1,1,5,50,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,169,        if (pivotRow == null) {,1,1,0,1,3,1,0,0,0,5,23,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,174,"        double pivotVal = tableau.getEntry(pivotRow, pivotCol);",1,0,0,0,2,1,4,0,0,4,55,5,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,175,"        tableau.divideRow(pivotRow, pivotVal);",0,0,0,0,2,0,4,0,0,2,38,5,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,178,        for (int i = 0; i < tableau.getHeight(); i++) {,3,1,0,2,5,2,2,0,1,7,47,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,179,            if (i != pivotRow) {,2,1,0,1,3,1,0,0,0,5,20,6,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,180,"                final double multiplier = tableau.getEntry(i, pivotCol);",1,0,0,0,2,2,4,0,1,5,56,8,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,181,"                tableau.subtractRow(i, pivotRow, multiplier);",0,0,0,0,2,0,5,0,0,2,45,9,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,184,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,127,        if (++iterations > maxIterations) {,2,1,0,1,3,1,0,0,1,6,35,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,130,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,270,"        return new LinearConstraint(constraint.getCoefficients(),",0,0,0,1,3,2,2,1,1,6,57,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,392,                return false;,0,0,0,0,0,1,0,0,1,2,13,8,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,446,        for (int j = 0; j < getWidth(); j++) {,3,1,0,2,5,2,1,0,2,7,38,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,447,"            tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);",1,1,0,0,4,0,8,0,0,4,77,7,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,449,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,463,        for (int i = 0; i < getWidth(); i++) {,3,1,0,2,5,2,1,0,2,7,38,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,464,"            double result = tableau.getEntry(minuendRow, i) - tableau.getEntry(subtrahendRow, i) * multiple;",2,2,0,0,4,1,8,0,0,5,96,7,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,466,            if (FastMath.abs(result) < CUTOFF_THRESHOLD) {,1,1,0,2,5,1,3,0,0,6,46,6,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,467,                result = 0.0;,1,0,0,0,0,0,0,0,1,2,13,8,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,469,"            tableau.setEntry(minuendRow, i, result);",0,0,0,0,2,0,5,0,0,2,40,7,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,471,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,486,        return tableau.getRowDimension();,0,0,0,1,2,1,2,0,0,4,33,5,0.04167,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,529,        return getWidth() - 1;,0,1,0,1,2,1,1,0,1,6,22,4,0.04167,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,62,        EPSILON = Double.longBitsToDouble((EXPONENT_OFFSET - 53l) << 52);,2,2,0,2,4,0,2,0,1,6,65,4,0.04,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,69,        SAFE_MIN = Double.longBitsToDouble((EXPONENT_OFFSET - 1022l) << 52);,2,2,0,2,4,0,2,0,1,6,68,4,0.04,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,70,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,88,"        if (equals(x, y, eps)) {",0,0,0,0,5,1,4,0,1,4,24,4,0.04,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,89,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.04,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,90,        } else if (x < y) {,2,1,0,1,4,2,0,0,0,5,19,5,0.04,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,93,        return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.04,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,264,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",3,3,0,1,4,1,5,0,1,7,53,4,0.04,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,300,        long xInt = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,39,5,0.04,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,301,        long yInt = Double.doubleToLongBits(y);,1,0,0,1,2,1,3,0,0,5,39,5,0.04,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,304,        if (xInt < 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.04,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,305,            xInt = SGN_MASK - xInt;,3,1,0,0,0,0,0,0,1,3,23,6,0.04,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,307,        if (yInt < 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.04,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,311,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,4,2,0,1,2,2,2,0,1,7,61,4,0.04,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,313,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,1,1,0,1,4,1,6,0,2,7,55,4,0.04,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,113,    private static final double LN_QUICK_COEF[][] = {,1,0,0,0,5,4,0,0,3,4,49,2,0.04,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,126,    private static final double LN_HI_PREC_COEF[][] = {,1,0,0,0,5,4,0,0,3,4,51,2,0.04,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,139,    private static final double SINE_TABLE_A[] =,1,0,0,0,2,4,0,0,3,4,44,2,0.04,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,158,    private static final double SINE_TABLE_B[] =,1,0,0,0,2,4,0,0,3,4,44,2,0.04,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,177,    private static final double COSINE_TABLE_A[] =,1,0,0,0,2,4,0,0,3,4,46,2,0.04,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,196,    private static final double COSINE_TABLE_B[] =,1,0,0,0,2,4,0,0,3,4,46,2,0.04,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,216,    private static final double TANGENT_TABLE_A[] =,1,0,0,0,2,4,0,0,3,4,47,2,0.04,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,235,    private static final double TANGENT_TABLE_B[] =,1,0,0,0,2,4,0,0,3,4,47,2,0.04,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,254,    private static final long RECIP_2PI[] = new long[] {,1,0,0,0,5,6,0,0,3,4,52,2,0.04,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,275,    private static final long PI_O_4_BITS[] = new long[] {,1,0,0,0,5,6,0,0,3,4,54,2,0.04,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,283,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",1,0,0,0,4,4,0,0,3,4,126,2,0.04,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,286,"    private static final double CBRTTWO[] = { 0.6299605249474366,",1,0,0,0,3,4,0,0,3,4,61,2,0.04,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2909,        return (x < 0l) ? -x : x;,3,1,0,1,2,1,0,0,1,6,25,5,0.04,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2927,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,4,2,0,1,4,1,0,0,1,6,61,5,0.04,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,43,        return getDefaultNumberFormat(Locale.getDefault());,0,0,0,2,4,1,3,0,1,5,51,4,0.04,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,54,        final NumberFormat nf = NumberFormat.getInstance(locale);,1,0,0,1,2,1,3,1,1,7,57,4,0.04,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,55,        nf.setMaximumFractionDigits(10);,0,0,0,1,2,0,2,0,0,3,32,5,0.04,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,56,        return nf;,1,0,0,0,0,1,0,0,0,2,10,4,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,59,public abstract class RealVector {,1,0,0,0,1,3,0,0,2,4,34,1,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1117,    protected class SparseEntryIterator implements Iterator<Entry> {,1,0,0,0,1,3,0,2,1,5,64,2,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,53,    public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();,1,0,0,1,2,3,2,1,3,7,85,2,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,59,"    public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(""["", ""]"", """", """", ""; "", "", "");",1,0,0,0,4,4,0,2,10,5,104,2,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,379,"        checkRowIndex(m, row);",0,0,0,0,2,0,3,0,1,3,22,4,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,380,"        checkColumnIndex(m, column);",0,0,0,0,2,0,3,0,1,3,28,4,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,381,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,391,        if (row < 0 ||,1,2,0,0,1,1,0,0,0,4,14,4,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,396,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,406,        if (column < 0 || column >= m.getColumnDimension()) {,2,3,0,2,5,1,2,0,0,6,53,4,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,410,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,56,"        super(rowDimension, columnDimension);",2,0,0,0,2,1,0,0,1,4,37,3,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,57,        data = new double[rowDimension][columnDimension];,1,0,1,0,4,2,0,0,1,5,49,4,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,58,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,255,        return data;,1,0,0,0,0,1,0,0,0,2,12,4,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,295,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,0,2,1,4,0,0,3,48,5,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,296,        return data[row][column];,0,0,1,0,4,1,0,0,0,3,25,5,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,302,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,0,2,1,4,0,0,3,48,5,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,303,        data[row][column] = value;,1,0,1,0,4,0,0,0,1,4,26,4,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,304,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,323,        return (data == null) ? 0 : data.length;,3,1,0,1,2,1,0,0,0,5,40,5,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,329,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,2,3,1,2,10,1,0,0,0,6,66,5,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,61,"    protected AbstractRealMatrix(final int rowDimension, final int columnDimension) {",3,0,0,0,3,5,0,0,3,4,81,2,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,62,        if (rowDimension < 1) {,1,1,0,1,3,1,0,0,0,5,23,4,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,65,        if (columnDimension < 1) {,1,1,0,1,3,1,0,0,0,5,26,4,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,68,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,43,    private static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();,1,0,0,1,2,3,2,1,3,7,86,2,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,46,        DEFAULT_FORMAT.getFormat().setMinimumFractionDigits(1);,0,0,0,1,4,0,3,0,0,3,55,5,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,47,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/RealLinearOperator,28,53,public abstract class RealLinearOperator {,1,0,0,0,1,3,0,0,2,4,42,1,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,85,    public ArrayRealVector(double[] d) {,2,0,0,1,5,2,0,0,1,5,36,2,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,86,        data = d.clone();,1,0,0,1,2,0,2,0,1,5,17,4,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,87,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,103,"    public ArrayRealVector(double[] d, boolean copyArray) {",3,0,0,0,5,3,0,0,1,4,55,2,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,104,        if (d == null) {,1,1,0,1,3,1,0,0,0,5,16,4,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,107,        data = copyArray ? d.clone() :  d;,3,0,0,1,2,0,2,0,1,5,34,4,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,108,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,42,    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();,1,0,0,1,2,3,2,1,3,7,86,2,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,601,        return data.length;,2,0,0,0,0,1,0,0,0,2,19,5,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,713,        return data.clone();,0,0,0,1,2,1,2,0,0,4,20,5,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,743,        if (data.length != n) {,3,1,0,1,3,1,0,0,0,5,23,4,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,746,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,38,public class ArrayRealVector extends RealVector implements Serializable {,1,0,0,0,1,4,0,2,1,5,73,1,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,99,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_PREFIX, DEFAULT_ROW_SUFFIX,",4,0,0,0,1,1,0,0,0,3,76,4,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,101,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,115,"        this(prefix, suffix, rowPrefix, rowSuffix, rowSeparator, columnSeparator,",6,0,0,0,1,1,0,0,0,3,73,4,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,117,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,133,                            final NumberFormat format) {,1,0,0,0,2,1,0,1,1,5,28,3,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,134,        this.prefix            = prefix;,2,0,0,0,0,1,0,0,1,3,32,4,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,135,        this.suffix            = suffix;,2,0,0,0,0,1,0,0,1,3,32,4,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,136,        this.rowPrefix         = rowPrefix;,2,0,0,0,0,1,0,0,1,3,35,4,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,137,        this.rowSuffix         = rowSuffix;,2,0,0,0,0,1,0,0,1,3,35,4,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,138,        this.rowSeparator      = rowSeparator;,2,0,0,0,0,1,0,0,1,3,38,4,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,139,        this.columnSeparator   = columnSeparator;,2,0,0,0,0,1,0,0,1,3,41,4,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,140,        this.format            = format;,2,0,0,0,0,1,0,0,1,3,32,4,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,142,        this.format.setGroupingUsed(false);,1,0,0,1,2,1,1,0,1,6,35,5,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,143,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,207,        return format;,1,0,0,0,0,1,0,0,0,2,14,4,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,215,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,3,0,1,5,40,4,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,224,        return new RealMatrixFormat(CompositeFormat.getDefaultNumberFormat(locale));,0,0,0,2,4,2,3,1,1,6,76,4,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,82,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",4,0,0,0,2,1,0,0,0,3,64,4,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,83,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,106,"                            final String separator, final NumberFormat format) {",2,0,0,0,2,2,0,2,2,5,52,3,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,107,        this.prefix      = prefix;,2,0,0,0,0,1,0,0,1,3,26,4,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,108,        this.suffix      = suffix;,2,0,0,0,0,1,0,0,1,3,26,4,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,109,        this.separator   = separator;,2,0,0,0,0,1,0,0,1,3,29,4,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,110,        trimmedPrefix    = prefix.trim();,1,0,0,1,2,0,2,0,1,5,33,4,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,111,        trimmedSuffix    = suffix.trim();,1,0,0,1,2,0,2,0,1,5,33,4,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,112,        trimmedSeparator = separator.trim();,1,0,0,1,2,0,2,0,1,5,36,4,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,113,        this.format      = format;,2,0,0,0,0,1,0,0,1,3,26,4,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,114,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,162,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,3,0,1,5,40,4,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,171,        return new RealVectorFormat(CompositeFormat.getDefaultNumberFormat(locale));,0,0,0,2,4,2,3,1,1,6,76,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/GoalType,28,28,public enum GoalType implements Serializable {,1,0,0,0,1,3,0,1,1,5,46,1,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/GoalType,28,31,"    MAXIMIZE,",1,0,0,0,0,0,0,0,0,1,9,2,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/GoalType,28,34,    MINIMIZE,1,0,0,0,0,0,0,0,0,1,8,2,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,51,"        this(DEFAULT_EPSILON, DEFAULT_ULPS);",2,0,0,0,2,1,0,0,0,3,36,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,52,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,59,"    public SimplexSolver(final double epsilon, final int maxUlps) {",3,0,0,0,3,5,0,0,3,4,63,2,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,60,        this.epsilon = epsilon;,2,0,0,0,0,1,0,0,1,3,23,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,61,        this.maxUlps = maxUlps;,2,0,0,0,0,1,0,0,1,3,23,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,62,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,197,        if (tableau.getNumArtificialVariables() == 0) {,0,1,0,2,5,1,2,0,0,5,47,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,215,        final SimplexTableau tableau =,1,0,0,0,0,1,0,1,1,4,30,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,223,        solvePhase1(tableau);,0,0,0,1,2,0,2,0,1,4,21,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,74,    protected AbstractLinearOptimizer() {,1,0,0,1,3,1,0,0,1,5,37,2,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,75,        setMaxIterations(DEFAULT_MAX_ITERATIONS);,0,0,0,1,2,0,2,0,1,4,41,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,76,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,82,        return nonNegative;,1,0,0,0,0,1,0,0,0,2,19,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,89,        return goal;,1,0,0,0,0,1,0,0,0,2,12,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,96,        return function;,1,0,0,0,0,1,0,0,0,2,16,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,103,        return Collections.unmodifiableCollection(linearConstraints);,0,0,0,1,2,1,3,0,0,4,61,5,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,108,        this.maxIterations = maxIterations;,2,0,0,0,0,1,0,0,1,3,35,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,109,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,139,        this.function          = f;,2,0,0,0,0,1,0,0,1,3,27,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,140,        this.linearConstraints = constraints;,2,0,0,0,0,1,0,0,1,3,37,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,141,        this.goal              = goalType;,2,0,0,0,0,1,0,0,1,3,34,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,142,        this.nonNegative       = restrictToNonNegative;,2,0,0,0,0,1,0,0,1,3,47,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,144,        iterations  = 0;,1,0,0,0,0,0,0,0,1,2,16,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,147,        return doOptimize();,0,0,0,1,2,1,1,0,1,5,20,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,28,58,"        this(new ArrayRealVector(coefficients), constantTerm);",2,0,0,1,4,2,0,1,1,6,54,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,28,59,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,28,65,"    public LinearObjectiveFunction(RealVector coefficients, double constantTerm) {",3,0,0,0,3,2,0,1,1,5,78,2,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,28,66,        this.coefficients = coefficients;,2,0,0,0,0,1,0,0,1,3,33,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,28,67,        this.constantTerm = constantTerm;,2,0,0,0,0,1,0,0,1,3,33,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,28,68,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,28,75,        return coefficients;,1,0,0,0,0,1,0,0,0,2,20,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,28,83,        return constantTerm;,1,0,0,0,0,1,0,0,0,2,20,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,28,42,    private Relationship(String stringValue) {,2,0,0,1,3,1,0,1,1,6,42,2,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,28,43,        this.stringValue = stringValue;,2,0,0,0,0,1,0,0,1,3,31,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,28,44,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,28,28,"    EQ(""=""),",1,0,0,1,2,0,0,0,1,4,8,2,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,28,31,"    LEQ(""<=""),",1,0,0,1,2,0,0,0,1,4,10,2,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,28,34,"    GEQ("">="");",1,0,0,1,2,0,0,0,1,4,10,2,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,28,25,public enum Relationship {,1,0,0,0,1,2,0,0,1,4,26,1,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,81,"        this(new ArrayRealVector(coefficients), relationship, value);",3,0,0,1,4,2,0,1,1,6,61,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,82,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,99,                            final double value) {,1,0,0,0,2,2,0,0,1,4,21,3,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,100,        this.coefficients = coefficients;,2,0,0,0,0,1,0,0,1,3,33,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,101,        this.relationship = relationship;,2,0,0,0,0,1,0,0,1,3,33,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,102,        this.value        = value;,2,0,0,0,0,1,0,0,1,3,26,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,103,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,168,        return coefficients;,1,0,0,0,0,1,0,0,0,2,20,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,176,        return relationship;,1,0,0,0,0,1,0,0,0,2,20,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,184,        return value;,1,0,0,0,0,1,0,0,0,2,13,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,139,                   final int maxUlps) {,1,0,0,0,2,2,0,0,1,4,20,3,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,89,    private final List<String> columnLabels = new ArrayList<String>();,1,0,0,1,2,3,0,4,3,6,66,2,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,140,        this.f                      = f;,2,0,0,0,0,1,0,0,1,3,32,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,141,        this.constraints            = normalizeConstraints(constraints);,1,0,0,1,2,1,2,0,2,6,64,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,142,        this.restrictToNonNegative  = restrictToNonNegative;,2,0,0,0,0,1,0,0,1,3,52,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,143,        this.epsilon                = epsilon;,2,0,0,0,0,1,0,0,1,3,38,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,144,        this.maxUlps                = maxUlps;,2,0,0,0,0,1,0,0,1,3,38,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,145,        this.numDecisionVariables   = f.getCoefficients().getDimension() +,1,1,0,1,4,1,3,0,1,7,66,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,147,        this.numSlackVariables      = getConstraintTypeCounts(Relationship.LEQ) +,3,1,0,1,2,1,1,0,2,7,73,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,149,        this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) +,3,1,0,1,2,1,1,0,2,7,72,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,151,        this.tableau = createTableau(goalType == GoalType.MAXIMIZE);,4,1,0,1,2,1,1,0,2,7,60,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,152,        initializeColumnLabels();,0,0,0,1,2,0,1,0,1,4,25,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,153,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,159,      if (getNumObjectiveFunctions() == 2) {,0,1,0,2,5,1,1,0,1,6,38,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,162,"      columnLabels.add(""Z"");",0,0,0,1,2,0,2,0,1,4,22,5,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,163,      for (int i = 0; i < getOriginalNumDecisionVariables(); i++) {,3,1,0,2,5,2,1,0,2,7,61,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,164,"        columnLabels.add(""x"" + i);",1,1,0,1,2,0,2,0,1,6,26,7,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,166,      if (!restrictToNonNegative) {,1,0,0,1,3,1,0,0,1,5,29,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,169,      for (int i = 0; i < getNumSlackVariables(); i++) {,3,1,0,2,5,2,1,0,2,7,50,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,172,      for (int i = 0; i < getNumArtificialVariables(); i++) {,3,1,0,2,5,2,1,0,2,7,55,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,175,"      columnLabels.add(""RHS"");",0,0,0,1,2,0,2,0,1,4,24,5,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,176,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,186,        int width = numDecisionVariables + numSlackVariables +,3,1,0,0,0,1,0,0,0,3,54,5,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,188,        int height = constraints.size() + getNumObjectiveFunctions();,1,1,0,1,4,1,3,0,1,7,61,5,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,189,"        Array2DRowRealMatrix matrix = new Array2DRowRealMatrix(height, width);",3,0,0,0,2,1,0,2,1,5,70,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,192,        if (getNumObjectiveFunctions() == 2) {,0,1,0,2,5,1,1,0,1,6,38,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,195,        int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;,1,1,0,2,4,1,1,0,1,7,55,5,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,196,"        matrix.setEntry(zIndex, zIndex, maximize ? 1 : -1);",1,0,0,0,2,0,4,0,1,4,51,5,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,197,        RealVector objectiveCoefficients =,1,0,0,0,0,0,0,1,0,2,34,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,199,"        copyArray(objectiveCoefficients.toArray(), matrix.getDataRef()[zIndex]);",0,0,1,1,8,0,5,0,1,5,72,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,200,"        matrix.setEntry(zIndex, width - 1,",1,1,0,0,1,0,3,0,0,4,34,5,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,203,        if (!restrictToNonNegative) {,1,0,0,1,3,1,0,0,1,5,29,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,209,        int slackVar = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,210,        int artificialVar = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,211,        for (int i = 0; i < constraints.size(); i++) {,3,1,0,2,5,2,2,0,1,7,46,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,212,            LinearConstraint constraint = constraints.get(i);,1,0,0,1,2,0,3,1,0,5,49,6,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,213,            int row = getNumObjectiveFunctions() + i;,2,1,0,1,2,1,1,0,1,7,41,7,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,216,"            copyArray(constraint.getCoefficients().toArray(), matrix.getDataRef()[row]);",0,0,1,1,10,0,6,0,1,5,76,6,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,219,            if (!restrictToNonNegative) {,1,0,0,1,3,1,0,0,1,5,29,6,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,225,"            matrix.setEntry(row, width - 1, constraint.getValue());",1,1,0,1,4,0,5,0,0,5,55,7,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,228,            if (constraint.getRelationship() == Relationship.LEQ) {,2,1,0,2,5,1,2,0,0,6,55,6,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,235,            if ((constraint.getRelationship() == Relationship.EQ) ||,2,2,0,2,5,1,2,0,0,6,56,6,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,243,        return matrix;,1,0,0,0,0,1,0,0,0,2,14,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,252,        List<LinearConstraint> normalized = new ArrayList<LinearConstraint>();,1,0,0,1,2,1,0,4,1,6,70,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,253,        for (LinearConstraint constraint : originalConstraints) {,2,0,0,1,3,1,0,1,0,5,57,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,254,            normalized.add(normalize(constraint));,0,0,0,2,4,0,4,0,1,4,38,7,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,255,        },0,0,0,0,1,0,0,0,0,1,1,2,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,256,        return normalized;,1,0,0,0,0,1,0,0,0,2,18,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,265,        if (constraint.getValue() < 0) {,0,1,0,2,5,1,2,0,0,5,32,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,279,        return this.numArtificialVariables > 0 ? 2 : 1;,1,1,0,0,0,2,0,0,0,3,47,5,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,288,        int count = 0;,1,0,0,0,0,1,0,0,0,2,14,5,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,289,        for (final LinearConstraint constraint : constraints) {,2,0,0,1,3,2,0,1,1,6,55,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,290,            if (constraint.getRelationship() == relationship) {,1,1,0,2,5,1,2,0,0,6,51,6,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,291,                ++count;,1,0,0,0,0,0,0,0,1,2,8,8,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,293,        },0,0,0,0,1,0,0,0,0,1,1,2,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,294,        return count;,1,0,0,0,0,1,0,0,0,2,13,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,381,"        System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);",2,0,0,1,4,0,5,0,1,5,71,5,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,382,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,389,        for (int i = getNumObjectiveFunctions(); i < getWidth() - 1; i++) {,3,2,0,2,7,2,2,0,3,7,67,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,390,"            final double entry = tableau.getEntry(0, i);",1,0,0,0,2,2,3,0,1,5,44,6,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,391,"            if (Precision.compareTo(entry, 0d, epsilon) < 0) {",0,1,0,0,5,1,4,0,0,4,50,6,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,395,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,478,        return tableau.getColumnDimension();,0,0,0,1,2,1,2,0,0,4,36,5,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,495,"        return tableau.getEntry(row, column);",0,0,0,0,2,1,4,0,0,3,37,5,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,552,        return f.getCoefficients().getDimension();,0,0,0,1,4,1,3,0,0,4,42,5,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,560,        return numSlackVariables;,1,0,0,0,0,1,0,0,0,2,25,4,0.04,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,568,        return numArtificialVariables;,1,0,0,0,0,1,0,0,0,2,30,4,0.04,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,28,46,"        this(LocalizedFormats.OUT_OF_RANGE_SIMPLE, wrong, lo, hi);",5,0,0,0,2,1,0,0,0,3,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,28,47,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,28,62,"        super(specific, wrong, lo, hi);",4,0,0,0,2,1,0,0,1,4,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,28,63,        this.lo = lo;,2,0,0,0,0,1,0,0,1,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,28,64,        this.hi = hi;,2,0,0,0,0,1,0,0,1,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,28,65,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,28,71,        return lo;,1,0,0,0,0,1,0,0,0,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,28,77,        return hi;,1,0,0,0,0,1,0,0,0,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,28,46,"        super(pattern, wrong, arguments);",3,0,0,0,2,1,0,0,1,4,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,28,47,        argument = wrong;,2,0,0,0,0,0,0,0,1,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,28,48,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,28,54,        return argument;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,28,44,                                        Object ... args) {,1,0,0,0,2,0,0,1,0,3,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,28,45,        context = new ExceptionContext(this);,1,0,0,1,2,2,0,1,2,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,28,46,"        context.addMessage(pattern, args);",0,0,0,0,2,0,4,0,0,2,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,28,47,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,28,51,        return context;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,28,57,        return context.getMessage();,0,0,0,1,2,1,2,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,28,63,        return context.getLocalizedMessage();,0,0,0,1,2,1,2,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/ZeroException,28,37,        this(LocalizedFormats.ZERO_NOT_ALLOWED);,2,0,0,1,2,1,0,0,0,4,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/ZeroException,28,38,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/ZeroException,28,47,"        super(specific, 0, arguments);",2,0,0,0,2,1,0,0,1,4,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/ZeroException,28,48,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,28,43,    public MathArithmeticException() {,1,0,0,1,3,1,0,0,1,5,34,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,28,44,        context = new ExceptionContext(this);,1,0,0,1,2,2,0,1,2,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,28,45,        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,2,0,0,1,2,0,2,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,28,46,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,28,56,                                   Object ... args) {,1,0,0,0,2,0,0,1,0,3,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,28,57,        context = new ExceptionContext(this);,1,0,0,1,2,2,0,1,2,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,28,58,"        context.addMessage(pattern, args);",0,0,0,0,2,0,4,0,0,2,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,28,59,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,28,63,        return context;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,28,69,        return context.getMessage();,0,0,0,1,2,1,2,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,28,75,        return context.getLocalizedMessage();,0,0,0,1,2,1,2,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,28,42,"        this(LocalizedFormats.MAX_COUNT_EXCEEDED, max);",3,0,0,0,2,1,0,0,0,3,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,28,43,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,28,53,                                     Object ... args) {,1,0,0,0,2,0,0,1,0,3,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,28,54,"        getContext().addMessage(specific, max, args);",0,0,0,1,4,0,5,0,1,4,45,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,28,55,        this.max = max;,2,0,0,0,0,1,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,28,56,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,28,62,        return max;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,60,        super(cause);,1,0,0,1,2,1,0,0,1,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,61,        context = new ExceptionContext(this);,1,0,0,1,2,2,0,1,2,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,62,"        context.addMessage(pattern, args);",0,0,0,0,2,0,4,0,0,2,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,63,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,69,        this(LocalizedFormats.ILLEGAL_STATE);,2,0,0,1,2,1,0,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,70,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,74,        return context;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,80,        return context.getMessage();,0,0,0,1,2,1,2,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,86,        return context.getLocalizedMessage();,0,0,0,1,2,1,2,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,28,38,"        super(value, 0, false);",1,0,0,0,2,1,0,0,2,4,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,28,39,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,28,48,"        super(specific, value, 0, false);",2,0,0,0,2,1,0,0,2,4,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,28,49,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,28,50,        this(boundIsAllowed ?,1,0,0,0,1,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,28,54,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,28,68,"        super(specific, wrong, min);",3,0,0,0,2,1,0,0,1,4,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,28,70,        this.min = min;,2,0,0,0,0,1,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,28,71,        this.boundIsAllowed = boundIsAllowed;,2,0,0,0,0,1,0,0,1,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,28,72,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,28,78,        return boundIsAllowed;,1,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,28,85,        return min;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,28,50,        this(boundIsAllowed ?,1,0,0,0,1,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,28,54,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,28,67,"        super(specific, wrong, max);",3,0,0,0,2,1,0,0,1,4,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,28,69,        this.max = max;,2,0,0,0,0,1,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,28,70,        this.boundIsAllowed = boundIsAllowed;,2,0,0,0,0,1,0,0,1,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,28,71,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,28,77,        return boundIsAllowed;,1,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,28,84,        return max;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,28,41,        this(LocalizedFormats.NULL_NOT_ALLOWED);,2,0,0,1,2,1,0,0,0,4,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,28,42,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,28,50,"        super(pattern, arguments);",2,0,0,0,2,1,0,0,1,4,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,28,51,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,28,44,"        super(specific, wrong, expected);",3,0,0,0,2,1,0,0,1,4,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,28,45,        dimension = expected;,2,0,0,0,0,0,0,0,1,2,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,28,46,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,28,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);",4,0,0,0,2,1,0,0,0,3,67,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,28,57,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,28,63,        return dimension;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,28,45,"        this(LocalizedFormats.DIMENSIONS_MISMATCH, wrong, expected);",4,0,0,0,2,1,0,0,0,3,60,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,28,46,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,28,59,"        super(specific, wrong, expected);",3,0,0,0,2,1,0,0,1,4,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,28,60,        this.wrong = wrong.clone();,1,0,0,1,2,1,2,0,1,6,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,28,61,        this.expected = expected.clone();,1,0,0,1,2,1,2,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,28,62,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,28,68,        return wrong.clone();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,28,74,        return expected.clone();,0,0,0,1,2,1,2,0,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,28,82,        return wrong[index];,0,0,1,0,2,1,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,28,89,        return expected[index];,0,0,1,0,2,1,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathParseException,28,42,                              Class<?> type) {,1,0,0,0,2,0,0,1,0,3,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathParseException,28,43,"        getContext().addMessage(LocalizedFormats.CANNOT_PARSE_AS_TYPE,",2,0,0,1,3,0,2,0,1,5,62,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathParseException,28,45,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathParseException,28,53,                              int position) {,1,0,0,0,2,1,0,0,0,3,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathParseException,28,54,"        getContext().addMessage(LocalizedFormats.CANNOT_PARSE,",2,0,0,1,3,0,2,0,1,5,54,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathParseException,28,56,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotFiniteNumberException,28,40,"        this(LocalizedFormats.NOT_FINITE_NUMBER, wrong, args);",4,0,0,0,2,1,0,0,0,3,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotFiniteNumberException,28,41,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotFiniteNumberException,28,53,"        super(specific, wrong, args);",3,0,0,0,2,1,0,0,1,4,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotFiniteNumberException,28,54,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,28,37,        this(LocalizedFormats.NO_DATA);,2,0,0,1,2,1,0,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,28,38,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,28,45,        super(specific);,1,0,0,1,2,1,0,0,1,5,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,28,46,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,28,37,"        super(value, 0, true);",1,0,0,0,2,1,0,0,2,4,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,28,38,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,28,47,"        super(specific, value, 0, true);",2,0,0,0,2,1,0,0,2,4,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,28,48,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3720,                  double xb) {,1,0,0,0,2,1,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3723,            int k = (int)(xa * 0.6366197723675814);,2,1,0,1,4,2,0,0,0,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3729,                double a = -k * 1.570796251296997;,2,1,0,0,0,1,0,0,1,4,34,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3730,                remA = xa + a;,3,1,0,0,0,0,0,0,1,3,14,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3731,                remB = -(remA - xa - a);,4,1,0,1,2,0,0,0,2,5,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3733,                a = -k * 7.549789948768648E-8;,2,1,0,0,0,0,0,0,2,3,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3734,                double b = remA;,2,0,0,0,0,1,0,0,0,2,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3735,                remA = a + b;,3,1,0,0,0,0,0,0,1,3,13,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3736,                remB += -(remA - b - a);,4,1,0,1,2,0,0,0,2,5,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3738,                a = -k * 6.123233995736766E-17;,2,1,0,0,0,0,0,0,2,3,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3739,                b = remA;,2,0,0,0,0,0,0,0,1,2,9,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3740,                remA = a + b;,3,1,0,0,0,0,0,0,1,3,13,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3741,                remB += -(remA - b - a);,4,1,0,1,2,0,0,0,2,5,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3743,                if (remA > 0) {,1,1,0,1,3,1,0,0,0,5,15,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3744,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3750,                --k;,1,0,0,0,0,0,0,0,1,2,4,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3751,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3753,            this.finalK = k;,2,0,0,0,0,1,0,0,1,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3754,            this.finalRemA = remA;,2,0,0,0,0,1,0,0,1,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3755,            this.finalRemB = remB;,2,0,0,0,0,1,0,0,1,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3756,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3762,            return finalK;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3768,            return finalRemA;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3774,            return finalRemB;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,75,    private Precision() {},1,0,0,1,4,1,0,0,1,5,22,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,131,"        return equals(x, y, 1);",0,0,0,0,2,1,3,0,1,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,144,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, 1);",0,2,0,2,8,1,9,0,1,6,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,158,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",3,3,0,1,4,1,5,0,1,7,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,173,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",3,3,0,2,6,1,5,0,1,7,64,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,195,        int xInt = Float.floatToIntBits(x);,1,0,0,1,2,1,3,0,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,196,        int yInt = Float.floatToIntBits(y);,1,0,0,1,2,1,3,0,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,199,        if (xInt < 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,200,            xInt = SGN_MASK_FLOAT - xInt;,3,1,0,0,0,0,0,0,1,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,202,        if (yInt < 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,203,            yInt = SGN_MASK_FLOAT - yInt;,3,1,0,0,0,0,0,0,1,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,206,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,4,2,0,1,2,2,2,0,1,7,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,208,        return isEqual && !Float.isNaN(x) && !Float.isNaN(y);,1,1,0,1,4,1,6,0,2,7,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,224,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, maxUlps);",0,2,0,2,8,1,10,0,1,6,67,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,236,"        return equals(x, y, 1);",0,0,0,0,2,1,3,0,1,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,249,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, 1);",0,2,0,2,8,1,9,0,1,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,279,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",3,3,0,2,6,1,5,0,1,7,64,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,308,            yInt = SGN_MASK - yInt;,3,1,0,0,0,0,0,0,1,3,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,329,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, maxUlps);",0,2,0,2,8,1,10,0,1,6,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,342,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",2,0,0,0,2,1,3,0,1,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,364,            return (new BigDecimal,0,0,0,0,1,2,0,1,1,4,22,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,368,        } catch (NumberFormatException ex) {,1,0,0,1,4,1,0,1,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,369,            if (Double.isInfinite(x)) {,0,0,0,2,5,1,3,0,0,4,27,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,370,                return x;,1,0,0,0,0,1,0,0,0,2,9,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,372,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,387,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",2,0,0,0,2,1,3,0,1,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,402,"        final float sign = FastMath.copySign(1f, x);",1,0,0,0,2,2,3,0,1,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,403,"        final float factor = (float) FastMath.pow(10.0f, scale) * sign;",2,1,0,1,4,3,3,0,1,7,63,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,404,"        return (float) roundUnscaled(x * factor, sign, roundingMethod) / factor;",3,2,0,1,4,2,3,0,1,7,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,422,        switch (roundingMethod) {,1,0,0,1,3,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,424,            if (sign == -1) {,1,1,0,1,3,1,0,0,1,6,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,425,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",3,0,0,0,4,0,5,0,1,4,82,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,427,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",3,0,0,0,4,0,5,0,1,4,81,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,429,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,431,"            unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",3,0,0,0,4,0,5,0,1,4,82,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,432,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,434,            if (sign == -1) {,1,1,0,1,3,1,0,0,1,6,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,435,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",3,0,0,0,4,0,5,0,1,4,81,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,437,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",3,0,0,0,4,0,5,0,1,4,82,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,439,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,441,"            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);",3,0,0,0,2,0,3,0,1,4,66,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,442,            double fraction = unscaled - FastMath.floor(unscaled);,2,1,0,1,2,1,3,0,0,6,54,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,443,            if (fraction > 0.5) {,1,1,0,1,3,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,444,                unscaled = FastMath.ceil(unscaled);,1,0,0,1,2,0,3,0,1,5,35,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,446,                unscaled = FastMath.floor(unscaled);,1,0,0,1,2,0,3,0,1,5,36,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,448,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,451,            double fraction = unscaled - FastMath.floor(unscaled);,2,1,0,1,2,1,3,0,0,6,54,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,452,            if (fraction > 0.5) {,1,1,0,1,3,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,453,                unscaled = FastMath.ceil(unscaled);,1,0,0,1,2,0,3,0,1,5,35,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,454,            } else if (fraction < 0.5) {,1,1,0,1,4,2,0,0,0,5,28,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,455,                unscaled = FastMath.floor(unscaled);,1,0,0,1,2,0,3,0,1,5,36,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,458,                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math,0,3,0,1,4,1,6,0,0,5,57,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,460,                    unscaled = FastMath.floor(unscaled);,1,0,0,1,2,0,3,0,1,5,36,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,462,                    unscaled = FastMath.ceil(unscaled);,1,0,0,1,2,0,3,0,1,5,35,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,465,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,468,"            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);",3,0,0,0,2,0,3,0,1,4,66,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,469,            double fraction = unscaled - FastMath.floor(unscaled);,2,1,0,1,2,1,3,0,0,6,54,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,470,            if (fraction >= 0.5) {,1,1,0,1,3,1,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,471,                unscaled = FastMath.ceil(unscaled);,1,0,0,1,2,0,3,0,1,5,35,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,473,                unscaled = FastMath.floor(unscaled);,1,0,0,1,2,0,3,0,1,5,36,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,475,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,478,            if (unscaled != FastMath.floor(unscaled)) {,1,1,0,2,5,1,3,0,0,6,43,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,479,                throw new MathArithmeticException();,0,0,0,1,2,2,0,1,1,5,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,483,"            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));",3,0,0,0,4,0,5,0,1,4,82,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,484,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,486,"            throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,",2,0,0,0,1,2,0,1,1,5,80,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,497,        return unscaled;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,517,        return x + originalDelta - x;,3,2,0,0,0,1,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,28,45,"    public Pair(K k, V v) {",3,0,0,0,3,1,0,2,1,5,23,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,28,46,        key = k;,2,0,0,0,0,0,0,0,1,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,28,47,        value = v;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,28,48,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,28,56,"        this(entry.getKey(), entry.getValue());",0,0,0,1,6,1,4,0,0,4,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,28,57,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,28,65,        return key;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,28,74,        return value;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,28,83,        return key;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,28,92,        return value;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,28,104,        if (this == o) {,1,1,0,1,3,2,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,28,105,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,28,107,        if (!(o instanceof Pair)) {,1,0,0,2,5,2,0,1,1,6,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,28,108,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,28,110,"            Pair<?, ?> oP = (Pair<?, ?>) o;",2,0,0,0,2,0,0,2,0,3,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,28,111,            return (key == null ?,1,2,0,0,1,1,0,0,0,4,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,28,127,        int result = key == null ? 0 : key.hashCode();,2,1,0,1,2,1,2,0,0,6,46,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,28,129,        final int h = value == null ? 0 : value.hashCode();,2,1,0,1,2,2,2,0,1,7,51,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,28,130,        result = 37 * result + h ^ (h >>> 16);,4,4,0,1,2,0,0,0,1,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,28,132,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathUtils,28,47,    private MathUtils() {},1,0,0,1,4,1,0,0,1,5,22,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathUtils,28,57,        return new Double(value).hashCode();,1,0,0,1,4,2,1,1,1,7,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathUtils,28,68,        return Arrays.hashCode(value);,0,0,0,1,2,1,3,0,0,4,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathUtils,28,91,         return a - TWO_PI * FastMath.floor((a + FastMath.PI - center) / TWO_PI);,7,5,0,2,4,1,2,0,0,6,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathUtils,28,113,        final double p = FastMath.abs(period);,1,0,0,1,2,2,3,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathUtils,28,114,        return a - p * FastMath.floor((a - offset) / p) - offset;,6,5,0,2,4,1,2,0,0,6,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathUtils,28,128,        if ((magnitude >= 0 && sign >= 0) ||,2,4,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathUtils,28,130,            return magnitude;,1,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathUtils,28,131,        } else if (sign >= 0 &&,1,2,0,0,2,2,0,0,0,4,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathUtils,28,133,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,2,0,0,1,2,2,0,1,1,6,61,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathUtils,28,135,            return (byte) -magnitude; // Flip sign.,1,0,0,1,2,2,0,0,1,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathUtils,28,150,        if ((magnitude >= 0 && sign >= 0) ||,2,4,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathUtils,28,152,            return magnitude;,1,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathUtils,28,153,        } else if (sign >= 0 &&,1,2,0,0,2,2,0,0,0,4,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathUtils,28,155,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,2,0,0,1,2,2,0,1,1,6,61,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathUtils,28,157,            return (short) -magnitude; // Flip sign.,1,0,0,1,2,2,0,0,1,5,40,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathUtils,28,172,        if ((magnitude >= 0 && sign >= 0) ||,2,4,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathUtils,28,174,            return magnitude;,1,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathUtils,28,175,        } else if (sign >= 0 &&,1,2,0,0,2,2,0,0,0,4,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathUtils,28,177,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,2,0,0,1,2,2,0,1,1,6,61,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathUtils,28,179,            return -magnitude; // Flip sign.,1,0,0,0,0,1,0,0,1,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathUtils,28,194,        if ((magnitude >= 0 && sign >= 0) ||,2,4,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathUtils,28,196,            return magnitude;,1,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathUtils,28,197,        } else if (sign >= 0 &&,1,2,0,0,2,2,0,0,0,4,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathUtils,28,199,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,2,0,0,1,2,2,0,1,1,6,61,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathUtils,28,201,            return -magnitude; // Flip sign.,1,0,0,0,0,1,0,0,1,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathUtils,28,212,        if (Double.isInfinite(x) || Double.isNaN(x)) {,0,1,0,2,7,1,6,0,0,5,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathUtils,28,213,            throw new NotFiniteNumberException(x);,1,0,0,1,2,2,0,1,1,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathUtils,28,215,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathUtils,28,225,        for (int i = 0; i < val.length; i++) {,5,1,0,1,3,2,0,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathUtils,28,226,            final double x = val[i];,1,0,1,0,2,2,0,0,1,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathUtils,28,227,            if (Double.isInfinite(x) || Double.isNaN(x)) {,0,1,0,2,7,1,6,0,0,5,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathUtils,28,228,"                throw new NotFiniteNumberException(LocalizedFormats.ARRAY_ELEMENT, x, i);",4,0,0,0,2,2,0,1,1,5,73,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathUtils,28,231,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathUtils,28,244,        if (o == null) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathUtils,28,245,"            throw new NullArgumentException(pattern, args);",2,0,0,0,2,2,0,1,1,5,47,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathUtils,28,247,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathUtils,28,258,            throw new NullArgumentException();,0,0,0,1,2,2,0,1,1,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,349,    private FastMath() {},1,0,0,1,4,1,0,0,1,5,21,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,361,        if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN){,6,3,0,1,3,1,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,362,            return d; // These are un-normalised - don't try to convert,1,0,0,0,0,2,0,0,0,2,59,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,364,        long xl = Double.doubleToLongBits(d);,1,0,0,1,2,1,3,0,0,5,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,365,        xl = xl & MASK_30BITS; // Drop low order bits,3,1,0,0,0,0,0,0,1,3,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,366,        return Double.longBitsToDouble(xl);,0,0,0,1,2,1,3,0,0,4,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,375,        return Math.sqrt(a);,0,0,0,1,2,1,3,0,0,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,383,      if (x != x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,384,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,392,      if (x > 20.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,393,          return exp(x)/2.0;,0,1,0,1,2,1,2,0,1,6,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,396,      if (x < -20) {,1,1,0,1,3,1,0,0,1,6,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,397,          return exp(-x)/2.0;,1,1,0,1,2,1,1,0,2,7,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,400,      double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,401,      if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,402,          x = -x;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,404,"      exp(x, 0.0, hiPrec);",0,0,0,0,2,0,3,0,1,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,406,      double ya = hiPrec[0] + hiPrec[1];,1,1,1,0,4,1,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,407,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,2,1,1,1,6,1,0,0,1,7,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,409,      double temp = ya * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,410,      double yaa = ya + temp - temp;,4,2,0,0,0,1,0,0,0,3,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,411,      double yab = ya - yaa;,3,1,0,0,0,1,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,414,      double recip = 1.0/ya;,2,1,0,0,0,1,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,415,      temp = recip * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,416,      double recipa = recip + temp - temp;,4,2,0,0,0,1,0,0,0,3,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,417,      double recipb = recip - recipa;,3,1,0,0,0,1,0,0,0,3,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,420,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,10,9,0,1,2,0,0,0,1,5,76,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,422,      recipb += -yb * recip * recip;,4,1,0,0,0,0,0,0,2,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,425,      temp = ya + recipa;,3,1,0,0,0,0,0,0,1,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,426,      yb += -(temp - ya - recipa);,4,1,0,1,2,0,0,0,2,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,427,      ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,428,      temp = ya + recipb;,3,1,0,0,0,0,0,0,1,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,429,      yb += -(temp - ya - recipb);,4,1,0,1,2,0,0,0,2,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,430,      ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,432,      double result = ya + yb;,3,1,0,0,0,1,0,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,433,      result *= 0.5;,1,0,0,0,0,0,0,0,1,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,434,      return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,442,      boolean negate = false;,1,0,0,0,0,1,0,0,1,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,443,      if (x != x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,444,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,452,      if (x > 20.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,453,          return exp(x)/2.0;,0,1,0,1,2,1,2,0,1,6,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,456,      if (x < -20) {,1,1,0,1,3,1,0,0,1,6,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,457,          return -exp(-x)/2.0;,1,1,0,1,2,1,1,0,3,7,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,460,      if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,461,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,464,      if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,465,          x = -x;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,466,          negate = true;,1,0,0,0,0,0,0,0,2,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,471,      if (x > 0.25) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,472,          double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,473,"          exp(x, 0.0, hiPrec);",0,0,0,0,2,0,3,0,1,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,475,          double ya = hiPrec[0] + hiPrec[1];,1,1,1,0,4,1,0,0,0,5,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,476,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,2,1,1,1,6,1,0,0,1,7,42,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,478,          double temp = ya * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,479,          double yaa = ya + temp - temp;,4,2,0,0,0,1,0,0,0,3,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,480,          double yab = ya - yaa;,3,1,0,0,0,1,0,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,483,          double recip = 1.0/ya;,2,1,0,0,0,1,0,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,484,          temp = recip * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,485,          double recipa = recip + temp - temp;,4,2,0,0,0,1,0,0,0,3,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,486,          double recipb = recip - recipa;,3,1,0,0,0,1,0,0,0,3,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,489,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,10,9,0,1,2,0,0,0,1,5,76,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,491,          recipb += -yb * recip * recip;,4,1,0,0,0,0,0,0,2,3,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,493,          recipa = -recipa;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,494,          recipb = -recipb;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,497,          temp = ya + recipa;,3,1,0,0,0,0,0,0,1,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,498,          yb += -(temp - ya - recipa);,4,1,0,1,2,0,0,0,2,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,499,          ya = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,500,          temp = ya + recipb;,3,1,0,0,0,0,0,0,1,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,501,          yb += -(temp - ya - recipb);,4,1,0,1,2,0,0,0,2,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,502,          ya = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,504,          result = ya + yb;,3,1,0,0,0,0,0,0,1,3,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,505,          result *= 0.5;,1,0,0,0,0,0,0,0,1,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,506,      },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,508,          double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,509,"          expm1(x, hiPrec);",0,0,0,0,2,0,3,0,1,3,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,511,          double ya = hiPrec[0] + hiPrec[1];,1,1,1,0,4,1,0,0,0,5,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,512,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,2,1,1,1,6,1,0,0,1,7,42,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,515,          double denom = 1.0 + ya;,2,1,0,0,0,1,0,0,0,3,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,516,          double denomr = 1.0 / denom;,2,1,0,0,0,1,0,0,0,3,28,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,517,          double denomb = -(denom - 1.0 - ya) + yb;,4,2,0,1,2,1,0,0,1,6,41,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,518,          double ratio = ya * denomr;,3,1,0,0,0,1,0,0,0,3,27,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,519,          double temp = ratio * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,35,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,520,          double ra = ratio + temp - temp;,4,2,0,0,0,1,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,521,          double rb = ratio - ra;,3,1,0,0,0,1,0,0,0,3,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,523,          temp = denom * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,524,          double za = denom + temp - temp;,4,2,0,0,0,1,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,525,          double zb = denom - za;,3,1,0,0,0,1,0,0,0,3,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,527,          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;,11,9,0,1,2,0,0,0,1,5,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,530,          rb += yb*denomr;                        // numerator,3,1,0,0,0,0,0,0,1,3,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,531,          rb += -ya * denomb * denomr * denomr;   // denominator,5,1,0,0,0,0,0,0,2,3,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,534,          temp = ya + ra;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,535,          yb += -(temp - ya - ra);,4,1,0,1,2,0,0,0,2,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,536,          ya = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,537,          temp = ya + rb;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,538,          yb += -(temp - ya - rb);,4,1,0,1,2,0,0,0,2,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,539,          ya = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,541,          result = ya + yb;,3,1,0,0,0,0,0,0,1,3,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,542,          result *= 0.5;,1,0,0,0,0,0,0,0,1,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,545,      if (negate) {,1,0,0,1,3,1,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,546,          result = -result;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,549,      return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,557,      boolean negate = false;,1,0,0,0,0,1,0,0,1,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,559,      if (x != x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,560,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,569,      if (x > 20.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,570,          return 1.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,573,      if (x < -20) {,1,1,0,1,3,1,0,0,1,6,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,574,          return -1.0;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,577,      if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,578,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,581,      if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,582,          x = -x;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,583,          negate = true;,1,0,0,0,0,0,0,0,2,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,587,      if (x >= 0.5) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,588,          double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,590,"          exp(x*2.0, 0.0, hiPrec);",1,1,0,0,2,0,2,0,1,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,592,          double ya = hiPrec[0] + hiPrec[1];,1,1,1,0,4,1,0,0,0,5,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,593,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,2,1,1,1,6,1,0,0,1,7,42,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,596,          double na = -1.0 + ya;,2,1,0,0,0,1,0,0,1,4,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,597,          double nb = -(na + 1.0 - ya);,3,2,0,1,2,1,0,0,1,6,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,598,          double temp = na + yb;,3,1,0,0,0,1,0,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,599,          nb += -(temp - na - yb);,4,1,0,1,2,0,0,0,2,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,600,          na = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,603,          double da = 1.0 + ya;,2,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,604,          double db = -(da - 1.0 - ya);,3,1,0,1,2,1,0,0,1,6,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,605,          temp = da + yb;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,606,          db += -(temp - da - yb);,4,1,0,1,2,0,0,0,2,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,607,          da = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,609,          temp = da * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,610,          double daa = da + temp - temp;,4,2,0,0,0,1,0,0,0,3,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,611,          double dab = da - daa;,3,1,0,0,0,1,0,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,614,          double ratio = na/da;,3,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,615,          temp = ratio * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,616,          double ratioa = ratio + temp - temp;,4,2,0,0,0,1,0,0,0,3,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,617,          double ratiob = ratio - ratioa;,3,1,0,0,0,1,0,0,0,3,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,620,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,11,9,0,1,2,0,0,0,1,5,72,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,623,          ratiob += nb / da;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,625,          ratiob += -db * na / da / da;,5,3,0,0,0,0,0,0,2,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,627,          result = ratioa + ratiob;,3,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,628,      },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,630,          double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,632,"          expm1(x*2.0, hiPrec);",1,1,0,0,2,0,2,0,1,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,634,          double ya = hiPrec[0] + hiPrec[1];,1,1,1,0,4,1,0,0,0,5,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,635,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,2,1,1,1,6,1,0,0,1,7,42,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,638,          double na = ya;,2,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,639,          double nb = yb;,2,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,642,          double da = 2.0 + ya;,2,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,643,          double db = -(da - 2.0 - ya);,3,1,0,1,2,1,0,0,1,6,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,644,          double temp = da + yb;,3,1,0,0,0,1,0,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,645,          db += -(temp - da - yb);,4,1,0,1,2,0,0,0,2,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,646,          da = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,648,          temp = da * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,649,          double daa = da + temp - temp;,4,2,0,0,0,1,0,0,0,3,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,650,          double dab = da - daa;,3,1,0,0,0,1,0,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,653,          double ratio = na/da;,3,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,654,          temp = ratio * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,655,          double ratioa = ratio + temp - temp;,4,2,0,0,0,1,0,0,0,3,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,656,          double ratiob = ratio - ratioa;,3,1,0,0,0,1,0,0,0,3,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,659,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,11,9,0,1,2,0,0,0,1,5,72,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,662,          ratiob += nb / da;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,664,          ratiob += -db * na / da / da;,5,3,0,0,0,0,0,0,2,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,666,          result = ratioa + ratiob;,3,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,669,      if (negate) {,1,0,0,1,3,1,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,670,          result = -result;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,673,      return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,681,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,3,3,0,2,4,1,4,0,0,6,50,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,689,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,690,        if (a < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,691,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,692,            a = -a;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,696,        if (a > 0.167) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,697,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,4,3,0,2,4,0,4,0,1,6,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,699,            final double a2 = a * a;,3,1,0,0,0,2,0,0,1,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,700,            if (a > 0.097) {,1,1,0,1,3,1,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,701,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,26,17,0,8,16,0,0,0,1,5,212,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,702,            } else if (a > 0.036) {,1,1,0,1,4,2,0,0,0,5,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,703,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,20,13,0,6,12,0,0,0,1,5,160,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,704,            } else if (a > 0.0036) {,1,1,0,1,4,2,0,0,0,5,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,705,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);,14,9,0,4,8,0,0,0,1,5,109,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,707,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);,8,5,0,2,4,0,0,0,1,5,63,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,711,        return negative ? -absAsinh : absAsinh;,3,0,0,0,0,1,0,0,1,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,719,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,720,        if (a < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,721,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,722,            a = -a;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,726,        if (a > 0.15) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,727,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,3,4,0,2,6,0,2,0,1,6,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,729,            final double a2 = a * a;,3,1,0,0,0,2,0,0,1,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,730,            if (a > 0.087) {,1,1,0,1,3,1,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,731,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));,18,17,0,8,16,0,0,0,1,5,141,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,732,            } else if (a > 0.031) {,1,1,0,1,4,2,0,0,0,5,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,733,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));,14,13,0,6,12,0,0,0,1,5,109,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,734,            } else if (a > 0.003) {,1,1,0,1,4,2,0,0,0,5,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,735,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));,10,9,0,4,8,0,0,0,1,5,77,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,737,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));,6,5,0,2,4,0,0,0,1,5,47,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,741,        return negative ? -absAtanh : absAtanh;,3,0,0,0,0,1,0,0,1,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,750,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,3,2,0,2,6,2,0,0,1,6,87,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,759,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,3,2,0,2,6,2,0,0,1,6,91,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,767,"        return nextAfter(a, Double.POSITIVE_INFINITY);",2,0,0,0,2,1,2,0,1,5,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,775,"        return nextAfter(a, Float.POSITIVE_INFINITY);",2,0,0,0,2,1,2,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,783,        return Math.random();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,807,"        return exp(x, 0.0, null);",0,0,0,0,2,1,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,826,        if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,827,            intVal = (int) -x;,2,0,0,1,2,1,0,0,2,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,829,            if (intVal > 746) {,1,1,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,830,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,831,                    hiPrec[0] = 0.0;,0,0,1,0,2,0,0,0,1,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,832,                    hiPrec[1] = 0.0;,0,0,1,0,2,0,0,0,1,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,834,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,837,            if (intVal > 709) {,1,1,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,839,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",2,2,0,0,2,2,3,0,2,6,79,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,840,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,841,                    hiPrec[0] /= 285040095144011776.0;,0,0,1,0,2,0,0,0,1,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,842,                    hiPrec[1] /= 285040095144011776.0;,0,0,1,0,2,0,0,0,1,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,844,                return result;,1,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,847,            if (intVal == 709) {,1,1,0,1,3,1,0,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,849,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",2,2,0,0,2,2,3,0,2,6,79,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,850,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,851,                    hiPrec[0] /= 4.455505956692756620;,0,0,1,0,2,0,0,0,1,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,852,                    hiPrec[1] /= 4.455505956692756620;,0,0,1,0,2,0,0,0,1,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,854,                return result;,1,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,857,            intVal++;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,859,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,5,1,0,0,2,0,0,0,1,4,71,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,860,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,5,1,0,0,2,0,0,0,1,4,71,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,862,            intVal = -intVal;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,864,            intVal = (int) x;,2,0,0,1,2,1,0,0,1,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,866,            if (intVal > 709) {,1,1,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,867,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,868,                    hiPrec[0] = Double.POSITIVE_INFINITY;,2,0,1,0,2,0,0,0,1,4,37,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,869,                    hiPrec[1] = 0.0;,0,0,1,0,2,0,0,0,1,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,871,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,874,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,5,1,0,0,2,0,0,0,1,4,71,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,875,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,5,1,0,0,2,0,0,0,1,4,71,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,882,        final int intFrac = (int) ((x - intVal) * 1024.0);,3,2,0,2,6,3,0,0,1,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,883,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,3,0,1,0,2,2,0,0,1,5,64,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,884,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,3,0,1,0,2,2,0,0,1,5,64,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,890,        final double epsilon = x - (intVal + intFrac / 1024.0);,4,3,0,1,2,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,899,        double z = 0.04168701738764507;,1,0,0,0,0,1,0,0,0,2,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,900,        z = z * epsilon + 0.1666666505023083;,3,2,0,0,0,0,0,0,1,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,901,        z = z * epsilon + 0.5000000000042687;,3,2,0,0,0,0,0,0,1,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,902,        z = z * epsilon + 1.0;,3,2,0,0,0,0,0,0,1,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,903,        z = z * epsilon + -3.940510424527919E-20;,3,2,0,0,0,0,0,0,2,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,910,        double tempA = intPartA * fracPartA;,3,1,0,0,0,1,0,0,0,3,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,911,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,7,5,0,0,0,1,0,0,0,3,82,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,917,        final double tempC = tempB + tempA;,3,1,0,0,0,2,0,0,1,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,919,        if (extra != 0.0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,920,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,10,7,0,0,0,0,0,0,1,3,63,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,922,            result = tempC*z + tempB + tempA;,5,3,0,0,0,0,0,0,1,3,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,925,        if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,927,            hiPrec[0] = tempA;,1,0,1,0,2,0,0,0,1,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,928,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,8,6,1,0,2,0,0,0,1,5,58,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,931,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,939,"      return expm1(x, null);",0,0,0,0,2,1,2,0,1,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,948,        if (x != x || x == 0.0) { // NaN or zero,3,3,0,1,3,1,0,0,0,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,949,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,952,        if (x <= -1.0 || x >= 1.0) {,2,3,0,1,3,1,0,0,1,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,955,            double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,956,"            exp(x, 0.0, hiPrec);",0,0,0,0,2,0,3,0,1,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,957,            if (x > 0.0) {,1,1,0,1,3,1,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,958,                return -1.0 + hiPrec[0] + hiPrec[1];,0,1,1,0,4,1,0,0,1,5,36,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,960,                final double ra = -1.0 + hiPrec[0];,1,1,1,0,2,2,0,0,2,6,35,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,961,                double rb = -(ra + 1.0 - hiPrec[0]);,2,2,1,1,4,1,0,0,1,7,36,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,962,                rb += hiPrec[1];,1,0,1,0,2,0,0,0,1,4,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,963,                return ra + rb;,2,1,0,0,0,1,0,0,0,3,15,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,970,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,972,        if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,973,            x = -x;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,974,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,978,            int intFrac = (int) (x * 1024.0);,2,1,0,1,4,2,0,0,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,979,            double tempA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0;,3,1,1,0,2,1,0,0,0,5,60,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,980,            double tempB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,3,0,1,0,2,1,0,0,0,4,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,982,            double temp = tempA + tempB;,3,1,0,0,0,1,0,0,0,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,983,            tempB = -(temp - tempA - tempB);,4,1,0,1,2,0,0,0,2,5,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,984,            tempA = temp;,2,0,0,0,0,0,0,0,1,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,986,            temp = tempA * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,987,            baseA = tempA + temp - temp;,4,2,0,0,0,0,0,0,1,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,988,            baseB = tempB + (tempA - baseA);,4,2,0,1,2,0,0,0,1,5,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,990,            epsilon = x - intFrac/1024.0;,3,2,0,0,0,0,0,0,1,3,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,995,        double zb = 0.008336750013465571;,1,0,0,0,0,1,0,0,0,2,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,996,        zb = zb * epsilon + 0.041666663879186654;,3,2,0,0,0,0,0,0,1,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,997,        zb = zb * epsilon + 0.16666666666745392;,3,2,0,0,0,0,0,0,1,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,998,        zb = zb * epsilon + 0.49999999999999994;,3,2,0,0,0,0,0,0,1,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,999,        zb = zb * epsilon;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1000,        zb = zb * epsilon;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1002,        double za = epsilon;,2,0,0,0,0,1,0,0,0,2,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1003,        double temp = za + zb;,3,1,0,0,0,1,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1004,        zb = -(temp - za - zb);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1005,        za = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1007,        temp = za * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1008,        temp = za + temp - temp;,4,2,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1009,        zb += za - temp;,3,1,0,0,0,0,0,0,1,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1010,        za = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1013,        double ya = za * baseA;,3,1,0,0,0,1,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1015,        temp = ya + za * baseB;,4,2,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1016,        double yb = -(temp - ya - za * baseB);,5,2,0,1,2,1,0,0,1,6,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1017,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1019,        temp = ya + zb * baseA;,4,2,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1020,        yb += -(temp - ya - zb * baseA);,5,2,0,1,2,0,0,0,2,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1021,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1023,        temp = ya + zb * baseB;,4,2,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1024,        yb += -(temp - ya - zb*baseB);,5,2,0,1,2,0,0,0,2,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1025,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1029,        temp = ya + baseA;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1030,        yb += -(temp - baseA - ya);,4,1,0,1,2,0,0,0,2,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1031,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1033,        temp = ya + za;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1035,        yb += -(temp - ya - za);,4,1,0,1,2,0,0,0,2,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1036,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1038,        temp = ya + baseB;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1040,        yb += -(temp - ya - baseB);,4,1,0,1,2,0,0,0,2,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1041,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1043,        temp = ya + zb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1045,        yb += -(temp - ya - zb);,4,1,0,1,2,0,0,0,2,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1046,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1048,        if (negative) {,1,0,0,1,3,1,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1050,            double denom = 1.0 + ya;,2,1,0,0,0,1,0,0,0,3,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1051,            double denomr = 1.0 / denom;,2,1,0,0,0,1,0,0,0,3,28,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1052,            double denomb = -(denom - 1.0 - ya) + yb;,4,2,0,1,2,1,0,0,1,6,41,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1053,            double ratio = ya * denomr;,3,1,0,0,0,1,0,0,0,3,27,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1054,            temp = ratio * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1055,            final double ra = ratio + temp - temp;,4,2,0,0,0,2,0,0,1,4,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1056,            double rb = ratio - ra;,3,1,0,0,0,1,0,0,0,3,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1058,            temp = denom * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1059,            za = denom + temp - temp;,4,2,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1060,            zb = denom - za;,3,1,0,0,0,0,0,0,1,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1062,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,11,9,0,1,2,0,0,0,1,5,60,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1073,            rb += yb * denomr;                      // numerator,3,1,0,0,0,0,0,0,1,3,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1074,            rb += -ya * denomb * denomr * denomr;   // denominator,5,1,0,0,0,0,0,0,2,3,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1077,            ya = -ra;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1078,            yb = -rb;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1081,        if (hiPrecOut != null) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1082,            hiPrecOut[0] = ya;,1,0,1,0,2,0,0,0,1,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1083,            hiPrecOut[1] = yb;,1,0,1,0,2,0,0,0,1,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1086,        return ya + yb;,2,1,0,0,0,1,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1096,"        return log(x, null);",0,0,0,0,2,1,2,0,1,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1106,        if (x==0) { // Handle special case of +0/-0,1,1,0,1,3,2,0,0,0,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1107,            return Double.NEGATIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1109,        long bits = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1112,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,3,4,0,2,5,1,0,0,0,5,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1113,            if (x != 0.0) {,1,1,0,1,3,1,0,0,0,5,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1114,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1115,                    hiPrec[0] = Double.NaN;,2,0,1,0,2,0,0,0,1,4,23,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1118,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1123,        if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1124,            if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1125,                hiPrec[0] = Double.POSITIVE_INFINITY;,2,0,1,0,2,0,0,0,1,4,37,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1128,            return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1132,        int exp = (int)(bits >> 52)-1023;,2,2,0,1,4,2,0,0,0,5,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1134,        if ((bits & 0x7ff0000000000000L) == 0) {,1,2,0,2,5,1,0,0,0,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1136,            if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1138,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1139,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,2,0,1,0,2,0,0,0,1,4,37,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1142,                return Double.NEGATIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1146,            bits <<= 1;,1,0,0,0,0,0,0,0,1,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1147,            while ( (bits & 0x0010000000000000L) == 0) {,1,2,0,2,5,1,0,0,0,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1148,                exp--;,1,0,0,0,0,0,0,0,1,2,6,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1149,                bits <<= 1;,1,0,0,0,0,0,0,0,1,2,11,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1154,        if (exp == -1 || exp == 0) {,2,3,0,1,3,1,0,0,1,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1155,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,3,5,0,1,3,1,0,0,0,5,45,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1160,                double xa = x - 1.0;,2,1,0,0,0,1,0,0,0,3,20,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1161,                double xb = xa - x + 1.0;,3,2,0,0,0,1,0,0,0,3,25,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1162,                double tmp = xa * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,31,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1163,                double aa = xa + tmp - tmp;,4,2,0,0,0,1,0,0,0,3,27,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1164,                double ab = xa - aa;,3,1,0,0,0,1,0,0,0,3,20,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1165,                xa = aa;,2,0,0,0,0,0,0,0,1,2,8,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1166,                xb = ab;,2,0,0,0,0,0,0,0,1,2,8,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1168,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,3,1,1,0,4,1,0,0,0,5,53,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1169,                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];,3,1,1,0,4,1,0,0,0,5,53,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1171,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,5,2,0,1,3,2,0,0,1,6,53,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1173,                    aa = ya * xa;,3,1,0,0,0,0,0,0,1,3,13,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1174,                    ab = ya * xb + yb * xa + yb * xb;,7,5,0,0,0,0,0,0,1,3,33,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1176,                    tmp = aa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1177,                    ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1178,                    yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1181,                    aa = ya + LN_QUICK_COEF[i][0];,2,1,1,0,4,0,0,0,1,5,30,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1182,                    ab = yb + LN_QUICK_COEF[i][1];,2,1,1,0,4,0,0,0,1,5,30,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1184,                    tmp = aa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1185,                    ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1186,                    yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1190,                aa = ya * xa;,3,1,0,0,0,0,0,0,1,3,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1191,                ab = ya * xb + yb * xa + yb * xb;,7,5,0,0,0,0,0,0,1,3,33,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1193,                tmp = aa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1194,                ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1195,                yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1197,                return ya + yb;,2,1,0,0,0,1,0,0,0,3,15,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1202,        double lnm[] = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,4,2,0,2,10,2,0,0,0,5,73,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1213,        double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,4,4,0,2,6,1,0,0,0,5,89,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1215,        double lnza = 0.0;,1,0,0,0,0,1,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1216,        double lnzb = 0.0;,1,0,0,0,0,1,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1218,        if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1220,            double tmp = epsilon * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1221,            double aa = epsilon + tmp - tmp;,4,2,0,0,0,1,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1222,            double ab = epsilon - aa;,3,1,0,0,0,1,0,0,0,3,25,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1223,            double xa = aa;,2,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1224,            double xb = ab;,2,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1227,            double numer = bits & 0x3ffffffffffL;,2,1,0,0,0,1,0,0,0,3,37,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1228,            double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,3,2,0,1,2,1,0,0,0,5,59,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1229,            aa = numer - xa*denom - xb * denom;,6,4,0,0,0,0,0,0,1,3,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1230,            xb += aa / denom;,3,1,0,0,0,0,0,0,1,3,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1233,            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];,3,1,1,0,4,1,0,0,0,5,57,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1234,            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];,3,1,1,0,4,1,0,0,0,5,57,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1236,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,5,2,0,1,3,2,0,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1238,                aa = ya * xa;,3,1,0,0,0,0,0,0,1,3,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1239,                ab = ya * xb + yb * xa + yb * xb;,7,5,0,0,0,0,0,0,1,3,33,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1241,                tmp = aa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1242,                ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1243,                yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1246,                aa = ya + LN_HI_PREC_COEF[i][0];,2,1,1,0,4,0,0,0,1,5,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1247,                ab = yb + LN_HI_PREC_COEF[i][1];,2,1,1,0,4,0,0,0,1,5,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1249,                tmp = aa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1250,                ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1251,                yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1255,            aa = ya * xa;,3,1,0,0,0,0,0,0,1,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1256,            ab = ya * xb + yb * xa + yb * xb;,7,5,0,0,0,0,0,0,1,3,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1264,            lnza = aa + ab;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1265,            lnzb = -(lnza - aa - ab);,4,1,0,1,2,0,0,0,2,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1266,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1269,            lnza = -0.16624882440418567;,1,0,0,0,0,0,0,0,2,2,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1270,            lnza = lnza * epsilon + 0.19999954120254515;,3,2,0,0,0,0,0,0,1,3,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1271,            lnza = lnza * epsilon + -0.2499999997677497;,3,2,0,0,0,0,0,0,2,3,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1272,            lnza = lnza * epsilon + 0.3333333333332802;,3,2,0,0,0,0,0,0,1,3,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1273,            lnza = lnza * epsilon + -0.5;,3,2,0,0,0,0,0,0,2,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1274,            lnza = lnza * epsilon + 1.0;,3,2,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1275,            lnza = lnza * epsilon;,3,1,0,0,0,0,0,0,1,3,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1292,        double a = LN_2_A*exp;,3,1,0,0,0,1,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1293,        double b = 0.0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1294,        double c = a+lnm[0];,2,1,1,0,2,1,0,0,0,5,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1295,        double d = -(c-a-lnm[0]);,3,1,1,1,4,1,0,0,1,7,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1296,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1297,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1299,        c = a + lnza;,3,1,0,0,0,0,0,0,1,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1300,        d = -(c - a - lnza);,4,1,0,1,2,0,0,0,2,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1301,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1302,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1304,        c = a + LN_2_B*exp;,4,2,0,0,0,0,0,0,1,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1305,        d = -(c - a - LN_2_B*exp);,5,2,0,1,2,0,0,0,2,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1306,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1307,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1309,        c = a + lnm[1];,2,1,1,0,2,0,0,0,1,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1310,        d = -(c - a - lnm[1]);,3,1,1,1,4,0,0,0,2,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1311,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1312,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1314,        c = a + lnzb;,3,1,0,0,0,0,0,0,1,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1315,        d = -(c - a - lnzb);,4,1,0,1,2,0,0,0,2,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1316,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1317,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1319,        if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1320,            hiPrec[0] = a;,1,0,1,0,2,0,0,0,1,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1321,            hiPrec[1] = b;,1,0,1,0,2,0,0,0,1,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1324,        return a + b;,2,1,0,0,0,1,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1333,        if (x == -1) {,1,1,0,1,3,1,0,0,1,6,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1334,            return x/0.0;   // -Infinity,1,1,0,0,0,1,0,0,0,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1337,        if (x > 0 && 1/x == 0) { // x = Infinity,2,4,0,1,3,1,0,0,0,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1338,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1341,        if (x>1e-6 || x<-1e-6) {,2,3,0,1,3,1,0,0,1,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1342,            double xpa = 1.0 + x;,2,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1343,            double xpb = -(xpa - 1.0 - x);,3,1,0,1,2,1,0,0,1,6,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1345,            double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1347,"            final double lores = log(xpa, hiPrec);",1,0,0,0,2,2,3,0,2,5,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1348,            if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0,0,0,2,5,2,3,0,0,4,73,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1349,                return lores;,1,0,0,0,0,1,0,0,0,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1354,            double fx1 = xpb/xpa;,3,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1356,            double epsilon = 0.5 * fx1 + 1.0;,2,2,0,0,0,1,0,0,0,3,33,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1357,            epsilon = epsilon * fx1;,3,1,0,0,0,0,0,0,1,3,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1359,            return epsilon + hiPrec[1] + hiPrec[0];,1,1,1,0,4,1,0,0,0,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1363,        double y = x * F_1_3 - F_1_2;,4,2,0,0,0,1,0,0,0,3,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1364,        y = y * x + 1.0;,3,2,0,0,0,0,0,0,1,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1365,        y = y * x;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1367,        return y;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1375,        final double hiPrec[] = new double[2];,1,0,0,0,4,4,0,0,1,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1377,"        final double lores = log(x, hiPrec);",1,0,0,0,2,2,3,0,2,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1378,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0,0,0,2,5,2,3,0,0,4,73,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1379,            return lores;,1,0,0,0,0,1,0,0,0,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1382,        final double tmp = hiPrec[0] * HEX_40000000;,2,1,1,0,2,2,0,0,1,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1383,        final double lna = hiPrec[0] + tmp - tmp;,3,2,1,0,2,2,0,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1384,        final double lnb = hiPrec[0] - lna + hiPrec[1];,2,2,1,0,4,2,0,0,1,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1386,        final double rln10a = 0.4342944622039795;,1,0,0,0,0,2,0,0,1,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1387,        final double rln10b = 1.9699272335463627E-8;,1,0,0,0,0,2,0,0,1,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1389,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,8,7,0,0,0,1,0,0,0,3,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1409,        return log(x) / log(base);,0,1,0,1,4,1,4,0,2,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1420,        final double lns[] = new double[2];,1,0,0,0,4,4,0,0,1,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1422,        if (y == 0.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1423,            return 1.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1426,        if (x != x) { // X is NaN,2,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1427,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1431,        if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1432,            long bits = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1433,            if ((bits & 0x8000000000000000L) != 0) {,1,2,0,2,5,1,0,0,0,5,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1435,                long yi = (long) y;,2,0,0,1,2,2,0,0,0,4,19,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1437,                if (y < 0 && y == yi && (yi & 1) == 1) {,4,6,0,2,5,1,0,0,0,5,40,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1438,                    return Double.NEGATIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1441,                if (y > 0 && y == yi && (yi & 1) == 1) {,4,6,0,2,5,1,0,0,0,5,40,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1442,                    return -0.0;,0,0,0,0,0,1,0,0,1,2,12,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1446,            if (y < 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1447,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1449,            if (y > 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1450,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1453,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1456,        if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1457,            if (y != y) { // y is NaN,2,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1458,                return y;,1,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1460,            if (y < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1461,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1463,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1467,        if (y == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1468,            if (x * x == 1.0) {,2,2,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1469,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1472,            if (x * x > 1.0) {,2,2,0,1,3,1,0,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1473,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1475,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1479,        if (x == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1480,            if (y != y) { // y is NaN,2,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1481,                return y;,1,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1484,            if (y < 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1485,                long yi = (long) y;,2,0,0,1,2,2,0,0,0,4,19,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1486,                if (y == yi && (yi & 1) == 1) {,3,4,0,2,5,1,0,0,0,5,31,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1487,                    return -0.0;,0,0,0,0,0,1,0,0,1,2,12,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1490,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1493,            if (y > 0)  {,1,1,0,1,3,1,0,0,0,5,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1494,                long yi = (long) y;,2,0,0,1,2,2,0,0,0,4,19,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1495,                if (y == yi && (yi & 1) == 1) {,3,4,0,2,5,1,0,0,0,5,31,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1496,                    return Double.NEGATIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1499,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1503,        if (y == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1505,            if (x * x == 1.0) {,2,2,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1506,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1509,            if (x * x < 1.0) {,2,2,0,1,3,1,0,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1510,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1512,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1517,        if (x < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1519,            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {,4,3,0,1,3,1,0,0,1,6,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1520,"                return pow(-x, y);",1,0,0,0,2,1,2,0,2,5,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1523,            if (y == (long) y) {,2,1,0,2,5,2,0,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1525,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",3,2,0,2,8,2,4,0,5,7,53,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1527,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1534,        if (y < 8e298 && y > -8e298) {,2,3,0,1,3,1,0,0,1,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1535,            double tmp1 = y * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1536,            ya = y + tmp1 - tmp1;,4,2,0,0,0,0,0,0,1,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1537,            yb = y - ya;,3,1,0,0,0,0,0,0,1,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1538,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1539,            double tmp1 = y * 9.31322574615478515625E-10;,2,1,0,0,0,1,0,0,0,3,45,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1540,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,2,1,0,0,0,1,0,0,0,3,48,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1541,            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;,6,3,0,1,2,0,0,0,1,5,56,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1542,            yb = y - ya;,3,1,0,0,0,0,0,0,1,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1546,"        final double lores = log(x, lns);",1,0,0,0,2,2,3,0,2,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1547,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0,0,0,2,5,2,3,0,0,4,73,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1548,            return lores;,1,0,0,0,0,1,0,0,0,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1551,        double lna = lns[0];,1,0,1,0,2,1,0,0,0,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1552,        double lnb = lns[1];,1,0,1,0,2,1,0,0,0,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1555,        double tmp1 = lna * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1556,        double tmp2 = lna + tmp1 - tmp1;,4,2,0,0,0,1,0,0,0,3,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1557,        lnb += lna - tmp2;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1558,        lna = tmp2;,2,0,0,0,0,0,0,0,1,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1561,        final double aa = lna * ya;,3,1,0,0,0,2,0,0,1,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1562,        final double ab = lna * yb + lnb * ya + lnb * yb;,7,5,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1564,        lna = aa+ab;,3,1,0,0,0,0,0,0,1,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1565,        lnb = -(lna - aa - ab);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1567,        double z = 1.0 / 120.0;,1,1,0,0,0,1,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1568,        z = z * lnb + (1.0 / 24.0);,3,3,0,1,2,0,0,0,1,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1569,        z = z * lnb + (1.0 / 6.0);,3,3,0,1,2,0,0,0,1,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1570,        z = z * lnb + 0.5;,3,2,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1571,        z = z * lnb + 1.0;,3,2,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1572,        z = z * lnb;,3,1,0,0,0,0,0,0,1,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1574,"        final double result = exp(lna, z, null);",1,0,0,0,2,2,3,0,2,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1576,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1588,        double x2 = x*x;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1590,        double p = 2.7553817452272217E-6;,1,0,0,0,0,1,0,0,0,2,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1591,        p = p * x2 + -1.9841269659586505E-4;,3,2,0,0,0,0,0,0,2,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1592,        p = p * x2 + 0.008333333333329196;,3,2,0,0,0,0,0,0,1,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1593,        p = p * x2 + -0.16666666666666666;,3,2,0,0,0,0,0,0,2,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1596,        p = p * x2 * x;,4,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1598,        return p;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1608,        double x2 = x*x;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1610,        double p = 2.479773539153719E-5;,1,0,0,0,0,1,0,0,0,2,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1611,        p = p * x2 + -0.0013888888689039883;,3,2,0,0,0,0,0,0,2,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1612,        p = p * x2 + 0.041666666666621166;,3,2,0,0,0,0,0,0,1,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1613,        p = p * x2 + -0.49999999999999994;,3,2,0,0,0,0,0,0,2,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1614,        p *= x2;,2,0,0,0,0,0,0,0,1,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1616,        return p;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1627,        int idx = (int) ((xa * 8.0) + 0.5);,2,2,0,2,6,2,0,0,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1628,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,2,1,1,0,2,2,0,0,1,6,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1631,        final double sintA = SINE_TABLE_A[idx];,1,0,1,0,2,2,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1632,        final double sintB = SINE_TABLE_B[idx];,1,0,1,0,2,2,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1633,        final double costA = COSINE_TABLE_A[idx];,1,0,1,0,2,2,0,0,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1634,        final double costB = COSINE_TABLE_B[idx];,1,0,1,0,2,2,0,0,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1637,        double sinEpsA = epsilon;,2,0,0,0,0,1,0,0,0,2,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1638,        double sinEpsB = polySine(epsilon);,1,0,0,1,2,1,2,0,1,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1639,        final double cosEpsA = 1.0;,1,0,0,0,0,2,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1640,        final double cosEpsB = polyCosine(epsilon);,1,0,0,1,2,2,2,0,2,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1643,        final double temp = sinEpsA * HEX_40000000;,3,1,0,0,0,2,0,0,1,4,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1644,        double temp2 = (sinEpsA + temp) - temp;,4,2,0,1,2,1,0,0,0,5,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1645,        sinEpsB +=  sinEpsA - temp2;,3,1,0,0,0,0,0,0,1,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1646,        sinEpsA = temp2;,2,0,0,0,0,0,0,0,1,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1672,        double a = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1673,        double b = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1675,        double t = sintA;,2,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1676,        double c = a + t;,3,1,0,0,0,1,0,0,0,3,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1677,        double d = -(c - a - t);,4,1,0,1,2,1,0,0,1,6,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1678,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1679,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1681,        t = costA * sinEpsA;,3,1,0,0,0,0,0,0,1,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1682,        c = a + t;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1683,        d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1684,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1685,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1687,        b = b + sintA * cosEpsB + costA * sinEpsB;,6,4,0,0,0,0,0,0,1,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1702,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,9,6,0,0,0,0,0,0,1,3,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1729,        if (xb != 0.0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1730,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,5,5,0,1,5,0,0,0,1,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1732,            c = a + t;,3,1,0,0,0,0,0,0,1,3,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1733,            d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1734,            a = c;,2,0,0,0,0,0,0,0,1,2,6,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1735,            b = b + d;,3,1,0,0,0,0,0,0,1,3,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1738,        result = a + b;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1740,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1751,        final double pi2a = 1.5707963267948966;,1,0,0,0,0,2,0,0,1,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1752,        final double pi2b = 6.123233995736766E-17;,1,0,0,0,0,2,0,0,1,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1754,        final double a = pi2a - xa;,3,1,0,0,0,2,0,0,1,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1755,        double b = -(a - pi2a + xa);,4,2,0,1,2,1,0,0,1,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1756,        b += pi2b - xb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1758,"        return sinQ(a, b);",0,0,0,0,2,1,3,0,1,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1771,        int idx = (int) ((xa * 8.0) + 0.5);,2,2,0,2,6,2,0,0,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1772,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,2,1,1,0,2,2,0,0,1,6,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1775,        final double sintA = SINE_TABLE_A[idx];,1,0,1,0,2,2,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1776,        final double sintB = SINE_TABLE_B[idx];,1,0,1,0,2,2,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1777,        final double costA = COSINE_TABLE_A[idx];,1,0,1,0,2,2,0,0,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1778,        final double costB = COSINE_TABLE_B[idx];,1,0,1,0,2,2,0,0,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1781,        double sinEpsA = epsilon;,2,0,0,0,0,1,0,0,0,2,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1782,        double sinEpsB = polySine(epsilon);,1,0,0,1,2,1,2,0,1,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1783,        final double cosEpsA = 1.0;,1,0,0,0,0,2,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1784,        final double cosEpsB = polyCosine(epsilon);,1,0,0,1,2,2,2,0,2,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1787,        double temp = sinEpsA * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1788,        double temp2 = (sinEpsA + temp) - temp;,4,2,0,1,2,1,0,0,0,5,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1789,        sinEpsB +=  sinEpsA - temp2;,3,1,0,0,0,0,0,0,1,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1790,        sinEpsA = temp2;,2,0,0,0,0,0,0,0,1,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1815,        double a = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1816,        double b = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1819,        double t = sintA;,2,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1820,        double c = a + t;,3,1,0,0,0,1,0,0,0,3,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1821,        double d = -(c - a - t);,4,1,0,1,2,1,0,0,1,6,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1822,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1823,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1825,        t = costA*sinEpsA;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1826,        c = a + t;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1827,        d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1828,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1829,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1831,        b = b + sintA*cosEpsB + costA*sinEpsB;,6,4,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1832,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,9,6,0,0,0,0,0,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1834,        double sina = a + b;,3,1,0,0,0,1,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1835,        double sinb = -(sina - a - b);,4,1,0,1,2,1,0,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1839,        a = b = c = d = 0.0;,4,0,0,0,0,0,0,0,4,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1841,        t = costA*cosEpsA;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1842,        c = a + t;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1843,        d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1844,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1845,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1847,        t = -sintA*sinEpsA;,3,1,0,0,0,0,0,0,2,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1848,        c = a + t;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1849,        d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1850,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1851,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1853,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,8,6,0,0,0,0,0,0,1,3,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1854,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,8,6,0,1,2,0,0,0,1,5,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1856,        double cosa = a + b;,3,1,0,0,0,1,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1857,        double cosb = -(cosa - a - b);,4,1,0,1,2,1,0,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1859,        if (cotanFlag) {,1,0,0,1,3,1,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1861,            tmp = cosa; cosa = sina; sina = tmp;,6,0,0,0,0,0,0,0,3,2,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1862,            tmp = cosb; cosb = sinb; sinb = tmp;,6,0,0,0,0,0,0,0,3,2,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1876,        double est = sina/cosa;,3,1,0,0,0,1,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1879,        temp = est * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1880,        double esta = (est + temp) - temp;,4,2,0,1,2,1,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1881,        double estb =  est - esta;,3,1,0,0,0,1,0,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1883,        temp = cosa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1884,        double cosaa = (cosa + temp) - temp;,4,2,0,1,2,1,0,0,0,5,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1885,        double cosab =  cosa - cosaa;,3,1,0,0,0,1,0,0,0,3,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1888,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,11,9,0,1,2,2,0,0,0,5,114,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1889,        err += sinb/cosa;                     // Change in est due to sinb,3,1,0,0,0,0,0,0,1,3,66,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1890,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,5,3,0,0,0,0,0,0,2,3,66,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1892,        if (xb != 0.0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1895,            double xbadj = xb + est*est*xb;,5,2,0,0,0,1,0,0,0,3,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1896,            if (cotanFlag) {,1,0,0,1,3,1,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1897,                xbadj = -xbadj;,2,0,0,0,0,0,0,0,2,2,15,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1900,            err += xbadj;,2,0,0,0,0,0,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1903,        return est+err;,2,1,0,0,0,1,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1920,        long inbits = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,41,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1921,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,2,3,0,2,6,2,0,0,0,5,53,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1924,        inbits &= 0x000fffffffffffffL;,1,0,0,0,0,0,0,0,1,2,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1925,        inbits |= 0x0010000000000000L;,1,0,0,0,0,0,0,0,1,2,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1928,        exponent++;,1,0,0,0,0,0,0,0,1,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1929,        inbits <<= 11;,1,0,0,0,0,0,0,0,1,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1935,        int idx = exponent >> 6;,2,1,0,0,0,1,0,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1936,        int shift = exponent - (idx << 6);,3,2,0,1,2,1,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1938,        if (shift != 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1939,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,4,3,1,1,6,0,0,0,1,6,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1940,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,2,2,1,1,4,0,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1941,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,4,5,1,2,10,0,0,0,1,6,70,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1942,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,5,6,1,2,10,0,0,0,1,6,72,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1944,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,3,2,1,1,4,0,0,0,1,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1945,            shpiA = RECIP_2PI[idx];,1,0,1,0,2,0,0,0,1,4,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1946,            shpiB = RECIP_2PI[idx+1];,2,1,1,0,2,0,0,0,1,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1950,        long a = inbits >>> 32;,2,1,0,0,0,1,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1951,        long b = inbits & 0xffffffffL;,2,1,0,0,0,1,0,0,0,3,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1953,        long c = shpiA >>> 32;,2,1,0,0,0,1,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1954,        long d = shpiA & 0xffffffffL;,2,1,0,0,0,1,0,0,0,3,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1956,        long ac = a * c;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1957,        long bd = b * d;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1958,        long bc = b * c;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1959,        long ad = a * d;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1961,        long prodB = bd + (ad << 32);,3,2,0,1,2,1,0,0,0,5,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1962,        long prodA = ac + (ad >>> 32);,3,2,0,1,2,1,0,0,0,5,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1964,        boolean bita = (bd & 0x8000000000000000L) != 0;,2,2,0,1,2,1,0,0,0,5,47,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1965,        boolean bitb = (ad & 0x80000000L ) != 0;,2,2,0,1,2,1,0,0,0,5,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1966,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,2,2,0,1,2,1,0,0,0,5,52,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1969,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1971,            prodA++;,1,0,0,0,0,0,0,0,1,2,8,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1974,        bita = (prodB & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1975,        bitb = (bc & 0x80000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1977,        prodB = prodB + (bc << 32);,3,2,0,1,2,0,0,0,1,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1978,        prodA = prodA + (bc >>> 32);,3,2,0,1,2,0,0,0,1,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1980,        bitsum = (prodB & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1983,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1985,            prodA++;,1,0,0,0,0,0,0,0,1,2,8,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1989,        c = shpiB >>> 32;,2,1,0,0,0,0,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1990,        d = shpiB & 0xffffffffL;,2,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1991,        ac = a * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1992,        bc = b * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1993,        ad = a * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1996,        ac = ac + ((bc + ad) >>> 32);,4,3,0,2,4,0,0,0,1,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1998,        bita = (prodB & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,1999,        bitb = (ac & 0x8000000000000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2000,        prodB += ac;,2,0,0,0,0,0,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2001,        bitsum = (prodB & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2003,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2005,            prodA++;,1,0,0,0,0,0,0,0,1,2,8,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2009,        c = shpi0 >>> 32;,2,1,0,0,0,0,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2010,        d = shpi0 & 0xffffffffL;,2,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2012,        bd = b * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2013,        bc = b * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2014,        ad = a * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2016,        prodA += bd + ((bc + ad) << 32);,4,3,0,2,4,0,0,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2028,        int intPart = (int)(prodA >>> 62);,2,1,0,1,4,2,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2031,        prodA <<= 2;,1,0,0,0,0,0,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2032,        prodA |= prodB >>> 62;,2,1,0,0,0,0,0,0,1,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2033,        prodB <<= 2;,1,0,0,0,0,0,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2036,        a = prodA >>> 32;,2,1,0,0,0,0,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2037,        b = prodA & 0xffffffffL;,2,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2039,        c = PI_O_4_BITS[0] >>> 32;,1,1,1,0,2,0,0,0,1,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2040,        d = PI_O_4_BITS[0] & 0xffffffffL;,1,1,1,0,2,0,0,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2042,        ac = a * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2043,        bd = b * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2044,        bc = b * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2045,        ad = a * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2047,        long prod2B = bd + (ad << 32);,3,2,0,1,2,1,0,0,0,5,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2048,        long prod2A = ac + (ad >>> 32);,3,2,0,1,2,1,0,0,0,5,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2050,        bita = (bd & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2051,        bitb = (ad & 0x80000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2052,        bitsum = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2055,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2057,            prod2A++;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2060,        bita = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2061,        bitb = (bc & 0x80000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2063,        prod2B = prod2B + (bc << 32);,3,2,0,1,2,0,0,0,1,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2064,        prod2A = prod2A + (bc >>> 32);,3,2,0,1,2,0,0,0,1,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2066,        bitsum = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2069,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2071,            prod2A++;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2075,        c = PI_O_4_BITS[1] >>> 32;,1,1,1,0,2,0,0,0,1,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2076,        d = PI_O_4_BITS[1] & 0xffffffffL;,1,1,1,0,2,0,0,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2077,        ac = a * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2078,        bc = b * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2079,        ad = a * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2082,        ac = ac + ((bc + ad) >>> 32);,4,3,0,2,4,0,0,0,1,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2084,        bita = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2085,        bitb = (ac & 0x8000000000000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2086,        prod2B += ac;,2,0,0,0,0,0,0,0,1,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2087,        bitsum = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2089,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2091,            prod2A++;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2095,        a = prodB >>> 32;,2,1,0,0,0,0,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2096,        b = prodB & 0xffffffffL;,2,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2097,        c = PI_O_4_BITS[0] >>> 32;,1,1,1,0,2,0,0,0,1,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2098,        d = PI_O_4_BITS[0] & 0xffffffffL;,1,1,1,0,2,0,0,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2099,        ac = a * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2100,        bc = b * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2101,        ad = a * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2104,        ac = ac + ((bc + ad) >>> 32);,4,3,0,2,4,0,0,0,1,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2106,        bita = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2107,        bitb = (ac & 0x8000000000000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2108,        prod2B += ac;,2,0,0,0,0,0,0,0,1,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2109,        bitsum = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2111,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2113,            prod2A++;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2117,        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits,3,2,0,1,2,1,0,0,0,5,68,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2118,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits,5,5,0,3,8,1,0,0,0,5,102,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2120,        double sumA = tmpA + tmpB;,3,1,0,0,0,1,0,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2121,        double sumB = -(sumA - tmpA - tmpB);,4,1,0,1,2,1,0,0,1,6,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2124,        result[0] = intPart;,1,0,1,0,2,0,0,0,1,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2125,        result[1] = sumA * 2.0;,1,1,1,0,2,0,0,0,1,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2126,        result[2] = sumB * 2.0;,1,1,1,0,2,0,0,0,1,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2127,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2136,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2137,        int quadrant = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2139,        double xb = 0.0;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2142,        xa = x;,2,0,0,0,0,0,0,0,1,2,7,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2143,        if (x < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2144,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2145,            xa = -xa;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2149,        if (xa == 0.0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2150,            long bits = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2151,            if (bits < 0) {,1,1,0,1,3,1,0,0,0,5,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2152,                return -0.0;,0,0,0,0,0,1,0,0,1,2,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2154,            return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2157,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,5,3,0,1,3,1,0,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2158,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2162,        if (xa > 3294198.0) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2166,            double reduceResults[] = new double[3];,1,0,0,0,4,3,0,0,0,3,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2167,"            reducePayneHanek(xa, reduceResults);",0,0,0,0,2,0,3,0,1,3,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2168,            quadrant = ((int) reduceResults[0]) & 3;,1,1,1,2,6,1,0,0,1,7,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2169,            xa = reduceResults[1];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2170,            xb = reduceResults[2];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2171,        } else if (xa > 1.5707963267948966) {,1,1,0,1,4,2,0,0,0,5,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2172,"            final CodyWaite cw = new CodyWaite(xa, xb);",3,0,0,0,2,2,0,2,2,5,43,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2173,            quadrant = cw.getK() & 3;,1,1,0,1,2,0,2,0,1,6,25,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2174,            xa = cw.getRemA();,1,0,0,1,2,0,2,0,1,5,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2175,            xb = cw.getRemB();,1,0,0,1,2,0,2,0,1,5,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2178,        if (negative) {,1,0,0,1,3,1,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2179,            quadrant ^= 2;  // Flip bit 1,1,0,0,0,0,0,0,0,1,2,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2182,        switch (quadrant) {,1,0,0,1,3,1,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2184,"                return sinQ(xa, xb);",0,0,0,0,2,1,3,0,1,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2186,"                return cosQ(xa, xb);",0,0,0,0,2,1,3,0,1,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2188,"                return -sinQ(xa, xb);",0,0,0,0,2,1,3,0,2,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2190,"                return -cosQ(xa, xb);",0,0,0,0,2,1,3,0,2,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2192,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2203,        int quadrant = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2206,        double xa = x;,2,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2207,        if (x < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2208,            xa = -xa;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2211,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,5,3,0,1,3,1,0,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2212,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2216,        double xb = 0;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2217,        if (xa > 3294198.0) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2221,            double reduceResults[] = new double[3];,1,0,0,0,4,3,0,0,0,3,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2222,"            reducePayneHanek(xa, reduceResults);",0,0,0,0,2,0,3,0,1,3,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2223,            quadrant = ((int) reduceResults[0]) & 3;,1,1,1,2,6,1,0,0,1,7,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2224,            xa = reduceResults[1];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2225,            xb = reduceResults[2];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2226,        } else if (xa > 1.5707963267948966) {,1,1,0,1,4,2,0,0,0,5,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2227,"            final CodyWaite cw = new CodyWaite(xa, xb);",3,0,0,0,2,2,0,2,2,5,43,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2228,            quadrant = cw.getK() & 3;,1,1,0,1,2,0,2,0,1,6,25,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2229,            xa = cw.getRemA();,1,0,0,1,2,0,2,0,1,5,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2230,            xb = cw.getRemB();,1,0,0,1,2,0,2,0,1,5,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2236,        switch (quadrant) {,1,0,0,1,3,1,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2238,"                return cosQ(xa, xb);",0,0,0,0,2,1,3,0,1,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2240,"                return -sinQ(xa, xb);",0,0,0,0,2,1,3,0,2,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2242,"                return -cosQ(xa, xb);",0,0,0,0,2,1,3,0,2,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2244,"                return sinQ(xa, xb);",0,0,0,0,2,1,3,0,1,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2246,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2257,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2258,        int quadrant = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2261,        double xa = x;,2,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2262,        if (x < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2263,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2264,            xa = -xa;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2268,        if (xa == 0.0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2269,            long bits = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2270,            if (bits < 0) {,1,1,0,1,3,1,0,0,0,5,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2271,                return -0.0;,0,0,0,0,0,1,0,0,1,2,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2273,            return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2276,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,5,3,0,1,3,1,0,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2277,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2281,        double xb = 0;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2282,        if (xa > 3294198.0) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2286,            double reduceResults[] = new double[3];,1,0,0,0,4,3,0,0,0,3,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2287,"            reducePayneHanek(xa, reduceResults);",0,0,0,0,2,0,3,0,1,3,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2288,            quadrant = ((int) reduceResults[0]) & 3;,1,1,1,2,6,1,0,0,1,7,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2289,            xa = reduceResults[1];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2290,            xb = reduceResults[2];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2291,        } else if (xa > 1.5707963267948966) {,1,1,0,1,4,2,0,0,0,5,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2292,"            final CodyWaite cw = new CodyWaite(xa, xb);",3,0,0,0,2,2,0,2,2,5,43,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2293,            quadrant = cw.getK() & 3;,1,1,0,1,2,0,2,0,1,6,25,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2294,            xa = cw.getRemA();,1,0,0,1,2,0,2,0,1,5,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2295,            xb = cw.getRemB();,1,0,0,1,2,0,2,0,1,5,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2298,        if (xa > 1.5) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2300,            final double pi2a = 1.5707963267948966;,1,0,0,0,0,2,0,0,1,3,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2301,            final double pi2b = 6.123233995736766E-17;,1,0,0,0,0,2,0,0,1,3,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2303,            final double a = pi2a - xa;,3,1,0,0,0,2,0,0,1,4,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2304,            double b = -(a - pi2a + xa);,4,2,0,1,2,1,0,0,1,6,28,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2305,            b += pi2b - xb;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2307,            xa = a + b;,3,1,0,0,0,0,0,0,1,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2308,            xb = -(xa - a - b);,4,1,0,1,2,0,0,0,2,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2309,            quadrant ^= 1;,1,0,0,0,0,0,0,0,1,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2310,            negative ^= true;,1,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2314,        if ((quadrant & 1) == 0) {,1,2,0,2,5,1,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2315,"            result = tanQ(xa, xb, false);",1,0,0,0,2,0,3,0,3,4,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2317,"            result = -tanQ(xa, xb, true);",1,0,0,0,2,0,3,0,4,4,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2320,        if (negative) {,1,0,0,1,3,1,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2321,            result = -result;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2324,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2333,"        return atan(x, 0.0, false);",0,0,0,0,2,1,2,0,2,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2343,        boolean negate = false;,1,0,0,0,0,1,0,0,1,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2346,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,1,1,0,1,3,2,0,0,0,5,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2347,"            return leftPlane ? copySign(Math.PI, xa) : xa;",4,0,0,0,2,1,2,0,1,5,46,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2350,        if (xa < 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2352,            xa = -xa;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2353,            xb = -xb;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2354,            negate = true;,1,0,0,0,0,0,0,0,2,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2357,        if (xa > 1.633123935319537E16) { // Very large input,1,1,0,1,3,1,0,0,0,5,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2358,            return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);,8,3,0,1,6,1,0,0,1,6,69,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2362,        if (xa < 1) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2363,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,4,4,0,3,8,1,0,0,2,6,65,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2365,            final double oneOverXa = 1 / xa;,2,1,0,0,0,2,0,0,1,4,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2366,            idx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);,4,4,0,3,8,1,0,0,3,6,89,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2368,        double epsA = xa - TANGENT_TABLE_A[idx];,2,1,1,0,2,1,0,0,0,5,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2369,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,3,2,1,1,4,1,0,0,1,7,50,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2370,        epsB += xb - TANGENT_TABLE_B[idx];,2,1,1,0,2,0,0,0,1,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2372,        double temp = epsA + epsB;,3,1,0,0,0,1,0,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2373,        epsB = -(temp - epsA - epsB);,4,1,0,1,2,0,0,0,2,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2374,        epsA = temp;,2,0,0,0,0,0,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2377,        temp = xa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2378,        double ya = xa + temp - temp;,4,2,0,0,0,1,0,0,0,3,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2379,        double yb = xb + xa - ya;,4,2,0,0,0,1,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2380,        xa = ya;,2,0,0,0,0,0,0,0,1,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2381,        xb += yb;,2,0,0,0,0,0,0,0,1,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2384,        if (idx == 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2387,            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,3,5,1,2,10,2,0,0,1,7,91,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2389,            ya = epsA * denom;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2390,            yb = epsB * denom;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2391,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2392,            double temp2 = xa * TANGENT_TABLE_A[idx];,2,1,1,0,2,1,0,0,0,5,41,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2393,            double za = 1d + temp2;,2,1,0,0,0,1,0,0,0,3,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2394,            double zb = -(za - 1d - temp2);,3,1,0,1,2,1,0,0,1,6,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2395,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,3,3,1,0,4,0,0,0,1,5,62,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2396,            temp = za + temp2;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2397,            zb += -(temp - za - temp2);,4,1,0,1,2,0,0,0,2,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2398,            za = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2400,            zb += xb * TANGENT_TABLE_B[idx];,2,1,1,0,2,0,0,0,1,5,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2401,            ya = epsA / za;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2403,            temp = ya * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2404,            final double yaa = (ya + temp) - temp;,4,2,0,1,2,2,0,0,1,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2405,            final double yab = ya - yaa;,3,1,0,0,0,2,0,0,1,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2407,            temp = za * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2408,            final double zaa = (za + temp) - temp;,4,2,0,1,2,2,0,0,1,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2409,            final double zab = za - zaa;,3,1,0,0,0,2,0,0,1,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2412,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,11,9,0,1,2,0,0,0,1,5,65,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2414,            yb += -epsA * zb / za / za;,5,3,0,0,0,0,0,0,2,3,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2415,            yb += epsB / za;,3,1,0,0,0,0,0,0,1,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2419,        epsA = ya;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2420,        epsB = yb;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2423,        final double epsA2 = epsA * epsA;,3,1,0,0,0,2,0,0,1,4,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2434,        yb = 0.07490822288864472;,1,0,0,0,0,0,0,0,1,2,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2435,        yb = yb * epsA2 + -0.09088450866185192;,3,2,0,0,0,0,0,0,2,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2436,        yb = yb * epsA2 + 0.11111095942313305;,3,2,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2437,        yb = yb * epsA2 + -0.1428571423679182;,3,2,0,0,0,0,0,0,2,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2438,        yb = yb * epsA2 + 0.19999999999923582;,3,2,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2439,        yb = yb * epsA2 + -0.33333333333333287;,3,2,0,0,0,0,0,0,2,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2440,        yb = yb * epsA2 * epsA;,4,1,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2443,        ya = epsA;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2445,        temp = ya + yb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2446,        yb = -(temp - ya - yb);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2447,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2450,        yb += epsB / (1d + epsA * epsA);,4,3,0,1,2,0,0,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2453,        double za = EIGHTHS[idx] + ya;,2,1,1,0,2,1,0,0,0,5,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2454,        double zb = -(za - EIGHTHS[idx] - ya);,3,1,1,1,4,1,0,0,1,7,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2455,        temp = za + yb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2456,        zb += -(temp - za - yb);,4,1,0,1,2,0,0,0,2,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2457,        za = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2459,        double result = za + zb;,3,1,0,0,0,1,0,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2460,        double resultb = -(result - za - zb);,4,1,0,1,2,1,0,0,1,6,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2462,        if (leftPlane) {,1,0,0,1,3,1,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2464,            final double pia = 1.5707963267948966 * 2;,1,1,0,0,0,2,0,0,1,4,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2465,            final double pib = 6.123233995736766E-17 * 2;,1,1,0,0,0,2,0,0,1,4,45,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2467,            za = pia - result;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2468,            zb = -(za - pia + result);,4,2,0,1,2,0,0,0,2,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2469,            zb += pib - resultb;,3,1,0,0,0,0,0,0,1,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2471,            result = za + zb;,3,1,0,0,0,0,0,0,1,3,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2472,            resultb = -(result - za - zb);,4,1,0,1,2,0,0,0,2,5,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2476,        if (negate ^ leftPlane) {,2,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2477,            result = -result;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2480,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2490,        if (x != x || y != y) {,4,3,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2491,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2494,        if (y == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2495,            final double result = x * y;,3,1,0,0,0,2,0,0,1,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2496,            final double invx = 1d / x;,2,1,0,0,0,2,0,0,1,4,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2497,            final double invy = 1d / y;,2,1,0,0,0,2,0,0,1,4,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2499,            if (invx == 0) { // X is infinite,1,1,0,1,3,1,0,0,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2500,                if (x > 0) {,1,1,0,1,3,1,0,0,0,5,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2501,                    return y; // return +/- 0.0,1,0,0,0,0,2,0,0,0,2,27,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2503,"                    return copySign(Math.PI, y);",2,0,0,0,2,1,2,0,1,5,28,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2507,            if (x < 0 || invx < 0) {,2,3,0,1,3,1,0,0,0,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2508,                if (y < 0 || invy < 0) {,2,3,0,1,3,1,0,0,0,5,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2509,                    return -Math.PI;,2,0,0,0,0,1,0,0,1,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2511,                    return Math.PI;,2,0,0,0,0,1,0,0,0,2,15,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2514,                return result;,1,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2520,        if (y == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2521,            if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2522,                return Math.PI * F_1_4;,3,1,0,0,0,1,0,0,0,3,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2525,            if (x == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2526,                return Math.PI * F_3_4;,3,1,0,0,0,1,0,0,0,3,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2529,            return Math.PI * F_1_2;,3,1,0,0,0,1,0,0,0,3,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2532,        if (y == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2533,            if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2534,                return -Math.PI * F_1_4;,3,1,0,0,0,1,0,0,1,4,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2537,            if (x == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2538,                return -Math.PI * F_3_4;,3,1,0,0,0,1,0,0,1,4,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2541,            return -Math.PI * F_1_2;,3,1,0,0,0,1,0,0,1,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2544,        if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2545,            if (y > 0 || 1 / y > 0) {,2,4,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2546,                return 0d;,0,0,0,0,0,1,0,0,0,1,10,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2549,            if (y < 0 || 1 / y < 0) {,2,4,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2550,                return -0d;,0,0,0,0,0,1,0,0,1,2,11,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2554,        if (x == Double.NEGATIVE_INFINITY),3,1,0,1,2,1,0,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2556,            if (y > 0.0 || 1 / y > 0.0) {,2,4,0,1,3,1,0,0,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2557,                return Math.PI;,2,0,0,0,0,1,0,0,0,2,15,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2560,            if (y < 0 || 1 / y < 0) {,2,4,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2561,                return -Math.PI;,2,0,0,0,0,1,0,0,1,3,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2567,        if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2568,            if (y > 0 || 1 / y > 0) {,2,4,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2569,                return Math.PI * F_1_2;,3,1,0,0,0,1,0,0,0,3,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2572,            if (y < 0 || 1 / y < 0) {,2,4,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2573,                return -Math.PI * F_1_2;,3,1,0,0,0,1,0,0,1,4,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2578,        final double r = y / x;,3,1,0,0,0,2,0,0,1,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2579,        if (Double.isInfinite(r)) { // bypass calculations that can create NaN,0,0,0,2,5,1,3,0,0,4,70,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2580,"            return atan(r, 0, x < 0);",1,1,0,0,2,1,2,0,1,6,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2583,        double ra = doubleHighPart(r);,1,0,0,1,2,1,2,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2584,        double rb = r - ra;,3,1,0,0,0,1,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2587,        final double xa = doubleHighPart(x);,1,0,0,1,2,2,2,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2588,        final double xb = x - xa;,3,1,0,0,0,2,0,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2590,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,11,9,0,1,2,0,0,0,1,5,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2592,        final double temp = ra + rb;,3,1,0,0,0,2,0,0,1,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2593,        rb = -(temp - ra - rb);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2594,        ra = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2596,        if (ra == 0) { // Fix up the sign so atan works correctly,1,1,0,1,3,1,0,0,0,5,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2597,"            ra = copySign(0d, y);",1,0,0,0,2,0,2,0,2,4,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2601,"        final double result = atan(ra, rb, x < 0);",2,1,0,0,2,2,3,0,2,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2603,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2611,      if (x != x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2612,          return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2615,      if (x > 1.0 || x < -1.0) {,2,3,0,1,3,1,0,0,1,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2616,          return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2619,      if (x == 1.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2620,          return Math.PI/2.0;,2,1,0,0,0,1,0,0,0,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2623,      if (x == -1.0) {,1,1,0,1,3,1,0,0,1,6,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2624,          return -Math.PI/2.0;,2,1,0,0,0,1,0,0,1,4,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2627,      if (x == 0.0) { // Matches +/- 0.0; return correct sign,1,1,0,1,3,2,0,0,0,5,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2628,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2634,      double temp = x * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2635,      final double xa = x + temp - temp;,4,2,0,0,0,2,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2636,      final double xb = x - xa;,3,1,0,0,0,2,0,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2639,      double ya = xa*xa;,3,1,0,0,0,1,0,0,0,3,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2640,      double yb = xa*xb*2.0 + xb*xb;,5,3,0,0,0,1,0,0,0,3,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2643,      ya = -ya;,2,0,0,0,0,0,0,0,2,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2644,      yb = -yb;,2,0,0,0,0,0,0,0,2,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2646,      double za = 1.0 + ya;,2,1,0,0,0,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2647,      double zb = -(za - 1.0 - ya);,3,1,0,1,2,1,0,0,1,6,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2649,      temp = za + yb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2650,      zb += -(temp - za - yb);,4,1,0,1,2,0,0,0,2,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2651,      za = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2655,      y = sqrt(za);,1,0,0,1,2,0,2,0,2,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2656,      temp = y * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2657,      ya = y + temp - temp;,4,2,0,0,0,0,0,0,1,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2658,      yb = y - ya;,3,1,0,0,0,0,0,0,1,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2661,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,9,8,0,1,4,0,0,0,1,5,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2664,      double dx = zb / (2.0*y);,3,2,0,1,2,1,0,0,0,5,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2667,      double r = x/y;,3,1,0,0,0,1,0,0,0,3,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2668,      temp = r * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2669,      double ra = r + temp - temp;,4,2,0,0,0,1,0,0,0,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2670,      double rb = r - ra;,3,1,0,0,0,1,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2672,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,11,9,0,1,2,1,0,0,1,6,83,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2673,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,5,3,0,0,0,0,0,0,2,3,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2675,      temp = ra + rb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2676,      rb = -(temp - ra - rb);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2677,      ra = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2679,"      return atan(ra, rb, false);",0,0,0,0,2,1,3,0,2,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2687,      if (x != x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2688,          return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2691,      if (x > 1.0 || x < -1.0) {,2,3,0,1,3,1,0,0,1,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2692,          return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2695,      if (x == -1.0) {,1,1,0,1,3,1,0,0,1,6,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2696,          return Math.PI;,2,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2699,      if (x == 1.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2700,          return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2703,      if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2704,          return Math.PI/2.0;,2,1,0,0,0,1,0,0,0,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2710,      double temp = x * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2711,      final double xa = x + temp - temp;,4,2,0,0,0,2,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2712,      final double xb = x - xa;,3,1,0,0,0,2,0,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2715,      double ya = xa*xa;,3,1,0,0,0,1,0,0,0,3,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2716,      double yb = xa*xb*2.0 + xb*xb;,5,3,0,0,0,1,0,0,0,3,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2719,      ya = -ya;,2,0,0,0,0,0,0,0,2,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2720,      yb = -yb;,2,0,0,0,0,0,0,0,2,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2722,      double za = 1.0 + ya;,2,1,0,0,0,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2723,      double zb = -(za - 1.0 - ya);,3,1,0,1,2,1,0,0,1,6,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2725,      temp = za + yb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2726,      zb += -(temp - za - yb);,4,1,0,1,2,0,0,0,2,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2727,      za = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2730,      double y = sqrt(za);,1,0,0,1,2,1,2,0,1,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2731,      temp = y * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2732,      ya = y + temp - temp;,4,2,0,0,0,0,0,0,1,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2733,      yb = y - ya;,3,1,0,0,0,0,0,0,1,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2736,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,9,8,0,1,4,0,0,0,1,5,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2739,      yb += zb / (2.0*y);,3,2,0,1,2,0,0,0,1,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2740,      y = ya+yb;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2741,      yb = -(y - ya - yb);,4,1,0,1,2,0,0,0,2,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2744,      double r = y/x;,3,1,0,0,0,1,0,0,0,3,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2747,      if (Double.isInfinite(r)) { // x is effectively zero,0,0,0,2,5,1,3,0,0,4,52,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2748,          return Math.PI/2; // so return the appropriate value,2,1,0,0,0,2,0,0,0,3,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2751,      double ra = doubleHighPart(r);,1,0,0,1,2,1,2,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2752,      double rb = r - ra;,3,1,0,0,0,1,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2754,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,11,9,0,1,2,1,0,0,1,6,83,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2755,      rb += yb / x;  // Add in effect additional bits of sqrt.,3,1,0,0,0,0,0,0,1,3,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2757,      temp = ra + rb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2758,      rb = -(temp - ra - rb);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2759,      ra = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2761,"      return atan(ra, rb, x<0);",1,1,0,0,2,1,3,0,1,6,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2770,      long inbits = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,41,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2771,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,2,3,0,2,6,2,0,0,0,5,53,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2772,      boolean subnormal = false;,1,0,0,0,0,1,0,0,1,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2774,      if (exponent == -1023) {,1,1,0,1,3,1,0,0,1,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2775,          if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2776,              return x;,1,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2780,          subnormal = true;,1,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2781,          x *= 1.8014398509481984E16;  // 2^54,1,0,0,0,0,0,0,0,1,2,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2782,          inbits = Double.doubleToLongBits(x);,1,0,0,1,2,0,3,0,1,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2783,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,2,3,0,2,6,1,0,0,1,6,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2786,      if (exponent == 1024) {,1,1,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2788,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2792,      int exp3 = exponent / 3;,2,1,0,0,0,1,0,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2795,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,2,2,0,1,3,1,2,0,0,6,68,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2799,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,2,2,0,2,4,2,2,0,1,7,98,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2802,      double est = -0.010714690733195933;,1,0,0,0,0,1,0,0,1,3,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2803,      est = est * mant + 0.0875862700108075;,3,2,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2804,      est = est * mant + -0.3058015757857271;,3,2,0,0,0,0,0,0,2,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2805,      est = est * mant + 0.7249995199969751;,3,2,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2806,      est = est * mant + 0.5039018405998233;,3,2,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2808,      est *= CBRTTWO[exponent % 3 + 2];,2,2,1,0,2,0,0,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2813,      final double xs = x / (p2*p2*p2);,5,2,0,1,2,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2814,      est += (xs - est*est*est) / (3*est*est);,7,4,0,1,4,0,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2815,      est += (xs - est*est*est) / (3*est*est);,7,4,0,1,4,0,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2818,      double temp = est * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2819,      double ya = est + temp - temp;,4,2,0,0,0,1,0,0,0,3,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2820,      double yb = est - ya;,3,1,0,0,0,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2822,      double za = ya * ya;,3,1,0,0,0,1,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2823,      double zb = ya * yb * 2.0 + yb * yb;,5,3,0,0,0,1,0,0,0,3,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2824,      temp = za * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2825,      double temp2 = za + temp - temp;,4,2,0,0,0,1,0,0,0,3,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2826,      zb += za - temp2;,3,1,0,0,0,0,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2827,      za = temp2;,2,0,0,0,0,0,0,0,1,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2829,      zb = za * yb + ya * zb + zb * yb;,7,5,0,0,0,0,0,0,1,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2830,      za = za * ya;,3,1,0,0,0,0,0,0,1,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2832,      double na = xs - za;,3,1,0,0,0,1,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2833,      double nb = -(na - xs + za);,4,2,0,1,2,1,0,0,1,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2834,      nb -= zb;,2,0,0,0,0,0,0,0,1,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2836,      est += (na+nb)/(3*est*est);,5,3,0,1,4,0,0,0,1,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2839,      est *= p2;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2841,      if (subnormal) {,1,0,0,1,3,1,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2842,          est *= 3.814697265625E-6;  // 2^-18,1,0,0,0,0,0,0,0,1,2,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2845,      return est;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2855,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,1,2,0,2,5,2,3,0,0,6,79,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2856,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2860,        final double facta = 0.01745329052209854;,1,0,0,0,0,2,0,0,1,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2861,        final double factb = 1.997844754509471E-9;,1,0,0,0,0,2,0,0,1,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2863,        double xa = doubleHighPart(x);,1,0,0,1,2,1,2,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2864,        double xb = x - xa;,3,1,0,0,0,1,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2866,        double result = xb * factb + xb * facta + xa * factb + xa * facta;,9,7,0,0,0,1,0,0,0,3,66,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2867,        if (result == 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2868,            result = result * x; // ensure correct sign if calculation underflows,3,1,0,0,0,1,0,0,1,4,69,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2870,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2880,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,1,2,0,2,5,2,3,0,0,6,79,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2881,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2885,        final double facta = 57.2957763671875;,1,0,0,0,0,2,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2886,        final double factb = 3.145894820876798E-6;,1,0,0,0,0,2,0,0,1,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2888,        double xa = doubleHighPart(x);,1,0,0,1,2,1,2,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2889,        double xb = x - xa;,3,1,0,0,0,1,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2891,        return xb * factb + xb * facta + xa * factb + xa * facta;,8,7,0,0,0,1,0,0,0,3,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2900,        return (x < 0) ? -x : x;,3,1,0,1,2,1,0,0,1,6,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2918,        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0,4,2,0,1,4,1,0,0,1,6,64,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2936,        if (Double.isInfinite(x)) {,0,0,0,2,5,1,3,0,0,4,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2937,            return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2939,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,1,2,0,3,6,1,6,0,1,7,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2948,        if (Float.isInfinite(x)) {,0,0,0,2,5,1,3,0,0,4,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2949,            return Float.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2951,        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));,1,2,0,3,6,1,6,0,1,7,66,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2963,        if ((n > -1023) && (n < 1024)) {,2,3,0,2,7,1,0,0,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2964,            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);,2,3,0,3,8,2,2,0,0,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2968,        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {,1,2,0,2,9,1,6,0,0,6,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2969,            return d;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2971,        if (n < -2098) {,1,1,0,1,3,1,0,0,1,6,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2972,            return (d > 0) ? 0.0 : -0.0;,1,1,0,1,2,1,0,0,1,6,28,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2974,        if (n > 2097) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2975,            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,5,1,0,1,2,1,0,0,0,5,69,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2979,        final long bits = Double.doubleToLongBits(d);,1,0,0,1,2,2,3,0,1,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2980,        final long sign = bits & 0x8000000000000000L;,2,1,0,0,0,2,0,0,1,4,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2981,        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;,2,2,0,2,6,2,0,0,0,5,48,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2982,        long mantissa   = bits & 0x000fffffffffffffL;,2,1,0,0,0,1,0,0,0,3,45,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2985,        int scaledExponent = exponent + n;,3,1,0,0,0,1,0,0,0,3,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2987,        if (n < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2989,            if (scaledExponent > 0) {,1,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2991,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,3,2,0,4,8,2,2,0,0,6,82,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2992,            } else if (scaledExponent > -53) {,1,1,0,1,4,2,0,0,1,6,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2996,                mantissa = mantissa | (1L << 52);,2,2,0,1,2,0,0,0,1,5,33,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,2999,                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));,3,2,0,2,4,2,0,0,2,6,73,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3000,                mantissa = mantissa >>> (1 - scaledExponent);,3,2,0,1,2,0,0,0,1,5,45,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3001,                if (mostSignificantLostBit != 0) {,1,1,0,1,3,1,0,0,0,5,34,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3003,                    mantissa++;,1,0,0,0,0,0,0,0,1,2,11,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3005,                return Double.longBitsToDouble(sign | mantissa);,2,1,0,1,2,1,2,0,0,6,48,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3009,                return (sign == 0L) ? 0.0 : -0.0;,1,1,0,1,2,1,0,0,1,6,33,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3013,            if (exponent == 0) {,1,1,0,1,3,1,0,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3016,                while ((mantissa >>> 52) != 1) {,1,2,0,2,5,1,0,0,0,5,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3017,                    mantissa = mantissa << 1;,2,1,0,0,0,0,0,0,1,3,25,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3018,                    --scaledExponent;,1,0,0,0,0,0,0,0,1,2,17,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3020,                ++scaledExponent;,1,0,0,0,0,0,0,0,1,2,17,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3021,                mantissa = mantissa & 0x000fffffffffffffL;,2,1,0,0,0,0,0,0,1,3,42,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3023,                if (scaledExponent < 2047) {,1,1,0,1,3,1,0,0,0,5,28,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3024,                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,3,2,0,4,8,2,2,0,0,6,82,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3026,                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,5,1,0,1,2,1,0,0,0,5,74,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3029,            } else if (scaledExponent < 2047) {,1,1,0,1,4,2,0,0,0,5,35,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3030,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,3,2,0,4,8,2,2,0,0,6,82,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3032,                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,5,1,0,1,2,1,0,0,0,5,74,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3047,        if ((n > -127) && (n < 128)) {,2,3,0,2,7,1,0,0,1,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3048,            return f * Float.intBitsToFloat((n + 127) << 23);,2,3,0,2,4,1,2,0,0,6,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3052,        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {,1,2,0,2,9,1,6,0,0,6,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3053,            return f;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3055,        if (n < -277) {,1,1,0,1,3,1,0,0,1,6,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3056,            return (f > 0) ? 0.0f : -0.0f;,1,1,0,1,2,1,0,0,1,6,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3058,        if (n > 276) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3059,            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,5,1,0,1,2,1,0,0,0,5,67,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3063,        final int bits = Float.floatToIntBits(f);,1,0,0,1,2,2,3,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3064,        final int sign = bits & 0x80000000;,2,1,0,0,0,2,0,0,1,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3065,        int  exponent  = (bits >>> 23) & 0xff;,2,2,0,1,2,1,0,0,0,5,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3066,        int mantissa   = bits & 0x007fffff;,2,1,0,0,0,1,0,0,0,3,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3069,        int scaledExponent = exponent + n;,3,1,0,0,0,1,0,0,0,3,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3071,        if (n < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3073,            if (scaledExponent > 0) {,1,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3075,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,3,2,0,2,4,1,2,0,0,6,70,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3076,            } else if (scaledExponent > -24) {,1,1,0,1,4,2,0,0,1,6,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3080,                mantissa = mantissa | (1 << 23);,2,2,0,1,2,0,0,0,1,5,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3083,                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));,3,2,0,2,4,2,0,0,2,6,71,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3084,                mantissa = mantissa >>> (1 - scaledExponent);,3,2,0,1,2,0,0,0,1,5,45,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3085,                if (mostSignificantLostBit != 0) {,1,1,0,1,3,1,0,0,0,5,34,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3087,                    mantissa++;,1,0,0,0,0,0,0,0,1,2,11,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3089,                return Float.intBitsToFloat(sign | mantissa);,2,1,0,1,2,1,2,0,0,6,45,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3093,                return (sign == 0) ? 0.0f : -0.0f;,1,1,0,1,2,1,0,0,1,6,34,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3097,            if (exponent == 0) {,1,1,0,1,3,1,0,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3100,                while ((mantissa >>> 23) != 1) {,1,2,0,2,5,1,0,0,0,5,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3101,                    mantissa = mantissa << 1;,2,1,0,0,0,0,0,0,1,3,25,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3102,                    --scaledExponent;,1,0,0,0,0,0,0,0,1,2,17,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3104,                ++scaledExponent;,1,0,0,0,0,0,0,0,1,2,17,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3105,                mantissa = mantissa & 0x007fffff;,2,1,0,0,0,0,0,0,1,3,33,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3107,                if (scaledExponent < 255) {,1,1,0,1,3,1,0,0,0,5,27,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3108,                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,3,2,0,2,4,1,2,0,0,6,70,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3110,                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,5,1,0,1,2,1,0,0,0,5,71,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3113,            } else if (scaledExponent < 255) {,1,1,0,1,4,2,0,0,0,5,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3114,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,3,2,0,2,4,1,2,0,0,6,70,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3116,                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,5,1,0,1,2,1,0,0,0,5,71,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3156,        if (Double.isNaN(d) || Double.isNaN(direction)) {,0,1,0,2,7,1,6,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3157,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3158,        } else if (d == direction) {,2,1,0,1,4,2,0,0,0,5,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3159,            return direction;,1,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3160,        } else if (Double.isInfinite(d)) {,0,0,0,2,6,2,3,0,0,4,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3161,            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;,5,1,0,1,2,1,0,0,1,6,54,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3162,        } else if (d == 0) {,1,1,0,1,4,2,0,0,0,5,20,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3163,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,5,1,0,1,2,1,0,0,1,6,62,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3168,        final long bits = Double.doubleToLongBits(d);,1,0,0,1,2,2,3,0,1,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3169,        final long sign = bits & 0x8000000000000000L;,2,1,0,0,0,2,0,0,1,4,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3170,        if ((direction < d) ^ (sign == 0L)) {,3,3,0,2,7,1,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3171,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));,2,3,0,3,6,1,2,0,0,6,74,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3173,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));,2,3,0,3,6,1,2,0,0,6,74,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3212,        if (Double.isNaN(f) || Double.isNaN(direction)) {,0,1,0,2,7,1,6,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3213,            return Float.NaN;,2,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3214,        } else if (f == direction) {,2,1,0,1,4,2,0,0,0,5,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3215,            return (float) direction;,1,0,0,1,2,2,0,0,0,4,25,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3216,        } else if (Float.isInfinite(f)) {,0,0,0,2,6,2,3,0,0,4,33,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3217,            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;,5,1,0,1,2,1,0,0,1,6,53,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3218,        } else if (f == 0f) {,1,1,0,1,4,2,0,0,0,5,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3219,            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;,5,1,0,1,2,1,0,0,1,6,60,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3224,        final int bits = Float.floatToIntBits(f);,1,0,0,1,2,2,3,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3225,        final int sign = bits & 0x80000000;,2,1,0,0,0,2,0,0,1,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3226,        if ((direction < f) ^ (sign == 0)) {,3,3,0,2,7,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3227,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));,2,3,0,3,6,1,2,0,0,6,62,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3229,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));,2,3,0,3,6,1,2,0,0,6,62,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3241,        if (x != x) { // NaN,2,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3242,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3245,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,4,3,0,1,3,1,0,0,1,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3246,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3249,        y = (long) x;,2,0,0,1,2,1,0,0,1,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3250,        if (x < 0 && y != x) {,3,3,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3251,            y--;,1,0,0,0,0,0,0,0,1,2,4,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3254,        if (y == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3255,            return x*y;,2,1,0,0,0,1,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3258,        return y;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3268,        if (x != x) { // NaN,2,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3269,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3272,        y = floor(x);,1,0,0,1,2,0,2,0,2,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3273,        if (y == x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3274,            return y;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3277,        y += 1.0;,1,0,0,0,0,0,0,0,1,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3279,        if (y == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3280,            return x*y;,2,1,0,0,0,1,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3283,        return y;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3291,        double y = floor(x);,1,0,0,1,2,1,2,0,1,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3292,        double d = x - y;,3,1,0,0,0,1,0,0,0,3,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3294,        if (d > 0.5) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3295,            if (y == -1.0) {,1,1,0,1,3,1,0,0,1,6,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3296,                return -0.0; // Preserve sign of operand,0,0,0,0,0,1,0,0,1,2,40,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3298,            return y+1.0;,1,1,0,0,0,1,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3300,        if (d < 0.5) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3301,            return y;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3305,        long z = (long) y;,2,0,0,1,2,2,0,0,0,4,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3306,        return (z & 1) == 0 ? y : y + 1.0;,3,3,0,1,2,1,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3314,        return (long) floor(x + 0.5);,1,1,0,1,4,2,1,0,1,7,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3322,        return (int) floor(x + 0.5f);,1,1,0,1,4,2,1,0,1,7,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3331,        return (a <= b) ? a : b;,4,1,0,1,2,1,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3340,        return (a <= b) ? a : b;,4,1,0,1,2,1,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3349,        if (a > b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3350,            return b;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3352,        if (a < b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3353,            return a;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3356,        if (a != b) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3357,            return Float.NaN;,2,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3361,        int bits = Float.floatToRawIntBits(a);,1,0,0,1,2,1,3,0,0,5,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3362,        if (bits == 0x80000000) {,1,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3363,            return a;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3365,        return b;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3374,        if (a > b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3375,            return b;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3377,        if (a < b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3378,            return a;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3381,        if (a != b) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3382,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3386,        long bits = Double.doubleToRawLongBits(a);,1,0,0,1,2,1,3,0,0,5,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3387,        if (bits == 0x8000000000000000L) {,1,1,0,1,3,1,0,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3388,            return a;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3390,        return b;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3399,        return (a <= b) ? b : a;,4,1,0,1,2,1,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3408,        return (a <= b) ? b : a;,4,1,0,1,2,1,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3417,        if (a > b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3418,            return a;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3420,        if (a < b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3421,            return b;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3424,        if (a != b) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3425,            return Float.NaN;,2,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3429,        int bits = Float.floatToRawIntBits(a);,1,0,0,1,2,1,3,0,0,5,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3430,        if (bits == 0x80000000) {,1,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3431,            return b;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3433,        return a;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3442,        if (a > b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3443,            return a;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3445,        if (a < b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3446,            return b;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3449,        if (a != b) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3450,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3454,        long bits = Double.doubleToRawLongBits(a);,1,0,0,1,2,1,3,0,0,5,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3455,        if (bits == 0x8000000000000000L) {,1,1,0,1,3,1,0,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3456,            return b;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3458,        return a;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3476,        if (Double.isInfinite(x) || Double.isInfinite(y)) {,0,1,0,2,7,1,6,0,0,5,51,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3477,            return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3478,        } else if (Double.isNaN(x) || Double.isNaN(y)) {,0,1,0,2,8,2,6,0,0,5,48,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3479,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3482,            final int expX = getExponent(x);,1,0,0,1,2,2,2,0,2,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3483,            final int expY = getExponent(y);,1,0,0,1,2,2,2,0,2,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3484,            if (expX > expY + 27) {,2,2,0,1,3,1,0,0,0,5,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3486,                return abs(x);,0,0,0,1,2,1,2,0,1,5,14,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3487,            } else if (expY > expX + 27) {,2,2,0,1,4,2,0,0,0,5,30,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3489,                return abs(y);,0,0,0,1,2,1,2,0,1,5,14,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3493,                final int middleExp = (expX + expY) / 2;,3,2,0,1,2,2,0,0,1,6,40,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3496,"                final double scaledX = scalb(x, -middleExp);",2,0,0,0,2,2,2,0,3,5,44,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3497,"                final double scaledY = scalb(y, -middleExp);",2,0,0,0,2,2,2,0,3,5,44,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3500,                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);,5,3,0,1,2,2,1,0,2,7,67,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3503,"                return scalb(scaledH, middleExp);",0,0,0,0,2,1,3,0,1,4,33,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3531,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation",0,0,0,0,2,1,4,0,0,3,90,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3543,        long m = Double.doubleToLongBits(magnitude);,1,0,0,1,2,1,3,0,0,5,44,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3544,        long s = Double.doubleToLongBits(sign);,1,0,0,1,2,1,3,0,0,5,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3545,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,4,7,0,2,7,1,0,0,0,5,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3546,            return magnitude;,1,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3548,        return -magnitude; // flip sign,1,0,0,0,0,1,0,0,1,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3560,        int m = Float.floatToIntBits(magnitude);,1,0,0,1,2,1,3,0,0,5,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3561,        int s = Float.floatToIntBits(sign);,1,0,0,1,2,1,3,0,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3562,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,4,7,0,2,7,1,0,0,0,5,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3563,            return magnitude;,1,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3565,        return -magnitude; // flip sign,1,0,0,0,0,1,0,0,1,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3578,        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;,0,3,0,3,8,2,3,0,0,5,66,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3591,        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;,0,3,0,3,6,1,3,0,0,5,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3600,        PrintStream out = System.out;,3,0,0,0,0,0,0,1,0,2,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3601,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_A"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);",2,0,0,0,2,0,4,0,1,4,96,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3602,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_B"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);",2,0,0,0,2,0,4,0,1,4,96,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3603,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_A"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);",2,0,0,0,2,0,4,0,1,4,100,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3604,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_B"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);",2,0,0,0,2,0,4,0,1,4,100,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3605,"        FastMathCalc.printarray(out, ""LN_MANT"",LN_MANT_LEN, lnMant.LN_MANT);",2,0,0,0,2,0,4,0,1,4,68,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3606,"        FastMathCalc.printarray(out, ""SINE_TABLE_A"", SINE_TABLE_LEN, SINE_TABLE_A);",0,0,0,0,2,0,5,0,1,3,75,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3607,"        FastMathCalc.printarray(out, ""SINE_TABLE_B"", SINE_TABLE_LEN, SINE_TABLE_B);",0,0,0,0,2,0,5,0,1,3,75,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3608,"        FastMathCalc.printarray(out, ""COSINE_TABLE_A"", SINE_TABLE_LEN, COSINE_TABLE_A);",0,0,0,0,2,0,5,0,1,3,79,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3609,"        FastMathCalc.printarray(out, ""COSINE_TABLE_B"", SINE_TABLE_LEN, COSINE_TABLE_B);",0,0,0,0,2,0,5,0,1,3,79,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3610,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_A"", SINE_TABLE_LEN, TANGENT_TABLE_A);",0,0,0,0,2,0,5,0,1,3,81,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3611,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_B"", SINE_TABLE_LEN, TANGENT_TABLE_B);",0,0,0,0,2,0,5,0,1,3,81,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3612,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3687,    private static class lnMant {,1,0,0,0,1,3,0,0,2,4,29,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3701,                LN_MANT = FastMathLiteralArrays.loadLnMant();,1,0,0,1,2,0,2,0,1,5,45,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3703,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3615,    private static class ExpIntTable {,1,0,0,0,1,3,0,0,2,4,34,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3647,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,1,0,0,1,2,0,2,0,1,5,54,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3648,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,1,0,0,1,2,0,2,0,1,5,54,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3650,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3654,    private static class ExpFracTable {,1,0,0,0,1,3,0,0,2,4,35,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3680,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,1,0,0,1,2,0,2,0,1,5,56,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3681,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,1,0,0,1,2,0,2,0,1,5,56,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,28,3683,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,34,    private CompositeFormat() {},1,0,0,1,4,1,0,0,1,5,28,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,68,"        parseNextCharacter(source, pos);",0,0,0,0,2,0,3,0,1,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,69,        pos.setIndex(pos.getIndex() - 1);,0,1,0,2,4,0,4,0,0,4,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,70,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,81,         int index = pos.getIndex();,1,0,0,1,2,1,2,0,0,5,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,82,         final int n = source.length();,1,0,0,1,2,2,2,0,1,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,83,         char ret = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,85,         if (index < n) {,2,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,88,                 c = source.charAt(index++);,2,0,0,1,2,0,2,0,2,5,27,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,89,             } while (Character.isWhitespace(c) && index < n);,2,2,0,2,5,1,3,0,0,6,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,90,             pos.setIndex(index);,0,0,0,1,2,0,3,0,0,3,20,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,92,             if (index < n) {,2,1,0,1,3,1,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,93,                 ret = c;,2,0,0,0,0,0,0,0,1,2,8,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,97,         return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,111,        Number ret = null;,1,0,0,0,0,0,0,1,0,2,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,113,        StringBuilder sb = new StringBuilder();,1,0,0,1,2,1,0,2,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,114,        sb.append('(');,0,0,0,1,3,0,2,0,1,4,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,115,        sb.append(value);,0,0,0,1,2,0,3,0,0,3,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,116,        sb.append(')');,0,0,0,1,3,0,2,0,1,4,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,118,        final int n = sb.length();,1,0,0,1,2,2,2,0,1,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,119,        final int startIndex = pos.getIndex();,1,0,0,1,2,2,2,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,120,        final int endIndex = startIndex + n;,3,1,0,0,0,2,0,0,1,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,121,        if (endIndex < source.length()) {,1,1,0,2,5,1,2,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,122,"            if (source.substring(startIndex, endIndex).compareTo(sb.toString()) == 0) {",0,1,0,2,9,1,7,0,0,5,75,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,123,                ret = Double.valueOf(value);,1,0,0,1,2,0,3,0,1,5,28,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,124,                pos.setIndex(endIndex);,0,0,0,1,2,0,3,0,0,3,23,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,128,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,143,        final int startIndex = pos.getIndex();,1,0,0,1,2,2,2,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,144,"        Number number = format.parse(source, pos);",1,0,0,0,2,0,4,1,0,4,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,145,        final int endIndex = pos.getIndex();,1,0,0,1,2,2,2,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,148,        if (startIndex == endIndex) {,2,1,0,1,3,1,0,0,0,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,150,            final double[] special = {,1,0,0,0,3,2,0,0,1,4,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,153,            for (int i = 0; i < special.length; ++i) {,5,1,0,1,3,2,0,0,1,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,154,"                number = parseNumber(source, special[i], pos);",1,0,1,0,4,0,3,0,2,5,46,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,155,                if (number != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,156,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,161,        return number;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,175,        final int startIndex = pos.getIndex();,1,0,0,1,2,2,2,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,176,        final int endIndex = startIndex + expected.length();,2,1,0,1,2,2,2,0,1,7,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,177,        if ((startIndex >= source.length()) ||,1,2,0,2,5,1,2,0,0,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,181,            pos.setIndex(startIndex);,0,0,0,1,2,0,3,0,0,3,25,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,182,            pos.setErrorIndex(startIndex);,0,0,0,1,2,0,3,0,0,3,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,183,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,187,        pos.setIndex(endIndex);,0,0,0,1,2,0,3,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,188,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,211,        if( Double.isNaN(value) || Double.isInfinite(value) ) {,0,1,0,2,7,1,6,0,0,5,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,212,            toAppendTo.append('(');,0,0,0,1,3,0,2,0,1,4,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,213,            toAppendTo.append(value);,0,0,0,1,2,0,3,0,0,3,25,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,214,            toAppendTo.append(')');,0,0,0,1,3,0,2,0,1,4,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,216,"            format.format(value, toAppendTo, pos);",0,0,0,0,2,0,5,0,0,2,38,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,218,        return toAppendTo;,1,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1497,            class UnmodifiableEntry extends Entry {,1,0,0,0,1,2,0,1,0,4,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1501,                    return v.getEntry(getIndex());,0,0,0,2,4,1,3,0,1,5,30,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1507,                    throw new MathUnsupportedOperationException();,0,0,0,1,2,2,0,1,1,5,46,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1029,        public Entry() {,1,0,0,1,3,1,0,0,1,5,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1030,            setIndex(0);,0,0,0,1,2,0,1,0,1,4,12,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1031,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1039,            return getEntry(getIndex());,0,0,0,2,4,1,2,0,2,5,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1048,"            setEntry(getIndex(), value);",0,0,0,1,4,0,3,0,2,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1049,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1057,            return index;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1066,            this.index = index;,2,0,0,0,0,1,0,0,1,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1067,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1202,        return new RealVector() {,0,0,0,1,3,2,0,1,1,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1497,            class UnmodifiableEntry extends Entry {,1,0,0,0,1,2,0,1,0,4,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1206,                throw new MathUnsupportedOperationException();,0,0,0,1,2,2,0,1,1,5,46,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1212,                return v.map(function);,0,0,0,1,2,1,3,0,0,4,23,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1218,                final Iterator<Entry> i = v.iterator();,1,0,0,1,2,1,2,2,1,7,39,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1219,                return new Iterator<Entry>() {,0,0,0,1,3,2,0,2,1,5,30,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1244,                final Iterator<Entry> i = v.sparseIterator();,1,0,0,1,2,1,2,2,1,7,45,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1246,                return new Iterator<Entry>() {,0,0,0,1,3,2,0,2,1,5,30,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1271,                return v.copy();,0,0,0,1,2,1,2,0,0,4,16,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1277,                return v.add(w);,0,0,0,1,2,1,3,0,0,4,16,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1283,                return v.subtract(w);,0,0,0,1,2,1,3,0,0,4,21,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1289,                return v.mapAdd(d);,0,0,0,1,2,1,3,0,0,4,19,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1295,                throw new MathUnsupportedOperationException();,0,0,0,1,2,2,0,1,1,5,46,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1301,                return v.mapSubtract(d);,0,0,0,1,2,1,3,0,0,4,24,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1307,                throw new MathUnsupportedOperationException();,0,0,0,1,2,2,0,1,1,5,46,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1313,                return v.mapMultiply(d);,0,0,0,1,2,1,3,0,0,4,24,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1319,                throw new MathUnsupportedOperationException();,0,0,0,1,2,2,0,1,1,5,46,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1325,                return v.mapDivide(d);,0,0,0,1,2,1,3,0,0,4,22,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1331,                throw new MathUnsupportedOperationException();,0,0,0,1,2,2,0,1,1,5,46,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1337,                return v.ebeMultiply(w);,0,0,0,1,2,1,3,0,0,4,24,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1343,                return v.ebeDivide(w);,0,0,0,1,2,1,3,0,0,4,22,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1349,                return v.dotProduct(w);,0,0,0,1,2,1,3,0,0,4,23,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1355,                return v.cosine(w);,0,0,0,1,2,1,3,0,0,4,19,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1361,                return v.getNorm();,0,0,0,1,2,1,2,0,0,4,19,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1367,                return v.getL1Norm();,0,0,0,1,2,1,2,0,0,4,21,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1373,                return v.getLInfNorm();,0,0,0,1,2,1,2,0,0,4,23,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1379,                return v.getDistance(w);,0,0,0,1,2,1,3,0,0,4,24,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1385,                return v.getL1Distance(w);,0,0,0,1,2,1,3,0,0,4,26,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1391,                return v.getLInfDistance(w);,0,0,0,1,2,1,3,0,0,4,28,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1397,                return v.unitVector();,0,0,0,1,2,1,2,0,0,4,22,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1403,                throw new MathUnsupportedOperationException();,0,0,0,1,2,2,0,1,1,5,46,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1409,                return v.outerProduct(w);,0,0,0,1,2,1,3,0,0,4,25,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1415,                return v.getEntry(index);,0,0,0,1,2,1,3,0,0,4,25,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1421,                throw new MathUnsupportedOperationException();,0,0,0,1,2,2,0,1,1,5,46,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1427,                throw new MathUnsupportedOperationException();,0,0,0,1,2,2,0,1,1,5,46,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1433,                return v.getDimension();,0,0,0,1,2,1,2,0,0,4,24,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1439,                return v.append(w);,0,0,0,1,2,1,3,0,0,4,19,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1445,                return v.append(d);,0,0,0,1,2,1,3,0,0,4,19,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1451,"                return v.getSubVector(index, n);",0,0,0,0,2,1,4,0,0,3,32,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1457,                throw new MathUnsupportedOperationException();,0,0,0,1,2,2,0,1,1,5,46,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1463,                throw new MathUnsupportedOperationException();,0,0,0,1,2,2,0,1,1,5,46,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1469,                return v.toArray();,0,0,0,1,2,1,2,0,0,4,19,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1475,                return v.isNaN();,0,0,0,1,2,1,2,0,0,4,17,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1481,                return v.isInfinite();,0,0,0,1,2,1,2,0,0,4,22,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1487,"                return v.combine(a, b, y);",0,0,0,0,2,1,5,0,0,3,26,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1493,                throw new MathUnsupportedOperationException();,0,0,0,1,2,2,0,1,1,5,46,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,99,"        setEntry(index, getEntry(index) + increment);",1,1,0,1,4,0,4,0,2,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,100,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,165,        checkVectorDimensions(v.getDimension());,0,0,0,2,4,0,3,0,1,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,166,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,176,        int d = getDimension();,1,0,0,1,2,1,1,0,1,6,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,177,        if (d != n) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,178,"            throw new DimensionMismatchException(d, n);",2,0,0,0,2,2,0,1,1,5,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,180,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,189,        if (index < 0 ||,1,2,0,0,1,1,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,191,"            throw new OutOfRangeException(LocalizedFormats.INDEX,",2,0,0,0,1,2,0,1,1,5,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,194,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,205,        final int dim = getDimension();,1,0,0,1,2,2,1,0,2,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,206,        if ((start < 0) || (start >= dim)) {,3,3,0,2,7,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,207,"            throw new OutOfRangeException(LocalizedFormats.INDEX, start, 0,",3,0,0,0,1,2,0,1,1,5,63,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,210,        if ((end < 0) || (end >= dim)) {,3,3,0,2,7,1,0,0,0,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,211,"            throw new OutOfRangeException(LocalizedFormats.INDEX, end, 0,",3,0,0,0,1,2,0,1,1,5,61,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,214,        if (end < start) {,2,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,216,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW,",2,0,0,0,1,2,0,1,1,5,81,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,219,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,231,        checkVectorDimensions(v);,0,0,0,1,2,0,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,232,        RealVector result = v.copy();,1,0,0,1,2,0,2,1,0,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,233,        Iterator<Entry> it = sparseIterator();,1,0,0,1,2,0,1,2,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,234,        while (it.hasNext()) {,0,0,0,2,5,1,2,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,235,            final Entry e = it.next();,1,0,0,1,2,1,2,1,1,7,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,236,            final int index = e.getIndex();,1,0,0,1,2,2,2,0,1,6,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,237,"            result.setEntry(index, e.getValue() + result.getEntry(index));",0,1,0,1,6,0,8,0,0,4,62,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,238,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,239,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,252,        checkVectorDimensions(v);,0,0,0,1,2,0,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,253,        RealVector result = v.mapMultiply(-1d);,1,0,0,1,2,0,2,1,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,254,        Iterator<Entry> it = sparseIterator();,1,0,0,1,2,0,1,2,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,255,        while (it.hasNext()) {,0,0,0,2,5,1,2,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,256,            final Entry e = it.next();,1,0,0,1,2,1,2,1,1,7,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,257,            final int index = e.getIndex();,1,0,0,1,2,2,2,0,1,6,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,258,"            result.setEntry(index, e.getValue() + result.getEntry(index));",0,1,0,1,6,0,8,0,0,4,62,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,259,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,260,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,271,        return copy().mapAddToSelf(d);,0,0,0,1,4,1,3,0,1,5,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,282,        if (d != 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,283,"            return mapToSelf(FunctionUtils.fix2ndArgument(new Add(), d));",0,0,0,1,6,2,4,1,2,6,61,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,285,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,304,        checkVectorDimensions(v);,0,0,0,1,2,0,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,305,        double d = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,306,        final int n = getDimension();,1,0,0,1,2,2,1,0,2,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,307,        for (int i = 0; i < n; i++) {,4,1,0,1,3,2,0,0,1,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,308,            d += getEntry(i) * v.getEntry(i);,1,1,0,1,4,0,5,0,2,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,310,        return d;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,325,        final double norm = getNorm();,1,0,0,1,2,2,1,0,2,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,326,        final double vNorm = v.getNorm();,1,0,0,1,2,2,2,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,328,        if (norm == 0 ||,1,2,0,0,1,1,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,330,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,2,0,0,1,2,2,0,1,1,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,332,        return dotProduct(v) / (norm * vNorm);,2,2,0,1,4,1,2,0,1,7,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,390,        checkVectorDimensions(v);,0,0,0,1,2,0,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,391,        double d = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,392,        Iterator<Entry> it = iterator();,1,0,0,1,2,0,1,2,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,393,        while (it.hasNext()) {,0,0,0,2,5,1,2,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,394,            final Entry e = it.next();,1,0,0,1,2,1,2,1,1,7,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,395,            final double diff = e.getValue() - v.getEntry(e.getIndex());,1,1,0,2,6,2,6,0,1,7,60,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,396,            d += diff * diff;,3,1,0,0,0,0,0,0,1,3,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,397,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,398,        return FastMath.sqrt(d);,0,0,0,1,2,1,3,0,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,412,        double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,413,        Iterator<Entry> it = sparseIterator();,1,0,0,1,2,0,1,2,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,414,        while (it.hasNext()) {,0,0,0,2,5,1,2,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,415,            final Entry e = it.next();,1,0,0,1,2,1,2,1,1,7,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,416,            final double value = e.getValue();,1,0,0,1,2,2,2,0,1,6,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,417,            sum += value * value;,3,1,0,0,0,0,0,0,1,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,418,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,419,        return FastMath.sqrt(sum);,0,0,0,1,2,1,3,0,0,4,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,433,        double norm = 0;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,434,        Iterator<Entry> it = sparseIterator();,1,0,0,1,2,0,1,2,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,435,        while (it.hasNext()) {,0,0,0,2,5,1,2,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,436,            final Entry e = it.next();,1,0,0,1,2,1,2,1,1,7,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,437,            norm += FastMath.abs(e.getValue());,1,0,0,2,4,0,4,0,1,5,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,438,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,439,        return norm;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,453,        double norm = 0;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,454,        Iterator<Entry> it = sparseIterator();,1,0,0,1,2,0,1,2,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,455,        while (it.hasNext()) {,0,0,0,2,5,1,2,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,456,            final Entry e = it.next();,1,0,0,1,2,1,2,1,1,7,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,457,"            norm = FastMath.max(norm, FastMath.abs(e.getValue()));",1,0,0,2,6,0,7,0,1,5,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,458,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,459,        return norm;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,474,        checkVectorDimensions(v);,0,0,0,1,2,0,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,475,        double d = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,476,        Iterator<Entry> it = iterator();,1,0,0,1,2,0,1,2,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,477,        while (it.hasNext()) {,0,0,0,2,5,1,2,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,478,            final Entry e = it.next();,1,0,0,1,2,1,2,1,1,7,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,479,            d += FastMath.abs(e.getValue() - v.getEntry(e.getIndex()));,1,1,0,3,8,0,8,0,1,6,59,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,480,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,481,        return d;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,499,        checkVectorDimensions(v);,0,0,0,1,2,0,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,500,        double d = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,501,        Iterator<Entry> it = iterator();,1,0,0,1,2,0,1,2,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,502,        while (it.hasNext()) {,0,0,0,2,5,1,2,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,503,            final Entry e = it.next();,1,0,0,1,2,1,2,1,1,7,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,504,"            d = FastMath.max(FastMath.abs(e.getValue() - v.getEntry(e.getIndex())), d);",1,1,0,3,10,0,11,0,1,6,75,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,505,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,506,        return d;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,516,        int minIndex    = -1;,1,0,0,0,0,1,0,0,1,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,517,        double minValue = Double.POSITIVE_INFINITY;,3,0,0,0,0,1,0,0,0,2,43,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,518,        Iterator<Entry> iterator = iterator();,1,0,0,1,2,0,1,2,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,519,        while (iterator.hasNext()) {,0,0,0,2,5,1,2,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,520,            final Entry entry = iterator.next();,1,0,0,1,2,1,2,1,1,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,521,            if (entry.getValue() <= minValue) {,1,1,0,2,5,1,2,0,0,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,522,                minIndex = entry.getIndex();,1,0,0,1,2,0,2,0,1,5,28,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,523,                minValue = entry.getValue();,1,0,0,1,2,0,2,0,1,5,28,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,525,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,526,        return minIndex;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,536,        final int minIndex = getMinIndex();,1,0,0,1,2,2,1,0,2,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,537,        return minIndex < 0 ? Double.NaN : getEntry(minIndex);,3,1,0,1,2,1,2,0,1,7,54,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,547,        int maxIndex    = -1;,1,0,0,0,0,1,0,0,1,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,548,        double maxValue = Double.NEGATIVE_INFINITY;,3,0,0,0,0,1,0,0,0,2,43,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,549,        Iterator<Entry> iterator = iterator();,1,0,0,1,2,0,1,2,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,550,        while (iterator.hasNext()) {,0,0,0,2,5,1,2,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,551,            final Entry entry = iterator.next();,1,0,0,1,2,1,2,1,1,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,552,            if (entry.getValue() >= maxValue) {,1,1,0,2,5,1,2,0,0,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,553,                maxIndex = entry.getIndex();,1,0,0,1,2,0,2,0,1,5,28,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,554,                maxValue = entry.getValue();,1,0,0,1,2,0,2,0,1,5,28,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,556,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,557,        return maxIndex;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,567,        final int maxIndex = getMaxIndex();,1,0,0,1,2,2,1,0,2,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,568,        return maxIndex < 0 ? Double.NaN : getEntry(maxIndex);,3,1,0,1,2,1,2,0,1,7,54,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,580,        return copy().mapMultiplyToSelf(d);,0,0,0,1,4,1,3,0,1,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,591,"        return mapToSelf(FunctionUtils.fix2ndArgument(new Multiply(), d));",0,0,0,1,6,2,4,1,2,6,66,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,602,        return copy().mapSubtractToSelf(d);,0,0,0,1,4,1,3,0,1,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,613,        return mapAddToSelf(-d);,1,0,0,1,2,1,1,0,2,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,624,        return copy().mapDivideToSelf(d);,0,0,0,1,4,1,3,0,1,5,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,635,"        return mapToSelf(FunctionUtils.fix2ndArgument(new Divide(), d));",0,0,0,1,6,2,4,1,2,6,64,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,645,        final int m = this.getDimension();,1,0,0,1,2,3,1,0,1,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,646,        final int n = v.getDimension();,1,0,0,1,2,2,2,0,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,648,        if (v instanceof SparseRealVector || this instanceof SparseRealVector) {,1,1,0,1,3,4,0,2,0,6,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,649,"            product = new OpenMapRealMatrix(m, n);",3,0,0,0,2,1,0,1,2,5,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,651,"            product = new Array2DRowRealMatrix(m, n);",3,0,0,0,2,1,0,1,2,5,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,653,        for (int i = 0; i < m; i++) {,4,1,0,1,3,2,0,0,1,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,654,            for (int j = 0; j < n; j++) {,4,1,0,1,3,2,0,0,1,6,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,655,"                product.setEntry(i, j, this.getEntry(i) * v.getEntry(j));",0,1,0,1,6,1,9,0,0,5,57,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,658,        return product;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,672,        final double norm2 = v.dotProduct(v);,1,0,0,1,2,2,3,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,673,        if (norm2 == 0.0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,674,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,2,0,0,1,2,2,0,1,1,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,676,        return v.mapMultiply(dotProduct(v) / v.dotProduct(v));,0,1,0,2,6,1,7,0,1,6,54,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,685,        Iterator<Entry> it = iterator();,1,0,0,1,2,0,1,2,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,686,        while (it.hasNext()) {,0,0,0,2,5,1,2,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,687,            final Entry e = it.next();,1,0,0,1,2,1,2,1,1,7,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,688,            e.setValue(value);,0,0,0,1,2,0,3,0,0,3,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,689,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,690,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,700,        int dim = getDimension();,1,0,0,1,2,1,1,0,1,6,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,701,        double[] values = new double[dim];,1,0,1,0,4,3,0,0,0,4,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,702,        for (int i = 0; i < dim; i++) {,4,1,0,1,3,2,0,0,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,703,            values[i] = getEntry(i);,0,0,1,1,4,0,2,0,2,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,705,        return values;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,716,        final double norm = getNorm();,1,0,0,1,2,2,1,0,2,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,717,        if (norm == 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,718,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,2,0,0,1,2,2,0,1,1,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,720,        return mapDivide(norm);,0,0,0,1,2,1,2,0,1,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,731,        final double norm = getNorm();,1,0,0,1,2,2,1,0,2,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,732,        if (norm == 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,733,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,2,0,0,1,2,2,0,1,1,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,735,        mapDivideToSelf(getNorm());,0,0,0,2,4,0,2,0,2,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,736,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,754,        return new SparseEntryIterator();,0,0,0,1,2,2,0,1,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,768,        final int dim = getDimension();,1,0,0,1,2,2,1,0,2,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,769,        return new Iterator<Entry>() {,0,0,0,1,3,2,0,2,1,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,810,        return copy().mapToSelf(function);,0,0,0,1,4,1,3,0,1,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,827,        Iterator<Entry> it = (function.value(0) == 0) ? sparseIterator() : iterator();,1,1,0,2,8,0,4,2,2,7,78,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,828,        while (it.hasNext()) {,0,0,0,2,5,1,2,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,829,            final Entry e = it.next();,1,0,0,1,2,1,2,1,1,7,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,830,            e.setValue(function.value(e.getValue()));,0,0,0,3,6,0,6,0,0,3,41,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,831,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,832,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,849,"        return copy().combineToSelf(a, b, y);",0,0,0,1,4,1,5,0,1,5,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,865,        checkVectorDimensions(y);,0,0,0,1,2,0,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,866,        for (int i = 0; i < getDimension(); i++) {,3,1,0,2,5,2,1,0,2,7,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,867,            final double xi = getEntry(i);,1,0,0,1,2,2,2,0,2,6,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,868,            final double yi = y.getEntry(i);,1,0,0,1,2,2,3,0,1,6,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,869,"            setEntry(i, a * xi + b * yi);",4,3,0,0,2,0,2,0,1,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,871,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,885,        final int dim = getDimension();,1,0,0,1,2,2,1,0,2,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,886,"        visitor.start(dim, 0, dim - 1);",1,1,0,0,2,0,3,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,887,        for (int i = 0; i < dim; i++) {,4,1,0,1,3,2,0,0,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,888,"            visitor.visit(i, getEntry(i));",0,0,0,1,4,0,5,0,1,4,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,890,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,907,"        checkIndices(start, end);",0,0,0,0,2,0,3,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,908,"        visitor.start(getDimension(), start, end);",0,0,0,1,4,0,5,0,1,4,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,909,        for (int i = start; i <= end; i++) {,5,1,0,1,3,2,0,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,910,"            visitor.visit(i, getEntry(i));",0,0,0,1,4,0,5,0,1,4,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,912,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,927,        return walkInDefaultOrder(visitor);,0,0,0,1,2,1,2,0,1,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,946,"        return walkInDefaultOrder(visitor, start, end);",0,0,0,0,2,1,4,0,1,4,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,959,        final int dim = getDimension();,1,0,0,1,2,2,1,0,2,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,960,"        visitor.start(dim, 0, dim - 1);",1,1,0,0,2,0,3,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,961,        for (int i = 0; i < dim; i++) {,4,1,0,1,3,2,0,0,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,962,"            setEntry(i, visitor.visit(i, getEntry(i)));",0,0,0,1,6,0,7,0,2,4,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,964,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,981,"        checkIndices(start, end);",0,0,0,0,2,0,3,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,982,"        visitor.start(getDimension(), start, end);",0,0,0,1,4,0,5,0,1,4,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,983,        for (int i = start; i <= end; i++) {,5,1,0,1,3,2,0,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,984,"            setEntry(i, visitor.visit(i, getEntry(i)));",0,0,0,1,6,0,7,0,2,4,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,986,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1001,        return walkInDefaultOrder(visitor);,0,0,0,1,2,1,2,0,1,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1020,"        return walkInDefaultOrder(visitor, start, end);",0,0,0,0,2,1,4,0,1,4,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1092,        throw new UnsupportedOperationException();,0,0,0,1,2,2,0,1,1,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1101,        throw new UnsupportedOperationException();,0,0,0,1,2,2,0,1,1,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1202,        return new RealVector() {,0,0,0,1,3,2,0,1,1,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixDimensionMismatchException,28,45,"        super(LocalizedFormats.DIMENSIONS_MISMATCH_2x2,",2,0,0,0,1,1,0,0,1,4,47,3,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixDimensionMismatchException,28,48,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixDimensionMismatchException,28,54,        return getWrongDimension(0);,0,0,0,1,2,1,1,0,1,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixDimensionMismatchException,28,60,        return getExpectedDimension(0);,0,0,0,1,2,1,1,0,1,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixDimensionMismatchException,28,66,        return getWrongDimension(1);,0,0,0,1,2,1,1,0,1,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixDimensionMismatchException,28,72,        return getExpectedDimension(1);,0,0,0,1,2,1,1,0,1,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1219,                return new Iterator<Entry>() {,0,0,0,1,3,2,0,2,1,5,30,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1221,                    private final UnmodifiableEntry e = new UnmodifiableEntry();,1,0,0,1,2,3,0,2,3,6,60,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1225,                        return i.hasNext();,0,0,0,1,2,1,2,0,0,4,19,15,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1230,                        e.setIndex(i.next().getIndex());,0,0,0,2,6,0,5,0,0,3,32,15,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1231,                        return e;,1,0,0,0,0,1,0,0,0,2,9,14,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1236,                        throw new MathUnsupportedOperationException();,0,0,0,1,2,2,0,1,1,5,46,14,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,65,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,66,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,82,        return (rows * columns <= 4096) ?,2,2,0,1,2,1,0,0,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,104,        return (rows * columns <= 4096) ?,2,2,0,1,2,1,0,0,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,128,        if (data == null ||,1,2,0,0,1,1,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,130,            throw new NullArgumentException();,0,0,0,1,2,2,0,1,1,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,132,        return (data.length * data[0].length <= 4096) ?,3,2,1,1,4,1,0,0,0,6,47,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,156,        if (data == null ||,1,2,0,0,1,1,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,158,            throw new NullArgumentException();,0,0,0,1,2,2,0,1,1,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,160,        return (data.length * data[0].length <= 4096) ?,3,2,1,1,4,1,0,0,0,6,47,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,173,"        final RealMatrix m = createRealMatrix(dimension, dimension);",1,0,0,0,2,1,3,1,2,6,60,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,174,        for (int i = 0; i < dimension; ++i) {,4,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,175,"            m.setEntry(i, i, 1.0);",0,0,0,0,2,0,4,0,0,2,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,177,        return m;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,192,        final T zero = field.getZero();,1,0,0,1,2,1,2,1,1,7,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,193,        final T one  = field.getOne();,1,0,0,1,2,1,2,1,1,7,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,195,"        final T[][] d = (T[][]) Array.newInstance(field.getRuntimeClass(), new int[] { dimension, dimension });",3,0,0,1,18,3,4,2,1,7,103,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,196,        for (int row = 0; row < dimension; row++) {,4,1,0,1,3,2,0,0,1,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,197,            final T[] dRow = d[row];,1,0,1,0,4,1,0,1,1,6,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,198,"            Arrays.fill(dRow, zero);",0,0,0,0,2,0,4,0,0,2,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,199,            dRow[row] = one;,1,0,1,0,2,0,0,0,1,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,201,"        return new Array2DRowFieldMatrix<T>(field, d, false);",2,0,0,0,2,2,0,2,2,5,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,213,"        final RealMatrix m = createRealMatrix(diagonal.length, diagonal.length);",5,0,0,0,2,1,1,1,2,6,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,214,        for (int i = 0; i < diagonal.length; ++i) {,5,1,0,1,3,2,0,0,1,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,215,"            m.setEntry(i, i, diagonal[i]);",0,0,1,0,4,0,4,0,0,3,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,217,        return m;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,231,        final FieldMatrix<T> m =,1,0,0,0,0,1,0,2,1,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,233,        for (int i = 0; i < diagonal.length; ++i) {,5,1,0,1,3,2,0,0,1,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,234,"            m.setEntry(i, i, diagonal[i]);",0,0,1,0,4,0,4,0,0,3,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,236,        return m;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,248,        if (data == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,249,            throw new NullArgumentException();,0,0,0,1,2,2,0,1,1,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,251,"        return new ArrayRealVector(data, true);",1,0,0,0,2,2,0,1,2,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,265,        if (data == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,266,            throw new NullArgumentException();,0,0,0,1,2,2,0,1,1,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,268,        if (data.length == 0) {,2,1,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,269,            throw new ZeroException(LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT);,2,0,0,1,2,2,0,1,1,6,80,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,271,"        return new ArrayFieldVector<T>(data[0].getField(), data, true);",1,0,1,1,6,2,1,2,2,8,63,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,284,        if (rowData == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,285,            throw new NullArgumentException();,0,0,0,1,2,2,0,1,1,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,287,        final int nCols = rowData.length;,3,0,0,0,0,2,0,0,1,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,288,"        final RealMatrix m = createRealMatrix(1, nCols);",1,0,0,0,2,1,2,1,2,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,289,        for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,290,"            m.setEntry(0, i, rowData[i]);",0,0,1,0,4,0,3,0,0,3,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,292,        return m;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,307,        if (rowData == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,308,            throw new NullArgumentException();,0,0,0,1,2,2,0,1,1,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,310,        final int nCols = rowData.length;,3,0,0,0,0,2,0,0,1,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,311,        if (nCols == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,312,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,2,0,0,1,2,2,0,1,1,6,64,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,314,"        final FieldMatrix<T> m = createFieldMatrix(rowData[0].getField(), 1, nCols);",1,0,1,1,6,1,3,2,2,8,76,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,315,        for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,316,"            m.setEntry(0, i, rowData[i]);",0,0,1,0,4,0,3,0,0,3,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,318,        return m;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,331,        if (columnData == null) {,1,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,332,            throw new NullArgumentException();,0,0,0,1,2,2,0,1,1,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,334,        final int nRows = columnData.length;,3,0,0,0,0,2,0,0,1,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,335,"        final RealMatrix m = createRealMatrix(nRows, 1);",1,0,0,0,2,1,2,1,2,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,336,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,337,"            m.setEntry(i, 0, columnData[i]);",0,0,1,0,4,0,3,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,339,        return m;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,354,        if (columnData == null) {,1,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,355,            throw new NullArgumentException();,0,0,0,1,2,2,0,1,1,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,357,        final int nRows = columnData.length;,3,0,0,0,0,2,0,0,1,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,358,        if (nRows == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,359,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,2,0,0,1,2,2,0,1,1,6,61,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,361,"        final FieldMatrix<T> m = createFieldMatrix(columnData[0].getField(), nRows, 1);",1,0,1,1,6,1,3,2,2,8,79,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,362,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,363,"            m.setEntry(i, 0, columnData[i]);",0,0,1,0,4,0,3,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,365,        return m;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,393,"            throw new OutOfRangeException(LocalizedFormats.ROW_INDEX,",2,0,0,0,1,2,0,1,1,5,57,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,407,"            throw new OutOfRangeException(LocalizedFormats.COLUMN_INDEX,",2,0,0,0,1,2,0,1,1,5,60,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,428,"        checkRowIndex(m, startRow);",0,0,0,0,2,0,3,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,429,"        checkRowIndex(m, endRow);",0,0,0,0,2,0,3,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,430,        if (endRow < startRow) {,2,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,431,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW,",2,0,0,0,1,2,0,1,1,5,81,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,435,"        checkColumnIndex(m, startColumn);",0,0,0,0,2,0,3,0,1,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,436,"        checkColumnIndex(m, endColumn);",0,0,0,0,2,0,3,0,1,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,437,        if (endColumn < startColumn) {,2,1,0,1,3,1,0,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,438,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_COLUMN_AFTER_FINAL_COLUMN,",2,0,0,0,1,2,0,1,1,5,87,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,443,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,461,        if (selectedRows == null) {,1,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,462,            throw new NullArgumentException();,0,0,0,1,2,2,0,1,1,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,464,        if (selectedColumns == null) {,1,1,0,1,3,1,0,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,465,            throw new NullArgumentException();,0,0,0,1,2,2,0,1,1,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,467,        if (selectedRows.length == 0) {,2,1,0,1,3,1,0,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,468,            throw new NoDataException(LocalizedFormats.EMPTY_SELECTED_ROW_INDEX_ARRAY);,2,0,0,1,2,2,0,1,1,6,75,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,470,        if (selectedColumns.length == 0) {,2,1,0,1,3,1,0,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,471,            throw new NoDataException(LocalizedFormats.EMPTY_SELECTED_COLUMN_INDEX_ARRAY);,2,0,0,1,2,2,0,1,1,6,78,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,474,        for (final int row : selectedRows) {,2,0,0,1,3,3,0,0,1,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,475,"            checkRowIndex(m, row);",0,0,0,0,2,0,3,0,1,3,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,477,        for (final int column : selectedColumns) {,2,0,0,1,3,3,0,0,1,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,478,"            checkColumnIndex(m, column);",0,0,0,0,2,0,3,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,480,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,490,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0,2,0,2,7,1,4,0,0,5,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,492,"            throw new MatrixDimensionMismatchException(left.getRowDimension(), left.getColumnDimension(),",0,0,0,1,5,2,4,1,1,6,93,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,495,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,505,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0,2,0,2,7,1,4,0,0,5,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,507,"            throw new MatrixDimensionMismatchException(left.getRowDimension(), left.getColumnDimension(),",0,0,0,1,5,2,4,1,1,6,93,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,510,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,520,        if (left.getColumnDimension() != right.getRowDimension()) {,0,1,0,2,7,1,4,0,0,5,59,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,521,"            throw new DimensionMismatchException(left.getColumnDimension(),",0,0,0,1,3,2,2,1,1,6,63,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,524,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,532,        final FractionMatrixConverter converter = new FractionMatrixConverter();,1,0,0,1,2,2,0,2,2,6,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,533,        m.walkInOptimizedOrder(converter);,0,0,0,1,2,0,3,0,0,3,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,534,        return converter.getConvertedMatrix();,0,0,0,1,2,1,2,0,0,4,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,577,        final BigFractionMatrixConverter converter = new BigFractionMatrixConverter();,1,0,0,1,2,2,0,2,2,6,78,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,578,        m.walkInOptimizedOrder(converter);,0,0,0,1,2,0,3,0,0,3,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,579,        return converter.getConvertedMatrix();,0,0,0,1,2,1,2,0,0,4,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,657,        final int n = vector.getDimension();,1,0,0,1,2,2,2,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,658,        oos.writeInt(n);,0,0,0,1,2,0,3,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,659,        for (int i = 0; i < n; ++i) {,4,1,0,1,3,2,0,0,1,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,660,            oos.writeDouble(vector.getEntry(i));,0,0,0,2,4,0,5,0,0,3,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,662,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,688,            final int n = ois.readInt();,1,0,0,1,2,2,2,0,1,6,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,689,            final double[] data = new double[n];,1,0,1,0,4,4,0,0,1,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,690,            for (int i = 0; i < n; ++i) {,4,1,0,1,3,2,0,0,1,6,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,691,                data[i] = ois.readDouble();,0,0,1,1,4,0,2,0,1,5,27,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,695,"            final RealVector vector = new ArrayRealVector(data, false);",2,0,0,0,2,2,0,2,3,5,59,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,698,            final java.lang.reflect.Field f =,5,0,0,0,0,1,0,0,1,3,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,700,            f.setAccessible(true);,0,0,0,1,2,0,2,0,1,4,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,701,"            f.set(instance, vector);",0,0,0,0,2,0,4,0,0,2,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,711,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,703,        } catch (NoSuchFieldException nsfe) {,1,0,0,1,4,1,0,1,0,5,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,704,            IOException ioe = new IOException();,1,0,0,1,2,1,0,2,1,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,705,            ioe.initCause(nsfe);,0,0,0,1,2,0,3,0,0,3,20,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,706,            throw ioe;,1,0,0,0,0,1,0,0,0,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,707,        } catch (IllegalAccessException iae) {,1,0,0,1,4,1,0,1,0,5,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,708,            IOException ioe = new IOException();,1,0,0,1,2,1,0,2,1,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,709,            ioe.initCause(iae);,0,0,0,1,2,0,3,0,0,3,19,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,710,            throw ioe;,1,0,0,0,0,1,0,0,0,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,713,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,758,        final int n = matrix.getRowDimension();,1,0,0,1,2,2,2,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,759,        final int m = matrix.getColumnDimension();,1,0,0,1,2,2,2,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,760,        oos.writeInt(n);,0,0,0,1,2,0,3,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,761,        oos.writeInt(m);,0,0,0,1,2,0,3,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,762,        for (int i = 0; i < n; ++i) {,4,1,0,1,3,2,0,0,1,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,763,            for (int j = 0; j < m; ++j) {,4,1,0,1,3,2,0,0,1,6,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,764,"                oos.writeDouble(matrix.getEntry(i, j));",0,0,0,0,4,0,6,0,0,2,39,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,767,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,793,            final int n = ois.readInt();,1,0,0,1,2,2,2,0,1,6,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,794,            final int m = ois.readInt();,1,0,0,1,2,2,2,0,1,6,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,795,            final double[][] data = new double[n][m];,1,0,1,0,8,4,0,0,1,5,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,796,            for (int i = 0; i < n; ++i) {,4,1,0,1,3,2,0,0,1,6,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,797,                final double[] dataI = data[i];,1,0,1,0,4,2,0,0,1,5,31,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,798,                for (int j = 0; j < m; ++j) {,4,1,0,1,3,2,0,0,1,6,29,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,799,                    dataI[j] = ois.readDouble();,0,0,1,1,4,0,2,0,1,5,28,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,804,"            final RealMatrix matrix = new Array2DRowRealMatrix(data, false);",2,0,0,0,2,2,0,2,3,5,64,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,807,            final java.lang.reflect.Field f =,5,0,0,0,0,1,0,0,1,3,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,809,            f.setAccessible(true);,0,0,0,1,2,0,2,0,1,4,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,810,"            f.set(instance, matrix);",0,0,0,0,2,0,4,0,0,2,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,820,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,812,        } catch (NoSuchFieldException nsfe) {,1,0,0,1,4,1,0,1,0,5,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,813,            IOException ioe = new IOException();,1,0,0,1,2,1,0,2,1,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,814,            ioe.initCause(nsfe);,0,0,0,1,2,0,3,0,0,3,20,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,815,            throw ioe;,1,0,0,0,0,1,0,0,0,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,816,        } catch (IllegalAccessException iae) {,1,0,0,1,4,1,0,1,0,5,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,817,            IOException ioe = new IOException();,1,0,0,1,2,1,0,2,1,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,818,            ioe.initCause(iae);,0,0,0,1,2,0,3,0,0,3,19,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,819,            throw ioe;,1,0,0,0,0,1,0,0,0,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,821,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,839,        if ((rm == null) || (b == null) || ( rm.getRowDimension() != b.getDimension())) {,2,4,0,3,13,1,4,0,0,6,81,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,840,"            throw new MathIllegalArgumentException(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,",2,0,0,0,1,2,0,1,1,5,83,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,844,        if( rm.getColumnDimension() != rm.getRowDimension() ){,0,1,0,2,7,1,4,0,0,5,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,845,"            throw new MathIllegalArgumentException(LocalizedFormats.DIMENSIONS_MISMATCH_2x2,",2,0,0,0,1,2,0,1,1,5,80,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,849,        int rows = rm.getRowDimension();,1,0,0,1,2,1,2,0,0,5,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,850,        for( int i = 0 ; i < rows ; i++ ){,4,1,0,1,3,2,0,0,1,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,851,"            double diag = rm.getEntry(i, i);",1,0,0,0,2,1,4,0,0,4,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,852,            if( FastMath.abs(diag) < Precision.SAFE_MIN ){,2,1,0,2,5,1,3,0,0,6,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,853,                throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);,2,0,0,1,2,2,0,1,1,6,69,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,855,            double bi = b.getEntry(i)/diag;,2,1,0,1,2,1,3,0,0,6,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,856,"            b.setEntry(i,  bi );",0,0,0,0,2,0,4,0,0,2,20,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,857,            for( int j = i+1; j< rows; j++ ){,5,2,0,1,3,2,0,0,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,858,"                b.setEntry(j, b.getEntry(j)-bi*rm.getEntry(j,i)  );",1,2,0,1,6,0,10,0,0,5,51,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,861,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,879,        if ((rm == null) || (b == null) || ( rm.getRowDimension() != b.getDimension())) {,2,4,0,3,13,1,4,0,0,6,81,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,880,"            throw new MathIllegalArgumentException(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,",2,0,0,0,1,2,0,1,1,5,83,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,884,        if( rm.getColumnDimension() != rm.getRowDimension() ){,0,1,0,2,7,1,4,0,0,5,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,885,"            throw new MathIllegalArgumentException(LocalizedFormats.DIMENSIONS_MISMATCH_2x2,",2,0,0,0,1,2,0,1,1,5,80,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,889,        int rows = rm.getRowDimension();,1,0,0,1,2,1,2,0,0,5,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,890,        for( int i = rows-1 ; i >-1 ; i-- ){,4,2,0,1,3,2,0,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,891,"            double diag = rm.getEntry(i, i);",1,0,0,0,2,1,4,0,0,4,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,892,            if( FastMath.abs(diag) < Precision.SAFE_MIN ){,2,1,0,2,5,1,3,0,0,6,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,893,                throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);,2,0,0,1,2,2,0,1,1,6,69,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,895,            double bi = b.getEntry(i)/diag;,2,1,0,1,2,1,3,0,0,6,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,896,"            b.setEntry(i,  bi );",0,0,0,0,2,0,4,0,0,2,20,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,897,            for( int j = i-1; j>-1; j-- ){,4,2,0,1,3,2,0,0,2,6,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,898,"                b.setEntry(j, b.getEntry(j)-bi*rm.getEntry(j,i)  );",1,2,0,1,6,0,10,0,0,5,51,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,901,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,55,        super(field);,1,0,0,1,2,1,0,0,1,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,56,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,70,"        super(field, rowDimension, columnDimension);",3,0,0,0,2,1,0,0,1,4,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,71,"        data = buildArray(field, rowDimension, columnDimension);",1,0,0,0,2,0,4,0,2,4,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,72,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,89,"        this(extractField(d), d);",1,0,0,1,4,1,2,0,1,6,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,90,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,108,        super(field);,1,0,0,1,2,1,0,0,1,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,109,        copyIn(d);,0,0,0,1,2,0,2,0,1,4,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,110,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,129,"        this(extractField(d), d, copyArray);",2,0,0,1,4,1,2,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,130,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,150,        super(field);,1,0,0,1,2,1,0,0,1,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,151,        if (copyArray) {,1,0,0,1,3,1,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,152,            copyIn(d);,0,0,0,1,2,0,2,0,1,4,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,154,            MathUtils.checkNotNull(d);,0,0,0,1,2,0,3,0,0,3,26,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,155,            final int nRows = d.length;,3,0,0,0,0,2,0,0,1,3,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,156,            if (nRows == 0) {,1,1,0,1,3,1,0,0,0,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,157,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,2,0,0,1,2,2,0,1,1,6,61,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,159,            final int nCols = d[0].length;,2,0,1,0,2,2,0,0,1,5,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,160,            if (nCols == 0) {,1,1,0,1,3,1,0,0,0,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,161,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,2,0,0,1,2,2,0,1,1,6,64,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,163,            for (int r = 1; r < nRows; r++) {,4,1,0,1,3,2,0,0,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,164,                if (d[r].length != nCols) {,2,1,1,1,5,1,0,0,0,6,27,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,165,"                    throw new DimensionMismatchException(nCols, d[r].length);",2,0,1,0,4,2,0,1,1,6,57,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,168,            data = d;,2,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,170,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,180,"        this(extractField(v), v);",1,0,0,1,4,1,2,0,1,6,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,181,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,192,        super(field);,1,0,0,1,2,1,0,0,1,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,193,        final int nRows = v.length;,3,0,0,0,0,2,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,194,"        data = buildArray(getField(), nRows, 1);",1,0,0,1,4,0,3,0,3,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,195,        for (int row = 0; row < nRows; row++) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,196,            data[row][0] = v[row];,0,0,1,0,6,0,0,0,1,3,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,198,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,203,"        return new Array2DRowFieldMatrix<T>(getField(), rowDimension, columnDimension);",2,0,0,1,4,2,1,2,2,7,79,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,209,"        return new Array2DRowFieldMatrix<T>(getField(), copyOut(), false);",0,0,0,1,6,2,2,2,4,6,66,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,222,        checkAdditionCompatible(m);,0,0,0,1,2,0,2,0,1,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,224,        final int rowCount    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,225,        final int columnCount = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,226,"        final T[][] outData = buildArray(getField(), rowCount, columnCount);",1,0,0,1,8,1,4,1,3,7,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,227,        for (int row = 0; row < rowCount; row++) {,4,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,228,            final T[] dataRow    = data[row];,1,0,1,0,4,1,0,1,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,229,            final T[] mRow       = m.data[row];,3,0,1,0,4,1,0,1,1,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,230,            final T[] outDataRow = outData[row];,1,0,1,0,4,1,0,1,1,6,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,231,            for (int col = 0; col < columnCount; col++) {,4,1,0,1,3,2,0,0,1,6,45,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,232,                outDataRow[col] = dataRow[col].add(mRow[col]);,0,0,1,1,8,0,1,0,1,5,46,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,236,"        return new Array2DRowFieldMatrix<T>(getField(), outData, false);",1,0,0,1,4,2,1,2,3,7,64,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,249,        checkSubtractionCompatible(m);,0,0,0,1,2,0,2,0,1,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,251,        final int rowCount    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,252,        final int columnCount = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,253,"        final T[][] outData = buildArray(getField(), rowCount, columnCount);",1,0,0,1,8,1,4,1,3,7,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,254,        for (int row = 0; row < rowCount; row++) {,4,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,255,            final T[] dataRow    = data[row];,1,0,1,0,4,1,0,1,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,256,            final T[] mRow       = m.data[row];,3,0,1,0,4,1,0,1,1,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,257,            final T[] outDataRow = outData[row];,1,0,1,0,4,1,0,1,1,6,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,258,            for (int col = 0; col < columnCount; col++) {,4,1,0,1,3,2,0,0,1,6,45,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,259,                outDataRow[col] = dataRow[col].subtract(mRow[col]);,0,0,1,1,8,0,1,0,1,5,51,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,263,"        return new Array2DRowFieldMatrix<T>(getField(), outData, false);",1,0,0,1,4,2,1,2,3,7,64,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,277,        checkMultiplicationCompatible(m);,0,0,0,1,2,0,2,0,1,4,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,279,        final int nRows = this.getRowDimension();,1,0,0,1,2,3,1,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,280,        final int nCols = m.getColumnDimension();,1,0,0,1,2,2,2,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,281,        final int nSum = this.getColumnDimension();,1,0,0,1,2,3,1,0,1,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,282,"        final T[][] outData = buildArray(getField(), nRows, nCols);",1,0,0,1,8,1,4,1,3,7,59,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,283,        for (int row = 0; row < nRows; row++) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,284,            final T[] dataRow    = data[row];,1,0,1,0,4,1,0,1,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,285,            final T[] outDataRow = outData[row];,1,0,1,0,4,1,0,1,1,6,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,286,            for (int col = 0; col < nCols; col++) {,4,1,0,1,3,2,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,287,                T sum = getField().getZero();,1,0,0,1,4,0,2,1,1,6,29,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,288,                for (int i = 0; i < nSum; i++) {,4,1,0,1,3,2,0,0,1,6,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,289,                    sum = sum.add(dataRow[i].multiply(m.data[i][col]));,3,0,1,2,10,0,3,0,1,6,51,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,291,                outDataRow[col] = sum;,1,0,1,0,2,0,0,0,1,4,22,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,295,"        return new Array2DRowFieldMatrix<T>(getField(), outData, false);",1,0,0,1,4,2,1,2,3,7,64,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,302,        return copyOut();,0,0,0,1,2,1,1,0,1,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,312,        return data;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,318,        if (data == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,319,            if (row > 0) {,1,1,0,1,3,1,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,320,"                throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET, row);",3,0,0,0,2,2,0,1,1,5,90,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,322,            if (column > 0) {,1,1,0,1,3,1,0,0,0,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,323,"                throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET, column);",3,0,0,0,2,2,0,1,1,5,96,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,325,            final int nRows = subMatrix.length;,3,0,0,0,0,2,0,0,1,3,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,326,            if (nRows == 0) {,1,1,0,1,3,1,0,0,0,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,327,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,2,0,0,1,2,2,0,1,1,6,61,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,330,            final int nCols = subMatrix[0].length;,2,0,1,0,2,2,0,0,1,5,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,331,            if (nCols == 0) {,1,1,0,1,3,1,0,0,0,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,332,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,2,0,0,1,2,2,0,1,1,6,64,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,334,"            data = buildArray(getField(), subMatrix.length, nCols);",3,0,0,1,4,0,3,0,3,5,55,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,335,            for (int i = 0; i < data.length; ++i) {,5,1,0,1,3,2,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,336,                if (subMatrix[i].length != nCols) {,2,1,1,1,5,1,0,0,0,6,35,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,337,"                    throw new DimensionMismatchException(nCols, subMatrix[i].length);",2,0,1,0,4,2,0,1,1,6,65,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,339,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",2,1,1,0,6,0,4,0,0,5,64,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,341,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,342,"            super.setSubMatrix(subMatrix, row, column);",4,0,0,0,2,1,0,0,0,3,43,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,345,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,350,        checkRowIndex(row);,0,0,0,1,2,0,2,0,1,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,351,        checkColumnIndex(column);,0,0,0,1,2,0,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,353,        return data[row][column];,0,0,1,0,4,1,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,359,        checkRowIndex(row);,0,0,0,1,2,0,2,0,1,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,360,        checkColumnIndex(column);,0,0,0,1,2,0,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,362,        data[row][column] = value;,1,0,1,0,4,0,0,0,1,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,363,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,368,        checkRowIndex(row);,0,0,0,1,2,0,2,0,1,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,369,        checkColumnIndex(column);,0,0,0,1,2,0,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,371,        data[row][column] = data[row][column].add(increment);,0,0,1,1,10,0,2,0,1,5,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,372,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,377,        checkRowIndex(row);,0,0,0,1,2,0,2,0,1,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,378,        checkColumnIndex(column);,0,0,0,1,2,0,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,380,        data[row][column] = data[row][column].multiply(factor);,0,0,1,1,10,0,2,0,1,5,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,381,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,386,        return (data == null) ? 0 : data.length;,3,1,0,1,2,1,0,0,0,5,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,392,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,2,3,1,2,10,1,0,0,0,6,66,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,398,        final int nRows = this.getRowDimension();,1,0,0,1,2,3,1,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,399,        final int nCols = this.getColumnDimension();,1,0,0,1,2,3,1,0,1,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,400,        if (v.length != nCols) {,3,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,401,"            throw new DimensionMismatchException(v.length, nCols);",3,0,0,0,2,2,0,1,1,5,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,403,"        final T[] out = buildArray(getField(), nRows);",1,0,0,1,6,1,3,1,3,7,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,404,        for (int row = 0; row < nRows; row++) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,405,            final T[] dataRow = data[row];,1,0,1,0,4,1,0,1,1,6,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,406,            T sum = getField().getZero();,1,0,0,1,4,0,2,1,1,6,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,407,            for (int i = 0; i < nCols; i++) {,4,1,0,1,3,2,0,0,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,408,                sum = sum.add(dataRow[i].multiply(v[i]));,1,0,1,2,8,0,3,0,1,6,41,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,410,            out[row] = sum;,1,0,1,0,2,0,0,0,1,4,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,412,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,418,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,419,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,420,        if (v.length != nRows) {,3,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,421,"            throw new DimensionMismatchException(v.length, nRows);",3,0,0,0,2,2,0,1,1,5,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,424,"        final T[] out = buildArray(getField(), nCols);",1,0,0,1,6,1,3,1,3,7,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,425,        for (int col = 0; col < nCols; ++col) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,426,            T sum = getField().getZero();,1,0,0,1,4,0,2,1,1,6,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,427,            for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,428,                sum = sum.add(data[i][col].multiply(v[i]));,1,0,1,2,10,0,3,0,1,6,43,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,430,            out[col] = sum;,1,0,1,0,2,0,0,0,1,4,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,433,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,439,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,440,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,441,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,442,        for (int i = 0; i < rows; ++i) {,4,1,0,1,3,2,0,0,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,443,            final T[] rowI = data[i];,1,0,1,0,4,1,0,1,1,6,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,444,            for (int j = 0; j < columns; ++j) {,4,1,0,1,3,2,0,0,1,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,445,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0,0,1,0,6,0,4,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,448,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,454,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,455,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,456,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,457,        for (int i = 0; i < rows; ++i) {,4,1,0,1,3,2,0,0,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,458,            final T[] rowI = data[i];,1,0,1,0,4,1,0,1,1,6,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,459,            for (int j = 0; j < columns; ++j) {,4,1,0,1,3,2,0,0,1,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,460,"                visitor.visit(i, j, rowI[j]);",0,0,1,0,4,0,4,0,0,3,29,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,463,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,471,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,5,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,472,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,474,        for (int i = startRow; i <= endRow; ++i) {,5,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,475,            final T[] rowI = data[i];,1,0,1,0,4,1,0,1,1,6,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,476,            for (int j = startColumn; j <= endColumn; ++j) {,5,1,0,1,3,2,0,0,1,6,48,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,477,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0,0,1,0,6,0,4,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,480,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,488,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,5,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,489,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,491,        for (int i = startRow; i <= endRow; ++i) {,5,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,492,            final T[] rowI = data[i];,1,0,1,0,4,1,0,1,1,6,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,493,            for (int j = startColumn; j <= endColumn; ++j) {,5,1,0,1,3,2,0,0,1,6,48,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,494,"                visitor.visit(i, j, rowI[j]);",0,0,1,0,4,0,4,0,0,3,29,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,497,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,503,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,504,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,505,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,506,        for (int j = 0; j < columns; ++j) {,4,1,0,1,3,2,0,0,1,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,507,            for (int i = 0; i < rows; ++i) {,4,1,0,1,3,2,0,0,1,6,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,508,                final T[] rowI = data[i];,1,0,1,0,4,1,0,1,1,6,25,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,509,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0,0,1,0,6,0,4,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,512,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,518,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,519,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,520,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,521,        for (int j = 0; j < columns; ++j) {,4,1,0,1,3,2,0,0,1,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,522,            for (int i = 0; i < rows; ++i) {,4,1,0,1,3,2,0,0,1,6,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,523,"                visitor.visit(i, j, data[i][j]);",0,0,1,0,6,0,4,0,0,3,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,526,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,534,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,5,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,535,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,537,        for (int j = startColumn; j <= endColumn; ++j) {,5,1,0,1,3,2,0,0,1,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,538,            for (int i = startRow; i <= endRow; ++i) {,5,1,0,1,3,2,0,0,1,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,539,                final T[] rowI = data[i];,1,0,1,0,4,1,0,1,1,6,25,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,540,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0,0,1,0,6,0,4,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,543,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,551,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,5,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,552,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,554,        for (int j = startColumn; j <= endColumn; ++j) {,5,1,0,1,3,2,0,0,1,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,555,            for (int i = startRow; i <= endRow; ++i) {,5,1,0,1,3,2,0,0,1,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,556,"                visitor.visit(i, j, data[i][j]);",0,0,1,0,6,0,4,0,0,3,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,559,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,568,        final int nRows = this.getRowDimension();,1,0,0,1,2,3,1,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,569,"        final T[][] out = buildArray(getField(), nRows, getColumnDimension());",1,0,0,1,10,1,4,1,4,7,70,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,571,        for (int i = 0; i < nRows; i++) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,572,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",1,0,1,0,8,0,2,0,0,4,56,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,574,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,587,"        setSubMatrix(in, 0, 0);",0,0,0,0,2,0,2,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,28,588,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,52,    protected AbstractFieldMatrix() {,1,0,0,1,3,1,0,0,1,5,33,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,53,        field = null;,1,0,0,0,0,0,0,0,1,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,54,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,60,    protected AbstractFieldMatrix(final Field<T> field) {,2,0,0,1,3,2,0,2,2,6,53,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,61,        this.field = field;,2,0,0,0,0,1,0,0,1,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,62,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,75,                                  final int columnDimension) {,1,0,0,0,2,2,0,0,1,4,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,76,        if (rowDimension <= 0) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,77,"            throw new NotStrictlyPositiveException(LocalizedFormats.DIMENSION,",2,0,0,0,1,2,0,1,1,5,66,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,80,        if (columnDimension <= 0) {,1,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,81,"            throw new NotStrictlyPositiveException(LocalizedFormats.DIMENSION,",2,0,0,0,1,2,0,1,1,5,66,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,84,        this.field = field;,2,0,0,0,0,1,0,0,1,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,85,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,97,        if (d == null) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,98,            throw new NullArgumentException();,0,0,0,1,2,2,0,1,1,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,100,        if (d.length == 0) {,2,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,101,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,2,0,0,1,2,2,0,1,1,6,61,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,103,        if (d[0].length == 0) {,1,1,1,1,5,1,0,0,0,6,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,104,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,2,0,0,1,2,2,0,1,1,6,64,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,106,        return d[0][0].getField();,0,0,1,1,6,1,1,0,0,5,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,118,        if (d.length == 0) {,2,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,119,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,2,0,0,1,2,2,0,1,1,6,61,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,121,        return d[0].getField();,0,0,1,1,4,1,1,0,0,5,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,139,        if (columns < 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,140,"            T[] dummyRow = (T[]) Array.newInstance(field.getRuntimeClass(), 0);",1,0,0,1,10,0,4,2,0,5,67,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,141,"            return (T[][]) Array.newInstance(dummyRow.getClass(), rows);",0,0,0,1,10,1,5,1,0,5,60,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,143,        T[][] array =,1,0,0,0,4,0,0,1,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,145,        for (int i = 0; i < array.length; ++i) {,5,1,0,1,3,2,0,0,1,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,146,"            Arrays.fill(array[i], field.getZero());",0,0,1,1,6,0,4,0,0,4,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,148,        return array;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,163,"        T[] array = (T[]) Array.newInstance(field.getRuntimeClass(), length);",1,0,0,1,10,0,5,2,0,5,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,164,"        Arrays.fill(array, field.getZero());",0,0,0,1,4,0,5,0,0,3,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,165,        return array;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,170,        return field;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,182,        checkAdditionCompatible(m);,0,0,0,1,2,0,2,0,1,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,184,        final int rowCount    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,185,        final int columnCount = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,186,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",1,0,0,0,2,1,3,2,2,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,187,        for (int row = 0; row < rowCount; ++row) {,4,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,188,            for (int col = 0; col < columnCount; ++col) {,4,1,0,1,3,2,0,0,1,6,45,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,189,"                out.setEntry(row, col, getEntry(row, col).add(m.getEntry(row, col)));",0,0,0,0,8,0,12,0,1,3,69,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,193,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,199,        checkSubtractionCompatible(m);,0,0,0,1,2,0,2,0,1,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,201,        final int rowCount    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,202,        final int columnCount = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,203,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",1,0,0,0,2,1,3,2,2,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,204,        for (int row = 0; row < rowCount; ++row) {,4,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,205,            for (int col = 0; col < columnCount; ++col) {,4,1,0,1,3,2,0,0,1,6,45,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,206,"                out.setEntry(row, col, getEntry(row, col).subtract(m.getEntry(row, col)));",0,0,0,0,8,0,12,0,1,3,74,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,210,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,216,        final int rowCount    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,217,        final int columnCount = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,218,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",1,0,0,0,2,1,3,2,2,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,219,        for (int row = 0; row < rowCount; ++row) {,4,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,220,            for (int col = 0; col < columnCount; ++col) {,4,1,0,1,3,2,0,0,1,6,45,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,221,"                out.setEntry(row, col, getEntry(row, col).add(d));",0,0,0,1,6,0,9,0,1,4,50,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,225,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,230,        final int rowCount    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,231,        final int columnCount = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,232,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",1,0,0,0,2,1,3,2,2,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,233,        for (int row = 0; row < rowCount; ++row) {,4,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,234,            for (int col = 0; col < columnCount; ++col) {,4,1,0,1,3,2,0,0,1,6,45,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,235,"                out.setEntry(row, col, getEntry(row, col).multiply(d));",0,0,0,1,6,0,9,0,1,4,55,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,239,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,245,        checkMultiplicationCompatible(m);,0,0,0,1,2,0,2,0,1,4,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,247,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,248,        final int nCols = m.getColumnDimension();,1,0,0,1,2,2,2,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,249,        final int nSum  = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,250,"        final FieldMatrix<T> out = createMatrix(nRows, nCols);",1,0,0,0,2,1,3,2,2,6,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,251,        for (int row = 0; row < nRows; ++row) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,252,            for (int col = 0; col < nCols; ++col) {,4,1,0,1,3,2,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,253,                T sum = field.getZero();,1,0,0,1,2,0,2,1,0,5,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,254,                for (int i = 0; i < nSum; ++i) {,4,1,0,1,3,2,0,0,1,6,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,255,"                    sum = sum.add(getEntry(row, i).multiply(m.getEntry(i, col)));",1,0,0,0,8,0,10,0,2,4,61,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,257,"                out.setEntry(row, col, sum);",0,0,0,0,2,0,5,0,0,2,28,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,261,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,266,        return m.multiply(this);,0,0,0,1,2,2,2,0,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,271,        if (p < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,272,"            throw new IllegalArgumentException(""p must be >= 0"");",0,0,0,1,2,2,0,1,2,5,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,275,        if (!isSquare()) {,0,0,0,2,5,1,1,0,2,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,276,"            throw new NonSquareMatrixException(getRowDimension(), getColumnDimension());",0,0,0,1,6,2,2,1,3,6,76,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,279,        if (p == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,280,"            return MatrixUtils.createFieldIdentityMatrix(this.getField(), this.getRowDimension());",0,0,0,1,6,3,4,0,0,4,86,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,283,        if (p == 1) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,284,            return this.copy();,0,0,0,1,2,2,1,0,0,4,19,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,287,        final int power = p - 1;,2,1,0,0,0,2,0,0,1,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,296,        final char[] binaryRepresentation = Integer.toBinaryString(power),1,0,0,1,4,2,3,0,1,6,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,298,        final ArrayList<Integer> nonZeroPositions = new ArrayList<Integer>();,1,0,0,1,2,2,0,4,2,6,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,300,        for (int i = 0; i < binaryRepresentation.length; ++i) {,5,1,0,1,3,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,301,            if (binaryRepresentation[i] == '1') {,0,1,1,1,5,1,0,0,1,6,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,302,                final int pos = binaryRepresentation.length - i - 1;,4,1,0,0,0,2,0,0,1,4,52,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,303,                nonZeroPositions.add(pos);,0,0,0,1,2,0,3,0,0,3,26,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,307,        ArrayList<FieldMatrix<T>> results = new ArrayList<FieldMatrix<T>>(,1,0,0,0,1,1,0,6,1,5,66,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,310,"        results.add(0, this.copy());",0,0,0,1,4,1,3,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,312,        for (int i = 1; i < binaryRepresentation.length; ++i) {,5,1,0,1,3,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,313,            final FieldMatrix<T> s = results.get(i - 1);,2,1,0,1,2,1,2,2,1,8,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,314,            final FieldMatrix<T> r = s.multiply(s);,1,0,0,1,2,1,3,2,1,7,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,315,"            results.add(i, r);",0,0,0,0,2,0,4,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,318,        FieldMatrix<T> result = this.copy();,1,0,0,1,2,1,1,2,0,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,320,        for (Integer i : nonZeroPositions) {,2,0,0,1,3,1,0,1,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,321,            result = result.multiply(results.get(i));,1,0,0,2,4,0,5,0,1,5,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,322,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,324,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,329,"        final T[][] data = buildArray(field, getRowDimension(), getColumnDimension());",1,0,0,1,10,1,4,1,4,7,78,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,331,        for (int i = 0; i < data.length; ++i) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,332,            final T[] dataI = data[i];,1,0,1,0,4,1,0,1,1,6,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,333,            for (int j = 0; j < dataI.length; ++j) {,5,1,0,1,3,2,0,0,1,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,334,"                dataI[j] = getEntry(i, j);",0,0,1,0,4,0,3,0,2,4,26,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,338,        return data;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,344,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,5,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,346,        final FieldMatrix<T> subMatrix =,1,0,0,0,0,1,0,2,1,4,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,348,        for (int i = startRow; i <= endRow; ++i) {,5,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,349,            for (int j = startColumn; j <= endColumn; ++j) {,5,1,0,1,3,2,0,0,1,6,48,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,350,"                subMatrix.setEntry(i - startRow, j - startColumn, getEntry(i, j));",4,2,0,0,4,0,5,0,1,5,66,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,354,        return subMatrix;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,363,"        checkSubMatrixIndex(selectedRows, selectedColumns);",0,0,0,0,2,0,3,0,1,3,51,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,366,        final FieldMatrix<T> subMatrix =,1,0,0,0,0,1,0,2,1,4,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,368,        subMatrix.walkInOptimizedOrder(new DefaultFieldMatrixChangingVisitor<T>(field.getZero()) {,0,0,0,2,6,1,4,2,1,6,90,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,378,        return subMatrix;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,387,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,5,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,388,        final int rowsCount    = endRow + 1 - startRow;,3,2,0,0,0,2,0,0,1,4,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,389,        final int columnsCount = endColumn + 1 - startColumn;,3,2,0,0,0,2,0,0,1,4,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,390,        if ((destination.length < rowsCount) || (destination[0].length < columnsCount)) {,5,3,1,2,9,1,0,0,0,6,81,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,391,"            throw new MatrixDimensionMismatchException(destination.length,",2,0,0,0,1,2,0,1,1,5,62,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,398,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0,0,0,2,6,1,3,2,2,6,82,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,423,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,428,"        checkSubMatrixIndex(selectedRows, selectedColumns);",0,0,0,0,2,0,3,0,1,3,51,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,429,        if ((destination.length < selectedRows.length) ||,4,2,0,1,3,1,0,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,431,"            throw new MatrixDimensionMismatchException(destination.length,",2,0,0,0,1,2,0,1,1,5,62,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,438,        for (int i = 0; i < selectedRows.length; i++) {,5,1,0,1,3,2,0,0,1,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,439,            final T[] destinationI = destination[i];,1,0,1,0,4,1,0,1,1,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,440,            for (int j = 0; j < selectedColumns.length; j++) {,5,1,0,1,3,2,0,0,1,6,50,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,441,"                destinationI[j] = getEntry(selectedRows[i], selectedColumns[j]);",0,0,1,0,8,0,1,0,2,4,64,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,445,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,449,        if (subMatrix == null) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,450,            throw new NullArgumentException();,0,0,0,1,2,2,0,1,1,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,452,        final int nRows = subMatrix.length;,3,0,0,0,0,2,0,0,1,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,453,        if (nRows == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,454,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,2,0,0,1,2,2,0,1,1,6,61,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,457,        final int nCols = subMatrix[0].length;,2,0,1,0,2,2,0,0,1,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,458,        if (nCols == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,459,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,2,0,0,1,2,2,0,1,1,6,64,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,462,        for (int r = 1; r < nRows; ++r) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,463,            if (subMatrix[r].length != nCols) {,2,1,1,1,5,1,0,0,0,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,464,"                throw new DimensionMismatchException(nCols, subMatrix[r].length);",2,0,1,0,4,2,0,1,1,6,65,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,468,        checkRowIndex(row);,0,0,0,1,2,0,2,0,1,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,469,        checkColumnIndex(column);,0,0,0,1,2,0,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,470,        checkRowIndex(nRows + row - 1);,2,2,0,1,2,0,1,0,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,471,        checkColumnIndex(nCols + column - 1);,2,2,0,1,2,0,1,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,473,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,474,            for (int j = 0; j < nCols; ++j) {,4,1,0,1,3,2,0,0,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,475,"                setEntry(row + i, column + j, subMatrix[i][j]);",4,2,1,0,6,0,1,0,1,6,47,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,478,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,482,        checkRowIndex(row);,0,0,0,1,2,0,2,0,1,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,483,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,484,"        final FieldMatrix<T> out = createMatrix(1, nCols);",1,0,0,0,2,1,2,2,2,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,485,        for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,486,"            out.setEntry(0, i, getEntry(row, i));",0,0,0,0,4,0,6,0,1,3,37,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,489,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,495,        checkRowIndex(row);,0,0,0,1,2,0,2,0,1,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,496,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,497,        if ((matrix.getRowDimension() != 1) ||,0,2,0,2,5,1,2,0,0,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,499,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0,0,0,1,3,2,2,1,1,6,68,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,503,        for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,504,"            setEntry(row, i, matrix.getEntry(0, i));",0,0,0,0,4,0,6,0,1,3,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,507,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,512,        checkColumnIndex(column);,0,0,0,1,2,0,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,513,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,514,"        final FieldMatrix<T> out = createMatrix(nRows, 1);",1,0,0,0,2,1,2,2,2,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,515,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,516,"            out.setEntry(i, 0, getEntry(i, column));",0,0,0,0,4,0,6,0,1,3,40,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,519,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,525,        checkColumnIndex(column);,0,0,0,1,2,0,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,526,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,527,        if ((matrix.getRowDimension() != nRows) ||,1,2,0,2,5,1,2,0,0,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,529,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0,0,0,1,3,2,2,1,1,6,68,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,533,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,534,"            setEntry(i, column, matrix.getEntry(i, 0));",0,0,0,0,4,0,6,0,1,3,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,537,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,541,"        return new ArrayFieldVector<T>(field, getRow(row), false);",1,0,0,1,4,2,2,2,3,7,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,546,        checkRowIndex(row);,0,0,0,1,2,0,2,0,1,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,547,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,548,        if (vector.getDimension() != nCols) {,1,1,0,2,5,1,2,0,0,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,549,"            throw new MatrixDimensionMismatchException(1, vector.getDimension(),",0,0,0,1,3,2,2,1,1,6,68,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,552,        for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,553,"            setEntry(row, i, vector.getEntry(i));",0,0,0,1,4,0,6,0,1,4,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,556,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,560,"        return new ArrayFieldVector<T>(field, getColumn(column), false);",1,0,0,1,4,2,2,2,3,7,64,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,565,        checkColumnIndex(column);,0,0,0,1,2,0,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,566,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,567,        if (vector.getDimension() != nRows) {,1,1,0,2,5,1,2,0,0,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,568,"            throw new MatrixDimensionMismatchException(vector.getDimension(), 1,",0,0,0,1,3,2,2,1,1,6,68,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,571,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,572,"            setEntry(i, column, vector.getEntry(i));",0,0,0,1,4,0,6,0,1,4,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,575,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,579,        checkRowIndex(row);,0,0,0,1,2,0,2,0,1,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,580,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,581,"        final T[] out = buildArray(field, nCols);",1,0,0,0,4,1,3,1,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,582,        for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,583,"            out[i] = getEntry(row, i);",0,0,1,0,4,0,3,0,2,4,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,586,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,592,        checkRowIndex(row);,0,0,0,1,2,0,2,0,1,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,593,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,594,        if (array.length != nCols) {,3,1,0,1,3,1,0,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,595,"            throw new MatrixDimensionMismatchException(1, array.length, 1, nCols);",3,0,0,0,2,2,0,1,1,5,70,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,597,        for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,598,"            setEntry(row, i, array[i]);",0,0,1,0,4,0,3,0,1,4,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,601,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,605,        checkColumnIndex(column);,0,0,0,1,2,0,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,606,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,607,"        final T[] out = buildArray(field, nRows);",1,0,0,0,4,1,3,1,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,608,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,609,"            out[i] = getEntry(i, column);",0,0,1,0,4,0,3,0,2,4,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,612,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,618,        checkColumnIndex(column);,0,0,0,1,2,0,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,619,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,620,        if (array.length != nRows) {,3,1,0,1,3,1,0,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,621,"            throw new MatrixDimensionMismatchException(array.length, 1, nRows, 1);",3,0,0,0,2,2,0,1,1,5,70,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,623,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,624,"            setEntry(i, column, array[i]);",0,0,1,0,4,0,3,0,1,4,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,626,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,642,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,643,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,644,"        final FieldMatrix<T> out = createMatrix(nCols, nRows);",1,0,0,0,2,1,3,2,2,6,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,645,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0,0,0,2,6,1,3,2,2,6,82,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,653,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,658,        return getColumnDimension() == getRowDimension();,0,1,0,1,4,1,2,0,2,6,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,669,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,670,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,671,        if (nRows != nCols) {,2,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,672,"            throw new NonSquareMatrixException(nRows, nCols);",2,0,0,0,2,2,0,1,1,5,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,674,        T trace = field.getZero();,1,0,0,1,2,0,2,1,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,675,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,676,"            trace = trace.add(getEntry(i, i));",1,0,0,0,4,0,5,0,2,4,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,678,        return trace;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,684,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,685,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,686,        if (v.length != nCols) {,3,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,687,"            throw new DimensionMismatchException(v.length, nCols);",3,0,0,0,2,2,0,1,1,5,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,690,"        final T[] out = buildArray(field, nRows);",1,0,0,0,4,1,3,1,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,691,        for (int row = 0; row < nRows; ++row) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,692,            T sum = field.getZero();,1,0,0,1,2,0,2,1,0,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,693,            for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,694,"                sum = sum.add(getEntry(row, i).multiply(v[i]));",1,0,1,1,8,0,6,0,2,6,47,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,696,            out[row] = sum;,1,0,1,0,2,0,0,0,1,4,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,699,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,705,"            return new ArrayFieldVector<T>(field, operate(((ArrayFieldVector<T>) v).getDataRef()), false);",2,0,0,3,10,2,2,4,3,7,94,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,706,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,707,            final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,708,            final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,709,            if (v.getDimension() != nCols) {,1,1,0,2,5,1,2,0,0,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,710,"                throw new DimensionMismatchException(v.getDimension(), nCols);",1,0,0,1,4,2,2,1,1,7,62,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,713,"            final T[] out = buildArray(field, nRows);",1,0,0,0,4,1,3,1,2,6,41,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,714,            for (int row = 0; row < nRows; ++row) {,4,1,0,1,3,2,0,0,1,6,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,715,                T sum = field.getZero();,1,0,0,1,2,0,2,1,0,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,716,                for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,717,"                    sum = sum.add(getEntry(row, i).multiply(v.getEntry(i)));",1,0,0,2,8,0,9,0,2,5,56,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,719,                out[row] = sum;,1,0,1,0,2,0,0,0,1,4,15,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,722,"            return new ArrayFieldVector<T>(field, out, false);",2,0,0,0,2,2,0,2,2,5,50,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,729,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,730,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,731,        if (v.length != nRows) {,3,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,732,"            throw new DimensionMismatchException(v.length, nRows);",3,0,0,0,2,2,0,1,1,5,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,735,"        final T[] out = buildArray(field, nCols);",1,0,0,0,4,1,3,1,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,736,        for (int col = 0; col < nCols; ++col) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,737,            T sum = field.getZero();,1,0,0,1,2,0,2,1,0,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,738,            for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,739,"                sum = sum.add(getEntry(i, col).multiply(v[i]));",1,0,1,1,8,0,6,0,2,6,47,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,741,            out[col] = sum;,1,0,1,0,2,0,0,0,1,4,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,744,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,750,"            return new ArrayFieldVector<T>(field, preMultiply(((ArrayFieldVector<T>) v).getDataRef()), false);",2,0,0,3,10,2,2,4,3,7,98,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,751,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,752,            final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,753,            final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,754,            if (v.getDimension() != nRows) {,1,1,0,2,5,1,2,0,0,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,755,"                throw new DimensionMismatchException(v.getDimension(), nRows);",1,0,0,1,4,2,2,1,1,7,62,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,758,"            final T[] out = buildArray(field, nCols);",1,0,0,0,4,1,3,1,2,6,41,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,759,            for (int col = 0; col < nCols; ++col) {,4,1,0,1,3,2,0,0,1,6,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,760,                T sum = field.getZero();,1,0,0,1,2,0,2,1,0,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,761,                for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,762,"                    sum = sum.add(getEntry(i, col).multiply(v.getEntry(i)));",1,0,0,2,8,0,9,0,2,5,56,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,764,                out[col] = sum;,1,0,1,0,2,0,0,0,1,4,15,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,767,"            return new ArrayFieldVector<T>(field, out, false);",2,0,0,0,2,2,0,2,2,5,50,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,773,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,774,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,775,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,776,        for (int row = 0; row < rows; ++row) {,4,1,0,1,3,2,0,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,777,            for (int column = 0; column < columns; ++column) {,4,1,0,1,3,2,0,0,1,6,50,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,778,"                final T oldValue = getEntry(row, column);",1,0,0,0,2,1,3,1,2,6,41,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,779,"                final T newValue = visitor.visit(row, column, oldValue);",1,0,0,0,2,1,5,1,1,6,56,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,780,"                setEntry(row, column, newValue);",0,0,0,0,2,0,4,0,1,3,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,783,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,788,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,789,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,790,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,791,        for (int row = 0; row < rows; ++row) {,4,1,0,1,3,2,0,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,792,            for (int column = 0; column < columns; ++column) {,4,1,0,1,3,2,0,0,1,6,50,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,793,"                visitor.visit(row, column, getEntry(row, column));",0,0,0,0,4,0,7,0,1,3,50,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,796,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,803,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,5,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,804,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,806,        for (int row = startRow; row <= endRow; ++row) {,5,1,0,1,3,2,0,0,1,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,807,            for (int column = startColumn; column <= endColumn; ++column) {,5,1,0,1,3,2,0,0,1,6,63,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,808,"                final T oldValue = getEntry(row, column);",1,0,0,0,2,1,3,1,2,6,41,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,809,"                final T newValue = visitor.visit(row, column, oldValue);",1,0,0,0,2,1,5,1,1,6,56,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,810,"                setEntry(row, column, newValue);",0,0,0,0,2,0,4,0,1,3,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,813,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,820,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,5,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,821,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,823,        for (int row = startRow; row <= endRow; ++row) {,5,1,0,1,3,2,0,0,1,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,824,            for (int column = startColumn; column <= endColumn; ++column) {,5,1,0,1,3,2,0,0,1,6,63,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,825,"                visitor.visit(row, column, getEntry(row, column));",0,0,0,0,4,0,7,0,1,3,50,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,828,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,833,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,834,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,835,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,836,        for (int column = 0; column < columns; ++column) {,4,1,0,1,3,2,0,0,1,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,837,            for (int row = 0; row < rows; ++row) {,4,1,0,1,3,2,0,0,1,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,838,"                final T oldValue = getEntry(row, column);",1,0,0,0,2,1,3,1,2,6,41,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,839,"                final T newValue = visitor.visit(row, column, oldValue);",1,0,0,0,2,1,5,1,1,6,56,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,840,"                setEntry(row, column, newValue);",0,0,0,0,2,0,4,0,1,3,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,843,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,848,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,849,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,850,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,851,        for (int column = 0; column < columns; ++column) {,4,1,0,1,3,2,0,0,1,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,852,            for (int row = 0; row < rows; ++row) {,4,1,0,1,3,2,0,0,1,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,853,"                visitor.visit(row, column, getEntry(row, column));",0,0,0,0,4,0,7,0,1,3,50,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,856,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,863,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,5,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,864,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,866,        for (int column = startColumn; column <= endColumn; ++column) {,5,1,0,1,3,2,0,0,1,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,867,            for (int row = startRow; row <= endRow; ++row) {,5,1,0,1,3,2,0,0,1,6,48,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,868,"                final T oldValue = getEntry(row, column);",1,0,0,0,2,1,3,1,2,6,41,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,869,"                final T newValue = visitor.visit(row, column, oldValue);",1,0,0,0,2,1,5,1,1,6,56,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,870,"                setEntry(row, column, newValue);",0,0,0,0,2,0,4,0,1,3,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,873,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,880,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,5,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,881,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,883,        for (int column = startColumn; column <= endColumn; ++column) {,5,1,0,1,3,2,0,0,1,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,884,            for (int row = startRow; row <= endRow; ++row) {,5,1,0,1,3,2,0,0,1,6,48,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,885,"                visitor.visit(row, column, getEntry(row, column));",0,0,0,0,4,0,7,0,1,3,50,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,888,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,893,        return walkInRowOrder(visitor);,0,0,0,1,2,1,2,0,1,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,898,        return walkInRowOrder(visitor);,0,0,0,1,2,1,2,0,1,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,905,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,1,4,73,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,912,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,1,4,73,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,921,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,922,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,923,        final StringBuffer res = new StringBuffer();,1,0,0,1,2,2,0,2,2,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,924,        String fullClassName = getClass().getName();,1,0,0,1,4,0,2,1,1,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,925,        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);,1,1,0,2,4,0,4,1,1,7,84,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,926,"        res.append(shortClassName).append(""{"");",0,0,0,1,5,0,4,0,1,4,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,928,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,929,            if (i > 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,930,"                res.append("","");",0,0,0,0,2,0,2,0,1,3,16,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,932,"            res.append(""{"");",0,0,0,1,3,0,2,0,1,4,16,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,933,            for (int j = 0; j < nCols; ++j) {,4,1,0,1,3,2,0,0,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,934,                if (j > 0) {,1,1,0,1,3,1,0,0,0,5,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,935,"                    res.append("","");",0,0,0,0,2,0,2,0,1,3,16,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,937,"                res.append(getEntry(i, j));",0,0,0,0,4,0,5,0,1,3,27,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,939,"            res.append(""}"");",0,0,0,1,3,0,2,0,1,4,16,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,942,"        res.append(""}"");",0,0,0,1,3,0,2,0,1,4,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,943,        return res.toString();,0,0,0,1,2,1,2,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,956,        if (object == this ) {,1,1,0,1,3,2,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,957,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,959,        if (object instanceof FieldMatrix<?> == false) {,1,1,0,1,3,2,0,1,1,7,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,960,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,962,        FieldMatrix<?> m = (FieldMatrix<?>) object;,2,0,0,1,2,0,0,2,0,4,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,963,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,964,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,965,        if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {,2,3,0,2,7,1,4,0,0,6,70,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,966,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,968,        for (int row = 0; row < nRows; ++row) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,969,            for (int col = 0; col < nCols; ++col) {,4,1,0,1,3,2,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,970,"                if (!getEntry(row, col).equals(m.getEntry(row, col))) {",0,0,0,0,9,1,8,0,2,4,55,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,971,                    return false;,0,0,0,0,0,1,0,0,1,2,13,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,975,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,985,        int ret = 322562;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,986,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,987,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,988,        ret = ret * 31 + nRows;,3,2,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,989,        ret = ret * 31 + nCols;,3,2,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,990,        for (int row = 0; row < nRows; ++row) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,991,            for (int col = 0; col < nCols; ++col) {,4,1,0,1,3,2,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,992,"               ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) * getEntry(row, col).hashCode();",4,8,0,2,10,0,4,0,2,6,79,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,995,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,1005,        if (row < 0 || row >= getRowDimension()) {,2,3,0,2,5,1,1,0,1,7,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,1006,"            throw new OutOfRangeException(LocalizedFormats.ROW_INDEX,",2,0,0,0,1,2,0,1,1,5,57,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,1009,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,1018,        if (column < 0 || column >= getColumnDimension()) {,2,3,0,2,5,1,1,0,1,7,51,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,1019,"            throw new OutOfRangeException(LocalizedFormats.COLUMN_INDEX,",2,0,0,0,1,2,0,1,1,5,60,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,1022,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,1038,        checkRowIndex(startRow);,0,0,0,1,2,0,2,0,1,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,1039,        checkRowIndex(endRow);,0,0,0,1,2,0,2,0,1,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,1040,        if (endRow < startRow) {,2,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,1041,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW,",2,0,0,0,1,2,0,1,1,5,81,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,1045,        checkColumnIndex(startColumn);,0,0,0,1,2,0,2,0,1,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,1046,        checkColumnIndex(endColumn);,0,0,0,1,2,0,2,0,1,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,1047,        if (endColumn < startColumn) {,2,1,0,1,3,1,0,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,1048,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_COLUMN_AFTER_FINAL_COLUMN,",2,0,0,0,1,2,0,1,1,5,87,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,1051,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,1064,        if (selectedRows == null ||,1,2,0,0,1,1,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,1066,            throw new NullArgumentException();,0,0,0,1,2,2,0,1,1,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,1068,        if (selectedRows.length == 0 ||,2,2,0,0,1,1,0,0,0,4,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,1070,            throw new NoDataException();,0,0,0,1,2,2,0,1,1,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,1073,        for (final int row : selectedRows) {,2,0,0,1,3,3,0,0,1,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,1074,            checkRowIndex(row);,0,0,0,1,2,0,2,0,1,4,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,1076,        for (final int column : selectedColumns) {,2,0,0,1,3,3,0,0,1,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,1077,            checkColumnIndex(column);,0,0,0,1,2,0,2,0,1,4,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,1079,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,1089,        if ((getRowDimension() != m.getRowDimension()) ||,0,2,0,2,7,1,3,0,1,6,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,1091,"            throw new MatrixDimensionMismatchException(m.getRowDimension(), m.getColumnDimension(),",0,0,0,1,5,2,4,1,1,6,87,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,1094,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,1104,        if ((getRowDimension() != m.getRowDimension()) ||,0,2,0,2,7,1,3,0,1,6,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,1106,"            throw new MatrixDimensionMismatchException(m.getRowDimension(), m.getColumnDimension(),",0,0,0,1,5,2,4,1,1,6,87,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,1109,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,1119,        if (getColumnDimension() != m.getRowDimension()) {,0,1,0,2,7,1,3,0,1,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,1120,"            throw new DimensionMismatchException(m.getRowDimension(), getColumnDimension());",0,0,0,1,6,2,3,1,2,6,80,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,1122,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,96,"        super(field, rows, columns);",3,0,0,0,2,1,0,0,1,4,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,97,        this.rows    = rows;,2,0,0,0,0,1,0,0,1,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,98,        this.columns = columns;,2,0,0,0,0,1,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,101,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,4,3,0,1,2,0,0,0,1,5,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,102,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,4,3,0,1,2,0,0,0,1,5,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,105,"        blocks = createBlocksLayout(field, rows, columns);",1,0,0,0,2,0,4,0,2,4,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,106,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,122,"        this(rawData.length, rawData[0].length, toBlocksLayout(rawData), false);",3,0,1,1,6,1,2,0,2,7,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,123,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,142,"        super(extractField(blockData), rows, columns);",2,0,0,1,4,1,2,0,2,6,46,3,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,143,        this.rows    = rows;,2,0,0,0,0,1,0,0,1,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,144,        this.columns = columns;,2,0,0,0,0,1,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,147,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,4,3,0,1,2,0,0,0,1,5,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,148,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,4,3,0,1,2,0,0,0,1,5,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,150,        if (copyArray) {,1,0,0,1,3,1,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,152,"            blocks = buildArray(getField(), blockRows * blockColumns, -1);",3,1,0,1,4,0,2,0,4,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,155,            blocks = blockData;,2,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,158,        int index = 0;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,159,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,160,            final int iHeight = blockHeight(iBlock);,1,0,0,1,2,2,2,0,2,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,161,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++index) {",5,1,0,0,3,2,0,0,2,5,64,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,162,                if (blockData[index].length != iHeight * blockWidth(jBlock)) {,2,2,1,2,7,1,2,0,1,8,62,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,163,"                    throw new DimensionMismatchException(blockData[index].length,",1,0,1,0,3,2,0,1,1,6,61,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,166,                if (copyArray) {,1,0,0,1,3,1,0,0,0,4,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,167,                    blocks[index] = blockData[index].clone();,0,0,1,1,6,0,1,0,1,5,41,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,171,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,199,        final int rows         = rawData.length;,3,0,0,0,0,2,0,0,1,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,200,        final int columns      = rawData[0].length;,2,0,1,0,2,2,0,0,1,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,201,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,4,3,0,1,2,2,0,0,1,6,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,202,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,4,3,0,1,2,2,0,0,1,6,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,205,        for (int i = 0; i < rawData.length; ++i) {,5,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,206,            final int length = rawData[i].length;,2,0,1,0,2,2,0,0,1,5,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,207,            if (length != columns) {,2,1,0,1,3,1,0,0,0,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,208,"                throw new DimensionMismatchException(columns, length);",2,0,0,0,2,2,0,1,1,5,54,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,213,        final Field<T> field = extractField(rawData);,1,0,0,1,2,1,2,2,2,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,214,"        final T[][] blocks = buildArray(field, blockRows * blockColumns, -1);",3,1,0,0,6,1,2,1,3,7,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,215,        int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,216,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,217,            final int pStart  = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,218,"            final int pEnd    = FastMath.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,60,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,219,            final int iHeight = pEnd - pStart;,3,1,0,0,0,2,0,0,1,4,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,220,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,221,                final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,222,"                final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,62,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,223,                final int jWidth = qEnd - qStart;,3,1,0,0,0,2,0,0,1,4,33,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,226,"                final T[] block = buildArray(field, iHeight * jWidth);",3,1,0,0,4,1,2,1,2,7,54,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,227,                blocks[blockIndex] = block;,1,0,1,0,2,0,0,0,1,4,27,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,230,                int index = 0;,1,0,0,0,0,1,0,0,0,2,14,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,231,                for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,232,"                    System.arraycopy(rawData[p], qStart, block, index, jWidth);",0,0,1,0,4,0,6,0,0,3,59,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,233,                    index += jWidth;,2,0,0,0,0,0,0,0,1,2,16,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,236,                ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,240,        return blocks;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,260,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,4,3,0,1,2,2,0,0,1,6,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,261,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,4,3,0,1,2,2,0,0,1,6,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,263,"        final T[][] blocks = buildArray(field, blockRows * blockColumns, -1);",3,1,0,0,6,1,2,1,3,7,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,264,        int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,265,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,266,            final int pStart  = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,267,"            final int pEnd    = FastMath.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,60,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,268,            final int iHeight = pEnd - pStart;,3,1,0,0,0,2,0,0,1,4,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,269,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,270,                final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,271,"                final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,62,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,272,                final int jWidth = qEnd - qStart;,3,1,0,0,0,2,0,0,1,4,33,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,273,"                blocks[blockIndex] = buildArray(field, iHeight * jWidth);",2,1,1,0,4,0,2,0,2,6,57,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,274,                ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,278,        return blocks;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,284,"        return new BlockFieldMatrix<T>(getField(), rowDimension, columnDimension);",2,0,0,1,4,2,1,2,2,7,74,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,292,"        BlockFieldMatrix<T> copied = new BlockFieldMatrix<T>(getField(), rows, columns);",3,0,0,1,4,1,1,4,2,7,80,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,295,        for (int i = 0; i < blocks.length; ++i) {,5,1,0,1,3,2,0,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,296,"            System.arraycopy(blocks[i], 0, copied.blocks[i], 0, blocks[i].length);",3,0,1,0,8,0,2,0,0,4,70,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,299,        return copied;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,306,            return add((BlockFieldMatrix<T>) m);,1,0,0,2,4,1,1,2,1,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,307,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,310,            checkAdditionCompatible(m);,0,0,0,1,2,0,2,0,1,4,27,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,312,"            final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",3,0,0,1,4,2,1,4,3,7,83,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,315,            int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,316,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,5,1,0,1,3,2,0,0,1,6,56,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,317,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,5,1,0,1,3,2,0,0,1,6,59,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,320,                    final T[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,1,0,1,1,6,44,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,321,                    final T[] tBlock   = blocks[blockIndex];,1,0,1,0,4,1,0,1,1,6,40,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,322,                    final int      pStart   = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,46,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,323,"                    final int      pEnd     = FastMath.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,66,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,324,                    final int      qStart   = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,46,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,325,"                    final int      qEnd     = FastMath.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,69,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,326,                    int k = 0;,1,0,0,0,0,1,0,0,0,2,10,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,327,                    for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,328,                        for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,13,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,329,"                            outBlock[k] = tBlock[k].add(m.getEntry(p, q));",0,0,1,0,8,0,5,0,1,4,46,15,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,330,                            ++k;,1,0,0,0,0,0,0,0,1,2,4,15,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,335,                    ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,340,            return out;,1,0,0,0,0,1,0,0,0,2,11,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,354,        checkAdditionCompatible(m);,0,0,0,1,2,0,2,0,1,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,356,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",3,0,0,1,4,2,1,4,3,7,83,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,359,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,6,1,0,1,3,2,0,0,1,6,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,360,            final T[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,1,0,1,1,6,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,361,            final T[] tBlock   = blocks[blockIndex];,1,0,1,0,4,1,0,1,1,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,362,            final T[] mBlock   = m.blocks[blockIndex];,3,0,1,0,4,1,0,1,1,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,363,            for (int k = 0; k < outBlock.length; ++k) {,5,1,0,1,3,2,0,0,1,6,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,364,                outBlock[k] = tBlock[k].add(mBlock[k]);,0,0,1,1,8,0,1,0,1,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,368,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,375,            return subtract((BlockFieldMatrix<T>) m);,1,0,0,2,4,1,1,2,1,7,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,376,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,379,            checkSubtractionCompatible(m);,0,0,0,1,2,0,2,0,1,4,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,381,"            final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",3,0,0,1,4,2,1,4,3,7,83,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,384,            int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,385,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,5,1,0,1,3,2,0,0,1,6,56,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,386,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,5,1,0,1,3,2,0,0,1,6,59,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,389,                    final T[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,1,0,1,1,6,44,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,390,                    final T[] tBlock   = blocks[blockIndex];,1,0,1,0,4,1,0,1,1,6,40,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,391,                    final int      pStart   = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,46,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,392,"                    final int      pEnd     = FastMath.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,66,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,393,                    final int      qStart   = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,46,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,394,"                    final int      qEnd     = FastMath.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,69,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,395,                    int k = 0;,1,0,0,0,0,1,0,0,0,2,10,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,396,                    for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,397,                        for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,13,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,398,"                            outBlock[k] = tBlock[k].subtract(m.getEntry(p, q));",0,0,1,0,8,0,5,0,1,4,51,15,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,399,                            ++k;,1,0,0,0,0,0,0,0,1,2,4,15,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,404,                    ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,409,            return out;,1,0,0,0,0,1,0,0,0,2,11,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,422,        checkSubtractionCompatible(m);,0,0,0,1,2,0,2,0,1,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,424,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",3,0,0,1,4,2,1,4,3,7,83,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,427,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,6,1,0,1,3,2,0,0,1,6,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,428,            final T[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,1,0,1,1,6,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,429,            final T[] tBlock   = blocks[blockIndex];,1,0,1,0,4,1,0,1,1,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,430,            final T[] mBlock   = m.blocks[blockIndex];,3,0,1,0,4,1,0,1,1,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,431,            for (int k = 0; k < outBlock.length; ++k) {,5,1,0,1,3,2,0,0,1,6,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,432,                outBlock[k] = tBlock[k].subtract(mBlock[k]);,0,0,1,1,8,0,1,0,1,5,44,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,436,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,442,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",3,0,0,1,4,2,1,4,3,7,83,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,445,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,6,1,0,1,3,2,0,0,1,6,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,446,            final T[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,1,0,1,1,6,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,447,            final T[] tBlock   = blocks[blockIndex];,1,0,1,0,4,1,0,1,1,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,448,            for (int k = 0; k < outBlock.length; ++k) {,5,1,0,1,3,2,0,0,1,6,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,449,                outBlock[k] = tBlock[k].add(d);,0,0,1,1,6,0,2,0,1,5,31,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,453,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,460,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",3,0,0,1,4,2,1,4,3,7,83,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,463,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,6,1,0,1,3,2,0,0,1,6,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,464,            final T[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,1,0,1,1,6,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,465,            final T[] tBlock   = blocks[blockIndex];,1,0,1,0,4,1,0,1,1,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,466,            for (int k = 0; k < outBlock.length; ++k) {,5,1,0,1,3,2,0,0,1,6,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,467,                outBlock[k] = tBlock[k].multiply(d);,0,0,1,1,6,0,2,0,1,5,36,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,471,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,478,            return multiply((BlockFieldMatrix<T>) m);,1,0,0,2,4,1,1,2,1,7,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,479,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,482,            checkMultiplicationCompatible(m);,0,0,0,1,2,0,2,0,1,4,33,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,484,"            final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, m.getColumnDimension());",2,0,0,1,6,2,3,4,3,7,98,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,485,            final T zero = getField().getZero();,1,0,0,1,4,1,2,1,2,7,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,488,            int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,489,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,5,1,0,1,3,2,0,0,1,6,56,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,491,                final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,492,"                final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,59,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,494,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,5,1,0,1,3,2,0,0,1,6,59,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,496,                    final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,497,"                    final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, m.getColumnDimension());",3,1,0,1,4,2,4,0,1,7,77,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,500,                    final T[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,1,0,1,1,6,44,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,503,                    for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,4,1,0,1,3,2,0,0,1,6,55,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,504,                        final int kWidth      = blockWidth(kBlock);,1,0,0,1,2,2,2,0,2,6,43,13,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,505,                        final T[] tBlock = blocks[iBlock * blockColumns + kBlock];,4,2,1,0,4,1,0,1,1,7,58,13,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,506,                        final int rStart      = kBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,44,13,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,507,                        int k = 0;,1,0,0,0,0,1,0,0,0,2,10,14,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,508,                        for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,13,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,509,                            final int lStart = (p - pStart) * kWidth;,4,2,0,1,2,2,0,0,1,6,41,15,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,510,                            final int lEnd   = lStart + kWidth;,3,1,0,0,0,2,0,0,1,4,35,15,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,511,                            for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,15,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,512,                                T sum = zero;,2,0,0,0,0,0,0,1,0,2,13,17,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,513,                                int r = rStart;,2,0,0,0,0,1,0,0,0,2,15,18,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,514,                                for (int l = lStart; l < lEnd; ++l) {,5,1,0,1,3,2,0,0,1,6,37,17,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,515,"                                    sum = sum.add(tBlock[l].multiply(m.getEntry(r, q)));",1,0,1,0,8,0,7,0,1,5,52,19,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,516,                                    ++r;,1,0,0,0,0,0,0,0,1,2,4,19,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,518,                                outBlock[k] = outBlock[k].add(sum);,0,0,1,1,6,0,2,0,1,5,35,17,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,519,                                ++k;,1,0,0,0,0,0,0,0,1,2,4,17,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,525,                    ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,530,            return out;,1,0,0,0,0,1,0,0,0,2,11,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,545,        checkMultiplicationCompatible(m);,0,0,0,1,2,0,2,0,1,4,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,547,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, m.columns);",4,0,0,1,4,2,1,4,3,7,85,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,548,        final T zero = getField().getZero();,1,0,0,1,4,1,2,1,2,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,551,        int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,552,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,5,1,0,1,3,2,0,0,1,6,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,554,            final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,555,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,59,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,557,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,5,1,0,1,3,2,0,0,1,6,59,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,558,                final int jWidth = out.blockWidth(jBlock);,1,0,0,1,2,2,3,0,1,6,42,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,559,                final int jWidth2 = jWidth  + jWidth;,3,1,0,0,0,2,0,0,1,4,37,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,560,                final int jWidth3 = jWidth2 + jWidth;,3,1,0,0,0,2,0,0,1,4,37,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,561,                final int jWidth4 = jWidth3 + jWidth;,3,1,0,0,0,2,0,0,1,4,37,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,564,                final T[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,1,0,1,1,6,44,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,567,                for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,4,1,0,1,3,2,0,0,1,6,55,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,568,                    final int kWidth = blockWidth(kBlock);,1,0,0,1,2,2,2,0,2,6,38,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,569,                    final T[] tBlock = blocks[iBlock * blockColumns + kBlock];,4,2,1,0,4,1,0,1,1,7,58,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,570,                    final T[] mBlock = m.blocks[kBlock * m.blockColumns + jBlock];,7,2,0,0,4,1,0,1,1,6,62,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,571,                    int k = 0;,1,0,0,0,0,1,0,0,0,2,10,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,572,                    for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,573,                        final int lStart = (p - pStart) * kWidth;,4,2,0,1,2,2,0,0,1,6,41,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,574,                        final int lEnd   = lStart + kWidth;,3,1,0,0,0,2,0,0,1,4,35,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,575,                        for (int nStart = 0; nStart < jWidth; ++nStart) {,4,1,0,1,3,2,0,0,1,6,49,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,576,                            T sum = zero;,2,0,0,0,0,0,0,1,0,2,13,14,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,577,                            int l = lStart;,2,0,0,0,0,1,0,0,0,2,15,15,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,578,                            int n = nStart;,2,0,0,0,0,1,0,0,0,2,15,15,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,579,                            while (l < lEnd - 3) {,2,2,0,1,3,1,0,0,0,5,22,14,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,580,                                sum = sum.,1,0,0,0,0,0,1,0,1,3,10,16,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,585,                                l += 4;,1,0,0,0,0,0,0,0,1,2,7,16,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,586,                                n += jWidth4;,2,0,0,0,0,0,0,0,1,2,13,16,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,588,                            while (l < lEnd) {,2,1,0,1,3,1,0,0,0,5,18,14,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,589,                                sum = sum.add(tBlock[l++].multiply(mBlock[n]));,2,0,1,2,8,0,3,0,2,6,47,16,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,590,                                n += jWidth;,2,0,0,0,0,0,0,0,1,2,12,16,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,592,                            outBlock[k] = outBlock[k].add(sum);,0,0,1,1,6,0,2,0,1,5,35,14,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,593,                            ++k;,1,0,0,0,0,0,0,0,1,2,4,14,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,599,                ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,603,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,610,"        final T[][] data = buildArray(getField(), getRowDimension(), getColumnDimension());",1,0,0,1,12,1,4,1,5,7,83,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,611,        final int lastColumns = columns - (blockColumns - 1) * BLOCK_SIZE;,4,3,0,1,2,2,0,0,1,6,66,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,613,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,614,            final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,615,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,59,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,616,            int regularPos   = 0;,1,0,0,0,0,1,0,0,0,2,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,617,            int lastPos      = 0;,1,0,0,0,0,1,0,0,0,2,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,618,            for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,619,                final T[] dataP = data[p];,1,0,1,0,4,1,0,1,1,6,26,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,620,                int blockIndex = iBlock * blockColumns;,3,1,0,0,0,1,0,0,0,3,39,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,621,                int dataPos    = 0;,1,0,0,0,0,1,0,0,0,2,19,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,622,                for (int jBlock = 0; jBlock < blockColumns - 1; ++jBlock) {,4,2,0,1,3,2,0,0,1,6,59,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,623,"                    System.arraycopy(blocks[blockIndex++], regularPos, dataP, dataPos, BLOCK_SIZE);",1,0,1,0,4,0,6,0,1,5,79,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,624,                    dataPos += BLOCK_SIZE;,2,0,0,0,0,0,0,0,1,2,22,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,626,"                System.arraycopy(blocks[blockIndex], lastPos, dataP, dataPos, lastColumns);",0,0,1,0,4,0,6,0,0,3,75,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,627,                regularPos += BLOCK_SIZE;,2,0,0,0,0,0,0,0,1,2,25,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,628,                lastPos    += lastColumns;,2,0,0,0,0,0,0,0,1,2,26,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,632,        return data;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,640,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,5,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,643,        final BlockFieldMatrix<T> out =,1,0,0,0,0,1,0,2,1,4,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,647,        final int blockStartRow    = startRow    / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,648,        final int rowsShift        = startRow    % BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,649,        final int blockStartColumn = startColumn / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,650,        final int columnsShift     = startColumn % BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,653,        int pBlock = blockStartRow;,2,0,0,0,0,1,0,0,0,2,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,654,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,5,1,0,1,3,2,0,0,1,6,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,655,            final int iHeight = out.blockHeight(iBlock);,1,0,0,1,2,2,3,0,1,6,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,656,            int qBlock = blockStartColumn;,2,0,0,0,0,1,0,0,0,2,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,657,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,5,1,0,1,3,2,0,0,1,6,59,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,658,                final int jWidth = out.blockWidth(jBlock);,1,0,0,1,2,2,3,0,1,6,42,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,661,                final int      outIndex = iBlock * out.blockColumns + jBlock;,5,2,0,0,0,2,0,0,1,4,61,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,662,                final T[] outBlock = out.blocks[outIndex];,3,0,1,0,4,1,0,1,1,6,42,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,663,                final int      index    = pBlock * blockColumns + qBlock;,4,2,0,0,0,2,0,0,1,4,57,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,664,                final int      width    = blockWidth(qBlock);,1,0,0,1,2,2,2,0,2,6,45,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,666,                final int heightExcess = iHeight + rowsShift - BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,58,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,667,                final int widthExcess  = jWidth + columnsShift - BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,60,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,668,                if (heightExcess > 0) {,1,1,0,1,3,1,0,0,0,5,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,670,                    if (widthExcess > 0) {,1,1,0,1,3,1,0,0,0,5,22,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,672,                        final int width2 = blockWidth(qBlock + 1);,2,1,0,1,2,2,1,0,2,7,42,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,673,"                        copyBlockPart(blocks[index], width,",0,0,1,0,3,0,2,0,1,4,35,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,677,"                        copyBlockPart(blocks[index + 1], width2,",1,1,1,0,3,0,2,0,1,6,40,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,681,"                        copyBlockPart(blocks[index + blockColumns], width,",2,1,1,0,3,0,2,0,1,6,50,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,685,"                        copyBlockPart(blocks[index + blockColumns + 1], width2,",2,1,1,0,3,0,2,0,1,6,55,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,689,                    } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,691,"                        copyBlockPart(blocks[index], width,",0,0,1,0,3,0,2,0,1,4,35,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,695,"                        copyBlockPart(blocks[index + blockColumns], width,",2,1,1,0,3,0,2,0,1,6,50,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,702,                    if (widthExcess > 0) {,1,1,0,1,3,1,0,0,0,5,22,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,704,                        final int width2 = blockWidth(qBlock + 1);,2,1,0,1,2,2,1,0,2,7,42,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,705,"                        copyBlockPart(blocks[index], width,",0,0,1,0,3,0,2,0,1,4,35,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,709,"                        copyBlockPart(blocks[index + 1], width2,",1,1,1,0,3,0,2,0,1,6,40,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,713,                    } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,715,"                        copyBlockPart(blocks[index], width,",0,0,1,0,3,0,2,0,1,4,35,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,721,                ++qBlock;,1,0,0,0,0,0,0,0,1,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,723,            ++pBlock;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,726,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,749,        final int length = srcEndColumn - srcStartColumn;,3,1,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,750,        int srcPos = srcStartRow * srcWidth + srcStartColumn;,4,2,0,0,0,1,0,0,0,3,53,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,751,        int dstPos = dstStartRow * dstWidth + dstStartColumn;,4,2,0,0,0,1,0,0,0,3,53,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,752,        for (int srcRow = srcStartRow; srcRow < srcEndRow; ++srcRow) {,5,1,0,1,3,2,0,0,1,6,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,753,"            System.arraycopy(srcBlock, srcPos, dstBlock, dstPos, length);",0,0,0,0,2,0,7,0,0,2,61,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,754,            srcPos += srcWidth;,2,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,755,            dstPos += dstWidth;,2,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,757,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,763,        MathUtils.checkNotNull(subMatrix);,0,0,0,1,2,0,3,0,0,3,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,764,        final int refLength = subMatrix[0].length;,2,0,1,0,2,2,0,0,1,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,765,        if (refLength == 0) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,766,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,2,0,0,1,2,2,0,1,1,6,64,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,768,        final int endRow    = row + subMatrix.length - 1;,4,2,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,769,        final int endColumn = column + refLength - 1;,3,2,0,0,0,2,0,0,1,4,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,770,"        checkSubMatrixIndex(row, endRow, column, endColumn);",0,0,0,0,2,0,5,0,1,3,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,771,        for (final T[] subRow : subMatrix) {,2,0,0,1,5,2,0,1,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,772,            if (subRow.length != refLength) {,3,1,0,1,3,1,0,0,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,773,"                throw new DimensionMismatchException(refLength, subRow.length);",3,0,0,0,2,2,0,1,1,5,63,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,778,        final int blockStartRow    = row / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,779,        final int blockEndRow      = (endRow + BLOCK_SIZE) / BLOCK_SIZE;,4,2,0,1,2,2,0,0,1,6,64,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,780,        final int blockStartColumn = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,781,        final int blockEndColumn   = (endColumn + BLOCK_SIZE) / BLOCK_SIZE;,4,2,0,1,2,2,0,0,1,6,67,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,784,        for (int iBlock = blockStartRow; iBlock < blockEndRow; ++iBlock) {,5,1,0,1,3,2,0,0,1,6,66,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,785,            final int iHeight  = blockHeight(iBlock);,1,0,0,1,2,2,2,0,2,6,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,786,            final int firstRow = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,787,"            final int iStart   = FastMath.max(row,    firstRow);",1,0,0,0,2,2,4,0,1,5,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,788,"            final int iEnd     = FastMath.min(endRow + 1, firstRow + iHeight);",4,2,0,0,2,2,2,0,1,6,66,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,790,            for (int jBlock = blockStartColumn; jBlock < blockEndColumn; ++jBlock) {,5,1,0,1,3,2,0,0,1,6,72,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,791,                final int jWidth      = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,43,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,792,                final int firstColumn = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,44,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,793,"                final int jStart      = FastMath.max(column,    firstColumn);",1,0,0,0,2,2,4,0,1,5,61,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,794,"                final int jEnd        = FastMath.min(endColumn + 1, firstColumn + jWidth);",4,2,0,0,2,2,2,0,1,6,74,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,795,                final int jLength     = jEnd - jStart;,3,1,0,0,0,2,0,0,1,4,38,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,798,                final T[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,57,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,799,                for (int i = iStart; i < iEnd; ++i) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,800,"                    System.arraycopy(subMatrix[i - row], jStart - column,",4,2,1,0,3,0,2,0,0,5,53,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,807,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,812,        checkRowIndex(row);,0,0,0,1,2,0,2,0,1,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,813,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), 1, columns);",2,0,0,1,4,2,1,4,3,7,80,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,816,        final int iBlock  = row / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,817,        final int iRow    = row - iBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,818,        int outBlockIndex = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,819,        int outIndex      = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,820,        T[] outBlock = out.blocks[outBlockIndex];,3,0,1,0,4,0,0,1,0,4,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,821,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,822,            final int jWidth     = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,823,            final T[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,57,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,824,            final int available  = outBlock.length - outIndex;,4,1,0,0,0,2,0,0,1,4,50,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,825,            if (jWidth > available) {,2,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,826,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, available);",2,1,0,0,2,0,6,0,0,4,70,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,827,                outBlock = out.blocks[++outBlockIndex];,4,0,0,0,2,0,0,0,2,3,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,828,"                System.arraycopy(block, iRow * jWidth, outBlock, 0, jWidth - available);",4,2,0,0,2,0,4,0,0,4,72,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,829,                outIndex = jWidth - available;,3,1,0,0,0,0,0,0,1,3,30,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,831,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, jWidth);",2,1,0,0,2,0,6,0,0,4,67,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,832,                outIndex += jWidth;,2,0,0,0,0,0,0,0,1,2,19,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,836,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,843,"            setRowMatrix(row, (BlockFieldMatrix<T>) matrix);",1,0,0,1,4,0,2,2,1,6,48,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,846,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,844,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,845,"            super.setRowMatrix(row, matrix);",3,0,0,0,2,1,0,0,0,3,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,847,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,862,        checkRowIndex(row);,0,0,0,1,2,0,2,0,1,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,863,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,864,        if ((matrix.getRowDimension() != 1) ||,0,2,0,2,5,1,2,0,0,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,866,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0,0,0,1,3,2,2,1,1,6,68,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,872,        final int iBlock = row / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,873,        final int iRow   = row - iBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,874,        int mBlockIndex  = 0;,1,0,0,0,0,1,0,0,0,2,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,875,        int mIndex       = 0;,1,0,0,0,0,1,0,0,0,2,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,876,        T[] mBlock  = matrix.blocks[mBlockIndex];,3,0,1,0,4,0,0,1,0,4,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,877,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,878,            final int jWidth     = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,879,            final T[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,57,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,880,            final int available  = mBlock.length - mIndex;,4,1,0,0,0,2,0,0,1,4,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,881,            if (jWidth > available) {,2,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,882,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, available);",2,1,0,0,2,0,6,0,0,4,66,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,883,                mBlock = matrix.blocks[++mBlockIndex];,4,0,0,0,2,0,0,0,2,3,38,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,884,"                System.arraycopy(mBlock, 0, block, iRow * jWidth, jWidth - available);",4,2,0,0,2,0,4,0,0,4,70,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,885,                mIndex = jWidth - available;,3,1,0,0,0,0,0,0,1,3,28,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,887,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, jWidth);",2,1,0,0,2,0,6,0,0,4,63,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,888,                mIndex += jWidth;,2,0,0,0,0,0,0,0,1,2,17,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,891,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,896,        checkColumnIndex(column);,0,0,0,1,2,0,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,897,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, 1);",2,0,0,1,4,2,1,4,3,7,77,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,900,        final int jBlock  = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,901,        final int jColumn = column - jBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,902,        final int jWidth  = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,903,        int outBlockIndex = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,904,        int outIndex      = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,905,        T[] outBlock = out.blocks[outBlockIndex];,3,0,1,0,4,0,0,1,0,4,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,906,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,907,            final int iHeight = blockHeight(iBlock);,1,0,0,1,2,2,2,0,2,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,908,            final T[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,57,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,909,            for (int i = 0; i < iHeight; ++i) {,4,1,0,1,3,2,0,0,1,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,910,                if (outIndex >= outBlock.length) {,3,1,0,1,3,1,0,0,0,5,34,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,911,                    outBlock = out.blocks[++outBlockIndex];,4,0,0,0,2,0,0,0,2,3,39,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,912,                    outIndex = 0;,1,0,0,0,0,0,0,0,1,2,13,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,914,                outBlock[outIndex++] = block[i * jWidth + jColumn];,4,2,1,0,4,0,0,0,2,5,51,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,918,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,925,"            setColumnMatrix(column, (BlockFieldMatrix<T>) matrix);",1,0,0,1,4,0,2,2,1,6,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,928,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,926,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,927,"            super.setColumnMatrix(column, matrix);",3,0,0,0,2,1,0,0,0,3,38,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,929,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,944,        checkColumnIndex(column);,0,0,0,1,2,0,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,945,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,946,        if ((matrix.getRowDimension() != nRows) ||,1,2,0,2,5,1,2,0,0,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,948,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0,0,0,1,3,2,2,1,1,6,68,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,954,        final int jBlock  = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,955,        final int jColumn = column - jBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,956,        final int jWidth  = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,957,        int mBlockIndex = 0;,1,0,0,0,0,1,0,0,0,2,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,958,        int mIndex      = 0;,1,0,0,0,0,1,0,0,0,2,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,959,        T[] mBlock = matrix.blocks[mBlockIndex];,3,0,1,0,4,0,0,1,0,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,960,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,961,            final int iHeight = blockHeight(iBlock);,1,0,0,1,2,2,2,0,2,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,962,            final T[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,57,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,963,            for (int i = 0; i < iHeight; ++i) {,4,1,0,1,3,2,0,0,1,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,964,                if (mIndex >= mBlock.length) {,3,1,0,1,3,1,0,0,0,5,30,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,965,                    mBlock = matrix.blocks[++mBlockIndex];,4,0,0,0,2,0,0,0,2,3,38,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,966,                    mIndex = 0;,1,0,0,0,0,0,0,0,1,2,11,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,968,                block[i * jWidth + jColumn] = mBlock[mIndex++];,4,2,1,0,4,0,0,0,2,5,47,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,971,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,976,        checkRowIndex(row);,0,0,0,1,2,0,2,0,1,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,977,"        final T[] outData = buildArray(getField(), columns);",1,0,0,1,6,1,3,1,3,7,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,980,        final int iBlock  = row / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,981,        final int iRow    = row - iBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,982,        int outIndex      = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,983,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,984,            final int jWidth     = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,985,            final T[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,57,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,986,"            System.arraycopy(block, iRow * jWidth, outData, outIndex, jWidth);",2,1,0,0,2,0,6,0,0,4,66,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,987,            outIndex += jWidth;,2,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,990,"        return new ArrayFieldVector<T>(getField(), outData, false);",1,0,0,1,4,2,1,2,3,7,59,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,997,"            setRow(row, ((ArrayFieldVector<T>) vector).getDataRef());",1,0,0,2,8,0,3,2,1,6,57,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1000,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,998,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,999,"            super.setRowVector(row, vector);",3,0,0,0,2,1,0,0,0,3,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1001,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1006,        checkColumnIndex(column);,0,0,0,1,2,0,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1007,"        final T[] outData = buildArray(getField(), rows);",1,0,0,1,6,1,3,1,3,7,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1010,        final int jBlock  = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1011,        final int jColumn = column - jBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1012,        final int jWidth  = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1013,        int outIndex      = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1014,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1015,            final int iHeight = blockHeight(iBlock);,1,0,0,1,2,2,2,0,2,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1016,            final T[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,57,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1017,            for (int i = 0; i < iHeight; ++i) {,4,1,0,1,3,2,0,0,1,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1018,                outData[outIndex++] = block[i * jWidth + jColumn];,4,2,1,0,4,0,0,0,2,5,50,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1022,"        return new ArrayFieldVector<T>(getField(), outData, false);",1,0,0,1,4,2,1,2,3,7,59,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1029,"            setColumn(column, ((ArrayFieldVector<T>) vector).getDataRef());",1,0,0,2,8,0,3,2,1,6,63,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1032,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1030,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1031,"            super.setColumnVector(column, vector);",3,0,0,0,2,1,0,0,0,3,38,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1033,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1038,        checkRowIndex(row);,0,0,0,1,2,0,2,0,1,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1039,"        final T[] out = buildArray(getField(), columns);",1,0,0,1,6,1,3,1,3,7,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1042,        final int iBlock  = row / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1043,        final int iRow    = row - iBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1044,        int outIndex      = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1045,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1046,            final int jWidth     = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1047,            final T[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,57,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1048,"            System.arraycopy(block, iRow * jWidth, out, outIndex, jWidth);",2,1,0,0,2,0,6,0,0,4,62,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1049,            outIndex += jWidth;,2,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1052,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1058,        checkRowIndex(row);,0,0,0,1,2,0,2,0,1,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1059,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1060,        if (array.length != nCols) {,3,1,0,1,3,1,0,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1061,"            throw new MatrixDimensionMismatchException(1, array.length, 1, nCols);",3,0,0,0,2,2,0,1,1,5,70,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1065,        final int iBlock  = row / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1066,        final int iRow    = row - iBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1067,        int outIndex      = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1068,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1069,            final int jWidth     = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1070,            final T[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,57,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1071,"            System.arraycopy(array, outIndex, block, iRow * jWidth, jWidth);",2,1,0,0,2,0,6,0,0,4,64,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1072,            outIndex += jWidth;,2,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1074,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1079,        checkColumnIndex(column);,0,0,0,1,2,0,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1080,"        final T[] out = buildArray(getField(), rows);",1,0,0,1,6,1,3,1,3,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1083,        final int jBlock  = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1084,        final int jColumn = column - jBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1085,        final int jWidth  = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1086,        int outIndex      = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1087,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1088,            final int iHeight = blockHeight(iBlock);,1,0,0,1,2,2,2,0,2,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1089,            final T[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,57,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1090,            for (int i = 0; i < iHeight; ++i) {,4,1,0,1,3,2,0,0,1,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1091,                out[outIndex++] = block[i * jWidth + jColumn];,4,2,1,0,4,0,0,0,2,5,46,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1095,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1101,        checkColumnIndex(column);,0,0,0,1,2,0,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1102,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1103,        if (array.length != nRows) {,3,1,0,1,3,1,0,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1104,"            throw new MatrixDimensionMismatchException(array.length, 1, nRows, 1);",3,0,0,0,2,2,0,1,1,5,70,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1108,        final int jBlock  = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1109,        final int jColumn = column - jBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1110,        final int jWidth  = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1111,        int outIndex      = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1112,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1113,            final int iHeight = blockHeight(iBlock);,1,0,0,1,2,2,2,0,2,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1114,            final T[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,57,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1115,            for (int i = 0; i < iHeight; ++i) {,4,1,0,1,3,2,0,0,1,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1116,                block[i * jWidth + jColumn] = array[outIndex++];,4,2,1,0,4,0,0,0,2,5,48,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1119,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1124,        checkRowIndex(row);,0,0,0,1,2,0,2,0,1,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1125,        checkColumnIndex(column);,0,0,0,1,2,0,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1127,        final int iBlock = row    / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1128,        final int jBlock = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1129,        final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,4,4,0,1,4,2,2,0,2,7,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1132,        return blocks[iBlock * blockColumns + jBlock][k];,3,2,1,0,4,1,0,0,0,5,49,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1138,        checkRowIndex(row);,0,0,0,1,2,0,2,0,1,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1139,        checkColumnIndex(column);,0,0,0,1,2,0,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1141,        final int iBlock = row    / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1142,        final int jBlock = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1143,        final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,4,4,0,1,4,2,2,0,2,7,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1146,        blocks[iBlock * blockColumns + jBlock][k] = value;,4,2,1,0,4,0,0,0,1,5,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1147,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1152,        checkRowIndex(row);,0,0,0,1,2,0,2,0,1,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1153,        checkColumnIndex(column);,0,0,0,1,2,0,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1155,        final int iBlock = row    / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1156,        final int jBlock = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1157,        final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,4,4,0,1,4,2,2,0,2,7,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1159,        final T[] blockIJ = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,59,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1161,        blockIJ[k] = blockIJ[k].add(increment);,0,0,1,1,6,0,2,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1162,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1167,        checkRowIndex(row);,0,0,0,1,2,0,2,0,1,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1168,        checkColumnIndex(column);,0,0,0,1,2,0,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1170,        final int iBlock = row    / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1171,        final int jBlock = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1172,        final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,4,4,0,1,4,2,2,0,2,7,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1174,        final T[] blockIJ = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,59,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1176,        blockIJ[k] = blockIJ[k].multiply(factor);,0,0,1,1,6,0,2,0,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1177,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1182,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1183,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1184,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), nCols, nRows);",3,0,0,1,4,2,1,4,3,7,82,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1187,        int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1188,        for (int iBlock = 0; iBlock < blockColumns; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1189,            for (int jBlock = 0; jBlock < blockRows; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1192,                final T[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,1,0,1,1,6,44,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1193,                final T[] tBlock   = blocks[jBlock * blockColumns + iBlock];,4,2,1,0,4,1,0,1,1,7,60,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1194,                final int      pStart   = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,46,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1195,"                final int      pEnd     = FastMath.min(pStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,69,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1196,                final int      qStart   = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,46,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1197,"                final int      qEnd     = FastMath.min(qStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,66,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1198,                int k = 0;,1,0,0,0,0,1,0,0,0,2,10,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1199,                for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1200,                    final int lInc = pEnd - pStart;,3,1,0,0,0,2,0,0,1,4,31,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1201,                    int l = p - pStart;,3,1,0,0,0,1,0,0,0,3,19,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1202,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1203,                        outBlock[k] = tBlock[l];,0,0,1,0,4,0,0,0,1,3,24,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1204,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1205,                        l+= lInc;,2,0,0,0,0,0,0,0,1,2,9,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1210,                ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1215,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1221,        return rows;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1227,        return columns;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1233,        if (v.length != columns) {,3,1,0,1,3,1,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1234,"            throw new DimensionMismatchException(v.length, columns);",3,0,0,0,2,2,0,1,1,5,56,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1236,"        final T[] out = buildArray(getField(), rows);",1,0,0,1,6,1,3,1,3,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1237,        final T zero = getField().getZero();,1,0,0,1,4,1,2,1,2,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1240,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1241,            final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1242,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,59,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1243,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1244,                final T[] block  = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,58,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1245,                final int      qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,44,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1246,"                final int      qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,67,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1247,                int k = 0;,1,0,0,0,0,1,0,0,0,2,10,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1248,                for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1249,                    T sum = zero;,2,0,0,0,0,0,0,1,0,2,13,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1250,                    int q = qStart;,2,0,0,0,0,1,0,0,0,2,15,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1251,                    while (q < qEnd - 3) {,2,2,0,1,3,1,0,0,0,5,22,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1252,                        sum = sum.,1,0,0,0,0,0,1,0,1,3,10,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1257,                        k += 4;,1,0,0,0,0,0,0,0,1,2,7,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1258,                        q += 4;,1,0,0,0,0,0,0,0,1,2,7,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1260,                    while (q < qEnd) {,2,1,0,1,3,1,0,0,0,5,18,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1261,                        sum = sum.add(block[k++].multiply(v[q++]));,3,0,1,2,8,0,3,0,3,6,43,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1263,                    out[p] = out[p].add(sum);,0,0,1,1,6,0,2,0,1,5,25,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1268,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1275,        if (v.length != rows) {,3,1,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1276,"            throw new DimensionMismatchException(v.length, rows);",3,0,0,0,2,2,0,1,1,5,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1278,"        final T[] out = buildArray(getField(), columns);",1,0,0,1,6,1,3,1,3,7,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1279,        final T zero = getField().getZero();,1,0,0,1,4,1,2,1,2,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1282,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1283,            final int jWidth  = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1284,            final int jWidth2 = jWidth  + jWidth;,3,1,0,0,0,2,0,0,1,4,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1285,            final int jWidth3 = jWidth2 + jWidth;,3,1,0,0,0,2,0,0,1,4,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1286,            final int jWidth4 = jWidth3 + jWidth;,3,1,0,0,0,2,0,0,1,4,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1287,            final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1288,"            final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1289,            for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1290,                final T[] block  = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,58,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1291,                final int      pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,44,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1292,"                final int      pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,64,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1293,                for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1294,                    int k = q - qStart;,3,1,0,0,0,1,0,0,0,3,19,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1295,                    T sum = zero;,2,0,0,0,0,0,0,1,0,2,13,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1296,                    int p = pStart;,2,0,0,0,0,1,0,0,0,2,15,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1297,                    while (p < pEnd - 3) {,2,2,0,1,3,1,0,0,0,5,22,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1298,                        sum = sum.,1,0,0,0,0,0,1,0,1,3,10,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1303,                        k += jWidth4;,2,0,0,0,0,0,0,0,1,2,13,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1304,                        p += 4;,1,0,0,0,0,0,0,0,1,2,7,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1306,                    while (p < pEnd) {,2,1,0,1,3,1,0,0,0,5,18,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1307,                        sum = sum.add(block[k].multiply(v[p++]));,2,0,1,2,8,0,3,0,2,6,41,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1308,                        k += jWidth;,2,0,0,0,0,0,0,0,1,2,12,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1310,                    out[q] = out[q].add(sum);,0,0,1,1,6,0,2,0,1,5,25,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1315,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1321,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1322,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1323,            final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1324,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,59,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1325,            for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1326,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1327,                    final int jWidth = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,38,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1328,                    final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1329,"                    final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,62,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1330,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,57,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1331,                    int k = (p - pStart) * jWidth;,4,2,0,1,2,1,0,0,0,5,30,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1332,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1333,"                        block[k] = visitor.visit(p, q, block[k]);",0,0,1,0,6,0,4,0,1,4,41,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1334,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1339,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1345,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1346,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1347,            final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1348,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,59,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1349,            for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1350,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1351,                    final int jWidth = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,38,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1352,                    final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1353,"                    final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,62,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1354,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,57,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1355,                    int k = (p - pStart) * jWidth;,4,2,0,1,2,1,0,0,0,5,30,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1356,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1357,"                        visitor.visit(p, q, block[k]);",0,0,1,0,4,0,4,0,0,3,30,13,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1358,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1363,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1371,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,5,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1372,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,8,0,0,2,71,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1373,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,7,4,0,1,3,2,0,0,1,6,86,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1374,            final int p0     = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1375,"            final int pStart = FastMath.max(startRow, p0);",1,0,0,0,2,2,4,0,1,5,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1376,"            final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",4,3,0,1,4,2,2,0,1,7,71,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1377,            for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1378,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,7,4,0,1,3,2,0,0,1,6,92,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1379,                    final int jWidth = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,38,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1380,                    final int q0     = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1381,"                    final int qStart = FastMath.max(startColumn, q0);",1,0,0,0,2,2,4,0,1,5,49,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1382,"                    final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",4,3,0,1,4,2,2,0,1,7,74,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1383,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,57,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1384,                    int k = (p - p0) * jWidth + qStart - q0;,6,4,0,1,2,1,0,0,0,5,40,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1385,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1386,"                        block[k] = visitor.visit(p, q, block[k]);",0,0,1,0,6,0,4,0,1,4,41,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1387,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1392,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1400,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,5,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1401,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,8,0,0,2,71,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1402,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,7,4,0,1,3,2,0,0,1,6,86,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1403,            final int p0     = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1404,"            final int pStart = FastMath.max(startRow, p0);",1,0,0,0,2,2,4,0,1,5,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1405,"            final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",4,3,0,1,4,2,2,0,1,7,71,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1406,            for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1407,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,7,4,0,1,3,2,0,0,1,6,92,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1408,                    final int jWidth = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,38,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1409,                    final int q0     = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1410,"                    final int qStart = FastMath.max(startColumn, q0);",1,0,0,0,2,2,4,0,1,5,49,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1411,"                    final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",4,3,0,1,4,2,2,0,1,7,74,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1412,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,57,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1413,                    int k = (p - p0) * jWidth + qStart - q0;,6,4,0,1,2,1,0,0,0,5,40,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1414,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1415,"                        visitor.visit(p, q, block[k]);",0,0,1,0,4,0,4,0,0,3,30,13,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1416,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1421,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1427,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1428,        int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1429,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1430,            final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1431,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,59,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1432,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1433,                final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1434,"                final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,62,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1435,                final T[] block = blocks[blockIndex];,1,0,1,0,4,1,0,1,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1436,                int k = 0;,1,0,0,0,0,1,0,0,0,2,10,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1437,                for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1438,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1439,"                        block[k] = visitor.visit(p, q, block[k]);",0,0,1,0,6,0,4,0,1,4,41,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1440,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1443,                ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1446,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1452,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1453,        int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1454,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1455,            final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1456,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,59,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1457,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1458,                final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1459,"                final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,62,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1460,                final T[] block = blocks[blockIndex];,1,0,1,0,4,1,0,1,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1461,                int k = 0;,1,0,0,0,0,1,0,0,0,2,10,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1462,                for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1463,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1464,"                        visitor.visit(p, q, block[k]);",0,0,1,0,4,0,4,0,0,3,30,13,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1465,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1468,                ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1471,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1479,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,5,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1480,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,8,0,0,2,71,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1481,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,7,4,0,1,3,2,0,0,1,6,86,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1482,            final int p0     = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1483,"            final int pStart = FastMath.max(startRow, p0);",1,0,0,0,2,2,4,0,1,5,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1484,"            final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",4,3,0,1,4,2,2,0,1,7,71,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1485,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,7,4,0,1,3,2,0,0,1,6,92,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1486,                final int jWidth = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,38,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1487,                final int q0     = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1488,"                final int qStart = FastMath.max(startColumn, q0);",1,0,0,0,2,2,4,0,1,5,49,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1489,"                final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",4,3,0,1,4,2,2,0,1,7,74,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1490,                final T[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,57,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1491,                for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1492,                    int k = (p - p0) * jWidth + qStart - q0;,6,4,0,1,2,1,0,0,0,5,40,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1493,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1494,"                        block[k] = visitor.visit(p, q, block[k]);",0,0,1,0,6,0,4,0,1,4,41,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1495,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1500,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1508,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,5,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1509,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,8,0,0,2,71,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1510,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,7,4,0,1,3,2,0,0,1,6,86,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1511,            final int p0     = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1512,"            final int pStart = FastMath.max(startRow, p0);",1,0,0,0,2,2,4,0,1,5,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1513,"            final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",4,3,0,1,4,2,2,0,1,7,71,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1514,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,7,4,0,1,3,2,0,0,1,6,92,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1515,                final int jWidth = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,38,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1516,                final int q0     = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1517,"                final int qStart = FastMath.max(startColumn, q0);",1,0,0,0,2,2,4,0,1,5,49,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1518,"                final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",4,3,0,1,4,2,2,0,1,7,74,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1519,                final T[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,57,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1520,                for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1521,                    int k = (p - p0) * jWidth + qStart - q0;,6,4,0,1,2,1,0,0,0,5,40,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1522,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1523,"                        visitor.visit(p, q, block[k]);",0,0,1,0,4,0,4,0,0,3,30,13,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1524,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1529,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1538,        return (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;,6,4,0,1,2,1,0,0,0,5,79,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,28,1547,        return (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;,6,4,0,1,2,1,0,0,0,5,91,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,45,    public Array2DRowRealMatrix() {},1,0,0,1,4,1,0,0,1,5,32,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,95,"    public Array2DRowRealMatrix(final double[][] d, final boolean copyArray) {",3,0,0,0,7,5,0,0,3,4,74,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,96,        if (copyArray) {,1,0,0,1,3,1,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,97,            copyIn(d);,0,0,0,1,2,0,2,0,1,4,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,99,            if (d == null) {,1,1,0,1,3,1,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,100,                throw new NullArgumentException();,0,0,0,1,2,2,0,1,1,5,34,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,102,            final int nRows = d.length;,3,0,0,0,0,2,0,0,1,3,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,103,            if (nRows == 0) {,1,1,0,1,3,1,0,0,0,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,104,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,2,0,0,1,2,2,0,1,1,6,61,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,106,            final int nCols = d[0].length;,2,0,1,0,2,2,0,0,1,5,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,107,            if (nCols == 0) {,1,1,0,1,3,1,0,0,0,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,108,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,2,0,0,1,2,2,0,1,1,6,64,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,110,            for (int r = 1; r < nRows; r++) {,4,1,0,1,3,2,0,0,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,111,                if (d[r].length != nCols) {,2,1,1,1,5,1,0,0,0,6,27,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,112,"                    throw new DimensionMismatchException(d[r].length, nCols);",2,0,1,0,4,2,0,1,1,6,57,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,115,            data = d;,2,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,117,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,126,    public Array2DRowRealMatrix(final double[] v) {,2,0,0,1,5,3,0,0,2,5,47,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,127,        final int nRows = v.length;,3,0,0,0,0,2,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,128,        data = new double[nRows][1];,1,0,1,0,4,2,0,0,1,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,129,        for (int row = 0; row < nRows; row++) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,130,            data[row][0] = v[row];,0,0,1,0,6,0,0,0,1,3,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,132,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,138,"        return new Array2DRowRealMatrix(rowDimension, columnDimension);",2,0,0,0,2,2,0,1,1,5,63,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,144,"        return new Array2DRowRealMatrix(copyOut(), false);",0,0,0,1,4,2,1,1,3,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,157,"        MatrixUtils.checkAdditionCompatible(this, m);",0,0,0,0,2,1,3,0,0,3,45,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,159,        final int rowCount    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,160,        final int columnCount = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,161,        final double[][] outData = new double[rowCount][columnCount];,1,0,1,0,8,4,0,0,1,5,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,162,        for (int row = 0; row < rowCount; row++) {,4,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,163,            final double[] dataRow    = data[row];,1,0,1,0,4,2,0,0,1,5,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,164,            final double[] mRow       = m.data[row];,3,0,1,0,4,2,0,0,1,5,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,165,            final double[] outDataRow = outData[row];,1,0,1,0,4,2,0,0,1,5,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,166,            for (int col = 0; col < columnCount; col++) {,4,1,0,1,3,2,0,0,1,6,45,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,167,                outDataRow[col] = dataRow[col] + mRow[col];,0,1,1,0,6,0,0,0,1,4,43,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,171,"        return new Array2DRowRealMatrix(outData, false);",1,0,0,0,2,2,0,1,2,5,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,184,"        MatrixUtils.checkSubtractionCompatible(this, m);",0,0,0,0,2,1,3,0,0,3,48,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,186,        final int rowCount    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,187,        final int columnCount = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,188,        final double[][] outData = new double[rowCount][columnCount];,1,0,1,0,8,4,0,0,1,5,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,189,        for (int row = 0; row < rowCount; row++) {,4,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,190,            final double[] dataRow    = data[row];,1,0,1,0,4,2,0,0,1,5,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,191,            final double[] mRow       = m.data[row];,3,0,1,0,4,2,0,0,1,5,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,192,            final double[] outDataRow = outData[row];,1,0,1,0,4,2,0,0,1,5,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,193,            for (int col = 0; col < columnCount; col++) {,4,1,0,1,3,2,0,0,1,6,45,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,194,                outDataRow[col] = dataRow[col] - mRow[col];,0,1,1,0,6,0,0,0,1,4,43,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,198,"        return new Array2DRowRealMatrix(outData, false);",1,0,0,0,2,2,0,1,2,5,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,211,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0,0,0,0,2,1,3,0,0,3,51,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,213,        final int nRows = this.getRowDimension();,1,0,0,1,2,3,1,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,214,        final int nCols = m.getColumnDimension();,1,0,0,1,2,2,2,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,215,        final int nSum = this.getColumnDimension();,1,0,0,1,2,3,1,0,1,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,217,        final double[][] outData = new double[nRows][nCols];,1,0,1,0,8,4,0,0,1,5,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,219,        final double[] mCol = new double[nSum];,1,0,1,0,4,4,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,220,        final double[][] mData = m.data;,3,0,0,0,4,2,0,0,1,4,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,223,        for (int col = 0; col < nCols; col++) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,226,            for (int mRow = 0; mRow < nSum; mRow++) {,4,1,0,1,3,2,0,0,1,6,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,227,                mCol[mRow] = mData[mRow][col];,0,0,1,0,6,0,0,0,1,3,30,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,230,            for (int row = 0; row < nRows; row++) {,4,1,0,1,3,2,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,231,                final double[] dataRow = data[row];,1,0,1,0,4,2,0,0,1,5,35,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,232,                double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,233,                for (int i = 0; i < nSum; i++) {,4,1,0,1,3,2,0,0,1,6,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,234,                    sum += dataRow[i] * mCol[i];,1,1,1,0,4,0,0,0,1,5,28,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,236,                outData[row][col] = sum;,1,0,1,0,4,0,0,0,1,4,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,240,"        return new Array2DRowRealMatrix(outData, false);",1,0,0,0,2,2,0,1,2,5,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,246,        return copyOut();,0,0,0,1,2,1,1,0,1,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,264,"                throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET, row);",3,0,0,0,2,2,0,1,1,5,90,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,267,"                throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET, column);",3,0,0,0,2,2,0,1,1,5,96,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,272,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,2,0,0,1,2,2,0,1,1,6,61,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,277,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,2,0,0,1,2,2,0,1,1,6,64,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,282,"                    throw new DimensionMismatchException(subMatrix[i].length, nCols);",2,0,1,0,4,2,0,1,1,6,65,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,287,"            super.setSubMatrix(subMatrix, row, column);",4,0,0,0,2,1,0,0,0,3,43,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,309,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,0,2,1,4,0,0,3,48,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,310,        data[row][column] += increment;,1,0,1,0,4,0,0,0,1,4,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,311,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,316,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,0,2,1,4,0,0,3,48,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,317,        data[row][column] *= factor;,1,0,1,0,4,0,0,0,1,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,318,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,335,        final int nRows = this.getRowDimension();,1,0,0,1,2,3,1,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,336,        final int nCols = this.getColumnDimension();,1,0,0,1,2,3,1,0,1,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,337,        if (v.length != nCols) {,3,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,338,"            throw new DimensionMismatchException(v.length, nCols);",3,0,0,0,2,2,0,1,1,5,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,340,        final double[] out = new double[nRows];,1,0,1,0,4,4,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,341,        for (int row = 0; row < nRows; row++) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,342,            final double[] dataRow = data[row];,1,0,1,0,4,2,0,0,1,5,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,343,            double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,344,            for (int i = 0; i < nCols; i++) {,4,1,0,1,3,2,0,0,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,345,                sum += dataRow[i] * v[i];,1,1,1,0,4,0,0,0,1,5,25,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,347,            out[row] = sum;,1,0,1,0,2,0,0,0,1,4,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,349,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,355,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,356,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,357,        if (v.length != nRows) {,3,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,358,"            throw new DimensionMismatchException(v.length, nRows);",3,0,0,0,2,2,0,1,1,5,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,361,        final double[] out = new double[nCols];,1,0,1,0,4,4,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,362,        for (int col = 0; col < nCols; ++col) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,363,            double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,364,            for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,365,                sum += data[i][col] * v[i];,1,1,1,0,6,0,0,0,1,5,27,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,367,            out[col] = sum;,1,0,1,0,2,0,0,0,1,4,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,370,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,377,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,378,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,379,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,380,        for (int i = 0; i < rows; ++i) {,4,1,0,1,3,2,0,0,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,381,            final double[] rowI = data[i];,1,0,1,0,4,2,0,0,1,5,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,382,            for (int j = 0; j < columns; ++j) {,4,1,0,1,3,2,0,0,1,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,383,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0,0,1,0,6,0,4,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,386,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,392,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,393,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,394,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,395,        for (int i = 0; i < rows; ++i) {,4,1,0,1,3,2,0,0,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,396,            final double[] rowI = data[i];,1,0,1,0,4,2,0,0,1,5,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,397,            for (int j = 0; j < columns; ++j) {,4,1,0,1,3,2,0,0,1,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,398,"                visitor.visit(i, j, rowI[j]);",0,0,1,0,4,0,4,0,0,3,29,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,401,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,409,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,410,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,412,        for (int i = startRow; i <= endRow; ++i) {,5,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,413,            final double[] rowI = data[i];,1,0,1,0,4,2,0,0,1,5,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,414,            for (int j = startColumn; j <= endColumn; ++j) {,5,1,0,1,3,2,0,0,1,6,48,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,415,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0,0,1,0,6,0,4,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,418,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,426,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,427,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,429,        for (int i = startRow; i <= endRow; ++i) {,5,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,430,            final double[] rowI = data[i];,1,0,1,0,4,2,0,0,1,5,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,431,            for (int j = startColumn; j <= endColumn; ++j) {,5,1,0,1,3,2,0,0,1,6,48,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,432,"                visitor.visit(i, j, rowI[j]);",0,0,1,0,4,0,4,0,0,3,29,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,435,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,441,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,442,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,443,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,444,        for (int j = 0; j < columns; ++j) {,4,1,0,1,3,2,0,0,1,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,445,            for (int i = 0; i < rows; ++i) {,4,1,0,1,3,2,0,0,1,6,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,446,                final double[] rowI = data[i];,1,0,1,0,4,2,0,0,1,5,30,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,447,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0,0,1,0,6,0,4,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,450,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,456,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,457,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,458,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,459,        for (int j = 0; j < columns; ++j) {,4,1,0,1,3,2,0,0,1,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,460,            for (int i = 0; i < rows; ++i) {,4,1,0,1,3,2,0,0,1,6,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,461,"                visitor.visit(i, j, data[i][j]);",0,0,1,0,6,0,4,0,0,3,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,464,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,472,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,473,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,475,        for (int j = startColumn; j <= endColumn; ++j) {,5,1,0,1,3,2,0,0,1,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,476,            for (int i = startRow; i <= endRow; ++i) {,5,1,0,1,3,2,0,0,1,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,477,                final double[] rowI = data[i];,1,0,1,0,4,2,0,0,1,5,30,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,478,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0,0,1,0,6,0,4,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,481,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,489,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,490,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,492,        for (int j = startColumn; j <= endColumn; ++j) {,5,1,0,1,3,2,0,0,1,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,493,            for (int i = startRow; i <= endRow; ++i) {,5,1,0,1,3,2,0,0,1,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,494,"                visitor.visit(i, j, data[i][j]);",0,0,1,0,6,0,4,0,0,3,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,497,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,506,        final int nRows = this.getRowDimension();,1,0,0,1,2,3,1,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,507,        final double[][] out = new double[nRows][this.getColumnDimension()];,1,0,1,1,10,5,1,0,1,7,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,509,        for (int i = 0; i < nRows; i++) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,510,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",1,0,1,0,8,0,2,0,0,4,56,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,512,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,63,            throw new NotStrictlyPositiveException(rowDimension);,1,0,0,1,2,2,0,1,1,6,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,66,            throw new NotStrictlyPositiveException(columnDimension);,1,0,0,1,2,2,0,1,1,6,56,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,79,"        MatrixUtils.checkAdditionCompatible(this, m);",0,0,0,0,2,1,3,0,0,3,45,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,81,        final int rowCount    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,82,        final int columnCount = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,83,"        final RealMatrix out = createMatrix(rowCount, columnCount);",1,0,0,0,2,1,3,1,2,6,59,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,84,        for (int row = 0; row < rowCount; ++row) {,4,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,85,            for (int col = 0; col < columnCount; ++col) {,4,1,0,1,3,2,0,0,1,6,45,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,86,"                out.setEntry(row, col, getEntry(row, col) + m.getEntry(row, col));",0,1,0,0,6,0,11,0,1,4,66,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,90,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,96,"        MatrixUtils.checkSubtractionCompatible(this, m);",0,0,0,0,2,1,3,0,0,3,48,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,98,        final int rowCount    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,99,        final int columnCount = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,100,"        final RealMatrix out = createMatrix(rowCount, columnCount);",1,0,0,0,2,1,3,1,2,6,59,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,101,        for (int row = 0; row < rowCount; ++row) {,4,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,102,            for (int col = 0; col < columnCount; ++col) {,4,1,0,1,3,2,0,0,1,6,45,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,103,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));",0,1,0,0,6,0,11,0,1,4,66,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,107,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,112,        final int rowCount    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,113,        final int columnCount = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,114,"        final RealMatrix out = createMatrix(rowCount, columnCount);",1,0,0,0,2,1,3,1,2,6,59,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,115,        for (int row = 0; row < rowCount; ++row) {,4,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,116,            for (int col = 0; col < columnCount; ++col) {,4,1,0,1,3,2,0,0,1,6,45,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,117,"                out.setEntry(row, col, getEntry(row, col) + d);",1,1,0,0,4,0,7,0,1,5,47,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,121,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,126,        final int rowCount    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,127,        final int columnCount = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,128,"        final RealMatrix out = createMatrix(rowCount, columnCount);",1,0,0,0,2,1,3,1,2,6,59,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,129,        for (int row = 0; row < rowCount; ++row) {,4,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,130,            for (int col = 0; col < columnCount; ++col) {,4,1,0,1,3,2,0,0,1,6,45,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,131,"                out.setEntry(row, col, getEntry(row, col) * d);",1,1,0,0,4,0,7,0,1,5,47,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,135,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,141,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0,0,0,0,2,1,3,0,0,3,51,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,143,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,144,        final int nCols = m.getColumnDimension();,1,0,0,1,2,2,2,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,145,        final int nSum  = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,146,"        final RealMatrix out = createMatrix(nRows, nCols);",1,0,0,0,2,1,3,1,2,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,147,        for (int row = 0; row < nRows; ++row) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,148,            for (int col = 0; col < nCols; ++col) {,4,1,0,1,3,2,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,149,                double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,150,                for (int i = 0; i < nSum; ++i) {,4,1,0,1,3,2,0,0,1,6,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,151,"                    sum += getEntry(row, i) * m.getEntry(i, col);",1,1,0,0,4,0,7,0,2,5,45,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,153,"                out.setEntry(row, col, sum);",0,0,0,0,2,0,5,0,0,2,28,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,157,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,162,        return m.multiply(this);,0,0,0,1,2,2,2,0,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,167,        if (p < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,168,"            throw new IllegalArgumentException(""p must be >= 0"");",0,0,0,1,2,2,0,1,2,5,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,171,        if (!isSquare()) {,0,0,0,2,5,1,1,0,2,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,172,"            throw new NonSquareMatrixException(getRowDimension(), getColumnDimension());",0,0,0,1,6,2,2,1,3,6,76,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,175,        if (p == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,176,            return MatrixUtils.createRealIdentityMatrix(this.getRowDimension());,0,0,0,2,4,2,3,0,0,4,68,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,179,        if (p == 1) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,180,            return this.copy();,0,0,0,1,2,2,1,0,0,4,19,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,183,        final int power = p - 1;,2,1,0,0,0,2,0,0,1,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,192,        final char[] binaryRepresentation = Integer.toBinaryString(power).toCharArray();,1,0,0,1,6,2,4,0,1,6,80,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,193,        final ArrayList<Integer> nonZeroPositions = new ArrayList<Integer>();,1,0,0,1,2,2,0,4,2,6,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,194,        int maxI = -1;,1,0,0,0,0,1,0,0,1,3,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,196,        for (int i = 0; i < binaryRepresentation.length; ++i) {,5,1,0,1,3,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,197,            if (binaryRepresentation[i] == '1') {,0,1,1,1,5,1,0,0,1,6,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,198,                final int pos = binaryRepresentation.length - i - 1;,4,1,0,0,0,2,0,0,1,4,52,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,199,                nonZeroPositions.add(pos);,0,0,0,1,2,0,3,0,0,3,26,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,202,                if (maxI == -1) {,1,1,0,1,3,1,0,0,1,6,17,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,203,                    maxI = pos;,2,0,0,0,0,0,0,0,1,2,11,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,208,        RealMatrix[] results = new RealMatrix[maxI + 1];,2,1,0,0,4,1,0,2,0,5,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,209,        results[0] = this.copy();,0,0,1,1,4,1,1,0,1,6,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,211,        for (int i = 1; i <= maxI; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,212,            results[i] = results[i-1].multiply(results[i-1]);,2,2,1,1,8,0,1,0,1,7,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,215,        RealMatrix result = this.copy();,1,0,0,1,2,1,1,1,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,217,        for (Integer i : nonZeroPositions) {,2,0,0,1,3,1,0,1,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,218,            result = result.multiply(results[i]);,1,0,1,1,4,0,2,0,1,6,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,219,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,221,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,226,        final double[][] data = new double[getRowDimension()][getColumnDimension()];,1,0,0,1,12,4,2,0,3,6,76,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,228,        for (int i = 0; i < data.length; ++i) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,229,            final double[] dataI = data[i];,1,0,1,0,4,2,0,0,1,5,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,230,            for (int j = 0; j < dataI.length; ++j) {,5,1,0,1,3,2,0,0,1,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,231,"                dataI[j] = getEntry(i, j);",0,0,1,0,4,0,3,0,2,4,26,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,235,        return data;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,240,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,2,1,1,2,6,60,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,278,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,2,1,1,2,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,305,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,307,        final RealMatrix subMatrix =,1,0,0,0,0,1,0,1,1,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,309,        for (int i = startRow; i <= endRow; ++i) {,5,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,310,            for (int j = startColumn; j <= endColumn; ++j) {,5,1,0,1,3,2,0,0,1,6,48,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,311,"                subMatrix.setEntry(i - startRow, j - startColumn, getEntry(i, j));",4,2,0,0,4,0,5,0,1,5,66,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,315,        return subMatrix;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,321,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);",0,0,0,0,2,1,4,0,0,3,69,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,324,        final RealMatrix subMatrix =,1,0,0,0,0,1,0,1,1,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,326,        subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {,0,0,0,1,4,1,2,1,1,6,71,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,336,        return subMatrix;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,344,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,345,        final int rowsCount    = endRow + 1 - startRow;,3,2,0,0,0,2,0,0,1,4,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,346,        final int columnsCount = endColumn + 1 - startColumn;,3,2,0,0,0,2,0,0,1,4,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,347,        if ((destination.length < rowsCount) || (destination[0].length < columnsCount)) {,5,3,1,2,9,1,0,0,0,6,81,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,348,"            throw new MatrixDimensionMismatchException(destination.length, destination[0].length,",3,0,1,0,3,2,0,1,1,6,85,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,353,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,1,1,1,2,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,377,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,382,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);",0,0,0,0,2,1,4,0,0,3,69,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,383,        if ((destination.length < selectedRows.length) ||,4,2,0,1,3,1,0,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,385,"            throw new MatrixDimensionMismatchException(destination.length, destination[0].length,",3,0,1,0,3,2,0,1,1,6,85,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,390,        for (int i = 0; i < selectedRows.length; i++) {,5,1,0,1,3,2,0,0,1,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,391,            final double[] destinationI = destination[i];,1,0,1,0,4,2,0,0,1,5,45,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,392,            for (int j = 0; j < selectedColumns.length; j++) {,5,1,0,1,3,2,0,0,1,6,50,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,393,"                destinationI[j] = getEntry(selectedRows[i], selectedColumns[j]);",0,0,1,0,8,0,1,0,2,4,64,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,396,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,401,        MathUtils.checkNotNull(subMatrix);,0,0,0,1,2,0,3,0,0,3,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,402,        final int nRows = subMatrix.length;,3,0,0,0,0,2,0,0,1,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,403,        if (nRows == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,404,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,2,0,0,1,2,2,0,1,1,6,61,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,407,        final int nCols = subMatrix[0].length;,2,0,1,0,2,2,0,0,1,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,408,        if (nCols == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,409,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,2,0,0,1,2,2,0,1,1,6,64,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,412,        for (int r = 1; r < nRows; ++r) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,413,            if (subMatrix[r].length != nCols) {,2,1,1,1,5,1,0,0,0,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,414,"                throw new DimensionMismatchException(nCols, subMatrix[r].length);",2,0,1,0,4,2,0,1,1,6,65,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,418,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,0,2,1,3,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,419,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,0,2,1,3,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,420,"        MatrixUtils.checkRowIndex(this, nRows + row - 1);",2,2,0,0,2,1,2,0,0,5,49,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,421,"        MatrixUtils.checkColumnIndex(this, nCols + column - 1);",2,2,0,0,2,1,2,0,0,5,55,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,423,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,424,            for (int j = 0; j < nCols; ++j) {,4,1,0,1,3,2,0,0,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,425,"                setEntry(row + i, column + j, subMatrix[i][j]);",4,2,1,0,6,0,1,0,1,6,47,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,428,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,432,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,0,2,1,3,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,433,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,434,"        final RealMatrix out = createMatrix(1, nCols);",1,0,0,0,2,1,2,1,2,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,435,        for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,436,"            out.setEntry(0, i, getEntry(row, i));",0,0,0,0,4,0,6,0,1,3,37,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,439,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,444,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,0,2,1,3,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,445,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,446,        if ((matrix.getRowDimension() != 1) ||,0,2,0,2,5,1,2,0,0,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,448,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0,0,0,1,3,2,2,1,1,6,68,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,452,        for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,453,"            setEntry(row, i, matrix.getEntry(0, i));",0,0,0,0,4,0,6,0,1,3,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,455,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,459,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,0,2,1,3,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,460,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,461,"        final RealMatrix out = createMatrix(nRows, 1);",1,0,0,0,2,1,2,1,2,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,462,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,463,"            out.setEntry(i, 0, getEntry(i, column));",0,0,0,0,4,0,6,0,1,3,40,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,466,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,471,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,0,2,1,3,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,472,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,473,        if ((matrix.getRowDimension() != nRows) ||,1,2,0,2,5,1,2,0,0,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,475,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0,0,0,1,3,2,2,1,1,6,68,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,479,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,480,"            setEntry(i, column, matrix.getEntry(i, 0));",0,0,0,0,4,0,6,0,1,3,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,482,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,494,"            throw new MatrixDimensionMismatchException(1, vector.getDimension(),",0,0,0,1,3,2,2,1,1,6,68,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,504,"        return new ArrayRealVector(getColumn(column), false);",0,0,0,1,4,2,2,1,3,6,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,509,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,0,2,1,3,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,510,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,511,        if (vector.getDimension() != nRows) {,1,1,0,2,5,1,2,0,0,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,512,"            throw new MatrixDimensionMismatchException(vector.getDimension(), 1,",0,0,0,1,3,2,2,1,1,6,68,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,515,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,516,"            setEntry(i, column, vector.getEntry(i));",0,0,0,1,4,0,6,0,1,4,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,518,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,534,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,0,2,1,3,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,535,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,536,        if (array.length != nCols) {,3,1,0,1,3,1,0,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,537,"            throw new MatrixDimensionMismatchException(1, array.length, 1, nCols);",3,0,0,0,2,2,0,1,1,5,70,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,539,        for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,540,"            setEntry(row, i, array[i]);",0,0,1,0,4,0,3,0,1,4,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,542,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,546,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,0,2,1,3,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,547,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,548,        final double[] out = new double[nRows];,1,0,1,0,4,4,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,549,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,550,"            out[i] = getEntry(i, column);",0,0,1,0,4,0,3,0,2,4,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,553,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,558,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,0,2,1,3,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,559,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,560,        if (array.length != nRows) {,3,1,0,1,3,1,0,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,561,"            throw new MatrixDimensionMismatchException(array.length, 1, nRows, 1);",3,0,0,0,2,2,0,1,1,5,70,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,563,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,564,"            setEntry(i, column, array[i]);",0,0,1,0,4,0,3,0,1,4,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,566,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,576,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,0,2,1,4,0,0,3,48,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,577,"        setEntry(row, column, getEntry(row, column) + increment);",1,1,0,0,4,0,6,0,2,5,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,578,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,582,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,0,2,1,4,0,0,3,48,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,583,"        setEntry(row, column, getEntry(row, column) * factor);",1,1,0,0,4,0,6,0,2,5,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,584,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,588,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,589,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,590,"        final RealMatrix out = createMatrix(nCols, nRows);",1,0,0,0,2,1,3,1,2,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,591,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,1,1,1,2,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,601,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,606,        return getColumnDimension() == getRowDimension();,0,1,0,1,4,1,2,0,2,6,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,629,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,630,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,631,        if (nRows != nCols) {,2,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,632,"            throw new NonSquareMatrixException(nRows, nCols);",2,0,0,0,2,2,0,1,1,5,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,634,        double trace = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,635,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,636,"            trace += getEntry(i, i);",1,0,0,0,2,0,3,0,2,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,638,        return trace;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,643,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,644,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,645,        if (v.length != nCols) {,3,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,646,"            throw new DimensionMismatchException(v.length, nCols);",3,0,0,0,2,2,0,1,1,5,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,649,        final double[] out = new double[nRows];,1,0,1,0,4,4,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,650,        for (int row = 0; row < nRows; ++row) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,651,            double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,652,            for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,653,"                sum += getEntry(row, i) * v[i];",1,1,1,0,4,0,3,0,2,6,31,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,655,            out[row] = sum;,1,0,1,0,2,0,0,0,1,4,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,658,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,665,"            return new ArrayRealVector(operate(((ArrayRealVector) v).getDataRef()), false);",1,0,0,3,10,2,2,2,3,7,79,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,666,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,667,            final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,668,            final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,669,            if (v.getDimension() != nCols) {,1,1,0,2,5,1,2,0,0,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,670,"                throw new DimensionMismatchException(v.getDimension(), nCols);",1,0,0,1,4,2,2,1,1,7,62,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,673,            final double[] out = new double[nRows];,1,0,1,0,4,4,0,0,1,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,674,            for (int row = 0; row < nRows; ++row) {,4,1,0,1,3,2,0,0,1,6,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,675,                double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,676,                for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,677,"                    sum += getEntry(row, i) * v.getEntry(i);",1,1,0,1,4,0,6,0,2,6,40,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,679,                out[row] = sum;,1,0,1,0,2,0,0,0,1,4,15,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,682,"            return new ArrayRealVector(out, false);",1,0,0,0,2,2,0,1,2,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,689,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,690,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,691,        if (v.length != nRows) {,3,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,692,"            throw new DimensionMismatchException(v.length, nRows);",3,0,0,0,2,2,0,1,1,5,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,695,        final double[] out = new double[nCols];,1,0,1,0,4,4,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,696,        for (int col = 0; col < nCols; ++col) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,697,            double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,698,            for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,699,"                sum += getEntry(i, col) * v[i];",1,1,1,0,4,0,3,0,2,6,31,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,701,            out[col] = sum;,1,0,1,0,2,0,0,0,1,4,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,704,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,710,"            return new ArrayRealVector(preMultiply(((ArrayRealVector) v).getDataRef()), false);",1,0,0,3,10,2,2,2,3,7,83,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,711,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,713,            final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,714,            final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,715,            if (v.getDimension() != nRows) {,1,1,0,2,5,1,2,0,0,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,716,"                throw new DimensionMismatchException(v.getDimension(), nRows);",1,0,0,1,4,2,2,1,1,7,62,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,719,            final double[] out = new double[nCols];,1,0,1,0,4,4,0,0,1,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,720,            for (int col = 0; col < nCols; ++col) {,4,1,0,1,3,2,0,0,1,6,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,721,                double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,722,                for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,723,"                    sum += getEntry(i, col) * v.getEntry(i);",1,1,0,1,4,0,6,0,2,6,40,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,725,                out[col] = sum;,1,0,1,0,2,0,0,0,1,4,15,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,728,"            return new ArrayRealVector(out, false);",1,0,0,0,2,2,0,1,2,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,734,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,735,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,736,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,737,        for (int row = 0; row < rows; ++row) {,4,1,0,1,3,2,0,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,738,            for (int column = 0; column < columns; ++column) {,4,1,0,1,3,2,0,0,1,6,50,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,739,"                final double oldValue = getEntry(row, column);",1,0,0,0,2,2,3,0,2,5,46,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,740,"                final double newValue = visitor.visit(row, column, oldValue);",1,0,0,0,2,2,5,0,1,5,61,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,741,"                setEntry(row, column, newValue);",0,0,0,0,2,0,4,0,1,3,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,744,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,749,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,750,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,751,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,752,        for (int row = 0; row < rows; ++row) {,4,1,0,1,3,2,0,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,753,            for (int column = 0; column < columns; ++column) {,4,1,0,1,3,2,0,0,1,6,50,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,754,"                visitor.visit(row, column, getEntry(row, column));",0,0,0,0,4,0,7,0,1,3,50,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,757,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,764,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,765,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,767,        for (int row = startRow; row <= endRow; ++row) {,5,1,0,1,3,2,0,0,1,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,768,            for (int column = startColumn; column <= endColumn; ++column) {,5,1,0,1,3,2,0,0,1,6,63,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,769,"                final double oldValue = getEntry(row, column);",1,0,0,0,2,2,3,0,2,5,46,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,770,"                final double newValue = visitor.visit(row, column, oldValue);",1,0,0,0,2,2,5,0,1,5,61,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,771,"                setEntry(row, column, newValue);",0,0,0,0,2,0,4,0,1,3,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,774,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,781,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,782,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,784,        for (int row = startRow; row <= endRow; ++row) {,5,1,0,1,3,2,0,0,1,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,785,            for (int column = startColumn; column <= endColumn; ++column) {,5,1,0,1,3,2,0,0,1,6,63,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,786,"                visitor.visit(row, column, getEntry(row, column));",0,0,0,0,4,0,7,0,1,3,50,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,789,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,794,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,795,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,796,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,797,        for (int column = 0; column < columns; ++column) {,4,1,0,1,3,2,0,0,1,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,798,            for (int row = 0; row < rows; ++row) {,4,1,0,1,3,2,0,0,1,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,799,"                final double oldValue = getEntry(row, column);",1,0,0,0,2,2,3,0,2,5,46,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,800,"                final double newValue = visitor.visit(row, column, oldValue);",1,0,0,0,2,2,5,0,1,5,61,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,801,"                setEntry(row, column, newValue);",0,0,0,0,2,0,4,0,1,3,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,804,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,809,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,810,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,811,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,812,        for (int column = 0; column < columns; ++column) {,4,1,0,1,3,2,0,0,1,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,813,            for (int row = 0; row < rows; ++row) {,4,1,0,1,3,2,0,0,1,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,814,"                visitor.visit(row, column, getEntry(row, column));",0,0,0,0,4,0,7,0,1,3,50,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,817,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,824,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,825,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,827,        for (int column = startColumn; column <= endColumn; ++column) {,5,1,0,1,3,2,0,0,1,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,828,            for (int row = startRow; row <= endRow; ++row) {,5,1,0,1,3,2,0,0,1,6,48,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,829,"                final double oldValue = getEntry(row, column);",1,0,0,0,2,2,3,0,2,5,46,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,830,"                final double newValue = visitor.visit(row, column, oldValue);",1,0,0,0,2,2,5,0,1,5,61,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,831,"                setEntry(row, column, newValue);",0,0,0,0,2,0,4,0,1,3,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,834,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,841,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,842,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,844,        for (int column = startColumn; column <= endColumn; ++column) {,5,1,0,1,3,2,0,0,1,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,845,            for (int row = startRow; row <= endRow; ++row) {,5,1,0,1,3,2,0,0,1,6,48,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,846,"                visitor.visit(row, column, getEntry(row, column));",0,0,0,0,4,0,7,0,1,3,50,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,849,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,854,        return walkInRowOrder(visitor);,0,0,0,1,2,1,2,0,1,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,859,        return walkInRowOrder(visitor);,0,0,0,1,2,1,2,0,1,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,866,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,1,4,73,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,873,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,1,4,73,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,882,        final StringBuilder res = new StringBuilder();,1,0,0,1,2,2,0,2,2,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,883,        String fullClassName = getClass().getName();,1,0,0,1,4,0,2,1,1,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,884,        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);,1,1,0,2,4,0,4,1,1,7,84,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,885,        res.append(shortClassName);,0,0,0,1,2,0,3,0,0,3,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,886,        res.append(DEFAULT_FORMAT.format(this));,0,0,0,2,4,1,4,0,0,4,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,887,        return res.toString();,0,0,0,1,2,1,2,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,900,        if (object == this ) {,1,1,0,1,3,2,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,901,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,903,        if (object instanceof RealMatrix == false) {,1,1,0,1,3,2,0,1,1,7,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,904,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,906,        RealMatrix m = (RealMatrix) object;,2,0,0,1,2,0,0,2,0,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,907,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,908,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,909,        if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {,2,3,0,2,7,1,4,0,0,6,70,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,910,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,912,        for (int row = 0; row < nRows; ++row) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,913,            for (int col = 0; col < nCols; ++col) {,4,1,0,1,3,2,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,914,"                if (getEntry(row, col) != m.getEntry(row, col)) {",0,1,0,0,7,1,7,0,1,5,49,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,915,                    return false;,0,0,0,0,0,1,0,0,1,2,13,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,919,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,929,        int ret = 7;,1,0,0,0,0,1,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,930,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,931,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,932,        ret = ret * 31 + nRows;,3,2,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,933,        ret = ret * 31 + nCols;,3,2,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,934,        for (int row = 0; row < nRows; ++row) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,935,            for (int col = 0; col < nCols; ++col) {,4,1,0,1,3,2,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,936,               ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) *,4,8,0,2,6,0,0,0,1,5,48,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,940,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealLinearOperator,28,94,        throw new UnsupportedOperationException();,0,0,0,1,2,2,0,1,1,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealLinearOperator,28,107,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,94,"        super(rows, columns);",2,0,0,0,2,1,0,0,1,4,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,95,        this.rows = rows;,2,0,0,0,0,1,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,96,        this.columns = columns;,2,0,0,0,0,1,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,99,        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;,4,3,0,1,2,0,0,0,1,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,100,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,4,3,0,1,2,0,0,0,1,5,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,103,"        blocks = createBlocksLayout(rows, columns);",1,0,0,0,2,0,3,0,2,4,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,104,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,120,"        this(rawData.length, rawData[0].length, toBlocksLayout(rawData), false);",3,0,1,1,6,1,2,0,2,7,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,121,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,139,"        super(rows, columns);",2,0,0,0,2,1,0,0,1,4,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,140,        this.rows = rows;,2,0,0,0,0,1,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,141,        this.columns = columns;,2,0,0,0,0,1,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,144,        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;,4,3,0,1,2,0,0,0,1,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,145,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,4,3,0,1,2,0,0,0,1,5,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,147,        if (copyArray) {,1,0,0,1,3,1,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,149,            blocks = new double[blockRows * blockColumns][];,3,1,0,0,4,2,0,0,1,5,48,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,152,            blocks = blockData;,2,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,155,        int index = 0;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,156,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,157,            final int iHeight = blockHeight(iBlock);,1,0,0,1,2,2,2,0,2,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,158,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++index) {",5,1,0,0,3,2,0,0,2,5,64,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,159,                if (blockData[index].length != iHeight * blockWidth(jBlock)) {,2,2,1,2,7,1,2,0,1,8,62,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,160,"                    throw new DimensionMismatchException(blockData[index].length,",1,0,1,0,3,2,0,1,1,6,61,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,163,                if (copyArray) {,1,0,0,1,3,1,0,0,0,4,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,164,                    blocks[index] = blockData[index].clone();,0,0,1,1,6,0,1,0,1,5,41,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,168,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,192,        final int rows = rawData.length;,3,0,0,0,0,2,0,0,1,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,193,        final int columns = rawData[0].length;,2,0,1,0,2,2,0,0,1,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,194,        final int blockRows = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,4,3,0,1,2,2,0,0,1,6,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,195,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,4,3,0,1,2,2,0,0,1,6,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,198,        for (int i = 0; i < rawData.length; ++i) {,5,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,199,            final int length = rawData[i].length;,2,0,1,0,2,2,0,0,1,5,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,200,            if (length != columns) {,2,1,0,1,3,1,0,0,0,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,201,"                throw new DimensionMismatchException(columns, length);",2,0,0,0,2,2,0,1,1,5,54,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,206,        final double[][] blocks = new double[blockRows * blockColumns][];,3,1,0,0,8,4,0,0,1,5,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,207,        int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,208,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,209,            final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,210,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,57,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,211,            final int iHeight = pEnd - pStart;,3,1,0,0,0,2,0,0,1,4,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,212,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,213,                final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,214,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,60,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,215,                final int jWidth = qEnd - qStart;,3,1,0,0,0,2,0,0,1,4,33,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,218,                final double[] block = new double[iHeight * jWidth];,3,1,0,0,4,4,0,0,1,5,52,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,219,                blocks[blockIndex] = block;,1,0,1,0,2,0,0,0,1,4,27,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,222,                int index = 0;,1,0,0,0,0,1,0,0,0,2,14,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,223,                for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,224,"                    System.arraycopy(rawData[p], qStart, block, index, jWidth);",0,0,1,0,4,0,6,0,0,3,59,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,225,                    index += jWidth;,2,0,0,0,0,0,0,0,1,2,16,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,227,                ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,231,        return blocks;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,247,        final int blockRows = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,4,3,0,1,2,2,0,0,1,6,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,248,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,4,3,0,1,2,2,0,0,1,6,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,250,        final double[][] blocks = new double[blockRows * blockColumns][];,3,1,0,0,8,4,0,0,1,5,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,251,        int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,252,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,253,            final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,254,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,57,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,255,            final int iHeight = pEnd - pStart;,3,1,0,0,0,2,0,0,1,4,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,256,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,257,                final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,258,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,60,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,259,                final int jWidth = qEnd - qStart;,3,1,0,0,0,2,0,0,1,4,33,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,260,                blocks[blockIndex] = new double[iHeight * jWidth];,2,1,1,0,4,2,0,0,1,6,50,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,261,                ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,265,        return blocks;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,271,"        return new BlockRealMatrix(rowDimension, columnDimension);",2,0,0,0,2,2,0,1,1,5,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,278,"        BlockRealMatrix copied = new BlockRealMatrix(rows, columns);",3,0,0,0,2,1,0,2,1,5,60,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,281,        for (int i = 0; i < blocks.length; ++i) {,5,1,0,1,3,2,0,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,282,"            System.arraycopy(blocks[i], 0, copied.blocks[i], 0, blocks[i].length);",3,0,1,0,8,0,2,0,0,4,70,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,285,        return copied;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,292,            return add((BlockRealMatrix) m);,1,0,0,2,4,1,1,1,1,7,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,293,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,295,"            MatrixUtils.checkAdditionCompatible(this, m);",0,0,0,0,2,1,3,0,0,3,45,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,297,"            final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",3,0,0,0,2,2,0,2,2,5,63,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,300,            int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,301,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,5,1,0,1,3,2,0,0,1,6,56,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,302,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,5,1,0,1,3,2,0,0,1,6,59,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,305,                    final double[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,2,0,0,1,5,49,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,306,                    final double[] tBlock   = blocks[blockIndex];,1,0,1,0,4,2,0,0,1,5,45,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,307,                    final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,308,"                    final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,57,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,309,                    final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,310,"                    final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,60,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,311,                    int k = 0;,1,0,0,0,0,1,0,0,0,2,10,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,312,                    for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,313,                        for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,13,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,314,"                            outBlock[k] = tBlock[k] + m.getEntry(p, q);",0,1,1,0,6,0,4,0,1,5,43,15,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,315,                            ++k;,1,0,0,0,0,0,0,0,1,2,4,15,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,319,                    ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,323,            return out;,1,0,0,0,0,1,0,0,0,2,11,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,337,"        MatrixUtils.checkAdditionCompatible(this, m);",0,0,0,0,2,1,3,0,0,3,45,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,339,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",3,0,0,0,2,2,0,2,2,5,63,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,342,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,6,1,0,1,3,2,0,0,1,6,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,343,            final double[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,2,0,0,1,5,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,344,            final double[] tBlock = blocks[blockIndex];,1,0,1,0,4,2,0,0,1,5,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,345,            final double[] mBlock = m.blocks[blockIndex];,3,0,1,0,4,2,0,0,1,5,45,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,346,            for (int k = 0; k < outBlock.length; ++k) {,5,1,0,1,3,2,0,0,1,6,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,347,                outBlock[k] = tBlock[k] + mBlock[k];,0,1,1,0,6,0,0,0,1,4,36,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,351,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,358,            return subtract((BlockRealMatrix) m);,1,0,0,2,4,1,1,1,1,7,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,359,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,361,"            MatrixUtils.checkSubtractionCompatible(this, m);",0,0,0,0,2,1,3,0,0,3,48,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,363,"            final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",3,0,0,0,2,2,0,2,2,5,63,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,366,            int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,367,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,5,1,0,1,3,2,0,0,1,6,56,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,368,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,5,1,0,1,3,2,0,0,1,6,59,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,371,                    final double[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,2,0,0,1,5,49,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,372,                    final double[] tBlock = blocks[blockIndex];,1,0,1,0,4,2,0,0,1,5,43,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,373,                    final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,374,"                    final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,57,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,375,                    final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,376,"                    final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,60,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,377,                    int k = 0;,1,0,0,0,0,1,0,0,0,2,10,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,378,                    for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,379,                        for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,13,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,380,"                            outBlock[k] = tBlock[k] - m.getEntry(p, q);",0,1,1,0,6,0,4,0,1,5,43,15,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,381,                            ++k;,1,0,0,0,0,0,0,0,1,2,4,15,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,385,                    ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,389,            return out;,1,0,0,0,0,1,0,0,0,2,11,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,403,"        MatrixUtils.checkSubtractionCompatible(this, m);",0,0,0,0,2,1,3,0,0,3,48,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,405,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",3,0,0,0,2,2,0,2,2,5,63,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,408,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,6,1,0,1,3,2,0,0,1,6,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,409,            final double[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,2,0,0,1,5,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,410,            final double[] tBlock = blocks[blockIndex];,1,0,1,0,4,2,0,0,1,5,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,411,            final double[] mBlock = m.blocks[blockIndex];,3,0,1,0,4,2,0,0,1,5,45,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,412,            for (int k = 0; k < outBlock.length; ++k) {,5,1,0,1,3,2,0,0,1,6,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,413,                outBlock[k] = tBlock[k] - mBlock[k];,0,1,1,0,6,0,0,0,1,4,36,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,417,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,424,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",3,0,0,0,2,2,0,2,2,5,63,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,427,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,6,1,0,1,3,2,0,0,1,6,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,428,            final double[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,2,0,0,1,5,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,429,            final double[] tBlock = blocks[blockIndex];,1,0,1,0,4,2,0,0,1,5,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,430,            for (int k = 0; k < outBlock.length; ++k) {,5,1,0,1,3,2,0,0,1,6,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,431,                outBlock[k] = tBlock[k] + d;,1,1,1,0,4,0,0,0,1,5,28,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,435,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,441,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",3,0,0,0,2,2,0,2,2,5,63,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,444,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,6,1,0,1,3,2,0,0,1,6,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,445,            final double[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,2,0,0,1,5,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,446,            final double[] tBlock = blocks[blockIndex];,1,0,1,0,4,2,0,0,1,5,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,447,            for (int k = 0; k < outBlock.length; ++k) {,5,1,0,1,3,2,0,0,1,6,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,448,                outBlock[k] = tBlock[k] * d;,1,1,1,0,4,0,0,0,1,5,28,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,452,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,459,            return multiply((BlockRealMatrix) m);,1,0,0,2,4,1,1,1,1,7,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,460,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,462,"            MatrixUtils.checkMultiplicationCompatible(this, m);",0,0,0,0,2,1,3,0,0,3,51,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,464,"            final BlockRealMatrix out = new BlockRealMatrix(rows, m.getColumnDimension());",2,0,0,1,4,2,2,2,2,7,78,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,467,            int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,468,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,5,1,0,1,3,2,0,0,1,6,56,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,469,                final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,470,"                final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,57,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,472,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,5,1,0,1,3,2,0,0,1,6,59,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,473,                    final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,474,"                    final int qEnd = FastMath.min(qStart + BLOCK_SIZE, m.getColumnDimension());",3,1,0,1,4,2,4,0,1,7,75,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,477,                    final double[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,2,0,0,1,5,49,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,480,                    for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,4,1,0,1,3,2,0,0,1,6,55,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,481,                        final int kWidth = blockWidth(kBlock);,1,0,0,1,2,2,2,0,2,6,38,13,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,482,                        final double[] tBlock = blocks[iBlock * blockColumns + kBlock];,4,2,1,0,4,2,0,0,1,6,63,13,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,483,                        final int rStart = kBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,13,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,484,                        int k = 0;,1,0,0,0,0,1,0,0,0,2,10,14,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,485,                        for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,13,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,486,                            final int lStart = (p - pStart) * kWidth;,4,2,0,1,2,2,0,0,1,6,41,15,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,487,                            final int lEnd = lStart + kWidth;,3,1,0,0,0,2,0,0,1,4,33,15,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,488,                            for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,15,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,489,                                double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,18,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,490,                                int r = rStart;,2,0,0,0,0,1,0,0,0,2,15,18,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,491,                                for (int l = lStart; l < lEnd; ++l) {,5,1,0,1,3,2,0,0,1,6,37,17,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,492,"                                    sum += tBlock[l] * m.getEntry(r, q);",1,1,1,0,4,0,4,0,1,6,36,19,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,493,                                    ++r;,1,0,0,0,0,0,0,0,1,2,4,19,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,495,                                outBlock[k] += sum;,1,0,1,0,2,0,0,0,1,4,19,17,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,496,                                ++k;,1,0,0,0,0,0,0,0,1,2,4,17,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,501,                    ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,505,            return out;,1,0,0,0,0,1,0,0,0,2,11,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,519,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0,0,0,0,2,1,3,0,0,3,51,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,521,"        final BlockRealMatrix out = new BlockRealMatrix(rows, m.columns);",4,0,0,0,2,2,0,2,2,5,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,524,        int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,525,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,5,1,0,1,3,2,0,0,1,6,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,527,            final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,528,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,57,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,530,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,5,1,0,1,3,2,0,0,1,6,59,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,531,                final int jWidth = out.blockWidth(jBlock);,1,0,0,1,2,2,3,0,1,6,42,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,532,                final int jWidth2 = jWidth  + jWidth;,3,1,0,0,0,2,0,0,1,4,37,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,533,                final int jWidth3 = jWidth2 + jWidth;,3,1,0,0,0,2,0,0,1,4,37,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,534,                final int jWidth4 = jWidth3 + jWidth;,3,1,0,0,0,2,0,0,1,4,37,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,537,                final double[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,2,0,0,1,5,49,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,540,                for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,4,1,0,1,3,2,0,0,1,6,55,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,541,                    final int kWidth = blockWidth(kBlock);,1,0,0,1,2,2,2,0,2,6,38,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,542,                    final double[] tBlock = blocks[iBlock * blockColumns + kBlock];,4,2,1,0,4,2,0,0,1,6,63,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,543,                    final double[] mBlock = m.blocks[kBlock * m.blockColumns + jBlock];,7,2,0,0,4,2,0,0,1,5,67,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,544,                    int k = 0;,1,0,0,0,0,1,0,0,0,2,10,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,545,                    for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,546,                        final int lStart = (p - pStart) * kWidth;,4,2,0,1,2,2,0,0,1,6,41,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,547,                        final int lEnd = lStart + kWidth;,3,1,0,0,0,2,0,0,1,4,33,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,548,                        for (int nStart = 0; nStart < jWidth; ++nStart) {,4,1,0,1,3,2,0,0,1,6,49,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,549,                            double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,15,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,550,                            int l = lStart;,2,0,0,0,0,1,0,0,0,2,15,15,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,551,                            int n = nStart;,2,0,0,0,0,1,0,0,0,2,15,15,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,552,                            while (l < lEnd - 3) {,2,2,0,1,3,1,0,0,0,5,22,14,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,553,                                sum += tBlock[l] * mBlock[n] +,1,4,1,0,4,0,0,0,1,5,30,16,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,557,                                l += 4;,1,0,0,0,0,0,0,0,1,2,7,16,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,558,                                n += jWidth4;,2,0,0,0,0,0,0,0,1,2,13,16,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,560,                            while (l < lEnd) {,2,1,0,1,3,1,0,0,0,5,18,14,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,561,                                sum += tBlock[l++] * mBlock[n];,2,1,1,0,4,0,0,0,2,5,31,16,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,562,                                n += jWidth;,2,0,0,0,0,0,0,0,1,2,12,16,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,564,                            outBlock[k] += sum;,1,0,1,0,2,0,0,0,1,4,19,14,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,565,                            ++k;,1,0,0,0,0,0,0,0,1,2,4,14,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,570,                ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,574,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,580,        final double[][] data = new double[getRowDimension()][getColumnDimension()];,1,0,0,1,12,4,2,0,3,6,76,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,581,        final int lastColumns = columns - (blockColumns - 1) * BLOCK_SIZE;,4,3,0,1,2,2,0,0,1,6,66,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,583,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,584,            final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,585,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,57,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,586,            int regularPos = 0;,1,0,0,0,0,1,0,0,0,2,19,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,587,            int lastPos = 0;,1,0,0,0,0,1,0,0,0,2,16,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,588,            for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,589,                final double[] dataP = data[p];,1,0,1,0,4,2,0,0,1,5,31,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,590,                int blockIndex = iBlock * blockColumns;,3,1,0,0,0,1,0,0,0,3,39,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,591,                int dataPos = 0;,1,0,0,0,0,1,0,0,0,2,16,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,592,                for (int jBlock = 0; jBlock < blockColumns - 1; ++jBlock) {,4,2,0,1,3,2,0,0,1,6,59,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,593,"                    System.arraycopy(blocks[blockIndex++], regularPos, dataP, dataPos, BLOCK_SIZE);",1,0,1,0,4,0,6,0,1,5,79,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,594,                    dataPos += BLOCK_SIZE;,2,0,0,0,0,0,0,0,1,2,22,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,596,"                System.arraycopy(blocks[blockIndex], lastPos, dataP, dataPos, lastColumns);",0,0,1,0,4,0,6,0,0,3,75,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,597,                regularPos += BLOCK_SIZE;,2,0,0,0,0,0,0,0,1,2,25,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,598,                lastPos    += lastColumns;,2,0,0,0,0,0,0,0,1,2,26,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,602,        return data;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,608,        final double[] colSums = new double[BLOCK_SIZE];,1,0,1,0,4,4,0,0,1,5,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,609,        double maxColSum = 0;,1,0,0,0,0,1,0,0,0,2,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,610,        for (int jBlock = 0; jBlock < blockColumns; jBlock++) {,4,1,0,1,3,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,611,            final int jWidth = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,612,"            Arrays.fill(colSums, 0, jWidth, 0.0);",0,0,0,0,2,0,4,0,0,2,37,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,613,            for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,614,                final int iHeight = blockHeight(iBlock);,1,0,0,1,2,2,2,0,2,6,40,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,615,                final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,616,                for (int j = 0; j < jWidth; ++j) {,4,1,0,1,3,2,0,0,1,6,34,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,617,                    double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,618,                    for (int i = 0; i < iHeight; ++i) {,4,1,0,1,3,2,0,0,1,6,35,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,619,                        sum += FastMath.abs(block[i * jWidth + j]);,4,2,1,1,4,0,2,0,1,7,43,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,621,                    colSums[j] += sum;,1,0,1,0,2,0,0,0,1,4,18,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,624,            for (int j = 0; j < jWidth; ++j) {,4,1,0,1,3,2,0,0,1,6,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,625,"                maxColSum = FastMath.max(maxColSum, colSums[j]);",1,0,1,0,4,0,3,0,1,5,48,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,628,        return maxColSum;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,634,        double sum2 = 0;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,635,        for (int blockIndex = 0; blockIndex < blocks.length; ++blockIndex) {,5,1,0,1,3,2,0,0,1,6,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,636,            for (final double entry : blocks[blockIndex]) {,1,0,1,1,5,3,0,0,1,6,47,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,637,                sum2 += entry * entry;,3,1,0,0,0,0,0,0,1,3,22,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,640,        return FastMath.sqrt(sum2);,0,0,0,1,2,1,3,0,0,4,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,648,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,651,        final BlockRealMatrix out =,1,0,0,0,0,1,0,1,1,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,655,        final int blockStartRow = startRow / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,656,        final int rowsShift = startRow % BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,657,        final int blockStartColumn = startColumn / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,658,        final int columnsShift = startColumn % BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,661,        int pBlock = blockStartRow;,2,0,0,0,0,1,0,0,0,2,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,662,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,5,1,0,1,3,2,0,0,1,6,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,663,            final int iHeight = out.blockHeight(iBlock);,1,0,0,1,2,2,3,0,1,6,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,664,            int qBlock = blockStartColumn;,2,0,0,0,0,1,0,0,0,2,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,665,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,5,1,0,1,3,2,0,0,1,6,59,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,666,                final int jWidth = out.blockWidth(jBlock);,1,0,0,1,2,2,3,0,1,6,42,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,669,                final int outIndex = iBlock * out.blockColumns + jBlock;,5,2,0,0,0,2,0,0,1,4,56,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,670,                final double[] outBlock = out.blocks[outIndex];,3,0,1,0,4,2,0,0,1,5,47,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,671,                final int index = pBlock * blockColumns + qBlock;,4,2,0,0,0,2,0,0,1,4,49,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,672,                final int width = blockWidth(qBlock);,1,0,0,1,2,2,2,0,2,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,674,                final int heightExcess = iHeight + rowsShift - BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,58,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,675,                final int widthExcess = jWidth + columnsShift - BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,59,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,676,                if (heightExcess > 0) {,1,1,0,1,3,1,0,0,0,5,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,678,                    if (widthExcess > 0) {,1,1,0,1,3,1,0,0,0,5,22,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,680,                        final int width2 = blockWidth(qBlock + 1);,2,1,0,1,2,2,1,0,2,7,42,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,681,"                        copyBlockPart(blocks[index], width,",0,0,1,0,3,0,2,0,1,4,35,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,685,"                        copyBlockPart(blocks[index + 1], width2,",1,1,1,0,3,0,2,0,1,6,40,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,689,"                        copyBlockPart(blocks[index + blockColumns], width,",2,1,1,0,3,0,2,0,1,6,50,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,693,"                        copyBlockPart(blocks[index + blockColumns + 1], width2,",2,1,1,0,3,0,2,0,1,6,55,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,697,                    } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,699,"                        copyBlockPart(blocks[index], width,",0,0,1,0,3,0,2,0,1,4,35,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,703,"                        copyBlockPart(blocks[index + blockColumns], width,",2,1,1,0,3,0,2,0,1,6,50,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,710,                    if (widthExcess > 0) {,1,1,0,1,3,1,0,0,0,5,22,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,712,                        final int width2 = blockWidth(qBlock + 1);,2,1,0,1,2,2,1,0,2,7,42,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,713,"                        copyBlockPart(blocks[index], width,",0,0,1,0,3,0,2,0,1,4,35,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,717,"                        copyBlockPart(blocks[index + 1], width2,",1,1,1,0,3,0,2,0,1,6,40,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,721,                    } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,723,"                        copyBlockPart(blocks[index], width,",0,0,1,0,3,0,2,0,1,4,35,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,729,                ++qBlock;,1,0,0,0,0,0,0,0,1,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,731,            ++pBlock;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,734,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,757,        final int length = srcEndColumn - srcStartColumn;,3,1,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,758,        int srcPos = srcStartRow * srcWidth + srcStartColumn;,4,2,0,0,0,1,0,0,0,3,53,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,759,        int dstPos = dstStartRow * dstWidth + dstStartColumn;,4,2,0,0,0,1,0,0,0,3,53,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,760,        for (int srcRow = srcStartRow; srcRow < srcEndRow; ++srcRow) {,5,1,0,1,3,2,0,0,1,6,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,761,"            System.arraycopy(srcBlock, srcPos, dstBlock, dstPos, length);",0,0,0,0,2,0,7,0,0,2,61,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,762,            srcPos += srcWidth;,2,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,763,            dstPos += dstWidth;,2,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,765,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,772,        MathUtils.checkNotNull(subMatrix);,0,0,0,1,2,0,3,0,0,3,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,773,        final int refLength = subMatrix[0].length;,2,0,1,0,2,2,0,0,1,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,774,        if (refLength == 0) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,775,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,2,0,0,1,2,2,0,1,1,6,64,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,777,        final int endRow = row + subMatrix.length - 1;,4,2,0,0,0,2,0,0,1,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,778,        final int endColumn = column + refLength - 1;,3,2,0,0,0,2,0,0,1,4,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,779,"        MatrixUtils.checkSubMatrixIndex(this, row, endRow, column, endColumn);",0,0,0,0,2,1,6,0,0,3,70,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,780,        for (final double[] subRow : subMatrix) {,2,0,0,1,5,3,0,0,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,781,            if (subRow.length != refLength) {,3,1,0,1,3,1,0,0,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,782,"                throw new DimensionMismatchException(refLength, subRow.length);",3,0,0,0,2,2,0,1,1,5,63,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,787,        final int blockStartRow = row / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,788,        final int blockEndRow = (endRow + BLOCK_SIZE) / BLOCK_SIZE;,4,2,0,1,2,2,0,0,1,6,59,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,789,        final int blockStartColumn = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,790,        final int blockEndColumn = (endColumn + BLOCK_SIZE) / BLOCK_SIZE;,4,2,0,1,2,2,0,0,1,6,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,793,        for (int iBlock = blockStartRow; iBlock < blockEndRow; ++iBlock) {,5,1,0,1,3,2,0,0,1,6,66,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,794,            final int iHeight = blockHeight(iBlock);,1,0,0,1,2,2,2,0,2,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,795,            final int firstRow = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,796,"            final int iStart = FastMath.max(row,    firstRow);",1,0,0,0,2,2,4,0,1,5,50,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,797,"            final int iEnd = FastMath.min(endRow + 1, firstRow + iHeight);",4,2,0,0,2,2,2,0,1,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,799,            for (int jBlock = blockStartColumn; jBlock < blockEndColumn; ++jBlock) {,5,1,0,1,3,2,0,0,1,6,72,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,800,                final int jWidth = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,38,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,801,                final int firstColumn = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,44,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,802,"                final int jStart = FastMath.max(column,    firstColumn);",1,0,0,0,2,2,4,0,1,5,56,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,803,"                final int jEnd = FastMath.min(endColumn + 1, firstColumn + jWidth);",4,2,0,0,2,2,2,0,1,6,67,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,804,                final int jLength = jEnd - jStart;,3,1,0,0,0,2,0,0,1,4,34,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,807,                final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,808,                for (int i = iStart; i < iEnd; ++i) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,809,"                    System.arraycopy(subMatrix[i - row], jStart - column,",4,2,1,0,3,0,2,0,0,5,53,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,816,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,821,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,0,2,1,3,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,822,"        final BlockRealMatrix out = new BlockRealMatrix(1, columns);",2,0,0,0,2,2,0,2,2,5,60,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,825,        final int iBlock = row / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,826,        final int iRow = row - iBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,827,        int outBlockIndex = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,828,        int outIndex = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,829,        double[] outBlock = out.blocks[outBlockIndex];,3,0,1,0,4,1,0,0,0,4,46,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,830,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,831,            final int jWidth = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,832,            final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,833,            final int available = outBlock.length - outIndex;,4,1,0,0,0,2,0,0,1,4,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,834,            if (jWidth > available) {,2,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,835,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, available);",2,1,0,0,2,0,6,0,0,4,70,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,836,                outBlock = out.blocks[++outBlockIndex];,4,0,0,0,2,0,0,0,2,3,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,837,"                System.arraycopy(block, iRow * jWidth, outBlock, 0, jWidth - available);",4,2,0,0,2,0,4,0,0,4,72,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,838,                outIndex = jWidth - available;,3,1,0,0,0,0,0,0,1,3,30,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,840,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, jWidth);",2,1,0,0,2,0,6,0,0,4,67,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,841,                outIndex += jWidth;,2,0,0,0,0,0,0,0,1,2,19,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,845,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,852,"            setRowMatrix(row, (BlockRealMatrix) matrix);",1,0,0,1,4,0,2,1,1,6,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,855,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,853,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,854,"            super.setRowMatrix(row, matrix);",3,0,0,0,2,1,0,0,0,3,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,856,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,871,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,0,2,1,3,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,872,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,873,        if ((matrix.getRowDimension() != 1) ||,0,2,0,2,5,1,2,0,0,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,875,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0,0,0,1,3,2,2,1,1,6,68,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,881,        final int iBlock = row / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,882,        final int iRow = row - iBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,883,        int mBlockIndex = 0;,1,0,0,0,0,1,0,0,0,2,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,884,        int mIndex = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,885,        double[] mBlock = matrix.blocks[mBlockIndex];,3,0,1,0,4,1,0,0,0,4,45,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,886,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,887,            final int jWidth = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,888,            final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,889,            final int available  = mBlock.length - mIndex;,4,1,0,0,0,2,0,0,1,4,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,890,            if (jWidth > available) {,2,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,891,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, available);",2,1,0,0,2,0,6,0,0,4,66,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,892,                mBlock = matrix.blocks[++mBlockIndex];,4,0,0,0,2,0,0,0,2,3,38,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,893,"                System.arraycopy(mBlock, 0, block, iRow * jWidth, jWidth - available);",4,2,0,0,2,0,4,0,0,4,70,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,894,                mIndex = jWidth - available;,3,1,0,0,0,0,0,0,1,3,28,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,896,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, jWidth);",2,1,0,0,2,0,6,0,0,4,63,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,897,                mIndex += jWidth;,2,0,0,0,0,0,0,0,1,2,17,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,900,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,905,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,0,2,1,3,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,906,"        final BlockRealMatrix out = new BlockRealMatrix(rows, 1);",2,0,0,0,2,2,0,2,2,5,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,909,        final int jBlock = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,910,        final int jColumn = column - jBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,911,        final int jWidth = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,912,        int outBlockIndex = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,913,        int outIndex = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,914,        double[] outBlock = out.blocks[outBlockIndex];,3,0,1,0,4,1,0,0,0,4,46,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,915,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,916,            final int iHeight = blockHeight(iBlock);,1,0,0,1,2,2,2,0,2,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,917,            final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,918,            for (int i = 0; i < iHeight; ++i) {,4,1,0,1,3,2,0,0,1,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,919,                if (outIndex >= outBlock.length) {,3,1,0,1,3,1,0,0,0,5,34,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,920,                    outBlock = out.blocks[++outBlockIndex];,4,0,0,0,2,0,0,0,2,3,39,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,921,                    outIndex = 0;,1,0,0,0,0,0,0,0,1,2,13,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,923,                outBlock[outIndex++] = block[i * jWidth + jColumn];,4,2,1,0,4,0,0,0,2,5,51,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,927,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,934,"            setColumnMatrix(column, (BlockRealMatrix) matrix);",1,0,0,1,4,0,2,1,1,6,50,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,937,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,935,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,936,"            super.setColumnMatrix(column, matrix);",3,0,0,0,2,1,0,0,0,3,38,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,938,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,953,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,0,2,1,3,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,954,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,955,        if ((matrix.getRowDimension() != nRows) ||,1,2,0,2,5,1,2,0,0,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,957,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0,0,0,1,3,2,2,1,1,6,68,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,963,        final int jBlock = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,964,        final int jColumn = column - jBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,965,        final int jWidth = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,966,        int mBlockIndex = 0;,1,0,0,0,0,1,0,0,0,2,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,967,        int mIndex = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,968,        double[] mBlock = matrix.blocks[mBlockIndex];,3,0,1,0,4,1,0,0,0,4,45,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,969,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,970,            final int iHeight = blockHeight(iBlock);,1,0,0,1,2,2,2,0,2,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,971,            final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,972,            for (int i = 0; i < iHeight; ++i) {,4,1,0,1,3,2,0,0,1,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,973,                if (mIndex >= mBlock.length) {,3,1,0,1,3,1,0,0,0,5,30,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,974,                    mBlock = matrix.blocks[++mBlockIndex];,4,0,0,0,2,0,0,0,2,3,38,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,975,                    mIndex = 0;,1,0,0,0,0,0,0,0,1,2,11,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,977,                block[i * jWidth + jColumn] = mBlock[mIndex++];,4,2,1,0,4,0,0,0,2,5,47,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,980,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,985,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,0,2,1,3,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,986,        final double[] outData = new double[columns];,1,0,1,0,4,4,0,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,989,        final int iBlock = row / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,990,        final int iRow = row - iBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,991,        int outIndex = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,992,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,993,            final int jWidth = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,994,            final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,995,"            System.arraycopy(block, iRow * jWidth, outData, outIndex, jWidth);",2,1,0,0,2,0,6,0,0,4,66,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,996,            outIndex += jWidth;,2,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,999,"        return new ArrayRealVector(outData, false);",1,0,0,0,2,2,0,1,2,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1006,"            setRow(row, ((ArrayRealVector) vector).getDataRef());",1,0,0,2,8,0,3,1,1,6,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1009,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1007,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1008,"            super.setRowVector(row, vector);",3,0,0,0,2,1,0,0,0,3,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1010,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1015,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,0,2,1,3,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1016,        final double[] outData = new double[rows];,1,0,1,0,4,4,0,0,1,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1019,        final int jBlock = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1020,        final int jColumn = column - jBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1021,        final int jWidth = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1022,        int outIndex = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1023,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1024,            final int iHeight = blockHeight(iBlock);,1,0,0,1,2,2,2,0,2,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1025,            final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1026,            for (int i = 0; i < iHeight; ++i) {,4,1,0,1,3,2,0,0,1,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1027,                outData[outIndex++] = block[i * jWidth + jColumn];,4,2,1,0,4,0,0,0,2,5,50,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1031,"        return new ArrayRealVector(outData, false);",1,0,0,0,2,2,0,1,2,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1038,"            setColumn(column, ((ArrayRealVector) vector).getDataRef());",1,0,0,2,8,0,3,1,1,6,59,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1041,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1039,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1040,"            super.setColumnVector(column, vector);",3,0,0,0,2,1,0,0,0,3,38,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1042,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1047,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,0,2,1,3,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1048,        final double[] out = new double[columns];,1,0,1,0,4,4,0,0,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1051,        final int iBlock = row / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1052,        final int iRow = row - iBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1053,        int outIndex = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1054,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1055,            final int jWidth     = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1056,            final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1057,"            System.arraycopy(block, iRow * jWidth, out, outIndex, jWidth);",2,1,0,0,2,0,6,0,0,4,62,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1058,            outIndex += jWidth;,2,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1061,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1067,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,0,2,1,3,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1068,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1069,        if (array.length != nCols) {,3,1,0,1,3,1,0,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1070,"            throw new MatrixDimensionMismatchException(1, array.length, 1, nCols);",3,0,0,0,2,2,0,1,1,5,70,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1074,        final int iBlock = row / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1075,        final int iRow = row - iBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1076,        int outIndex = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1077,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1078,            final int jWidth     = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1079,            final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1080,"            System.arraycopy(array, outIndex, block, iRow * jWidth, jWidth);",2,1,0,0,2,0,6,0,0,4,64,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1081,            outIndex += jWidth;,2,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1083,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1088,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,0,2,1,3,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1089,        final double[] out = new double[rows];,1,0,1,0,4,4,0,0,1,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1092,        final int jBlock  = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1093,        final int jColumn = column - jBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1094,        final int jWidth  = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1095,        int outIndex = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1096,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1097,            final int iHeight = blockHeight(iBlock);,1,0,0,1,2,2,2,0,2,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1098,            final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1099,            for (int i = 0; i < iHeight; ++i) {,4,1,0,1,3,2,0,0,1,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1100,                out[outIndex++] = block[i * jWidth + jColumn];,4,2,1,0,4,0,0,0,2,5,46,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1104,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1110,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,0,2,1,3,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1111,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1112,        if (array.length != nRows) {,3,1,0,1,3,1,0,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1113,"            throw new MatrixDimensionMismatchException(array.length, 1, nRows, 1);",3,0,0,0,2,2,0,1,1,5,70,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1117,        final int jBlock  = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1118,        final int jColumn = column - jBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1119,        final int jWidth = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1120,        int outIndex = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1121,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1122,            final int iHeight = blockHeight(iBlock);,1,0,0,1,2,2,2,0,2,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1123,            final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1124,            for (int i = 0; i < iHeight; ++i) {,4,1,0,1,3,2,0,0,1,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1125,                block[i * jWidth + jColumn] = array[outIndex++];,4,2,1,0,4,0,0,0,2,5,48,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1128,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1133,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,0,2,1,4,0,0,3,48,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1134,        final int iBlock = row / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1135,        final int jBlock = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1136,        final int k = (row - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,4,4,0,1,4,2,2,0,2,7,64,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1138,        return blocks[iBlock * blockColumns + jBlock][k];,3,2,1,0,4,1,0,0,0,5,49,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1144,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,0,2,1,4,0,0,3,48,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1145,        final int iBlock = row / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1146,        final int jBlock = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1147,        final int k = (row - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,4,4,0,1,4,2,2,0,2,7,64,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1149,        blocks[iBlock * blockColumns + jBlock][k] = value;,4,2,1,0,4,0,0,0,1,5,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1150,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1155,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,0,2,1,4,0,0,3,48,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1156,        final int iBlock = row    / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1157,        final int jBlock = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1158,        final int k = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,4,4,0,1,4,2,2,0,2,7,67,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1160,        blocks[iBlock * blockColumns + jBlock][k] += increment;,4,2,1,0,4,0,0,0,1,5,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1161,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1166,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,0,2,1,4,0,0,3,48,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1167,        final int iBlock = row / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1168,        final int jBlock = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1169,        final int k = (row - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,4,4,0,1,4,2,2,0,2,7,64,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1171,        blocks[iBlock * blockColumns + jBlock][k] *= factor;,4,2,1,0,4,0,0,0,1,5,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1172,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1177,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1178,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1179,"        final BlockRealMatrix out = new BlockRealMatrix(nCols, nRows);",3,0,0,0,2,2,0,2,2,5,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1182,        int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1183,        for (int iBlock = 0; iBlock < blockColumns; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1184,            for (int jBlock = 0; jBlock < blockRows; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1186,                final double[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,2,0,0,1,5,49,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1187,                final double[] tBlock = blocks[jBlock * blockColumns + iBlock];,4,2,1,0,4,2,0,0,1,6,63,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1188,                final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1189,"                final int pEnd = FastMath.min(pStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,60,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1190,                final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1191,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,57,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1192,                int k = 0;,1,0,0,0,0,1,0,0,0,2,10,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1193,                for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1194,                    final int lInc = pEnd - pStart;,3,1,0,0,0,2,0,0,1,4,31,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1195,                    int l = p - pStart;,3,1,0,0,0,1,0,0,0,3,19,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1196,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1197,                        outBlock[k] = tBlock[l];,0,0,1,0,4,0,0,0,1,3,24,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1198,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1199,                        l+= lInc;,2,0,0,0,0,0,0,0,1,2,9,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1203,                ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1207,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1213,        return rows;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1219,        return columns;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1225,        if (v.length != columns) {,3,1,0,1,3,1,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1226,"            throw new DimensionMismatchException(v.length, columns);",3,0,0,0,2,2,0,1,1,5,56,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1228,        final double[] out = new double[rows];,1,0,1,0,4,4,0,0,1,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1231,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1232,            final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1233,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,57,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1234,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1235,                final double[] block  = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,63,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1236,                final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1237,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,60,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1238,                int k = 0;,1,0,0,0,0,1,0,0,0,2,10,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1239,                for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1240,                    double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1241,                    int q = qStart;,2,0,0,0,0,1,0,0,0,2,15,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1242,                    while (q < qEnd - 3) {,2,2,0,1,3,1,0,0,0,5,22,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1243,                        sum += block[k]     * v[q]     +,1,4,1,0,4,0,0,0,1,5,32,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1247,                        k += 4;,1,0,0,0,0,0,0,0,1,2,7,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1248,                        q += 4;,1,0,0,0,0,0,0,0,1,2,7,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1250,                    while (q < qEnd) {,2,1,0,1,3,1,0,0,0,5,18,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1251,                        sum += block[k++] * v[q++];,3,1,1,0,4,0,0,0,3,5,27,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1253,                    out[p] += sum;,1,0,1,0,2,0,0,0,1,4,14,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1258,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1264,        if (v.length != rows) {,3,1,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1265,"            throw new DimensionMismatchException(v.length, rows);",3,0,0,0,2,2,0,1,1,5,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1267,        final double[] out = new double[columns];,1,0,1,0,4,4,0,0,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1270,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1271,            final int jWidth  = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1272,            final int jWidth2 = jWidth  + jWidth;,3,1,0,0,0,2,0,0,1,4,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1273,            final int jWidth3 = jWidth2 + jWidth;,3,1,0,0,0,2,0,0,1,4,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1274,            final int jWidth4 = jWidth3 + jWidth;,3,1,0,0,0,2,0,0,1,4,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1275,            final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1276,"            final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,60,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1277,            for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1278,                final double[] block  = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,63,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1279,                final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1280,"                final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,57,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1281,                for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1282,                    int k = q - qStart;,3,1,0,0,0,1,0,0,0,3,19,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1283,                    double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1284,                    int p = pStart;,2,0,0,0,0,1,0,0,0,2,15,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1285,                    while (p < pEnd - 3) {,2,2,0,1,3,1,0,0,0,5,22,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1286,                        sum += block[k]           * v[p]     +,1,4,1,0,4,0,0,0,1,5,38,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1290,                        k += jWidth4;,2,0,0,0,0,0,0,0,1,2,13,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1291,                        p += 4;,1,0,0,0,0,0,0,0,1,2,7,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1293,                    while (p < pEnd) {,2,1,0,1,3,1,0,0,0,5,18,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1294,                        sum += block[k] * v[p++];,2,1,1,0,4,0,0,0,2,5,25,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1295,                        k += jWidth;,2,0,0,0,0,0,0,0,1,2,12,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1297,                    out[q] += sum;,1,0,1,0,2,0,0,0,1,4,14,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1302,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1308,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1309,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1310,            final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1311,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,57,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1312,            for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1313,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1314,                    final int jWidth = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,38,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1315,                    final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1316,"                    final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,60,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1317,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1318,                    int k = (p - pStart) * jWidth;,4,2,0,1,2,1,0,0,0,5,30,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1319,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1320,"                        block[k] = visitor.visit(p, q, block[k]);",0,0,1,0,6,0,4,0,1,4,41,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1321,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1326,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1332,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1333,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1334,            final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1335,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,57,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1336,            for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1337,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1338,                    final int jWidth = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,38,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1339,                    final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1340,"                    final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,60,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1341,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1342,                    int k = (p - pStart) * jWidth;,4,2,0,1,2,1,0,0,0,5,30,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1343,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1344,"                        visitor.visit(p, q, block[k]);",0,0,1,0,4,0,4,0,0,3,30,13,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1345,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1350,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1358,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1359,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,8,0,0,2,71,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1360,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,7,4,0,1,3,2,0,0,1,6,86,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1361,            final int p0 = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1362,"            final int pStart = FastMath.max(startRow, p0);",1,0,0,0,2,2,4,0,1,5,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1363,"            final int pEnd = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",4,3,0,1,4,2,2,0,1,7,69,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1364,            for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1365,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,7,4,0,1,3,2,0,0,1,6,92,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1366,                    final int jWidth = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,38,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1367,                    final int q0 = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,35,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1368,"                    final int qStart = FastMath.max(startColumn, q0);",1,0,0,0,2,2,4,0,1,5,49,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1369,"                    final int qEnd = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",4,3,0,1,4,2,2,0,1,7,72,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1370,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1371,                    int k = (p - p0) * jWidth + qStart - q0;,6,4,0,1,2,1,0,0,0,5,40,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1372,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1373,"                        block[k] = visitor.visit(p, q, block[k]);",0,0,1,0,6,0,4,0,1,4,41,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1374,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1379,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1387,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1388,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,8,0,0,2,71,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1389,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,7,4,0,1,3,2,0,0,1,6,86,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1390,            final int p0 = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1391,"            final int pStart = FastMath.max(startRow, p0);",1,0,0,0,2,2,4,0,1,5,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1392,"            final int pEnd = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",4,3,0,1,4,2,2,0,1,7,69,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1393,            for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1394,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,7,4,0,1,3,2,0,0,1,6,92,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1395,                    final int jWidth = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,38,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1396,                    final int q0 = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,35,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1397,"                    final int qStart = FastMath.max(startColumn, q0);",1,0,0,0,2,2,4,0,1,5,49,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1398,"                    final int qEnd = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",4,3,0,1,4,2,2,0,1,7,72,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1399,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1400,                    int k = (p - p0) * jWidth + qStart - q0;,6,4,0,1,2,1,0,0,0,5,40,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1401,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1402,"                        visitor.visit(p, q, block[k]);",0,0,1,0,4,0,4,0,0,3,30,13,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1403,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1408,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1414,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1415,        int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1416,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1417,            final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1418,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,57,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1419,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1420,                final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1421,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,60,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1422,                final double[] block = blocks[blockIndex];,1,0,1,0,4,2,0,0,1,5,42,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1423,                int k = 0;,1,0,0,0,0,1,0,0,0,2,10,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1424,                for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1425,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1426,"                        block[k] = visitor.visit(p, q, block[k]);",0,0,1,0,6,0,4,0,1,4,41,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1427,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1430,                ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1433,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1439,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1440,        int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1441,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1442,            final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1443,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,57,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1444,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1445,                final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1446,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,60,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1447,                final double[] block = blocks[blockIndex];,1,0,1,0,4,2,0,0,1,5,42,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1448,                int k = 0;,1,0,0,0,0,1,0,0,0,2,10,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1449,                for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1450,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1451,"                        visitor.visit(p, q, block[k]);",0,0,1,0,4,0,4,0,0,3,30,13,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1452,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1455,                ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1458,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1466,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1467,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,8,0,0,2,71,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1468,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,7,4,0,1,3,2,0,0,1,6,86,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1469,            final int p0 = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1470,"            final int pStart = FastMath.max(startRow, p0);",1,0,0,0,2,2,4,0,1,5,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1471,"            final int pEnd = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",4,3,0,1,4,2,2,0,1,7,69,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1472,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,7,4,0,1,3,2,0,0,1,6,92,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1473,                final int jWidth = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,38,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1474,                final int q0 = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,35,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1475,"                final int qStart = FastMath.max(startColumn, q0);",1,0,0,0,2,2,4,0,1,5,49,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1476,"                final int qEnd = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",4,3,0,1,4,2,2,0,1,7,72,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1477,                final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1478,                for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1479,                    int k = (p - p0) * jWidth + qStart - q0;,6,4,0,1,2,1,0,0,0,5,40,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1480,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1481,"                        block[k] = visitor.visit(p, q, block[k]);",0,0,1,0,6,0,4,0,1,4,41,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1482,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1487,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1495,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1496,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,8,0,0,2,71,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1497,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,7,4,0,1,3,2,0,0,1,6,86,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1498,            final int p0 = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1499,"            final int pStart = FastMath.max(startRow, p0);",1,0,0,0,2,2,4,0,1,5,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1500,"            final int pEnd = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",4,3,0,1,4,2,2,0,1,7,69,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1501,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,7,4,0,1,3,2,0,0,1,6,92,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1502,                final int jWidth = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,38,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1503,                final int q0 = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,35,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1504,"                final int qStart = FastMath.max(startColumn, q0);",1,0,0,0,2,2,4,0,1,5,49,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1505,"                final int qEnd = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",4,3,0,1,4,2,2,0,1,7,72,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1506,                final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1507,                for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1508,                    int k = (p - p0) * jWidth + qStart - q0;,6,4,0,1,2,1,0,0,0,5,40,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1509,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1510,"                        visitor.visit(p, q, block[k]);",0,0,1,0,4,0,4,0,0,3,30,13,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1511,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1516,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1525,        return (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;,6,4,0,1,2,1,0,0,0,5,79,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,1534,        return (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;,6,4,0,1,2,1,0,0,0,5,91,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,28,69,public class BlockRealMatrix extends AbstractRealMatrix implements Serializable {,1,0,0,0,1,4,0,2,1,5,81,1,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,55,    public ArrayRealVector() {,1,0,0,1,3,1,0,0,1,5,26,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,56,        data = new double[0];,1,0,0,0,2,2,0,0,1,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,57,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,74,"    public ArrayRealVector(int size, double preset) {",3,0,0,0,3,3,0,0,1,4,49,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,75,        data = new double[size];,1,0,1,0,2,2,0,0,1,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,76,"        Arrays.fill(data, preset);",0,0,0,0,2,0,4,0,0,2,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,77,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,105,            throw new NullArgumentException();,0,0,0,1,2,2,0,1,1,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,120,"    public ArrayRealVector(double[] d, int pos, int size) {",4,0,0,0,5,4,0,0,1,4,55,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,121,        if (d == null) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,122,            throw new NullArgumentException();,0,0,0,1,2,2,0,1,1,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,124,        if (d.length < pos + size) {,4,2,0,1,3,1,0,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,125,"            throw new NumberIsTooLargeException(pos + size, d.length, true);",4,1,0,0,2,2,0,1,2,6,64,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,127,        data = new double[size];,1,0,1,0,2,2,0,0,1,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,128,"        System.arraycopy(d, pos, data, 0, size);",0,0,0,0,2,0,6,0,0,2,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,129,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,136,    public ArrayRealVector(Double[] d) {,2,0,0,1,5,1,0,1,1,6,36,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,137,        data = new double[d.length];,3,0,0,0,2,2,0,0,1,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,138,        for (int i = 0; i < d.length; i++) {,5,1,0,1,3,2,0,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,139,            data[i] = d[i].doubleValue();,0,0,1,1,6,0,1,0,1,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,141,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,153,"    public ArrayRealVector(Double[] d, int pos, int size) {",4,0,0,0,5,3,0,1,1,5,55,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,154,        if (d == null) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,155,            throw new NullArgumentException();,0,0,0,1,2,2,0,1,1,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,157,        if (d.length < pos + size) {,4,2,0,1,3,1,0,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,158,"            throw new NumberIsTooLargeException(pos + size, d.length, true);",4,1,0,0,2,2,0,1,2,6,64,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,160,        data = new double[size];,1,0,1,0,2,2,0,0,1,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,161,        for (int i = pos; i < pos + size; i++) {,6,2,0,1,3,2,0,0,1,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,162,            data[i - pos] = d[i].doubleValue();,2,1,1,1,6,0,1,0,1,7,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,164,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,172,    public ArrayRealVector(RealVector v) {,2,0,0,1,3,1,0,1,1,6,38,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,173,        if (v == null) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,174,            throw new NullArgumentException();,0,0,0,1,2,2,0,1,1,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,176,        data = new double[v.getDimension()];,1,0,0,1,4,2,2,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,177,        for (int i = 0; i < data.length; ++i) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,178,            data[i] = v.getEntry(i);,0,0,1,1,4,0,3,0,1,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,180,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,189,"        this(v, true);",1,0,0,0,2,1,0,0,1,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,190,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,199,"    public ArrayRealVector(ArrayRealVector v, boolean deep) {",3,0,0,0,3,2,0,1,1,5,57,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,200,        data = deep ? v.data.clone() : v.data;,6,0,0,1,2,0,1,0,1,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,201,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,208,"    public ArrayRealVector(ArrayRealVector v1, ArrayRealVector v2) {",3,0,0,0,3,1,0,2,1,5,64,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,209,        data = new double[v1.data.length + v2.data.length];,7,1,0,0,2,2,0,0,1,5,51,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,210,"        System.arraycopy(v1.data, 0, data, 0, v1.data.length);",5,0,0,0,2,0,3,0,0,3,54,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,211,"        System.arraycopy(v2.data, 0, data, v1.data.length, v2.data.length);",8,0,0,0,2,0,3,0,0,3,67,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,212,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,219,"    public ArrayRealVector(ArrayRealVector v1, RealVector v2) {",3,0,0,0,3,1,0,2,1,5,59,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,220,        final int l1 = v1.data.length;,4,0,0,0,0,2,0,0,1,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,221,        final int l2 = v2.getDimension();,1,0,0,1,2,2,2,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,222,        data = new double[l1 + l2];,3,1,0,0,2,2,0,0,1,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,223,"        System.arraycopy(v1.data, 0, data, 0, l1);",2,0,0,0,2,0,4,0,0,3,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,224,        for (int i = 0; i < l2; ++i) {,4,1,0,1,3,2,0,0,1,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,225,            data[l1 + i] = v2.getEntry(i);,2,1,1,1,4,0,3,0,1,7,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,227,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,234,"    public ArrayRealVector(RealVector v1, ArrayRealVector v2) {",3,0,0,0,3,1,0,2,1,5,59,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,235,        final int l1 = v1.getDimension();,1,0,0,1,2,2,2,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,236,        final int l2 = v2.data.length;,4,0,0,0,0,2,0,0,1,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,237,        data = new double[l1 + l2];,3,1,0,0,2,2,0,0,1,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,238,        for (int i = 0; i < l1; ++i) {,4,1,0,1,3,2,0,0,1,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,239,            data[i] = v1.getEntry(i);,0,0,1,1,4,0,3,0,1,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,241,"        System.arraycopy(v2.data, 0, data, l1, l2);",2,0,0,0,2,0,5,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,242,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,249,"    public ArrayRealVector(ArrayRealVector v1, double[] v2) {",3,0,0,0,5,2,0,1,1,5,57,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,250,        final int l1 = v1.getDimension();,1,0,0,1,2,2,2,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,251,        final int l2 = v2.length;,3,0,0,0,0,2,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,252,        data = new double[l1 + l2];,3,1,0,0,2,2,0,0,1,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,253,"        System.arraycopy(v1.data, 0, data, 0, l1);",2,0,0,0,2,0,4,0,0,3,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,254,"        System.arraycopy(v2, 0, data, l1, l2);",0,0,0,0,2,0,6,0,0,2,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,255,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,262,"    public ArrayRealVector(double[] v1, ArrayRealVector v2) {",3,0,0,0,5,2,0,1,1,5,57,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,263,        final int l1 = v1.length;,3,0,0,0,0,2,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,264,        final int l2 = v2.getDimension();,1,0,0,1,2,2,2,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,265,        data = new double[l1 + l2];,3,1,0,0,2,2,0,0,1,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,266,"        System.arraycopy(v1, 0, data, 0, l1);",0,0,0,0,2,0,5,0,0,2,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,267,"        System.arraycopy(v2.data, 0, data, l1, l2);",2,0,0,0,2,0,5,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,268,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,275,"    public ArrayRealVector(double[] v1, double[] v2) {",3,0,0,0,7,3,0,0,1,4,50,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,276,        final int l1 = v1.length;,3,0,0,0,0,2,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,277,        final int l2 = v2.length;,3,0,0,0,0,2,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,278,        data = new double[l1 + l2];,3,1,0,0,2,2,0,0,1,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,279,"        System.arraycopy(v1, 0, data, 0, l1);",0,0,0,0,2,0,5,0,0,2,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,280,"        System.arraycopy(v2, 0, data, l1, l2);",0,0,0,0,2,0,6,0,0,2,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,281,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,286,"        return new ArrayRealVector(this, true);",0,0,0,0,2,3,0,1,2,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,292,        if (v instanceof ArrayRealVector) {,1,0,0,1,3,2,0,1,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,293,            final double[] vData = ((ArrayRealVector) v).data;,3,0,0,2,6,2,0,1,1,6,50,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,294,            final int dim = vData.length;,3,0,0,0,0,2,0,0,1,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,295,            checkVectorDimensions(dim);,0,0,0,1,2,0,2,0,1,4,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,296,            ArrayRealVector result = new ArrayRealVector(dim);,2,0,0,1,2,1,0,2,1,6,50,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,297,            double[] resultData = result.data;,3,0,0,0,2,1,0,0,0,3,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,298,            for (int i = 0; i < dim; i++) {,4,1,0,1,3,2,0,0,1,6,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,299,                resultData[i] = data[i] + vData[i];,0,1,1,0,6,0,0,0,1,4,35,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,301,            return result;,1,0,0,0,0,1,0,0,0,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,303,            checkVectorDimensions(v);,0,0,0,1,2,0,2,0,1,4,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,304,            double[] out = data.clone();,1,0,0,1,4,1,2,0,0,5,28,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,305,            Iterator<Entry> it = v.sparseIterator();,1,0,0,1,2,0,2,2,0,5,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,306,            while (it.hasNext()) {,0,0,0,2,5,1,2,0,0,4,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,307,                final Entry e = it.next();,1,0,0,1,2,1,2,1,1,7,26,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,308,                out[e.getIndex()] += e.getValue();,0,0,1,1,6,0,4,0,1,5,34,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,309,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,310,"            return new ArrayRealVector(out, false);",1,0,0,0,2,2,0,1,2,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,328,            checkVectorDimensions(v);,0,0,0,1,2,0,2,0,1,4,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,329,            double[] out = data.clone();,1,0,0,1,4,1,2,0,0,5,28,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,330,            Iterator<Entry> it = v.sparseIterator();,1,0,0,1,2,0,2,2,0,5,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,331,            while (it.hasNext()) {,0,0,0,2,5,1,2,0,0,4,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,332,                final Entry e = it.next();,1,0,0,1,2,1,2,1,1,7,26,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,333,                out[e.getIndex()] -= e.getValue();,0,0,1,1,6,0,4,0,1,5,34,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,334,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,335,"            return new ArrayRealVector(out, false);",1,0,0,0,2,2,0,1,2,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,342,        return copy().mapToSelf(function);,0,0,0,1,4,1,3,0,1,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,348,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,349,            data[i] = function.value(data[i]);,0,0,1,1,6,0,2,0,1,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,351,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,357,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,358,            data[i] = data[i] + d;,1,1,1,0,4,0,0,0,1,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,360,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,366,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,367,            data[i] = data[i] - d;,1,1,1,0,4,0,0,0,1,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,369,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,375,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,376,            data[i] = data[i] * d;,1,1,1,0,4,0,0,0,1,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,378,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,384,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,385,            data[i] = data[i] / d;,1,1,1,0,4,0,0,0,1,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,387,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,393,        if (v instanceof ArrayRealVector) {,1,0,0,1,3,2,0,1,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,394,            final double[] vData = ((ArrayRealVector) v).data;,3,0,0,2,6,2,0,1,1,6,50,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,395,            final int dim = vData.length;,3,0,0,0,0,2,0,0,1,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,396,            checkVectorDimensions(dim);,0,0,0,1,2,0,2,0,1,4,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,397,            ArrayRealVector result = new ArrayRealVector(dim);,2,0,0,1,2,1,0,2,1,6,50,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,398,            double[] resultData = result.data;,3,0,0,0,2,1,0,0,0,3,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,399,            for (int i = 0; i < dim; i++) {,4,1,0,1,3,2,0,0,1,6,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,400,                resultData[i] = data[i] * vData[i];,0,1,1,0,6,0,0,0,1,4,35,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,402,            return result;,1,0,0,0,0,1,0,0,0,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,404,            checkVectorDimensions(v);,0,0,0,1,2,0,2,0,1,4,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,405,            double[] out = data.clone();,1,0,0,1,4,1,2,0,0,5,28,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,406,            for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,407,                out[i] *= v.getEntry(i);,0,0,1,1,4,0,3,0,1,5,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,409,"            return new ArrayRealVector(out, false);",1,0,0,0,2,2,0,1,2,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,416,        if (v instanceof ArrayRealVector) {,1,0,0,1,3,2,0,1,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,417,            final double[] vData = ((ArrayRealVector) v).data;,3,0,0,2,6,2,0,1,1,6,50,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,418,            final int dim = vData.length;,3,0,0,0,0,2,0,0,1,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,419,            checkVectorDimensions(dim);,0,0,0,1,2,0,2,0,1,4,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,420,            ArrayRealVector result = new ArrayRealVector(dim);,2,0,0,1,2,1,0,2,1,6,50,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,421,            double[] resultData = result.data;,3,0,0,0,2,1,0,0,0,3,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,422,            for (int i = 0; i < dim; i++) {,4,1,0,1,3,2,0,0,1,6,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,423,                resultData[i] = data[i] / vData[i];,0,1,1,0,6,0,0,0,1,4,35,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,425,            return result;,1,0,0,0,0,1,0,0,0,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,427,            checkVectorDimensions(v);,0,0,0,1,2,0,2,0,1,4,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,428,            double[] out = data.clone();,1,0,0,1,4,1,2,0,0,5,28,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,429,            for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,430,                out[i] /= v.getEntry(i);,0,0,1,1,4,0,3,0,1,5,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,432,"            return new ArrayRealVector(out, false);",1,0,0,0,2,2,0,1,2,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,443,        return data;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,449,        if (v instanceof ArrayRealVector) {,1,0,0,1,3,2,0,1,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,450,            final double[] vData = ((ArrayRealVector) v).data;,3,0,0,2,6,2,0,1,1,6,50,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,451,            checkVectorDimensions(vData.length);,2,0,0,1,2,0,1,0,1,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,452,            double dot = 0;,1,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,453,            for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,454,                dot += data[i] * vData[i];,1,1,1,0,4,0,0,0,1,5,26,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,456,            return dot;,1,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,458,        return super.dotProduct(v);,2,0,0,1,2,2,0,0,0,4,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,464,        double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,465,        for (double a : data) {,2,0,0,1,3,2,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,466,            sum += a * a;,3,1,0,0,0,0,0,0,1,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,468,        return FastMath.sqrt(sum);,0,0,0,1,2,1,3,0,0,4,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,474,        double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,475,        for (double a : data) {,2,0,0,1,3,2,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,476,            sum += FastMath.abs(a);,1,0,0,1,2,0,3,0,1,5,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,478,        return sum;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,484,        double max = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,485,        for (double a : data) {,2,0,0,1,3,2,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,486,"            max = FastMath.max(max, FastMath.abs(a));",1,0,0,1,4,0,6,0,1,5,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,488,        return max;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,494,        if (v instanceof ArrayRealVector) {,1,0,0,1,3,2,0,1,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,495,            final double[] vData = ((ArrayRealVector) v).data;,3,0,0,2,6,2,0,1,1,6,50,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,496,            checkVectorDimensions(vData.length);,2,0,0,1,2,0,1,0,1,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,497,            double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,498,            for (int i = 0; i < data.length; ++i) {,5,1,0,1,3,2,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,499,                final double delta = data[i] - vData[i];,1,1,1,0,4,2,0,0,1,6,40,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,500,                sum += delta * delta;,3,1,0,0,0,0,0,0,1,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,502,            return FastMath.sqrt(sum);,0,0,0,1,2,1,3,0,0,4,26,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,504,            checkVectorDimensions(v);,0,0,0,1,2,0,2,0,1,4,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,505,            double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,506,            for (int i = 0; i < data.length; ++i) {,5,1,0,1,3,2,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,507,                final double delta = data[i] - v.getEntry(i);,1,1,1,1,4,2,3,0,1,8,45,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,508,                sum += delta * delta;,3,1,0,0,0,0,0,0,1,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,510,            return FastMath.sqrt(sum);,0,0,0,1,2,1,3,0,0,4,26,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,517,        if (v instanceof ArrayRealVector) {,1,0,0,1,3,2,0,1,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,518,            final double[] vData = ((ArrayRealVector) v).data;,3,0,0,2,6,2,0,1,1,6,50,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,519,            checkVectorDimensions(vData.length);,2,0,0,1,2,0,1,0,1,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,520,            double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,521,            for (int i = 0; i < data.length; ++i) {,5,1,0,1,3,2,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,522,                final double delta = data[i] - vData[i];,1,1,1,0,4,2,0,0,1,6,40,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,523,                sum += FastMath.abs(delta);,1,0,0,1,2,0,3,0,1,5,27,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,525,            return sum;,1,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,527,            checkVectorDimensions(v);,0,0,0,1,2,0,2,0,1,4,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,528,            double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,529,            for (int i = 0; i < data.length; ++i) {,5,1,0,1,3,2,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,530,                final double delta = data[i] - v.getEntry(i);,1,1,1,1,4,2,3,0,1,8,45,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,531,                sum += FastMath.abs(delta);,1,0,0,1,2,0,3,0,1,5,27,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,533,            return sum;,1,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,540,        if (v instanceof ArrayRealVector) {,1,0,0,1,3,2,0,1,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,541,            final double[] vData = ((ArrayRealVector) v).data;,3,0,0,2,6,2,0,1,1,6,50,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,542,            checkVectorDimensions(vData.length);,2,0,0,1,2,0,1,0,1,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,543,            double max = 0;,1,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,544,            for (int i = 0; i < data.length; ++i) {,5,1,0,1,3,2,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,545,                final double delta = data[i] - vData[i];,1,1,1,0,4,2,0,0,1,6,40,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,546,"                max = FastMath.max(max, FastMath.abs(delta));",1,0,0,1,4,0,6,0,1,5,45,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,548,            return max;,1,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,550,            checkVectorDimensions(v);,0,0,0,1,2,0,2,0,1,4,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,551,            double max = 0;,1,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,552,            for (int i = 0; i < data.length; ++i) {,5,1,0,1,3,2,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,553,                final double delta = data[i] - v.getEntry(i);,1,1,1,1,4,2,3,0,1,8,45,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,554,"                max = FastMath.max(max, FastMath.abs(delta));",1,0,0,1,4,0,6,0,1,5,45,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,556,            return max;,1,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,563,        if (v instanceof ArrayRealVector) {,1,0,0,1,3,2,0,1,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,564,            final double[] vData = ((ArrayRealVector) v).data;,3,0,0,2,6,2,0,1,1,6,50,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,565,            final int m = data.length;,3,0,0,0,0,2,0,0,1,3,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,566,            final int n = vData.length;,3,0,0,0,0,2,0,0,1,3,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,567,"            final RealMatrix out = MatrixUtils.createRealMatrix(m, n);",1,0,0,0,2,1,4,1,1,6,58,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,568,            for (int i = 0; i < m; i++) {,4,1,0,1,3,2,0,0,1,6,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,569,                for (int j = 0; j < n; j++) {,4,1,0,1,3,2,0,0,1,6,29,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,570,"                    out.setEntry(i, j, data[i] * vData[j]);",0,1,1,0,6,0,4,0,0,4,39,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,573,            return out;,1,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,575,            final int m = data.length;,3,0,0,0,0,2,0,0,1,3,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,576,            final int n = v.getDimension();,1,0,0,1,2,2,2,0,1,6,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,577,"            final RealMatrix out = MatrixUtils.createRealMatrix(m, n);",1,0,0,0,2,1,4,1,1,6,58,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,578,            for (int i = 0; i < m; i++) {,4,1,0,1,3,2,0,0,1,6,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,579,                for (int j = 0; j < n; j++) {,4,1,0,1,3,2,0,0,1,6,29,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,580,"                    out.setEntry(i, j, data[i] * v.getEntry(j));",0,1,1,1,6,0,7,0,0,5,44,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,583,            return out;,1,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,592,        } catch (IndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,593,"            throw new OutOfRangeException(LocalizedFormats.INDEX, index, 0,",3,0,0,0,1,2,0,1,1,5,63,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,608,"            return new ArrayRealVector(this, (ArrayRealVector) v);",1,0,0,1,4,3,0,2,1,6,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,609,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,610,"            return new ArrayRealVector(this, v);",1,0,0,0,2,3,0,1,1,5,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,621,"        return new ArrayRealVector(this, v);",1,0,0,0,2,3,0,1,1,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,627,        final double[] out = new double[data.length + 1];,3,1,0,0,4,4,0,0,1,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,628,"        System.arraycopy(data, 0, out, 0, data.length);",2,0,0,0,2,0,4,0,0,3,47,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,629,        out[data.length] = in;,3,0,1,0,2,0,0,0,1,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,630,"        return new ArrayRealVector(out, false);",1,0,0,0,2,2,0,1,2,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,636,        if (n < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,637,"            throw new NotPositiveException(LocalizedFormats.NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, n);",3,0,0,0,2,2,0,1,1,5,90,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,639,        ArrayRealVector out = new ArrayRealVector(n);,2,0,0,1,2,1,0,2,1,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,641,"            System.arraycopy(data, index, out.data, 0, n);",2,0,0,0,2,0,5,0,0,3,46,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,645,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,642,        } catch (IndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,643,            checkIndex(index);,0,0,0,1,2,0,2,0,1,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,644,            checkIndex(index + n - 1);,2,2,0,1,2,0,1,0,1,6,26,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,646,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,653,            data[index] = value;,1,0,1,0,2,0,0,0,1,4,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,656,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,654,        } catch (IndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,655,            checkIndex(index);,0,0,0,1,2,0,2,0,1,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,657,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,663,        data[index] += increment;,1,0,1,0,2,0,0,0,1,4,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,667,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,664,        } catch(IndexOutOfBoundsException e){,1,0,0,1,4,1,0,1,0,5,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,665,"            throw new OutOfRangeException(LocalizedFormats.INDEX,",2,0,0,0,1,2,0,1,1,5,53,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,668,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,673,        if (v instanceof ArrayRealVector) {,1,0,0,1,3,2,0,1,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,674,"            setSubVector(index, ((ArrayRealVector) v).data);",2,0,0,2,6,0,2,1,1,6,48,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,677,                for (int i = index; i < index + v.getDimension(); ++i) {,5,2,0,2,5,2,2,0,1,7,56,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,678,                    data[i] = v.getEntry(i - index);,2,1,1,1,4,0,2,0,1,7,32,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,683,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,680,            } catch (IndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,681,                checkIndex(index);,0,0,0,1,2,0,2,0,1,4,18,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,682,                checkIndex(index + v.getDimension() - 1);,1,2,0,2,4,0,3,0,1,6,41,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,685,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,697,"            System.arraycopy(v, 0, data, index, v.length);",2,0,0,0,2,0,5,0,0,3,46,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,701,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,698,        } catch (IndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,699,            checkIndex(index);,0,0,0,1,2,0,2,0,1,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,700,            checkIndex(index + v.length - 1);,3,2,0,1,2,0,1,0,1,6,33,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,702,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,707,"        Arrays.fill(data, value);",0,0,0,0,2,0,4,0,0,2,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,708,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,719,        return DEFAULT_FORMAT.format(this);,0,0,0,1,2,2,2,0,0,4,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,731,        checkVectorDimensions(v.getDimension());,0,0,0,2,4,0,3,0,1,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,732,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,744,"            throw new DimensionMismatchException(data.length, n);",3,0,0,0,2,2,0,1,1,5,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,756,        for (double v : data) {,2,0,0,1,3,2,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,757,            if (Double.isNaN(v)) {,0,0,0,2,5,1,3,0,0,4,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,758,                return true;,0,0,0,0,0,1,0,0,1,2,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,761,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,773,        if (isNaN()) {,0,0,0,2,5,1,1,0,1,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,774,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,777,        for (double v : data) {,2,0,0,1,3,2,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,778,            if (Double.isInfinite(v)) {,0,0,0,2,5,1,3,0,0,4,27,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,779,                return true;,0,0,0,0,0,1,0,0,1,2,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,783,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,789,        if (this == other) {,1,1,0,1,3,2,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,790,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,793,        if (!(other instanceof RealVector)) {,1,0,0,2,5,2,0,1,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,794,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,797,        RealVector rhs = (RealVector) other;,2,0,0,1,2,0,0,2,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,798,        if (data.length != rhs.getDimension()) {,2,1,0,2,5,1,2,0,0,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,799,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,802,        if (rhs.isNaN()) {,0,0,0,2,5,1,2,0,0,4,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,803,            return this.isNaN();,0,0,0,1,2,2,1,0,0,4,20,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,806,        for (int i = 0; i < data.length; ++i) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,807,            if (data[i] != rhs.getEntry(i)) {,0,1,1,2,7,1,3,0,0,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,808,                return false;,0,0,0,0,0,1,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,811,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,819,        if (isNaN()) {,0,0,0,2,5,1,1,0,1,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,820,            return 9;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,822,        return MathUtils.hash(data);,0,0,0,1,2,1,3,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,828,"        return copy().combineToSelf(a, b, y);",0,0,0,1,4,1,5,0,1,5,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,834,        if (y instanceof ArrayRealVector) {,1,0,0,1,3,2,0,1,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,835,            final double[] yData = ((ArrayRealVector) y).data;,3,0,0,2,6,2,0,1,1,6,50,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,836,            checkVectorDimensions(yData.length);,2,0,0,1,2,0,1,0,1,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,837,            for (int i = 0; i < this.data.length; i++) {,5,1,0,1,3,3,0,0,1,6,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,838,                data[i] = a * data[i] + b * yData[i];,2,3,1,0,6,0,0,0,1,5,37,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,840,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,841,            checkVectorDimensions(y);,0,0,0,1,2,0,2,0,1,4,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,842,            for (int i = 0; i < this.data.length; i++) {,5,1,0,1,3,3,0,0,1,6,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,843,                data[i] = a * data[i] + b * y.getEntry(i);,2,3,1,1,6,0,3,0,1,7,42,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,846,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,852,"        visitor.start(data.length, 0, data.length - 1);",4,1,0,0,2,0,2,0,0,4,47,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,853,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,854,"            visitor.visit(i, data[i]);",0,0,1,0,4,0,3,0,0,3,26,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,856,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,863,"        checkIndices(start, end);",0,0,0,0,2,0,3,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,864,"        visitor.start(data.length, start, end);",2,0,0,0,2,0,4,0,0,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,865,        for (int i = start; i <= end; i++) {,5,1,0,1,3,2,0,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,866,"            visitor.visit(i, data[i]);",0,0,1,0,4,0,3,0,0,3,26,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,868,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,878,        return walkInDefaultOrder(visitor);,0,0,0,1,2,1,2,0,1,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,889,"        return walkInDefaultOrder(visitor, start, end);",0,0,0,0,2,1,4,0,1,4,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,895,"        visitor.start(data.length, 0, data.length - 1);",4,1,0,0,2,0,2,0,0,4,47,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,896,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,897,"            data[i] = visitor.visit(i, data[i]);",0,0,1,0,6,0,3,0,1,4,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,899,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,906,"        checkIndices(start, end);",0,0,0,0,2,0,3,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,907,"        visitor.start(data.length, start, end);",2,0,0,0,2,0,4,0,0,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,908,        for (int i = start; i <= end; i++) {,5,1,0,1,3,2,0,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,909,"            data[i] = visitor.visit(i, data[i]);",0,0,1,0,6,0,3,0,1,4,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,911,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,921,        return walkInDefaultOrder(visitor);,0,0,0,1,2,1,2,0,1,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,932,"        return walkInDefaultOrder(visitor, start, end);",0,0,0,0,2,1,4,0,1,4,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,90,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_PREFIX, DEFAULT_ROW_SUFFIX,",4,0,0,0,1,1,0,0,0,3,76,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,92,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,151,        return NumberFormat.getAvailableLocales();,0,0,0,1,2,1,2,0,0,4,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,159,        return prefix;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,167,        return suffix;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,175,        return rowPrefix;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,183,        return rowSuffix;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,191,        return rowSeparator;,1,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,199,        return columnSeparator;,1,0,0,0,0,1,0,0,0,2,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,234,"        return format(m, new StringBuffer(), new FieldPosition(0)).toString();",0,0,0,1,8,3,3,2,3,6,70,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,248,        pos.setBeginIndex(0);,0,0,0,1,2,0,2,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,249,        pos.setEndIndex(0);,0,0,0,1,2,0,2,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,252,        toAppendTo.append(prefix);,0,0,0,1,2,0,3,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,255,        final int rows = matrix.getRowDimension();,1,0,0,1,2,2,2,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,256,        for (int i = 0; i < rows; ++i) {,4,1,0,1,3,2,0,0,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,257,            toAppendTo.append(rowPrefix);,0,0,0,1,2,0,3,0,0,3,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,258,            for (int j = 0; j < matrix.getColumnDimension(); ++j) {,3,1,0,2,5,2,2,0,1,7,55,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,259,                if (j > 0) {,1,1,0,1,3,1,0,0,0,5,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,260,                    toAppendTo.append(columnSeparator);,0,0,0,1,2,0,3,0,0,3,35,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,262,"                CompositeFormat.formatDouble(matrix.getEntry(i, j), format, toAppendTo, pos);",0,0,0,0,4,0,9,0,0,2,77,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,264,            toAppendTo.append(rowSuffix);,0,0,0,1,2,0,3,0,0,3,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,265,            if (i < rows - 1) {,2,2,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,266,                toAppendTo.append(rowSeparator);,0,0,0,1,2,0,3,0,0,3,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,271,        toAppendTo.append(suffix);,0,0,0,1,2,0,3,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,273,        return toAppendTo;,1,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,285,        final ParsePosition parsePosition = new ParsePosition(0);,1,0,0,1,2,2,0,2,2,6,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,286,"        final RealMatrix result = parse(source, parsePosition);",1,0,0,0,2,1,3,1,2,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,287,        if (parsePosition.getIndex() == 0) {,0,1,0,2,5,1,2,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,288,"            throw new MathParseException(source,",1,0,0,0,1,2,0,1,1,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,292,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,303,        int initialIndex = pos.getIndex();,1,0,0,1,2,1,2,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,305,        final String trimmedPrefix = prefix.trim();,1,0,0,1,2,1,2,1,1,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,306,        final String trimmedSuffix = suffix.trim();,1,0,0,1,2,1,2,1,1,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,307,        final String trimmedRowPrefix = rowPrefix.trim();,1,0,0,1,2,1,2,1,1,7,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,308,        final String trimmedRowSuffix = rowSuffix.trim();,1,0,0,1,2,1,2,1,1,7,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,309,        final String trimmedColumnSeparator = columnSeparator.trim();,1,0,0,1,2,1,2,1,1,7,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,310,        final String trimmedRowSeparator = rowSeparator.trim();,1,0,0,1,2,1,2,1,1,7,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,313,"        CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0,0,0,0,2,0,4,0,0,2,54,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,314,"        if (!CompositeFormat.parseFixedstring(source, trimmedPrefix, pos)) {",0,0,0,0,5,1,5,0,1,4,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,315,            return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,319,        List<List<Number>> matrix = new ArrayList<List<Number>>();,1,0,0,1,2,1,0,6,1,6,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,320,        List<Number> rowComponents = new ArrayList<Number>();,1,0,0,1,2,1,0,4,1,6,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,321,        for (boolean loop = true; loop;){,2,0,0,1,3,2,0,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,323,            if (!rowComponents.isEmpty()) {,0,0,0,2,5,1,2,0,1,5,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,324,"                CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0,0,0,0,2,0,4,0,0,2,54,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,325,"                if (!CompositeFormat.parseFixedstring(source, trimmedColumnSeparator, pos)) {",0,0,0,0,5,1,5,0,1,4,77,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,326,                    if (trimmedRowSuffix.length() != 0 &&,0,2,0,1,3,1,2,0,0,5,37,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,328,                        return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,330,"                        CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0,0,0,0,2,0,4,0,0,2,54,13,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,331,"                        if (CompositeFormat.parseFixedstring(source, trimmedRowSeparator, pos)) {",0,0,0,0,5,1,5,0,0,3,73,13,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,332,                            matrix.add(rowComponents);,0,0,0,1,2,0,3,0,0,3,26,15,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,333,                            rowComponents = new ArrayList<Number>();,1,0,0,1,2,1,0,2,2,6,40,14,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,334,                            continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,336,                            loop = false;,1,0,0,0,0,0,0,0,2,2,13,14,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,341,"                CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0,0,0,0,2,0,4,0,0,2,54,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,342,                if (trimmedRowPrefix.length() != 0 &&,0,2,0,1,3,1,2,0,0,5,37,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,344,                    return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,348,            if (loop) {,1,0,0,1,3,1,0,0,0,4,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,349,"                CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0,0,0,0,2,0,4,0,0,2,54,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,350,"                Number component = CompositeFormat.parseNumber(source, format, pos);",1,0,0,0,2,0,5,1,0,4,68,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,351,                if (component != null) {,1,1,0,1,3,1,0,0,0,5,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,352,                    rowComponents.add(component);,0,0,0,1,2,0,3,0,0,3,29,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,354,                    if (rowComponents.isEmpty()) {,0,0,0,2,5,1,2,0,0,4,30,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,355,                        loop = false;,1,0,0,0,0,0,0,0,2,2,13,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,359,                        pos.setIndex(initialIndex);,0,0,0,1,2,0,3,0,0,3,27,13,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,360,                        return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,363,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,367,        if (!rowComponents.isEmpty()) {,0,0,0,2,5,1,2,0,1,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,368,            matrix.add(rowComponents);,0,0,0,1,2,0,3,0,0,3,26,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,372,"        CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0,0,0,0,2,0,4,0,0,2,54,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,373,"        if (!CompositeFormat.parseFixedstring(source, trimmedSuffix, pos)) {",0,0,0,0,5,1,5,0,1,4,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,374,            return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,378,        if (matrix.isEmpty()) {,0,0,0,2,5,1,2,0,0,4,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,379,            pos.setIndex(initialIndex);,0,0,0,1,2,0,3,0,0,3,27,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,380,            return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,384,        double[][] data = new double[matrix.size()][];,1,0,0,1,10,3,2,0,0,5,46,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,385,        int row = 0;,1,0,0,0,0,1,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,386,        for (List<Number> rowList : matrix) {,2,0,0,1,3,1,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,387,            data[row] = new double[rowList.size()];,0,0,1,1,6,2,2,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,388,            for (int i = 0; i < rowList.size(); i++) {,3,1,0,2,5,2,2,0,1,7,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,389,                data[row][i] = rowList.get(i).doubleValue();,0,0,1,1,8,0,4,0,1,5,44,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,391,            row++;,1,0,0,0,0,0,0,0,1,2,6,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,392,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,393,        return MatrixUtils.createRealMatrix(data);,0,0,0,1,2,1,3,0,0,4,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1126,        protected SparseEntryIterator() {,1,0,0,1,3,1,0,0,1,5,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1127,            dim = getDimension();,1,0,0,1,2,0,1,0,2,5,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1128,            current = new Entry();,1,0,0,1,2,1,0,1,2,6,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1129,            next = new Entry();,1,0,0,1,2,1,0,1,2,6,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1130,            if (next.getValue() == 0) {,0,1,0,2,5,1,2,0,0,5,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1131,                advance(next);,0,0,0,1,2,0,2,0,1,4,14,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1133,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1141,            if (e == null) {,1,1,0,1,3,1,0,0,0,5,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1142,                return;,0,0,0,0,0,1,0,0,1,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1145,                e.setIndex(e.getIndex() + 1);,0,1,0,2,4,0,4,0,0,4,29,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1146,            } while (e.getIndex() < dim && e.getValue() == 0);,1,3,0,2,7,1,4,0,0,6,50,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1147,            if (e.getIndex() >= dim) {,1,1,0,2,5,1,2,0,0,6,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1148,                e.setIndex(-1);,0,0,0,1,2,0,2,0,1,4,15,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1150,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1154,            return next.getIndex() >= 0;,0,1,0,1,2,1,2,0,0,5,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1159,            int index = next.getIndex();,1,0,0,1,2,1,2,0,0,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1160,            if (index < 0) {,1,1,0,1,3,1,0,0,0,5,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1161,                throw new NoSuchElementException();,0,0,0,1,2,2,0,1,1,5,35,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1163,            current.setIndex(index);,0,0,0,1,2,0,3,0,0,3,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1164,            advance(next);,0,0,0,1,2,0,2,0,1,4,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1165,            return current;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1170,            throw new MathUnsupportedOperationException();,0,0,0,1,2,2,0,1,1,5,46,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1117,    protected class SparseEntryIterator implements Iterator<Entry> {,1,0,0,0,1,3,0,2,1,5,64,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,645,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0,0,0,2,6,1,3,2,2,6,82,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,649,"                out.setEntry(column, row, value);",0,0,0,0,2,0,5,0,0,2,33,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,650,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,278,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,2,1,1,2,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,287,                sum = 0;,1,0,0,0,0,0,0,0,1,2,8,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,288,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,292,                sum += value * value;,3,1,0,0,0,0,0,0,1,3,21,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,293,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,297,                return FastMath.sqrt(sum);,0,0,0,1,2,1,3,0,0,4,26,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,240,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,2,1,1,2,6,60,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,255,                this.endRow = endRow;,2,0,0,0,0,1,0,0,1,3,21,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,256,                columnSum   = 0;,1,0,0,0,0,0,0,0,1,2,16,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,257,                maxColSum   = 0;,1,0,0,0,0,0,0,0,1,2,16,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,258,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,262,                columnSum += FastMath.abs(value);,1,0,0,1,2,0,3,0,1,5,33,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,263,                if (row == endRow) {,2,1,0,1,3,1,0,0,0,5,20,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,264,"                    maxColSum = FastMath.max(maxColSum, columnSum);",1,0,0,0,2,0,4,0,1,4,47,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,265,                    columnSum = 0;,1,0,0,0,0,0,0,0,1,2,14,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,267,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,271,                return maxColSum;,1,0,0,0,0,1,0,0,0,2,17,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,588,            super(BigFraction.ZERO);,2,0,0,1,2,1,0,0,1,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,589,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,595,            data = new double[rows][columns];,1,0,1,0,4,2,0,0,1,5,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,596,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,601,            data[row][column] = value.doubleValue();,0,0,1,1,6,0,2,0,1,5,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,602,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,610,"            return new Array2DRowRealMatrix(data, false);",1,0,0,0,2,2,0,1,2,5,45,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,583,    private static class BigFractionMatrixConverter extends DefaultFieldMatrixPreservingVisitor<BigFraction> {,1,0,0,0,1,4,0,2,2,5,106,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,49,"        super(rowDimension, columnDimension);",2,0,0,0,2,1,0,0,1,4,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,50,        long lRow = rowDimension;,2,0,0,0,0,1,0,0,0,2,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,51,        long lCol = columnDimension;,2,0,0,0,0,1,0,0,0,2,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,52,        if (lRow * lCol >= Integer.MAX_VALUE) {,4,2,0,1,3,1,0,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,53,"            throw new NumberIsTooLargeException(lRow * lCol, Integer.MAX_VALUE, false);",4,1,0,0,2,2,0,1,2,6,75,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,55,        this.rows = rowDimension;,2,0,0,0,0,1,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,56,        this.columns = columnDimension;,2,0,0,0,0,1,0,0,1,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,57,        this.entries = new OpenIntToDoubleHashMap(0.0);,1,0,0,1,2,2,0,1,2,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,58,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,65,    public OpenMapRealMatrix(OpenMapRealMatrix matrix) {,2,0,0,1,3,1,0,1,1,6,52,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,66,        this.rows = matrix.rows;,3,0,0,0,0,1,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,67,        this.columns = matrix.columns;,3,0,0,0,0,1,0,0,1,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,68,        this.entries = new OpenIntToDoubleHashMap(matrix.entries);,3,0,0,1,2,2,0,1,2,6,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,69,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,74,        return new OpenMapRealMatrix(this);,0,0,0,1,2,3,0,1,1,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,80,"        return new OpenMapRealMatrix(rowDimension, columnDimension);",2,0,0,0,2,2,0,1,1,5,60,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,86,        return columns;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,100,"        MatrixUtils.checkAdditionCompatible(this, m);",0,0,0,0,2,1,3,0,0,3,45,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,102,        final OpenMapRealMatrix out = new OpenMapRealMatrix(this);,1,0,0,1,2,3,0,2,2,6,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,103,        for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext();) {,5,0,0,2,7,1,3,0,0,5,92,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,104,            iterator.advance();,0,0,0,1,2,0,2,0,0,3,19,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,105,            final int row = iterator.key() / columns;,2,1,0,1,2,2,2,0,1,7,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,106,            final int col = iterator.key() - row * columns;,3,2,0,1,2,2,2,0,1,7,47,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,107,"            out.setEntry(row, col, getEntry(row, col) + iterator.value());",0,1,0,1,6,0,9,0,1,5,62,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,108,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,110,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,118,            return subtract((OpenMapRealMatrix) m);,1,0,0,2,4,1,1,1,1,7,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,119,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,120,            return (OpenMapRealMatrix) super.subtract(m);,2,0,0,1,4,2,0,1,0,5,45,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,134,"        MatrixUtils.checkAdditionCompatible(this, m);",0,0,0,0,2,1,3,0,0,3,45,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,136,        final OpenMapRealMatrix out = new OpenMapRealMatrix(this);,1,0,0,1,2,3,0,2,2,6,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,137,        for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext();) {,5,0,0,2,7,1,3,0,0,5,92,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,138,            iterator.advance();,0,0,0,1,2,0,2,0,0,3,19,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,139,            final int row = iterator.key() / columns;,2,1,0,1,2,2,2,0,1,7,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,140,            final int col = iterator.key() - row * columns;,3,2,0,1,2,2,2,0,1,7,47,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,141,"            out.setEntry(row, col, getEntry(row, col) - iterator.value());",0,1,0,1,6,0,9,0,1,5,62,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,142,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,144,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,151,            return multiply((OpenMapRealMatrix) m);,1,0,0,2,4,1,1,1,1,7,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,152,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,155,"            MatrixUtils.checkMultiplicationCompatible(this, m);",0,0,0,0,2,1,3,0,0,3,51,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,157,            final int outCols = m.getColumnDimension();,1,0,0,1,2,2,2,0,1,6,43,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,158,"            final BlockRealMatrix out = new BlockRealMatrix(rows, outCols);",3,0,0,0,2,2,0,2,2,5,63,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,159,            for (OpenIntToDoubleHashMap.Iterator iterator = entries.iterator(); iterator.hasNext();) {,3,0,0,2,7,1,4,0,0,5,90,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,160,                iterator.advance();,0,0,0,1,2,0,2,0,0,3,19,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,161,                final double value = iterator.value();,1,0,0,1,2,2,2,0,1,6,38,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,162,                final int key      = iterator.key();,1,0,0,1,2,2,2,0,1,6,36,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,163,                final int i        = key / columns;,3,1,0,0,0,2,0,0,1,4,35,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,164,                final int k        = key % columns;,3,1,0,0,0,2,0,0,1,4,35,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,165,                for (int j = 0; j < outCols; ++j) {,4,1,0,1,3,2,0,0,1,6,35,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,166,"                    out.addToEntry(i, j, value * m.getEntry(k, j));",1,1,0,0,4,0,8,0,0,4,47,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,168,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,170,            return out;,1,0,0,0,0,1,0,0,0,2,11,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,185,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0,0,0,0,2,1,3,0,0,3,51,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,187,        final int outCols = m.getColumnDimension();,1,0,0,1,2,2,2,0,1,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,188,"        OpenMapRealMatrix out = new OpenMapRealMatrix(rows, outCols);",3,0,0,0,2,1,0,2,1,5,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,189,        for (OpenIntToDoubleHashMap.Iterator iterator = entries.iterator(); iterator.hasNext();) {,3,0,0,2,7,1,4,0,0,5,90,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,190,            iterator.advance();,0,0,0,1,2,0,2,0,0,3,19,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,191,            final double value = iterator.value();,1,0,0,1,2,2,2,0,1,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,192,            final int key      = iterator.key();,1,0,0,1,2,2,2,0,1,6,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,193,            final int i        = key / columns;,3,1,0,0,0,2,0,0,1,4,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,194,            final int k        = key % columns;,3,1,0,0,0,2,0,0,1,4,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,195,            for (int j = 0; j < outCols; ++j) {,4,1,0,1,3,2,0,0,1,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,196,"                final int rightKey = m.computeKey(k, j);",1,0,0,0,2,2,4,0,1,5,40,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,197,                if (m.entries.containsKey(rightKey)) {,2,0,0,2,5,1,2,0,0,5,38,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,198,"                    final int outKey = out.computeKey(i, j);",1,0,0,0,2,2,4,0,1,5,40,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,199,                    final double outValue =,1,0,0,0,0,2,0,0,1,3,23,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,201,                    if (outValue == 0.0) {,1,1,0,1,3,1,0,0,0,5,22,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,202,                        out.entries.remove(outKey);,2,0,0,1,2,0,2,0,0,4,27,13,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,204,"                        out.entries.put(outKey, outValue);",2,0,0,0,2,0,3,0,0,3,34,13,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,208,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,210,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,216,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,0,2,1,3,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,217,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,0,2,1,3,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,218,"        return entries.get(computeKey(row, column));",0,0,0,0,4,1,5,0,1,4,44,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,224,        return rows;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,230,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,0,2,1,3,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,231,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,0,2,1,3,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,232,        if (value == 0.0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,233,"            entries.remove(computeKey(row, column));",0,0,0,0,4,0,5,0,1,3,40,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,235,"            entries.put(computeKey(row, column), value);",0,0,0,0,4,0,6,0,1,3,44,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,237,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,242,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,0,2,1,3,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,243,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,0,2,1,3,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,244,"        final int key = computeKey(row, column);",1,0,0,0,2,2,3,0,2,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,245,        final double value = entries.get(key) + increment;,2,1,0,1,2,2,3,0,1,7,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,246,        if (value == 0.0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,247,            entries.remove(key);,0,0,0,1,2,0,3,0,0,3,20,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,249,"            entries.put(key, value);",0,0,0,0,2,0,4,0,0,2,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,251,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,256,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,0,2,1,3,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,257,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,0,2,1,3,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,258,"        final int key = computeKey(row, column);",1,0,0,0,2,2,3,0,2,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,259,        final double value = entries.get(key) * factor;,2,1,0,1,2,2,3,0,1,7,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,260,        if (value == 0.0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,261,            entries.remove(key);,0,0,0,1,2,0,3,0,0,3,20,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,263,"            entries.put(key, value);",0,0,0,0,2,0,4,0,0,2,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,265,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,274,        return row * columns + column;,3,2,0,0,0,1,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,28,31,public class OpenMapRealMatrix extends AbstractRealMatrix,1,0,0,0,0,3,0,1,1,4,57,1,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,73,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR,",3,0,0,0,1,1,0,0,0,3,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,75,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,93,"        this(prefix, suffix, separator,",3,0,0,0,1,1,0,0,0,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,95,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,122,        return NumberFormat.getAvailableLocales();,0,0,0,1,2,1,2,0,0,4,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,130,        return prefix;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,138,        return suffix;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,146,        return separator;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,154,        return format;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,181,"        return format(v, new StringBuffer(), new FieldPosition(0)).toString();",0,0,0,1,8,3,3,2,3,6,70,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,195,        pos.setBeginIndex(0);,0,0,0,1,2,0,2,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,196,        pos.setEndIndex(0);,0,0,0,1,2,0,2,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,199,        toAppendTo.append(prefix);,0,0,0,1,2,0,3,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,202,        for (int i = 0; i < vector.getDimension(); ++i) {,3,1,0,2,5,2,2,0,1,7,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,203,            if (i > 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,204,                toAppendTo.append(separator);,0,0,0,1,2,0,3,0,0,3,29,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,206,"            CompositeFormat.formatDouble(vector.getEntry(i), format, toAppendTo, pos);",0,0,0,1,4,0,8,0,0,3,74,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,210,        toAppendTo.append(suffix);,0,0,0,1,2,0,3,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,212,        return toAppendTo;,1,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,224,        final ParsePosition parsePosition = new ParsePosition(0);,1,0,0,1,2,2,0,2,2,6,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,225,"        final ArrayRealVector result = parse(source, parsePosition);",1,0,0,0,2,1,3,1,2,6,60,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,226,        if (parsePosition.getIndex() == 0) {,0,1,0,2,5,1,2,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,227,"            throw new MathParseException(source,",1,0,0,0,1,2,0,1,1,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,231,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,242,        int initialIndex = pos.getIndex();,1,0,0,1,2,1,2,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,245,"        CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0,0,0,0,2,0,4,0,0,2,54,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,246,"        if (!CompositeFormat.parseFixedstring(source, trimmedPrefix, pos)) {",0,0,0,0,5,1,5,0,1,4,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,247,            return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,251,        List<Number> components = new ArrayList<Number>();,1,0,0,1,2,1,0,4,1,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,252,        for (boolean loop = true; loop;){,2,0,0,1,3,2,0,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,254,            if (!components.isEmpty()) {,0,0,0,2,5,1,2,0,1,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,255,"                CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0,0,0,0,2,0,4,0,0,2,54,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,256,"                if (!CompositeFormat.parseFixedstring(source, trimmedSeparator, pos)) {",0,0,0,0,5,1,5,0,1,4,71,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,257,                    loop = false;,1,0,0,0,0,0,0,0,2,2,13,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,261,            if (loop) {,1,0,0,1,3,1,0,0,0,4,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,262,"                CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0,0,0,0,2,0,4,0,0,2,54,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,263,"                Number component = CompositeFormat.parseNumber(source, format, pos);",1,0,0,0,2,0,5,1,0,4,68,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,264,                if (component != null) {,1,1,0,1,3,1,0,0,0,5,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,265,                    components.add(component);,0,0,0,1,2,0,3,0,0,3,26,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,269,                    pos.setIndex(initialIndex);,0,0,0,1,2,0,3,0,0,3,27,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,270,                    return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,272,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,277,"        CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0,0,0,0,2,0,4,0,0,2,54,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,278,"        if (!CompositeFormat.parseFixedstring(source, trimmedSuffix, pos)) {",0,0,0,0,5,1,5,0,1,4,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,279,            return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,283,        double[] data = new double[components.size()];,1,0,0,1,6,3,2,0,0,5,46,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,284,        for (int i = 0; i < data.length; ++i) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,285,            data[i] = components.get(i).doubleValue();,0,0,1,1,6,0,4,0,1,5,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,287,"        return new ArrayRealVector(data, false);",1,0,0,0,2,2,0,1,2,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/NonSquareMatrixException,28,40,"        super(LocalizedFormats.NON_SQUARE_MATRIX, wrong, expected);",4,0,0,0,2,1,0,0,1,4,59,3,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/NonSquareMatrixException,28,41,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,368,        subMatrix.walkInOptimizedOrder(new DefaultFieldMatrixChangingVisitor<T>(field.getZero()) {,0,0,0,2,6,1,4,2,1,6,90,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,373,"                return getEntry(selectedRows[row], selectedColumns[column]);",0,0,1,0,6,1,1,0,1,5,60,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,543,            super(Fraction.ZERO);,2,0,0,1,2,1,0,0,1,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,544,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,550,            data = new double[rows][columns];,1,0,1,0,4,2,0,0,1,5,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,551,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,556,            data[row][column] = value.doubleValue();,0,0,1,1,6,0,2,0,1,5,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,557,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,565,"            return new Array2DRowRealMatrix(data, false);",1,0,0,0,2,2,0,1,2,5,45,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,538,    private static class FractionMatrixConverter extends DefaultFieldMatrixPreservingVisitor<Fraction> {,1,0,0,0,1,4,0,2,2,5,100,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,398,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0,0,0,2,6,1,3,2,2,6,82,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,411,                this.startRow    = startRow;,2,0,0,0,0,1,0,0,1,3,28,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,412,                this.startColumn = startColumn;,2,0,0,0,0,1,0,0,1,3,31,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,413,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,418,                destination[row - startRow][column - startColumn] = value;,5,2,1,0,4,0,0,0,1,5,58,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,28,419,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,326,        subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {,0,0,0,1,4,1,2,1,1,6,71,5,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,331,"                return getEntry(selectedRows[row], selectedColumns[column]);",0,0,1,0,6,1,1,0,1,5,60,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,769,        return new Iterator<Entry>() {,0,0,0,1,3,2,0,2,1,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,772,            private int i = 0;,1,0,0,0,0,2,0,0,1,3,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,775,            private Entry e = new Entry();,1,0,0,1,2,2,0,2,2,6,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,779,                return i < dim;,2,1,0,0,0,1,0,0,0,3,15,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,784,                if (i < dim) {,2,1,0,1,3,1,0,0,0,5,14,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,785,                    e.setIndex(i++);,1,0,0,1,2,0,2,0,1,5,16,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,786,                    return e;,1,0,0,0,0,1,0,0,0,2,9,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,788,                    throw new NoSuchElementException();,0,0,0,1,2,2,0,1,1,5,35,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,794,                throw new MathUnsupportedOperationException();,0,0,0,1,2,2,0,1,1,5,46,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1246,                return new Iterator<Entry>() {,0,0,0,1,3,2,0,2,1,5,30,9,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1248,                    private final UnmodifiableEntry e = new UnmodifiableEntry();,1,0,0,1,2,3,0,2,3,6,60,12,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1252,                        return i.hasNext();,0,0,0,1,2,1,2,0,0,4,19,15,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1257,                        e.setIndex(i.next().getIndex());,0,0,0,2,6,0,5,0,0,3,32,15,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1258,                        return e;,1,0,0,0,0,1,0,0,0,2,9,14,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1263,                        throw new MathUnsupportedOperationException();,0,0,0,1,2,2,0,1,1,5,46,14,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,353,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,1,1,1,2,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,366,                this.startRow    = startRow;,2,0,0,0,0,1,0,0,1,3,28,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,367,                this.startColumn = startColumn;,2,0,0,0,0,1,0,0,1,3,31,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,368,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,373,                destination[row - startRow][column - startColumn] = value;,5,2,1,0,4,0,0,0,1,5,58,10,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,374,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,591,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,1,1,1,2,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,596,"                out.setEntry(column, row, value);",0,0,0,0,2,0,5,0,0,2,33,11,0.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,597,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,28,47,"        this(point, value, true);",2,0,0,0,2,1,0,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,28,48,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,28,61,        super(copyArray ? ((point == null) ? null :,2,1,0,1,4,1,0,0,1,6,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,28,65,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,28,73,        final double[] p = getKey();,1,0,0,1,4,2,1,0,2,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,28,74,        return p == null ? null : p.clone();,1,1,0,1,2,1,2,0,0,6,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,28,83,        return getKey();,0,0,0,1,2,1,1,0,1,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,28,91,"        return new DataTransferObject(getKey(), getValue());",0,0,0,1,6,2,2,1,3,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,28,113,"        public DataTransferObject(final double[] point, final double value) {",3,0,0,0,5,5,0,0,3,4,69,3,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,28,114,            this.point = point.clone();,1,0,0,1,2,1,2,0,1,6,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,28,115,            this.value = value;,2,0,0,0,0,1,0,0,1,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,28,116,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,28,122,"            return new PointValuePair(point, value, false);",2,0,0,0,2,2,0,1,2,5,47,5,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,114,            return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,170,            throw new UnboundedSolutionException();,0,0,0,1,2,2,0,1,1,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,198,            return;,0,0,0,0,0,1,0,0,1,2,7,5,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,207,            throw new NoFeasibleSolutionException();,0,0,0,1,2,2,0,1,1,5,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,229,        return tableau.getSolution();,0,0,0,1,2,1,2,0,0,4,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,113,        return maxIterations;,1,0,0,0,0,1,0,0,0,2,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,118,        return iterations;,1,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,128,            throw new MaxCountExceededException(maxIterations);,1,0,0,1,2,2,0,1,1,6,51,6,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/NoFeasibleSolutionException,28,38,        super(LocalizedFormats.NO_FEASIBLE_SOLUTION);,2,0,0,1,2,1,0,0,1,5,45,3,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/NoFeasibleSolutionException,28,39,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/UnboundedSolutionException,28,38,        super(LocalizedFormats.UNBOUNDED_SOLUTION);,2,0,0,1,2,1,0,0,1,5,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/UnboundedSolutionException,28,39,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,28,92,"        return coefficients.dotProduct(new ArrayRealVector(point, false)) + constantTerm;",2,1,0,0,4,2,2,1,2,7,81,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,28,101,        return coefficients.dotProduct(point) + constantTerm;,1,1,0,1,2,1,3,0,0,6,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,28,108,      if (this == other) {,1,1,0,1,3,2,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,28,109,        return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,28,112,      if (other instanceof LinearObjectiveFunction) {,1,0,0,1,3,2,0,1,0,5,47,5,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,28,113,          LinearObjectiveFunction rhs = (LinearObjectiveFunction) other;,2,0,0,1,2,0,0,2,0,4,62,6,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,28,114,          return (constantTerm == rhs.constantTerm) && coefficients.equals(rhs.coefficients);,5,2,0,1,4,1,2,0,0,6,83,6,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,28,117,      return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,28,123,        return Double.valueOf(constantTerm).hashCode() ^ coefficients.hashCode();,0,1,0,1,6,1,6,0,0,5,73,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,28,132,        oos.defaultWriteObject();,0,0,0,1,2,0,2,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,28,133,"        MatrixUtils.serializeRealVector(coefficients, oos);",0,0,0,0,2,0,4,0,0,2,51,5,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,28,134,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,28,143,        ois.defaultReadObject();,0,0,0,1,2,0,2,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,28,144,"        MatrixUtils.deserializeRealVector(this, ""coefficients"", ois);",0,0,0,0,2,1,3,0,1,4,61,5,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,28,145,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,28,57,        switch (this) {,0,0,0,1,3,2,0,0,0,3,15,2,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,28,49,        return stringValue;,1,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,28,57,        switch (this) {,0,0,0,1,3,2,0,0,0,3,15,2,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,28,59,            return GEQ;,1,0,0,0,0,1,0,0,0,2,11,5,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,28,61,            return LEQ;,1,0,0,0,0,1,0,0,0,2,11,5,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,28,63,            return EQ;,1,0,0,0,0,1,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,126,"                            final double[] rhsCoefficients, final double rhsConstant) {",2,0,0,0,4,4,0,0,2,4,59,3,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,127,        double[] sub = new double[lhsCoefficients.length];,3,0,0,0,4,3,0,0,0,3,50,5,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,128,        for (int i = 0; i < sub.length; ++i) {,5,1,0,1,3,2,0,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,129,            sub[i] = lhsCoefficients[i] - rhsCoefficients[i];,0,1,1,0,6,0,0,0,1,4,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,131,"        this.coefficients = new ArrayRealVector(sub, false);",2,0,0,0,2,2,0,1,3,5,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,132,        this.relationship = relationship;,2,0,0,0,0,1,0,0,1,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,133,        this.value        = rhsConstant - lhsConstant;,3,1,0,0,0,1,0,0,1,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,134,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,157,"                            final RealVector rhsCoefficients, final double rhsConstant) {",2,0,0,0,2,3,0,1,2,5,61,3,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,158,        this.coefficients = lhsCoefficients.subtract(rhsCoefficients);,1,0,0,1,2,1,3,0,1,6,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,159,        this.relationship = relationship;,2,0,0,0,0,1,0,0,1,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,160,        this.value        = rhsConstant - lhsConstant;,3,1,0,0,0,1,0,0,1,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,161,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,191,      if (this == other) {,1,1,0,1,3,2,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,192,        return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,195,      if (other instanceof LinearConstraint) {,1,0,0,1,3,2,0,1,0,5,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,196,          LinearConstraint rhs = (LinearConstraint) other;,2,0,0,1,2,0,0,2,0,4,48,6,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,197,          return (relationship == rhs.relationship) &&,3,2,0,1,2,1,0,0,0,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,201,      return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,207,        return relationship.hashCode() ^,0,1,0,1,2,1,2,0,0,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,218,        oos.defaultWriteObject();,0,0,0,1,2,0,2,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,219,"        MatrixUtils.serializeRealVector(coefficients, oos);",0,0,0,0,2,0,4,0,0,2,51,5,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,220,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,229,        ois.defaultReadObject();,0,0,0,1,2,0,2,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,230,"        MatrixUtils.deserializeRealVector(this, ""coefficients"", ois);",0,0,0,0,2,1,3,0,1,4,61,5,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,231,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,122,"        this(f, constraints, goalType, restrictToNonNegative, epsilon, DEFAULT_ULPS);",6,0,0,0,2,1,0,0,0,3,77,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,123,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,167,        columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);,0,0,0,1,2,0,3,0,0,3,44,7,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,204,"            matrix.setEntry(zIndex, getSlackVariableOffset() - 1,",0,1,0,1,3,0,4,0,1,5,53,7,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,220,"                matrix.setEntry(row, getSlackVariableOffset() - 1,",0,1,0,1,3,0,4,0,1,5,50,9,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,229,"                matrix.setEntry(row, getSlackVariableOffset() + slackVar++, 1);  // slack",1,1,0,1,4,0,4,0,2,6,73,9,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,266,"            return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),",0,0,0,1,5,2,3,1,2,6,73,6,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,303,        double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,304,        for (double coefficient : coefficients.toArray()) {,1,0,0,2,5,2,2,0,0,5,51,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,305,            sum -= coefficient;,2,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,307,        return sum;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,334,            return;,0,0,0,0,0,1,0,0,1,2,7,5,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,344,                columnsToDrop.add(i);,0,0,0,1,2,0,3,0,0,3,21,9,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,404,      int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);,1,0,0,1,2,1,3,0,0,5,72,5,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,405,      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;,2,1,0,1,2,0,2,1,1,7,92,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,406,"      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());",2,1,0,1,4,1,3,0,2,7,102,5,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,408,      Set<Integer> basicRows = new HashSet<Integer>();,1,0,0,1,2,1,0,4,1,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,409,      double[] coefficients = new double[getOriginalNumDecisionVariables()];,1,0,0,1,6,3,1,0,1,6,70,5,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,410,      for (int i = 0; i < coefficients.length; i++) {,5,1,0,1,3,2,0,0,1,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,411,"          int colIndex = columnLabels.indexOf(""x"" + i);",2,1,0,1,2,1,2,0,1,7,45,7,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,412,          if (colIndex < 0) {,1,1,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,413,            coefficients[i] = 0;,0,0,1,0,2,0,0,0,1,3,20,8,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,414,            continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,416,          Integer basicRow = getBasicRow(colIndex);,1,0,0,1,2,0,2,1,1,6,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,417,          if (basicRow != null && basicRow == 0) {,2,3,0,1,3,1,0,0,0,5,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,421,              coefficients[i] = 0;,0,0,1,0,2,0,0,0,1,3,20,8,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,422,          } else if (basicRows.contains(basicRow)) {,0,0,0,2,6,2,3,0,0,4,42,8,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,425,              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);,2,1,1,1,4,0,0,0,1,6,65,9,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,427,              basicRows.add(basicRow);,0,0,0,1,2,0,3,0,0,3,24,10,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,428,              coefficients[i] =,0,0,1,0,2,0,0,0,1,3,17,9,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,433,"      return new PointValuePair(coefficients, f.getValue(coefficients));",1,0,0,1,4,2,3,1,1,7,66,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,505,"        tableau.setEntry(row, column, value);",0,0,0,0,2,0,5,0,0,2,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,506,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,543,        return numDecisionVariables;,1,0,0,0,0,1,0,0,0,2,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,576,        return tableau.getData();,0,0,0,1,2,1,2,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,583,      if (this == other) {,1,1,0,1,3,2,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,584,        return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,587,      if (other instanceof SimplexTableau) {,1,0,0,1,3,2,0,1,0,5,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,588,          SimplexTableau rhs = (SimplexTableau) other;,2,0,0,1,2,0,0,2,0,4,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,589,          return (restrictToNonNegative  == rhs.restrictToNonNegative) &&,3,2,0,1,2,1,0,0,0,5,63,6,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,599,      return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,605,        return Boolean.valueOf(restrictToNonNegative).hashCode() ^,0,1,0,1,4,1,4,0,0,5,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,622,        oos.defaultWriteObject();,0,0,0,1,2,0,2,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,623,"        MatrixUtils.serializeRealMatrix(tableau, oos);",0,0,0,0,2,0,4,0,0,2,46,5,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,624,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,633,        ois.defaultReadObject();,0,0,0,1,2,0,2,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,634,"        MatrixUtils.deserializeRealMatrix(this, ""tableau"", ois);",0,0,0,0,2,1,3,0,1,4,56,5,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,635,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
