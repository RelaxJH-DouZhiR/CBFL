dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,other,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,161,        TDistribution tDistribution = new TDistributionImpl(nObs - 2);,2,1,0,1,2,1,0,2,1,7,62,4,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,162,        int nVars = correlationMatrix.getColumnDimension();,1,0,0,1,2,1,2,0,0,5,51,5,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,163,        double[][] out = new double[nVars][nVars];,1,0,1,0,8,3,0,0,0,4,42,5,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,164,        for (int i = 0; i < nVars; i++) {,4,1,0,1,3,2,0,0,1,6,33,4,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,165,            for (int j = 0; j < nVars; j++) {,4,1,0,1,3,2,0,0,1,6,33,6,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,166,                if (i == j) {,2,1,0,1,3,1,0,0,0,5,13,8,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,167,                    out[i][j] = 0d;,0,0,1,0,4,0,0,0,1,3,15,10,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,169,"                    double r = correlationMatrix.getEntry(i, j);",1,0,0,0,2,1,4,0,0,4,44,11,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,170,                    double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));,5,5,0,3,8,1,4,0,0,6,59,11,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,171,                    out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));,0,2,1,2,8,0,3,0,1,6,61,10,0.8,1,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,175,        return new BlockRealMatrix(out);,1,0,0,1,2,2,0,1,1,6,32,4,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,46,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,47,    },0,0,0,0,1,0,0,0,0,1,1,2,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,128,        double p0 = 1.0;,1,0,0,0,0,1,0,0,0,2,16,5,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,129,"        double p1 = getA(0, x);",1,0,0,0,2,1,2,0,1,5,23,5,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,130,        double q0 = 0.0;,1,0,0,0,0,1,0,0,0,2,16,5,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,131,        double q1 = 1.0;,1,0,0,0,0,1,0,0,0,2,16,5,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,132,        double c = p1 / q1;,3,1,0,0,0,1,0,0,0,3,19,5,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,133,        int n = 0;,1,0,0,0,0,1,0,0,0,2,10,5,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,134,        double relativeError = Double.MAX_VALUE;,3,0,0,0,0,1,0,0,0,2,40,5,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,135,        while (n < maxIterations && relativeError > epsilon) {,4,3,0,1,3,1,0,0,0,5,54,4,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,136,            ++n;,1,0,0,0,0,0,0,0,1,2,4,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,137,"            double a = getA(n, x);",1,0,0,0,2,1,3,0,1,5,22,7,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,138,"            double b = getB(n, x);",1,0,0,0,2,1,3,0,1,5,22,7,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,139,            double p2 = a * p1 + b * p0;,5,3,0,0,0,1,0,0,0,3,28,7,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,140,            double q2 = a * q1 + b * q0;,5,3,0,0,0,1,0,0,0,3,28,7,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,141,            boolean infinite = false;,1,0,0,0,0,1,0,0,1,3,25,7,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,142,            if (Double.isInfinite(p2) || Double.isInfinite(q2)) {,0,1,0,2,7,1,6,0,0,5,53,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,175,            if (infinite) {,1,0,0,1,3,1,0,0,0,4,15,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,182,            double r = p2 / q2;,3,1,0,0,0,1,0,0,0,3,19,7,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,184,            if (Double.isNaN(r)) {,0,0,0,2,5,1,3,0,0,4,22,7,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,189,            relativeError = Math.abs(r / c - 1.0);,3,2,0,1,2,0,2,0,1,6,38,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,192,            c = p2 / q2;,3,1,0,0,0,0,0,0,1,3,12,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,193,            p0 = p1;,2,0,0,0,0,0,0,0,1,2,8,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,194,            p1 = p2;,2,0,0,0,0,0,0,0,1,2,8,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,195,            q0 = q1;,2,0,0,0,0,0,0,0,1,2,8,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,196,            q1 = q2;,2,0,0,0,0,0,0,0,1,2,8,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,197,        },0,0,0,0,1,0,0,0,0,1,1,2,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,199,        if (n >= maxIterations) {,2,1,0,1,3,1,0,0,0,5,25,4,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,205,        return c;,1,0,0,0,0,1,0,0,0,2,9,4,0.8,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,128,        if (x == 0.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.8,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,131,            double t =,1,0,0,0,0,1,0,0,0,2,10,7,0.8,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,136,            if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,6,0.8,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,139,                ret = 1.0 - 0.5 * t;,2,2,0,0,0,0,0,0,1,3,20,8,0.8,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,143,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,41,    private static final double[] LANCZOS =,1,0,0,0,2,4,0,0,3,4,39,2,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,61,    private static final double HALF_LOG_2_PI = 0.5 * Math.log(2.0 * Math.PI);,3,2,0,1,2,4,2,0,3,7,74,2,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,97,        if (Double.isNaN(x) || (x <= 0.0)) {,1,2,0,2,7,1,3,0,0,6,36,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,100,            double g = 607.0 / 128.0;,1,1,0,0,0,1,0,0,0,3,25,7,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,102,            double sum = 0.0;,1,0,0,0,0,1,0,0,0,2,17,7,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,103,            for (int i = LANCZOS.length - 1; i > 0; --i) {,5,2,0,1,3,2,0,0,1,6,46,6,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,104,                sum = sum + (LANCZOS[i] / (x + i));,4,3,1,2,6,0,0,0,1,6,35,8,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,106,            sum = sum + LANCZOS[0];,2,1,1,0,2,0,0,0,1,5,23,6,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,108,            double tmp = x + g + .5;,3,1,0,0,0,1,0,0,0,3,24,7,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,109,            ret = ((x + .5) * Math.log(tmp)) - tmp +,3,5,0,2,6,0,3,0,1,6,40,6,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,113,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,54,"        return regularizedBeta(x, a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);",2,0,0,0,2,1,5,0,1,5,68,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,121,        if (Double.isNaN(x) || Double.isNaN(a) || Double.isNaN(b) || (x < 0) ||,1,2,0,1,9,1,9,0,0,6,71,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,125,        } else if (x > (a + 1.0) / (a + b + 2.0)) {,4,4,0,2,8,2,0,0,0,5,43,5,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,128,            ContinuedFraction fraction = new ContinuedFraction() {,1,0,0,1,3,1,0,2,1,6,54,7,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,151,            ret = Math.exp((a * Math.log(x)) + (b * Math.log(1.0 - x)) -,4,8,0,2,9,0,7,0,1,6,60,7,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,156,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,192,        if (Double.isNaN(a) || Double.isNaN(b) || (a <= 0.0) || (b <= 0.0)) {,2,3,0,2,11,1,6,0,0,6,69,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,195,            ret = Gamma.logGamma(a) + Gamma.logGamma(b) -,1,2,0,1,4,0,6,0,1,6,45,6,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,199,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,128,            ContinuedFraction fraction = new ContinuedFraction() {,1,0,0,1,3,1,0,2,1,6,54,7,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,134,                    if (n % 2 == 0) { // even,1,2,0,1,3,1,0,0,0,5,25,13,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,135,                        m = n / 2.0;,2,1,0,0,0,0,0,0,1,3,12,15,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,136,                        ret = (m * (b - m) * x) /,5,3,0,2,4,0,0,0,1,5,25,15,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,139,                        m = (n - 1.0) / 2.0;,2,2,0,1,2,0,0,0,1,5,20,15,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,140,                        ret = -((a + m) * (a + b + m) * x) /,7,4,0,2,6,0,0,0,2,5,36,15,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,143,                    return ret;,1,0,0,0,0,1,0,0,0,2,11,13,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,148,                    return 1.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.8,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1238,            final int iBlock = row    / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.57143,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1239,            final int jBlock = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.57143,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1240,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,4,4,0,1,4,2,2,0,2,7,72,6,0.57143,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1242,            return blocks[iBlock * blockColumns + jBlock][k];,3,2,1,0,4,1,0,0,0,5,49,7,0.57143,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,79,        nObs = matrix.getRowDimension();,1,0,0,1,2,0,2,0,1,5,32,4,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,80,        correlationMatrix = computeCorrelationMatrix(matrix);,1,0,0,1,2,0,2,0,2,5,53,4,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,81,    },0,0,0,0,1,0,0,0,0,1,1,2,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,187,        int nVars = matrix.getColumnDimension();,1,0,0,1,2,1,2,0,0,5,40,5,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,188,"        RealMatrix outMatrix = new BlockRealMatrix(nVars, nVars);",3,0,0,0,2,1,0,2,1,5,57,4,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,189,        for (int i = 0; i < nVars; i++) {,4,1,0,1,3,2,0,0,1,6,33,4,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,190,            for (int j = 0; j < i; j++) {,4,1,0,1,3,2,0,0,1,6,29,6,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,191,"              double corr = correlation(matrix.getColumn(i), matrix.getColumn(j));",1,0,0,1,6,1,7,0,1,6,68,9,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,192,"              outMatrix.setEntry(i, j, corr);",0,0,0,0,2,0,5,0,0,2,31,9,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,193,"              outMatrix.setEntry(j, i, corr);",0,0,0,0,2,0,5,0,0,2,31,9,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,195,"            outMatrix.setEntry(i, i, 1d);",0,0,0,0,2,0,4,0,0,2,29,7,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,197,        return outMatrix;,1,0,0,0,0,1,0,0,0,2,17,4,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,280,    },0,0,0,0,1,0,0,0,0,1,1,2,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,304,        return sumXY / sumXX;,2,1,0,0,0,1,0,0,0,3,21,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1255,            final int iBlock = row    / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1256,            final int jBlock = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1257,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,4,4,0,1,4,2,2,0,2,7,72,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1259,            blocks[iBlock * blockColumns + jBlock][k] = value;,4,2,1,0,4,0,0,0,1,5,50,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1264,        },0,0,0,0,1,0,0,0,0,1,1,2,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1265,    },0,0,0,0,1,0,0,0,0,1,1,2,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,544,        if (column < 0 || column >= m.getColumnDimension()) {,2,3,0,2,5,1,2,0,0,6,53,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,548,    },0,0,0,0,1,0,0,0,0,1,1,2,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,98,"        super(rows, columns);",2,0,0,0,2,1,0,0,1,4,21,3,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,99,        this.rows    = rows;,2,0,0,0,0,1,0,0,1,3,20,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,100,        this.columns = columns;,2,0,0,0,0,1,0,0,1,3,23,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,103,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,4,3,0,1,2,0,0,0,1,5,55,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,104,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,4,3,0,1,2,0,0,0,1,5,55,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,107,"        blocks = createBlocksLayout(rows, columns);",1,0,0,0,2,0,3,0,2,4,43,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,109,    },0,0,0,0,1,0,0,0,0,1,1,2,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,267,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,4,3,0,1,2,2,0,0,1,6,65,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,268,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,4,3,0,1,2,2,0,0,1,6,65,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,270,        final double[][] blocks = new double[blockRows * blockColumns][];,3,1,0,0,8,4,0,0,1,5,65,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,271,        int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,5,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,272,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,273,            final int pStart  = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,40,6,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,274,"            final int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,56,6,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,275,            final int iHeight = pEnd - pStart;,3,1,0,0,0,2,0,0,1,4,34,6,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,276,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,6,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,277,                final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,8,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,278,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,58,8,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,279,                final int jWidth = qEnd - qStart;,3,1,0,0,0,2,0,0,1,4,33,8,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,280,                blocks[blockIndex] = new double[iHeight * jWidth];,2,1,1,0,4,2,0,0,1,6,50,8,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,281,                ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,8,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,285,        return blocks;,1,0,0,0,0,1,0,0,0,2,14,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1185,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,0,2,1,3,0,0,3,43,5,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1186,        final double[] out = new double[rows];,1,0,1,0,4,4,0,0,1,5,38,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1189,        final int jBlock  = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,40,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1190,        final int jColumn = column - jBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,49,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1191,        final int jWidth  = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,39,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1192,        int outIndex      = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1193,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1194,            final int iHeight = blockHeight(iBlock);,1,0,0,1,2,2,2,0,2,6,40,6,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1195,            final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,6,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1196,            for (int i = 0; i < iHeight; ++i) {,4,1,0,1,3,2,0,0,1,6,35,6,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1197,                out[outIndex++] = block[i * jWidth + jColumn];,4,2,1,0,4,0,0,0,2,5,46,8,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1201,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.4,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,77,    public PearsonsCorrelation(RealMatrix matrix) {,2,0,0,1,3,1,0,1,1,6,47,2,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,78,        checkSufficientData(matrix);,0,0,0,1,2,0,2,0,1,4,28,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,227,            for(int i=0; i<xArray.length; i++) {,5,1,0,1,3,2,0,0,1,6,36,6,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,228,"                regression.addData(xArray[i], yArray[i]);",0,0,1,0,6,0,2,0,0,3,41,9,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,230,            return regression.getR();,0,0,0,1,2,1,2,0,0,4,25,7,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,273,        int nRows = matrix.getRowDimension();,1,0,0,1,2,1,2,0,0,5,37,5,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,274,        int nCols = matrix.getColumnDimension();,1,0,0,1,2,1,2,0,0,5,40,5,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,275,        if (nRows < 2 || nCols < 2) {,2,3,0,1,3,1,0,0,0,5,29,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,122,        if (n == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,123,            xbar = x;,2,0,0,0,0,0,0,0,1,2,9,6,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,124,            ybar = y;,2,0,0,0,0,0,0,0,1,2,9,6,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,126,            double dx = x - xbar;,3,1,0,0,0,1,0,0,0,3,21,7,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,127,            double dy = y - ybar;,3,1,0,0,0,1,0,0,0,3,21,7,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,128,            sumXX += dx * dx * (double) n / (n + 1d);,5,3,0,1,4,1,0,0,1,6,41,6,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,129,            sumYY += dy * dy * (double) n / (n + 1d);,5,3,0,1,4,1,0,0,1,6,41,6,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,130,            sumXY += dx * dy * (double) n / (n + 1d);,5,3,0,1,4,1,0,0,1,6,41,6,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,131,            xbar += dx / (n + 1.0);,3,2,0,1,2,0,0,0,1,5,23,6,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,132,            ybar += dy / (n + 1.0);,3,2,0,1,2,0,0,0,1,5,23,6,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,134,        sumX += x;,2,0,0,0,0,0,0,0,1,2,10,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,135,        sumY += y;,2,0,0,0,0,0,0,0,1,2,10,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,136,        n++;,1,0,0,0,0,0,0,0,1,2,4,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,138,        if (n > 2) {,1,1,0,1,3,1,0,0,0,5,12,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,139,            distribution.setDegreesOfFreedom(n - 2);,1,1,0,1,2,0,2,0,0,5,40,7,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,141,    },0,0,0,0,1,0,0,0,0,1,1,2,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,298,        if (n < 2) {,1,1,0,1,3,1,0,0,0,5,12,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,301,        if (Math.abs(sumXX) < 10 * Double.MIN_VALUE) {,2,2,0,2,5,1,3,0,0,6,46,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,337,"        return Math.max(0d, sumYY - sumXY * sumXY / sumXX);",4,3,0,0,2,1,2,0,0,5,51,5,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,351,        if (n < 2) {,1,1,0,1,3,1,0,0,0,5,12,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,354,        return sumYY;,1,0,0,0,0,1,0,0,0,2,13,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,432,        double b1 = getSlope();,1,0,0,1,2,1,1,0,1,6,23,5,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,433,        double result = Math.sqrt(getRSquare());,1,0,0,2,4,1,3,0,1,6,40,5,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,434,        if (b1 < 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,437,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,455,        double ssto = getTotalSumSquares();,1,0,0,1,2,1,1,0,1,6,35,5,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,456,        return (ssto - getSumSquaredErrors()) / ssto;,2,2,0,2,4,1,1,0,1,7,45,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,55,        throws IllegalArgumentException {,1,0,0,0,1,1,0,0,0,3,33,2,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,56,        if (rowDimension <= 0 ) {,1,1,0,1,3,1,0,0,0,5,25,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,61,        if (columnDimension <= 0) {,1,1,0,1,3,1,0,0,0,5,27,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,66,        lu = null;,1,0,0,0,0,0,0,0,1,2,10,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,67,    },0,0,0,0,1,0,0,0,0,1,1,2,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,126,"        this(rawData.length, rawData[0].length, toBlocksLayout(rawData), false);",3,0,1,1,6,1,2,0,2,7,72,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,127,    },0,0,0,0,1,0,0,0,0,1,1,2,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,148,"        super(rows, columns);",2,0,0,0,2,1,0,0,1,4,21,3,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,149,        this.rows    = rows;,2,0,0,0,0,1,0,0,1,3,20,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,150,        this.columns = columns;,2,0,0,0,0,1,0,0,1,3,23,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,153,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,4,3,0,1,2,0,0,0,1,5,55,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,154,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,4,3,0,1,2,0,0,0,1,5,55,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,156,        if (copyArray) {,1,0,0,1,3,1,0,0,0,4,16,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,161,            blocks = blockData;,2,0,0,0,0,0,0,0,1,2,19,6,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,164,        int index = 0;,1,0,0,0,0,1,0,0,0,2,14,5,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,165,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,166,            final int iHeight = blockHeight(iBlock);,1,0,0,1,2,2,2,0,2,6,40,6,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,167,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++index) {",5,1,0,0,3,2,0,0,2,5,64,6,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,168,                if (blockData[index].length != iHeight * blockWidth(jBlock)) {,2,2,1,2,7,1,2,0,1,8,62,8,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,173,                if (copyArray) {,1,0,0,1,3,1,0,0,0,4,16,8,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,179,    },0,0,0,0,1,0,0,0,0,1,1,2,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,206,        final int rows         = rawData.length;,3,0,0,0,0,2,0,0,1,3,40,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,207,        final int columns      = rawData[0].length;,2,0,1,0,2,2,0,0,1,5,43,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,208,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,4,3,0,1,2,2,0,0,1,6,65,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,209,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,4,3,0,1,2,2,0,0,1,6,65,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,212,        for (int i = 0; i < rawData.length; ++i) {,5,1,0,1,3,2,0,0,1,6,42,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,213,            final int length = rawData[i].length;,2,0,1,0,2,2,0,0,1,5,37,6,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,214,            if (length != columns) {,2,1,0,1,3,1,0,0,0,5,24,6,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,222,        final double[][] blocks = new double[blockRows * blockColumns][];,3,1,0,0,8,4,0,0,1,5,65,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,223,        int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,5,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,224,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,225,            final int pStart  = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,40,6,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,226,"            final int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,56,6,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,227,            final int iHeight = pEnd - pStart;,3,1,0,0,0,2,0,0,1,4,34,6,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,228,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,6,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,229,                final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,8,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,230,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,58,8,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,231,                final int jWidth = qEnd - qStart;,3,1,0,0,0,2,0,0,1,4,33,8,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,234,                final double[] block = new double[iHeight * jWidth];,3,1,0,0,4,4,0,0,1,5,52,8,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,235,                blocks[blockIndex] = block;,1,0,1,0,2,0,0,0,1,4,27,8,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,238,                int index = 0;,1,0,0,0,0,1,0,0,0,2,14,9,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,239,                for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,8,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,240,"                    System.arraycopy(rawData[p], qStart, block, index, jWidth);",0,0,1,0,4,0,6,0,0,3,59,11,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,241,                    index += jWidth;,2,0,0,0,0,0,0,0,1,2,16,10,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,244,                ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,8,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,249,        return blocks;,1,0,0,0,0,1,0,0,0,2,14,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1345,        return rows;,1,0,0,0,0,1,0,0,0,2,12,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1351,        return columns;,1,0,0,0,0,1,0,0,0,2,15,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1675,        return (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;,6,4,0,1,2,1,0,0,0,5,79,5,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1684,        return (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;,6,4,0,1,2,1,0,0,0,5,91,5,0.36364,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,81,        setDegreesOfFreedomInternal(degreesOfFreedom);,0,0,0,1,2,0,2,0,1,4,46,4,0.36364,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,82,    },0,0,0,0,1,0,0,0,0,1,1,2,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,225,        SimpleRegression regression = new SimpleRegression();,1,0,0,1,2,1,0,2,1,6,53,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,226,        if(xArray.length == yArray.length && xArray.length > 1) {,6,3,0,1,3,1,0,0,0,5,57,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,94,        this(new TDistributionImpl(1.0));,0,0,0,2,4,2,0,1,1,5,33,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,95,    },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,104,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,65,    private double sumX = 0d;,1,0,0,0,0,2,0,0,1,3,25,2,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,68,    private double sumXX = 0d;,1,0,0,0,0,2,0,0,1,3,26,2,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,71,    private double sumY = 0d;,1,0,0,0,0,2,0,0,1,3,25,2,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,74,    private double sumYY = 0d;,1,0,0,0,0,2,0,0,1,3,26,2,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,77,    private double sumXY = 0d;,1,0,0,0,0,2,0,0,1,3,26,2,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,80,    private long n = 0;,1,0,0,0,0,2,0,0,1,3,19,2,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,83,    private double xbar = 0;,1,0,0,0,0,2,0,0,1,3,24,2,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,86,    private double ybar = 0;,1,0,0,0,0,2,0,0,1,3,24,2,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,105,        setDistribution(t);,0,0,0,1,2,0,2,0,1,4,19,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,106,    },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,614,        distribution = value;,2,0,0,0,0,0,0,0,1,2,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,617,        if (n > 2) {,1,1,0,1,3,1,0,0,0,5,12,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,620,    },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,69,39,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.33333,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,69,40,    },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,69,53,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.33333,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,69,47,    private double solverAbsoluteAccuracy = BrentSolver.DEFAULT_ABSOLUTE_ACCURACY;,3,0,0,0,0,2,0,0,1,3,78,2,0.33333,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,69,54,    },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,61,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.33333,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,62,        setDegreesOfFreedomInternal(degreesOfFreedom);,0,0,0,1,2,0,2,0,1,4,46,4,0.33333,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,63,        solverAbsoluteAccuracy = inverseCumAccuracy;,2,0,0,0,0,0,0,0,1,2,44,4,0.33333,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,64,    },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,71,"        this(degreesOfFreedom, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);",2,0,0,0,2,1,0,0,0,3,58,4,0.33333,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,72,    },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,88,        if (newDegreesOfFreedom <= 0.0) {,1,1,0,1,3,1,0,0,0,5,33,4,0.33333,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,93,        this.degreesOfFreedom = newDegreesOfFreedom;,2,0,0,0,0,1,0,0,1,3,44,4,0.33333,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,94,    },0,0,0,0,1,0,0,0,0,1,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,54,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,55,        correlationMatrix = null;,1,0,0,0,0,0,0,0,1,2,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,56,        nObs = 0;,1,0,0,0,0,0,0,0,1,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,57,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,68,        this(new BlockRealMatrix(data));,1,0,0,2,4,2,0,1,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,69,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,91,    public PearsonsCorrelation(Covariance covariance) {,2,0,0,1,3,1,0,1,1,6,51,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,92,        RealMatrix covarianceMatrix = covariance.getCovarianceMatrix();,1,0,0,1,2,0,2,1,0,5,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,93,        if (covarianceMatrix == null) {,1,1,0,1,3,1,0,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,94,"            throw MathRuntimeException.createIllegalArgumentException(""covariance matrix is null"");",0,0,0,1,2,1,2,0,1,5,87,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,96,        nObs = covariance.getN();,1,0,0,1,2,0,2,0,1,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,97,        correlationMatrix = covarianceToCorrelation(covarianceMatrix);,1,0,0,1,2,0,2,0,2,5,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,98,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,108,"    public PearsonsCorrelation(RealMatrix covarianceMatrix, int numberOfObservations) {",3,0,0,0,3,2,0,1,1,5,83,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,109,        nObs = numberOfObservations;,2,0,0,0,0,0,0,0,1,2,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,110,        correlationMatrix = covarianceToCorrelation(covarianceMatrix);,1,0,0,1,2,0,2,0,2,5,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,112,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,120,        return correlationMatrix;,1,0,0,0,0,1,0,0,0,2,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,136,        int nVars = correlationMatrix.getColumnDimension();,1,0,0,1,2,1,2,0,0,5,51,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,137,        double[][] out = new double[nVars][nVars];,1,0,1,0,8,3,0,0,0,4,42,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,138,        for (int i = 0; i < nVars; i++) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,139,            for (int j = 0; j < nVars; j++) {,4,1,0,1,3,2,0,0,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,140,"                double r = correlationMatrix.getEntry(i, j);",1,0,0,0,2,1,4,0,0,4,44,9,0.0,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,141,                out[i][j] = Math.sqrt((1 - r * r) /(nObs - 2));,3,4,1,2,10,0,2,0,1,7,47,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,144,        return new BlockRealMatrix(out);,1,0,0,1,2,2,0,1,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,209,       return computeCorrelationMatrix(new BlockRealMatrix(data));,1,0,0,2,4,2,1,1,2,7,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,233,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,251,        int nVars = covarianceMatrix.getColumnDimension();,1,0,0,1,2,1,2,0,0,5,50,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,252,"        RealMatrix outMatrix = new BlockRealMatrix(nVars, nVars);",3,0,0,0,2,1,0,2,1,5,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,253,        for (int i = 0; i < nVars; i++) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,254,"            double sigma = Math.sqrt(covarianceMatrix.getEntry(i, i));",1,0,0,0,4,1,6,0,0,4,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,255,"            outMatrix.setEntry(i, i, 1d);",0,0,0,0,2,0,4,0,0,2,29,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,256,            for (int j = 0; j < i; j++) {,4,1,0,1,3,2,0,0,1,6,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,257,"                double entry = covarianceMatrix.getEntry(i, j) /",1,1,0,0,2,1,4,0,0,5,48,9,0.0,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,259,"                outMatrix.setEntry(i, j, entry);",0,0,0,0,2,0,5,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,260,"                outMatrix.setEntry(j, i, entry);",0,0,0,0,2,0,5,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,263,        return outMatrix;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,276,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,69,55,    public MathException() {,1,0,0,1,3,1,0,0,1,5,24,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,69,56,        this.pattern   = null;,1,0,0,0,0,1,0,0,1,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,69,57,        this.arguments = new Object[0];,1,0,0,0,2,2,0,1,1,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,69,58,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,69,67,"    public MathException(String pattern, Object ... arguments) {",3,0,0,0,3,1,0,2,1,5,60,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,69,68,      this.pattern   = pattern;,2,0,0,0,0,1,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,69,69,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,2,1,0,1,6,2,2,1,1,8,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,69,70,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,69,80,        super(rootCause);,1,0,0,1,2,1,0,0,1,5,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,69,81,        this.pattern   = getMessage();,1,0,0,1,2,1,1,0,2,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,69,82,        this.arguments = new Object[0];,1,0,0,0,2,2,0,1,1,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,69,83,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,69,96,      super(rootCause);,1,0,0,1,2,1,0,0,1,5,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,69,97,      this.pattern   = pattern;,2,0,0,0,0,1,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,69,98,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,2,1,0,1,6,2,2,1,1,8,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,69,99,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,69,110,            ResourceBundle bundle =,1,0,0,0,0,0,0,1,0,2,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,69,112,            if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {,0,0,0,3,11,1,6,0,0,4,68,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,69,114,                return bundle.getString(s);,0,0,0,1,2,1,3,0,0,4,27,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,69,119,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,69,117,        } catch (MissingResourceException mre) {,1,0,0,1,4,1,0,1,0,5,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,69,123,        return s;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,69,133,        return pattern;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,69,142,        return arguments.clone();,0,0,0,1,2,1,2,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,69,153,"        return (pattern == null) ? """" : new MessageFormat(translate(pattern, locale), locale).format(arguments);",2,1,0,1,8,2,5,1,3,8,104,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,69,159,        return getMessage(Locale.US);,2,0,0,1,2,1,1,0,1,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,69,165,        return getMessage(Locale.getDefault());,0,0,0,2,4,1,3,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,69,173,        printStackTrace(System.err);,2,0,0,1,2,0,1,0,1,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,69,174,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,69,183,        synchronized (out) {,1,0,0,1,3,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,69,184,"            PrintWriter pw = new PrintWriter(out, false);",2,0,0,0,2,1,0,2,2,5,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,69,185,            printStackTrace(pw);,0,0,0,1,2,0,2,0,1,4,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,69,187,            pw.flush();,0,0,0,1,2,0,2,0,0,3,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,69,188,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,69,189,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,158,        if (n > 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,159,            double dx = x - xbar;,3,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,160,            double dy = y - ybar;,3,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,161,            sumXX -= dx * dx * (double) n / (n - 1d);,5,3,0,1,4,1,0,0,1,6,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,162,            sumYY -= dy * dy * (double) n / (n - 1d);,5,3,0,1,4,1,0,0,1,6,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,163,            sumXY -= dx * dy * (double) n / (n - 1d);,5,3,0,1,4,1,0,0,1,6,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,164,            xbar -= dx / (n - 1.0);,3,2,0,1,2,0,0,0,1,5,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,165,            ybar -= dy / (n - 1.0);,3,2,0,1,2,0,0,0,1,5,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,166,            sumX -= x;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,167,            sumY -= y;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,168,            n--;,1,0,0,0,0,0,0,0,1,2,4,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,170,            if (n > 2) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,171,                distribution.setDegreesOfFreedom(n - 2);,1,1,0,1,2,0,2,0,0,5,40,9,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,174,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,193,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,194,"            addData(data[i][0], data[i][1]);",0,0,1,0,10,0,1,0,1,4,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,196,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,213,        for (int i = 0; i < data.length && n > 0; i++) {,6,3,0,1,3,2,0,0,1,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,214,"            removeData(data[i][0], data[i][1]);",0,0,1,0,10,0,1,0,1,4,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,216,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,222,        sumX = 0d;,1,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,223,        sumXX = 0d;,1,0,0,0,0,0,0,0,1,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,224,        sumY = 0d;,1,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,225,        sumYY = 0d;,1,0,0,0,0,0,0,0,1,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,226,        sumXY = 0d;,1,0,0,0,0,0,0,0,1,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,227,        n = 0;,1,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,228,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,236,        return n;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,257,        double b1 = getSlope();,1,0,0,1,2,1,1,0,1,6,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,258,        return getIntercept(b1) + b1 * x;,2,2,0,1,2,1,2,0,1,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,278,        return getIntercept(getSlope());,0,0,0,2,4,1,2,0,2,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,299,            return Double.NaN; //not enough data,2,0,0,0,0,1,0,0,0,2,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,302,            return Double.NaN; //not enough variation in x,2,0,0,0,0,1,0,0,0,2,46,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,352,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,365,        if (n < 2) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,366,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,368,        return sumXX;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,377,        return sumXY;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,397,        return getRegressionSumSquares(getSlope());,0,0,0,2,4,1,2,0,2,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,411,        if (n < 3) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,412,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,414,        return getSumSquaredErrors() / (n - 2);,1,2,0,1,4,1,1,0,1,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,435,            result = -result;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,471,        return Math.sqrt(,0,0,0,0,1,1,2,0,0,3,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,487,        return Math.sqrt(getMeanSquareError() / sumXX);,1,1,0,2,4,1,3,0,1,7,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,513,        return getSlopeConfidenceInterval(0.05d);,0,0,0,1,2,1,1,0,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,549,        if (alpha >= 1 || alpha <= 0) {,2,3,0,1,3,1,0,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,550,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,554,        return getSlopeStdErr() *,0,1,0,1,2,1,1,0,1,6,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,580,        return 2d * (1.0 - distribution.cumulativeProbability(,0,2,0,0,2,1,2,0,0,4,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,595,        return (sumY - slope * sumX) / n;,4,3,0,1,2,1,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,605,        return slope * slope * sumXX;,3,1,0,0,0,1,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,618,            distribution.setDegreesOfFreedom(n - 2);,1,1,0,1,2,0,2,0,0,5,40,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,44,    protected AbstractFieldMatrix() {,1,0,0,1,3,1,0,0,1,5,33,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,45,        field = null;,1,0,0,0,0,0,0,0,1,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,46,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,52,    protected AbstractFieldMatrix(final Field<T> field) {,2,0,0,1,3,2,0,2,2,6,53,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,53,        this.field = field;,2,0,0,0,0,1,0,0,1,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,54,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,66,        throws IllegalArgumentException {,1,0,0,0,1,1,0,0,0,3,33,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,67,        if (rowDimension <= 0 ) {,1,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,68,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,72,        if (columnDimension <= 0) {,1,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,73,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,77,        this.field = field;,2,0,0,0,0,1,0,0,1,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,78,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,89,        if (d.length == 0) {,2,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,90,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");",0,0,0,1,2,1,2,0,1,5,95,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,92,        if (d[0].length == 0) {,1,1,1,1,5,1,0,0,0,6,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,93,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");",0,0,0,1,2,1,2,0,1,5,98,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,95,        return d[0][0].getField();,0,0,1,1,6,1,1,0,0,5,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,107,        if (d.length == 0) {,2,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,108,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");",0,0,0,1,2,1,2,0,1,5,95,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,110,        return d[0].getField();,0,0,1,1,4,1,1,0,0,5,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,128,        if (columns < 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,129,"            T[] dummyRow = (T[]) Array.newInstance(field.getZero().getClass(), 0);",1,0,0,1,12,0,5,2,0,5,70,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,130,"            return (T[][]) Array.newInstance(dummyRow.getClass(), rows);",0,0,0,1,10,1,5,1,0,5,60,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,132,        T[][] array =,1,0,0,0,4,0,0,1,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,134,        for (int i = 0; i < array.length; ++i) {,5,1,0,1,3,2,0,0,1,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,135,"            Arrays.fill(array[i], field.getZero());",0,0,1,1,6,0,4,0,0,4,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,137,        return array;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,152,"        T[] array = (T[]) Array.newInstance(field.getZero().getClass(), length);",1,0,0,1,12,0,6,2,0,5,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,153,"        Arrays.fill(array, field.getZero());",0,0,0,1,4,0,5,0,0,3,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,154,        return array;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,159,        return field;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,173,        checkAdditionCompatible(m);,0,0,0,1,2,0,2,0,1,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,175,        final int rowCount    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,176,        final int columnCount = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,177,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",1,0,0,0,2,1,3,2,2,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,178,        for (int row = 0; row < rowCount; ++row) {,4,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,179,            for (int col = 0; col < columnCount; ++col) {,4,1,0,1,3,2,0,0,1,6,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,180,"                out.setEntry(row, col, getEntry(row, col).add(m.getEntry(row, col)));",0,0,0,0,8,0,12,0,1,3,69,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,184,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,192,        checkSubtractionCompatible(m);,0,0,0,1,2,0,2,0,1,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,194,        final int rowCount    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,195,        final int columnCount = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,196,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",1,0,0,0,2,1,3,2,2,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,197,        for (int row = 0; row < rowCount; ++row) {,4,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,198,            for (int col = 0; col < columnCount; ++col) {,4,1,0,1,3,2,0,0,1,6,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,199,"                out.setEntry(row, col, getEntry(row, col).subtract(m.getEntry(row, col)));",0,0,0,0,8,0,12,0,1,3,74,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,203,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,210,        final int rowCount    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,211,        final int columnCount = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,212,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",1,0,0,0,2,1,3,2,2,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,213,        for (int row = 0; row < rowCount; ++row) {,4,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,214,            for (int col = 0; col < columnCount; ++col) {,4,1,0,1,3,2,0,0,1,6,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,215,"                out.setEntry(row, col, getEntry(row, col).add(d));",0,0,0,1,6,0,9,0,1,4,50,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,219,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,226,        final int rowCount    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,227,        final int columnCount = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,228,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",1,0,0,0,2,1,3,2,2,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,229,        for (int row = 0; row < rowCount; ++row) {,4,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,230,            for (int col = 0; col < columnCount; ++col) {,4,1,0,1,3,2,0,0,1,6,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,231,"                out.setEntry(row, col, getEntry(row, col).multiply(d));",0,0,0,1,6,0,9,0,1,4,55,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,235,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,244,        checkMultiplicationCompatible(m);,0,0,0,1,2,0,2,0,1,4,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,246,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,247,        final int nCols = m.getColumnDimension();,1,0,0,1,2,2,2,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,248,        final int nSum  = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,249,"        final FieldMatrix<T> out = createMatrix(nRows, nCols);",1,0,0,0,2,1,3,2,2,6,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,250,        for (int row = 0; row < nRows; ++row) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,251,            for (int col = 0; col < nCols; ++col) {,4,1,0,1,3,2,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,252,                T sum = field.getZero();,1,0,0,1,2,0,2,1,0,5,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,253,                for (int i = 0; i < nSum; ++i) {,4,1,0,1,3,2,0,0,1,6,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,254,"                    sum = sum.add(getEntry(row, i).multiply(m.getEntry(i, col)));",1,0,0,0,8,0,10,0,2,4,61,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,256,"                out.setEntry(row, col, sum);",0,0,0,0,2,0,5,0,0,2,28,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,260,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,267,        return m.multiply(this);,0,0,0,1,2,2,2,0,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,273,"        final T[][] data = buildArray(field, getRowDimension(), getColumnDimension());",1,0,0,1,10,1,4,1,4,7,78,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,275,        for (int i = 0; i < data.length; ++i) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,276,            final T[] dataI = data[i];,1,0,1,0,4,1,0,1,1,6,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,277,            for (int j = 0; j < dataI.length; ++j) {,5,1,0,1,3,2,0,0,1,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,278,"                dataI[j] = getEntry(i, j);",0,0,1,0,4,0,3,0,2,4,26,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,282,        return data;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,291,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,5,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,293,        final FieldMatrix<T> subMatrix =,1,0,0,0,0,1,0,2,1,4,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,295,        for (int i = startRow; i <= endRow; ++i) {,5,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,296,            for (int j = startColumn; j <= endColumn; ++j) {,5,1,0,1,3,2,0,0,1,6,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,297,"                subMatrix.setEntry(i - startRow, j - startColumn, getEntry(i, j));",4,2,0,0,4,0,5,0,1,5,66,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,301,        return subMatrix;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,310,"        checkSubMatrixIndex(selectedRows, selectedColumns);",0,0,0,0,2,0,3,0,1,3,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,313,        final FieldMatrix<T> subMatrix =,1,0,0,0,0,1,0,2,1,4,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,315,        subMatrix.walkInOptimizedOrder(new DefaultFieldMatrixChangingVisitor<T>(field.getZero()) {,0,0,0,2,6,1,4,2,1,6,90,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,325,        return subMatrix;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,336,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,5,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,337,        final int rowsCount    = endRow + 1 - startRow;,3,2,0,0,0,2,0,0,1,4,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,338,        final int columnsCount = endColumn + 1 - startColumn;,3,2,0,0,0,2,0,0,1,4,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,339,        if ((destination.length < rowsCount) || (destination[0].length < columnsCount)) {,5,3,1,2,9,1,0,0,0,6,81,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,340,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,347,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0,0,0,2,6,1,3,2,2,6,82,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,372,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,379,"        checkSubMatrixIndex(selectedRows, selectedColumns);",0,0,0,0,2,0,3,0,1,3,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,380,        if ((destination.length < selectedRows.length) ||,4,2,0,1,3,1,0,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,382,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,389,        for (int i = 0; i < selectedRows.length; i++) {,5,1,0,1,3,2,0,0,1,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,390,            final T[] destinationI = destination[i];,1,0,1,0,4,1,0,1,1,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,391,            for (int j = 0; j < selectedColumns.length; j++) {,5,1,0,1,3,2,0,0,1,6,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,392,"                destinationI[j] = getEntry(selectedRows[i], selectedColumns[j]);",0,0,1,0,8,0,1,0,2,4,64,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,396,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,402,        final int nRows = subMatrix.length;,3,0,0,0,0,2,0,0,1,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,403,        if (nRows == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,404,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");",0,0,0,1,2,1,2,0,1,5,95,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,407,        final int nCols = subMatrix[0].length;,2,0,1,0,2,2,0,0,1,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,408,        if (nCols == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,409,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");",0,0,0,1,2,1,2,0,1,5,98,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,412,        for (int r = 1; r < nRows; ++r) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,413,            if (subMatrix[r].length != nCols) {,2,1,1,1,5,1,0,0,0,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,414,                throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,420,        checkRowIndex(row);,0,0,0,1,2,0,2,0,1,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,421,        checkColumnIndex(column);,0,0,0,1,2,0,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,422,        checkRowIndex(nRows + row - 1);,2,2,0,1,2,0,1,0,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,423,        checkColumnIndex(nCols + column - 1);,2,2,0,1,2,0,1,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,425,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,426,            for (int j = 0; j < nCols; ++j) {,4,1,0,1,3,2,0,0,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,427,"                setEntry(row + i, column + j, subMatrix[i][j]);",4,2,1,0,6,0,1,0,1,6,47,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,431,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,437,        checkRowIndex(row);,0,0,0,1,2,0,2,0,1,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,438,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,439,"        final FieldMatrix<T> out = createMatrix(1, nCols);",1,0,0,0,2,1,2,2,2,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,440,        for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,441,"            out.setEntry(0, i, getEntry(row, i));",0,0,0,0,4,0,6,0,1,3,37,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,444,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,452,        checkRowIndex(row);,0,0,0,1,2,0,2,0,1,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,453,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,454,        if ((matrix.getRowDimension() != 1) ||,0,2,0,2,5,1,2,0,0,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,456,            throw new InvalidMatrixException(,0,0,0,0,1,2,0,1,1,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,460,        for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,461,"            setEntry(row, i, matrix.getEntry(0, i));",0,0,0,0,4,0,6,0,1,3,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,464,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,470,        checkColumnIndex(column);,0,0,0,1,2,0,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,471,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,472,"        final FieldMatrix<T> out = createMatrix(nRows, 1);",1,0,0,0,2,1,2,2,2,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,473,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,474,"            out.setEntry(i, 0, getEntry(i, column));",0,0,0,0,4,0,6,0,1,3,40,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,477,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,485,        checkColumnIndex(column);,0,0,0,1,2,0,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,486,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,487,        if ((matrix.getRowDimension() != nRows) ||,1,2,0,2,5,1,2,0,0,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,489,            throw new InvalidMatrixException(,0,0,0,0,1,2,0,1,1,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,493,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,494,"            setEntry(i, column, matrix.getEntry(i, 0));",0,0,0,0,4,0,6,0,1,3,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,497,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,502,"        return new ArrayFieldVector<T>(getRow(row), false);",0,0,0,1,4,2,2,2,3,6,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,509,        checkRowIndex(row);,0,0,0,1,2,0,2,0,1,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,510,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,511,        if (vector.getDimension() != nCols) {,1,1,0,2,5,1,2,0,0,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,512,            throw new InvalidMatrixException(,0,0,0,0,1,2,0,1,1,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,516,        for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,517,"            setEntry(row, i, vector.getEntry(i));",0,0,0,1,4,0,6,0,1,4,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,520,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,525,"        return new ArrayFieldVector<T>(getColumn(column), false);",0,0,0,1,4,2,2,2,3,6,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,532,        checkColumnIndex(column);,0,0,0,1,2,0,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,533,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,534,        if (vector.getDimension() != nRows) {,1,1,0,2,5,1,2,0,0,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,535,            throw new InvalidMatrixException(,0,0,0,0,1,2,0,1,1,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,539,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,540,"            setEntry(i, column, vector.getEntry(i));",0,0,0,1,4,0,6,0,1,4,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,543,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,549,        checkRowIndex(row);,0,0,0,1,2,0,2,0,1,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,550,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,551,"        final T[] out = buildArray(field, nCols);",1,0,0,0,4,1,3,1,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,552,        for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,553,"            out[i] = getEntry(row, i);",0,0,1,0,4,0,3,0,2,4,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,556,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,564,        checkRowIndex(row);,0,0,0,1,2,0,2,0,1,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,565,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,566,        if (array.length != nCols) {,3,1,0,1,3,1,0,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,567,            throw new InvalidMatrixException(,0,0,0,0,1,2,0,1,1,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,571,        for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,572,"            setEntry(row, i, array[i]);",0,0,1,0,4,0,3,0,1,4,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,575,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,581,        checkColumnIndex(column);,0,0,0,1,2,0,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,582,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,583,"        final T[] out = buildArray(field, nRows);",1,0,0,0,4,1,3,1,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,584,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,585,"            out[i] = getEntry(i, column);",0,0,1,0,4,0,3,0,2,4,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,588,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,596,        checkColumnIndex(column);,0,0,0,1,2,0,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,597,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,598,        if (array.length != nRows) {,3,1,0,1,3,1,0,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,599,            throw new InvalidMatrixException(,0,0,0,0,1,2,0,1,1,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,603,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,604,"            setEntry(i, column, array[i]);",0,0,1,0,4,0,3,0,1,4,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,607,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,628,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,629,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,630,"        final FieldMatrix<T> out = createMatrix(nCols, nRows);",1,0,0,0,2,1,3,2,2,6,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,631,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0,0,0,2,6,1,3,2,2,6,82,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,641,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,647,        return getColumnDimension() == getRowDimension();,0,1,0,1,4,1,2,0,2,6,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,659,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,660,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,661,        if (nRows != nCols) {,2,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,662,"            throw new NonSquareMatrixException(nRows, nCols);",2,0,0,0,2,2,0,1,1,5,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,664,        T trace = field.getZero();,1,0,0,1,2,0,2,1,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,665,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,666,"            trace = trace.add(getEntry(i, i));",1,0,0,0,4,0,5,0,2,4,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,668,        return trace;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,675,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,676,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,677,        if (v.length != nCols) {,3,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,678,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,683,"        final T[] out = buildArray(field, nRows);",1,0,0,0,4,1,3,1,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,684,        for (int row = 0; row < nRows; ++row) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,685,            T sum = field.getZero();,1,0,0,1,2,0,2,1,0,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,686,            for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,687,"                sum = sum.add(getEntry(row, i).multiply(v[i]));",1,0,1,1,8,0,6,0,2,6,47,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,689,            out[row] = sum;,1,0,1,0,2,0,0,0,1,4,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,692,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,700,"            return new ArrayFieldVector<T>(operate(((ArrayFieldVector<T>) v).getDataRef()), false);",1,0,0,3,10,2,2,4,3,7,87,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,701,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,702,            final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,703,            final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,704,            if (v.getDimension() != nCols) {,1,1,0,2,5,1,2,0,0,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,705,                throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,710,"            final T[] out = buildArray(field, nRows);",1,0,0,0,4,1,3,1,2,6,41,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,711,            for (int row = 0; row < nRows; ++row) {,4,1,0,1,3,2,0,0,1,6,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,712,                T sum = field.getZero();,1,0,0,1,2,0,2,1,0,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,713,                for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,714,"                    sum = sum.add(getEntry(row, i).multiply(v.getEntry(i)));",1,0,0,2,8,0,9,0,2,5,56,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,716,                out[row] = sum;,1,0,1,0,2,0,0,0,1,4,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,719,"            return new ArrayFieldVector<T>(out, false);",1,0,0,0,2,2,0,2,2,5,43,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,727,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,728,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,729,        if (v.length != nRows) {,3,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,730,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,735,"        final T[] out = buildArray(field, nCols);",1,0,0,0,4,1,3,1,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,736,        for (int col = 0; col < nCols; ++col) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,737,            T sum = field.getZero();,1,0,0,1,2,0,2,1,0,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,738,            for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,739,"                sum = sum.add(getEntry(i, col).multiply(v[i]));",1,0,1,1,8,0,6,0,2,6,47,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,741,            out[col] = sum;,1,0,1,0,2,0,0,0,1,4,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,744,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,752,"            return new ArrayFieldVector<T>(preMultiply(((ArrayFieldVector<T>) v).getDataRef()), false);",1,0,0,3,10,2,2,4,3,7,91,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,753,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,755,            final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,756,            final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,757,            if (v.getDimension() != nRows) {,1,1,0,2,5,1,2,0,0,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,758,                throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,763,"            final T[] out = buildArray(field, nCols);",1,0,0,0,4,1,3,1,2,6,41,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,764,            for (int col = 0; col < nCols; ++col) {,4,1,0,1,3,2,0,0,1,6,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,765,                T sum = field.getZero();,1,0,0,1,2,0,2,1,0,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,766,                for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,767,"                    sum = sum.add(getEntry(i, col).multiply(v.getEntry(i)));",1,0,0,2,8,0,9,0,2,5,56,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,769,                out[col] = sum;,1,0,1,0,2,0,0,0,1,4,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,772,            return new ArrayFieldVector<T>(out);,1,0,0,1,2,2,0,2,1,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,780,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,781,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,782,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,783,        for (int row = 0; row < rows; ++row) {,4,1,0,1,3,2,0,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,784,            for (int column = 0; column < columns; ++column) {,4,1,0,1,3,2,0,0,1,6,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,785,"                final T oldValue = getEntry(row, column);",1,0,0,0,2,1,3,1,2,6,41,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,786,"                final T newValue = visitor.visit(row, column, oldValue);",1,0,0,0,2,1,5,1,1,6,56,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,787,"                setEntry(row, column, newValue);",0,0,0,0,2,0,4,0,1,3,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,790,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,796,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,797,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,798,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,799,        for (int row = 0; row < rows; ++row) {,4,1,0,1,3,2,0,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,800,            for (int column = 0; column < columns; ++column) {,4,1,0,1,3,2,0,0,1,6,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,801,"                visitor.visit(row, column, getEntry(row, column));",0,0,0,0,4,0,7,0,1,3,50,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,804,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,812,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,5,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,813,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,815,        for (int row = startRow; row <= endRow; ++row) {,5,1,0,1,3,2,0,0,1,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,816,            for (int column = startColumn; column <= endColumn; ++column) {,5,1,0,1,3,2,0,0,1,6,63,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,817,"                final T oldValue = getEntry(row, column);",1,0,0,0,2,1,3,1,2,6,41,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,818,"                final T newValue = visitor.visit(row, column, oldValue);",1,0,0,0,2,1,5,1,1,6,56,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,819,"                setEntry(row, column, newValue);",0,0,0,0,2,0,4,0,1,3,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,822,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,830,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,5,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,831,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,833,        for (int row = startRow; row <= endRow; ++row) {,5,1,0,1,3,2,0,0,1,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,834,            for (int column = startColumn; column <= endColumn; ++column) {,5,1,0,1,3,2,0,0,1,6,63,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,835,"                visitor.visit(row, column, getEntry(row, column));",0,0,0,0,4,0,7,0,1,3,50,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,838,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,844,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,845,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,846,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,847,        for (int column = 0; column < columns; ++column) {,4,1,0,1,3,2,0,0,1,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,848,            for (int row = 0; row < rows; ++row) {,4,1,0,1,3,2,0,0,1,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,849,"                final T oldValue = getEntry(row, column);",1,0,0,0,2,1,3,1,2,6,41,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,850,"                final T newValue = visitor.visit(row, column, oldValue);",1,0,0,0,2,1,5,1,1,6,56,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,851,"                setEntry(row, column, newValue);",0,0,0,0,2,0,4,0,1,3,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,854,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,860,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,861,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,862,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,863,        for (int column = 0; column < columns; ++column) {,4,1,0,1,3,2,0,0,1,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,864,            for (int row = 0; row < rows; ++row) {,4,1,0,1,3,2,0,0,1,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,865,"                visitor.visit(row, column, getEntry(row, column));",0,0,0,0,4,0,7,0,1,3,50,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,868,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,876,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,5,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,877,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,879,        for (int column = startColumn; column <= endColumn; ++column) {,5,1,0,1,3,2,0,0,1,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,880,            for (int row = startRow; row <= endRow; ++row) {,5,1,0,1,3,2,0,0,1,6,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,881,"                final T oldValue = getEntry(row, column);",1,0,0,0,2,1,3,1,2,6,41,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,882,"                final T newValue = visitor.visit(row, column, oldValue);",1,0,0,0,2,1,5,1,1,6,56,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,883,"                setEntry(row, column, newValue);",0,0,0,0,2,0,4,0,1,3,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,886,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,894,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,5,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,895,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,897,        for (int column = startColumn; column <= endColumn; ++column) {,5,1,0,1,3,2,0,0,1,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,898,            for (int row = startRow; row <= endRow; ++row) {,5,1,0,1,3,2,0,0,1,6,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,899,"                visitor.visit(row, column, getEntry(row, column));",0,0,0,0,4,0,7,0,1,3,50,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,902,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,908,        return walkInRowOrder(visitor);,0,0,0,1,2,1,2,0,1,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,914,        return walkInRowOrder(visitor);,0,0,0,1,2,1,2,0,1,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,922,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,1,4,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,930,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,1,4,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,939,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,940,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,941,        final StringBuffer res = new StringBuffer();,1,0,0,1,2,2,0,2,2,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,942,        String fullClassName = getClass().getName();,1,0,0,1,4,0,2,1,1,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,943,        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);,1,1,0,2,4,0,4,1,1,7,84,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,944,"        res.append(shortClassName).append(""{"");",0,0,0,1,5,0,4,0,1,4,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,946,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,947,            if (i > 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,948,"                res.append("","");",0,0,0,0,2,0,2,0,1,3,16,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,950,"            res.append(""{"");",0,0,0,1,3,0,2,0,1,4,16,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,951,            for (int j = 0; j < nCols; ++j) {,4,1,0,1,3,2,0,0,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,952,                if (j > 0) {,1,1,0,1,3,1,0,0,0,5,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,953,"                    res.append("","");",0,0,0,0,2,0,2,0,1,3,16,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,955,"                res.append(getEntry(i, j));",0,0,0,0,4,0,5,0,1,3,27,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,957,"            res.append(""}"");",0,0,0,1,3,0,2,0,1,4,16,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,960,"        res.append(""}"");",0,0,0,1,3,0,2,0,1,4,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,961,        return res.toString();,0,0,0,1,2,1,2,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,975,        if (object == this ) {,1,1,0,1,3,2,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,976,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,978,        if (object instanceof FieldMatrix<?> == false) {,1,1,0,1,3,2,0,1,1,7,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,979,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,981,        FieldMatrix<?> m = (FieldMatrix<?>) object;,2,0,0,1,2,0,0,2,0,4,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,982,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,983,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,984,        if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {,2,3,0,2,7,1,4,0,0,6,70,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,985,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,987,        for (int row = 0; row < nRows; ++row) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,988,            for (int col = 0; col < nCols; ++col) {,4,1,0,1,3,2,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,989,"                if (!getEntry(row, col).equals(m.getEntry(row, col))) {",0,0,0,0,9,1,8,0,2,4,55,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,990,                    return false;,0,0,0,0,0,1,0,0,1,2,13,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,994,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,1004,        int ret = 322562;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,1005,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,1006,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,1007,        ret = ret * 31 + nRows;,3,2,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,1008,        ret = ret * 31 + nCols;,3,2,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,1009,        for (int row = 0; row < nRows; ++row) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,1010,            for (int col = 0; col < nCols; ++col) {,4,1,0,1,3,2,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,1011,"               ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) * getEntry(row, col).hashCode();",4,8,0,2,10,0,4,0,2,6,79,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,1014,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,1023,        if (row < 0 || row >= getRowDimension()) {,2,3,0,2,5,1,1,0,1,7,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,1024,"            throw new MatrixIndexException(""row index {0} out of allowed range [{1}, {2}]"",",0,0,0,0,9,2,0,1,2,4,79,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,1027,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,1036,        if (column < 0 || column >= getColumnDimension()) {,2,3,0,2,5,1,1,0,1,7,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,1037,"            throw new MatrixIndexException(""column index {0} out of allowed range [{1}, {2}]"",",0,0,0,0,9,2,0,1,2,4,82,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,1040,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,1054,        checkRowIndex(startRow);,0,0,0,1,2,0,2,0,1,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,1055,        checkRowIndex(endRow);,0,0,0,1,2,0,2,0,1,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,1056,        if (startRow > endRow) {,2,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,1057,"            throw new MatrixIndexException(""initial row {0} after final row {1}"",",0,0,0,0,5,3,0,1,2,4,69,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,1061,        checkColumnIndex(startColumn);,0,0,0,1,2,0,2,0,1,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,1062,        checkColumnIndex(endColumn);,0,0,0,1,2,0,2,0,1,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,1063,        if (startColumn > endColumn) {,2,1,0,1,3,1,0,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,1064,"            throw new MatrixIndexException(""initial column {0} after final column {1}"",",0,0,0,0,5,3,0,1,2,4,75,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,1069,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,1080,        if (selectedRows.length * selectedColumns.length == 0) {,4,2,0,1,3,1,0,0,0,5,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,1081,            if (selectedRows.length == 0) {,2,1,0,1,3,1,0,0,0,5,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,1082,"                throw new MatrixIndexException(""empty selected row index array"");",0,0,0,1,2,2,0,1,2,5,65,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,1084,"            throw new MatrixIndexException(""empty selected column index array"");",0,0,0,1,2,2,0,1,2,5,68,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,1087,        for (final int row : selectedRows) {,2,0,0,1,3,3,0,0,1,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,1088,            checkRowIndex(row);,0,0,0,1,2,0,2,0,1,4,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,1090,        for (final int column : selectedColumns) {,2,0,0,1,3,3,0,0,1,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,1091,            checkColumnIndex(column);,0,0,0,1,2,0,2,0,1,4,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,1093,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,1101,        if ((getRowDimension()    != m.getRowDimension()) ||,0,2,0,2,7,1,3,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,1103,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,1108,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,1116,        if ((getRowDimension()    != m.getRowDimension()) ||,0,2,0,2,7,1,3,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,1118,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,1123,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,1131,        if (getColumnDimension() != m.getRowDimension()) {,0,1,0,2,7,1,3,0,1,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,1132,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,1137,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/NonSquareMatrixException,69,37,"        super(""a {0}x{1} matrix was provided instead of a square matrix"",",0,0,0,0,5,1,0,0,2,3,65,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/NonSquareMatrixException,69,39,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/InvalidMatrixException,69,40,"        super(pattern, arguments);",2,0,0,0,2,1,0,0,1,4,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/InvalidMatrixException,69,41,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/InvalidMatrixException,69,50,        super(cause);,1,0,0,1,2,1,0,0,1,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/InvalidMatrixException,69,51,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,59,"    public MathRuntimeException(final String pattern, final Object ... arguments) {",3,0,0,0,3,3,0,2,3,5,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,60,        this.pattern   = pattern;,2,0,0,0,0,1,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,61,        this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,2,1,0,1,6,2,2,1,1,8,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,62,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,72,        super(rootCause);,1,0,0,1,2,1,0,0,1,5,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,73,        this.pattern   = getMessage();,1,0,0,1,2,1,1,0,2,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,74,        this.arguments = new Object[0];,1,0,0,0,2,2,0,1,1,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,75,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,88,        super(rootCause);,1,0,0,1,2,1,0,0,1,5,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,89,        this.pattern   = pattern;,2,0,0,0,0,1,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,90,        this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,2,1,0,1,6,2,2,1,1,8,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,91,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,102,            ResourceBundle bundle =,1,0,0,0,0,0,0,1,0,2,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,104,            if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {,0,0,0,3,11,1,6,0,0,4,68,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,106,                return bundle.getString(s);,0,0,0,1,2,1,3,0,0,4,27,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,111,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,109,        } catch (MissingResourceException mre) {,1,0,0,1,4,1,0,1,0,5,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,115,        return s;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,128,"        return (pattern == null) ? """" : new MessageFormat(translate(pattern, locale), locale).format(arguments);",2,1,0,1,8,2,5,1,3,8,104,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,136,        return pattern;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,144,        return arguments.clone();,0,0,0,1,2,1,2,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,154,"        return buildMessage(locale, pattern, arguments);",0,0,0,0,2,1,4,0,1,4,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,160,        return getMessage(Locale.US);,2,0,0,1,2,1,1,0,1,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,166,        return getMessage(Locale.getDefault());,0,0,0,2,4,1,3,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,174,        printStackTrace(System.err);,2,0,0,1,2,0,1,0,1,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,175,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,184,        synchronized (out) {,1,0,0,1,3,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,185,"            PrintWriter pw = new PrintWriter(out, false);",2,0,0,0,2,1,0,2,2,5,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,186,            printStackTrace(pw);,0,0,0,1,2,0,2,0,1,4,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,188,            pw.flush();,0,0,0,1,2,0,2,0,0,3,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,189,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,190,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,201,        return new ArithmeticException() {,0,0,0,1,3,2,0,1,1,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,230,        return new ArrayIndexOutOfBoundsException() {,0,0,0,1,3,2,0,1,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,259,        return new EOFException() {,0,0,0,1,3,2,0,1,1,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,291,        IOException ioe = new IOException(rootCause.getLocalizedMessage());,1,0,0,2,4,1,2,2,1,7,67,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,292,        ioe.initCause(rootCause);,0,0,0,1,2,0,3,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,293,        return ioe;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,305,        return new IllegalArgumentException() {,0,0,0,1,3,2,0,1,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,333,        IllegalArgumentException iae = new IllegalArgumentException(rootCause.getLocalizedMessage());,1,0,0,2,4,1,2,2,1,7,93,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,334,        iae.initCause(rootCause);,0,0,0,1,2,0,3,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,335,        return iae;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,347,        return new IllegalStateException() {,0,0,0,1,3,2,0,1,1,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,376,        return new ConcurrentModificationException() {,0,0,0,1,3,2,0,1,1,5,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,405,        return new NoSuchElementException() {,0,0,0,1,3,2,0,1,1,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,434,        return new NullPointerException() {,0,0,0,1,3,2,0,1,1,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,466,"        return new ParseException(null, offset) {",1,0,0,0,3,2,0,1,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,492,"        final String pattern  = ""internal error, please fill a bug report at {0}"";",1,0,0,0,2,1,0,1,2,5,74,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,493,"        final String argument = ""https://issues.apache.org/jira/browse/MATH"";",1,0,0,0,0,1,0,1,2,4,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,495,        return new RuntimeException() {,0,0,0,1,3,2,0,1,1,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,37,public class MathRuntimeException extends RuntimeException {,1,0,0,0,1,3,0,1,1,5,60,1,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,259,        return new EOFException() {,0,0,0,1,3,2,0,1,1,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,267,"                return buildMessage(Locale.US, pattern, arguments);",2,0,0,0,2,1,3,0,1,5,51,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,273,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,201,        return new ArithmeticException() {,0,0,0,1,3,2,0,1,1,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,209,"                return buildMessage(Locale.US, pattern, arguments);",2,0,0,0,2,1,3,0,1,5,51,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,215,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,230,        return new ArrayIndexOutOfBoundsException() {,0,0,0,1,3,2,0,1,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,238,"                return buildMessage(Locale.US, pattern, arguments);",2,0,0,0,2,1,3,0,1,5,51,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,244,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,305,        return new IllegalArgumentException() {,0,0,0,1,3,2,0,1,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,313,"                return buildMessage(Locale.US, pattern, arguments);",2,0,0,0,2,1,3,0,1,5,51,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,319,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,495,        return new RuntimeException() {,0,0,0,1,3,2,0,1,1,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,503,"                return buildMessage(Locale.US, pattern, argument);",2,0,0,0,2,1,3,0,1,5,50,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,509,"                return buildMessage(Locale.getDefault(), pattern, argument);",0,0,0,1,4,1,5,0,1,5,60,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,466,"        return new ParseException(null, offset) {",1,0,0,0,3,2,0,1,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,474,"                return buildMessage(Locale.US, pattern, arguments);",2,0,0,0,2,1,3,0,1,5,51,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,480,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,434,        return new NullPointerException() {,0,0,0,1,3,2,0,1,1,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,442,"                return buildMessage(Locale.US, pattern, arguments);",2,0,0,0,2,1,3,0,1,5,51,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,448,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,405,        return new NoSuchElementException() {,0,0,0,1,3,2,0,1,1,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,413,"                return buildMessage(Locale.US, pattern, arguments);",2,0,0,0,2,1,3,0,1,5,51,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,419,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,376,        return new ConcurrentModificationException() {,0,0,0,1,3,2,0,1,1,5,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,384,"                return buildMessage(Locale.US, pattern, arguments);",2,0,0,0,2,1,3,0,1,5,51,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,390,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,347,        return new IllegalStateException() {,0,0,0,1,3,2,0,1,1,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,355,"                return buildMessage(Locale.US, pattern, arguments);",2,0,0,0,2,1,3,0,1,5,51,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,69,361,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,44,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,45,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,61,        return (rows * columns <= 4096) ?,2,2,0,1,2,1,0,0,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,83,        return (rows * columns <= 4096) ?,2,2,0,1,2,1,0,0,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,106,        return (data.length * data[0].length <= 4096) ?,3,2,1,1,4,1,0,0,0,6,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,129,        return (data.length * data[0].length <= 4096) ?,3,2,1,1,4,1,0,0,0,6,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,142,"        final RealMatrix m = createRealMatrix(dimension, dimension);",1,0,0,0,2,1,3,1,2,6,60,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,143,        for (int i = 0; i < dimension; ++i) {,4,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,144,"            m.setEntry(i, i, 1.0);",0,0,0,0,2,0,4,0,0,2,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,146,        return m;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,161,        final T zero = field.getZero();,1,0,0,1,2,1,2,1,1,7,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,162,        final T one  = field.getOne();,1,0,0,1,2,1,2,1,1,7,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,164,"        final T[][] d = (T[][]) Array.newInstance(zero.getClass(), new int[] { dimension, dimension });",3,0,0,1,18,3,4,2,1,7,95,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,165,        for (int row = 0; row < dimension; row++) {,4,1,0,1,3,2,0,0,1,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,166,            final T[] dRow = d[row];,1,0,1,0,4,1,0,1,1,6,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,167,"            Arrays.fill(dRow, zero);",0,0,0,0,2,0,4,0,0,2,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,168,            dRow[row] = one;,1,0,1,0,2,0,0,0,1,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,170,"        return new Array2DRowFieldMatrix<T>(d, false);",1,0,0,0,2,2,0,2,2,5,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,184,        final BigDecimal[][] d = new BigDecimal[dimension][dimension];,1,0,1,0,8,2,0,2,1,6,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,185,        for (int row = 0; row < dimension; row++) {,4,1,0,1,3,2,0,0,1,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,186,            final BigDecimal[] dRow = d[row];,1,0,1,0,4,1,0,1,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,187,"            Arrays.fill(dRow, BigMatrixImpl.ZERO);",2,0,0,0,2,0,3,0,0,3,38,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,188,            dRow[row] = BigMatrixImpl.ONE;,2,0,1,0,2,0,0,0,1,4,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,190,"        return new BigMatrixImpl(d, false);",1,0,0,0,2,2,0,1,2,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,202,"        final RealMatrix m = createRealMatrix(diagonal.length, diagonal.length);",5,0,0,0,2,1,1,1,2,6,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,203,        for (int i = 0; i < diagonal.length; ++i) {,5,1,0,1,3,2,0,0,1,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,204,"            m.setEntry(i, i, diagonal[i]);",0,0,1,0,4,0,4,0,0,3,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,206,        return m;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,220,        final FieldMatrix<T> m =,1,0,0,0,0,1,0,2,1,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,222,        for (int i = 0; i < diagonal.length; ++i) {,5,1,0,1,3,2,0,0,1,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,223,"            m.setEntry(i, i, diagonal[i]);",0,0,1,0,4,0,4,0,0,3,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,225,        return m;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,241,        return new BigMatrixImpl(data);,1,0,0,1,2,2,0,1,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,257,        return new BigMatrixImpl(data);,1,0,0,1,2,2,0,1,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,279,"        return new BigMatrixImpl(data, copyArray);",2,0,0,0,2,2,0,1,1,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,295,        return new BigMatrixImpl(data);,1,0,0,1,2,2,0,1,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,307,"        return new ArrayRealVector(data, true);",1,0,0,0,2,2,0,1,2,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,320,"        return new ArrayFieldVector<T>(data, true);",1,0,0,0,2,2,0,2,2,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,333,        final int nCols = rowData.length;,3,0,0,0,0,2,0,0,1,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,334,"        final RealMatrix m = createRealMatrix(1, nCols);",1,0,0,0,2,1,2,1,2,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,335,        for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,336,"            m.setEntry(0, i, rowData[i]);",0,0,1,0,4,0,3,0,0,3,29,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,338,        return m;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,353,        final int nCols = rowData.length;,3,0,0,0,0,2,0,0,1,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,354,        if (nCols == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,355,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");",0,0,0,1,2,1,2,0,1,5,98,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,357,"        final FieldMatrix<T> m = createFieldMatrix(rowData[0].getField(), 1, nCols);",1,0,1,1,6,1,3,2,2,8,76,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,358,        for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,359,"            m.setEntry(0, i, rowData[i]);",0,0,1,0,4,0,3,0,0,3,29,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,361,        return m;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,376,        final int nCols = rowData.length;,3,0,0,0,0,2,0,0,1,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,377,        final BigDecimal[][] data = new BigDecimal[1][nCols];,1,0,1,0,8,2,0,2,1,6,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,378,        for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,379,            data[0][i] = new BigDecimal(rowData[i]);,0,0,1,1,8,1,0,1,2,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,381,"        return new BigMatrixImpl(data, false);",1,0,0,0,2,2,0,1,2,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,396,        final int nCols = rowData.length;,3,0,0,0,0,2,0,0,1,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,397,        final BigDecimal[][] data = new BigDecimal[1][nCols];,1,0,1,0,8,2,0,2,1,6,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,398,"        System.arraycopy(rowData, 0, data[0], 0, nCols);",0,0,1,0,4,0,4,0,0,3,48,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,399,"        return new BigMatrixImpl(data, false);",1,0,0,0,2,2,0,1,2,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,414,        final int nCols = rowData.length;,3,0,0,0,0,2,0,0,1,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,415,        final BigDecimal[][] data = new BigDecimal[1][nCols];,1,0,1,0,8,2,0,2,1,6,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,416,        for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,417,            data[0][i] = new BigDecimal(rowData[i]);,0,0,1,1,8,1,0,1,2,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,419,"        return new BigMatrixImpl(data, false);",1,0,0,0,2,2,0,1,2,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,432,        final int nRows = columnData.length;,3,0,0,0,0,2,0,0,1,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,433,"        final RealMatrix m = createRealMatrix(nRows, 1);",1,0,0,0,2,1,2,1,2,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,434,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,435,"            m.setEntry(i, 0, columnData[i]);",0,0,1,0,4,0,3,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,437,        return m;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,452,        final int nRows = columnData.length;,3,0,0,0,0,2,0,0,1,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,453,        if (nRows == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,454,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");",0,0,0,1,2,1,2,0,1,5,95,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,456,"        final FieldMatrix<T> m = createFieldMatrix(columnData[0].getField(), nRows, 1);",1,0,1,1,6,1,3,2,2,8,79,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,457,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,458,"            m.setEntry(i, 0, columnData[i]);",0,0,1,0,4,0,3,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,460,        return m;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,475,        final int nRows = columnData.length;,3,0,0,0,0,2,0,0,1,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,476,        final BigDecimal[][] data = new BigDecimal[nRows][1];,1,0,1,0,8,2,0,2,1,6,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,477,        for (int row = 0; row < nRows; row++) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,478,            data[row][0] = new BigDecimal(columnData[row]);,0,0,1,1,8,1,0,1,2,6,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,480,"        return new BigMatrixImpl(data, false);",1,0,0,0,2,2,0,1,2,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,495,        final int nRows = columnData.length;,3,0,0,0,0,2,0,0,1,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,496,        final BigDecimal[][] data = new BigDecimal[nRows][1];,1,0,1,0,8,2,0,2,1,6,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,497,        for (int row = 0; row < nRows; row++) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,498,            data[row][0] = columnData[row];,0,0,1,0,6,0,0,0,1,3,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,500,"        return new BigMatrixImpl(data, false);",1,0,0,0,2,2,0,1,2,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,515,        int nRows = columnData.length;,3,0,0,0,0,1,0,0,0,2,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,516,        final BigDecimal[][] data = new BigDecimal[nRows][1];,1,0,1,0,8,2,0,2,1,6,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,517,        for (int row = 0; row < nRows; row++) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,518,            data[row][0] = new BigDecimal(columnData[row]);,0,0,1,1,8,1,0,1,2,6,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,520,"        return new BigMatrixImpl(data, false);",1,0,0,0,2,2,0,1,2,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,530,        if (row < 0 || row >= m.getRowDimension()) {,2,3,0,2,5,1,2,0,0,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,531,"            throw new MatrixIndexException(""row index {0} out of allowed range [{1}, {2}]"",",0,0,0,0,9,2,0,1,2,4,79,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,534,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,545,"            throw new MatrixIndexException(""column index {0} out of allowed range [{1}, {2}]"",",0,0,0,0,9,2,0,1,2,4,82,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,564,"        checkRowIndex(m, startRow);",0,0,0,0,2,0,3,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,565,"        checkRowIndex(m, endRow);",0,0,0,0,2,0,3,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,566,        if (startRow > endRow) {,2,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,567,"            throw new MatrixIndexException(""initial row {0} after final row {1}"",",0,0,0,0,5,3,0,1,2,4,69,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,571,"        checkColumnIndex(m, startColumn);",0,0,0,0,2,0,3,0,1,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,572,"        checkColumnIndex(m, endColumn);",0,0,0,0,2,0,3,0,1,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,573,        if (startColumn > endColumn) {,2,1,0,1,3,1,0,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,574,"            throw new MatrixIndexException(""initial column {0} after final column {1}"",",0,0,0,0,5,3,0,1,2,4,75,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,579,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,593,        if (selectedRows.length * selectedColumns.length == 0) {,4,2,0,1,3,1,0,0,0,5,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,594,            if (selectedRows.length == 0) {,2,1,0,1,3,1,0,0,0,5,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,595,"                throw new MatrixIndexException(""empty selected row index array"");",0,0,0,1,2,2,0,1,2,5,65,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,597,"            throw new MatrixIndexException(""empty selected column index array"");",0,0,0,1,2,2,0,1,2,5,68,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,600,        for (final int row : selectedRows) {,2,0,0,1,3,3,0,0,1,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,601,"            checkRowIndex(m, row);",0,0,0,0,2,0,3,0,1,3,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,603,        for (final int column : selectedColumns) {,2,0,0,1,3,3,0,0,1,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,604,"            checkColumnIndex(m, column);",0,0,0,0,2,0,3,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,606,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,616,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0,2,0,2,7,1,4,0,0,5,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,618,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,623,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,633,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0,2,0,2,7,1,4,0,0,5,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,635,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,640,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,650,        if (left.getColumnDimension() != right.getRowDimension()) {,0,1,0,2,7,1,4,0,0,5,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,651,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,656,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,664,        final FractionMatrixConverter converter = new FractionMatrixConverter();,1,0,0,1,2,2,0,2,2,6,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,665,        m.walkInOptimizedOrder(converter);,0,0,0,1,2,0,3,0,0,3,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,666,        return converter.getConvertedMatrix();,0,0,0,1,2,1,2,0,0,4,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,708,        final BigFractionMatrixConverter converter = new BigFractionMatrixConverter();,1,0,0,1,2,2,0,2,2,6,78,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,709,        m.walkInOptimizedOrder(converter);,0,0,0,1,2,0,3,0,0,3,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,710,        return converter.getConvertedMatrix();,0,0,0,1,2,1,2,0,0,4,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,789,        final int n = vector.getDimension();,1,0,0,1,2,2,2,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,790,        oos.writeInt(n);,0,0,0,1,2,0,3,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,791,        for (int i = 0; i < n; ++i) {,4,1,0,1,3,2,0,0,1,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,792,            oos.writeDouble(vector.getEntry(i));,0,0,0,2,4,0,5,0,0,3,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,794,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,820,            final int n = ois.readInt();,1,0,0,1,2,2,2,0,1,6,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,821,            final double[] data = new double[n];,1,0,1,0,4,4,0,0,1,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,822,            for (int i = 0; i < n; ++i) {,4,1,0,1,3,2,0,0,1,6,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,823,                data[i] = ois.readDouble();,0,0,1,1,4,0,2,0,1,5,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,827,"            final RealVector vector = new ArrayRealVector(data, false);",2,0,0,0,2,2,0,2,3,5,59,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,830,            final java.lang.reflect.Field f =,5,0,0,0,0,1,0,0,1,3,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,832,            f.setAccessible(true);,0,0,0,1,2,0,2,0,1,4,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,833,"            f.set(instance, vector);",0,0,0,0,2,0,4,0,0,2,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,843,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,835,        } catch (NoSuchFieldException nsfe) {,1,0,0,1,4,1,0,1,0,5,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,836,            IOException ioe = new IOException();,1,0,0,1,2,1,0,2,1,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,837,            ioe.initCause(nsfe);,0,0,0,1,2,0,3,0,0,3,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,838,            throw ioe;,1,0,0,0,0,1,0,0,0,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,839,        } catch (IllegalAccessException iae) {,1,0,0,1,4,1,0,1,0,5,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,840,            IOException ioe = new IOException();,1,0,0,1,2,1,0,2,1,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,841,            ioe.initCause(iae);,0,0,0,1,2,0,3,0,0,3,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,842,            throw ioe;,1,0,0,0,0,1,0,0,0,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,845,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,890,        final int n = matrix.getRowDimension();,1,0,0,1,2,2,2,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,891,        final int m = matrix.getColumnDimension();,1,0,0,1,2,2,2,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,892,        oos.writeInt(n);,0,0,0,1,2,0,3,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,893,        oos.writeInt(m);,0,0,0,1,2,0,3,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,894,        for (int i = 0; i < n; ++i) {,4,1,0,1,3,2,0,0,1,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,895,            for (int j = 0; j < m; ++j) {,4,1,0,1,3,2,0,0,1,6,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,896,"                oos.writeDouble(matrix.getEntry(i, j));",0,0,0,0,4,0,6,0,0,2,39,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,899,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,925,            final int n = ois.readInt();,1,0,0,1,2,2,2,0,1,6,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,926,            final int m = ois.readInt();,1,0,0,1,2,2,2,0,1,6,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,927,            final double[][] data = new double[n][m];,1,0,1,0,8,4,0,0,1,5,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,928,            for (int i = 0; i < n; ++i) {,4,1,0,1,3,2,0,0,1,6,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,929,                final double[] dataI = data[i];,1,0,1,0,4,2,0,0,1,5,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,930,                for (int j = 0; j < m; ++j) {,4,1,0,1,3,2,0,0,1,6,29,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,931,                    dataI[j] = ois.readDouble();,0,0,1,1,4,0,2,0,1,5,28,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,936,"            final RealMatrix matrix = new Array2DRowRealMatrix(data, false);",2,0,0,0,2,2,0,2,3,5,64,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,939,            final java.lang.reflect.Field f =,5,0,0,0,0,1,0,0,1,3,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,941,            f.setAccessible(true);,0,0,0,1,2,0,2,0,1,4,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,942,"            f.set(instance, matrix);",0,0,0,0,2,0,4,0,0,2,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,952,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,944,        } catch (NoSuchFieldException nsfe) {,1,0,0,1,4,1,0,1,0,5,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,945,            IOException ioe = new IOException();,1,0,0,1,2,1,0,2,1,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,946,            ioe.initCause(nsfe);,0,0,0,1,2,0,3,0,0,3,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,947,            throw ioe;,1,0,0,0,0,1,0,0,0,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,948,        } catch (IllegalAccessException iae) {,1,0,0,1,4,1,0,1,0,5,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,949,            IOException ioe = new IOException();,1,0,0,1,2,1,0,2,1,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,950,            ioe.initCause(iae);,0,0,0,1,2,0,3,0,0,3,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,951,            throw ioe;,1,0,0,0,0,1,0,0,0,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,954,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixIndexException,69,38,"      super(pattern, arguments);",2,0,0,0,2,1,0,0,1,4,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixIndexException,69,39,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,70,        super(field);,1,0,0,1,2,1,0,0,1,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,71,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,85,"        super(field, rowDimension, columnDimension);",3,0,0,0,2,1,0,0,1,4,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,86,"        data = buildArray(field, rowDimension, columnDimension);",1,0,0,0,2,0,4,0,2,4,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,87,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,104,        super(extractField(d));,0,0,0,2,4,1,2,0,2,5,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,105,        copyIn(d);,0,0,0,1,2,0,2,0,1,4,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,106,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,125,        super(extractField(d));,0,0,0,2,4,1,2,0,2,5,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,126,        if (copyArray) {,1,0,0,1,3,1,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,127,            copyIn(d);,0,0,0,1,2,0,2,0,1,4,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,129,            if (d == null) {,1,1,0,1,3,1,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,130,                throw new NullPointerException();,0,0,0,1,2,2,0,1,1,5,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,132,            final int nRows = d.length;,3,0,0,0,0,2,0,0,1,3,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,133,            if (nRows == 0) {,1,1,0,1,3,1,0,0,0,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,134,                throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,137,            final int nCols = d[0].length;,2,0,1,0,2,2,0,0,1,5,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,138,            if (nCols == 0) {,1,1,0,1,3,1,0,0,0,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,139,                throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,142,            for (int r = 1; r < nRows; r++) {,4,1,0,1,3,2,0,0,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,143,                if (d[r].length != nCols) {,2,1,1,1,5,1,0,0,0,6,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,144,                    throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,148,            data = d;,2,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,150,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,161,        super(extractField(v));,0,0,0,2,4,1,2,0,2,5,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,162,        final int nRows = v.length;,3,0,0,0,0,2,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,163,"        data = buildArray(getField(), nRows, 1);",1,0,0,1,4,0,3,0,3,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,164,        for (int row = 0; row < nRows; row++) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,165,            data[row][0] = v[row];,0,0,1,0,6,0,0,0,1,3,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,167,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,173,"        return new Array2DRowFieldMatrix<T>(getField(), rowDimension, columnDimension);",2,0,0,1,4,2,1,2,2,7,79,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,179,"        return new Array2DRowFieldMatrix<T>(copyOut(), false);",0,0,0,1,4,2,1,2,3,6,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,187,            return add((Array2DRowFieldMatrix<T>) m);,1,0,0,2,4,1,1,2,1,7,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,188,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,189,            return super.add(m);,2,0,0,1,2,2,0,0,0,4,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,204,        checkAdditionCompatible(m);,0,0,0,1,2,0,2,0,1,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,206,        final int rowCount    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,207,        final int columnCount = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,208,"        final T[][] outData = buildArray(getField(), rowCount, columnCount);",1,0,0,1,8,1,4,1,3,7,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,209,        for (int row = 0; row < rowCount; row++) {,4,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,210,            final T[] dataRow    = data[row];,1,0,1,0,4,1,0,1,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,211,            final T[] mRow       = m.data[row];,3,0,1,0,4,1,0,1,1,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,212,            final T[] outDataRow = outData[row];,1,0,1,0,4,1,0,1,1,6,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,213,            for (int col = 0; col < columnCount; col++) {,4,1,0,1,3,2,0,0,1,6,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,214,                outDataRow[col] = dataRow[col].add(mRow[col]);,0,0,1,1,8,0,1,0,1,5,46,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,218,"        return new Array2DRowFieldMatrix<T>(outData, false);",1,0,0,0,2,2,0,2,2,5,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,227,            return subtract((Array2DRowFieldMatrix<T>) m);,1,0,0,2,4,1,1,2,1,7,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,228,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,229,            return super.subtract(m);,2,0,0,1,2,2,0,0,0,4,25,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,244,        checkSubtractionCompatible(m);,0,0,0,1,2,0,2,0,1,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,246,        final int rowCount    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,247,        final int columnCount = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,248,"        final T[][] outData = buildArray(getField(), rowCount, columnCount);",1,0,0,1,8,1,4,1,3,7,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,249,        for (int row = 0; row < rowCount; row++) {,4,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,250,            final T[] dataRow    = data[row];,1,0,1,0,4,1,0,1,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,251,            final T[] mRow       = m.data[row];,3,0,1,0,4,1,0,1,1,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,252,            final T[] outDataRow = outData[row];,1,0,1,0,4,1,0,1,1,6,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,253,            for (int col = 0; col < columnCount; col++) {,4,1,0,1,3,2,0,0,1,6,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,254,                outDataRow[col] = dataRow[col].subtract(mRow[col]);,0,0,1,1,8,0,1,0,1,5,51,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,258,"        return new Array2DRowFieldMatrix<T>(outData, false);",1,0,0,0,2,2,0,2,2,5,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,267,            return multiply((Array2DRowFieldMatrix<T>) m);,1,0,0,2,4,1,1,2,1,7,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,268,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,269,            return super.multiply(m);,2,0,0,1,2,2,0,0,0,4,25,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,284,        checkMultiplicationCompatible(m);,0,0,0,1,2,0,2,0,1,4,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,286,        final int nRows = this.getRowDimension();,1,0,0,1,2,3,1,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,287,        final int nCols = m.getColumnDimension();,1,0,0,1,2,2,2,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,288,        final int nSum = this.getColumnDimension();,1,0,0,1,2,3,1,0,1,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,289,"        final T[][] outData = buildArray(getField(), nRows, nCols);",1,0,0,1,8,1,4,1,3,7,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,290,        for (int row = 0; row < nRows; row++) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,291,            final T[] dataRow    = data[row];,1,0,1,0,4,1,0,1,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,292,            final T[] outDataRow = outData[row];,1,0,1,0,4,1,0,1,1,6,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,293,            for (int col = 0; col < nCols; col++) {,4,1,0,1,3,2,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,294,                T sum = getField().getZero();,1,0,0,1,4,0,2,1,1,6,29,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,295,                for (int i = 0; i < nSum; i++) {,4,1,0,1,3,2,0,0,1,6,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,296,                    sum = sum.add(dataRow[i].multiply(m.data[i][col]));,3,0,1,2,10,0,3,0,1,6,51,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,298,                outDataRow[col] = sum;,1,0,1,0,2,0,0,0,1,4,22,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,302,"        return new Array2DRowFieldMatrix<T>(outData, false);",1,0,0,0,2,2,0,2,2,5,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,309,        return copyOut();,0,0,0,1,2,1,1,0,1,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,320,        return data;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,327,        if (data == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,328,            if (row > 0) {,1,1,0,1,3,1,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,329,                throw MathRuntimeException.createIllegalStateException(,0,0,0,0,1,1,2,0,0,3,55,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,332,            if (column > 0) {,1,1,0,1,3,1,0,0,0,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,333,                throw MathRuntimeException.createIllegalStateException(,0,0,0,0,1,1,2,0,0,3,55,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,336,            final int nRows = subMatrix.length;,3,0,0,0,0,2,0,0,1,3,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,337,            if (nRows == 0) {,1,1,0,1,3,1,0,0,0,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,338,                throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,342,            final int nCols = subMatrix[0].length;,2,0,1,0,2,2,0,0,1,5,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,343,            if (nCols == 0) {,1,1,0,1,3,1,0,0,0,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,344,                throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,347,"            data = buildArray(getField(), subMatrix.length, nCols);",3,0,0,1,4,0,3,0,3,5,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,348,            for (int i = 0; i < data.length; ++i) {,5,1,0,1,3,2,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,349,                if (subMatrix[i].length != nCols) {,2,1,1,1,5,1,0,0,0,6,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,350,                    throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,353,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",2,1,1,0,6,0,4,0,0,5,64,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,355,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,356,"            super.setSubMatrix(subMatrix, row, column);",4,0,0,0,2,1,0,0,0,3,43,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,359,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,366,            return data[row][column];,0,0,1,0,4,1,0,0,0,3,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,367,        } catch (ArrayIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,368,            throw new MatrixIndexException(,0,0,0,0,1,2,0,1,1,4,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,378,            data[row][column] = value;,1,0,1,0,4,0,0,0,1,4,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,382,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,379,        } catch (ArrayIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,380,            throw new MatrixIndexException(,0,0,0,0,1,2,0,1,1,4,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,383,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,390,            data[row][column] = data[row][column].add(increment);,0,0,1,1,10,0,2,0,1,5,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,394,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,391,        } catch (ArrayIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,392,            throw new MatrixIndexException(,0,0,0,0,1,2,0,1,1,4,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,395,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,402,            data[row][column] = data[row][column].multiply(factor);,0,0,1,1,10,0,2,0,1,5,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,406,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,403,        } catch (ArrayIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,404,            throw new MatrixIndexException(,0,0,0,0,1,2,0,1,1,4,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,407,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,412,        return (data == null) ? 0 : data.length;,3,1,0,1,2,1,0,0,0,5,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,418,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,2,3,1,2,10,1,0,0,0,6,66,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,425,        final int nRows = this.getRowDimension();,1,0,0,1,2,3,1,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,426,        final int nCols = this.getColumnDimension();,1,0,0,1,2,3,1,0,1,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,427,        if (v.length != nCols) {,3,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,428,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,431,"        final T[] out = buildArray(getField(), nRows);",1,0,0,1,6,1,3,1,3,7,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,432,        for (int row = 0; row < nRows; row++) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,433,            final T[] dataRow = data[row];,1,0,1,0,4,1,0,1,1,6,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,434,            T sum = getField().getZero();,1,0,0,1,4,0,2,1,1,6,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,435,            for (int i = 0; i < nCols; i++) {,4,1,0,1,3,2,0,0,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,436,                sum = sum.add(dataRow[i].multiply(v[i]));,1,0,1,2,8,0,3,0,1,6,41,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,438,            out[row] = sum;,1,0,1,0,2,0,0,0,1,4,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,440,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,448,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,449,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,450,        if (v.length != nRows) {,3,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,451,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,455,"        final T[] out = buildArray(getField(), nCols);",1,0,0,1,6,1,3,1,3,7,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,456,        for (int col = 0; col < nCols; ++col) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,457,            T sum = getField().getZero();,1,0,0,1,4,0,2,1,1,6,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,458,            for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,459,                sum = sum.add(data[i][col].multiply(v[i]));,1,0,1,2,10,0,3,0,1,6,43,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,461,            out[col] = sum;,1,0,1,0,2,0,0,0,1,4,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,464,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,472,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,473,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,474,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,475,        for (int i = 0; i < rows; ++i) {,4,1,0,1,3,2,0,0,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,476,            final T[] rowI = data[i];,1,0,1,0,4,1,0,1,1,6,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,477,            for (int j = 0; j < columns; ++j) {,4,1,0,1,3,2,0,0,1,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,478,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0,0,1,0,6,0,4,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,481,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,488,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,489,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,490,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,491,        for (int i = 0; i < rows; ++i) {,4,1,0,1,3,2,0,0,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,492,            final T[] rowI = data[i];,1,0,1,0,4,1,0,1,1,6,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,493,            for (int j = 0; j < columns; ++j) {,4,1,0,1,3,2,0,0,1,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,494,"                visitor.visit(i, j, rowI[j]);",0,0,1,0,4,0,4,0,0,3,29,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,497,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,506,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,5,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,507,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,509,        for (int i = startRow; i <= endRow; ++i) {,5,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,510,            final T[] rowI = data[i];,1,0,1,0,4,1,0,1,1,6,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,511,            for (int j = startColumn; j <= endColumn; ++j) {,5,1,0,1,3,2,0,0,1,6,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,512,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0,0,1,0,6,0,4,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,515,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,524,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,5,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,525,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,527,        for (int i = startRow; i <= endRow; ++i) {,5,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,528,            final T[] rowI = data[i];,1,0,1,0,4,1,0,1,1,6,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,529,            for (int j = startColumn; j <= endColumn; ++j) {,5,1,0,1,3,2,0,0,1,6,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,530,"                visitor.visit(i, j, rowI[j]);",0,0,1,0,4,0,4,0,0,3,29,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,533,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,540,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,541,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,542,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,543,        for (int j = 0; j < columns; ++j) {,4,1,0,1,3,2,0,0,1,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,544,            for (int i = 0; i < rows; ++i) {,4,1,0,1,3,2,0,0,1,6,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,545,                final T[] rowI = data[i];,1,0,1,0,4,1,0,1,1,6,25,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,546,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0,0,1,0,6,0,4,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,549,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,556,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,557,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,558,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,559,        for (int j = 0; j < columns; ++j) {,4,1,0,1,3,2,0,0,1,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,560,            for (int i = 0; i < rows; ++i) {,4,1,0,1,3,2,0,0,1,6,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,561,"                visitor.visit(i, j, data[i][j]);",0,0,1,0,6,0,4,0,0,3,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,564,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,573,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,5,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,574,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,576,        for (int j = startColumn; j <= endColumn; ++j) {,5,1,0,1,3,2,0,0,1,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,577,            for (int i = startRow; i <= endRow; ++i) {,5,1,0,1,3,2,0,0,1,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,578,                final T[] rowI = data[i];,1,0,1,0,4,1,0,1,1,6,25,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,579,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0,0,1,0,6,0,4,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,582,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,591,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,5,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,592,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,594,        for (int j = startColumn; j <= endColumn; ++j) {,5,1,0,1,3,2,0,0,1,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,595,            for (int i = startRow; i <= endRow; ++i) {,5,1,0,1,3,2,0,0,1,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,596,"                visitor.visit(i, j, data[i][j]);",0,0,1,0,6,0,4,0,0,3,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,599,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,608,        final int nRows = this.getRowDimension();,1,0,0,1,2,3,1,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,609,"        final T[][] out = buildArray(getField(), nRows, getColumnDimension());",1,0,0,1,10,1,4,1,4,7,70,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,611,        for (int i = 0; i < nRows; i++) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,612,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",1,0,1,0,8,0,2,0,0,4,56,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,614,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,628,"        setSubMatrix(in, 0, 0);",0,0,0,0,2,0,2,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowFieldMatrix,69,629,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,101,"        super(field, rows, columns);",3,0,0,0,2,1,0,0,1,4,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,102,        this.rows    = rows;,2,0,0,0,0,1,0,0,1,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,103,        this.columns = columns;,2,0,0,0,0,1,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,106,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,4,3,0,1,2,0,0,0,1,5,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,107,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,4,3,0,1,2,0,0,0,1,5,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,110,"        blocks = createBlocksLayout(field, rows, columns);",1,0,0,0,2,0,4,0,2,4,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,112,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,129,"        this(rawData.length, rawData[0].length, toBlocksLayout(rawData), false);",3,0,1,1,6,1,2,0,2,7,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,130,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,151,"        super(extractField(blockData), rows, columns);",2,0,0,1,4,1,2,0,2,6,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,152,        this.rows    = rows;,2,0,0,0,0,1,0,0,1,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,153,        this.columns = columns;,2,0,0,0,0,1,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,156,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,4,3,0,1,2,0,0,0,1,5,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,157,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,4,3,0,1,2,0,0,0,1,5,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,159,        if (copyArray) {,1,0,0,1,3,1,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,161,"            blocks = buildArray(getField(), blockRows * blockColumns, -1);",3,1,0,1,4,0,2,0,4,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,164,            blocks = blockData;,2,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,167,        int index = 0;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,168,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,169,            final int iHeight = blockHeight(iBlock);,1,0,0,1,2,2,2,0,2,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,170,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++index) {",5,1,0,0,3,2,0,0,2,5,64,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,171,                if (blockData[index].length != iHeight * blockWidth(jBlock)) {,2,2,1,2,7,1,2,0,1,8,62,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,172,                    throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,176,                if (copyArray) {,1,0,0,1,3,1,0,0,0,4,16,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,177,                    blocks[index] = blockData[index].clone();,0,0,1,1,6,0,1,0,1,5,41,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,182,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,211,        final int rows         = rawData.length;,3,0,0,0,0,2,0,0,1,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,212,        final int columns      = rawData[0].length;,2,0,1,0,2,2,0,0,1,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,213,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,4,3,0,1,2,2,0,0,1,6,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,214,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,4,3,0,1,2,2,0,0,1,6,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,217,        for (int i = 0; i < rawData.length; ++i) {,5,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,218,            final int length = rawData[i].length;,2,0,1,0,2,2,0,0,1,5,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,219,            if (length != columns) {,2,1,0,1,3,1,0,0,0,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,220,                throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,227,        final Field<T> field = extractField(rawData);,1,0,0,1,2,1,2,2,2,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,228,"        final T[][] blocks = buildArray(field, blockRows * blockColumns, -1);",3,1,0,0,6,1,2,1,3,7,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,229,        int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,230,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,231,            final int pStart  = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,232,"            final int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,56,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,233,            final int iHeight = pEnd - pStart;,3,1,0,0,0,2,0,0,1,4,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,234,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,235,                final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,236,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,58,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,237,                final int jWidth = qEnd - qStart;,3,1,0,0,0,2,0,0,1,4,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,240,"                final T[] block = buildArray(field, iHeight * jWidth);",3,1,0,0,4,1,2,1,2,7,54,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,241,                blocks[blockIndex] = block;,1,0,1,0,2,0,0,0,1,4,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,244,                int index = 0;,1,0,0,0,0,1,0,0,0,2,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,245,                for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,246,"                    System.arraycopy(rawData[p], qStart, block, index, jWidth);",0,0,1,0,4,0,6,0,0,3,59,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,247,                    index += jWidth;,2,0,0,0,0,0,0,0,1,2,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,250,                ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,255,        return blocks;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,277,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,4,3,0,1,2,2,0,0,1,6,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,278,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,4,3,0,1,2,2,0,0,1,6,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,280,"        final T[][] blocks = buildArray(field, blockRows * blockColumns, -1);",3,1,0,0,6,1,2,1,3,7,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,281,        int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,282,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,283,            final int pStart  = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,284,"            final int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,56,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,285,            final int iHeight = pEnd - pStart;,3,1,0,0,0,2,0,0,1,4,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,286,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,287,                final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,288,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,58,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,289,                final int jWidth = qEnd - qStart;,3,1,0,0,0,2,0,0,1,4,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,290,"                blocks[blockIndex] = buildArray(field, iHeight * jWidth);",2,1,1,0,4,0,2,0,2,6,57,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,291,                ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,295,        return blocks;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,303,"        return new BlockFieldMatrix<T>(getField(), rowDimension, columnDimension);",2,0,0,1,4,2,1,2,2,7,74,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,311,"        BlockFieldMatrix<T> copied = new BlockFieldMatrix<T>(getField(), rows, columns);",3,0,0,1,4,1,1,4,2,7,80,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,314,        for (int i = 0; i < blocks.length; ++i) {,5,1,0,1,3,2,0,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,315,"            System.arraycopy(blocks[i], 0, copied.blocks[i], 0, blocks[i].length);",3,0,1,0,8,0,2,0,0,4,70,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,318,        return copied;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,327,            return add((BlockFieldMatrix<T>) m);,1,0,0,2,4,1,1,2,1,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,328,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,331,            checkAdditionCompatible(m);,0,0,0,1,2,0,2,0,1,4,27,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,333,"            final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",3,0,0,1,4,2,1,4,3,7,83,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,336,            int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,337,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,5,1,0,1,3,2,0,0,1,6,56,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,338,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,5,1,0,1,3,2,0,0,1,6,59,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,341,                    final T[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,1,0,1,1,6,44,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,342,                    final T[] tBlock   = blocks[blockIndex];,1,0,1,0,4,1,0,1,1,6,40,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,343,                    final int      pStart   = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,46,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,344,"                    final int      pEnd     = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,62,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,345,                    final int      qStart   = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,46,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,346,"                    final int      qEnd     = Math.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,65,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,347,                    int k = 0;,1,0,0,0,0,1,0,0,0,2,10,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,348,                    for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,349,                        for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,13,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,350,"                            outBlock[k] = tBlock[k].add(m.getEntry(p, q));",0,0,1,0,8,0,5,0,1,4,46,15,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,351,                            ++k;,1,0,0,0,0,0,0,0,1,2,4,15,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,356,                    ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,361,            return out;,1,0,0,0,0,1,0,0,0,2,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,377,        checkAdditionCompatible(m);,0,0,0,1,2,0,2,0,1,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,379,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",3,0,0,1,4,2,1,4,3,7,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,382,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,6,1,0,1,3,2,0,0,1,6,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,383,            final T[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,1,0,1,1,6,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,384,            final T[] tBlock   = blocks[blockIndex];,1,0,1,0,4,1,0,1,1,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,385,            final T[] mBlock   = m.blocks[blockIndex];,3,0,1,0,4,1,0,1,1,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,386,            for (int k = 0; k < outBlock.length; ++k) {,5,1,0,1,3,2,0,0,1,6,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,387,                outBlock[k] = tBlock[k].add(mBlock[k]);,0,0,1,1,8,0,1,0,1,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,391,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,400,            return subtract((BlockFieldMatrix<T>) m);,1,0,0,2,4,1,1,2,1,7,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,401,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,404,            checkSubtractionCompatible(m);,0,0,0,1,2,0,2,0,1,4,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,406,"            final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",3,0,0,1,4,2,1,4,3,7,83,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,409,            int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,410,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,5,1,0,1,3,2,0,0,1,6,56,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,411,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,5,1,0,1,3,2,0,0,1,6,59,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,414,                    final T[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,1,0,1,1,6,44,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,415,                    final T[] tBlock   = blocks[blockIndex];,1,0,1,0,4,1,0,1,1,6,40,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,416,                    final int      pStart   = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,46,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,417,"                    final int      pEnd     = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,62,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,418,                    final int      qStart   = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,46,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,419,"                    final int      qEnd     = Math.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,65,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,420,                    int k = 0;,1,0,0,0,0,1,0,0,0,2,10,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,421,                    for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,422,                        for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,13,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,423,"                            outBlock[k] = tBlock[k].subtract(m.getEntry(p, q));",0,0,1,0,8,0,5,0,1,4,51,15,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,424,                            ++k;,1,0,0,0,0,0,0,0,1,2,4,15,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,429,                    ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,434,            return out;,1,0,0,0,0,1,0,0,0,2,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,450,        checkSubtractionCompatible(m);,0,0,0,1,2,0,2,0,1,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,452,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",3,0,0,1,4,2,1,4,3,7,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,455,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,6,1,0,1,3,2,0,0,1,6,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,456,            final T[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,1,0,1,1,6,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,457,            final T[] tBlock   = blocks[blockIndex];,1,0,1,0,4,1,0,1,1,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,458,            final T[] mBlock   = m.blocks[blockIndex];,3,0,1,0,4,1,0,1,1,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,459,            for (int k = 0; k < outBlock.length; ++k) {,5,1,0,1,3,2,0,0,1,6,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,460,                outBlock[k] = tBlock[k].subtract(mBlock[k]);,0,0,1,1,8,0,1,0,1,5,44,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,464,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,473,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",3,0,0,1,4,2,1,4,3,7,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,476,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,6,1,0,1,3,2,0,0,1,6,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,477,            final T[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,1,0,1,1,6,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,478,            final T[] tBlock   = blocks[blockIndex];,1,0,1,0,4,1,0,1,1,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,479,            for (int k = 0; k < outBlock.length; ++k) {,5,1,0,1,3,2,0,0,1,6,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,480,                outBlock[k] = tBlock[k].add(d);,0,0,1,1,6,0,2,0,1,5,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,484,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,493,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",3,0,0,1,4,2,1,4,3,7,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,496,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,6,1,0,1,3,2,0,0,1,6,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,497,            final T[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,1,0,1,1,6,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,498,            final T[] tBlock   = blocks[blockIndex];,1,0,1,0,4,1,0,1,1,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,499,            for (int k = 0; k < outBlock.length; ++k) {,5,1,0,1,3,2,0,0,1,6,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,500,                outBlock[k] = tBlock[k].multiply(d);,0,0,1,1,6,0,2,0,1,5,36,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,504,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,513,            return multiply((BlockFieldMatrix<T>) m);,1,0,0,2,4,1,1,2,1,7,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,514,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,517,            checkMultiplicationCompatible(m);,0,0,0,1,2,0,2,0,1,4,33,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,519,"            final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, m.getColumnDimension());",2,0,0,1,6,2,3,4,3,7,98,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,520,            final T zero = getField().getZero();,1,0,0,1,4,1,2,1,2,7,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,523,            int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,524,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,5,1,0,1,3,2,0,0,1,6,56,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,526,                final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,527,"                final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,55,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,529,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,5,1,0,1,3,2,0,0,1,6,59,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,531,                    final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,532,"                    final int qEnd   = Math.min(qStart + BLOCK_SIZE, m.getColumnDimension());",3,1,0,1,4,2,4,0,1,7,73,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,535,                    final T[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,1,0,1,1,6,44,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,538,                    for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,4,1,0,1,3,2,0,0,1,6,55,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,539,                        final int kWidth      = blockWidth(kBlock);,1,0,0,1,2,2,2,0,2,6,43,13,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,540,                        final T[] tBlock = blocks[iBlock * blockColumns + kBlock];,4,2,1,0,4,1,0,1,1,7,58,13,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,541,                        final int rStart      = kBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,44,13,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,542,                        int k = 0;,1,0,0,0,0,1,0,0,0,2,10,14,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,543,                        for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,13,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,544,                            final int lStart = (p - pStart) * kWidth;,4,2,0,1,2,2,0,0,1,6,41,15,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,545,                            final int lEnd   = lStart + kWidth;,3,1,0,0,0,2,0,0,1,4,35,15,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,546,                            for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,15,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,547,                                T sum = zero;,2,0,0,0,0,0,0,1,0,2,13,17,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,548,                                int r = rStart;,2,0,0,0,0,1,0,0,0,2,15,18,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,549,                                for (int l = lStart; l < lEnd; ++l) {,5,1,0,1,3,2,0,0,1,6,37,17,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,550,"                                    sum = sum.add(tBlock[l].multiply(m.getEntry(r, q)));",1,0,1,0,8,0,7,0,1,5,52,19,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,551,                                    ++r;,1,0,0,0,0,0,0,0,1,2,4,19,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,553,                                outBlock[k] = outBlock[k].add(sum);,0,0,1,1,6,0,2,0,1,5,35,17,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,554,                                ++k;,1,0,0,0,0,0,0,0,1,2,4,17,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,560,                    ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,565,            return out;,1,0,0,0,0,1,0,0,0,2,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,581,        checkMultiplicationCompatible(m);,0,0,0,1,2,0,2,0,1,4,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,583,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, m.columns);",4,0,0,1,4,2,1,4,3,7,85,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,584,        final T zero = getField().getZero();,1,0,0,1,4,1,2,1,2,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,587,        int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,588,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,5,1,0,1,3,2,0,0,1,6,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,590,            final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,591,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,593,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,5,1,0,1,3,2,0,0,1,6,59,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,594,                final int jWidth = out.blockWidth(jBlock);,1,0,0,1,2,2,3,0,1,6,42,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,595,                final int jWidth2 = jWidth  + jWidth;,3,1,0,0,0,2,0,0,1,4,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,596,                final int jWidth3 = jWidth2 + jWidth;,3,1,0,0,0,2,0,0,1,4,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,597,                final int jWidth4 = jWidth3 + jWidth;,3,1,0,0,0,2,0,0,1,4,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,600,                final T[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,1,0,1,1,6,44,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,603,                for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,4,1,0,1,3,2,0,0,1,6,55,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,604,                    final int kWidth = blockWidth(kBlock);,1,0,0,1,2,2,2,0,2,6,38,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,605,                    final T[] tBlock = blocks[iBlock * blockColumns + kBlock];,4,2,1,0,4,1,0,1,1,7,58,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,606,                    final T[] mBlock = m.blocks[kBlock * m.blockColumns + jBlock];,7,2,0,0,4,1,0,1,1,6,62,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,607,                    int k = 0;,1,0,0,0,0,1,0,0,0,2,10,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,608,                    for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,609,                        final int lStart = (p - pStart) * kWidth;,4,2,0,1,2,2,0,0,1,6,41,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,610,                        final int lEnd   = lStart + kWidth;,3,1,0,0,0,2,0,0,1,4,35,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,611,                        for (int nStart = 0; nStart < jWidth; ++nStart) {,4,1,0,1,3,2,0,0,1,6,49,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,612,                            T sum = zero;,2,0,0,0,0,0,0,1,0,2,13,14,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,613,                            int l = lStart;,2,0,0,0,0,1,0,0,0,2,15,15,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,614,                            int n = nStart;,2,0,0,0,0,1,0,0,0,2,15,15,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,615,                            while (l < lEnd - 3) {,2,2,0,1,3,1,0,0,0,5,22,14,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,616,                                sum = sum.,1,0,0,0,0,0,1,0,1,3,10,16,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,621,                                l += 4;,1,0,0,0,0,0,0,0,1,2,7,16,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,622,                                n += jWidth4;,2,0,0,0,0,0,0,0,1,2,13,16,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,624,                            while (l < lEnd) {,2,1,0,1,3,1,0,0,0,5,18,14,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,625,                                sum = sum.add(tBlock[l++].multiply(mBlock[n]));,2,0,1,2,8,0,3,0,2,6,47,16,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,626,                                n += jWidth;,2,0,0,0,0,0,0,0,1,2,12,16,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,628,                            outBlock[k] = outBlock[k].add(sum);,0,0,1,1,6,0,2,0,1,5,35,14,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,629,                            ++k;,1,0,0,0,0,0,0,0,1,2,4,14,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,635,                ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,640,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,648,"        final T[][] data = buildArray(getField(), getRowDimension(), getColumnDimension());",1,0,0,1,12,1,4,1,5,7,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,649,        final int lastColumns = columns - (blockColumns - 1) * BLOCK_SIZE;,4,3,0,1,2,2,0,0,1,6,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,651,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,652,            final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,653,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,654,            int regularPos   = 0;,1,0,0,0,0,1,0,0,0,2,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,655,            int lastPos      = 0;,1,0,0,0,0,1,0,0,0,2,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,656,            for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,657,                final T[] dataP = data[p];,1,0,1,0,4,1,0,1,1,6,26,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,658,                int blockIndex = iBlock * blockColumns;,3,1,0,0,0,1,0,0,0,3,39,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,659,                int dataPos    = 0;,1,0,0,0,0,1,0,0,0,2,19,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,660,                for (int jBlock = 0; jBlock < blockColumns - 1; ++jBlock) {,4,2,0,1,3,2,0,0,1,6,59,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,661,"                    System.arraycopy(blocks[blockIndex++], regularPos, dataP, dataPos, BLOCK_SIZE);",1,0,1,0,4,0,6,0,1,5,79,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,662,                    dataPos += BLOCK_SIZE;,2,0,0,0,0,0,0,0,1,2,22,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,664,"                System.arraycopy(blocks[blockIndex], lastPos, dataP, dataPos, lastColumns);",0,0,1,0,4,0,6,0,0,3,75,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,665,                regularPos += BLOCK_SIZE;,2,0,0,0,0,0,0,0,1,2,25,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,666,                lastPos    += lastColumns;,2,0,0,0,0,0,0,0,1,2,26,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,670,        return data;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,681,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,5,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,684,        final BlockFieldMatrix<T> out =,1,0,0,0,0,1,0,2,1,4,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,688,        final int blockStartRow    = startRow    / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,689,        final int rowsShift        = startRow    % BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,690,        final int blockStartColumn = startColumn / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,691,        final int columnsShift     = startColumn % BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,694,        int pBlock = blockStartRow;,2,0,0,0,0,1,0,0,0,2,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,695,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,5,1,0,1,3,2,0,0,1,6,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,696,            final int iHeight = out.blockHeight(iBlock);,1,0,0,1,2,2,3,0,1,6,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,697,            int qBlock = blockStartColumn;,2,0,0,0,0,1,0,0,0,2,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,698,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,5,1,0,1,3,2,0,0,1,6,59,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,699,                final int jWidth = out.blockWidth(jBlock);,1,0,0,1,2,2,3,0,1,6,42,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,702,                final int      outIndex = iBlock * out.blockColumns + jBlock;,5,2,0,0,0,2,0,0,1,4,61,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,703,                final T[] outBlock = out.blocks[outIndex];,3,0,1,0,4,1,0,1,1,6,42,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,704,                final int      index    = pBlock * blockColumns + qBlock;,4,2,0,0,0,2,0,0,1,4,57,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,705,                final int      width    = blockWidth(qBlock);,1,0,0,1,2,2,2,0,2,6,45,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,707,                final int heightExcess = iHeight + rowsShift - BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,58,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,708,                final int widthExcess  = jWidth + columnsShift - BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,60,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,709,                if (heightExcess > 0) {,1,1,0,1,3,1,0,0,0,5,23,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,711,                    if (widthExcess > 0) {,1,1,0,1,3,1,0,0,0,5,22,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,713,                        final int width2 = blockWidth(qBlock + 1);,2,1,0,1,2,2,1,0,2,7,42,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,714,"                        copyBlockPart(blocks[index], width,",0,0,1,0,3,0,2,0,1,4,35,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,718,"                        copyBlockPart(blocks[index + 1], width2,",1,1,1,0,3,0,2,0,1,6,40,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,722,"                        copyBlockPart(blocks[index + blockColumns], width,",2,1,1,0,3,0,2,0,1,6,50,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,726,"                        copyBlockPart(blocks[index + blockColumns + 1], width2,",2,1,1,0,3,0,2,0,1,6,55,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,730,                    } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,732,"                        copyBlockPart(blocks[index], width,",0,0,1,0,3,0,2,0,1,4,35,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,736,"                        copyBlockPart(blocks[index + blockColumns], width,",2,1,1,0,3,0,2,0,1,6,50,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,743,                    if (widthExcess > 0) {,1,1,0,1,3,1,0,0,0,5,22,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,745,                        final int width2 = blockWidth(qBlock + 1);,2,1,0,1,2,2,1,0,2,7,42,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,746,"                        copyBlockPart(blocks[index], width,",0,0,1,0,3,0,2,0,1,4,35,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,750,"                        copyBlockPart(blocks[index + 1], width2,",1,1,1,0,3,0,2,0,1,6,40,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,754,                    } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,756,"                        copyBlockPart(blocks[index], width,",0,0,1,0,3,0,2,0,1,4,35,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,763,                ++qBlock;,1,0,0,0,0,0,0,0,1,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,766,            ++pBlock;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,770,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,794,        final int length = srcEndColumn - srcStartColumn;,3,1,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,795,        int srcPos = srcStartRow * srcWidth + srcStartColumn;,4,2,0,0,0,1,0,0,0,3,53,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,796,        int dstPos = dstStartRow * dstWidth + dstStartColumn;,4,2,0,0,0,1,0,0,0,3,53,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,797,        for (int srcRow = srcStartRow; srcRow < srcEndRow; ++srcRow) {,5,1,0,1,3,2,0,0,1,6,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,798,"            System.arraycopy(srcBlock, srcPos, dstBlock, dstPos, length);",0,0,0,0,2,0,7,0,0,2,61,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,799,            srcPos += srcWidth;,2,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,800,            dstPos += dstWidth;,2,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,802,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,810,        final int refLength = subMatrix[0].length;,2,0,1,0,2,2,0,0,1,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,811,        if (refLength < 1) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,812,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");",0,0,0,1,2,1,2,0,1,5,98,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,814,        final int endRow    = row + subMatrix.length - 1;,4,2,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,815,        final int endColumn = column + refLength - 1;,3,2,0,0,0,2,0,0,1,4,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,816,"        checkSubMatrixIndex(row, endRow, column, endColumn);",0,0,0,0,2,0,5,0,1,3,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,817,        for (final T[] subRow : subMatrix) {,2,0,0,1,5,2,0,1,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,818,            if (subRow.length != refLength) {,3,1,0,1,3,1,0,0,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,819,                throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,826,        final int blockStartRow    = row / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,827,        final int blockEndRow      = (endRow + BLOCK_SIZE) / BLOCK_SIZE;,4,2,0,1,2,2,0,0,1,6,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,828,        final int blockStartColumn = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,829,        final int blockEndColumn   = (endColumn + BLOCK_SIZE) / BLOCK_SIZE;,4,2,0,1,2,2,0,0,1,6,67,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,832,        for (int iBlock = blockStartRow; iBlock < blockEndRow; ++iBlock) {,5,1,0,1,3,2,0,0,1,6,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,833,            final int iHeight  = blockHeight(iBlock);,1,0,0,1,2,2,2,0,2,6,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,834,            final int firstRow = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,835,"            final int iStart   = Math.max(row,    firstRow);",1,0,0,0,2,2,4,0,1,5,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,836,"            final int iEnd     = Math.min(endRow + 1, firstRow + iHeight);",4,2,0,0,2,2,2,0,1,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,838,            for (int jBlock = blockStartColumn; jBlock < blockEndColumn; ++jBlock) {,5,1,0,1,3,2,0,0,1,6,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,839,                final int jWidth      = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,43,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,840,                final int firstColumn = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,44,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,841,"                final int jStart      = Math.max(column,    firstColumn);",1,0,0,0,2,2,4,0,1,5,57,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,842,"                final int jEnd        = Math.min(endColumn + 1, firstColumn + jWidth);",4,2,0,0,2,2,2,0,1,6,70,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,843,                final int jLength     = jEnd - jStart;,3,1,0,0,0,2,0,0,1,4,38,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,846,                final T[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,57,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,847,                for (int i = iStart; i < iEnd; ++i) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,848,"                    System.arraycopy(subMatrix[i - row], jStart - column,",4,2,1,0,3,0,2,0,0,5,53,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,855,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,862,        checkRowIndex(row);,0,0,0,1,2,0,2,0,1,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,863,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), 1, columns);",2,0,0,1,4,2,1,4,3,7,80,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,866,        final int iBlock  = row / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,867,        final int iRow    = row - iBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,868,        int outBlockIndex = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,869,        int outIndex      = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,870,        T[] outBlock = out.blocks[outBlockIndex];,3,0,1,0,4,0,0,1,0,4,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,871,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,872,            final int jWidth     = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,873,            final T[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,57,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,874,            final int available  = outBlock.length - outIndex;,4,1,0,0,0,2,0,0,1,4,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,875,            if (jWidth > available) {,2,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,876,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, available);",2,1,0,0,2,0,6,0,0,4,70,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,877,                outBlock = out.blocks[++outBlockIndex];,4,0,0,0,2,0,0,0,2,3,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,878,"                System.arraycopy(block, iRow * jWidth, outBlock, 0, jWidth - available);",4,2,0,0,2,0,4,0,0,4,72,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,879,                outIndex = jWidth - available;,3,1,0,0,0,0,0,0,1,3,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,881,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, jWidth);",2,1,0,0,2,0,6,0,0,4,67,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,882,                outIndex += jWidth;,2,0,0,0,0,0,0,0,1,2,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,886,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,895,"            setRowMatrix(row, (BlockFieldMatrix<T>) matrix);",1,0,0,1,4,0,2,2,1,6,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,898,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,896,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,897,"            super.setRowMatrix(row, matrix);",3,0,0,0,2,1,0,0,0,3,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,899,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,915,        checkRowIndex(row);,0,0,0,1,2,0,2,0,1,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,916,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,917,        if ((matrix.getRowDimension() != 1) ||,0,2,0,2,5,1,2,0,0,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,919,            throw new InvalidMatrixException(,0,0,0,0,1,2,0,1,1,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,926,        final int iBlock = row / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,927,        final int iRow   = row - iBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,928,        int mBlockIndex  = 0;,1,0,0,0,0,1,0,0,0,2,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,929,        int mIndex       = 0;,1,0,0,0,0,1,0,0,0,2,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,930,        T[] mBlock  = matrix.blocks[mBlockIndex];,3,0,1,0,4,0,0,1,0,4,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,931,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,932,            final int jWidth     = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,933,            final T[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,57,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,934,            final int available  = mBlock.length - mIndex;,4,1,0,0,0,2,0,0,1,4,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,935,            if (jWidth > available) {,2,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,936,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, available);",2,1,0,0,2,0,6,0,0,4,66,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,937,                mBlock = matrix.blocks[++mBlockIndex];,4,0,0,0,2,0,0,0,2,3,38,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,938,"                System.arraycopy(mBlock, 0, block, iRow * jWidth, jWidth - available);",4,2,0,0,2,0,4,0,0,4,70,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,939,                mIndex = jWidth - available;,3,1,0,0,0,0,0,0,1,3,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,941,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, jWidth);",2,1,0,0,2,0,6,0,0,4,63,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,942,                mIndex += jWidth;,2,0,0,0,0,0,0,0,1,2,17,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,946,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,953,        checkColumnIndex(column);,0,0,0,1,2,0,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,954,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, 1);",2,0,0,1,4,2,1,4,3,7,77,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,957,        final int jBlock  = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,958,        final int jColumn = column - jBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,959,        final int jWidth  = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,960,        int outBlockIndex = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,961,        int outIndex      = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,962,        T[] outBlock = out.blocks[outBlockIndex];,3,0,1,0,4,0,0,1,0,4,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,963,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,964,            final int iHeight = blockHeight(iBlock);,1,0,0,1,2,2,2,0,2,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,965,            final T[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,57,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,966,            for (int i = 0; i < iHeight; ++i) {,4,1,0,1,3,2,0,0,1,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,967,                if (outIndex >= outBlock.length) {,3,1,0,1,3,1,0,0,0,5,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,968,                    outBlock = out.blocks[++outBlockIndex];,4,0,0,0,2,0,0,0,2,3,39,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,969,                    outIndex = 0;,1,0,0,0,0,0,0,0,1,2,13,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,971,                outBlock[outIndex++] = block[i * jWidth + jColumn];,4,2,1,0,4,0,0,0,2,5,51,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,975,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,984,"            setColumnMatrix(column, (BlockFieldMatrix<T>) matrix);",1,0,0,1,4,0,2,2,1,6,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,987,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,985,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,986,"            super.setColumnMatrix(column, matrix);",3,0,0,0,2,1,0,0,0,3,38,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,988,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1004,        checkColumnIndex(column);,0,0,0,1,2,0,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1005,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1006,        if ((matrix.getRowDimension() != nRows) ||,1,2,0,2,5,1,2,0,0,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1008,            throw new InvalidMatrixException(,0,0,0,0,1,2,0,1,1,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1015,        final int jBlock  = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1016,        final int jColumn = column - jBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1017,        final int jWidth  = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1018,        int mBlockIndex = 0;,1,0,0,0,0,1,0,0,0,2,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1019,        int mIndex      = 0;,1,0,0,0,0,1,0,0,0,2,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1020,        T[] mBlock = matrix.blocks[mBlockIndex];,3,0,1,0,4,0,0,1,0,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1021,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1022,            final int iHeight = blockHeight(iBlock);,1,0,0,1,2,2,2,0,2,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1023,            final T[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,57,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1024,            for (int i = 0; i < iHeight; ++i) {,4,1,0,1,3,2,0,0,1,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1025,                if (mIndex >= mBlock.length) {,3,1,0,1,3,1,0,0,0,5,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1026,                    mBlock = matrix.blocks[++mBlockIndex];,4,0,0,0,2,0,0,0,2,3,38,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1027,                    mIndex = 0;,1,0,0,0,0,0,0,0,1,2,11,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1029,                block[i * jWidth + jColumn] = mBlock[mIndex++];,4,2,1,0,4,0,0,0,2,5,47,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1033,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1040,        checkRowIndex(row);,0,0,0,1,2,0,2,0,1,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1041,"        final T[] outData = buildArray(getField(), columns);",1,0,0,1,6,1,3,1,3,7,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1044,        final int iBlock  = row / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1045,        final int iRow    = row - iBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1046,        int outIndex      = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1047,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1048,            final int jWidth     = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1049,            final T[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,57,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1050,"            System.arraycopy(block, iRow * jWidth, outData, outIndex, jWidth);",2,1,0,0,2,0,6,0,0,4,66,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1051,            outIndex += jWidth;,2,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1054,"        return new ArrayFieldVector<T>(outData, false);",1,0,0,0,2,2,0,2,2,5,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1063,"            setRow(row, ((ArrayFieldVector<T>) vector).getDataRef());",1,0,0,2,8,0,3,2,1,6,57,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1066,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1064,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1065,"            super.setRowVector(row, vector);",3,0,0,0,2,1,0,0,0,3,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1067,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1074,        checkColumnIndex(column);,0,0,0,1,2,0,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1075,"        final T[] outData = buildArray(getField(), rows);",1,0,0,1,6,1,3,1,3,7,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1078,        final int jBlock  = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1079,        final int jColumn = column - jBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1080,        final int jWidth  = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1081,        int outIndex      = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1082,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1083,            final int iHeight = blockHeight(iBlock);,1,0,0,1,2,2,2,0,2,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1084,            final T[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,57,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1085,            for (int i = 0; i < iHeight; ++i) {,4,1,0,1,3,2,0,0,1,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1086,                outData[outIndex++] = block[i * jWidth + jColumn];,4,2,1,0,4,0,0,0,2,5,50,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1090,"        return new ArrayFieldVector<T>(outData, false);",1,0,0,0,2,2,0,2,2,5,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1099,"            setColumn(column, ((ArrayFieldVector<T>) vector).getDataRef());",1,0,0,2,8,0,3,2,1,6,63,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1102,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1100,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1101,"            super.setColumnVector(column, vector);",3,0,0,0,2,1,0,0,0,3,38,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1103,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1110,        checkRowIndex(row);,0,0,0,1,2,0,2,0,1,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1111,"        final T[] out = buildArray(getField(), columns);",1,0,0,1,6,1,3,1,3,7,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1114,        final int iBlock  = row / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1115,        final int iRow    = row - iBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1116,        int outIndex      = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1117,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1118,            final int jWidth     = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1119,            final T[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,57,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1120,"            System.arraycopy(block, iRow * jWidth, out, outIndex, jWidth);",2,1,0,0,2,0,6,0,0,4,62,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1121,            outIndex += jWidth;,2,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1124,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1133,        checkRowIndex(row);,0,0,0,1,2,0,2,0,1,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1134,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1135,        if (array.length != nCols) {,3,1,0,1,3,1,0,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1136,            throw new InvalidMatrixException(,0,0,0,0,1,2,0,1,1,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1142,        final int iBlock  = row / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1143,        final int iRow    = row - iBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1144,        int outIndex      = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1145,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1146,            final int jWidth     = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1147,            final T[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,57,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1148,"            System.arraycopy(array, outIndex, block, iRow * jWidth, jWidth);",2,1,0,0,2,0,6,0,0,4,64,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1149,            outIndex += jWidth;,2,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1152,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1159,        checkColumnIndex(column);,0,0,0,1,2,0,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1160,"        final T[] out = buildArray(getField(), rows);",1,0,0,1,6,1,3,1,3,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1163,        final int jBlock  = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1164,        final int jColumn = column - jBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1165,        final int jWidth  = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1166,        int outIndex      = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1167,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1168,            final int iHeight = blockHeight(iBlock);,1,0,0,1,2,2,2,0,2,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1169,            final T[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,57,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1170,            for (int i = 0; i < iHeight; ++i) {,4,1,0,1,3,2,0,0,1,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1171,                out[outIndex++] = block[i * jWidth + jColumn];,4,2,1,0,4,0,0,0,2,5,46,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1175,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1184,        checkColumnIndex(column);,0,0,0,1,2,0,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1185,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1186,        if (array.length != nRows) {,3,1,0,1,3,1,0,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1187,            throw new InvalidMatrixException(,0,0,0,0,1,2,0,1,1,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1193,        final int jBlock  = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1194,        final int jColumn = column - jBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1195,        final int jWidth  = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1196,        int outIndex      = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1197,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1198,            final int iHeight = blockHeight(iBlock);,1,0,0,1,2,2,2,0,2,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1199,            final T[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,57,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1200,            for (int i = 0; i < iHeight; ++i) {,4,1,0,1,3,2,0,0,1,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1201,                block[i * jWidth + jColumn] = array[outIndex++];,4,2,1,0,4,0,0,0,2,5,48,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1205,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1212,            final int iBlock = row    / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1213,            final int jBlock = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1214,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,4,4,0,1,4,2,2,0,2,7,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1216,            return blocks[iBlock * blockColumns + jBlock][k];,3,2,1,0,4,1,0,0,0,5,49,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1217,        } catch (ArrayIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1218,            throw new MatrixIndexException(,0,0,0,0,1,2,0,1,1,4,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1229,            final int iBlock = row    / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1230,            final int jBlock = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1231,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,4,4,0,1,4,2,2,0,2,7,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1233,            blocks[iBlock * blockColumns + jBlock][k] = value;,4,2,1,0,4,0,0,0,1,5,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1238,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1234,        } catch (ArrayIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1235,            throw new MatrixIndexException(,0,0,0,0,1,2,0,1,1,4,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1239,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1246,            final int iBlock = row    / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1247,            final int jBlock = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1248,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,4,4,0,1,4,2,2,0,2,7,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1250,            final T[] blockIJ = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,59,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1251,            blockIJ[k] = blockIJ[k].add(increment);,0,0,1,1,6,0,2,0,1,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1256,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1252,        } catch (ArrayIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1253,            throw new MatrixIndexException(,0,0,0,0,1,2,0,1,1,4,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1257,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1264,            final int iBlock = row    / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1265,            final int jBlock = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1266,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,4,4,0,1,4,2,2,0,2,7,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1268,            final T[] blockIJ = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,59,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1269,            blockIJ[k] = blockIJ[k].multiply(factor);,0,0,1,1,6,0,2,0,1,5,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1274,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1270,        } catch (ArrayIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1271,            throw new MatrixIndexException(,0,0,0,0,1,2,0,1,1,4,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1275,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1281,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1282,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1283,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), nCols, nRows);",3,0,0,1,4,2,1,4,3,7,82,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1286,        int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1287,        for (int iBlock = 0; iBlock < blockColumns; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1288,            for (int jBlock = 0; jBlock < blockRows; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1291,                final T[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,1,0,1,1,6,44,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1292,                final T[] tBlock   = blocks[jBlock * blockColumns + iBlock];,4,2,1,0,4,1,0,1,1,7,60,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1293,                final int      pStart   = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,46,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1294,"                final int      pEnd     = Math.min(pStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,65,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1295,                final int      qStart   = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,46,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1296,"                final int      qEnd     = Math.min(qStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,62,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1297,                int k = 0;,1,0,0,0,0,1,0,0,0,2,10,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1298,                for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1299,                    final int lInc = pEnd - pStart;,3,1,0,0,0,2,0,0,1,4,31,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1300,                    int l = p - pStart;,3,1,0,0,0,1,0,0,0,3,19,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1301,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1302,                        outBlock[k] = tBlock[l];,0,0,1,0,4,0,0,0,1,3,24,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1303,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1304,                        l+= lInc;,2,0,0,0,0,0,0,0,1,2,9,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1309,                ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1314,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1321,        return rows;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1327,        return columns;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1335,        if (v.length != columns) {,3,1,0,1,3,1,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1336,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1340,"        final T[] out = buildArray(getField(), rows);",1,0,0,1,6,1,3,1,3,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1341,        final T zero = getField().getZero();,1,0,0,1,4,1,2,1,2,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1344,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1345,            final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1346,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1347,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1348,                final T[] block  = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,58,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1349,                final int      qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,44,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1350,"                final int      qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,63,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1351,                int k = 0;,1,0,0,0,0,1,0,0,0,2,10,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1352,                for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1353,                    T sum = zero;,2,0,0,0,0,0,0,1,0,2,13,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1354,                    int q = qStart;,2,0,0,0,0,1,0,0,0,2,15,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1355,                    while (q < qEnd - 3) {,2,2,0,1,3,1,0,0,0,5,22,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1356,                        sum = sum.,1,0,0,0,0,0,1,0,1,3,10,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1361,                        k += 4;,1,0,0,0,0,0,0,0,1,2,7,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1362,                        q += 4;,1,0,0,0,0,0,0,0,1,2,7,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1364,                    while (q < qEnd) {,2,1,0,1,3,1,0,0,0,5,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1365,                        sum = sum.add(block[k++].multiply(v[q++]));,3,0,1,2,8,0,3,0,3,6,43,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1367,                    out[p] = out[p].add(sum);,0,0,1,1,6,0,2,0,1,5,25,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1372,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1381,        if (v.length != rows) {,3,1,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1382,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1386,"        final T[] out = buildArray(getField(), columns);",1,0,0,1,6,1,3,1,3,7,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1387,        final T zero = getField().getZero();,1,0,0,1,4,1,2,1,2,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1390,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1391,            final int jWidth  = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1392,            final int jWidth2 = jWidth  + jWidth;,3,1,0,0,0,2,0,0,1,4,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1393,            final int jWidth3 = jWidth2 + jWidth;,3,1,0,0,0,2,0,0,1,4,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1394,            final int jWidth4 = jWidth3 + jWidth;,3,1,0,0,0,2,0,0,1,4,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1395,            final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1396,"            final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,58,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1397,            for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1398,                final T[] block  = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,58,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1399,                final int      pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,44,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1400,"                final int      pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,60,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1401,                for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1402,                    int k = q - qStart;,3,1,0,0,0,1,0,0,0,3,19,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1403,                    T sum = zero;,2,0,0,0,0,0,0,1,0,2,13,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1404,                    int p = pStart;,2,0,0,0,0,1,0,0,0,2,15,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1405,                    while (p < pEnd - 3) {,2,2,0,1,3,1,0,0,0,5,22,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1406,                        sum = sum.,1,0,0,0,0,0,1,0,1,3,10,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1411,                        k += jWidth4;,2,0,0,0,0,0,0,0,1,2,13,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1412,                        p += 4;,1,0,0,0,0,0,0,0,1,2,7,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1414,                    while (p < pEnd) {,2,1,0,1,3,1,0,0,0,5,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1415,                        sum = sum.add(block[k].multiply(v[p++]));,2,0,1,2,8,0,3,0,2,6,41,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1416,                        k += jWidth;,2,0,0,0,0,0,0,0,1,2,12,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1418,                    out[q] = out[q].add(sum);,0,0,1,1,6,0,2,0,1,5,25,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1423,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1431,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1432,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1433,            final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1434,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1435,            for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1436,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1437,                    final int jWidth = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,38,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1438,                    final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1439,"                    final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,58,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1440,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,57,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1441,                    int k = (p - pStart) * jWidth;,4,2,0,1,2,1,0,0,0,5,30,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1442,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1443,"                        block[k] = visitor.visit(p, q, block[k]);",0,0,1,0,6,0,4,0,1,4,41,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1444,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1449,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1456,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1457,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1458,            final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1459,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1460,            for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1461,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1462,                    final int jWidth = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,38,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1463,                    final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1464,"                    final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,58,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1465,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,57,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1466,                    int k = (p - pStart) * jWidth;,4,2,0,1,2,1,0,0,0,5,30,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1467,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1468,"                        visitor.visit(p, q, block[k]);",0,0,1,0,4,0,4,0,0,3,30,13,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1469,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1474,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1483,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,5,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1484,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,8,0,0,2,71,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1485,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,7,4,0,1,3,2,0,0,1,6,86,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1486,            final int p0     = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1487,"            final int pStart = Math.max(startRow, p0);",1,0,0,0,2,2,4,0,1,5,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1488,"            final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",4,3,0,1,4,2,2,0,1,7,67,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1489,            for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1490,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,7,4,0,1,3,2,0,0,1,6,92,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1491,                    final int jWidth = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,38,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1492,                    final int q0     = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1493,"                    final int qStart = Math.max(startColumn, q0);",1,0,0,0,2,2,4,0,1,5,45,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1494,"                    final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",4,3,0,1,4,2,2,0,1,7,70,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1495,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,57,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1496,                    int k = (p - p0) * jWidth + qStart - q0;,6,4,0,1,2,1,0,0,0,5,40,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1497,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1498,"                        block[k] = visitor.visit(p, q, block[k]);",0,0,1,0,6,0,4,0,1,4,41,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1499,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1504,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1513,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,5,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1514,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,8,0,0,2,71,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1515,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,7,4,0,1,3,2,0,0,1,6,86,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1516,            final int p0     = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1517,"            final int pStart = Math.max(startRow, p0);",1,0,0,0,2,2,4,0,1,5,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1518,"            final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",4,3,0,1,4,2,2,0,1,7,67,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1519,            for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1520,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,7,4,0,1,3,2,0,0,1,6,92,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1521,                    final int jWidth = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,38,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1522,                    final int q0     = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1523,"                    final int qStart = Math.max(startColumn, q0);",1,0,0,0,2,2,4,0,1,5,45,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1524,"                    final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",4,3,0,1,4,2,2,0,1,7,70,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1525,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,57,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1526,                    int k = (p - p0) * jWidth + qStart - q0;,6,4,0,1,2,1,0,0,0,5,40,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1527,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1528,"                        visitor.visit(p, q, block[k]);",0,0,1,0,4,0,4,0,0,3,30,13,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1529,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1534,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1541,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1542,        int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1543,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1544,            final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1545,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1546,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1547,                final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1548,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,58,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1549,                final T[] block = blocks[blockIndex];,1,0,1,0,4,1,0,1,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1550,                int k = 0;,1,0,0,0,0,1,0,0,0,2,10,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1551,                for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1552,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1553,"                        block[k] = visitor.visit(p, q, block[k]);",0,0,1,0,6,0,4,0,1,4,41,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1554,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1557,                ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1560,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1567,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1568,        int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1569,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1570,            final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1571,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1572,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1573,                final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1574,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,58,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1575,                final T[] block = blocks[blockIndex];,1,0,1,0,4,1,0,1,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1576,                int k = 0;,1,0,0,0,0,1,0,0,0,2,10,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1577,                for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1578,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1579,"                        visitor.visit(p, q, block[k]);",0,0,1,0,4,0,4,0,0,3,30,13,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1580,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1583,                ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1586,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1595,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,5,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1596,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,8,0,0,2,71,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1597,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,7,4,0,1,3,2,0,0,1,6,86,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1598,            final int p0     = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1599,"            final int pStart = Math.max(startRow, p0);",1,0,0,0,2,2,4,0,1,5,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1600,"            final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",4,3,0,1,4,2,2,0,1,7,67,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1601,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,7,4,0,1,3,2,0,0,1,6,92,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1602,                final int jWidth = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,38,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1603,                final int q0     = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1604,"                final int qStart = Math.max(startColumn, q0);",1,0,0,0,2,2,4,0,1,5,45,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1605,"                final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",4,3,0,1,4,2,2,0,1,7,70,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1606,                final T[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,57,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1607,                for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1608,                    int k = (p - p0) * jWidth + qStart - q0;,6,4,0,1,2,1,0,0,0,5,40,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1609,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1610,"                        block[k] = visitor.visit(p, q, block[k]);",0,0,1,0,6,0,4,0,1,4,41,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1611,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1616,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1625,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,5,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1626,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,8,0,0,2,71,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1627,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,7,4,0,1,3,2,0,0,1,6,86,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1628,            final int p0     = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1629,"            final int pStart = Math.max(startRow, p0);",1,0,0,0,2,2,4,0,1,5,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1630,"            final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",4,3,0,1,4,2,2,0,1,7,67,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1631,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,7,4,0,1,3,2,0,0,1,6,92,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1632,                final int jWidth = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,38,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1633,                final int q0     = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1634,"                final int qStart = Math.max(startColumn, q0);",1,0,0,0,2,2,4,0,1,5,45,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1635,"                final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",4,3,0,1,4,2,2,0,1,7,70,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1636,                final T[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,1,0,1,1,7,57,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1637,                for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1638,                    int k = (p - p0) * jWidth + qStart - q0;,6,4,0,1,2,1,0,0,0,5,40,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1639,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1640,"                        visitor.visit(p, q, block[k]);",0,0,1,0,4,0,4,0,0,3,30,13,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1641,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1646,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1655,        return (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;,6,4,0,1,2,1,0,0,0,5,79,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockFieldMatrix,69,1664,        return (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;,6,4,0,1,2,1,0,0,0,5,91,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,83,    public Array2DRowRealMatrix() {,1,0,0,1,3,1,0,0,1,5,31,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,84,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,96,"        super(rowDimension, columnDimension);",2,0,0,0,2,1,0,0,1,4,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,97,        data = new double[rowDimension][columnDimension];,1,0,1,0,4,2,0,0,1,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,98,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,114,"        throws IllegalArgumentException, NullPointerException {",2,0,0,0,1,1,0,0,0,3,55,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,115,        copyIn(d);,0,0,0,1,2,0,2,0,1,4,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,116,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,134,"        throws IllegalArgumentException, NullPointerException {",2,0,0,0,1,1,0,0,0,3,55,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,135,        if (copyArray) {,1,0,0,1,3,1,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,136,            copyIn(d);,0,0,0,1,2,0,2,0,1,4,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,138,            if (d == null) {,1,1,0,1,3,1,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,139,                throw new NullPointerException();,0,0,0,1,2,2,0,1,1,5,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,141,            final int nRows = d.length;,3,0,0,0,0,2,0,0,1,3,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,142,            if (nRows == 0) {,1,1,0,1,3,1,0,0,0,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,143,                throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,146,            final int nCols = d[0].length;,2,0,1,0,2,2,0,0,1,5,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,147,            if (nCols == 0) {,1,1,0,1,3,1,0,0,0,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,148,                throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,151,            for (int r = 1; r < nRows; r++) {,4,1,0,1,3,2,0,0,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,152,                if (d[r].length != nCols) {,2,1,1,1,5,1,0,0,0,6,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,153,                    throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,157,            data = d;,2,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,159,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,169,    public Array2DRowRealMatrix(final double[] v) {,2,0,0,1,5,3,0,0,2,5,47,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,170,        final int nRows = v.length;,3,0,0,0,0,2,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,171,        data = new double[nRows][1];,1,0,1,0,4,2,0,0,1,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,172,        for (int row = 0; row < nRows; row++) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,173,            data[row][0] = v[row];,0,0,1,0,6,0,0,0,1,3,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,175,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,181,"        return new Array2DRowRealMatrix(rowDimension, columnDimension);",2,0,0,0,2,2,0,1,1,5,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,187,"        return new Array2DRowRealMatrix(copyOut(), false);",0,0,0,1,4,2,1,1,3,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,195,            return add((Array2DRowRealMatrix) m);,1,0,0,2,4,1,1,1,1,7,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,196,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,197,            return super.add(m);,2,0,0,1,2,2,0,0,0,4,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,212,"        MatrixUtils.checkAdditionCompatible(this, m);",0,0,0,0,2,1,3,0,0,3,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,214,        final int rowCount    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,215,        final int columnCount = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,216,        final double[][] outData = new double[rowCount][columnCount];,1,0,1,0,8,4,0,0,1,5,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,217,        for (int row = 0; row < rowCount; row++) {,4,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,218,            final double[] dataRow    = data[row];,1,0,1,0,4,2,0,0,1,5,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,219,            final double[] mRow       = m.data[row];,3,0,1,0,4,2,0,0,1,5,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,220,            final double[] outDataRow = outData[row];,1,0,1,0,4,2,0,0,1,5,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,221,            for (int col = 0; col < columnCount; col++) {,4,1,0,1,3,2,0,0,1,6,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,222,                outDataRow[col] = dataRow[col] + mRow[col];,0,1,1,0,6,0,0,0,1,4,43,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,226,"        return new Array2DRowRealMatrix(outData, false);",1,0,0,0,2,2,0,1,2,5,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,235,            return subtract((Array2DRowRealMatrix) m);,1,0,0,2,4,1,1,1,1,7,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,236,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,237,            return super.subtract(m);,2,0,0,1,2,2,0,0,0,4,25,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,252,"        MatrixUtils.checkSubtractionCompatible(this, m);",0,0,0,0,2,1,3,0,0,3,48,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,254,        final int rowCount    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,255,        final int columnCount = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,256,        final double[][] outData = new double[rowCount][columnCount];,1,0,1,0,8,4,0,0,1,5,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,257,        for (int row = 0; row < rowCount; row++) {,4,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,258,            final double[] dataRow    = data[row];,1,0,1,0,4,2,0,0,1,5,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,259,            final double[] mRow       = m.data[row];,3,0,1,0,4,2,0,0,1,5,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,260,            final double[] outDataRow = outData[row];,1,0,1,0,4,2,0,0,1,5,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,261,            for (int col = 0; col < columnCount; col++) {,4,1,0,1,3,2,0,0,1,6,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,262,                outDataRow[col] = dataRow[col] - mRow[col];,0,1,1,0,6,0,0,0,1,4,43,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,266,"        return new Array2DRowRealMatrix(outData, false);",1,0,0,0,2,2,0,1,2,5,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,275,            return multiply((Array2DRowRealMatrix) m);,1,0,0,2,4,1,1,1,1,7,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,276,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,277,            return super.multiply(m);,2,0,0,1,2,2,0,0,0,4,25,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,292,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0,0,0,0,2,1,3,0,0,3,51,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,294,        final int nRows = this.getRowDimension();,1,0,0,1,2,3,1,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,295,        final int nCols = m.getColumnDimension();,1,0,0,1,2,2,2,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,296,        final int nSum = this.getColumnDimension();,1,0,0,1,2,3,1,0,1,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,297,        final double[][] outData = new double[nRows][nCols];,1,0,1,0,8,4,0,0,1,5,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,298,        for (int row = 0; row < nRows; row++) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,299,            final double[] dataRow    = data[row];,1,0,1,0,4,2,0,0,1,5,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,300,            final double[] outDataRow = outData[row];,1,0,1,0,4,2,0,0,1,5,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,301,            for (int col = 0; col < nCols; col++) {,4,1,0,1,3,2,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,302,                double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,303,                for (int i = 0; i < nSum; i++) {,4,1,0,1,3,2,0,0,1,6,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,304,                    sum += dataRow[i] * m.data[i][col];,3,1,1,0,6,0,0,0,1,5,35,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,306,                outDataRow[col] = sum;,1,0,1,0,2,0,0,0,1,4,22,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,310,"        return new Array2DRowRealMatrix(outData, false);",1,0,0,0,2,2,0,1,2,5,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,317,        return copyOut();,0,0,0,1,2,1,1,0,1,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,328,        return data;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,335,        if (data == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,336,            if (row > 0) {,1,1,0,1,3,1,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,337,                throw MathRuntimeException.createIllegalStateException(,0,0,0,0,1,1,2,0,0,3,55,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,340,            if (column > 0) {,1,1,0,1,3,1,0,0,0,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,341,                throw MathRuntimeException.createIllegalStateException(,0,0,0,0,1,1,2,0,0,3,55,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,344,            final int nRows = subMatrix.length;,3,0,0,0,0,2,0,0,1,3,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,345,            if (nRows == 0) {,1,1,0,1,3,1,0,0,0,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,346,                throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,350,            final int nCols = subMatrix[0].length;,2,0,1,0,2,2,0,0,1,5,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,351,            if (nCols == 0) {,1,1,0,1,3,1,0,0,0,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,352,                throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,355,            data = new double[subMatrix.length][nCols];,3,0,1,0,4,2,0,0,1,5,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,356,            for (int i = 0; i < data.length; ++i) {,5,1,0,1,3,2,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,357,                if (subMatrix[i].length != nCols) {,2,1,1,1,5,1,0,0,0,6,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,358,                    throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,361,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",2,1,1,0,6,0,4,0,0,5,64,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,363,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,364,"            super.setSubMatrix(subMatrix, row, column);",4,0,0,0,2,1,0,0,0,3,43,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,367,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,374,            return data[row][column];,0,0,1,0,4,1,0,0,0,3,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,375,        } catch (ArrayIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,376,            throw new MatrixIndexException(,0,0,0,0,1,2,0,1,1,4,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,386,            data[row][column] = value;,1,0,1,0,4,0,0,0,1,4,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,390,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,387,        } catch (ArrayIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,388,            throw new MatrixIndexException(,0,0,0,0,1,2,0,1,1,4,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,391,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,398,            data[row][column] += increment;,1,0,1,0,4,0,0,0,1,4,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,402,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,399,        } catch (ArrayIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,400,            throw new MatrixIndexException(,0,0,0,0,1,2,0,1,1,4,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,403,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,410,            data[row][column] *= factor;,1,0,1,0,4,0,0,0,1,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,414,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,411,        } catch (ArrayIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,412,            throw new MatrixIndexException(,0,0,0,0,1,2,0,1,1,4,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,415,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,420,        return (data == null) ? 0 : data.length;,3,1,0,1,2,1,0,0,0,5,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,426,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,2,3,1,2,10,1,0,0,0,6,66,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,433,        final int nRows = this.getRowDimension();,1,0,0,1,2,3,1,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,434,        final int nCols = this.getColumnDimension();,1,0,0,1,2,3,1,0,1,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,435,        if (v.length != nCols) {,3,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,436,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,439,        final double[] out = new double[nRows];,1,0,1,0,4,4,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,440,        for (int row = 0; row < nRows; row++) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,441,            final double[] dataRow = data[row];,1,0,1,0,4,2,0,0,1,5,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,442,            double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,443,            for (int i = 0; i < nCols; i++) {,4,1,0,1,3,2,0,0,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,444,                sum += dataRow[i] * v[i];,1,1,1,0,4,0,0,0,1,5,25,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,446,            out[row] = sum;,1,0,1,0,2,0,0,0,1,4,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,448,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,456,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,457,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,458,        if (v.length != nRows) {,3,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,459,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,463,        final double[] out = new double[nCols];,1,0,1,0,4,4,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,464,        for (int col = 0; col < nCols; ++col) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,465,            double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,466,            for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,467,                sum += data[i][col] * v[i];,1,1,1,0,6,0,0,0,1,5,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,469,            out[col] = sum;,1,0,1,0,2,0,0,0,1,4,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,472,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,480,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,481,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,482,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,483,        for (int i = 0; i < rows; ++i) {,4,1,0,1,3,2,0,0,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,484,            final double[] rowI = data[i];,1,0,1,0,4,2,0,0,1,5,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,485,            for (int j = 0; j < columns; ++j) {,4,1,0,1,3,2,0,0,1,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,486,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0,0,1,0,6,0,4,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,489,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,496,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,497,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,498,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,499,        for (int i = 0; i < rows; ++i) {,4,1,0,1,3,2,0,0,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,500,            final double[] rowI = data[i];,1,0,1,0,4,2,0,0,1,5,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,501,            for (int j = 0; j < columns; ++j) {,4,1,0,1,3,2,0,0,1,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,502,"                visitor.visit(i, j, rowI[j]);",0,0,1,0,4,0,4,0,0,3,29,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,505,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,514,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,515,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,517,        for (int i = startRow; i <= endRow; ++i) {,5,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,518,            final double[] rowI = data[i];,1,0,1,0,4,2,0,0,1,5,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,519,            for (int j = startColumn; j <= endColumn; ++j) {,5,1,0,1,3,2,0,0,1,6,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,520,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0,0,1,0,6,0,4,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,523,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,532,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,533,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,535,        for (int i = startRow; i <= endRow; ++i) {,5,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,536,            final double[] rowI = data[i];,1,0,1,0,4,2,0,0,1,5,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,537,            for (int j = startColumn; j <= endColumn; ++j) {,5,1,0,1,3,2,0,0,1,6,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,538,"                visitor.visit(i, j, rowI[j]);",0,0,1,0,4,0,4,0,0,3,29,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,541,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,548,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,549,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,550,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,551,        for (int j = 0; j < columns; ++j) {,4,1,0,1,3,2,0,0,1,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,552,            for (int i = 0; i < rows; ++i) {,4,1,0,1,3,2,0,0,1,6,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,553,                final double[] rowI = data[i];,1,0,1,0,4,2,0,0,1,5,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,554,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0,0,1,0,6,0,4,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,557,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,564,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,565,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,566,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,567,        for (int j = 0; j < columns; ++j) {,4,1,0,1,3,2,0,0,1,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,568,            for (int i = 0; i < rows; ++i) {,4,1,0,1,3,2,0,0,1,6,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,569,"                visitor.visit(i, j, data[i][j]);",0,0,1,0,6,0,4,0,0,3,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,572,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,581,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,582,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,584,        for (int j = startColumn; j <= endColumn; ++j) {,5,1,0,1,3,2,0,0,1,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,585,            for (int i = startRow; i <= endRow; ++i) {,5,1,0,1,3,2,0,0,1,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,586,                final double[] rowI = data[i];,1,0,1,0,4,2,0,0,1,5,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,587,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0,0,1,0,6,0,4,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,590,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,599,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,600,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,602,        for (int j = startColumn; j <= endColumn; ++j) {,5,1,0,1,3,2,0,0,1,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,603,            for (int i = startRow; i <= endRow; ++i) {,5,1,0,1,3,2,0,0,1,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,604,"                visitor.visit(i, j, data[i][j]);",0,0,1,0,6,0,4,0,0,3,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,607,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,616,        final int nRows = this.getRowDimension();,1,0,0,1,2,3,1,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,617,        final double[][] out = new double[nRows][this.getColumnDimension()];,1,0,1,1,10,5,1,0,1,7,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,619,        for (int i = 0; i < nRows; i++) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,620,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",1,0,1,0,8,0,2,0,0,4,56,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,622,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,636,"        setSubMatrix(in, 0, 0);",0,0,0,0,2,0,2,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,69,637,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,43,    protected AbstractRealMatrix() {,1,0,0,1,3,1,0,0,1,5,32,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,44,        lu = null;,1,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,45,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,57,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,62,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,80,"        MatrixUtils.checkAdditionCompatible(this, m);",0,0,0,0,2,1,3,0,0,3,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,82,        final int rowCount    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,83,        final int columnCount = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,84,"        final RealMatrix out = createMatrix(rowCount, columnCount);",1,0,0,0,2,1,3,1,2,6,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,85,        for (int row = 0; row < rowCount; ++row) {,4,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,86,            for (int col = 0; col < columnCount; ++col) {,4,1,0,1,3,2,0,0,1,6,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,87,"                out.setEntry(row, col, getEntry(row, col) + m.getEntry(row, col));",0,1,0,0,6,0,11,0,1,4,66,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,91,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,99,"        MatrixUtils.checkSubtractionCompatible(this, m);",0,0,0,0,2,1,3,0,0,3,48,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,101,        final int rowCount    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,102,        final int columnCount = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,103,"        final RealMatrix out = createMatrix(rowCount, columnCount);",1,0,0,0,2,1,3,1,2,6,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,104,        for (int row = 0; row < rowCount; ++row) {,4,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,105,            for (int col = 0; col < columnCount; ++col) {,4,1,0,1,3,2,0,0,1,6,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,106,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));",0,1,0,0,6,0,11,0,1,4,66,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,110,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,117,        final int rowCount    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,118,        final int columnCount = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,119,"        final RealMatrix out = createMatrix(rowCount, columnCount);",1,0,0,0,2,1,3,1,2,6,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,120,        for (int row = 0; row < rowCount; ++row) {,4,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,121,            for (int col = 0; col < columnCount; ++col) {,4,1,0,1,3,2,0,0,1,6,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,122,"                out.setEntry(row, col, getEntry(row, col) + d);",1,1,0,0,4,0,7,0,1,5,47,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,126,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,133,        final int rowCount    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,134,        final int columnCount = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,135,"        final RealMatrix out = createMatrix(rowCount, columnCount);",1,0,0,0,2,1,3,1,2,6,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,136,        for (int row = 0; row < rowCount; ++row) {,4,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,137,            for (int col = 0; col < columnCount; ++col) {,4,1,0,1,3,2,0,0,1,6,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,138,"                out.setEntry(row, col, getEntry(row, col) * d);",1,1,0,0,4,0,7,0,1,5,47,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,142,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,151,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0,0,0,0,2,1,3,0,0,3,51,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,153,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,154,        final int nCols = m.getColumnDimension();,1,0,0,1,2,2,2,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,155,        final int nSum  = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,156,"        final RealMatrix out = createMatrix(nRows, nCols);",1,0,0,0,2,1,3,1,2,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,157,        for (int row = 0; row < nRows; ++row) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,158,            for (int col = 0; col < nCols; ++col) {,4,1,0,1,3,2,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,159,                double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,160,                for (int i = 0; i < nSum; ++i) {,4,1,0,1,3,2,0,0,1,6,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,161,"                    sum += getEntry(row, i) * m.getEntry(i, col);",1,1,0,0,4,0,7,0,2,5,45,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,163,"                out.setEntry(row, col, sum);",0,0,0,0,2,0,5,0,0,2,28,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,167,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,174,        return m.multiply(this);,0,0,0,1,2,2,2,0,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,180,        final double[][] data = new double[getRowDimension()][getColumnDimension()];,1,0,0,1,12,4,2,0,3,6,76,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,182,        for (int i = 0; i < data.length; ++i) {,5,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,183,            final double[] dataI = data[i];,1,0,1,0,4,2,0,0,1,5,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,184,            for (int j = 0; j < dataI.length; ++j) {,5,1,0,1,3,2,0,0,1,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,185,"                dataI[j] = getEntry(i, j);",0,0,1,0,4,0,3,0,2,4,26,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,189,        return data;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,195,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,2,1,1,2,6,60,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,234,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,2,1,1,2,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,264,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,266,        final RealMatrix subMatrix =,1,0,0,0,0,1,0,1,1,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,268,        for (int i = startRow; i <= endRow; ++i) {,5,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,269,            for (int j = startColumn; j <= endColumn; ++j) {,5,1,0,1,3,2,0,0,1,6,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,270,"                subMatrix.setEntry(i - startRow, j - startColumn, getEntry(i, j));",4,2,0,0,4,0,5,0,1,5,66,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,274,        return subMatrix;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,283,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);",0,0,0,0,2,1,4,0,0,3,69,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,286,        final RealMatrix subMatrix =,1,0,0,0,0,1,0,1,1,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,288,        subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {,0,0,0,1,4,1,2,1,1,6,71,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,298,        return subMatrix;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,309,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,310,        final int rowsCount    = endRow + 1 - startRow;,3,2,0,0,0,2,0,0,1,4,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,311,        final int columnsCount = endColumn + 1 - startColumn;,3,2,0,0,0,2,0,0,1,4,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,312,        if ((destination.length < rowsCount) || (destination[0].length < columnsCount)) {,5,3,1,2,9,1,0,0,0,6,81,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,313,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,320,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,1,1,1,2,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,345,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,352,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);",0,0,0,0,2,1,4,0,0,3,69,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,353,        if ((destination.length < selectedRows.length) ||,4,2,0,1,3,1,0,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,355,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,362,        for (int i = 0; i < selectedRows.length; i++) {,5,1,0,1,3,2,0,0,1,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,363,            final double[] destinationI = destination[i];,1,0,1,0,4,2,0,0,1,5,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,364,            for (int j = 0; j < selectedColumns.length; j++) {,5,1,0,1,3,2,0,0,1,6,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,365,"                destinationI[j] = getEntry(selectedRows[i], selectedColumns[j]);",0,0,1,0,8,0,1,0,2,4,64,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,369,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,375,        final int nRows = subMatrix.length;,3,0,0,0,0,2,0,0,1,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,376,        if (nRows == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,377,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");",0,0,0,1,2,1,2,0,1,5,95,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,380,        final int nCols = subMatrix[0].length;,2,0,1,0,2,2,0,0,1,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,381,        if (nCols == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,382,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");",0,0,0,1,2,1,2,0,1,5,98,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,385,        for (int r = 1; r < nRows; ++r) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,386,            if (subMatrix[r].length != nCols) {,2,1,1,1,5,1,0,0,0,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,387,                throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,393,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,0,2,1,3,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,394,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,0,2,1,3,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,395,"        MatrixUtils.checkRowIndex(this, nRows + row - 1);",2,2,0,0,2,1,2,0,0,5,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,396,"        MatrixUtils.checkColumnIndex(this, nCols + column - 1);",2,2,0,0,2,1,2,0,0,5,55,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,398,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,399,            for (int j = 0; j < nCols; ++j) {,4,1,0,1,3,2,0,0,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,400,"                setEntry(row + i, column + j, subMatrix[i][j]);",4,2,1,0,6,0,1,0,1,6,47,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,404,        lu = null;,1,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,406,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,412,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,0,2,1,3,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,413,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,414,"        final RealMatrix out = createMatrix(1, nCols);",1,0,0,0,2,1,2,1,2,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,415,        for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,416,"            out.setEntry(0, i, getEntry(row, i));",0,0,0,0,4,0,6,0,1,3,37,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,419,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,427,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,0,2,1,3,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,428,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,429,        if ((matrix.getRowDimension() != 1) ||,0,2,0,2,5,1,2,0,0,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,431,            throw new InvalidMatrixException(,0,0,0,0,1,2,0,1,1,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,435,        for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,436,"            setEntry(row, i, matrix.getEntry(0, i));",0,0,0,0,4,0,6,0,1,3,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,439,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,445,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,0,2,1,3,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,446,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,447,"        final RealMatrix out = createMatrix(nRows, 1);",1,0,0,0,2,1,2,1,2,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,448,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,449,"            out.setEntry(i, 0, getEntry(i, column));",0,0,0,0,4,0,6,0,1,3,40,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,452,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,460,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,0,2,1,3,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,461,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,462,        if ((matrix.getRowDimension() != nRows) ||,1,2,0,2,5,1,2,0,0,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,464,            throw new InvalidMatrixException(,0,0,0,0,1,2,0,1,1,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,468,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,469,"            setEntry(i, column, matrix.getEntry(i, 0));",0,0,0,0,4,0,6,0,1,3,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,472,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,477,"        return new ArrayRealVector(getRow(row), false);",0,0,0,1,4,2,2,1,3,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,484,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,0,2,1,3,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,485,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,486,        if (vector.getDimension() != nCols) {,1,1,0,2,5,1,2,0,0,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,487,            throw new InvalidMatrixException(,0,0,0,0,1,2,0,1,1,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,491,        for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,492,"            setEntry(row, i, vector.getEntry(i));",0,0,0,1,4,0,6,0,1,4,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,495,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,500,"        return new ArrayRealVector(getColumn(column), false);",0,0,0,1,4,2,2,1,3,6,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,507,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,0,2,1,3,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,508,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,509,        if (vector.getDimension() != nRows) {,1,1,0,2,5,1,2,0,0,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,510,            throw new InvalidMatrixException(,0,0,0,0,1,2,0,1,1,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,514,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,515,"            setEntry(i, column, vector.getEntry(i));",0,0,0,1,4,0,6,0,1,4,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,518,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,524,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,0,2,1,3,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,525,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,526,        final double[] out = new double[nCols];,1,0,1,0,4,4,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,527,        for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,528,"            out[i] = getEntry(row, i);",0,0,1,0,4,0,3,0,2,4,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,531,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,539,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,0,2,1,3,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,540,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,541,        if (array.length != nCols) {,3,1,0,1,3,1,0,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,542,            throw new InvalidMatrixException(,0,0,0,0,1,2,0,1,1,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,546,        for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,547,"            setEntry(row, i, array[i]);",0,0,1,0,4,0,3,0,1,4,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,550,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,556,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,0,2,1,3,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,557,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,558,        final double[] out = new double[nRows];,1,0,1,0,4,4,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,559,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,560,"            out[i] = getEntry(i, column);",0,0,1,0,4,0,3,0,2,4,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,563,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,571,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,0,2,1,3,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,572,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,573,        if (array.length != nRows) {,3,1,0,1,3,1,0,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,574,            throw new InvalidMatrixException(,0,0,0,0,1,2,0,1,1,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,578,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,579,"            setEntry(i, column, array[i]);",0,0,1,0,4,0,3,0,1,4,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,582,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,603,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,604,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,605,"        final RealMatrix out = createMatrix(nCols, nRows);",1,0,0,0,2,1,3,1,2,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,606,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,1,1,1,2,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,616,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,624,        if (lu == null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,625,"            lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();",3,0,0,1,4,2,1,1,2,7,67,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,627,        return lu.getInverse();,0,0,0,1,2,1,2,0,0,4,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,634,"        return new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getDeterminant();",2,0,0,1,4,3,1,1,1,7,74,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,639,        return getColumnDimension() == getRowDimension();,0,1,0,1,4,1,2,0,2,6,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,645,        if (lu == null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,646,"            lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();",3,0,0,1,4,2,1,1,2,7,67,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,648,        return !lu.isNonSingular();,0,0,0,1,2,1,2,0,1,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,660,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,661,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,662,        if (nRows != nCols) {,2,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,663,"            throw new NonSquareMatrixException(nRows, nCols);",2,0,0,0,2,2,0,1,1,5,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,665,        double trace = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,666,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,667,"            trace += getEntry(i, i);",1,0,0,0,2,0,3,0,2,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,669,        return trace;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,676,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,677,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,678,        if (v.length != nCols) {,3,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,679,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,684,        final double[] out = new double[nRows];,1,0,1,0,4,4,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,685,        for (int row = 0; row < nRows; ++row) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,686,            double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,687,            for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,688,"                sum += getEntry(row, i) * v[i];",1,1,1,0,4,0,3,0,2,6,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,690,            out[row] = sum;,1,0,1,0,2,0,0,0,1,4,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,693,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,701,"            return new ArrayRealVector(operate(((ArrayRealVector) v).getDataRef()), false);",1,0,0,3,10,2,2,2,3,7,79,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,702,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,703,            final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,704,            final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,705,            if (v.getDimension() != nCols) {,1,1,0,2,5,1,2,0,0,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,706,                throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,711,            final double[] out = new double[nRows];,1,0,1,0,4,4,0,0,1,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,712,            for (int row = 0; row < nRows; ++row) {,4,1,0,1,3,2,0,0,1,6,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,713,                double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,714,                for (int i = 0; i < nCols; ++i) {,4,1,0,1,3,2,0,0,1,6,33,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,715,"                    sum += getEntry(row, i) * v.getEntry(i);",1,1,0,1,4,0,6,0,2,6,40,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,717,                out[row] = sum;,1,0,1,0,2,0,0,0,1,4,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,720,"            return new ArrayRealVector(out, false);",1,0,0,0,2,2,0,1,2,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,728,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,729,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,730,        if (v.length != nRows) {,3,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,731,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,736,        final double[] out = new double[nCols];,1,0,1,0,4,4,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,737,        for (int col = 0; col < nCols; ++col) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,738,            double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,739,            for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,740,"                sum += getEntry(i, col) * v[i];",1,1,1,0,4,0,3,0,2,6,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,742,            out[col] = sum;,1,0,1,0,2,0,0,0,1,4,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,745,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,753,"            return new ArrayRealVector(preMultiply(((ArrayRealVector) v).getDataRef()), false);",1,0,0,3,10,2,2,2,3,7,83,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,754,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,756,            final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,757,            final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,758,            if (v.getDimension() != nRows) {,1,1,0,2,5,1,2,0,0,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,759,                throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,764,            final double[] out = new double[nCols];,1,0,1,0,4,4,0,0,1,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,765,            for (int col = 0; col < nCols; ++col) {,4,1,0,1,3,2,0,0,1,6,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,766,                double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,767,                for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,768,"                    sum += getEntry(i, col) * v.getEntry(i);",1,1,0,1,4,0,6,0,2,6,40,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,770,                out[col] = sum;,1,0,1,0,2,0,0,0,1,4,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,773,            return new ArrayRealVector(out);,1,0,0,1,2,2,0,1,1,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,781,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,782,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,783,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,784,        for (int row = 0; row < rows; ++row) {,4,1,0,1,3,2,0,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,785,            for (int column = 0; column < columns; ++column) {,4,1,0,1,3,2,0,0,1,6,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,786,"                final double oldValue = getEntry(row, column);",1,0,0,0,2,2,3,0,2,5,46,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,787,"                final double newValue = visitor.visit(row, column, oldValue);",1,0,0,0,2,2,5,0,1,5,61,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,788,"                setEntry(row, column, newValue);",0,0,0,0,2,0,4,0,1,3,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,791,        lu = null;,1,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,792,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,798,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,799,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,800,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,801,        for (int row = 0; row < rows; ++row) {,4,1,0,1,3,2,0,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,802,            for (int column = 0; column < columns; ++column) {,4,1,0,1,3,2,0,0,1,6,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,803,"                visitor.visit(row, column, getEntry(row, column));",0,0,0,0,4,0,7,0,1,3,50,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,806,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,814,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,815,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,817,        for (int row = startRow; row <= endRow; ++row) {,5,1,0,1,3,2,0,0,1,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,818,            for (int column = startColumn; column <= endColumn; ++column) {,5,1,0,1,3,2,0,0,1,6,63,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,819,"                final double oldValue = getEntry(row, column);",1,0,0,0,2,2,3,0,2,5,46,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,820,"                final double newValue = visitor.visit(row, column, oldValue);",1,0,0,0,2,2,5,0,1,5,61,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,821,"                setEntry(row, column, newValue);",0,0,0,0,2,0,4,0,1,3,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,824,        lu = null;,1,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,825,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,833,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,834,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,836,        for (int row = startRow; row <= endRow; ++row) {,5,1,0,1,3,2,0,0,1,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,837,            for (int column = startColumn; column <= endColumn; ++column) {,5,1,0,1,3,2,0,0,1,6,63,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,838,"                visitor.visit(row, column, getEntry(row, column));",0,0,0,0,4,0,7,0,1,3,50,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,841,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,847,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,848,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,849,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,850,        for (int column = 0; column < columns; ++column) {,4,1,0,1,3,2,0,0,1,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,851,            for (int row = 0; row < rows; ++row) {,4,1,0,1,3,2,0,0,1,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,852,"                final double oldValue = getEntry(row, column);",1,0,0,0,2,2,3,0,2,5,46,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,853,"                final double newValue = visitor.visit(row, column, oldValue);",1,0,0,0,2,2,5,0,1,5,61,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,854,"                setEntry(row, column, newValue);",0,0,0,0,2,0,4,0,1,3,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,857,        lu = null;,1,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,858,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,864,        final int rows    = getRowDimension();,1,0,0,1,2,2,1,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,865,        final int columns = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,866,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,867,        for (int column = 0; column < columns; ++column) {,4,1,0,1,3,2,0,0,1,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,868,            for (int row = 0; row < rows; ++row) {,4,1,0,1,3,2,0,0,1,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,869,"                visitor.visit(row, column, getEntry(row, column));",0,0,0,0,4,0,7,0,1,3,50,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,872,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,880,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,881,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,883,        for (int column = startColumn; column <= endColumn; ++column) {,5,1,0,1,3,2,0,0,1,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,884,            for (int row = startRow; row <= endRow; ++row) {,5,1,0,1,3,2,0,0,1,6,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,885,"                final double oldValue = getEntry(row, column);",1,0,0,0,2,2,3,0,2,5,46,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,886,"                final double newValue = visitor.visit(row, column, oldValue);",1,0,0,0,2,2,5,0,1,5,61,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,887,"                setEntry(row, column, newValue);",0,0,0,0,2,0,4,0,1,3,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,890,        lu = null;,1,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,891,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,899,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,900,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,1,5,0,4,0,2,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,902,        for (int column = startColumn; column <= endColumn; ++column) {,5,1,0,1,3,2,0,0,1,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,903,            for (int row = startRow; row <= endRow; ++row) {,5,1,0,1,3,2,0,0,1,6,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,904,"                visitor.visit(row, column, getEntry(row, column));",0,0,0,0,4,0,7,0,1,3,50,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,907,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,913,        return walkInRowOrder(visitor);,0,0,0,1,2,1,2,0,1,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,919,        return walkInRowOrder(visitor);,0,0,0,1,2,1,2,0,1,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,927,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,1,4,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,935,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,1,4,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,942,        if (lu == null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,943,"            lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();",3,0,0,1,4,2,1,1,2,7,67,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,945,        return lu.solve(b);,0,0,0,1,2,1,3,0,0,4,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,952,        if (lu == null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,953,"            lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();",3,0,0,1,4,2,1,1,2,7,67,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,955,        return lu.solve(b);,0,0,0,1,2,1,3,0,0,4,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,980,        if (lu == null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,981,"            lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();",3,0,0,1,4,2,1,1,2,7,67,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,983,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,991,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,992,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,993,        final StringBuffer res = new StringBuffer();,1,0,0,1,2,2,0,2,2,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,994,        String fullClassName = getClass().getName();,1,0,0,1,4,0,2,1,1,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,995,        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);,1,1,0,2,4,0,4,1,1,7,84,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,996,"        res.append(shortClassName).append(""{"");",0,0,0,1,5,0,4,0,1,4,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,998,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,999,            if (i > 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,1000,"                res.append("","");",0,0,0,0,2,0,2,0,1,3,16,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,1002,"            res.append(""{"");",0,0,0,1,3,0,2,0,1,4,16,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,1003,            for (int j = 0; j < nCols; ++j) {,4,1,0,1,3,2,0,0,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,1004,                if (j > 0) {,1,1,0,1,3,1,0,0,0,5,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,1005,"                    res.append("","");",0,0,0,0,2,0,2,0,1,3,16,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,1007,"                res.append(getEntry(i, j));",0,0,0,0,4,0,5,0,1,3,27,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,1009,"            res.append(""}"");",0,0,0,1,3,0,2,0,1,4,16,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,1012,"        res.append(""}"");",0,0,0,1,3,0,2,0,1,4,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,1013,        return res.toString();,0,0,0,1,2,1,2,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,1027,        if (object == this ) {,1,1,0,1,3,2,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,1028,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,1030,        if (object instanceof RealMatrix == false) {,1,1,0,1,3,2,0,1,1,7,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,1031,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,1033,        RealMatrix m = (RealMatrix) object;,2,0,0,1,2,0,0,2,0,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,1034,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,1035,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,1036,        if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {,2,3,0,2,7,1,4,0,0,6,70,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,1037,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,1039,        for (int row = 0; row < nRows; ++row) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,1040,            for (int col = 0; col < nCols; ++col) {,4,1,0,1,3,2,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,1041,"                if (getEntry(row, col) != m.getEntry(row, col)) {",0,1,0,0,7,1,7,0,1,5,49,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,1042,                    return false;,0,0,0,0,0,1,0,0,1,2,13,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,1046,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,1056,        int ret = 7;,1,0,0,0,0,1,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,1057,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,1058,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,1059,        ret = ret * 31 + nRows;,3,2,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,1060,        ret = ret * 31 + nCols;,3,2,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,1061,        for (int row = 0; row < nRows; ++row) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,1062,            for (int col = 0; col < nCols; ++col) {,4,1,0,1,3,2,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,1063,               ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) *,4,8,0,2,6,0,0,0,1,5,48,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,1067,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,158,            blocks = new double[blockRows * blockColumns][];,3,1,0,0,4,2,0,0,1,5,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,169,                    throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,174,                    blocks[index] = blockData[index].clone();,0,0,1,1,6,0,1,0,1,5,41,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,215,                throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,293,"        return new BlockRealMatrix(rowDimension, columnDimension);",2,0,0,0,2,2,0,1,1,5,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,301,"        BlockRealMatrix copied = new BlockRealMatrix(rows, columns);",3,0,0,0,2,1,0,2,1,5,60,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,304,        for (int i = 0; i < blocks.length; ++i) {,5,1,0,1,3,2,0,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,305,"            System.arraycopy(blocks[i], 0, copied.blocks[i], 0, blocks[i].length);",3,0,1,0,8,0,2,0,0,4,70,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,308,        return copied;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,317,            return add((BlockRealMatrix) m);,1,0,0,2,4,1,1,1,1,7,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,318,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,321,"            MatrixUtils.checkAdditionCompatible(this, m);",0,0,0,0,2,1,3,0,0,3,45,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,323,"            final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",3,0,0,0,2,2,0,2,2,5,63,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,326,            int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,327,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,5,1,0,1,3,2,0,0,1,6,56,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,328,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,5,1,0,1,3,2,0,0,1,6,59,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,331,                    final double[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,2,0,0,1,5,49,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,332,                    final double[] tBlock   = blocks[blockIndex];,1,0,1,0,4,2,0,0,1,5,45,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,333,                    final int      pStart   = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,46,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,334,"                    final int      pEnd     = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,62,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,335,                    final int      qStart   = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,46,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,336,"                    final int      qEnd     = Math.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,65,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,337,                    int k = 0;,1,0,0,0,0,1,0,0,0,2,10,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,338,                    for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,339,                        for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,13,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,340,"                            outBlock[k] = tBlock[k] + m.getEntry(p, q);",0,1,1,0,6,0,4,0,1,5,43,15,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,341,                            ++k;,1,0,0,0,0,0,0,0,1,2,4,15,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,346,                    ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,351,            return out;,1,0,0,0,0,1,0,0,0,2,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,367,"        MatrixUtils.checkAdditionCompatible(this, m);",0,0,0,0,2,1,3,0,0,3,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,369,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",3,0,0,0,2,2,0,2,2,5,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,372,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,6,1,0,1,3,2,0,0,1,6,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,373,            final double[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,2,0,0,1,5,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,374,            final double[] tBlock   = blocks[blockIndex];,1,0,1,0,4,2,0,0,1,5,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,375,            final double[] mBlock   = m.blocks[blockIndex];,3,0,1,0,4,2,0,0,1,5,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,376,            for (int k = 0; k < outBlock.length; ++k) {,5,1,0,1,3,2,0,0,1,6,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,377,                outBlock[k] = tBlock[k] + mBlock[k];,0,1,1,0,6,0,0,0,1,4,36,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,381,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,390,            return subtract((BlockRealMatrix) m);,1,0,0,2,4,1,1,1,1,7,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,391,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,394,"            MatrixUtils.checkSubtractionCompatible(this, m);",0,0,0,0,2,1,3,0,0,3,48,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,396,"            final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",3,0,0,0,2,2,0,2,2,5,63,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,399,            int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,400,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,5,1,0,1,3,2,0,0,1,6,56,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,401,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,5,1,0,1,3,2,0,0,1,6,59,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,404,                    final double[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,2,0,0,1,5,49,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,405,                    final double[] tBlock   = blocks[blockIndex];,1,0,1,0,4,2,0,0,1,5,45,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,406,                    final int      pStart   = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,46,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,407,"                    final int      pEnd     = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,62,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,408,                    final int      qStart   = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,46,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,409,"                    final int      qEnd     = Math.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,65,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,410,                    int k = 0;,1,0,0,0,0,1,0,0,0,2,10,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,411,                    for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,412,                        for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,13,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,413,"                            outBlock[k] = tBlock[k] - m.getEntry(p, q);",0,1,1,0,6,0,4,0,1,5,43,15,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,414,                            ++k;,1,0,0,0,0,0,0,0,1,2,4,15,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,419,                    ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,424,            return out;,1,0,0,0,0,1,0,0,0,2,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,440,"        MatrixUtils.checkSubtractionCompatible(this, m);",0,0,0,0,2,1,3,0,0,3,48,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,442,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",3,0,0,0,2,2,0,2,2,5,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,445,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,6,1,0,1,3,2,0,0,1,6,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,446,            final double[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,2,0,0,1,5,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,447,            final double[] tBlock   = blocks[blockIndex];,1,0,1,0,4,2,0,0,1,5,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,448,            final double[] mBlock   = m.blocks[blockIndex];,3,0,1,0,4,2,0,0,1,5,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,449,            for (int k = 0; k < outBlock.length; ++k) {,5,1,0,1,3,2,0,0,1,6,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,450,                outBlock[k] = tBlock[k] - mBlock[k];,0,1,1,0,6,0,0,0,1,4,36,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,454,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,463,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",3,0,0,0,2,2,0,2,2,5,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,466,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,6,1,0,1,3,2,0,0,1,6,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,467,            final double[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,2,0,0,1,5,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,468,            final double[] tBlock   = blocks[blockIndex];,1,0,1,0,4,2,0,0,1,5,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,469,            for (int k = 0; k < outBlock.length; ++k) {,5,1,0,1,3,2,0,0,1,6,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,470,                outBlock[k] = tBlock[k] + d;,1,1,1,0,4,0,0,0,1,5,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,474,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,483,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",3,0,0,0,2,2,0,2,2,5,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,486,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,6,1,0,1,3,2,0,0,1,6,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,487,            final double[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,2,0,0,1,5,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,488,            final double[] tBlock   = blocks[blockIndex];,1,0,1,0,4,2,0,0,1,5,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,489,            for (int k = 0; k < outBlock.length; ++k) {,5,1,0,1,3,2,0,0,1,6,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,490,                outBlock[k] = tBlock[k] * d;,1,1,1,0,4,0,0,0,1,5,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,494,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,503,            return multiply((BlockRealMatrix) m);,1,0,0,2,4,1,1,1,1,7,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,504,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,507,"            MatrixUtils.checkMultiplicationCompatible(this, m);",0,0,0,0,2,1,3,0,0,3,51,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,509,"            final BlockRealMatrix out = new BlockRealMatrix(rows, m.getColumnDimension());",2,0,0,1,4,2,2,2,2,7,78,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,512,            int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,513,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,5,1,0,1,3,2,0,0,1,6,56,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,515,                final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,516,"                final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,55,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,518,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,5,1,0,1,3,2,0,0,1,6,59,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,520,                    final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,521,"                    final int qEnd   = Math.min(qStart + BLOCK_SIZE, m.getColumnDimension());",3,1,0,1,4,2,4,0,1,7,73,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,524,                    final double[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,2,0,0,1,5,49,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,527,                    for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,4,1,0,1,3,2,0,0,1,6,55,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,528,                        final int kWidth      = blockWidth(kBlock);,1,0,0,1,2,2,2,0,2,6,43,13,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,529,                        final double[] tBlock = blocks[iBlock * blockColumns + kBlock];,4,2,1,0,4,2,0,0,1,6,63,13,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,530,                        final int rStart      = kBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,44,13,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,531,                        int k = 0;,1,0,0,0,0,1,0,0,0,2,10,14,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,532,                        for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,13,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,533,                            final int lStart = (p - pStart) * kWidth;,4,2,0,1,2,2,0,0,1,6,41,15,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,534,                            final int lEnd   = lStart + kWidth;,3,1,0,0,0,2,0,0,1,4,35,15,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,535,                            for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,15,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,536,                                double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,18,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,537,                                int r = rStart;,2,0,0,0,0,1,0,0,0,2,15,18,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,538,                                for (int l = lStart; l < lEnd; ++l) {,5,1,0,1,3,2,0,0,1,6,37,17,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,539,"                                    sum += tBlock[l] * m.getEntry(r, q);",1,1,1,0,4,0,4,0,1,6,36,19,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,540,                                    ++r;,1,0,0,0,0,0,0,0,1,2,4,19,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,542,                                outBlock[k] += sum;,1,0,1,0,2,0,0,0,1,4,19,17,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,543,                                ++k;,1,0,0,0,0,0,0,0,1,2,4,17,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,549,                    ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,554,            return out;,1,0,0,0,0,1,0,0,0,2,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,570,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0,0,0,0,2,1,3,0,0,3,51,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,572,"        final BlockRealMatrix out = new BlockRealMatrix(rows, m.columns);",4,0,0,0,2,2,0,2,2,5,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,575,        int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,576,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,5,1,0,1,3,2,0,0,1,6,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,578,            final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,579,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,581,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,5,1,0,1,3,2,0,0,1,6,59,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,582,                final int jWidth = out.blockWidth(jBlock);,1,0,0,1,2,2,3,0,1,6,42,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,583,                final int jWidth2 = jWidth  + jWidth;,3,1,0,0,0,2,0,0,1,4,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,584,                final int jWidth3 = jWidth2 + jWidth;,3,1,0,0,0,2,0,0,1,4,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,585,                final int jWidth4 = jWidth3 + jWidth;,3,1,0,0,0,2,0,0,1,4,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,588,                final double[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,2,0,0,1,5,49,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,591,                for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,4,1,0,1,3,2,0,0,1,6,55,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,592,                    final int kWidth = blockWidth(kBlock);,1,0,0,1,2,2,2,0,2,6,38,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,593,                    final double[] tBlock = blocks[iBlock * blockColumns + kBlock];,4,2,1,0,4,2,0,0,1,6,63,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,594,                    final double[] mBlock = m.blocks[kBlock * m.blockColumns + jBlock];,7,2,0,0,4,2,0,0,1,5,67,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,595,                    int k = 0;,1,0,0,0,0,1,0,0,0,2,10,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,596,                    for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,597,                        final int lStart = (p - pStart) * kWidth;,4,2,0,1,2,2,0,0,1,6,41,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,598,                        final int lEnd   = lStart + kWidth;,3,1,0,0,0,2,0,0,1,4,35,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,599,                        for (int nStart = 0; nStart < jWidth; ++nStart) {,4,1,0,1,3,2,0,0,1,6,49,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,600,                            double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,15,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,601,                            int l = lStart;,2,0,0,0,0,1,0,0,0,2,15,15,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,602,                            int n = nStart;,2,0,0,0,0,1,0,0,0,2,15,15,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,603,                            while (l < lEnd - 3) {,2,2,0,1,3,1,0,0,0,5,22,14,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,604,                                sum += tBlock[l] * mBlock[n] +,1,4,1,0,4,0,0,0,1,5,30,16,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,608,                                l += 4;,1,0,0,0,0,0,0,0,1,2,7,16,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,609,                                n += jWidth4;,2,0,0,0,0,0,0,0,1,2,13,16,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,611,                            while (l < lEnd) {,2,1,0,1,3,1,0,0,0,5,18,14,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,612,                                sum += tBlock[l++] * mBlock[n];,2,1,1,0,4,0,0,0,2,5,31,16,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,613,                                n += jWidth;,2,0,0,0,0,0,0,0,1,2,12,16,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,615,                            outBlock[k] += sum;,1,0,1,0,2,0,0,0,1,4,19,14,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,616,                            ++k;,1,0,0,0,0,0,0,0,1,2,4,14,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,622,                ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,627,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,635,        final double[][] data = new double[getRowDimension()][getColumnDimension()];,1,0,0,1,12,4,2,0,3,6,76,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,636,        final int lastColumns = columns - (blockColumns - 1) * BLOCK_SIZE;,4,3,0,1,2,2,0,0,1,6,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,638,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,639,            final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,640,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,641,            int regularPos   = 0;,1,0,0,0,0,1,0,0,0,2,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,642,            int lastPos      = 0;,1,0,0,0,0,1,0,0,0,2,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,643,            for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,644,                final double[] dataP = data[p];,1,0,1,0,4,2,0,0,1,5,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,645,                int blockIndex = iBlock * blockColumns;,3,1,0,0,0,1,0,0,0,3,39,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,646,                int dataPos    = 0;,1,0,0,0,0,1,0,0,0,2,19,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,647,                for (int jBlock = 0; jBlock < blockColumns - 1; ++jBlock) {,4,2,0,1,3,2,0,0,1,6,59,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,648,"                    System.arraycopy(blocks[blockIndex++], regularPos, dataP, dataPos, BLOCK_SIZE);",1,0,1,0,4,0,6,0,1,5,79,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,649,                    dataPos += BLOCK_SIZE;,2,0,0,0,0,0,0,0,1,2,22,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,651,"                System.arraycopy(blocks[blockIndex], lastPos, dataP, dataPos, lastColumns);",0,0,1,0,4,0,6,0,0,3,75,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,652,                regularPos += BLOCK_SIZE;,2,0,0,0,0,0,0,0,1,2,25,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,653,                lastPos    += lastColumns;,2,0,0,0,0,0,0,0,1,2,26,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,657,        return data;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,664,        final double[] colSums = new double[BLOCK_SIZE];,1,0,1,0,4,4,0,0,1,5,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,665,        double maxColSum = 0;,1,0,0,0,0,1,0,0,0,2,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,666,        for (int jBlock = 0; jBlock < blockColumns; jBlock++) {,4,1,0,1,3,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,667,            final int jWidth = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,668,"            Arrays.fill(colSums, 0, jWidth, 0.0);",0,0,0,0,2,0,4,0,0,2,37,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,669,            for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,670,                final int iHeight = blockHeight(iBlock);,1,0,0,1,2,2,2,0,2,6,40,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,671,                final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,672,                for (int j = 0; j < jWidth; ++j) {,4,1,0,1,3,2,0,0,1,6,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,673,                    double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,674,                    for (int i = 0; i < iHeight; ++i) {,4,1,0,1,3,2,0,0,1,6,35,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,675,                        sum += Math.abs(block[i * jWidth + j]);,4,2,1,1,4,0,2,0,1,7,39,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,677,                    colSums[j] += sum;,1,0,1,0,2,0,0,0,1,4,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,680,            for (int j = 0; j < jWidth; ++j) {,4,1,0,1,3,2,0,0,1,6,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,681,"                maxColSum = Math.max(maxColSum, colSums[j]);",1,0,1,0,4,0,3,0,1,5,44,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,684,        return maxColSum;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,690,        double sum2 = 0;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,691,        for (int blockIndex = 0; blockIndex < blocks.length; ++blockIndex) {,5,1,0,1,3,2,0,0,1,6,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,692,            for (final double entry : blocks[blockIndex]) {,1,0,1,1,5,3,0,0,1,6,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,693,                sum2 += entry * entry;,3,1,0,0,0,0,0,0,1,3,22,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,696,        return Math.sqrt(sum2);,0,0,0,1,2,1,3,0,0,4,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,706,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,709,        final BlockRealMatrix out =,1,0,0,0,0,1,0,1,1,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,713,        final int blockStartRow    = startRow    / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,714,        final int rowsShift        = startRow    % BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,715,        final int blockStartColumn = startColumn / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,716,        final int columnsShift     = startColumn % BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,719,        int pBlock = blockStartRow;,2,0,0,0,0,1,0,0,0,2,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,720,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,5,1,0,1,3,2,0,0,1,6,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,721,            final int iHeight = out.blockHeight(iBlock);,1,0,0,1,2,2,3,0,1,6,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,722,            int qBlock = blockStartColumn;,2,0,0,0,0,1,0,0,0,2,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,723,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,5,1,0,1,3,2,0,0,1,6,59,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,724,                final int jWidth = out.blockWidth(jBlock);,1,0,0,1,2,2,3,0,1,6,42,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,727,                final int      outIndex = iBlock * out.blockColumns + jBlock;,5,2,0,0,0,2,0,0,1,4,61,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,728,                final double[] outBlock = out.blocks[outIndex];,3,0,1,0,4,2,0,0,1,5,47,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,729,                final int      index    = pBlock * blockColumns + qBlock;,4,2,0,0,0,2,0,0,1,4,57,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,730,                final int      width    = blockWidth(qBlock);,1,0,0,1,2,2,2,0,2,6,45,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,732,                final int heightExcess = iHeight + rowsShift - BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,58,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,733,                final int widthExcess  = jWidth + columnsShift - BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,60,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,734,                if (heightExcess > 0) {,1,1,0,1,3,1,0,0,0,5,23,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,736,                    if (widthExcess > 0) {,1,1,0,1,3,1,0,0,0,5,22,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,738,                        final int width2 = blockWidth(qBlock + 1);,2,1,0,1,2,2,1,0,2,7,42,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,739,"                        copyBlockPart(blocks[index], width,",0,0,1,0,3,0,2,0,1,4,35,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,743,"                        copyBlockPart(blocks[index + 1], width2,",1,1,1,0,3,0,2,0,1,6,40,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,747,"                        copyBlockPart(blocks[index + blockColumns], width,",2,1,1,0,3,0,2,0,1,6,50,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,751,"                        copyBlockPart(blocks[index + blockColumns + 1], width2,",2,1,1,0,3,0,2,0,1,6,55,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,755,                    } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,757,"                        copyBlockPart(blocks[index], width,",0,0,1,0,3,0,2,0,1,4,35,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,761,"                        copyBlockPart(blocks[index + blockColumns], width,",2,1,1,0,3,0,2,0,1,6,50,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,768,                    if (widthExcess > 0) {,1,1,0,1,3,1,0,0,0,5,22,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,770,                        final int width2 = blockWidth(qBlock + 1);,2,1,0,1,2,2,1,0,2,7,42,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,771,"                        copyBlockPart(blocks[index], width,",0,0,1,0,3,0,2,0,1,4,35,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,775,"                        copyBlockPart(blocks[index + 1], width2,",1,1,1,0,3,0,2,0,1,6,40,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,779,                    } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,781,"                        copyBlockPart(blocks[index], width,",0,0,1,0,3,0,2,0,1,4,35,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,788,                ++qBlock;,1,0,0,0,0,0,0,0,1,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,792,            ++pBlock;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,796,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,820,        final int length = srcEndColumn - srcStartColumn;,3,1,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,821,        int srcPos = srcStartRow * srcWidth + srcStartColumn;,4,2,0,0,0,1,0,0,0,3,53,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,822,        int dstPos = dstStartRow * dstWidth + dstStartColumn;,4,2,0,0,0,1,0,0,0,3,53,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,823,        for (int srcRow = srcStartRow; srcRow < srcEndRow; ++srcRow) {,5,1,0,1,3,2,0,0,1,6,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,824,"            System.arraycopy(srcBlock, srcPos, dstBlock, dstPos, length);",0,0,0,0,2,0,7,0,0,2,61,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,825,            srcPos += srcWidth;,2,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,826,            dstPos += dstWidth;,2,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,828,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,836,        final int refLength = subMatrix[0].length;,2,0,1,0,2,2,0,0,1,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,837,        if (refLength < 1) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,838,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");",0,0,0,1,2,1,2,0,1,5,98,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,840,        final int endRow    = row + subMatrix.length - 1;,4,2,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,841,        final int endColumn = column + refLength - 1;,3,2,0,0,0,2,0,0,1,4,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,842,"        MatrixUtils.checkSubMatrixIndex(this, row, endRow, column, endColumn);",0,0,0,0,2,1,6,0,0,3,70,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,843,        for (final double[] subRow : subMatrix) {,2,0,0,1,5,3,0,0,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,844,            if (subRow.length != refLength) {,3,1,0,1,3,1,0,0,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,845,                throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,852,        final int blockStartRow    = row / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,853,        final int blockEndRow      = (endRow + BLOCK_SIZE) / BLOCK_SIZE;,4,2,0,1,2,2,0,0,1,6,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,854,        final int blockStartColumn = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,855,        final int blockEndColumn   = (endColumn + BLOCK_SIZE) / BLOCK_SIZE;,4,2,0,1,2,2,0,0,1,6,67,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,858,        for (int iBlock = blockStartRow; iBlock < blockEndRow; ++iBlock) {,5,1,0,1,3,2,0,0,1,6,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,859,            final int iHeight  = blockHeight(iBlock);,1,0,0,1,2,2,2,0,2,6,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,860,            final int firstRow = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,861,"            final int iStart   = Math.max(row,    firstRow);",1,0,0,0,2,2,4,0,1,5,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,862,"            final int iEnd     = Math.min(endRow + 1, firstRow + iHeight);",4,2,0,0,2,2,2,0,1,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,864,            for (int jBlock = blockStartColumn; jBlock < blockEndColumn; ++jBlock) {,5,1,0,1,3,2,0,0,1,6,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,865,                final int jWidth      = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,43,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,866,                final int firstColumn = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,44,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,867,"                final int jStart      = Math.max(column,    firstColumn);",1,0,0,0,2,2,4,0,1,5,57,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,868,"                final int jEnd        = Math.min(endColumn + 1, firstColumn + jWidth);",4,2,0,0,2,2,2,0,1,6,70,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,869,                final int jLength     = jEnd - jStart;,3,1,0,0,0,2,0,0,1,4,38,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,872,                final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,873,                for (int i = iStart; i < iEnd; ++i) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,874,"                    System.arraycopy(subMatrix[i - row], jStart - column,",4,2,1,0,3,0,2,0,0,5,53,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,881,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,888,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,0,2,1,3,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,889,"        final BlockRealMatrix out = new BlockRealMatrix(1, columns);",2,0,0,0,2,2,0,2,2,5,60,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,892,        final int iBlock  = row / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,893,        final int iRow    = row - iBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,894,        int outBlockIndex = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,895,        int outIndex      = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,896,        double[] outBlock = out.blocks[outBlockIndex];,3,0,1,0,4,1,0,0,0,4,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,897,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,898,            final int jWidth     = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,899,            final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,900,            final int available  = outBlock.length - outIndex;,4,1,0,0,0,2,0,0,1,4,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,901,            if (jWidth > available) {,2,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,902,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, available);",2,1,0,0,2,0,6,0,0,4,70,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,903,                outBlock = out.blocks[++outBlockIndex];,4,0,0,0,2,0,0,0,2,3,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,904,"                System.arraycopy(block, iRow * jWidth, outBlock, 0, jWidth - available);",4,2,0,0,2,0,4,0,0,4,72,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,905,                outIndex = jWidth - available;,3,1,0,0,0,0,0,0,1,3,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,907,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, jWidth);",2,1,0,0,2,0,6,0,0,4,67,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,908,                outIndex += jWidth;,2,0,0,0,0,0,0,0,1,2,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,912,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,921,"            setRowMatrix(row, (BlockRealMatrix) matrix);",1,0,0,1,4,0,2,1,1,6,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,924,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,922,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,923,"            super.setRowMatrix(row, matrix);",3,0,0,0,2,1,0,0,0,3,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,925,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,941,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,0,2,1,3,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,942,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,943,        if ((matrix.getRowDimension() != 1) ||,0,2,0,2,5,1,2,0,0,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,945,            throw new InvalidMatrixException(,0,0,0,0,1,2,0,1,1,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,952,        final int iBlock = row / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,953,        final int iRow   = row - iBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,954,        int mBlockIndex  = 0;,1,0,0,0,0,1,0,0,0,2,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,955,        int mIndex       = 0;,1,0,0,0,0,1,0,0,0,2,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,956,        double[] mBlock  = matrix.blocks[mBlockIndex];,3,0,1,0,4,1,0,0,0,4,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,957,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,958,            final int jWidth     = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,959,            final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,960,            final int available  = mBlock.length - mIndex;,4,1,0,0,0,2,0,0,1,4,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,961,            if (jWidth > available) {,2,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,962,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, available);",2,1,0,0,2,0,6,0,0,4,66,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,963,                mBlock = matrix.blocks[++mBlockIndex];,4,0,0,0,2,0,0,0,2,3,38,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,964,"                System.arraycopy(mBlock, 0, block, iRow * jWidth, jWidth - available);",4,2,0,0,2,0,4,0,0,4,70,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,965,                mIndex = jWidth - available;,3,1,0,0,0,0,0,0,1,3,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,967,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, jWidth);",2,1,0,0,2,0,6,0,0,4,63,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,968,                mIndex += jWidth;,2,0,0,0,0,0,0,0,1,2,17,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,972,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,979,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,0,2,1,3,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,980,"        final BlockRealMatrix out = new BlockRealMatrix(rows, 1);",2,0,0,0,2,2,0,2,2,5,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,983,        final int jBlock  = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,984,        final int jColumn = column - jBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,985,        final int jWidth  = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,986,        int outBlockIndex = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,987,        int outIndex      = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,988,        double[] outBlock = out.blocks[outBlockIndex];,3,0,1,0,4,1,0,0,0,4,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,989,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,990,            final int iHeight = blockHeight(iBlock);,1,0,0,1,2,2,2,0,2,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,991,            final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,992,            for (int i = 0; i < iHeight; ++i) {,4,1,0,1,3,2,0,0,1,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,993,                if (outIndex >= outBlock.length) {,3,1,0,1,3,1,0,0,0,5,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,994,                    outBlock = out.blocks[++outBlockIndex];,4,0,0,0,2,0,0,0,2,3,39,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,995,                    outIndex = 0;,1,0,0,0,0,0,0,0,1,2,13,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,997,                outBlock[outIndex++] = block[i * jWidth + jColumn];,4,2,1,0,4,0,0,0,2,5,51,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1001,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1010,"            setColumnMatrix(column, (BlockRealMatrix) matrix);",1,0,0,1,4,0,2,1,1,6,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1013,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1011,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1012,"            super.setColumnMatrix(column, matrix);",3,0,0,0,2,1,0,0,0,3,38,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1014,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1030,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,0,2,1,3,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1031,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1032,        if ((matrix.getRowDimension() != nRows) ||,1,2,0,2,5,1,2,0,0,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1034,            throw new InvalidMatrixException(,0,0,0,0,1,2,0,1,1,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1041,        final int jBlock  = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1042,        final int jColumn = column - jBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1043,        final int jWidth  = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1044,        int mBlockIndex = 0;,1,0,0,0,0,1,0,0,0,2,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1045,        int mIndex      = 0;,1,0,0,0,0,1,0,0,0,2,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1046,        double[] mBlock = matrix.blocks[mBlockIndex];,3,0,1,0,4,1,0,0,0,4,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1047,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1048,            final int iHeight = blockHeight(iBlock);,1,0,0,1,2,2,2,0,2,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1049,            final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1050,            for (int i = 0; i < iHeight; ++i) {,4,1,0,1,3,2,0,0,1,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1051,                if (mIndex >= mBlock.length) {,3,1,0,1,3,1,0,0,0,5,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1052,                    mBlock = matrix.blocks[++mBlockIndex];,4,0,0,0,2,0,0,0,2,3,38,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1053,                    mIndex = 0;,1,0,0,0,0,0,0,0,1,2,11,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1055,                block[i * jWidth + jColumn] = mBlock[mIndex++];,4,2,1,0,4,0,0,0,2,5,47,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1059,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1066,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,0,2,1,3,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1067,        final double[] outData = new double[columns];,1,0,1,0,4,4,0,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1070,        final int iBlock  = row / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1071,        final int iRow    = row - iBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1072,        int outIndex      = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1073,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1074,            final int jWidth     = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1075,            final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1076,"            System.arraycopy(block, iRow * jWidth, outData, outIndex, jWidth);",2,1,0,0,2,0,6,0,0,4,66,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1077,            outIndex += jWidth;,2,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1080,"        return new ArrayRealVector(outData, false);",1,0,0,0,2,2,0,1,2,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1089,"            setRow(row, ((ArrayRealVector) vector).getDataRef());",1,0,0,2,8,0,3,1,1,6,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1092,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1090,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1091,"            super.setRowVector(row, vector);",3,0,0,0,2,1,0,0,0,3,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1093,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1100,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,0,2,1,3,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1101,        final double[] outData = new double[rows];,1,0,1,0,4,4,0,0,1,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1104,        final int jBlock  = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1105,        final int jColumn = column - jBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1106,        final int jWidth  = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1107,        int outIndex      = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1108,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1109,            final int iHeight = blockHeight(iBlock);,1,0,0,1,2,2,2,0,2,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1110,            final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1111,            for (int i = 0; i < iHeight; ++i) {,4,1,0,1,3,2,0,0,1,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1112,                outData[outIndex++] = block[i * jWidth + jColumn];,4,2,1,0,4,0,0,0,2,5,50,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1116,"        return new ArrayRealVector(outData, false);",1,0,0,0,2,2,0,1,2,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1125,"            setColumn(column, ((ArrayRealVector) vector).getDataRef());",1,0,0,2,8,0,3,1,1,6,59,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1128,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1126,        } catch (ClassCastException cce) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1127,"            super.setColumnVector(column, vector);",3,0,0,0,2,1,0,0,0,3,38,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1129,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1136,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,0,2,1,3,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1137,        final double[] out = new double[columns];,1,0,1,0,4,4,0,0,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1140,        final int iBlock  = row / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1141,        final int iRow    = row - iBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1142,        int outIndex      = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1143,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1144,            final int jWidth     = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1145,            final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1146,"            System.arraycopy(block, iRow * jWidth, out, outIndex, jWidth);",2,1,0,0,2,0,6,0,0,4,62,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1147,            outIndex += jWidth;,2,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1150,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1159,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,0,2,1,3,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1160,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1161,        if (array.length != nCols) {,3,1,0,1,3,1,0,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1162,            throw new InvalidMatrixException(,0,0,0,0,1,2,0,1,1,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1168,        final int iBlock  = row / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1169,        final int iRow    = row - iBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1170,        int outIndex      = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1171,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1172,            final int jWidth     = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1173,            final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1174,"            System.arraycopy(array, outIndex, block, iRow * jWidth, jWidth);",2,1,0,0,2,0,6,0,0,4,64,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1175,            outIndex += jWidth;,2,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1178,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1210,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,0,2,1,3,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1211,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1212,        if (array.length != nRows) {,3,1,0,1,3,1,0,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1213,            throw new InvalidMatrixException(,0,0,0,0,1,2,0,1,1,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1219,        final int jBlock  = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1220,        final int jColumn = column - jBlock * BLOCK_SIZE;,4,2,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1221,        final int jWidth  = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1222,        int outIndex      = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1223,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1224,            final int iHeight = blockHeight(iBlock);,1,0,0,1,2,2,2,0,2,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1225,            final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1226,            for (int i = 0; i < iHeight; ++i) {,4,1,0,1,3,2,0,0,1,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1227,                block[i * jWidth + jColumn] = array[outIndex++];,4,2,1,0,4,0,0,0,2,5,48,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1231,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1243,        } catch (ArrayIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1244,            throw new MatrixIndexException(,0,0,0,0,1,2,0,1,1,4,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1260,        } catch (ArrayIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1261,            throw new MatrixIndexException(,0,0,0,0,1,2,0,1,1,4,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1272,            final int iBlock = row    / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1273,            final int jBlock = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1274,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,4,4,0,1,4,2,2,0,2,7,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1276,            blocks[iBlock * blockColumns + jBlock][k] += increment;,4,2,1,0,4,0,0,0,1,5,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1281,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1277,        } catch (ArrayIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1278,            throw new MatrixIndexException(,0,0,0,0,1,2,0,1,1,4,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1282,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1289,            final int iBlock = row    / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1290,            final int jBlock = column / BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1291,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,4,4,0,1,4,2,2,0,2,7,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1293,            blocks[iBlock * blockColumns + jBlock][k] *= factor;,4,2,1,0,4,0,0,0,1,5,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1298,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1294,        } catch (ArrayIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1295,            throw new MatrixIndexException(,0,0,0,0,1,2,0,1,1,4,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1299,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1305,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1306,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1307,"        final BlockRealMatrix out = new BlockRealMatrix(nCols, nRows);",3,0,0,0,2,2,0,2,2,5,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1310,        int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1311,        for (int iBlock = 0; iBlock < blockColumns; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1312,            for (int jBlock = 0; jBlock < blockRows; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1315,                final double[] outBlock = out.blocks[blockIndex];,3,0,1,0,4,2,0,0,1,5,49,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1316,                final double[] tBlock   = blocks[jBlock * blockColumns + iBlock];,4,2,1,0,4,2,0,0,1,6,65,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1317,                final int      pStart   = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,46,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1318,"                final int      pEnd     = Math.min(pStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,65,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1319,                final int      qStart   = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,46,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1320,"                final int      qEnd     = Math.min(qStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,62,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1321,                int k = 0;,1,0,0,0,0,1,0,0,0,2,10,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1322,                for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1323,                    final int lInc = pEnd - pStart;,3,1,0,0,0,2,0,0,1,4,31,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1324,                    int l = p - pStart;,3,1,0,0,0,1,0,0,0,3,19,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1325,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1326,                        outBlock[k] = tBlock[l];,0,0,1,0,4,0,0,0,1,3,24,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1327,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1328,                        l+= lInc;,2,0,0,0,0,0,0,0,1,2,9,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1333,                ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1338,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1359,        if (v.length != columns) {,3,1,0,1,3,1,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1360,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1364,        final double[] out = new double[rows];,1,0,1,0,4,4,0,0,1,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1367,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1368,            final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1369,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1370,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1371,                final double[] block  = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,63,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1372,                final int      qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,44,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1373,"                final int      qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,63,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1374,                int k = 0;,1,0,0,0,0,1,0,0,0,2,10,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1375,                for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1376,                    double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1377,                    int q = qStart;,2,0,0,0,0,1,0,0,0,2,15,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1378,                    while (q < qEnd - 3) {,2,2,0,1,3,1,0,0,0,5,22,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1379,                        sum += block[k]     * v[q]     +,1,4,1,0,4,0,0,0,1,5,32,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1383,                        k += 4;,1,0,0,0,0,0,0,0,1,2,7,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1384,                        q += 4;,1,0,0,0,0,0,0,0,1,2,7,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1386,                    while (q < qEnd) {,2,1,0,1,3,1,0,0,0,5,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1387,                        sum += block[k++] * v[q++];,3,1,1,0,4,0,0,0,3,5,27,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1389,                    out[p] += sum;,1,0,1,0,2,0,0,0,1,4,14,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1394,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1403,        if (v.length != rows) {,3,1,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1404,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1408,        final double[] out = new double[columns];,1,0,1,0,4,4,0,0,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1411,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1412,            final int jWidth  = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1413,            final int jWidth2 = jWidth  + jWidth;,3,1,0,0,0,2,0,0,1,4,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1414,            final int jWidth3 = jWidth2 + jWidth;,3,1,0,0,0,2,0,0,1,4,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1415,            final int jWidth4 = jWidth3 + jWidth;,3,1,0,0,0,2,0,0,1,4,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1416,            final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1417,"            final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,58,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1418,            for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1419,                final double[] block  = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,63,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1420,                final int      pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,44,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1421,"                final int      pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,60,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1422,                for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1423,                    int k = q - qStart;,3,1,0,0,0,1,0,0,0,3,19,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1424,                    double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1425,                    int p = pStart;,2,0,0,0,0,1,0,0,0,2,15,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1426,                    while (p < pEnd - 3) {,2,2,0,1,3,1,0,0,0,5,22,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1427,                        sum += block[k]           * v[p]     +,1,4,1,0,4,0,0,0,1,5,38,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1431,                        k += jWidth4;,2,0,0,0,0,0,0,0,1,2,13,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1432,                        p += 4;,1,0,0,0,0,0,0,0,1,2,7,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1434,                    while (p < pEnd) {,2,1,0,1,3,1,0,0,0,5,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1435,                        sum += block[k] * v[p++];,2,1,1,0,4,0,0,0,2,5,25,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1436,                        k += jWidth;,2,0,0,0,0,0,0,0,1,2,12,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1438,                    out[q] += sum;,1,0,1,0,2,0,0,0,1,4,14,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1443,        return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1451,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1452,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1453,            final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1454,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1455,            for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1456,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1457,                    final int jWidth = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,38,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1458,                    final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1459,"                    final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,58,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1460,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1461,                    int k = (p - pStart) * jWidth;,4,2,0,1,2,1,0,0,0,5,30,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1462,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1463,"                        block[k] = visitor.visit(p, q, block[k]);",0,0,1,0,6,0,4,0,1,4,41,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1464,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1469,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1476,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1477,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1478,            final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1479,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1480,            for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1481,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1482,                    final int jWidth = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,38,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1483,                    final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1484,"                    final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,58,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1485,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1486,                    int k = (p - pStart) * jWidth;,4,2,0,1,2,1,0,0,0,5,30,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1487,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1488,"                        visitor.visit(p, q, block[k]);",0,0,1,0,4,0,4,0,0,3,30,13,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1489,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1494,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1503,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1504,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,8,0,0,2,71,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1505,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,7,4,0,1,3,2,0,0,1,6,86,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1506,            final int p0     = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1507,"            final int pStart = Math.max(startRow, p0);",1,0,0,0,2,2,4,0,1,5,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1508,"            final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",4,3,0,1,4,2,2,0,1,7,67,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1509,            for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1510,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,7,4,0,1,3,2,0,0,1,6,92,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1511,                    final int jWidth = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,38,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1512,                    final int q0     = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1513,"                    final int qStart = Math.max(startColumn, q0);",1,0,0,0,2,2,4,0,1,5,45,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1514,"                    final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",4,3,0,1,4,2,2,0,1,7,70,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1515,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1516,                    int k = (p - p0) * jWidth + qStart - q0;,6,4,0,1,2,1,0,0,0,5,40,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1517,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1518,"                        block[k] = visitor.visit(p, q, block[k]);",0,0,1,0,6,0,4,0,1,4,41,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1519,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1524,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1533,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1534,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,8,0,0,2,71,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1535,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,7,4,0,1,3,2,0,0,1,6,86,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1536,            final int p0     = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1537,"            final int pStart = Math.max(startRow, p0);",1,0,0,0,2,2,4,0,1,5,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1538,"            final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",4,3,0,1,4,2,2,0,1,7,67,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1539,            for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1540,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,7,4,0,1,3,2,0,0,1,6,92,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1541,                    final int jWidth = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,38,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1542,                    final int q0     = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1543,"                    final int qStart = Math.max(startColumn, q0);",1,0,0,0,2,2,4,0,1,5,45,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1544,"                    final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",4,3,0,1,4,2,2,0,1,7,70,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1545,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1546,                    int k = (p - p0) * jWidth + qStart - q0;,6,4,0,1,2,1,0,0,0,5,40,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1547,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1548,"                        visitor.visit(p, q, block[k]);",0,0,1,0,4,0,4,0,0,3,30,13,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1549,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1554,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1561,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1562,        int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1563,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1564,            final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1565,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1566,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1567,                final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1568,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,58,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1569,                final double[] block = blocks[blockIndex];,1,0,1,0,4,2,0,0,1,5,42,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1570,                int k = 0;,1,0,0,0,0,1,0,0,0,2,10,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1571,                for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1572,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1573,"                        block[k] = visitor.visit(p, q, block[k]);",0,0,1,0,6,0,4,0,1,4,41,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1574,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1577,                ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1580,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1587,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,2,0,0,2,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1588,        int blockIndex = 0;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1589,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,4,1,0,1,3,2,0,0,1,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1590,            final int pStart = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1591,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",3,1,0,0,2,2,3,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1592,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,4,1,0,1,3,2,0,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1593,                final int qStart = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1594,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",3,1,0,0,2,2,3,0,1,6,58,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1595,                final double[] block = blocks[blockIndex];,1,0,1,0,4,2,0,0,1,5,42,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1596,                int k = 0;,1,0,0,0,0,1,0,0,0,2,10,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1597,                for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1598,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1599,"                        visitor.visit(p, q, block[k]);",0,0,1,0,4,0,4,0,0,3,30,13,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1600,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1603,                ++blockIndex;,1,0,0,0,0,0,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1606,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1615,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1616,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,8,0,0,2,71,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1617,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,7,4,0,1,3,2,0,0,1,6,86,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1618,            final int p0     = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1619,"            final int pStart = Math.max(startRow, p0);",1,0,0,0,2,2,4,0,1,5,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1620,"            final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",4,3,0,1,4,2,2,0,1,7,67,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1621,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,7,4,0,1,3,2,0,0,1,6,92,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1622,                final int jWidth = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,38,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1623,                final int q0     = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1624,"                final int qStart = Math.max(startColumn, q0);",1,0,0,0,2,2,4,0,1,5,45,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1625,"                final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",4,3,0,1,4,2,2,0,1,7,70,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1626,                final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1627,                for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1628,                    int k = (p - p0) * jWidth + qStart - q0;,6,4,0,1,2,1,0,0,0,5,40,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1629,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1630,"                        block[k] = visitor.visit(p, q, block[k]);",0,0,1,0,6,0,4,0,1,4,41,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1631,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1636,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1645,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,1,6,0,0,3,80,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1646,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0,0,0,0,2,0,8,0,0,2,71,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1647,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,7,4,0,1,3,2,0,0,1,6,86,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1648,            final int p0     = iBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1649,"            final int pStart = Math.max(startRow, p0);",1,0,0,0,2,2,4,0,1,5,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1650,"            final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",4,3,0,1,4,2,2,0,1,7,67,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1651,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,7,4,0,1,3,2,0,0,1,6,92,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1652,                final int jWidth = blockWidth(jBlock);,1,0,0,1,2,2,2,0,2,6,38,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1653,                final int q0     = jBlock * BLOCK_SIZE;,3,1,0,0,0,2,0,0,1,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1654,"                final int qStart = Math.max(startColumn, q0);",1,0,0,0,2,2,4,0,1,5,45,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1655,"                final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",4,3,0,1,4,2,2,0,1,7,70,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1656,                final double[] block = blocks[iBlock * blockColumns + jBlock];,4,2,1,0,4,2,0,0,1,6,62,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1657,                for (int p = pStart; p < pEnd; ++p) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1658,                    int k = (p - p0) * jWidth + qStart - q0;,6,4,0,1,2,1,0,0,0,5,40,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1659,                    for (int q = qStart; q < qEnd; ++q) {,5,1,0,1,3,2,0,0,1,6,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1660,"                        visitor.visit(p, q, block[k]);",0,0,1,0,4,0,4,0,0,3,30,13,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1661,                        ++k;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1666,        return visitor.end();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,64,public class BlockRealMatrix extends AbstractRealMatrix implements Serializable {,1,0,0,0,1,4,0,2,1,5,81,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,631,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0,0,0,2,6,1,3,2,2,6,82,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,636,"                out.setEntry(column, row, value);",0,0,0,0,2,0,5,0,0,2,33,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,637,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,195,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,2,1,1,2,6,60,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,210,                this.endRow = endRow;,2,0,0,0,0,1,0,0,1,3,21,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,211,                columnSum   = 0;,1,0,0,0,0,0,0,0,1,2,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,212,                maxColSum   = 0;,1,0,0,0,0,0,0,0,1,2,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,213,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,217,                columnSum += Math.abs(value);,1,0,0,1,2,0,3,0,1,5,29,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,218,                if (row == endRow) {,2,1,0,1,3,1,0,0,0,5,20,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,219,"                    maxColSum = Math.max(maxColSum, columnSum);",1,0,0,0,2,0,4,0,1,4,43,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,220,                    columnSum = 0;,1,0,0,0,0,0,0,0,1,2,14,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,222,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,226,                return maxColSum;,1,0,0,0,0,1,0,0,0,2,17,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,606,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,1,1,1,2,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,611,"                out.setEntry(column, row, value);",0,0,0,0,2,0,5,0,0,2,33,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,612,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,677,            super(Fraction.ZERO);,2,0,0,1,2,1,0,0,1,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,678,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,684,            data = new double[rows][columns];,1,0,1,0,4,2,0,0,1,5,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,685,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,690,            data[row][column] = value.doubleValue();,0,0,1,1,6,0,2,0,1,5,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,691,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,697,"            return new Array2DRowRealMatrix(data, false);",1,0,0,0,2,2,0,1,2,5,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,670,    private static class FractionMatrixConverter extends DefaultFieldMatrixPreservingVisitor<Fraction> {,1,0,0,0,1,4,0,2,2,5,100,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,320,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,1,1,1,2,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,333,                this.startRow    = startRow;,2,0,0,0,0,1,0,0,1,3,28,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,334,                this.startColumn = startColumn;,2,0,0,0,0,1,0,0,1,3,31,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,335,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,340,                destination[row - startRow][column - startColumn] = value;,5,2,1,0,4,0,0,0,1,5,58,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,341,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,721,            super(BigFraction.ZERO);,2,0,0,1,2,1,0,0,1,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,722,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,728,            data = new double[rows][columns];,1,0,1,0,4,2,0,0,1,5,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,729,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,734,            data[row][column] = value.doubleValue();,0,0,1,1,6,0,2,0,1,5,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,735,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,741,"            return new Array2DRowRealMatrix(data, false);",1,0,0,0,2,2,0,1,2,5,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,714,    private static class BigFractionMatrixConverter extends DefaultFieldMatrixPreservingVisitor<BigFraction> {,1,0,0,0,1,4,0,2,2,5,106,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,315,        subMatrix.walkInOptimizedOrder(new DefaultFieldMatrixChangingVisitor<T>(field.getZero()) {,0,0,0,2,6,1,4,2,1,6,90,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,320,"                return getEntry(selectedRows[row], selectedColumns[column]);",0,0,1,0,6,1,1,0,1,5,60,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,69,72,    public abstract class Entry {,1,0,0,0,1,3,0,0,2,4,29,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,69,91,            return index;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,69,98,            this.index = index;,2,0,0,0,0,1,0,0,1,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,69,99,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,288,        subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {,0,0,0,1,4,1,2,1,1,6,71,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,293,"                return getEntry(selectedRows[row], selectedColumns[column]);",0,0,1,0,6,1,1,0,1,5,60,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,234,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,2,1,1,2,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,243,                sum = 0;,1,0,0,0,0,0,0,0,1,2,8,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,244,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,248,                sum += value * value;,3,1,0,0,0,0,0,0,1,3,21,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,249,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,253,                return Math.sqrt(sum);,0,0,0,1,2,1,3,0,0,4,22,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,347,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0,0,0,2,6,1,3,2,2,6,82,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,360,                this.startRow    = startRow;,2,0,0,0,0,1,0,0,1,3,28,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,361,                this.startColumn = startColumn;,2,0,0,0,0,1,0,0,1,3,31,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,362,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,367,                destination[row - startRow][column - startColumn] = value;,5,2,1,0,4,0,0,0,1,5,58,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,69,368,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,74,"        return evaluate(x, DEFAULT_EPSILON, Integer.MAX_VALUE);",2,0,0,0,2,1,3,0,1,5,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,85,"        return evaluate(x, epsilon, Integer.MAX_VALUE);",2,0,0,0,2,1,3,0,1,5,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,96,"        return evaluate(x, DEFAULT_EPSILON, maxIterations);",0,0,0,0,2,1,4,0,1,4,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,148,                double scaleFactor = 1d;,1,0,0,0,0,1,0,0,0,2,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,149,                double lastScaleFactor = 1d;,1,0,0,0,0,1,0,0,0,2,28,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,150,                final int maxPower = 5;,1,0,0,0,0,2,0,0,1,3,23,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,151,"                final double scale = Math.max(a,b);",1,0,0,0,2,2,4,0,1,5,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,152,                if (scale <= 0) {  // Can't scale,1,1,0,1,3,1,0,0,0,5,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,153,                    throw new ConvergenceException(,0,0,0,0,1,2,0,1,1,4,31,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,157,                infinite = true;,1,0,0,0,0,0,0,0,2,2,16,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,158,                for (int i = 0; i < maxPower; i++) {,4,1,0,1,3,2,0,0,1,6,36,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,159,                    lastScaleFactor = scaleFactor;,2,0,0,0,0,0,0,0,1,2,30,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,160,                    scaleFactor *= scale;,2,0,0,0,0,0,0,0,1,2,21,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,161,                    if (a != 0.0 && a > b) {,3,3,0,1,3,1,0,0,0,5,24,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,162,                        p2 = p1 / lastScaleFactor + (b / scaleFactor * p0);,6,4,0,1,2,0,0,0,1,5,51,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,163,                        q2 = q1 / lastScaleFactor + (b / scaleFactor * q0);,6,4,0,1,2,0,0,0,1,5,51,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,164,                    } else if (b != 0) {,1,1,0,1,4,2,0,0,0,5,20,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,165,                        p2 = (a / scaleFactor * p1) + p0 / lastScaleFactor;,6,4,0,1,2,0,0,0,1,5,51,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,166,                        q2 = (a / scaleFactor * q1) + q0 / lastScaleFactor;,6,4,0,1,2,0,0,0,1,5,51,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,168,                    infinite = Double.isInfinite(p2) || Double.isInfinite(q2);,1,1,0,1,4,0,6,0,1,6,58,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,169,                    if (!infinite) {,1,0,0,1,3,1,0,0,1,5,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,170,                        break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,177,               throw new ConvergenceException(,0,0,0,0,1,2,0,1,1,4,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,185,                throw new ConvergenceException(,0,0,0,0,1,2,0,1,1,4,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,200,"            throw new MaxIterationsExceededException(maxIterations,",1,0,0,0,1,2,0,1,1,5,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,69,43,"        super(""Maximal number of iterations ({0}) exceeded"", maxIterations);",1,0,0,1,6,1,0,0,2,5,68,3,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,69,44,        this.maxIterations = maxIterations;,2,0,0,0,0,1,0,0,1,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,69,45,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,69,56,"        super(pattern, arguments);",2,0,0,0,2,1,0,0,1,4,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,69,57,        this.maxIterations = maxIterations;,2,0,0,0,0,1,0,0,1,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,69,58,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,69,64,        return maxIterations;,1,0,0,0,0,1,0,0,0,2,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,69,34,"        super(""Convergence failed"");",0,0,0,1,2,1,0,0,2,4,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,69,35,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,69,45,"        super(pattern, arguments);",2,0,0,0,2,1,0,0,1,4,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,69,46,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,69,53,        super(cause);,1,0,0,1,2,1,0,0,1,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,69,54,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,69,65,"        super(cause, pattern, arguments);",3,0,0,0,2,1,0,0,1,4,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,69,66,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,69,61,        if (x0 > x1) {,2,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,69,62,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,69,66,        return cumulativeProbability(x1) - cumulativeProbability(x0);,0,1,0,1,4,1,4,0,2,6,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,69,89,            new UnivariateRealFunction() {,0,0,0,1,3,1,0,1,1,5,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,69,91,                double ret = Double.NaN;,3,0,0,0,0,1,0,0,0,2,24,11,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,69,93,                    ret = cumulativeProbability(x) - p;,2,1,0,1,2,0,2,0,2,6,35,12,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,69,96,                },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,69,94,                } catch (MathException ex) {,1,0,0,1,4,1,0,1,0,5,28,12,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,69,95,"                    throw new FunctionEvaluationException(ex, x, ex.getPattern(), ex.getArguments());",2,0,0,1,6,2,4,1,1,7,81,13,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,69,97,                if (Double.isNaN(ret)) {,0,0,0,2,5,1,3,0,0,4,24,11,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,69,98,"                    throw new FunctionEvaluationException(x,",1,0,0,0,1,2,0,1,1,5,40,12,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,69,101,                return ret;,1,0,0,0,0,1,0,0,0,2,11,10,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,69,64,"        throw new MathRuntimeException(new UnsupportedOperationException(),",0,0,0,1,3,3,0,2,2,5,67,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,69,81,        if (p < 0.0 || p > 1.0) {,2,3,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,69,82,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,69,88,        UnivariateRealFunction rootFindingFunction =,1,0,0,0,0,0,0,1,0,2,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,69,106,        double lowerBound = getDomainLowerBound(p);,1,0,0,1,2,1,2,0,1,6,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,69,107,        double upperBound = getDomainUpperBound(p);,1,0,0,1,2,1,2,0,1,6,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,69,108,        double[] bracket = null;,1,0,0,0,2,1,0,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,69,110,            bracket = UnivariateRealSolverUtils.bracket(,1,0,0,0,1,0,2,0,1,4,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,69,127,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,69,113,        }  catch (ConvergenceException ex) {,1,0,0,1,4,1,0,1,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,69,119,            if (Math.abs(rootFindingFunction.value(lowerBound)) < getSolverAbsoluteAccuracy()) {,0,1,0,3,9,1,6,0,1,6,84,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,69,120,                return lowerBound;,1,0,0,0,0,1,0,0,0,2,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,69,122,            if (Math.abs(rootFindingFunction.value(upperBound)) < getSolverAbsoluteAccuracy()) {,0,1,0,3,9,1,6,0,1,6,84,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,69,123,                return upperBound;,1,0,0,0,0,1,0,0,0,2,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,69,126,            throw new MathException(ex);,1,0,0,1,2,2,0,1,1,6,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,69,130,"        double root = UnivariateRealSolverUtils.solve(rootFindingFunction,",1,0,0,0,1,1,3,0,0,4,66,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,69,134,        return root;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,69,176,        return solverAbsoluteAccuracy;,1,0,0,0,0,1,0,0,0,2,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,89,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,101,        return degreesOfFreedom;,1,0,0,0,0,1,0,0,0,2,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,113,        final double n = degreesOfFreedom;,2,0,0,0,0,2,0,0,1,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,114,        final double nPlus1Over2 = (n + 1) / 2;,2,2,0,1,2,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,115,        return Math.exp(Gamma.logGamma(nPlus1Over2) - 0.5 * (Math.log(Math.PI) + Math.log(n)) -,2,5,0,2,9,1,10,0,0,6,87,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,129,            ret = 0.5;,1,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,137,                ret = 0.5 * t;,2,1,0,0,0,0,0,0,1,3,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,163,        if (p == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,164,            return Double.NEGATIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,166,        if (p == 1) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,167,            return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,169,        return super.inverseCumulativeProbability(p);,2,0,0,1,2,2,0,0,0,4,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,183,        return -Double.MAX_VALUE;,2,0,0,0,0,1,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,197,        return Double.MAX_VALUE;,2,0,0,0,0,1,0,0,0,2,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,210,        return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,222,        return solverAbsoluteAccuracy;,1,0,0,0,0,1,0,0,0,2,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,74,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,75,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,98,            ret = Double.NaN;,3,0,0,0,0,0,0,0,1,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,127,"        return regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",2,0,0,0,2,1,4,0,1,5,67,4,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,165,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,2,3,0,2,11,1,6,0,0,6,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,166,            ret = Double.NaN;,3,0,0,0,0,0,0,0,1,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,167,        } else if (x == 0.0) {,1,1,0,1,4,2,0,0,0,5,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,168,            ret = 0.0;,1,0,0,0,0,0,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,169,        } else if (x >= a + 1) {,2,2,0,1,4,2,0,0,0,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,172,"            ret = 1.0 - regularizedGammaQ(a, x, epsilon, maxIterations);",1,1,0,0,2,0,5,0,2,5,60,8,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,175,            double n = 0.0; // current element index,1,0,0,0,0,1,0,0,0,2,40,9,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,176,            double an = 1.0 / a; // n-th element in the series,2,1,0,0,0,1,0,0,0,3,50,9,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,177,            double sum = an; // partial sum,2,0,0,0,0,1,0,0,0,2,31,9,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,178,            while (Math.abs(an/sum) > epsilon && n < maxIterations && sum < Double.POSITIVE_INFINITY) {,8,6,0,2,5,1,2,0,0,6,91,8,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,180,                n = n + 1.0;,2,1,0,0,0,0,0,0,1,3,12,10,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,181,                an = an * (x / (a + n));,5,3,0,2,4,0,0,0,1,5,24,10,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,184,                sum = sum + an;,3,1,0,0,0,0,0,0,1,3,15,10,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,186,            if (n >= maxIterations) {,2,1,0,1,3,1,0,0,0,5,25,8,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,187,                throw new MaxIterationsExceededException(maxIterations);,1,0,0,1,2,2,0,1,1,6,56,10,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,188,            } else if (Double.isInfinite(sum)) {,0,0,0,2,6,2,3,0,0,4,36,10,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,189,                ret = 1.0;,1,0,0,0,0,0,0,0,1,2,10,11,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,191,                ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;,4,4,0,3,8,0,7,0,3,6,59,11,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,195,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,209,"        return regularizedGammaQ(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",2,0,0,0,2,1,4,0,1,5,67,4,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,242,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,2,3,0,2,11,1,6,0,0,6,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,243,            ret = Double.NaN;,3,0,0,0,0,0,0,0,1,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,244,        } else if (x == 0.0) {,1,1,0,1,4,2,0,0,0,5,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,245,            ret = 1.0;,1,0,0,0,0,0,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,246,        } else if (x < a + 1.0) {,2,2,0,1,4,2,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,249,"            ret = 1.0 - regularizedGammaP(a, x, epsilon, maxIterations);",1,1,0,0,2,0,5,0,2,5,60,8,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,252,            ContinuedFraction cf = new ContinuedFraction() {,1,0,0,1,3,1,0,2,1,6,48,8,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,265,"            ret = 1.0 / cf.evaluate(x, epsilon, maxIterations);",1,1,0,0,2,0,5,0,1,5,51,8,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,266,            ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;,4,4,0,3,8,0,7,0,3,6,59,8,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,269,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,294,        if (x > 0 && x <= S_LIMIT) {,3,3,0,1,3,1,0,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,297,            return -GAMMA - 1 / x;,2,2,0,0,0,1,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,300,        if (x >= C_LIMIT) {,2,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,302,            double inv = 1 / (x * x);,3,2,0,1,2,1,0,0,0,5,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,306,            return Math.log(x) - 0.5 / x - inv * ((1.0 / 12) + inv * (1.0 / 120 - inv / 252));,4,10,0,2,8,1,3,0,0,6,82,6,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,309,        return digamma(x + 1) - 1 / x;,2,3,0,1,2,1,1,0,1,7,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,323,        if (x > 0 && x <= S_LIMIT) {,3,3,0,1,3,1,0,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,324,            return 1 / (x * x);,2,2,0,1,2,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,327,        if (x >= C_LIMIT) {,2,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,328,            double inv = 1 / (x * x);,3,2,0,1,2,1,0,0,0,5,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,333,            return 1 / x + inv / 2 + inv / x * (1.0 / 6 - inv * (1.0 / 30 + inv / 42));,6,12,0,2,4,1,0,0,0,5,75,6,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,336,        return trigamma(x + 1) + 1 / (x * x);,3,4,0,1,4,1,1,0,1,7,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,252,            ContinuedFraction cf = new ContinuedFraction() {,1,0,0,1,3,1,0,2,1,6,48,8,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,256,                    return ((2.0 * n) + 1.0) - a + x;,3,4,0,2,4,1,0,0,0,5,33,14,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,261,                    return n * (a - n);,3,2,0,1,2,1,0,0,0,5,19,14,0.0,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,37,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,38,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,74,"        return regularizedBeta(x, a, b, epsilon, Integer.MAX_VALUE);",2,0,0,0,2,1,5,0,1,5,60,4,0.0,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,90,"        return regularizedBeta(x, a, b, DEFAULT_EPSILON, maxIterations);",0,0,0,0,2,1,6,0,1,4,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,124,            ret = Double.NaN;,3,0,0,0,0,0,0,0,1,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,126,"            ret = 1.0 - regularizedBeta(1.0 - x, b, a, epsilon, maxIterations);",2,2,0,0,2,0,5,0,2,5,67,7,0.0,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,167,"        return logBeta(a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);",2,0,0,0,2,1,4,0,1,5,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,193,            ret = Double.NaN;,3,0,0,0,0,0,0,0,1,2,17,6,0.0,0,0
