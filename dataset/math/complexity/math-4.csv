dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,other,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,113,        Line line1 = (Line) getHyperplane();,1,0,0,1,4,0,1,2,1,6,36,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,114,        Line line2 = (Line) subLine.getHyperplane();,1,0,0,1,4,0,2,2,0,5,44,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,117,        Vector2D v2D = line1.intersection(line2);,1,0,0,1,2,0,3,1,0,5,41,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,120,        Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));,1,0,0,2,6,0,5,1,1,6,71,4,0.14286,1,1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,56,"        this(new Line(start, end), buildIntervalSet(start, end));",2,0,0,0,6,2,3,1,2,6,57,4,0.14286,1,1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,57,    },0,0,0,0,1,0,0,0,0,1,1,2,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,113,        Vector3D v1D = line.intersection(subLine.line);,3,0,0,1,2,0,2,1,0,5,47,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,116,        Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));,1,0,0,2,4,0,5,1,0,5,65,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,156,        return distance(p) < 1.0e-10;,0,1,0,1,2,1,2,0,1,6,29,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,164,        final Vector3D d = p.subtract(zero);,1,0,0,1,2,1,3,1,1,7,36,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,165,"        final Vector3D n = new Vector3D(1.0, d, -d.dotProduct(direction), direction);",3,0,0,1,4,2,3,2,3,7,77,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,166,        return n.getNorm();,0,0,0,1,2,1,2,0,0,4,19,5,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,195,        final double cos = direction.dotProduct(line.direction);,3,0,0,1,2,2,2,0,1,6,56,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,196,        final double n = 1 - cos * cos;,3,2,0,0,0,2,0,0,1,4,31,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,197,        if (n < Precision.EPSILON) {,3,1,0,1,3,1,0,0,0,5,28,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,202,        final Vector3D delta0 = line.zero.subtract(zero);,3,0,0,1,2,1,2,1,1,7,49,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,203,        final double a        = delta0.dotProduct(direction);,1,0,0,1,2,2,3,0,1,6,53,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,204,        final double b        = delta0.dotProduct(line.direction);,3,0,0,1,2,2,2,0,1,6,58,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,206,"        return new Vector3D(1, zero, (a - b * cos) / n, direction);",6,3,0,1,4,2,0,1,1,7,59,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,216,        final Vector3D closest = closestPoint(line);,1,0,0,1,2,1,2,1,2,7,44,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,217,        return line.contains(closest) ? closest : null;,1,0,0,1,2,1,3,0,0,5,47,5,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,56,"        super(new Line(start, end), buildIntervalSet(start, end));",2,0,0,0,6,2,3,1,3,6,58,3,0.125,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,57,    },0,0,0,0,1,0,0,0,0,1,1,2,0.125,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,137,"        final Line line = new Line(start, end);",3,0,0,0,2,2,0,2,2,5,39,4,0.125,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,138,"        return new IntervalsSet(line.toSubSpace(start).getX(),",0,0,0,1,5,2,4,1,1,6,54,4,0.125,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,114,        return point.subtract(zero).dotProduct(direction);,0,0,0,1,4,1,5,0,0,4,50,5,0.125,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,129,        return new Vector1D(getAbscissa((Vector3D) point));,1,0,0,3,6,2,1,2,2,7,51,4,0.125,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,118,        final SubHyperplane<Euclidean1D> upperCut =,1,0,0,0,0,1,0,2,1,4,43,4,0.12121,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,120,"        return new BSPTree<Euclidean1D>(lowerCut,",1,0,0,0,1,2,0,2,1,5,41,4,0.12121,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,107,        final SubHyperplane<Euclidean1D> lowerCut =,1,0,0,0,0,1,0,2,1,4,43,4,0.11429,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,109,        if (Double.isInfinite(upper) && (upper > 0)) {,1,2,0,2,7,1,3,0,0,6,46,4,0.11429,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,139,"        final Line line = new Line(start, end);",3,0,0,0,2,2,0,2,2,5,39,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,140,"        return new IntervalsSet(line.toSubSpace(start).getX(),",0,0,0,1,5,2,4,1,1,6,54,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,47,"        super(buildTree(lower, upper));",0,0,0,0,4,1,3,0,2,4,31,3,0.10811,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,48,    },0,0,0,0,1,0,0,0,0,1,1,2,0.10811,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,94,        if (Double.isInfinite(lower) && (lower < 0)) {,1,2,0,2,7,1,3,0,0,6,46,4,0.10811,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,115,                   final Object attribute) {,1,0,0,0,2,1,0,1,1,5,25,3,0.08696,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,116,        this.cut       = cut;,2,0,0,0,0,1,0,0,1,3,21,4,0.08696,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,117,        this.plus      = plus;,2,0,0,0,0,1,0,0,1,3,22,4,0.08696,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,118,        this.minus     = minus;,2,0,0,0,0,1,0,0,1,3,23,4,0.08696,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,119,        this.parent    = null;,1,0,0,0,0,1,0,0,1,3,22,4,0.08696,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,120,        this.attribute = attribute;,2,0,0,0,0,1,0,0,1,3,27,4,0.08696,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,121,        plus.parent    = this;,2,0,0,0,0,1,0,0,1,3,22,4,0.08696,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,122,        minus.parent   = this;,2,0,0,0,0,1,0,0,1,3,22,4,0.08696,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,123,    },0,0,0,0,1,0,0,0,0,1,1,2,0.08696,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/SubOrientedPoint,4,39,"        super(hyperplane, remainingRegion);",2,0,0,0,2,1,0,0,1,4,35,3,0.08696,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/SubOrientedPoint,4,40,    },0,0,0,0,1,0,0,0,0,1,1,2,0.08696,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint,4,42,"    public OrientedPoint(final Vector1D location, final boolean direct) {",3,0,0,0,3,4,0,1,3,5,69,2,0.08696,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint,4,43,        this.location = location;,2,0,0,0,0,1,0,0,1,3,25,4,0.08696,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint,4,44,        this.direct   = direct;,2,0,0,0,0,1,0,0,1,3,23,4,0.08696,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint,4,45,    },0,0,0,0,1,0,0,0,0,1,1,2,0.08696,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint,4,74,"        return new SubOrientedPoint(this, null);",0,0,0,0,2,3,0,1,1,4,40,4,0.08696,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,4,50,                                    final Region<T> remainingRegion) {,1,0,0,0,2,1,0,2,1,5,34,3,0.08333,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,4,51,        this.hyperplane      = hyperplane;,2,0,0,0,0,1,0,0,1,3,34,4,0.08333,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,4,52,        this.remainingRegion = remainingRegion;,2,0,0,0,0,1,0,0,1,3,39,4,0.08333,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,4,53,    },0,0,0,0,1,0,0,0,0,1,1,2,0.08333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,65,    public Vector1D(double x) {,2,0,0,1,3,2,0,0,1,5,27,2,0.08333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,66,        this.x = x;,2,0,0,0,0,1,0,0,1,3,11,4,0.08333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,67,    },0,0,0,0,1,0,0,0,0,1,1,2,0.08333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,36,    public static final Vector1D ZERO = new Vector1D(0.0);,1,0,0,1,2,4,0,2,4,6,54,2,0.08333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,39,    public static final Vector1D ONE  = new Vector1D(1.0);,1,0,0,1,2,4,0,2,4,6,54,2,0.08333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,43,    public static final Vector1D NaN = new Vector1D(Double.NaN);,3,0,0,1,2,4,0,2,4,6,60,2,0.08333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,47,    public static final Vector1D POSITIVE_INFINITY =,1,0,0,0,0,3,0,1,3,4,48,2,0.08333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,51,    public static final Vector1D NEGATIVE_INFINITY =,1,0,0,0,0,3,0,1,3,4,48,2,0.08333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,128,        return x;,1,0,0,0,0,1,0,0,0,2,9,4,0.08333,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,67,    protected AbstractRegion(final BSPTree<S> tree) {,2,0,0,1,3,2,0,2,2,6,49,2,0.08333,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,68,        this.tree = tree;,2,0,0,0,0,1,0,0,1,3,17,4,0.08333,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,69,    },0,0,0,0,1,0,0,0,0,1,1,2,0.08333,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,97,    private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);,3,0,0,1,2,4,2,0,3,6,77,2,0.08,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,115,    private static final double LN_QUICK_COEF[][] = {,1,0,0,0,5,4,0,0,3,4,49,2,0.08,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,128,    private static final double LN_HI_PREC_COEF[][] = {,1,0,0,0,5,4,0,0,3,4,51,2,0.08,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,141,    private static final double SINE_TABLE_A[] =,1,0,0,0,2,4,0,0,3,4,44,2,0.08,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,160,    private static final double SINE_TABLE_B[] =,1,0,0,0,2,4,0,0,3,4,44,2,0.08,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,179,    private static final double COSINE_TABLE_A[] =,1,0,0,0,2,4,0,0,3,4,46,2,0.08,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,198,    private static final double COSINE_TABLE_B[] =,1,0,0,0,2,4,0,0,3,4,46,2,0.08,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,218,    private static final double TANGENT_TABLE_A[] =,1,0,0,0,2,4,0,0,3,4,47,2,0.08,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,237,    private static final double TANGENT_TABLE_B[] =,1,0,0,0,2,4,0,0,3,4,47,2,0.08,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,256,    private static final long RECIP_2PI[] = new long[] {,1,0,0,0,5,6,0,0,3,4,52,2,0.08,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,277,    private static final long PI_O_4_BITS[] = new long[] {,1,0,0,0,5,6,0,0,3,4,54,2,0.08,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,285,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",1,0,0,0,4,4,0,0,3,4,126,2,0.08,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,288,"    private static final double CBRTTWO[] = { 0.6299605249474366,",1,0,0,0,3,4,0,0,3,4,61,2,0.08,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,93,    public BSPTree(final Object attribute) {,2,0,0,1,3,2,0,1,2,6,40,2,0.08,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,94,        cut    = null;,1,0,0,0,0,0,0,0,1,2,14,4,0.08,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,95,        plus   = null;,1,0,0,0,0,0,0,0,1,2,14,4,0.08,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,96,        minus  = null;,1,0,0,0,0,0,0,0,1,2,14,4,0.08,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,97,        parent = null;,1,0,0,0,0,0,0,0,1,2,14,4,0.08,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,98,        this.attribute = attribute;,2,0,0,0,0,1,0,0,1,3,27,4,0.08,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,99,    },0,0,0,0,1,0,0,0,0,1,1,2,0.08,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,44,"    public SubLine(final Line line, final IntervalsSet remainingRegion) {",3,0,0,0,3,3,0,2,3,5,69,2,0.07692,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,45,        this.line            = line;,2,0,0,0,0,1,0,0,1,3,28,4,0.07692,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,46,        this.remainingRegion = remainingRegion;,2,0,0,0,0,1,0,0,1,3,39,4,0.07692,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,47,    },0,0,0,0,1,0,0,0,0,1,1,2,0.07692,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,243,        return FastMath.sqrt (x * x + y * y + z * z);,6,5,0,1,2,1,2,0,0,6,45,5,0.07692,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,896,        final double ca1        = SPLIT_FACTOR * a1;,3,1,0,0,0,2,0,0,1,4,44,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,897,        final double a1High     = ca1 - (ca1 - a1);,4,2,0,1,2,2,0,0,1,6,43,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,898,        final double a1Low      = a1 - a1High;,3,1,0,0,0,2,0,0,1,4,38,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,899,        final double cb1        = SPLIT_FACTOR * b1;,3,1,0,0,0,2,0,0,1,4,44,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,900,        final double b1High     = cb1 - (cb1 - b1);,4,2,0,1,2,2,0,0,1,6,43,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,901,        final double b1Low      = b1 - b1High;,3,1,0,0,0,2,0,0,1,4,38,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,904,        final double prod1High  = a1 * b1;,3,1,0,0,0,2,0,0,1,4,34,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,905,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,10,8,0,3,6,2,0,0,1,6,110,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,908,        final double ca2        = SPLIT_FACTOR * a2;,3,1,0,0,0,2,0,0,1,4,44,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,909,        final double a2High     = ca2 - (ca2 - a2);,4,2,0,1,2,2,0,0,1,6,43,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,910,        final double a2Low      = a2 - a2High;,3,1,0,0,0,2,0,0,1,4,38,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,911,        final double cb2        = SPLIT_FACTOR * b2;,3,1,0,0,0,2,0,0,1,4,44,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,912,        final double b2High     = cb2 - (cb2 - b2);,4,2,0,1,2,2,0,0,1,6,43,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,913,        final double b2Low      = b2 - b2High;,3,1,0,0,0,2,0,0,1,4,38,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,916,        final double prod2High  = a2 * b2;,3,1,0,0,0,2,0,0,1,4,34,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,917,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,10,8,0,3,6,2,0,0,1,6,110,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,920,        final double s12High    = prod1High + prod2High;,3,1,0,0,0,2,0,0,1,4,48,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,921,        final double s12Prime   = s12High - prod2High;,3,1,0,0,0,2,0,0,1,4,46,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,922,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,6,4,0,2,6,2,0,0,1,6,86,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,926,        double result = s12High + (prod1Low + prod2Low + s12Low);,5,2,0,1,2,1,0,0,0,5,57,5,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,928,        if (Double.isNaN(result)) {,0,0,0,2,5,1,3,0,0,4,27,5,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,934,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,976,        final double ca1        = SPLIT_FACTOR * a1;,3,1,0,0,0,2,0,0,1,4,44,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,977,        final double a1High     = ca1 - (ca1 - a1);,4,2,0,1,2,2,0,0,1,6,43,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,978,        final double a1Low      = a1 - a1High;,3,1,0,0,0,2,0,0,1,4,38,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,979,        final double cb1        = SPLIT_FACTOR * b1;,3,1,0,0,0,2,0,0,1,4,44,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,980,        final double b1High     = cb1 - (cb1 - b1);,4,2,0,1,2,2,0,0,1,6,43,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,981,        final double b1Low      = b1 - b1High;,3,1,0,0,0,2,0,0,1,4,38,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,984,        final double prod1High  = a1 * b1;,3,1,0,0,0,2,0,0,1,4,34,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,985,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,10,8,0,3,6,2,0,0,1,6,110,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,988,        final double ca2        = SPLIT_FACTOR * a2;,3,1,0,0,0,2,0,0,1,4,44,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,989,        final double a2High     = ca2 - (ca2 - a2);,4,2,0,1,2,2,0,0,1,6,43,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,990,        final double a2Low      = a2 - a2High;,3,1,0,0,0,2,0,0,1,4,38,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,991,        final double cb2        = SPLIT_FACTOR * b2;,3,1,0,0,0,2,0,0,1,4,44,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,992,        final double b2High     = cb2 - (cb2 - b2);,4,2,0,1,2,2,0,0,1,6,43,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,993,        final double b2Low      = b2 - b2High;,3,1,0,0,0,2,0,0,1,4,38,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,996,        final double prod2High  = a2 * b2;,3,1,0,0,0,2,0,0,1,4,34,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,997,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,10,8,0,3,6,2,0,0,1,6,110,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1000,        final double ca3        = SPLIT_FACTOR * a3;,3,1,0,0,0,2,0,0,1,4,44,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1001,        final double a3High     = ca3 - (ca3 - a3);,4,2,0,1,2,2,0,0,1,6,43,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1002,        final double a3Low      = a3 - a3High;,3,1,0,0,0,2,0,0,1,4,38,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1003,        final double cb3        = SPLIT_FACTOR * b3;,3,1,0,0,0,2,0,0,1,4,44,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1004,        final double b3High     = cb3 - (cb3 - b3);,4,2,0,1,2,2,0,0,1,6,43,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1005,        final double b3Low      = b3 - b3High;,3,1,0,0,0,2,0,0,1,4,38,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1008,        final double prod3High  = a3 * b3;,3,1,0,0,0,2,0,0,1,4,34,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1009,        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);,10,8,0,3,6,2,0,0,1,6,110,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1012,        final double s12High    = prod1High + prod2High;,3,1,0,0,0,2,0,0,1,4,48,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1013,        final double s12Prime   = s12High - prod2High;,3,1,0,0,0,2,0,0,1,4,46,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1014,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,6,4,0,2,6,2,0,0,1,6,86,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1017,        final double s123High   = s12High + prod3High;,3,1,0,0,0,2,0,0,1,4,46,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1018,        final double s123Prime  = s123High - prod3High;,3,1,0,0,0,2,0,0,1,4,47,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1019,        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);,6,4,0,2,6,2,0,0,1,6,87,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1023,        double result = s123High + (prod1Low + prod2Low + prod3Low + s12Low + s123Low);,7,2,0,1,2,1,0,0,0,5,79,5,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1025,        if (Double.isNaN(result)) {,0,0,0,2,5,1,3,0,0,4,27,5,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1031,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,95,"    public Vector3D(double x, double y, double z) {",4,0,0,0,3,4,0,0,1,4,47,2,0.05263,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,96,        this.x = x;,2,0,0,0,0,1,0,0,1,3,11,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,97,        this.y = y;,2,0,0,0,0,1,0,0,1,3,11,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,98,        this.z = z;,2,0,0,0,0,1,0,0,1,3,11,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,99,    },0,0,0,0,1,0,0,0,0,1,1,2,0.05263,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,137,"    public Vector3D(double a, Vector3D u) {",3,0,0,0,3,2,0,1,1,5,39,2,0.05263,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,138,        this.x = a * u.x;,4,1,0,0,0,1,0,0,1,4,17,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,139,        this.y = a * u.y;,4,1,0,0,0,1,0,0,1,4,17,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,140,        this.z = a * u.z;,4,1,0,0,0,1,0,0,1,4,17,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,141,    },0,0,0,0,1,0,0,0,0,1,1,2,0.05263,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,151,"    public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2) {",5,0,0,0,3,3,0,2,1,5,65,2,0.05263,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,152,"        this.x = MathArrays.linearCombination(a1, u1.x, a2, u2.x);",5,0,0,0,2,1,4,0,1,5,58,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,153,"        this.y = MathArrays.linearCombination(a1, u1.y, a2, u2.y);",5,0,0,0,2,1,4,0,1,5,58,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,154,"        this.z = MathArrays.linearCombination(a1, u1.z, a2, u2.z);",5,0,0,0,2,1,4,0,1,5,58,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,155,    },0,0,0,0,1,0,0,0,0,1,1,2,0.05263,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,41,"    public static final Vector3D ZERO   = new Vector3D(0, 0, 0);",1,0,0,0,2,4,0,2,4,5,60,2,0.05263,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,44,"    public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);",1,0,0,0,2,4,0,2,4,5,60,2,0.05263,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,47,"    public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);",1,0,0,0,2,4,0,2,5,5,62,2,0.05263,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,50,"    public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);",1,0,0,0,2,4,0,2,4,5,60,2,0.05263,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,53,"    public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);",1,0,0,0,2,4,0,2,5,5,62,2,0.05263,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,56,"    public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);",1,0,0,0,2,4,0,2,4,5,60,2,0.05263,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,59,"    public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);",1,0,0,0,2,4,0,2,5,5,62,2,0.05263,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,63,"    public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);",7,0,0,0,2,4,0,2,4,5,84,2,0.05263,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,67,    public static final Vector3D POSITIVE_INFINITY =,1,0,0,0,0,3,0,1,3,4,48,2,0.05263,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,71,    public static final Vector3D NEGATIVE_INFINITY =,1,0,0,0,0,3,0,1,3,4,48,2,0.05263,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,249,        return x * x + y * y + z * z;,6,5,0,0,0,1,0,0,0,3,29,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,286,        final Vector3D v3 = (Vector3D) v;,2,0,0,1,2,1,0,2,1,6,33,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,287,"        return new Vector3D(x - v3.x, y - v3.y, z - v3.z);",9,3,0,0,2,2,0,1,1,6,50,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,453,        final Vector3D v3 = (Vector3D) v;,2,0,0,1,2,1,0,2,1,6,33,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,454,"        return MathArrays.linearCombination(x, v3.x, y, v3.y, z, v3.z);",6,0,0,0,2,1,5,0,0,4,63,5,0.05263,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,54,"    public Line(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException {",4,0,0,0,3,4,0,2,3,5,87,2,0.05263,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,55,"        reset(p1, p2);",0,0,0,0,2,0,3,0,1,3,14,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,56,    },0,0,0,0,1,0,0,0,0,1,1,2,0.05263,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,74,        final Vector3D delta = p2.subtract(p1);,1,0,0,1,2,1,3,1,1,7,39,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,75,        final double norm2 = delta.getNormSq();,1,0,0,1,2,2,2,0,1,6,39,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,76,        if (norm2 == 0.0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,79,"        this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta);",2,1,0,1,4,2,3,1,2,8,65,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,80,"        zero = new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta);",4,1,0,1,4,1,3,1,3,8,67,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,81,    },0,0,0,0,1,0,0,0,0,1,1,2,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2664,            if (y < 0 || 1 / y < 0) {,2,4,0,1,3,1,0,0,0,5,25,6,0.04545,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2665,                return -Math.PI * F_1_2;,3,1,0,0,0,1,0,0,1,4,24,8,0.04545,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2660,            if (y > 0 || 1 / y > 0) {,2,4,0,1,3,1,0,0,0,5,25,6,0.04348,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3587,                return abs(y);,0,0,0,1,2,1,2,0,1,5,14,10,0.04348,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,200,            return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.04167,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,198,        final double d = sin * other.cos - other.sin * cos;,7,3,0,0,0,2,0,0,1,4,51,4,0.0303,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,199,        if (FastMath.abs(d) < 1.0e-10) {,0,1,0,2,5,1,3,0,0,5,32,4,0.0303,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,181,        Vector2D p2 = (Vector2D) point;,2,0,0,1,2,0,0,2,0,4,31,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,182,        return new Vector1D(cos * p2.getX() + sin * p2.getY());,2,3,0,2,6,2,4,1,1,8,55,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,70,        EPSILON = Double.longBitsToDouble((EXPONENT_OFFSET - 53l) << 52);,2,2,0,2,4,0,2,0,1,6,65,4,0.02778,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,77,        SAFE_MIN = Double.longBitsToDouble((EXPONENT_OFFSET - 1022l) << 52);,2,2,0,2,4,0,2,0,1,6,68,4,0.02778,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,78,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02778,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2276,"                return sinQ(xa, xb);",0,0,0,0,2,1,3,0,1,4,20,5,0.02632,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2330,"                return cosQ(xa, xb);",0,0,0,0,2,1,3,0,1,4,20,5,0.02632,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2582,        if (x != x || y != y) {,4,3,0,1,3,1,0,0,0,5,23,4,0.02632,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2586,        if (y == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.02632,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2612,        if (y == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.02632,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2624,        if (y == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.02632,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2636,        if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.02632,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2646,        if (x == Double.NEGATIVE_INFINITY),3,1,0,1,2,1,0,0,0,5,34,4,0.02632,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2659,        if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.02632,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3574,        if (Double.isInfinite(x) || Double.isInfinite(y)) {,0,1,0,2,7,1,6,0,0,5,51,4,0.02632,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3576,        } else if (Double.isNaN(x) || Double.isNaN(y)) {,0,1,0,2,8,2,6,0,0,5,48,5,0.02632,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3580,            final int expX = getExponent(x);,1,0,0,1,2,2,2,0,2,6,32,7,0.02632,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3581,            final int expY = getExponent(y);,1,0,0,1,2,2,2,0,2,6,32,7,0.02632,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3582,            if (expX > expY + 27) {,2,2,0,1,3,1,0,0,0,5,23,7,0.02632,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3585,            } else if (expY > expX + 27) {,2,2,0,1,4,2,0,0,0,5,30,8,0.02632,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3685,        return (int) ((Double.doubleToRawLongBits(d) >>> 52) & 0x7ff) - 1023;,0,3,0,3,8,2,3,0,0,5,69,4,0.02632,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,81,"    public Line(final Vector2D p1, final Vector2D p2) {",3,0,0,0,3,3,0,2,3,5,51,2,0.02632,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,82,"        reset(p1, p2);",0,0,0,0,2,0,3,0,1,3,14,4,0.02632,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,83,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02632,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,129,        final double dx = p2.getX() - p1.getX();,1,1,0,1,4,2,4,0,1,7,40,4,0.02632,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,130,        final double dy = p2.getY() - p1.getY();,1,1,0,1,4,2,4,0,1,7,40,4,0.02632,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,131,"        final double d = FastMath.hypot(dx, dy);",1,0,0,0,2,2,4,0,1,5,40,4,0.02632,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,132,        if (d == 0.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.02632,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,138,"            angle        = FastMath.PI + FastMath.atan2(-dy, -dx);",5,1,0,0,2,0,2,0,3,5,54,6,0.02632,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,139,            cos          = FastMath.cos(angle);,1,0,0,1,2,0,3,0,1,5,35,6,0.02632,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,140,            sin          = FastMath.sin(angle);,1,0,0,1,2,0,3,0,1,5,35,6,0.02632,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,141,            originOffset = (p2.getX() * p1.getY() - p1.getX() * p2.getY()) / d;,2,4,0,2,10,0,8,0,1,6,67,6,0.02632,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,143,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02632,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1680,        double x2 = x*x;,3,1,0,0,0,1,0,0,0,3,16,5,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1682,        double p = 2.7553817452272217E-6;,1,0,0,0,0,1,0,0,0,2,33,5,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1683,        p = p * x2 + -1.9841269659586505E-4;,3,2,0,0,0,0,0,0,2,3,36,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1684,        p = p * x2 + 0.008333333333329196;,3,2,0,0,0,0,0,0,1,3,34,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1685,        p = p * x2 + -0.16666666666666666;,3,2,0,0,0,0,0,0,2,3,34,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1688,        p = p * x2 * x;,4,1,0,0,0,0,0,0,1,3,15,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1690,        return p;,1,0,0,0,0,1,0,0,0,2,9,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1700,        double x2 = x*x;,3,1,0,0,0,1,0,0,0,3,16,5,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1702,        double p = 2.479773539153719E-5;,1,0,0,0,0,1,0,0,0,2,32,5,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1703,        p = p * x2 + -0.0013888888689039883;,3,2,0,0,0,0,0,0,2,3,36,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1704,        p = p * x2 + 0.041666666666621166;,3,2,0,0,0,0,0,0,1,3,34,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1705,        p = p * x2 + -0.49999999999999994;,3,2,0,0,0,0,0,0,2,3,34,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1706,        p *= x2;,2,0,0,0,0,0,0,0,1,2,8,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1708,        return p;,1,0,0,0,0,1,0,0,0,2,9,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1719,        int idx = (int) ((xa * 8.0) + 0.5);,2,2,0,2,6,2,0,0,0,5,35,5,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1720,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,2,1,1,0,2,2,0,0,1,6,54,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1723,        final double sintA = SINE_TABLE_A[idx];,1,0,1,0,2,2,0,0,1,5,39,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1724,        final double sintB = SINE_TABLE_B[idx];,1,0,1,0,2,2,0,0,1,5,39,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1725,        final double costA = COSINE_TABLE_A[idx];,1,0,1,0,2,2,0,0,1,5,41,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1726,        final double costB = COSINE_TABLE_B[idx];,1,0,1,0,2,2,0,0,1,5,41,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1729,        double sinEpsA = epsilon;,2,0,0,0,0,1,0,0,0,2,25,5,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1730,        double sinEpsB = polySine(epsilon);,1,0,0,1,2,1,2,0,1,6,35,5,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1731,        final double cosEpsA = 1.0;,1,0,0,0,0,2,0,0,1,3,27,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1732,        final double cosEpsB = polyCosine(epsilon);,1,0,0,1,2,2,2,0,2,6,43,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1735,        final double temp = sinEpsA * HEX_40000000;,3,1,0,0,0,2,0,0,1,4,43,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1736,        double temp2 = (sinEpsA + temp) - temp;,4,2,0,1,2,1,0,0,0,5,39,5,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1737,        sinEpsB +=  sinEpsA - temp2;,3,1,0,0,0,0,0,0,1,3,28,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1738,        sinEpsA = temp2;,2,0,0,0,0,0,0,0,1,2,16,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1764,        double a = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1765,        double b = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1767,        double t = sintA;,2,0,0,0,0,1,0,0,0,2,17,5,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1768,        double c = a + t;,3,1,0,0,0,1,0,0,0,3,17,5,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1769,        double d = -(c - a - t);,4,1,0,1,2,1,0,0,1,6,24,5,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1770,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1771,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1773,        t = costA * sinEpsA;,3,1,0,0,0,0,0,0,1,3,20,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1774,        c = a + t;,3,1,0,0,0,0,0,0,1,3,10,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1775,        d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1776,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1777,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1779,        b = b + sintA * cosEpsB + costA * sinEpsB;,6,4,0,0,0,0,0,0,1,3,42,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1794,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,9,6,0,0,0,0,0,0,1,3,68,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1821,        if (xb != 0.0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1822,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,5,5,0,1,5,0,0,0,1,5,44,6,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1824,            c = a + t;,3,1,0,0,0,0,0,0,1,3,10,6,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1825,            d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,6,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1826,            a = c;,2,0,0,0,0,0,0,0,1,2,6,6,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1827,            b = b + d;,3,1,0,0,0,0,0,0,1,3,10,6,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1830,        result = a + b;,3,1,0,0,0,0,0,0,1,3,15,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1832,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1843,        final double pi2a = 1.5707963267948966;,1,0,0,0,0,2,0,0,1,3,39,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1844,        final double pi2b = 6.123233995736766E-17;,1,0,0,0,0,2,0,0,1,3,42,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1846,        final double a = pi2a - xa;,3,1,0,0,0,2,0,0,1,4,27,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1847,        double b = -(a - pi2a + xa);,4,2,0,1,2,1,0,0,1,6,28,5,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1848,        b += pi2b - xb;,3,1,0,0,0,0,0,0,1,3,15,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1850,"        return sinQ(a, b);",0,0,0,0,2,1,3,0,1,4,18,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2228,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2229,        int quadrant = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2231,        double xb = 0.0;,1,0,0,0,0,1,0,0,0,2,16,5,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2234,        xa = x;,2,0,0,0,0,0,0,0,1,2,7,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2235,        if (x < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2241,        if (xa == 0.0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2249,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,5,3,0,1,3,1,0,0,0,5,49,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2254,        if (xa > 3294198.0) {,1,1,0,1,3,1,0,0,0,5,21,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2270,        if (negative) {,1,0,0,1,3,1,0,0,0,4,15,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2274,        switch (quadrant) {,1,0,0,1,3,1,0,0,0,4,19,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2295,        int quadrant = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2298,        double xa = x;,2,0,0,0,0,1,0,0,0,2,14,5,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2299,        if (x < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2303,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,5,3,0,1,3,1,0,0,0,5,49,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2308,        double xb = 0;,1,0,0,0,0,1,0,0,0,2,14,5,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2309,        if (xa > 3294198.0) {,1,1,0,1,3,1,0,0,0,5,21,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2328,        switch (quadrant) {,1,0,0,1,3,1,0,0,0,4,19,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,4,83,        return remainingRegion;,1,0,0,0,0,1,0,0,0,2,23,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,68,"    public Vector2D(double x, double y) {",3,0,0,0,3,3,0,0,1,4,37,2,0.02564,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,69,        this.x = x;,2,0,0,0,0,1,0,0,1,3,11,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,70,        this.y = y;,2,0,0,0,0,1,0,0,1,3,11,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,71,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02564,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,37,"    public static final Vector2D ZERO   = new Vector2D(0, 0);",1,0,0,0,2,4,0,2,4,5,57,2,0.02564,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,41,"    public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);",5,0,0,0,2,4,0,2,4,5,72,2,0.02564,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,45,    public static final Vector2D POSITIVE_INFINITY =,1,0,0,0,0,3,0,1,3,4,48,2,0.02564,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,49,    public static final Vector2D NEGATIVE_INFINITY =,1,0,0,0,0,3,0,1,3,4,48,2,0.02564,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,150,        return x;,1,0,0,0,0,1,0,0,0,2,9,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,158,        return y;,1,0,0,0,0,1,0,0,0,2,9,4,0.02564,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3025,        return Double.longBitsToDouble(MASK_NON_SIGN_LONG & Double.doubleToRawLongBits(x));,1,1,0,2,4,1,5,0,0,6,83,5,0.02439,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,385,        return Math.sqrt(a);,0,0,0,1,2,1,3,0,0,4,20,5,0.02174,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,4,72,        return hyperplane;,1,0,0,0,0,1,0,0,0,2,18,4,0.02041,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,52,    private MathArrays() {},1,0,0,1,4,1,0,0,1,5,23,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,86,        double[] newArr = new double[arr.length];,3,0,0,0,4,3,0,0,0,3,41,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,87,        for (int i = 0; i < arr.length; i++) {,5,1,0,1,3,2,0,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,88,            newArr[i] = arr[i] * val;,1,1,1,0,4,0,0,0,1,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,90,        return newArr;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,103,        for (int i = 0; i < arr.length; i++) {,5,1,0,1,3,2,0,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,104,            arr[i] *= val;,1,0,1,0,2,0,0,0,1,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,106,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,120,        if (a.length != b.length) {,4,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,121,"            throw new DimensionMismatchException(a.length, b.length);",4,0,0,0,2,2,0,1,1,5,57,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,124,        final double[] result = a.clone();,1,0,0,1,4,2,2,0,1,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,125,        for (int i = 0; i < a.length; i++) {,5,1,0,1,3,2,0,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,126,            result[i] += b[i];,0,0,1,0,4,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,128,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,142,        if (a.length != b.length) {,4,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,143,"            throw new DimensionMismatchException(a.length, b.length);",4,0,0,0,2,2,0,1,1,5,57,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,146,        final double[] result = a.clone();,1,0,0,1,4,2,2,0,1,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,147,        for (int i = 0; i < a.length; i++) {,5,1,0,1,3,2,0,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,148,            result[i] -= b[i];,0,0,1,0,4,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,150,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,164,        if (a.length != b.length) {,4,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,165,"            throw new DimensionMismatchException(a.length, b.length);",4,0,0,0,2,2,0,1,1,5,57,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,168,        final double[] result = a.clone();,1,0,0,1,4,2,2,0,1,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,169,        for (int i = 0; i < a.length; i++) {,5,1,0,1,3,2,0,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,170,            result[i] *= b[i];,0,0,1,0,4,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,172,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,186,        if (a.length != b.length) {,4,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,187,"            throw new DimensionMismatchException(a.length, b.length);",4,0,0,0,2,2,0,1,1,5,57,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,190,        final double[] result = a.clone();,1,0,0,1,4,2,2,0,1,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,191,        for (int i = 0; i < a.length; i++) {,5,1,0,1,3,2,0,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,192,            result[i] /= b[i];,0,0,1,0,4,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,194,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,205,        double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,206,        for (int i = 0; i < p1.length; i++) {,5,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,207,            sum += FastMath.abs(p1[i] - p2[i]);,1,1,1,1,6,0,2,0,1,7,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,209,        return sum;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,220,      int sum = 0;,1,0,0,0,0,1,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,221,      for (int i = 0; i < p1.length; i++) {,5,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,222,          sum += FastMath.abs(p1[i] - p2[i]);,1,1,1,1,6,0,2,0,1,7,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,224,      return sum;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,235,        double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,236,        for (int i = 0; i < p1.length; i++) {,5,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,237,            final double dp = p1[i] - p2[i];,1,1,1,0,4,2,0,0,1,6,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,238,            sum += dp * dp;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,240,        return FastMath.sqrt(sum);,0,0,0,1,2,1,3,0,0,4,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,251,      double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,252,      for (int i = 0; i < p1.length; i++) {,5,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,253,          final double dp = p1[i] - p2[i];,1,1,1,0,4,2,0,0,1,6,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,254,          sum += dp * dp;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,256,      return FastMath.sqrt(sum);,0,0,0,1,2,1,3,0,0,4,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,267,        double max = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,268,        for (int i = 0; i < p1.length; i++) {,5,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,269,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",1,1,1,1,8,0,5,0,1,7,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,271,        return max;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,282,        int max = 0;,1,0,0,0,0,1,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,283,        for (int i = 0; i < p1.length; i++) {,5,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,284,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",1,1,1,1,8,0,5,0,1,7,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,286,        return max;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,311,        T previous = val[0];,1,0,1,0,2,0,0,1,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,312,        final int max = val.length;,3,0,0,0,0,2,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,313,        for (int i = 1; i < max; i++) {,4,1,0,1,3,2,0,0,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,315,            switch (dir) {,1,0,0,1,3,1,0,0,0,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,317,                comp = previous.compareTo(val[i]);,1,0,1,1,4,0,2,0,1,6,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,318,                if (strict) {,1,0,0,1,3,1,0,0,0,4,13,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,319,                    if (comp >= 0) {,1,1,0,1,3,1,0,0,0,5,16,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,320,                        return false;,0,0,0,0,0,1,0,0,1,2,13,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,323,                    if (comp > 0) {,1,1,0,1,3,1,0,0,0,5,15,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,324,                        return false;,0,0,0,0,0,1,0,0,1,2,13,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,329,                comp = val[i].compareTo(previous);,1,0,1,1,4,0,2,0,1,6,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,330,                if (strict) {,1,0,0,1,3,1,0,0,0,4,13,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,331,                    if (comp >= 0) {,1,1,0,1,3,1,0,0,0,5,16,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,332,                        return false;,0,0,0,0,0,1,0,0,1,2,13,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,335,                    if (comp > 0) {,1,1,0,1,3,1,0,0,0,5,15,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,336,                       return false;,0,0,0,0,0,1,0,0,1,2,13,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,342,                throw new MathInternalError();,0,0,0,1,2,2,0,1,1,5,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,345,            previous = val[i];,1,0,1,0,2,0,0,0,1,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,347,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,359,"        return checkOrder(val, dir, strict, false);",0,0,0,0,2,1,4,0,2,4,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,376,        double previous = val[0];,1,0,1,0,2,1,0,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,377,        final int max = val.length;,3,0,0,0,0,2,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,381,        for (index = 1; index < max; index++) {,4,1,0,1,3,1,0,0,2,6,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,382,            switch (dir) {,1,0,0,1,3,1,0,0,0,4,14,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,384,                if (strict) {,1,0,0,1,3,1,0,0,0,4,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,385,                    if (val[index] <= previous) {,1,1,1,1,5,1,0,0,0,6,29,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,386,                        break ITEM;,1,0,0,0,0,1,0,0,0,2,11,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,389,                    if (val[index] < previous) {,1,1,1,1,5,1,0,0,0,6,28,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,390,                        break ITEM;,1,0,0,0,0,1,0,0,0,2,11,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,395,                if (strict) {,1,0,0,1,3,1,0,0,0,4,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,396,                    if (val[index] >= previous) {,1,1,1,1,5,1,0,0,0,6,29,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,397,                        break ITEM;,1,0,0,0,0,1,0,0,0,2,11,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,400,                    if (val[index] > previous) {,1,1,1,1,5,1,0,0,0,6,28,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,401,                        break ITEM;,1,0,0,0,0,1,0,0,0,2,11,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,407,                throw new MathInternalError();,0,0,0,1,2,2,0,1,1,5,30,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,410,            previous = val[index];,1,0,1,0,2,0,0,0,1,4,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,413,        if (index == max) {,2,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,415,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,419,        if (abort) {,1,0,0,1,3,1,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,420,"            throw new NonMonotonicSequenceException(val[index], previous, index, dir, strict);",4,0,1,0,4,2,0,1,1,6,82,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,422,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,437,"        checkOrder(val, dir, strict, true);",0,0,0,0,2,0,4,0,2,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,438,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,448,"        checkOrder(val, OrderDirection.INCREASING, true);",2,0,0,0,2,0,2,0,2,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,449,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,461,        MathUtils.checkNotNull(in);,0,0,0,1,2,0,3,0,0,3,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,462,        for (int i = 1; i < in.length; i++) {,5,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,463,            if (in[i].length != in[0].length) {,2,1,1,1,7,1,0,0,0,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,464,                throw new DimensionMismatchException(,0,0,0,0,1,2,0,1,1,4,37,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,469,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,481,        for (int i = 0; i < in.length; i++) {,5,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,482,            if (in[i] <= 0) {,0,1,1,1,5,1,0,0,0,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,483,                throw new NotStrictlyPositiveException(in[i]);,0,0,1,1,4,2,0,1,1,6,46,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,486,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,497,        for (int i = 0; i < in.length; i++) {,5,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,498,            if (in[i] < 0) {,0,1,1,1,5,1,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,499,                throw new NotPositiveException(in[i]);,0,0,1,1,4,2,0,1,1,6,38,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,502,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,513,        for (int i = 0; i < in.length; i ++) {,5,1,0,1,3,2,0,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,514,            for (int j = 0; j < in[i].length; j++) {,4,1,1,1,5,2,0,0,1,7,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,515,                if (in[i][j] < 0) {,0,1,1,1,7,1,0,0,0,5,19,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,516,                    throw new NotPositiveException(in[i][j]);,0,0,1,1,6,2,0,1,1,6,41,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,520,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,583,        double rdwarf = 3.834e-20;,1,0,0,0,0,1,0,0,0,2,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,584,        double rgiant = 1.304e+19;,1,0,0,0,0,1,0,0,0,2,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,585,        double s1 = 0;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,586,        double s2 = 0;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,587,        double s3 = 0;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,588,        double x1max = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,589,        double x3max = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,590,        double floatn = v.length;,3,0,0,0,0,1,0,0,0,2,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,591,        double agiant = rgiant / floatn;,3,1,0,0,0,1,0,0,0,3,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,592,        for (int i = 0; i < v.length; i++) {,5,1,0,1,3,2,0,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,593,            double xabs = Math.abs(v[i]);,1,0,1,1,4,1,2,0,0,6,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,594,            if (xabs < rdwarf || xabs > agiant) {,4,3,0,1,3,1,0,0,0,5,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,595,                if (xabs > rdwarf) {,2,1,0,1,3,1,0,0,0,5,20,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,596,                    if (xabs > x1max) {,2,1,0,1,3,1,0,0,0,5,19,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,597,                        double r = x1max / xabs;,3,1,0,0,0,1,0,0,0,3,24,13,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,598,                        s1= 1 + s1 * r * r;,4,2,0,0,0,0,0,0,1,3,19,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,599,                        x1max = xabs;,2,0,0,0,0,0,0,0,1,2,13,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,600,                    } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,601,                        double r = xabs / x1max;,3,1,0,0,0,1,0,0,0,3,24,13,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,602,                        s1 += r * r;,3,1,0,0,0,0,0,0,1,3,12,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,603,                    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,605,                    if (xabs > x3max) {,2,1,0,1,3,1,0,0,0,5,19,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,606,                        double r = x3max / xabs;,3,1,0,0,0,1,0,0,0,3,24,13,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,607,                        s3= 1 + s3 * r * r;,4,2,0,0,0,0,0,0,1,3,19,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,608,                        x3max = xabs;,2,0,0,0,0,0,0,0,1,2,13,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,609,                    } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,610,                        if (xabs != 0) {,1,1,0,1,3,1,0,0,0,5,16,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,611,                            double r = xabs / x3max;,3,1,0,0,0,1,0,0,0,3,24,15,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,612,                            s3 += r * r;,3,1,0,0,0,0,0,0,1,3,12,14,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,613,                        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,617,                s2 += xabs * xabs;,3,1,0,0,0,0,0,0,1,3,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,621,        if (s1 != 0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,622,            norm = x1max * Math.sqrt(s1 + (s2 / x1max) / x1max);,6,4,0,2,4,0,2,0,1,6,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,624,            if (s2 == 0) {,1,1,0,1,3,1,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,625,                norm = x3max * Math.sqrt(s3);,2,1,0,1,2,0,3,0,1,6,29,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,627,                if (s2 >= x3max) {,2,1,0,1,3,1,0,0,0,5,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,628,                    norm = Math.sqrt(s2 * (1 + (x3max / s2) * (x3max * s3)));,6,5,0,3,8,0,2,0,1,6,57,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,630,                    norm = Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));,6,4,0,3,8,0,2,0,1,6,56,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,634,        return norm;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,655,"        sortInPlace(x, OrderDirection.INCREASING, yList);",2,0,0,0,2,0,3,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,656,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,679,        if (x == null) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,680,            throw new NullArgumentException();,0,0,0,1,2,2,0,1,1,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,683,        final int len = x.length;,3,0,0,0,0,2,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,684,"        final List<Pair<Double, double[]>> list",1,0,0,0,2,2,0,3,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,687,        final int yListLen = yList.length;,3,0,0,0,0,2,0,0,1,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,688,        for (int i = 0; i < len; i++) {,4,1,0,1,3,2,0,0,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,689,            final double[] yValues = new double[yListLen];,1,0,1,0,4,4,0,0,1,5,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,690,            for (int j = 0; j < yListLen; j++) {,4,1,0,1,3,2,0,0,1,6,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,691,                double[] y = yList[j];,1,0,1,0,4,1,0,0,0,4,22,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,692,                if (y == null) {,1,1,0,1,3,1,0,0,0,5,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,693,                    throw new NullArgumentException();,0,0,0,1,2,2,0,1,1,5,34,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,695,                if (y.length != len) {,3,1,0,1,3,1,0,0,0,5,22,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,696,"                    throw new DimensionMismatchException(y.length, len);",3,0,0,0,2,2,0,1,1,5,52,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,698,                yValues[j] = y[i];,0,0,1,0,4,0,0,0,1,3,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,700,"            list.add(new Pair<Double, double[]>(x[i], yValues));",1,0,1,0,8,2,2,2,1,7,52,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,703,"        final Comparator<Pair<Double, double[]>> comp",1,0,0,0,2,2,0,3,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,723,"        Collections.sort(list, comp);",0,0,0,0,2,0,4,0,0,2,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,725,        for (int i = 0; i < len; i++) {,4,1,0,1,3,2,0,0,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,726,"            final Pair<Double, double[]> e = list.get(i);",1,0,0,1,4,2,3,2,1,7,45,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,727,            x[i] = e.getKey();,0,0,1,1,4,0,2,0,1,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,728,            final double[] yValues = e.getValue();,1,0,0,1,4,2,2,0,1,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,729,            for (int j = 0; j < yListLen; j++) {,4,1,0,1,3,2,0,0,1,6,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,730,                yList[j][i] = yValues[j];,0,0,1,0,6,0,0,0,1,3,25,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,733,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,742,"         return copyOf(source, source.length);",2,0,0,0,2,1,2,0,1,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,752,"         return copyOf(source, source.length);",2,0,0,0,2,1,2,0,1,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,765,         final int[] output = new int[len];,1,0,1,0,4,4,0,0,1,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,766,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",2,0,0,0,4,0,7,0,0,3,73,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,767,         return output;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,780,         final double[] output = new double[len];,1,0,1,0,4,4,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,781,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",2,0,0,0,4,0,7,0,0,3,73,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,782,         return output;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,804,        final int len = a.length;,3,0,0,0,0,2,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,805,        if (len != b.length) {,3,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,806,"            throw new DimensionMismatchException(len, b.length);",3,0,0,0,2,2,0,1,1,5,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,809,        final double[] prodHigh = new double[len];,1,0,1,0,4,4,0,0,1,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,810,        double prodLowSum = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,812,        for (int i = 0; i < len; i++) {,4,1,0,1,3,2,0,0,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,813,            final double ai = a[i];,1,0,1,0,2,2,0,0,1,5,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,814,            final double ca = SPLIT_FACTOR * ai;,3,1,0,0,0,2,0,0,1,4,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,815,            final double aHigh = ca - (ca - ai);,4,2,0,1,2,2,0,0,1,6,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,816,            final double aLow = ai - aHigh;,3,1,0,0,0,2,0,0,1,4,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,818,            final double bi = b[i];,1,0,1,0,2,2,0,0,1,5,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,819,            final double cb = SPLIT_FACTOR * bi;,3,1,0,0,0,2,0,0,1,4,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,820,            final double bHigh = cb - (cb - bi);,4,2,0,1,2,2,0,0,1,6,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,821,            final double bLow = bi - bHigh;,3,1,0,0,0,2,0,0,1,4,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,822,            prodHigh[i] = ai * bi;,2,1,1,0,2,0,0,0,1,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,823,            final double prodLow = aLow * bLow - (((prodHigh[i] -,3,5,1,0,5,2,0,0,1,6,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,827,            prodLowSum += prodLow;,2,0,0,0,0,0,0,0,1,2,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,831,        final double prodHighCur = prodHigh[0];,1,0,1,0,2,2,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,832,        double prodHighNext = prodHigh[1];,1,0,1,0,2,1,0,0,0,4,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,833,        double sHighPrev = prodHighCur + prodHighNext;,3,1,0,0,0,1,0,0,0,3,46,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,834,        double sPrime = sHighPrev - prodHighNext;,3,1,0,0,0,1,0,0,0,3,41,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,835,        double sLowSum = (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);,6,4,0,2,6,1,0,0,0,5,80,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,837,        final int lenMinusOne = len - 1;,2,1,0,0,0,2,0,0,1,4,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,838,        for (int i = 1; i < lenMinusOne; i++) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,839,            prodHighNext = prodHigh[i + 1];,2,1,1,0,2,0,0,0,1,5,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,840,            final double sHighCur = sHighPrev + prodHighNext;,3,1,0,0,0,2,0,0,1,4,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,841,            sPrime = sHighCur - prodHighNext;,3,1,0,0,0,0,0,0,1,3,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,842,            sLowSum += (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);,6,4,0,2,6,0,0,0,1,5,71,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,843,            sHighPrev = sHighCur;,2,0,0,0,0,0,0,0,1,2,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,846,        double result = sHighPrev + (prodLowSum + sLowSum);,4,2,0,1,2,1,0,0,0,5,51,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,848,        if (Double.isNaN(result)) {,0,0,0,2,5,1,3,0,0,4,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,851,            result = 0;,1,0,0,0,0,0,0,0,1,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,852,            for (int i = 0; i < len; ++i) {,4,1,0,1,3,2,0,0,1,6,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,853,                result += a[i] * b[i];,1,1,1,0,4,0,0,0,1,5,22,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,857,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,931,            result = a1 * b1 + a2 * b2;,5,3,0,0,0,0,0,0,1,3,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1028,            result = a1 * b1 + a2 * b2 + a3 * b3;,7,5,0,0,0,0,0,0,1,3,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1078,        final double ca1        = SPLIT_FACTOR * a1;,3,1,0,0,0,2,0,0,1,4,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1079,        final double a1High     = ca1 - (ca1 - a1);,4,2,0,1,2,2,0,0,1,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1080,        final double a1Low      = a1 - a1High;,3,1,0,0,0,2,0,0,1,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1081,        final double cb1        = SPLIT_FACTOR * b1;,3,1,0,0,0,2,0,0,1,4,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1082,        final double b1High     = cb1 - (cb1 - b1);,4,2,0,1,2,2,0,0,1,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1083,        final double b1Low      = b1 - b1High;,3,1,0,0,0,2,0,0,1,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1086,        final double prod1High  = a1 * b1;,3,1,0,0,0,2,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1087,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,10,8,0,3,6,2,0,0,1,6,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1090,        final double ca2        = SPLIT_FACTOR * a2;,3,1,0,0,0,2,0,0,1,4,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1091,        final double a2High     = ca2 - (ca2 - a2);,4,2,0,1,2,2,0,0,1,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1092,        final double a2Low      = a2 - a2High;,3,1,0,0,0,2,0,0,1,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1093,        final double cb2        = SPLIT_FACTOR * b2;,3,1,0,0,0,2,0,0,1,4,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1094,        final double b2High     = cb2 - (cb2 - b2);,4,2,0,1,2,2,0,0,1,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1095,        final double b2Low      = b2 - b2High;,3,1,0,0,0,2,0,0,1,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1098,        final double prod2High  = a2 * b2;,3,1,0,0,0,2,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1099,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,10,8,0,3,6,2,0,0,1,6,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1102,        final double ca3        = SPLIT_FACTOR * a3;,3,1,0,0,0,2,0,0,1,4,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1103,        final double a3High     = ca3 - (ca3 - a3);,4,2,0,1,2,2,0,0,1,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1104,        final double a3Low      = a3 - a3High;,3,1,0,0,0,2,0,0,1,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1105,        final double cb3        = SPLIT_FACTOR * b3;,3,1,0,0,0,2,0,0,1,4,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1106,        final double b3High     = cb3 - (cb3 - b3);,4,2,0,1,2,2,0,0,1,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1107,        final double b3Low      = b3 - b3High;,3,1,0,0,0,2,0,0,1,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1110,        final double prod3High  = a3 * b3;,3,1,0,0,0,2,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1111,        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);,10,8,0,3,6,2,0,0,1,6,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1114,        final double ca4        = SPLIT_FACTOR * a4;,3,1,0,0,0,2,0,0,1,4,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1115,        final double a4High     = ca4 - (ca4 - a4);,4,2,0,1,2,2,0,0,1,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1116,        final double a4Low      = a4 - a4High;,3,1,0,0,0,2,0,0,1,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1117,        final double cb4        = SPLIT_FACTOR * b4;,3,1,0,0,0,2,0,0,1,4,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1118,        final double b4High     = cb4 - (cb4 - b4);,4,2,0,1,2,2,0,0,1,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1119,        final double b4Low      = b4 - b4High;,3,1,0,0,0,2,0,0,1,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1122,        final double prod4High  = a4 * b4;,3,1,0,0,0,2,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1123,        final double prod4Low   = a4Low * b4Low - (((prod4High - a4High * b4High) - a4Low * b4High) - a4High * b4Low);,10,8,0,3,6,2,0,0,1,6,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1126,        final double s12High    = prod1High + prod2High;,3,1,0,0,0,2,0,0,1,4,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1127,        final double s12Prime   = s12High - prod2High;,3,1,0,0,0,2,0,0,1,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1128,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,6,4,0,2,6,2,0,0,1,6,86,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1131,        final double s123High   = s12High + prod3High;,3,1,0,0,0,2,0,0,1,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1132,        final double s123Prime  = s123High - prod3High;,3,1,0,0,0,2,0,0,1,4,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1133,        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);,6,4,0,2,6,2,0,0,1,6,87,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1136,        final double s1234High  = s123High + prod4High;,3,1,0,0,0,2,0,0,1,4,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1137,        final double s1234Prime = s1234High - prod4High;,3,1,0,0,0,2,0,0,1,4,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1138,        final double s1234Low   = (prod4High - (s1234High - s1234Prime)) + (s123High - s1234Prime);,6,4,0,2,6,2,0,0,1,6,91,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1142,        double result = s1234High + (prod1Low + prod2Low + prod3Low + prod4Low + s12Low + s123Low + s1234Low);,9,2,0,1,2,1,0,0,0,5,102,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1144,        if (Double.isNaN(result)) {,0,0,0,2,5,1,3,0,0,4,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1147,            result = a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4;,9,7,0,0,0,0,0,0,1,3,47,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1150,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1164,        if ((x == null) || (y == null)) {,2,3,0,2,7,1,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1165,            return !((x == null) ^ (y == null));,2,3,0,2,6,1,0,0,1,6,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1167,        if (x.length != y.length) {,4,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1168,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1170,        for (int i = 0; i < x.length; ++i) {,5,1,0,1,3,2,0,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1171,"            if (!Precision.equals(x[i], y[i])) {",0,0,1,0,9,1,2,0,1,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1172,                return false;,0,0,0,0,0,1,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1175,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1190,        if ((x == null) || (y == null)) {,2,3,0,2,7,1,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1191,            return !((x == null) ^ (y == null));,2,3,0,2,6,1,0,0,1,6,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1193,        if (x.length != y.length) {,4,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1194,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1196,        for (int i = 0; i < x.length; ++i) {,5,1,0,1,3,2,0,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1197,"            if (!Precision.equalsIncludingNaN(x[i], y[i])) {",0,0,1,0,9,1,2,0,1,5,48,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1198,                return false;,0,0,0,0,0,1,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1201,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1215,        if ((x == null) || (y == null)) {,2,3,0,2,7,1,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1216,            return !((x == null) ^ (y == null));,2,3,0,2,6,1,0,0,1,6,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1218,        if (x.length != y.length) {,4,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1219,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1221,        for (int i = 0; i < x.length; ++i) {,5,1,0,1,3,2,0,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1222,"            if (!Precision.equals(x[i], y[i])) {",0,0,1,0,9,1,2,0,1,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1223,                return false;,0,0,0,0,0,1,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1226,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1241,        if ((x == null) || (y == null)) {,2,3,0,2,7,1,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1242,            return !((x == null) ^ (y == null));,2,3,0,2,6,1,0,0,1,6,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1244,        if (x.length != y.length) {,4,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1245,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1247,        for (int i = 0; i < x.length; ++i) {,5,1,0,1,3,2,0,0,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1248,"            if (!Precision.equalsIncludingNaN(x[i], y[i])) {",0,0,1,0,9,1,2,0,1,5,48,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1249,                return false;,0,0,0,0,0,1,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1252,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1279,         if (Double.isInfinite(normalizedSum)) {,0,0,0,2,5,1,3,0,0,4,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1280,             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);,2,0,0,1,2,2,0,1,1,6,76,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1282,         if (Double.isNaN(normalizedSum)) {,0,0,0,2,5,1,3,0,0,4,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1283,             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);,2,0,0,1,2,2,0,1,1,6,71,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1285,         double sum = 0d;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1286,         final int len = values.length;,3,0,0,0,0,2,0,0,1,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1287,         double[] out = new double[len];,1,0,1,0,4,3,0,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1288,         for (int i = 0; i < len; i++) {,4,1,0,1,3,2,0,0,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1289,             if (Double.isInfinite(values[i])) {,0,0,1,2,7,1,2,0,0,5,35,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1290,"                 throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);",3,0,1,0,4,2,0,1,1,6,94,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1292,             if (!Double.isNaN(values[i])) {,0,0,1,2,7,1,2,0,1,6,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1293,                 sum += values[i];,1,0,1,0,2,0,0,0,1,4,17,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1296,         if (sum == 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1297,             throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);,2,0,0,1,2,2,0,1,1,6,71,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1299,         for (int i = 0; i < len; i++) {,4,1,0,1,3,2,0,0,1,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1300,             if (Double.isNaN(values[i])) {,0,0,1,2,7,1,2,0,0,5,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1301,                 out[i] = Double.NaN;,2,0,1,0,2,0,0,0,1,4,20,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1303,                 out[i] = values[i] * normalizedSum / sum;,2,2,1,0,4,0,0,0,1,5,41,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1306,         return out;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1321,"         T[] array = (T[]) Array.newInstance(field.getRuntimeClass(), length);",1,0,0,1,10,0,5,2,0,5,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1322,"         Arrays.fill(array, field.getZero());",0,0,0,1,4,0,5,0,0,3,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1323,         return array;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1341,         if (columns < 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1342,"             T[] dummyRow = buildArray(field, 0);",1,0,0,0,4,0,2,1,1,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1343,"             array = (T[][]) Array.newInstance(dummyRow.getClass(), rows);",1,0,0,1,10,0,5,1,1,6,61,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1344,         } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1345,"             array = (T[][]) Array.newInstance(field.getRuntimeClass(),",1,0,0,1,9,0,4,1,1,6,58,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1349,             for (int i = 0; i < rows; ++i) {,4,1,0,1,3,2,0,0,1,6,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1350,"                 Arrays.fill(array[i], field.getZero());",0,0,1,1,6,0,4,0,0,4,39,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1353,         return array;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1374,         MathUtils.checkNotNull(x);,0,0,0,1,2,0,3,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1375,         MathUtils.checkNotNull(h);,0,0,0,1,2,0,3,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1377,         final int N = x.length;,3,0,0,0,0,2,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1378,         final int M = h.length;,3,0,0,0,0,2,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1380,         if (N == 0 || M == 0) {,2,3,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1381,             throw new NoDataException();,0,0,0,1,2,2,0,1,1,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1385,         final int totalLength = N + M - 1;,3,2,0,0,0,2,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1386,         final double[] y = new double[totalLength];,1,0,1,0,4,4,0,0,1,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1389,         for (int n = 0; n < totalLength; n++) {,4,1,0,1,3,2,0,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1390,             double yn = 0;,1,0,0,0,0,1,0,0,0,2,14,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1391,             for (int k = 0; k < M; k++) {,4,1,0,1,3,2,0,0,1,6,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1392,                 final int j = n - k;,3,1,0,0,0,2,0,0,1,4,20,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1393,                 if ((j > -1) && (j < N) ) {,3,3,0,2,7,1,0,0,1,6,27,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1394,                     yn = yn + x[j] * h[k];,2,2,1,0,4,0,0,0,1,5,22,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1397,             y[n] = yn;,1,0,1,0,2,0,0,0,1,4,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1400,         return y;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,4,37,        this(LocalizedFormats.NO_DATA);,2,0,0,1,2,1,0,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,4,38,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,4,45,        super(specific);,1,0,0,1,2,1,0,0,1,5,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,4,46,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,4,44,                                        Object ... args) {,1,0,0,0,2,0,0,1,0,3,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,4,45,        context = new ExceptionContext(this);,1,0,0,1,2,2,0,1,2,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,4,46,"        context.addMessage(pattern, args);",0,0,0,0,2,0,4,0,0,2,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,4,47,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,4,51,        return context;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,4,57,        return context.getMessage();,0,0,0,1,2,1,2,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,4,63,        return context.getLocalizedMessage();,0,0,0,1,2,1,2,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,4,43,    public MathArithmeticException() {,1,0,0,1,3,1,0,0,1,5,34,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,4,44,        context = new ExceptionContext(this);,1,0,0,1,2,2,0,1,2,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,4,45,        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,2,0,0,1,2,0,2,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,4,46,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,4,56,                                   Object ... args) {,1,0,0,0,2,0,0,1,0,3,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,4,57,        context = new ExceptionContext(this);,1,0,0,1,2,2,0,1,2,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,4,58,"        context.addMessage(pattern, args);",0,0,0,0,2,0,4,0,0,2,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,4,59,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,4,63,        return context;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,4,69,        return context.getMessage();,0,0,0,1,2,1,2,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,4,75,        return context.getLocalizedMessage();,0,0,0,1,2,1,2,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,4,44,"        super(specific, wrong, expected);",3,0,0,0,2,1,0,0,1,4,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,4,45,        dimension = expected;,2,0,0,0,0,0,0,0,1,2,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,4,46,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,4,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);",4,0,0,0,2,1,0,0,0,3,67,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,4,57,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,4,63,        return dimension;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,4,46,"        super(pattern, wrong, arguments);",3,0,0,0,2,1,0,0,1,4,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,4,47,        argument = wrong;,2,0,0,0,0,0,0,0,1,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,4,48,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,4,54,        return argument;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,4,41,        this(LocalizedFormats.NULL_NOT_ALLOWED);,2,0,0,1,2,1,0,0,0,4,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,4,42,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,4,50,"        super(pattern, arguments);",2,0,0,0,2,1,0,0,1,4,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,4,51,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,4,37,"        super(value, 0, true);",1,0,0,0,2,1,0,0,2,4,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,4,38,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,4,47,"        super(specific, value, 0, true);",2,0,0,0,2,1,0,0,2,4,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,4,48,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,4,50,        this(boundIsAllowed ?,1,0,0,0,1,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,4,54,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,4,68,"        super(specific, wrong, min);",3,0,0,0,2,1,0,0,1,4,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,4,70,        this.min = min;,2,0,0,0,0,1,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,4,71,        this.boundIsAllowed = boundIsAllowed;,2,0,0,0,0,1,0,0,1,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,4,72,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,4,78,        return boundIsAllowed;,1,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,4,85,        return min;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,4,38,"        super(value, 0, false);",1,0,0,0,2,1,0,0,2,4,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,4,39,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,4,48,"        super(specific, value, 0, false);",2,0,0,0,2,1,0,0,2,4,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,4,49,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,4,37,    public MathInternalError() {,1,0,0,1,3,1,0,0,1,5,28,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,4,38,"        getContext().addMessage(LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",2,0,0,1,4,0,3,0,1,5,69,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,4,39,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,4,46,"        super(cause, LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",4,0,0,0,2,1,0,0,1,4,58,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,4,47,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,4,56,"        super(pattern, args);",2,0,0,0,2,1,0,0,1,4,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,4,57,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,4,45,                                     Object ... args) {,1,0,0,0,2,0,0,1,0,3,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,4,46,        context = new ExceptionContext(this);,1,0,0,1,2,2,0,1,2,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,4,47,"        context.addMessage(pattern, args);",0,0,0,0,2,0,4,0,0,2,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,4,48,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,4,60,        super(cause);,1,0,0,1,2,1,0,0,1,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,4,61,        context = new ExceptionContext(this);,1,0,0,1,2,2,0,1,2,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,4,62,"        context.addMessage(pattern, args);",0,0,0,0,2,0,4,0,0,2,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,4,63,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,4,69,        this(LocalizedFormats.ILLEGAL_STATE);,2,0,0,1,2,1,0,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,4,70,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,4,74,        return context;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,4,80,        return context.getMessage();,0,0,0,1,2,1,2,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,4,86,        return context.getLocalizedMessage();,0,0,0,1,2,1,2,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,4,61,"        this(wrong, previous, index, MathArrays.OrderDirection.INCREASING, true);",6,0,0,0,2,1,0,0,1,4,73,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,4,62,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,4,80,        super(direction == MathArrays.OrderDirection.INCREASING ?,4,1,0,0,1,1,0,0,1,5,57,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,4,89,        this.direction = direction;,2,0,0,0,0,1,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,4,90,        this.strict = strict;,2,0,0,0,0,1,0,0,1,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,4,91,        this.index = index;,2,0,0,0,0,1,0,0,1,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,4,92,        this.previous = previous;,2,0,0,0,0,1,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,4,93,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,4,99,        return direction;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,4,105,        return strict;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,4,113,        return index;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,4,119,        return previous;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,292,    public static enum OrderDirection {,1,0,0,0,1,3,0,0,2,4,35,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,294,"        INCREASING,",1,0,0,0,0,0,0,0,0,1,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,296,        DECREASING,1,0,0,0,0,0,0,0,0,1,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3826,        CodyWaite(double xa) {,2,0,0,1,3,1,0,0,0,4,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3829,            int k = (int)(xa * 0.6366197723675814);,2,1,0,1,4,2,0,0,0,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3835,                double a = -k * 1.570796251296997;,2,1,0,0,0,1,0,0,1,4,34,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3836,                remA = xa + a;,3,1,0,0,0,0,0,0,1,3,14,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3837,                remB = -(remA - xa - a);,4,1,0,1,2,0,0,0,2,5,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3839,                a = -k * 7.549789948768648E-8;,2,1,0,0,0,0,0,0,2,3,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3840,                double b = remA;,2,0,0,0,0,1,0,0,0,2,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3841,                remA = a + b;,3,1,0,0,0,0,0,0,1,3,13,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3842,                remB += -(remA - b - a);,4,1,0,1,2,0,0,0,2,5,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3844,                a = -k * 6.123233995736766E-17;,2,1,0,0,0,0,0,0,2,3,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3845,                b = remA;,2,0,0,0,0,0,0,0,1,2,9,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3846,                remA = a + b;,3,1,0,0,0,0,0,0,1,3,13,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3847,                remB += -(remA - b - a);,4,1,0,1,2,0,0,0,2,5,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3849,                if (remA > 0) {,1,1,0,1,3,1,0,0,0,5,15,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3850,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3856,                --k;,1,0,0,0,0,0,0,0,1,2,4,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3857,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3859,            this.finalK = k;,2,0,0,0,0,1,0,0,1,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3860,            this.finalRemA = remA;,2,0,0,0,0,1,0,0,1,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3861,            this.finalRemB = remB;,2,0,0,0,0,1,0,0,1,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3862,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3868,            return finalK;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3874,            return finalRemA;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3880,            return finalRemB;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,359,    private FastMath() {},1,0,0,1,4,1,0,0,1,5,21,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,371,        if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN){,6,3,0,1,3,1,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,372,            return d; // These are un-normalised - don't try to convert,1,0,0,0,0,2,0,0,0,2,59,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,374,        long xl = Double.doubleToRawLongBits(d); // can take raw bits because just gonna convert it back,1,0,0,1,2,1,3,0,0,5,96,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,375,        xl = xl & MASK_30BITS; // Drop low order bits,3,1,0,0,0,0,0,0,1,3,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,376,        return Double.longBitsToDouble(xl);,0,0,0,1,2,1,3,0,0,4,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,393,      if (x != x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,394,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,402,      if (x > 20) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,403,          if (x >= LOG_MAX_VALUE) {,2,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,405,              final double t = exp(0.5 * x);,2,1,0,1,2,2,1,0,2,7,30,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,406,              return (0.5 * t) * t;,2,2,0,1,2,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,408,              return 0.5 * exp(x);,0,1,0,1,2,1,2,0,1,6,20,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,410,      } else if (x < -20) {,1,1,0,1,4,2,0,0,1,6,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,411,          if (x <= -LOG_MAX_VALUE) {,2,1,0,1,3,1,0,0,1,6,26,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,413,              final double t = exp(-0.5 * x);,2,1,0,1,2,2,1,0,3,7,31,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,414,              return (0.5 * t) * t;,2,2,0,1,2,1,0,0,0,5,21,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,416,              return 0.5 * exp(-x);,1,1,0,1,2,1,1,0,2,7,21,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,420,      final double hiPrec[] = new double[2];,1,0,0,0,4,4,0,0,1,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,421,      if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,422,          x = -x;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,424,"      exp(x, 0.0, hiPrec);",0,0,0,0,2,0,3,0,1,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,426,      double ya = hiPrec[0] + hiPrec[1];,1,1,1,0,4,1,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,427,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,2,1,1,1,6,1,0,0,1,7,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,429,      double temp = ya * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,430,      double yaa = ya + temp - temp;,4,2,0,0,0,1,0,0,0,3,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,431,      double yab = ya - yaa;,3,1,0,0,0,1,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,434,      double recip = 1.0/ya;,2,1,0,0,0,1,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,435,      temp = recip * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,436,      double recipa = recip + temp - temp;,4,2,0,0,0,1,0,0,0,3,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,437,      double recipb = recip - recipa;,3,1,0,0,0,1,0,0,0,3,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,440,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,10,9,0,1,2,0,0,0,1,5,76,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,442,      recipb += -yb * recip * recip;,4,1,0,0,0,0,0,0,2,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,445,      temp = ya + recipa;,3,1,0,0,0,0,0,0,1,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,446,      yb += -(temp - ya - recipa);,4,1,0,1,2,0,0,0,2,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,447,      ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,448,      temp = ya + recipb;,3,1,0,0,0,0,0,0,1,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,449,      yb += -(temp - ya - recipb);,4,1,0,1,2,0,0,0,2,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,450,      ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,452,      double result = ya + yb;,3,1,0,0,0,1,0,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,453,      result *= 0.5;,1,0,0,0,0,0,0,0,1,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,454,      return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,462,      boolean negate = false;,1,0,0,0,0,1,0,0,1,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,463,      if (x != x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,464,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,472,      if (x > 20) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,473,          if (x >= LOG_MAX_VALUE) {,2,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,475,              final double t = exp(0.5 * x);,2,1,0,1,2,2,1,0,2,7,30,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,476,              return (0.5 * t) * t;,2,2,0,1,2,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,478,              return 0.5 * exp(x);,0,1,0,1,2,1,2,0,1,6,20,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,480,      } else if (x < -20) {,1,1,0,1,4,2,0,0,1,6,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,481,          if (x <= -LOG_MAX_VALUE) {,2,1,0,1,3,1,0,0,1,6,26,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,483,              final double t = exp(-0.5 * x);,2,1,0,1,2,2,1,0,3,7,31,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,484,              return (-0.5 * t) * t;,2,2,0,1,2,1,0,0,1,6,22,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,486,              return -0.5 * exp(-x);,1,1,0,1,2,1,1,0,3,7,22,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,490,      if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,491,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,494,      if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,495,          x = -x;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,496,          negate = true;,1,0,0,0,0,0,0,0,2,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,501,      if (x > 0.25) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,502,          double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,503,"          exp(x, 0.0, hiPrec);",0,0,0,0,2,0,3,0,1,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,505,          double ya = hiPrec[0] + hiPrec[1];,1,1,1,0,4,1,0,0,0,5,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,506,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,2,1,1,1,6,1,0,0,1,7,42,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,508,          double temp = ya * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,509,          double yaa = ya + temp - temp;,4,2,0,0,0,1,0,0,0,3,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,510,          double yab = ya - yaa;,3,1,0,0,0,1,0,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,513,          double recip = 1.0/ya;,2,1,0,0,0,1,0,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,514,          temp = recip * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,515,          double recipa = recip + temp - temp;,4,2,0,0,0,1,0,0,0,3,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,516,          double recipb = recip - recipa;,3,1,0,0,0,1,0,0,0,3,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,519,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,10,9,0,1,2,0,0,0,1,5,76,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,521,          recipb += -yb * recip * recip;,4,1,0,0,0,0,0,0,2,3,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,523,          recipa = -recipa;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,524,          recipb = -recipb;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,527,          temp = ya + recipa;,3,1,0,0,0,0,0,0,1,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,528,          yb += -(temp - ya - recipa);,4,1,0,1,2,0,0,0,2,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,529,          ya = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,530,          temp = ya + recipb;,3,1,0,0,0,0,0,0,1,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,531,          yb += -(temp - ya - recipb);,4,1,0,1,2,0,0,0,2,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,532,          ya = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,534,          result = ya + yb;,3,1,0,0,0,0,0,0,1,3,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,535,          result *= 0.5;,1,0,0,0,0,0,0,0,1,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,536,      },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,538,          double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,539,"          expm1(x, hiPrec);",0,0,0,0,2,0,3,0,1,3,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,541,          double ya = hiPrec[0] + hiPrec[1];,1,1,1,0,4,1,0,0,0,5,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,542,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,2,1,1,1,6,1,0,0,1,7,42,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,545,          double denom = 1.0 + ya;,2,1,0,0,0,1,0,0,0,3,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,546,          double denomr = 1.0 / denom;,2,1,0,0,0,1,0,0,0,3,28,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,547,          double denomb = -(denom - 1.0 - ya) + yb;,4,2,0,1,2,1,0,0,1,6,41,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,548,          double ratio = ya * denomr;,3,1,0,0,0,1,0,0,0,3,27,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,549,          double temp = ratio * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,35,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,550,          double ra = ratio + temp - temp;,4,2,0,0,0,1,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,551,          double rb = ratio - ra;,3,1,0,0,0,1,0,0,0,3,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,553,          temp = denom * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,554,          double za = denom + temp - temp;,4,2,0,0,0,1,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,555,          double zb = denom - za;,3,1,0,0,0,1,0,0,0,3,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,557,          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;,11,9,0,1,2,0,0,0,1,5,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,560,          rb += yb*denomr;                        // numerator,3,1,0,0,0,0,0,0,1,3,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,561,          rb += -ya * denomb * denomr * denomr;   // denominator,5,1,0,0,0,0,0,0,2,3,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,564,          temp = ya + ra;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,565,          yb += -(temp - ya - ra);,4,1,0,1,2,0,0,0,2,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,566,          ya = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,567,          temp = ya + rb;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,568,          yb += -(temp - ya - rb);,4,1,0,1,2,0,0,0,2,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,569,          ya = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,571,          result = ya + yb;,3,1,0,0,0,0,0,0,1,3,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,572,          result *= 0.5;,1,0,0,0,0,0,0,0,1,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,575,      if (negate) {,1,0,0,1,3,1,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,576,          result = -result;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,579,      return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,587,      boolean negate = false;,1,0,0,0,0,1,0,0,1,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,589,      if (x != x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,590,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,599,      if (x > 20.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,600,          return 1.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,603,      if (x < -20) {,1,1,0,1,3,1,0,0,1,6,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,604,          return -1.0;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,607,      if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,608,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,611,      if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,612,          x = -x;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,613,          negate = true;,1,0,0,0,0,0,0,0,2,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,617,      if (x >= 0.5) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,618,          double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,620,"          exp(x*2.0, 0.0, hiPrec);",1,1,0,0,2,0,2,0,1,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,622,          double ya = hiPrec[0] + hiPrec[1];,1,1,1,0,4,1,0,0,0,5,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,623,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,2,1,1,1,6,1,0,0,1,7,42,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,626,          double na = -1.0 + ya;,2,1,0,0,0,1,0,0,1,4,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,627,          double nb = -(na + 1.0 - ya);,3,2,0,1,2,1,0,0,1,6,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,628,          double temp = na + yb;,3,1,0,0,0,1,0,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,629,          nb += -(temp - na - yb);,4,1,0,1,2,0,0,0,2,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,630,          na = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,633,          double da = 1.0 + ya;,2,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,634,          double db = -(da - 1.0 - ya);,3,1,0,1,2,1,0,0,1,6,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,635,          temp = da + yb;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,636,          db += -(temp - da - yb);,4,1,0,1,2,0,0,0,2,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,637,          da = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,639,          temp = da * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,640,          double daa = da + temp - temp;,4,2,0,0,0,1,0,0,0,3,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,641,          double dab = da - daa;,3,1,0,0,0,1,0,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,644,          double ratio = na/da;,3,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,645,          temp = ratio * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,646,          double ratioa = ratio + temp - temp;,4,2,0,0,0,1,0,0,0,3,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,647,          double ratiob = ratio - ratioa;,3,1,0,0,0,1,0,0,0,3,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,650,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,11,9,0,1,2,0,0,0,1,5,72,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,653,          ratiob += nb / da;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,655,          ratiob += -db * na / da / da;,5,3,0,0,0,0,0,0,2,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,657,          result = ratioa + ratiob;,3,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,658,      },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,660,          double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,662,"          expm1(x*2.0, hiPrec);",1,1,0,0,2,0,2,0,1,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,664,          double ya = hiPrec[0] + hiPrec[1];,1,1,1,0,4,1,0,0,0,5,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,665,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,2,1,1,1,6,1,0,0,1,7,42,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,668,          double na = ya;,2,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,669,          double nb = yb;,2,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,672,          double da = 2.0 + ya;,2,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,673,          double db = -(da - 2.0 - ya);,3,1,0,1,2,1,0,0,1,6,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,674,          double temp = da + yb;,3,1,0,0,0,1,0,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,675,          db += -(temp - da - yb);,4,1,0,1,2,0,0,0,2,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,676,          da = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,678,          temp = da * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,679,          double daa = da + temp - temp;,4,2,0,0,0,1,0,0,0,3,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,680,          double dab = da - daa;,3,1,0,0,0,1,0,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,683,          double ratio = na/da;,3,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,684,          temp = ratio * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,685,          double ratioa = ratio + temp - temp;,4,2,0,0,0,1,0,0,0,3,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,686,          double ratiob = ratio - ratioa;,3,1,0,0,0,1,0,0,0,3,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,689,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,11,9,0,1,2,0,0,0,1,5,72,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,692,          ratiob += nb / da;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,694,          ratiob += -db * na / da / da;,5,3,0,0,0,0,0,0,2,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,696,          result = ratioa + ratiob;,3,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,699,      if (negate) {,1,0,0,1,3,1,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,700,          result = -result;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,703,      return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,711,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,3,3,0,2,4,1,4,0,0,6,50,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,719,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,720,        if (a < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,721,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,722,            a = -a;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,726,        if (a > 0.167) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,727,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,4,3,0,2,4,0,4,0,1,6,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,729,            final double a2 = a * a;,3,1,0,0,0,2,0,0,1,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,730,            if (a > 0.097) {,1,1,0,1,3,1,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,731,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,26,17,0,8,16,0,0,0,1,5,212,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,732,            } else if (a > 0.036) {,1,1,0,1,4,2,0,0,0,5,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,733,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,20,13,0,6,12,0,0,0,1,5,160,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,734,            } else if (a > 0.0036) {,1,1,0,1,4,2,0,0,0,5,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,735,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);,14,9,0,4,8,0,0,0,1,5,109,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,737,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);,8,5,0,2,4,0,0,0,1,5,63,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,741,        return negative ? -absAsinh : absAsinh;,3,0,0,0,0,1,0,0,1,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,749,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,750,        if (a < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,751,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,752,            a = -a;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,756,        if (a > 0.15) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,757,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,3,4,0,2,6,0,2,0,1,6,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,759,            final double a2 = a * a;,3,1,0,0,0,2,0,0,1,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,760,            if (a > 0.087) {,1,1,0,1,3,1,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,761,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));,18,17,0,8,16,0,0,0,1,5,141,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,762,            } else if (a > 0.031) {,1,1,0,1,4,2,0,0,0,5,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,763,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));,14,13,0,6,12,0,0,0,1,5,109,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,764,            } else if (a > 0.003) {,1,1,0,1,4,2,0,0,0,5,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,765,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));,10,9,0,4,8,0,0,0,1,5,77,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,767,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));,6,5,0,2,4,0,0,0,1,5,47,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,771,        return negative ? -absAtanh : absAtanh;,3,0,0,0,0,1,0,0,1,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,780,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,3,2,0,2,6,2,0,0,1,6,87,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,789,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,3,2,0,2,6,2,0,0,1,6,91,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,797,"        return nextAfter(a, Double.POSITIVE_INFINITY);",2,0,0,0,2,1,2,0,1,5,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,805,"        return nextAfter(a, Float.POSITIVE_INFINITY);",2,0,0,0,2,1,2,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,813,        return Math.random();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,837,"        return exp(x, 0.0, null);",0,0,0,0,2,1,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,856,        if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,857,            intVal = (int) -x;,2,0,0,1,2,1,0,0,2,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,859,            if (intVal > 746) {,1,1,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,860,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,861,                    hiPrec[0] = 0.0;,0,0,1,0,2,0,0,0,1,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,862,                    hiPrec[1] = 0.0;,0,0,1,0,2,0,0,0,1,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,864,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,867,            if (intVal > 709) {,1,1,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,869,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",2,2,0,0,2,2,3,0,2,6,79,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,870,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,871,                    hiPrec[0] /= 285040095144011776.0;,0,0,1,0,2,0,0,0,1,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,872,                    hiPrec[1] /= 285040095144011776.0;,0,0,1,0,2,0,0,0,1,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,874,                return result;,1,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,877,            if (intVal == 709) {,1,1,0,1,3,1,0,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,879,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",2,2,0,0,2,2,3,0,2,6,79,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,880,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,881,                    hiPrec[0] /= 4.455505956692756620;,0,0,1,0,2,0,0,0,1,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,882,                    hiPrec[1] /= 4.455505956692756620;,0,0,1,0,2,0,0,0,1,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,884,                return result;,1,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,887,            intVal++;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,889,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,5,1,0,0,2,0,0,0,1,4,71,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,890,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,5,1,0,0,2,0,0,0,1,4,71,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,892,            intVal = -intVal;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,894,            intVal = (int) x;,2,0,0,1,2,1,0,0,1,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,896,            if (intVal > 709) {,1,1,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,897,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,898,                    hiPrec[0] = Double.POSITIVE_INFINITY;,2,0,1,0,2,0,0,0,1,4,37,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,899,                    hiPrec[1] = 0.0;,0,0,1,0,2,0,0,0,1,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,901,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,904,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,5,1,0,0,2,0,0,0,1,4,71,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,905,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,5,1,0,0,2,0,0,0,1,4,71,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,912,        final int intFrac = (int) ((x - intVal) * 1024.0);,3,2,0,2,6,3,0,0,1,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,913,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,3,0,1,0,2,2,0,0,1,5,64,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,914,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,3,0,1,0,2,2,0,0,1,5,64,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,920,        final double epsilon = x - (intVal + intFrac / 1024.0);,4,3,0,1,2,2,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,929,        double z = 0.04168701738764507;,1,0,0,0,0,1,0,0,0,2,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,930,        z = z * epsilon + 0.1666666505023083;,3,2,0,0,0,0,0,0,1,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,931,        z = z * epsilon + 0.5000000000042687;,3,2,0,0,0,0,0,0,1,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,932,        z = z * epsilon + 1.0;,3,2,0,0,0,0,0,0,1,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,933,        z = z * epsilon + -3.940510424527919E-20;,3,2,0,0,0,0,0,0,2,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,940,        double tempA = intPartA * fracPartA;,3,1,0,0,0,1,0,0,0,3,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,941,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,7,5,0,0,0,1,0,0,0,3,82,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,947,        final double tempC = tempB + tempA;,3,1,0,0,0,2,0,0,1,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,949,        if (extra != 0.0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,950,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,10,7,0,0,0,0,0,0,1,3,63,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,952,            result = tempC*z + tempB + tempA;,5,3,0,0,0,0,0,0,1,3,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,955,        if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,957,            hiPrec[0] = tempA;,1,0,1,0,2,0,0,0,1,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,958,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,8,6,1,0,2,0,0,0,1,5,58,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,961,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,969,"      return expm1(x, null);",0,0,0,0,2,1,2,0,1,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,978,        if (x != x || x == 0.0) { // NaN or zero,3,3,0,1,3,1,0,0,0,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,979,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,982,        if (x <= -1.0 || x >= 1.0) {,2,3,0,1,3,1,0,0,1,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,985,            double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,986,"            exp(x, 0.0, hiPrec);",0,0,0,0,2,0,3,0,1,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,987,            if (x > 0.0) {,1,1,0,1,3,1,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,988,                return -1.0 + hiPrec[0] + hiPrec[1];,0,1,1,0,4,1,0,0,1,5,36,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,990,                final double ra = -1.0 + hiPrec[0];,1,1,1,0,2,2,0,0,2,6,35,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,991,                double rb = -(ra + 1.0 - hiPrec[0]);,2,2,1,1,4,1,0,0,1,7,36,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,992,                rb += hiPrec[1];,1,0,1,0,2,0,0,0,1,4,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,993,                return ra + rb;,2,1,0,0,0,1,0,0,0,3,15,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1000,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1002,        if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1003,            x = -x;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1004,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1008,            int intFrac = (int) (x * 1024.0);,2,1,0,1,4,2,0,0,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1009,            double tempA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0;,3,1,1,0,2,1,0,0,0,5,60,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1010,            double tempB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,3,0,1,0,2,1,0,0,0,4,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1012,            double temp = tempA + tempB;,3,1,0,0,0,1,0,0,0,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1013,            tempB = -(temp - tempA - tempB);,4,1,0,1,2,0,0,0,2,5,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1014,            tempA = temp;,2,0,0,0,0,0,0,0,1,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1016,            temp = tempA * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1017,            baseA = tempA + temp - temp;,4,2,0,0,0,0,0,0,1,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1018,            baseB = tempB + (tempA - baseA);,4,2,0,1,2,0,0,0,1,5,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1020,            epsilon = x - intFrac/1024.0;,3,2,0,0,0,0,0,0,1,3,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1025,        double zb = 0.008336750013465571;,1,0,0,0,0,1,0,0,0,2,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1026,        zb = zb * epsilon + 0.041666663879186654;,3,2,0,0,0,0,0,0,1,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1027,        zb = zb * epsilon + 0.16666666666745392;,3,2,0,0,0,0,0,0,1,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1028,        zb = zb * epsilon + 0.49999999999999994;,3,2,0,0,0,0,0,0,1,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1029,        zb = zb * epsilon;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1030,        zb = zb * epsilon;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1032,        double za = epsilon;,2,0,0,0,0,1,0,0,0,2,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1033,        double temp = za + zb;,3,1,0,0,0,1,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1034,        zb = -(temp - za - zb);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1035,        za = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1037,        temp = za * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1038,        temp = za + temp - temp;,4,2,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1039,        zb += za - temp;,3,1,0,0,0,0,0,0,1,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1040,        za = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1043,        double ya = za * baseA;,3,1,0,0,0,1,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1045,        temp = ya + za * baseB;,4,2,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1046,        double yb = -(temp - ya - za * baseB);,5,2,0,1,2,1,0,0,1,6,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1047,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1049,        temp = ya + zb * baseA;,4,2,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1050,        yb += -(temp - ya - zb * baseA);,5,2,0,1,2,0,0,0,2,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1051,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1053,        temp = ya + zb * baseB;,4,2,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1054,        yb += -(temp - ya - zb*baseB);,5,2,0,1,2,0,0,0,2,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1055,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1059,        temp = ya + baseA;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1060,        yb += -(temp - baseA - ya);,4,1,0,1,2,0,0,0,2,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1061,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1063,        temp = ya + za;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1065,        yb += -(temp - ya - za);,4,1,0,1,2,0,0,0,2,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1066,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1068,        temp = ya + baseB;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1070,        yb += -(temp - ya - baseB);,4,1,0,1,2,0,0,0,2,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1071,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1073,        temp = ya + zb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1075,        yb += -(temp - ya - zb);,4,1,0,1,2,0,0,0,2,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1076,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1078,        if (negative) {,1,0,0,1,3,1,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1080,            double denom = 1.0 + ya;,2,1,0,0,0,1,0,0,0,3,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1081,            double denomr = 1.0 / denom;,2,1,0,0,0,1,0,0,0,3,28,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1082,            double denomb = -(denom - 1.0 - ya) + yb;,4,2,0,1,2,1,0,0,1,6,41,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1083,            double ratio = ya * denomr;,3,1,0,0,0,1,0,0,0,3,27,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1084,            temp = ratio * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1085,            final double ra = ratio + temp - temp;,4,2,0,0,0,2,0,0,1,4,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1086,            double rb = ratio - ra;,3,1,0,0,0,1,0,0,0,3,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1088,            temp = denom * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1089,            za = denom + temp - temp;,4,2,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1090,            zb = denom - za;,3,1,0,0,0,0,0,0,1,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1092,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,11,9,0,1,2,0,0,0,1,5,60,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1103,            rb += yb * denomr;                      // numerator,3,1,0,0,0,0,0,0,1,3,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1104,            rb += -ya * denomb * denomr * denomr;   // denominator,5,1,0,0,0,0,0,0,2,3,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1107,            ya = -ra;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1108,            yb = -rb;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1111,        if (hiPrecOut != null) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1112,            hiPrecOut[0] = ya;,1,0,1,0,2,0,0,0,1,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1113,            hiPrecOut[1] = yb;,1,0,1,0,2,0,0,0,1,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1116,        return ya + yb;,2,1,0,0,0,1,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1126,"        return log(x, null);",0,0,0,0,2,1,2,0,1,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1136,        if (x==0) { // Handle special case of +0/-0,1,1,0,1,3,2,0,0,0,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1137,            return Double.NEGATIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1139,        long bits = Double.doubleToRawLongBits(x);,1,0,0,1,2,1,3,0,0,5,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1142,        if (((bits & 0x8000000000000000L) != 0 || x != x) && x != 0.0) {,4,6,0,3,7,1,0,0,0,5,64,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1143,            if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1144,                hiPrec[0] = Double.NaN;,2,0,1,0,2,0,0,0,1,4,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1147,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1151,        if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1152,            if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1153,                hiPrec[0] = Double.POSITIVE_INFINITY;,2,0,1,0,2,0,0,0,1,4,37,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1156,            return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1160,        int exp = (int)(bits >> 52)-1023;,2,2,0,1,4,2,0,0,0,5,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1162,        if ((bits & 0x7ff0000000000000L) == 0) {,1,2,0,2,5,1,0,0,0,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1164,            if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1166,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1167,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,2,0,1,0,2,0,0,0,1,4,37,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1170,                return Double.NEGATIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1174,            bits <<= 1;,1,0,0,0,0,0,0,0,1,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1175,            while ( (bits & 0x0010000000000000L) == 0) {,1,2,0,2,5,1,0,0,0,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1176,                --exp;,1,0,0,0,0,0,0,0,1,2,6,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1177,                bits <<= 1;,1,0,0,0,0,0,0,0,1,2,11,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1182,        if ((exp == -1 || exp == 0) && x < 1.01 && x > 0.99 && hiPrec == null) {,5,9,0,2,5,1,0,0,1,6,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1187,            double xa = x - 1.0;,2,1,0,0,0,1,0,0,0,3,20,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1188,            double xb = xa - x + 1.0;,3,2,0,0,0,1,0,0,0,3,25,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1189,            double tmp = xa * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1190,            double aa = xa + tmp - tmp;,4,2,0,0,0,1,0,0,0,3,27,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1191,            double ab = xa - aa;,3,1,0,0,0,1,0,0,0,3,20,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1192,            xa = aa;,2,0,0,0,0,0,0,0,1,2,8,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1193,            xb = ab;,2,0,0,0,0,0,0,0,1,2,8,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1195,            final double[] lnCoef_last = LN_QUICK_COEF[LN_QUICK_COEF.length - 1];,3,1,1,0,4,2,0,0,1,6,69,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1196,            double ya = lnCoef_last[0];,1,0,1,0,2,1,0,0,0,4,27,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1197,            double yb = lnCoef_last[1];,1,0,1,0,2,1,0,0,0,4,27,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1199,            for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,5,2,0,1,3,2,0,0,1,6,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1201,                aa = ya * xa;,3,1,0,0,0,0,0,0,1,3,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1202,                ab = ya * xb + yb * xa + yb * xb;,7,5,0,0,0,0,0,0,1,3,33,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1204,                tmp = aa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1205,                ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1206,                yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1209,                final double[] lnCoef_i = LN_QUICK_COEF[i];,1,0,1,0,4,2,0,0,1,5,43,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1210,                aa = ya + lnCoef_i[0];,2,1,1,0,2,0,0,0,1,5,22,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1211,                ab = yb + lnCoef_i[1];,2,1,1,0,2,0,0,0,1,5,22,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1213,                tmp = aa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1214,                ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1215,                yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1219,            aa = ya * xa;,3,1,0,0,0,0,0,0,1,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1220,            ab = ya * xb + yb * xa + yb * xb;,7,5,0,0,0,0,0,0,1,3,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1222,            tmp = aa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1223,            ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1224,            yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1226,            return ya + yb;,2,1,0,0,0,1,0,0,0,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1230,        final double[] lnm = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,4,2,0,2,10,3,0,0,1,6,79,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1241,        final double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,4,4,0,2,6,2,0,0,1,6,95,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1243,        double lnza = 0.0;,1,0,0,0,0,1,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1244,        double lnzb = 0.0;,1,0,0,0,0,1,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1246,        if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1248,            double tmp = epsilon * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1249,            double aa = epsilon + tmp - tmp;,4,2,0,0,0,1,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1250,            double ab = epsilon - aa;,3,1,0,0,0,1,0,0,0,3,25,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1251,            double xa = aa;,2,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1252,            double xb = ab;,2,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1255,            final double numer = bits & 0x3ffffffffffL;,2,1,0,0,0,2,0,0,1,4,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1256,            final double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,3,2,0,1,2,2,0,0,1,6,65,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1257,            aa = numer - xa*denom - xb * denom;,6,4,0,0,0,0,0,0,1,3,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1258,            xb += aa / denom;,3,1,0,0,0,0,0,0,1,3,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1261,            final double[] lnCoef_last = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];,3,1,1,0,4,2,0,0,1,6,71,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1262,            double ya = lnCoef_last[0];,1,0,1,0,2,1,0,0,0,4,27,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1263,            double yb = lnCoef_last[1];,1,0,1,0,2,1,0,0,0,4,27,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1265,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,5,2,0,1,3,2,0,0,1,6,55,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1267,                aa = ya * xa;,3,1,0,0,0,0,0,0,1,3,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1268,                ab = ya * xb + yb * xa + yb * xb;,7,5,0,0,0,0,0,0,1,3,33,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1270,                tmp = aa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1271,                ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1272,                yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1275,                final double[] lnCoef_i = LN_HI_PREC_COEF[i];,1,0,1,0,4,2,0,0,1,5,45,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1276,                aa = ya + lnCoef_i[0];,2,1,1,0,2,0,0,0,1,5,22,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1277,                ab = yb + lnCoef_i[1];,2,1,1,0,2,0,0,0,1,5,22,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1279,                tmp = aa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1280,                ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1281,                yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1285,            aa = ya * xa;,3,1,0,0,0,0,0,0,1,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1286,            ab = ya * xb + yb * xa + yb * xb;,7,5,0,0,0,0,0,0,1,3,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1294,            lnza = aa + ab;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1295,            lnzb = -(lnza - aa - ab);,4,1,0,1,2,0,0,0,2,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1296,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1299,            lnza = -0.16624882440418567;,1,0,0,0,0,0,0,0,2,2,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1300,            lnza = lnza * epsilon + 0.19999954120254515;,3,2,0,0,0,0,0,0,1,3,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1301,            lnza = lnza * epsilon + -0.2499999997677497;,3,2,0,0,0,0,0,0,2,3,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1302,            lnza = lnza * epsilon + 0.3333333333332802;,3,2,0,0,0,0,0,0,1,3,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1303,            lnza = lnza * epsilon + -0.5;,3,2,0,0,0,0,0,0,2,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1304,            lnza = lnza * epsilon + 1.0;,3,2,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1305,            lnza = lnza * epsilon;,3,1,0,0,0,0,0,0,1,3,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1322,        double a = LN_2_A*exp;,3,1,0,0,0,1,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1323,        double b = 0.0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1324,        double c = a+lnm[0];,2,1,1,0,2,1,0,0,0,5,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1325,        double d = -(c-a-lnm[0]);,3,1,1,1,4,1,0,0,1,7,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1326,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1327,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1329,        c = a + lnza;,3,1,0,0,0,0,0,0,1,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1330,        d = -(c - a - lnza);,4,1,0,1,2,0,0,0,2,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1331,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1332,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1334,        c = a + LN_2_B*exp;,4,2,0,0,0,0,0,0,1,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1335,        d = -(c - a - LN_2_B*exp);,5,2,0,1,2,0,0,0,2,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1336,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1337,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1339,        c = a + lnm[1];,2,1,1,0,2,0,0,0,1,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1340,        d = -(c - a - lnm[1]);,3,1,1,1,4,0,0,0,2,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1341,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1342,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1344,        c = a + lnzb;,3,1,0,0,0,0,0,0,1,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1345,        d = -(c - a - lnzb);,4,1,0,1,2,0,0,0,2,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1346,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1347,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1349,        if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1350,            hiPrec[0] = a;,1,0,1,0,2,0,0,0,1,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1351,            hiPrec[1] = b;,1,0,1,0,2,0,0,0,1,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1354,        return a + b;,2,1,0,0,0,1,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1364,        if (x == -1) {,1,1,0,1,3,1,0,0,1,6,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1365,            return Double.NEGATIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1368,        if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1369,            return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1372,        if (x > 1e-6 ||,1,2,0,0,1,1,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1374,            final double xpa = 1 + x;,2,1,0,0,0,2,0,0,1,4,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1375,            final double xpb = -(xpa - 1 - x);,3,1,0,1,2,2,0,0,2,6,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1377,            final double[] hiPrec = new double[2];,1,0,0,0,4,4,0,0,1,4,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1378,"            final double lores = log(xpa, hiPrec);",1,0,0,0,2,2,3,0,2,5,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1379,            if (Double.isInfinite(lores)) { // Don't allow this to be converted to NaN,0,0,0,2,5,2,3,0,0,4,74,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1380,                return lores;,1,0,0,0,0,1,0,0,0,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1385,            final double fx1 = xpb / xpa;,3,1,0,0,0,2,0,0,1,4,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1386,            final double epsilon = 0.5 * fx1 + 1;,2,2,0,0,0,2,0,0,1,4,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1387,            return epsilon * fx1 + hiPrec[1] + hiPrec[0];,2,3,1,0,4,1,0,0,0,5,45,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1390,            final double y = (x * F_1_3 - F_1_2) * x + 1;,5,4,0,1,2,2,0,0,1,6,45,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1391,            return y * x;,2,1,0,0,0,1,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1400,        final double hiPrec[] = new double[2];,1,0,0,0,4,4,0,0,1,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1402,"        final double lores = log(x, hiPrec);",1,0,0,0,2,2,3,0,2,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1403,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0,0,0,2,5,2,3,0,0,4,73,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1404,            return lores;,1,0,0,0,0,1,0,0,0,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1407,        final double tmp = hiPrec[0] * HEX_40000000;,2,1,1,0,2,2,0,0,1,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1408,        final double lna = hiPrec[0] + tmp - tmp;,3,2,1,0,2,2,0,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1409,        final double lnb = hiPrec[0] - lna + hiPrec[1];,2,2,1,0,4,2,0,0,1,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1411,        final double rln10a = 0.4342944622039795;,1,0,0,0,0,2,0,0,1,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1412,        final double rln10b = 1.9699272335463627E-8;,1,0,0,0,0,2,0,0,1,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1414,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,8,7,0,0,0,1,0,0,0,3,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1434,        return log(x) / log(base);,0,1,0,1,4,1,4,0,2,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1445,        final double lns[] = new double[2];,1,0,0,0,4,4,0,0,1,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1447,        if (y == 0.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1448,            return 1.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1451,        if (x != x) { // X is NaN,2,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1452,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1456,        if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1457,            long bits = Double.doubleToRawLongBits(x);,1,0,0,1,2,1,3,0,0,5,42,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1458,            if ((bits & 0x8000000000000000L) != 0) {,1,2,0,2,5,1,0,0,0,5,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1460,                long yi = (long) y;,2,0,0,1,2,2,0,0,0,4,19,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1462,                if (y < 0 && y == yi && (yi & 1) == 1) {,4,6,0,2,5,1,0,0,0,5,40,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1463,                    return Double.NEGATIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1466,                if (y > 0 && y == yi && (yi & 1) == 1) {,4,6,0,2,5,1,0,0,0,5,40,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1467,                    return -0.0;,0,0,0,0,0,1,0,0,1,2,12,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1471,            if (y < 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1472,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1474,            if (y > 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1475,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1478,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1481,        if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1482,            if (y != y) { // y is NaN,2,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1483,                return y;,1,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1485,            if (y < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1486,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1488,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1492,        if (y == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1493,            if (x * x == 1.0) {,2,2,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1494,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1497,            if (x * x > 1.0) {,2,2,0,1,3,1,0,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1498,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1500,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1504,        if (x == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1505,            if (y != y) { // y is NaN,2,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1506,                return y;,1,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1509,            if (y < 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1510,                long yi = (long) y;,2,0,0,1,2,2,0,0,0,4,19,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1511,                if (y == yi && (yi & 1) == 1) {,3,4,0,2,5,1,0,0,0,5,31,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1512,                    return -0.0;,0,0,0,0,0,1,0,0,1,2,12,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1515,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1518,            if (y > 0)  {,1,1,0,1,3,1,0,0,0,5,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1519,                long yi = (long) y;,2,0,0,1,2,2,0,0,0,4,19,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1520,                if (y == yi && (yi & 1) == 1) {,3,4,0,2,5,1,0,0,0,5,31,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1521,                    return Double.NEGATIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1524,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1528,        if (y == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1530,            if (x * x == 1.0) {,2,2,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1531,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1534,            if (x * x < 1.0) {,2,2,0,1,3,1,0,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1535,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1537,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1542,        if (x < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1544,            if (y >= TWO_POWER_53 || y <= -TWO_POWER_53) {,4,3,0,1,3,1,0,0,1,6,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1545,"                return pow(-x, y);",1,0,0,0,2,1,2,0,2,5,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1548,            if (y == (long) y) {,2,1,0,2,5,2,0,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1550,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",3,2,0,2,8,2,4,0,5,7,53,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1552,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1559,        if (y < 8e298 && y > -8e298) {,2,3,0,1,3,1,0,0,1,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1560,            double tmp1 = y * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1561,            ya = y + tmp1 - tmp1;,4,2,0,0,0,0,0,0,1,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1562,            yb = y - ya;,3,1,0,0,0,0,0,0,1,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1563,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1564,            double tmp1 = y * 9.31322574615478515625E-10;,2,1,0,0,0,1,0,0,0,3,45,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1565,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,2,1,0,0,0,1,0,0,0,3,48,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1566,            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;,6,3,0,1,2,0,0,0,1,5,56,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1567,            yb = y - ya;,3,1,0,0,0,0,0,0,1,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1571,"        final double lores = log(x, lns);",1,0,0,0,2,2,3,0,2,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1572,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0,0,0,2,5,2,3,0,0,4,73,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1573,            return lores;,1,0,0,0,0,1,0,0,0,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1576,        double lna = lns[0];,1,0,1,0,2,1,0,0,0,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1577,        double lnb = lns[1];,1,0,1,0,2,1,0,0,0,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1580,        double tmp1 = lna * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1581,        double tmp2 = lna + tmp1 - tmp1;,4,2,0,0,0,1,0,0,0,3,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1582,        lnb += lna - tmp2;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1583,        lna = tmp2;,2,0,0,0,0,0,0,0,1,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1586,        final double aa = lna * ya;,3,1,0,0,0,2,0,0,1,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1587,        final double ab = lna * yb + lnb * ya + lnb * yb;,7,5,0,0,0,2,0,0,1,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1589,        lna = aa+ab;,3,1,0,0,0,0,0,0,1,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1590,        lnb = -(lna - aa - ab);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1592,        double z = 1.0 / 120.0;,1,1,0,0,0,1,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1593,        z = z * lnb + (1.0 / 24.0);,3,3,0,1,2,0,0,0,1,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1594,        z = z * lnb + (1.0 / 6.0);,3,3,0,1,2,0,0,0,1,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1595,        z = z * lnb + 0.5;,3,2,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1596,        z = z * lnb + 1.0;,3,2,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1597,        z = z * lnb;,3,1,0,0,0,0,0,0,1,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1599,"        final double result = exp(lna, z, null);",1,0,0,0,2,2,3,0,2,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1601,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1615,        if (e == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1616,            return 1.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1617,        } else if (e < 0) {,1,1,0,1,4,2,0,0,0,5,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1618,            e = -e;,2,0,0,0,0,0,0,0,2,2,7,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1619,            d = 1.0 / d;,2,1,0,0,0,0,0,0,1,3,12,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1624,        final int splitFactor = 0x8000001;,1,0,0,0,0,2,0,0,1,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1625,        final double cd       = splitFactor * d;,3,1,0,0,0,2,0,0,1,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1626,        final double d1High   = cd - (cd - d);,4,2,0,1,2,2,0,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1627,        final double d1Low    = d - d1High;,3,1,0,0,0,2,0,0,1,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1630,        double resultHigh = 1;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1631,        double resultLow  = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1634,        double d2p     = d;,2,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1635,        double d2pHigh = d1High;,2,0,0,0,0,1,0,0,0,2,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1636,        double d2pLow  = d1Low;,2,0,0,0,0,1,0,0,0,2,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1638,        while (e != 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1640,            if ((e & 0x1) != 0) {,1,2,0,2,5,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1643,                final double tmpHigh = resultHigh * d2p;,3,1,0,0,0,2,0,0,1,4,40,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1644,                final double cRH     = splitFactor * resultHigh;,3,1,0,0,0,2,0,0,1,4,48,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1645,                final double rHH     = cRH - (cRH - resultHigh);,4,2,0,1,2,2,0,0,1,6,48,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1646,                final double rHL     = resultHigh - rHH;,3,1,0,0,0,2,0,0,1,4,40,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1647,                final double tmpLow  = rHL * d2pLow - (((tmpHigh - rHH * d2pHigh) - rHL * d2pHigh) - rHH * d2pLow);,10,8,0,3,6,2,0,0,1,6,99,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1648,                resultHigh = tmpHigh;,2,0,0,0,0,0,0,0,1,2,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1649,                resultLow  = resultLow * d2p + tmpLow;,4,2,0,0,0,0,0,0,1,3,38,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1654,            final double tmpHigh = d2pHigh * d2p;,3,1,0,0,0,2,0,0,1,4,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1655,            final double cD2pH   = splitFactor * d2pHigh;,3,1,0,0,0,2,0,0,1,4,45,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1656,            final double d2pHH   = cD2pH - (cD2pH - d2pHigh);,4,2,0,1,2,2,0,0,1,6,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1657,            final double d2pHL   = d2pHigh - d2pHH;,3,1,0,0,0,2,0,0,1,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1658,            final double tmpLow  = d2pHL * d2pLow - (((tmpHigh - d2pHH * d2pHigh) - d2pHL * d2pHigh) - d2pHH * d2pLow);,10,8,0,3,6,2,0,0,1,6,107,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1659,            final double cTmpH   = splitFactor * tmpHigh;,3,1,0,0,0,2,0,0,1,4,45,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1660,            d2pHigh = cTmpH - (cTmpH - tmpHigh);,4,2,0,1,2,0,0,0,1,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1661,            d2pLow  = d2pLow * d2p + tmpLow + (tmpHigh - d2pHigh);,6,4,0,1,2,0,0,0,1,5,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1662,            d2p     = d2pHigh + d2pLow;,3,1,0,0,0,0,0,0,1,3,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1664,            e = e >> 1;,2,1,0,0,0,0,0,0,1,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1666,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1668,        return resultHigh + resultLow;,2,1,0,0,0,1,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1863,        int idx = (int) ((xa * 8.0) + 0.5);,2,2,0,2,6,2,0,0,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1864,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,2,1,1,0,2,2,0,0,1,6,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1867,        final double sintA = SINE_TABLE_A[idx];,1,0,1,0,2,2,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1868,        final double sintB = SINE_TABLE_B[idx];,1,0,1,0,2,2,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1869,        final double costA = COSINE_TABLE_A[idx];,1,0,1,0,2,2,0,0,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1870,        final double costB = COSINE_TABLE_B[idx];,1,0,1,0,2,2,0,0,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1873,        double sinEpsA = epsilon;,2,0,0,0,0,1,0,0,0,2,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1874,        double sinEpsB = polySine(epsilon);,1,0,0,1,2,1,2,0,1,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1875,        final double cosEpsA = 1.0;,1,0,0,0,0,2,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1876,        final double cosEpsB = polyCosine(epsilon);,1,0,0,1,2,2,2,0,2,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1879,        double temp = sinEpsA * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1880,        double temp2 = (sinEpsA + temp) - temp;,4,2,0,1,2,1,0,0,0,5,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1881,        sinEpsB +=  sinEpsA - temp2;,3,1,0,0,0,0,0,0,1,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1882,        sinEpsA = temp2;,2,0,0,0,0,0,0,0,1,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1907,        double a = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1908,        double b = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1911,        double t = sintA;,2,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1912,        double c = a + t;,3,1,0,0,0,1,0,0,0,3,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1913,        double d = -(c - a - t);,4,1,0,1,2,1,0,0,1,6,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1914,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1915,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1917,        t = costA*sinEpsA;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1918,        c = a + t;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1919,        d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1920,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1921,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1923,        b = b + sintA*cosEpsB + costA*sinEpsB;,6,4,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1924,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,9,6,0,0,0,0,0,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1926,        double sina = a + b;,3,1,0,0,0,1,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1927,        double sinb = -(sina - a - b);,4,1,0,1,2,1,0,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1931,        a = b = c = d = 0.0;,4,0,0,0,0,0,0,0,4,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1933,        t = costA*cosEpsA;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1934,        c = a + t;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1935,        d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1936,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1937,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1939,        t = -sintA*sinEpsA;,3,1,0,0,0,0,0,0,2,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1940,        c = a + t;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1941,        d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1942,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1943,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1945,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,8,6,0,0,0,0,0,0,1,3,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1946,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,8,6,0,1,2,0,0,0,1,5,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1948,        double cosa = a + b;,3,1,0,0,0,1,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1949,        double cosb = -(cosa - a - b);,4,1,0,1,2,1,0,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1951,        if (cotanFlag) {,1,0,0,1,3,1,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1953,            tmp = cosa; cosa = sina; sina = tmp;,6,0,0,0,0,0,0,0,3,2,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1954,            tmp = cosb; cosb = sinb; sinb = tmp;,6,0,0,0,0,0,0,0,3,2,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1968,        double est = sina/cosa;,3,1,0,0,0,1,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1971,        temp = est * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1972,        double esta = (est + temp) - temp;,4,2,0,1,2,1,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1973,        double estb =  est - esta;,3,1,0,0,0,1,0,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1975,        temp = cosa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1976,        double cosaa = (cosa + temp) - temp;,4,2,0,1,2,1,0,0,0,5,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1977,        double cosab =  cosa - cosaa;,3,1,0,0,0,1,0,0,0,3,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1980,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,11,9,0,1,2,2,0,0,0,5,114,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1981,        err += sinb/cosa;                     // Change in est due to sinb,3,1,0,0,0,0,0,0,1,3,66,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1982,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,5,3,0,0,0,0,0,0,2,3,66,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1984,        if (xb != 0.0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1987,            double xbadj = xb + est*est*xb;,5,2,0,0,0,1,0,0,0,3,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1988,            if (cotanFlag) {,1,0,0,1,3,1,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1989,                xbadj = -xbadj;,2,0,0,0,0,0,0,0,2,2,15,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1992,            err += xbadj;,2,0,0,0,0,0,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,1995,        return est+err;,2,1,0,0,0,1,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2012,        long inbits = Double.doubleToRawLongBits(x);,1,0,0,1,2,1,3,0,0,5,44,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2013,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,2,3,0,2,6,2,0,0,0,5,53,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2016,        inbits &= 0x000fffffffffffffL;,1,0,0,0,0,0,0,0,1,2,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2017,        inbits |= 0x0010000000000000L;,1,0,0,0,0,0,0,0,1,2,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2020,        exponent++;,1,0,0,0,0,0,0,0,1,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2021,        inbits <<= 11;,1,0,0,0,0,0,0,0,1,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2027,        int idx = exponent >> 6;,2,1,0,0,0,1,0,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2028,        int shift = exponent - (idx << 6);,3,2,0,1,2,1,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2030,        if (shift != 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2031,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,4,3,1,1,6,0,0,0,1,6,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2032,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,2,2,1,1,4,0,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2033,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,4,5,1,2,10,0,0,0,1,6,70,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2034,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,5,6,1,2,10,0,0,0,1,6,72,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2036,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,3,2,1,1,4,0,0,0,1,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2037,            shpiA = RECIP_2PI[idx];,1,0,1,0,2,0,0,0,1,4,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2038,            shpiB = RECIP_2PI[idx+1];,2,1,1,0,2,0,0,0,1,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2042,        long a = inbits >>> 32;,2,1,0,0,0,1,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2043,        long b = inbits & 0xffffffffL;,2,1,0,0,0,1,0,0,0,3,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2045,        long c = shpiA >>> 32;,2,1,0,0,0,1,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2046,        long d = shpiA & 0xffffffffL;,2,1,0,0,0,1,0,0,0,3,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2048,        long ac = a * c;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2049,        long bd = b * d;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2050,        long bc = b * c;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2051,        long ad = a * d;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2053,        long prodB = bd + (ad << 32);,3,2,0,1,2,1,0,0,0,5,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2054,        long prodA = ac + (ad >>> 32);,3,2,0,1,2,1,0,0,0,5,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2056,        boolean bita = (bd & 0x8000000000000000L) != 0;,2,2,0,1,2,1,0,0,0,5,47,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2057,        boolean bitb = (ad & 0x80000000L ) != 0;,2,2,0,1,2,1,0,0,0,5,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2058,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,2,2,0,1,2,1,0,0,0,5,52,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2061,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2063,            prodA++;,1,0,0,0,0,0,0,0,1,2,8,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2066,        bita = (prodB & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2067,        bitb = (bc & 0x80000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2069,        prodB = prodB + (bc << 32);,3,2,0,1,2,0,0,0,1,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2070,        prodA = prodA + (bc >>> 32);,3,2,0,1,2,0,0,0,1,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2072,        bitsum = (prodB & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2075,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2077,            prodA++;,1,0,0,0,0,0,0,0,1,2,8,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2081,        c = shpiB >>> 32;,2,1,0,0,0,0,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2082,        d = shpiB & 0xffffffffL;,2,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2083,        ac = a * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2084,        bc = b * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2085,        ad = a * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2088,        ac = ac + ((bc + ad) >>> 32);,4,3,0,2,4,0,0,0,1,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2090,        bita = (prodB & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2091,        bitb = (ac & 0x8000000000000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2092,        prodB += ac;,2,0,0,0,0,0,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2093,        bitsum = (prodB & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2095,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2097,            prodA++;,1,0,0,0,0,0,0,0,1,2,8,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2101,        c = shpi0 >>> 32;,2,1,0,0,0,0,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2102,        d = shpi0 & 0xffffffffL;,2,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2104,        bd = b * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2105,        bc = b * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2106,        ad = a * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2108,        prodA += bd + ((bc + ad) << 32);,4,3,0,2,4,0,0,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2120,        int intPart = (int)(prodA >>> 62);,2,1,0,1,4,2,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2123,        prodA <<= 2;,1,0,0,0,0,0,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2124,        prodA |= prodB >>> 62;,2,1,0,0,0,0,0,0,1,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2125,        prodB <<= 2;,1,0,0,0,0,0,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2128,        a = prodA >>> 32;,2,1,0,0,0,0,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2129,        b = prodA & 0xffffffffL;,2,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2131,        c = PI_O_4_BITS[0] >>> 32;,1,1,1,0,2,0,0,0,1,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2132,        d = PI_O_4_BITS[0] & 0xffffffffL;,1,1,1,0,2,0,0,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2134,        ac = a * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2135,        bd = b * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2136,        bc = b * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2137,        ad = a * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2139,        long prod2B = bd + (ad << 32);,3,2,0,1,2,1,0,0,0,5,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2140,        long prod2A = ac + (ad >>> 32);,3,2,0,1,2,1,0,0,0,5,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2142,        bita = (bd & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2143,        bitb = (ad & 0x80000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2144,        bitsum = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2147,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2149,            prod2A++;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2152,        bita = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2153,        bitb = (bc & 0x80000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2155,        prod2B = prod2B + (bc << 32);,3,2,0,1,2,0,0,0,1,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2156,        prod2A = prod2A + (bc >>> 32);,3,2,0,1,2,0,0,0,1,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2158,        bitsum = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2161,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2163,            prod2A++;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2167,        c = PI_O_4_BITS[1] >>> 32;,1,1,1,0,2,0,0,0,1,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2168,        d = PI_O_4_BITS[1] & 0xffffffffL;,1,1,1,0,2,0,0,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2169,        ac = a * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2170,        bc = b * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2171,        ad = a * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2174,        ac = ac + ((bc + ad) >>> 32);,4,3,0,2,4,0,0,0,1,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2176,        bita = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2177,        bitb = (ac & 0x8000000000000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2178,        prod2B += ac;,2,0,0,0,0,0,0,0,1,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2179,        bitsum = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2181,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2183,            prod2A++;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2187,        a = prodB >>> 32;,2,1,0,0,0,0,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2188,        b = prodB & 0xffffffffL;,2,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2189,        c = PI_O_4_BITS[0] >>> 32;,1,1,1,0,2,0,0,0,1,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2190,        d = PI_O_4_BITS[0] & 0xffffffffL;,1,1,1,0,2,0,0,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2191,        ac = a * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2192,        bc = b * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2193,        ad = a * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2196,        ac = ac + ((bc + ad) >>> 32);,4,3,0,2,4,0,0,0,1,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2198,        bita = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2199,        bitb = (ac & 0x8000000000000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2200,        prod2B += ac;,2,0,0,0,0,0,0,0,1,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2201,        bitsum = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2203,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2205,            prod2A++;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2209,        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits,3,2,0,1,2,1,0,0,0,5,68,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2210,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits,5,5,0,3,8,1,0,0,0,5,102,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2212,        double sumA = tmpA + tmpB;,3,1,0,0,0,1,0,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2213,        double sumB = -(sumA - tmpA - tmpB);,4,1,0,1,2,1,0,0,1,6,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2216,        result[0] = intPart;,1,0,1,0,2,0,0,0,1,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2217,        result[1] = sumA * 2.0;,1,1,1,0,2,0,0,0,1,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2218,        result[2] = sumB * 2.0;,1,1,1,0,2,0,0,0,1,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2219,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2236,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2237,            xa = -xa;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2242,            long bits = Double.doubleToRawLongBits(x);,1,0,0,1,2,1,3,0,0,5,42,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2243,            if (bits < 0) {,1,1,0,1,3,1,0,0,0,5,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2244,                return -0.0;,0,0,0,0,0,1,0,0,1,2,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2246,            return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2250,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2258,            double reduceResults[] = new double[3];,1,0,0,0,4,3,0,0,0,3,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2259,"            reducePayneHanek(xa, reduceResults);",0,0,0,0,2,0,3,0,1,3,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2260,            quadrant = ((int) reduceResults[0]) & 3;,1,1,1,2,6,1,0,0,1,7,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2261,            xa = reduceResults[1];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2262,            xb = reduceResults[2];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2263,        } else if (xa > 1.5707963267948966) {,1,1,0,1,4,2,0,0,0,5,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2264,            final CodyWaite cw = new CodyWaite(xa);,2,0,0,1,2,2,0,2,2,6,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2265,            quadrant = cw.getK() & 3;,1,1,0,1,2,0,2,0,1,6,25,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2266,            xa = cw.getRemA();,1,0,0,1,2,0,2,0,1,5,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2267,            xb = cw.getRemB();,1,0,0,1,2,0,2,0,1,5,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2271,            quadrant ^= 2;  // Flip bit 1,1,0,0,0,0,0,0,0,1,2,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2278,"                return cosQ(xa, xb);",0,0,0,0,2,1,3,0,1,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2280,"                return -sinQ(xa, xb);",0,0,0,0,2,1,3,0,2,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2282,"                return -cosQ(xa, xb);",0,0,0,0,2,1,3,0,2,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2284,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2300,            xa = -xa;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2304,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2313,            double reduceResults[] = new double[3];,1,0,0,0,4,3,0,0,0,3,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2314,"            reducePayneHanek(xa, reduceResults);",0,0,0,0,2,0,3,0,1,3,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2315,            quadrant = ((int) reduceResults[0]) & 3;,1,1,1,2,6,1,0,0,1,7,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2316,            xa = reduceResults[1];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2317,            xb = reduceResults[2];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2318,        } else if (xa > 1.5707963267948966) {,1,1,0,1,4,2,0,0,0,5,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2319,            final CodyWaite cw = new CodyWaite(xa);,2,0,0,1,2,2,0,2,2,6,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2320,            quadrant = cw.getK() & 3;,1,1,0,1,2,0,2,0,1,6,25,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2321,            xa = cw.getRemA();,1,0,0,1,2,0,2,0,1,5,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2322,            xb = cw.getRemB();,1,0,0,1,2,0,2,0,1,5,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2332,"                return -sinQ(xa, xb);",0,0,0,0,2,1,3,0,2,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2334,"                return -cosQ(xa, xb);",0,0,0,0,2,1,3,0,2,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2336,"                return sinQ(xa, xb);",0,0,0,0,2,1,3,0,1,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2338,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2349,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2350,        int quadrant = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2353,        double xa = x;,2,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2354,        if (x < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2355,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2356,            xa = -xa;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2360,        if (xa == 0.0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2361,            long bits = Double.doubleToRawLongBits(x);,1,0,0,1,2,1,3,0,0,5,42,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2362,            if (bits < 0) {,1,1,0,1,3,1,0,0,0,5,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2363,                return -0.0;,0,0,0,0,0,1,0,0,1,2,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2365,            return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2368,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,5,3,0,1,3,1,0,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2369,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2373,        double xb = 0;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2374,        if (xa > 3294198.0) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2378,            double reduceResults[] = new double[3];,1,0,0,0,4,3,0,0,0,3,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2379,"            reducePayneHanek(xa, reduceResults);",0,0,0,0,2,0,3,0,1,3,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2380,            quadrant = ((int) reduceResults[0]) & 3;,1,1,1,2,6,1,0,0,1,7,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2381,            xa = reduceResults[1];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2382,            xb = reduceResults[2];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2383,        } else if (xa > 1.5707963267948966) {,1,1,0,1,4,2,0,0,0,5,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2384,            final CodyWaite cw = new CodyWaite(xa);,2,0,0,1,2,2,0,2,2,6,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2385,            quadrant = cw.getK() & 3;,1,1,0,1,2,0,2,0,1,6,25,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2386,            xa = cw.getRemA();,1,0,0,1,2,0,2,0,1,5,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2387,            xb = cw.getRemB();,1,0,0,1,2,0,2,0,1,5,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2390,        if (xa > 1.5) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2392,            final double pi2a = 1.5707963267948966;,1,0,0,0,0,2,0,0,1,3,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2393,            final double pi2b = 6.123233995736766E-17;,1,0,0,0,0,2,0,0,1,3,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2395,            final double a = pi2a - xa;,3,1,0,0,0,2,0,0,1,4,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2396,            double b = -(a - pi2a + xa);,4,2,0,1,2,1,0,0,1,6,28,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2397,            b += pi2b - xb;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2399,            xa = a + b;,3,1,0,0,0,0,0,0,1,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2400,            xb = -(xa - a - b);,4,1,0,1,2,0,0,0,2,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2401,            quadrant ^= 1;,1,0,0,0,0,0,0,0,1,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2402,            negative ^= true;,1,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2406,        if ((quadrant & 1) == 0) {,1,2,0,2,5,1,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2407,"            result = tanQ(xa, xb, false);",1,0,0,0,2,0,3,0,3,4,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2409,"            result = -tanQ(xa, xb, true);",1,0,0,0,2,0,3,0,4,4,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2412,        if (negative) {,1,0,0,1,3,1,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2413,            result = -result;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2416,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2425,"        return atan(x, 0.0, false);",0,0,0,0,2,1,2,0,2,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2435,        boolean negate = false;,1,0,0,0,0,1,0,0,1,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2438,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,1,1,0,1,3,2,0,0,0,5,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2439,"            return leftPlane ? copySign(Math.PI, xa) : xa;",4,0,0,0,2,1,2,0,1,5,46,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2442,        if (xa < 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2444,            xa = -xa;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2445,            xb = -xb;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2446,            negate = true;,1,0,0,0,0,0,0,0,2,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2449,        if (xa > 1.633123935319537E16) { // Very large input,1,1,0,1,3,1,0,0,0,5,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2450,            return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);,8,3,0,1,6,1,0,0,1,6,69,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2454,        if (xa < 1) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2455,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,4,4,0,3,8,1,0,0,2,6,65,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2457,            final double oneOverXa = 1 / xa;,2,1,0,0,0,2,0,0,1,4,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2458,            idx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);,4,4,0,3,8,1,0,0,3,6,89,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2460,        double epsA = xa - TANGENT_TABLE_A[idx];,2,1,1,0,2,1,0,0,0,5,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2461,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,3,2,1,1,4,1,0,0,1,7,50,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2462,        epsB += xb - TANGENT_TABLE_B[idx];,2,1,1,0,2,0,0,0,1,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2464,        double temp = epsA + epsB;,3,1,0,0,0,1,0,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2465,        epsB = -(temp - epsA - epsB);,4,1,0,1,2,0,0,0,2,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2466,        epsA = temp;,2,0,0,0,0,0,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2469,        temp = xa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2470,        double ya = xa + temp - temp;,4,2,0,0,0,1,0,0,0,3,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2471,        double yb = xb + xa - ya;,4,2,0,0,0,1,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2472,        xa = ya;,2,0,0,0,0,0,0,0,1,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2473,        xb += yb;,2,0,0,0,0,0,0,0,1,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2476,        if (idx == 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2479,            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,3,5,1,2,10,2,0,0,1,7,91,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2481,            ya = epsA * denom;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2482,            yb = epsB * denom;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2483,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2484,            double temp2 = xa * TANGENT_TABLE_A[idx];,2,1,1,0,2,1,0,0,0,5,41,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2485,            double za = 1d + temp2;,2,1,0,0,0,1,0,0,0,3,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2486,            double zb = -(za - 1d - temp2);,3,1,0,1,2,1,0,0,1,6,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2487,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,3,3,1,0,4,0,0,0,1,5,62,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2488,            temp = za + temp2;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2489,            zb += -(temp - za - temp2);,4,1,0,1,2,0,0,0,2,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2490,            za = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2492,            zb += xb * TANGENT_TABLE_B[idx];,2,1,1,0,2,0,0,0,1,5,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2493,            ya = epsA / za;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2495,            temp = ya * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2496,            final double yaa = (ya + temp) - temp;,4,2,0,1,2,2,0,0,1,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2497,            final double yab = ya - yaa;,3,1,0,0,0,2,0,0,1,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2499,            temp = za * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2500,            final double zaa = (za + temp) - temp;,4,2,0,1,2,2,0,0,1,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2501,            final double zab = za - zaa;,3,1,0,0,0,2,0,0,1,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2504,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,11,9,0,1,2,0,0,0,1,5,65,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2506,            yb += -epsA * zb / za / za;,5,3,0,0,0,0,0,0,2,3,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2507,            yb += epsB / za;,3,1,0,0,0,0,0,0,1,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2511,        epsA = ya;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2512,        epsB = yb;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2515,        final double epsA2 = epsA * epsA;,3,1,0,0,0,2,0,0,1,4,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2526,        yb = 0.07490822288864472;,1,0,0,0,0,0,0,0,1,2,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2527,        yb = yb * epsA2 + -0.09088450866185192;,3,2,0,0,0,0,0,0,2,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2528,        yb = yb * epsA2 + 0.11111095942313305;,3,2,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2529,        yb = yb * epsA2 + -0.1428571423679182;,3,2,0,0,0,0,0,0,2,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2530,        yb = yb * epsA2 + 0.19999999999923582;,3,2,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2531,        yb = yb * epsA2 + -0.33333333333333287;,3,2,0,0,0,0,0,0,2,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2532,        yb = yb * epsA2 * epsA;,4,1,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2535,        ya = epsA;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2537,        temp = ya + yb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2538,        yb = -(temp - ya - yb);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2539,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2542,        yb += epsB / (1d + epsA * epsA);,4,3,0,1,2,0,0,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2545,        double za = EIGHTHS[idx] + ya;,2,1,1,0,2,1,0,0,0,5,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2546,        double zb = -(za - EIGHTHS[idx] - ya);,3,1,1,1,4,1,0,0,1,7,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2547,        temp = za + yb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2548,        zb += -(temp - za - yb);,4,1,0,1,2,0,0,0,2,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2549,        za = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2551,        double result = za + zb;,3,1,0,0,0,1,0,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2552,        double resultb = -(result - za - zb);,4,1,0,1,2,1,0,0,1,6,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2554,        if (leftPlane) {,1,0,0,1,3,1,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2556,            final double pia = 1.5707963267948966 * 2;,1,1,0,0,0,2,0,0,1,4,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2557,            final double pib = 6.123233995736766E-17 * 2;,1,1,0,0,0,2,0,0,1,4,45,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2559,            za = pia - result;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2560,            zb = -(za - pia + result);,4,2,0,1,2,0,0,0,2,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2561,            zb += pib - resultb;,3,1,0,0,0,0,0,0,1,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2563,            result = za + zb;,3,1,0,0,0,0,0,0,1,3,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2564,            resultb = -(result - za - zb);,4,1,0,1,2,0,0,0,2,5,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2568,        if (negate ^ leftPlane) {,2,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2569,            result = -result;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2572,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2583,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2587,            final double result = x * y;,3,1,0,0,0,2,0,0,1,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2588,            final double invx = 1d / x;,2,1,0,0,0,2,0,0,1,4,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2589,            final double invy = 1d / y;,2,1,0,0,0,2,0,0,1,4,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2591,            if (invx == 0) { // X is infinite,1,1,0,1,3,1,0,0,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2592,                if (x > 0) {,1,1,0,1,3,1,0,0,0,5,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2593,                    return y; // return +/- 0.0,1,0,0,0,0,2,0,0,0,2,27,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2595,"                    return copySign(Math.PI, y);",2,0,0,0,2,1,2,0,1,5,28,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2599,            if (x < 0 || invx < 0) {,2,3,0,1,3,1,0,0,0,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2600,                if (y < 0 || invy < 0) {,2,3,0,1,3,1,0,0,0,5,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2601,                    return -Math.PI;,2,0,0,0,0,1,0,0,1,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2603,                    return Math.PI;,2,0,0,0,0,1,0,0,0,2,15,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2606,                return result;,1,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2613,            if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2614,                return Math.PI * F_1_4;,3,1,0,0,0,1,0,0,0,3,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2617,            if (x == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2618,                return Math.PI * F_3_4;,3,1,0,0,0,1,0,0,0,3,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2621,            return Math.PI * F_1_2;,3,1,0,0,0,1,0,0,0,3,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2625,            if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2626,                return -Math.PI * F_1_4;,3,1,0,0,0,1,0,0,1,4,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2629,            if (x == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2630,                return -Math.PI * F_3_4;,3,1,0,0,0,1,0,0,1,4,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2633,            return -Math.PI * F_1_2;,3,1,0,0,0,1,0,0,1,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2637,            if (y > 0 || 1 / y > 0) {,2,4,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2638,                return 0d;,0,0,0,0,0,1,0,0,0,1,10,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2641,            if (y < 0 || 1 / y < 0) {,2,4,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2642,                return -0d;,0,0,0,0,0,1,0,0,1,2,11,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2648,            if (y > 0.0 || 1 / y > 0.0) {,2,4,0,1,3,1,0,0,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2649,                return Math.PI;,2,0,0,0,0,1,0,0,0,2,15,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2652,            if (y < 0 || 1 / y < 0) {,2,4,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2653,                return -Math.PI;,2,0,0,0,0,1,0,0,1,3,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2661,                return Math.PI * F_1_2;,3,1,0,0,0,1,0,0,0,3,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2670,        final double r = y / x;,3,1,0,0,0,2,0,0,1,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2671,        if (Double.isInfinite(r)) { // bypass calculations that can create NaN,0,0,0,2,5,1,3,0,0,4,70,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2672,"            return atan(r, 0, x < 0);",1,1,0,0,2,1,2,0,1,6,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2675,        double ra = doubleHighPart(r);,1,0,0,1,2,1,2,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2676,        double rb = r - ra;,3,1,0,0,0,1,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2679,        final double xa = doubleHighPart(x);,1,0,0,1,2,2,2,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2680,        final double xb = x - xa;,3,1,0,0,0,2,0,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2682,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,11,9,0,1,2,0,0,0,1,5,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2684,        final double temp = ra + rb;,3,1,0,0,0,2,0,0,1,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2685,        rb = -(temp - ra - rb);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2686,        ra = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2688,        if (ra == 0) { // Fix up the sign so atan works correctly,1,1,0,1,3,1,0,0,0,5,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2689,"            ra = copySign(0d, y);",1,0,0,0,2,0,2,0,2,4,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2693,"        final double result = atan(ra, rb, x < 0);",2,1,0,0,2,2,3,0,2,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2695,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2703,      if (x != x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2704,          return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2707,      if (x > 1.0 || x < -1.0) {,2,3,0,1,3,1,0,0,1,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2708,          return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2711,      if (x == 1.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2712,          return Math.PI/2.0;,2,1,0,0,0,1,0,0,0,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2715,      if (x == -1.0) {,1,1,0,1,3,1,0,0,1,6,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2716,          return -Math.PI/2.0;,2,1,0,0,0,1,0,0,1,4,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2719,      if (x == 0.0) { // Matches +/- 0.0; return correct sign,1,1,0,1,3,2,0,0,0,5,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2720,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2726,      double temp = x * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2727,      final double xa = x + temp - temp;,4,2,0,0,0,2,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2728,      final double xb = x - xa;,3,1,0,0,0,2,0,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2731,      double ya = xa*xa;,3,1,0,0,0,1,0,0,0,3,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2732,      double yb = xa*xb*2.0 + xb*xb;,5,3,0,0,0,1,0,0,0,3,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2735,      ya = -ya;,2,0,0,0,0,0,0,0,2,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2736,      yb = -yb;,2,0,0,0,0,0,0,0,2,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2738,      double za = 1.0 + ya;,2,1,0,0,0,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2739,      double zb = -(za - 1.0 - ya);,3,1,0,1,2,1,0,0,1,6,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2741,      temp = za + yb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2742,      zb += -(temp - za - yb);,4,1,0,1,2,0,0,0,2,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2743,      za = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2747,      y = sqrt(za);,1,0,0,1,2,0,2,0,2,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2748,      temp = y * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2749,      ya = y + temp - temp;,4,2,0,0,0,0,0,0,1,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2750,      yb = y - ya;,3,1,0,0,0,0,0,0,1,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2753,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,9,8,0,1,4,0,0,0,1,5,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2756,      double dx = zb / (2.0*y);,3,2,0,1,2,1,0,0,0,5,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2759,      double r = x/y;,3,1,0,0,0,1,0,0,0,3,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2760,      temp = r * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2761,      double ra = r + temp - temp;,4,2,0,0,0,1,0,0,0,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2762,      double rb = r - ra;,3,1,0,0,0,1,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2764,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,11,9,0,1,2,1,0,0,1,6,83,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2765,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,5,3,0,0,0,0,0,0,2,3,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2767,      temp = ra + rb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2768,      rb = -(temp - ra - rb);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2769,      ra = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2771,"      return atan(ra, rb, false);",0,0,0,0,2,1,3,0,2,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2779,      if (x != x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2780,          return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2783,      if (x > 1.0 || x < -1.0) {,2,3,0,1,3,1,0,0,1,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2784,          return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2787,      if (x == -1.0) {,1,1,0,1,3,1,0,0,1,6,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2788,          return Math.PI;,2,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2791,      if (x == 1.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2792,          return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2795,      if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2796,          return Math.PI/2.0;,2,1,0,0,0,1,0,0,0,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2802,      double temp = x * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2803,      final double xa = x + temp - temp;,4,2,0,0,0,2,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2804,      final double xb = x - xa;,3,1,0,0,0,2,0,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2807,      double ya = xa*xa;,3,1,0,0,0,1,0,0,0,3,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2808,      double yb = xa*xb*2.0 + xb*xb;,5,3,0,0,0,1,0,0,0,3,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2811,      ya = -ya;,2,0,0,0,0,0,0,0,2,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2812,      yb = -yb;,2,0,0,0,0,0,0,0,2,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2814,      double za = 1.0 + ya;,2,1,0,0,0,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2815,      double zb = -(za - 1.0 - ya);,3,1,0,1,2,1,0,0,1,6,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2817,      temp = za + yb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2818,      zb += -(temp - za - yb);,4,1,0,1,2,0,0,0,2,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2819,      za = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2822,      double y = sqrt(za);,1,0,0,1,2,1,2,0,1,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2823,      temp = y * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2824,      ya = y + temp - temp;,4,2,0,0,0,0,0,0,1,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2825,      yb = y - ya;,3,1,0,0,0,0,0,0,1,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2828,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,9,8,0,1,4,0,0,0,1,5,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2831,      yb += zb / (2.0*y);,3,2,0,1,2,0,0,0,1,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2832,      y = ya+yb;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2833,      yb = -(y - ya - yb);,4,1,0,1,2,0,0,0,2,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2836,      double r = y/x;,3,1,0,0,0,1,0,0,0,3,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2839,      if (Double.isInfinite(r)) { // x is effectively zero,0,0,0,2,5,1,3,0,0,4,52,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2840,          return Math.PI/2; // so return the appropriate value,2,1,0,0,0,2,0,0,0,3,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2843,      double ra = doubleHighPart(r);,1,0,0,1,2,1,2,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2844,      double rb = r - ra;,3,1,0,0,0,1,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2846,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,11,9,0,1,2,1,0,0,1,6,83,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2847,      rb += yb / x;  // Add in effect additional bits of sqrt.,3,1,0,0,0,0,0,0,1,3,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2849,      temp = ra + rb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2850,      rb = -(temp - ra - rb);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2851,      ra = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2853,"      return atan(ra, rb, x<0);",1,1,0,0,2,1,3,0,1,6,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2862,      long inbits = Double.doubleToRawLongBits(x);,1,0,0,1,2,1,3,0,0,5,44,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2863,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,2,3,0,2,6,2,0,0,0,5,53,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2864,      boolean subnormal = false;,1,0,0,0,0,1,0,0,1,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2866,      if (exponent == -1023) {,1,1,0,1,3,1,0,0,1,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2867,          if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2868,              return x;,1,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2872,          subnormal = true;,1,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2873,          x *= 1.8014398509481984E16;  // 2^54,1,0,0,0,0,0,0,0,1,2,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2874,          inbits = Double.doubleToRawLongBits(x);,1,0,0,1,2,0,3,0,1,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2875,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,2,3,0,2,6,1,0,0,1,6,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2878,      if (exponent == 1024) {,1,1,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2880,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2884,      int exp3 = exponent / 3;,2,1,0,0,0,1,0,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2887,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,2,2,0,1,3,1,2,0,0,6,68,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2891,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,2,2,0,2,4,2,2,0,1,7,98,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2894,      double est = -0.010714690733195933;,1,0,0,0,0,1,0,0,1,3,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2895,      est = est * mant + 0.0875862700108075;,3,2,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2896,      est = est * mant + -0.3058015757857271;,3,2,0,0,0,0,0,0,2,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2897,      est = est * mant + 0.7249995199969751;,3,2,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2898,      est = est * mant + 0.5039018405998233;,3,2,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2900,      est *= CBRTTWO[exponent % 3 + 2];,2,2,1,0,2,0,0,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2905,      final double xs = x / (p2*p2*p2);,5,2,0,1,2,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2906,      est += (xs - est*est*est) / (3*est*est);,7,4,0,1,4,0,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2907,      est += (xs - est*est*est) / (3*est*est);,7,4,0,1,4,0,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2910,      double temp = est * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2911,      double ya = est + temp - temp;,4,2,0,0,0,1,0,0,0,3,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2912,      double yb = est - ya;,3,1,0,0,0,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2914,      double za = ya * ya;,3,1,0,0,0,1,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2915,      double zb = ya * yb * 2.0 + yb * yb;,5,3,0,0,0,1,0,0,0,3,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2916,      temp = za * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2917,      double temp2 = za + temp - temp;,4,2,0,0,0,1,0,0,0,3,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2918,      zb += za - temp2;,3,1,0,0,0,0,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2919,      za = temp2;,2,0,0,0,0,0,0,0,1,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2921,      zb = za * yb + ya * zb + zb * yb;,7,5,0,0,0,0,0,0,1,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2922,      za = za * ya;,3,1,0,0,0,0,0,0,1,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2924,      double na = xs - za;,3,1,0,0,0,1,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2925,      double nb = -(na - xs + za);,4,2,0,1,2,1,0,0,1,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2926,      nb -= zb;,2,0,0,0,0,0,0,0,1,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2928,      est += (na+nb)/(3*est*est);,5,3,0,1,4,0,0,0,1,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2931,      est *= p2;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2933,      if (subnormal) {,1,0,0,1,3,1,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2934,          est *= 3.814697265625E-6;  // 2^-18,1,0,0,0,0,0,0,0,1,2,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2937,      return est;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2947,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,1,2,0,2,5,2,3,0,0,6,79,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2948,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2952,        final double facta = 0.01745329052209854;,1,0,0,0,0,2,0,0,1,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2953,        final double factb = 1.997844754509471E-9;,1,0,0,0,0,2,0,0,1,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2955,        double xa = doubleHighPart(x);,1,0,0,1,2,1,2,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2956,        double xb = x - xa;,3,1,0,0,0,1,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2958,        double result = xb * factb + xb * facta + xa * factb + xa * facta;,9,7,0,0,0,1,0,0,0,3,66,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2959,        if (result == 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2960,            result = result * x; // ensure correct sign if calculation underflows,3,1,0,0,0,1,0,0,1,4,69,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2962,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2972,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,1,2,0,2,5,2,3,0,0,6,79,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2973,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2977,        final double facta = 57.2957763671875;,1,0,0,0,0,2,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2978,        final double factb = 3.145894820876798E-6;,1,0,0,0,0,2,0,0,1,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2980,        double xa = doubleHighPart(x);,1,0,0,1,2,1,2,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2981,        double xb = x - xa;,3,1,0,0,0,1,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2983,        return xb * factb + xb * facta + xa * factb + xa * facta;,8,7,0,0,0,1,0,0,0,3,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2992,        final int i = x >>> 31;,2,1,0,0,0,2,0,0,1,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,2993,        return (x ^ (~i + 1)) + i;,3,3,0,2,4,1,0,0,1,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3002,        final long l = x >>> 63;,2,1,0,0,0,2,0,0,1,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3007,        return (x ^ (~l + 1)) + l;,3,3,0,2,4,1,0,0,1,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3016,        return Float.intBitsToFloat(MASK_NON_SIGN_INT & Float.floatToRawIntBits(x));,1,1,0,2,4,1,5,0,0,6,76,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3034,        if (Double.isInfinite(x)) {,0,0,0,2,5,1,3,0,0,4,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3035,            return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3037,        return abs(x - Double.longBitsToDouble(Double.doubleToRawLongBits(x) ^ 1));,1,2,0,3,6,1,6,0,1,7,75,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3046,        if (Float.isInfinite(x)) {,0,0,0,2,5,1,3,0,0,4,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3047,            return Float.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3049,        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));,1,2,0,3,6,1,6,0,1,7,66,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3061,        if ((n > -1023) && (n < 1024)) {,2,3,0,2,7,1,0,0,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3062,            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);,2,3,0,3,8,2,2,0,0,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3066,        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {,1,2,0,2,9,1,6,0,0,6,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3067,            return d;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3069,        if (n < -2098) {,1,1,0,1,3,1,0,0,1,6,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3070,            return (d > 0) ? 0.0 : -0.0;,1,1,0,1,2,1,0,0,1,6,28,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3072,        if (n > 2097) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3073,            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,5,1,0,1,2,1,0,0,0,5,69,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3077,        final long bits = Double.doubleToRawLongBits(d);,1,0,0,1,2,2,3,0,1,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3078,        final long sign = bits & 0x8000000000000000L;,2,1,0,0,0,2,0,0,1,4,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3079,        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;,2,2,0,2,6,2,0,0,0,5,48,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3080,        long mantissa   = bits & 0x000fffffffffffffL;,2,1,0,0,0,1,0,0,0,3,45,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3083,        int scaledExponent = exponent + n;,3,1,0,0,0,1,0,0,0,3,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3085,        if (n < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3087,            if (scaledExponent > 0) {,1,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3089,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,3,2,0,4,8,2,2,0,0,6,82,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3090,            } else if (scaledExponent > -53) {,1,1,0,1,4,2,0,0,1,6,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3094,                mantissa = mantissa | (1L << 52);,2,2,0,1,2,0,0,0,1,5,33,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3097,                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));,3,2,0,2,4,2,0,0,2,6,73,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3098,                mantissa = mantissa >>> (1 - scaledExponent);,3,2,0,1,2,0,0,0,1,5,45,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3099,                if (mostSignificantLostBit != 0) {,1,1,0,1,3,1,0,0,0,5,34,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3101,                    mantissa++;,1,0,0,0,0,0,0,0,1,2,11,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3103,                return Double.longBitsToDouble(sign | mantissa);,2,1,0,1,2,1,2,0,0,6,48,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3107,                return (sign == 0L) ? 0.0 : -0.0;,1,1,0,1,2,1,0,0,1,6,33,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3111,            if (exponent == 0) {,1,1,0,1,3,1,0,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3114,                while ((mantissa >>> 52) != 1) {,1,2,0,2,5,1,0,0,0,5,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3115,                    mantissa = mantissa << 1;,2,1,0,0,0,0,0,0,1,3,25,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3116,                    --scaledExponent;,1,0,0,0,0,0,0,0,1,2,17,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3118,                ++scaledExponent;,1,0,0,0,0,0,0,0,1,2,17,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3119,                mantissa = mantissa & 0x000fffffffffffffL;,2,1,0,0,0,0,0,0,1,3,42,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3121,                if (scaledExponent < 2047) {,1,1,0,1,3,1,0,0,0,5,28,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3122,                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,3,2,0,4,8,2,2,0,0,6,82,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3124,                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,5,1,0,1,2,1,0,0,0,5,74,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3127,            } else if (scaledExponent < 2047) {,1,1,0,1,4,2,0,0,0,5,35,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3128,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,3,2,0,4,8,2,2,0,0,6,82,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3130,                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,5,1,0,1,2,1,0,0,0,5,74,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3145,        if ((n > -127) && (n < 128)) {,2,3,0,2,7,1,0,0,1,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3146,            return f * Float.intBitsToFloat((n + 127) << 23);,2,3,0,2,4,1,2,0,0,6,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3150,        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {,1,2,0,2,9,1,6,0,0,6,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3151,            return f;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3153,        if (n < -277) {,1,1,0,1,3,1,0,0,1,6,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3154,            return (f > 0) ? 0.0f : -0.0f;,1,1,0,1,2,1,0,0,1,6,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3156,        if (n > 276) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3157,            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,5,1,0,1,2,1,0,0,0,5,67,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3161,        final int bits = Float.floatToIntBits(f);,1,0,0,1,2,2,3,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3162,        final int sign = bits & 0x80000000;,2,1,0,0,0,2,0,0,1,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3163,        int  exponent  = (bits >>> 23) & 0xff;,2,2,0,1,2,1,0,0,0,5,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3164,        int mantissa   = bits & 0x007fffff;,2,1,0,0,0,1,0,0,0,3,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3167,        int scaledExponent = exponent + n;,3,1,0,0,0,1,0,0,0,3,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3169,        if (n < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3171,            if (scaledExponent > 0) {,1,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3173,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,3,2,0,2,4,1,2,0,0,6,70,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3174,            } else if (scaledExponent > -24) {,1,1,0,1,4,2,0,0,1,6,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3178,                mantissa = mantissa | (1 << 23);,2,2,0,1,2,0,0,0,1,5,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3181,                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));,3,2,0,2,4,2,0,0,2,6,71,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3182,                mantissa = mantissa >>> (1 - scaledExponent);,3,2,0,1,2,0,0,0,1,5,45,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3183,                if (mostSignificantLostBit != 0) {,1,1,0,1,3,1,0,0,0,5,34,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3185,                    mantissa++;,1,0,0,0,0,0,0,0,1,2,11,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3187,                return Float.intBitsToFloat(sign | mantissa);,2,1,0,1,2,1,2,0,0,6,45,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3191,                return (sign == 0) ? 0.0f : -0.0f;,1,1,0,1,2,1,0,0,1,6,34,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3195,            if (exponent == 0) {,1,1,0,1,3,1,0,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3198,                while ((mantissa >>> 23) != 1) {,1,2,0,2,5,1,0,0,0,5,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3199,                    mantissa = mantissa << 1;,2,1,0,0,0,0,0,0,1,3,25,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3200,                    --scaledExponent;,1,0,0,0,0,0,0,0,1,2,17,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3202,                ++scaledExponent;,1,0,0,0,0,0,0,0,1,2,17,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3203,                mantissa = mantissa & 0x007fffff;,2,1,0,0,0,0,0,0,1,3,33,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3205,                if (scaledExponent < 255) {,1,1,0,1,3,1,0,0,0,5,27,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3206,                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,3,2,0,2,4,1,2,0,0,6,70,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3208,                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,5,1,0,1,2,1,0,0,0,5,71,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3211,            } else if (scaledExponent < 255) {,1,1,0,1,4,2,0,0,0,5,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3212,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,3,2,0,2,4,1,2,0,0,6,70,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3214,                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,5,1,0,1,2,1,0,0,0,5,71,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3254,        if (Double.isNaN(d) || Double.isNaN(direction)) {,0,1,0,2,7,1,6,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3255,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3256,        } else if (d == direction) {,2,1,0,1,4,2,0,0,0,5,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3257,            return direction;,1,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3258,        } else if (Double.isInfinite(d)) {,0,0,0,2,6,2,3,0,0,4,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3259,            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;,5,1,0,1,2,1,0,0,1,6,54,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3260,        } else if (d == 0) {,1,1,0,1,4,2,0,0,0,5,20,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3261,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,5,1,0,1,2,1,0,0,1,6,62,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3266,        final long bits = Double.doubleToRawLongBits(d);,1,0,0,1,2,2,3,0,1,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3267,        final long sign = bits & 0x8000000000000000L;,2,1,0,0,0,2,0,0,1,4,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3268,        if ((direction < d) ^ (sign == 0L)) {,3,3,0,2,7,1,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3269,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));,2,3,0,3,6,1,2,0,0,6,74,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3271,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));,2,3,0,3,6,1,2,0,0,6,74,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3310,        if (Double.isNaN(f) || Double.isNaN(direction)) {,0,1,0,2,7,1,6,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3311,            return Float.NaN;,2,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3312,        } else if (f == direction) {,2,1,0,1,4,2,0,0,0,5,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3313,            return (float) direction;,1,0,0,1,2,2,0,0,0,4,25,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3314,        } else if (Float.isInfinite(f)) {,0,0,0,2,6,2,3,0,0,4,33,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3315,            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;,5,1,0,1,2,1,0,0,1,6,53,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3316,        } else if (f == 0f) {,1,1,0,1,4,2,0,0,0,5,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3317,            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;,5,1,0,1,2,1,0,0,1,6,60,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3322,        final int bits = Float.floatToIntBits(f);,1,0,0,1,2,2,3,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3323,        final int sign = bits & 0x80000000;,2,1,0,0,0,2,0,0,1,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3324,        if ((direction < f) ^ (sign == 0)) {,3,3,0,2,7,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3325,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));,2,3,0,3,6,1,2,0,0,6,62,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3327,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));,2,3,0,3,6,1,2,0,0,6,62,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3339,        if (x != x) { // NaN,2,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3340,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3343,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,4,3,0,1,3,1,0,0,1,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3344,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3347,        y = (long) x;,2,0,0,1,2,1,0,0,1,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3348,        if (x < 0 && y != x) {,3,3,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3349,            y--;,1,0,0,0,0,0,0,0,1,2,4,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3352,        if (y == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3353,            return x*y;,2,1,0,0,0,1,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3356,        return y;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3366,        if (x != x) { // NaN,2,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3367,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3370,        y = floor(x);,1,0,0,1,2,0,2,0,2,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3371,        if (y == x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3372,            return y;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3375,        y += 1.0;,1,0,0,0,0,0,0,0,1,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3377,        if (y == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3378,            return x*y;,2,1,0,0,0,1,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3381,        return y;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3389,        double y = floor(x);,1,0,0,1,2,1,2,0,1,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3390,        double d = x - y;,3,1,0,0,0,1,0,0,0,3,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3392,        if (d > 0.5) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3393,            if (y == -1.0) {,1,1,0,1,3,1,0,0,1,6,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3394,                return -0.0; // Preserve sign of operand,0,0,0,0,0,1,0,0,1,2,40,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3396,            return y+1.0;,1,1,0,0,0,1,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3398,        if (d < 0.5) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3399,            return y;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3403,        long z = (long) y;,2,0,0,1,2,2,0,0,0,4,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3404,        return (z & 1) == 0 ? y : y + 1.0;,3,3,0,1,2,1,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3412,        return (long) floor(x + 0.5);,1,1,0,1,4,2,1,0,1,7,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3420,        return (int) floor(x + 0.5f);,1,1,0,1,4,2,1,0,1,7,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3429,        return (a <= b) ? a : b;,4,1,0,1,2,1,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3438,        return (a <= b) ? a : b;,4,1,0,1,2,1,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3447,        if (a > b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3448,            return b;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3450,        if (a < b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3451,            return a;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3454,        if (a != b) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3455,            return Float.NaN;,2,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3459,        int bits = Float.floatToRawIntBits(a);,1,0,0,1,2,1,3,0,0,5,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3460,        if (bits == 0x80000000) {,1,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3461,            return a;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3463,        return b;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3472,        if (a > b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3473,            return b;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3475,        if (a < b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3476,            return a;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3479,        if (a != b) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3480,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3484,        long bits = Double.doubleToRawLongBits(a);,1,0,0,1,2,1,3,0,0,5,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3485,        if (bits == 0x8000000000000000L) {,1,1,0,1,3,1,0,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3486,            return a;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3488,        return b;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3497,        return (a <= b) ? b : a;,4,1,0,1,2,1,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3506,        return (a <= b) ? b : a;,4,1,0,1,2,1,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3515,        if (a > b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3516,            return a;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3518,        if (a < b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3519,            return b;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3522,        if (a != b) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3523,            return Float.NaN;,2,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3527,        int bits = Float.floatToRawIntBits(a);,1,0,0,1,2,1,3,0,0,5,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3528,        if (bits == 0x80000000) {,1,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3529,            return b;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3531,        return a;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3540,        if (a > b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3541,            return a;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3543,        if (a < b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3544,            return b;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3547,        if (a != b) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3548,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3552,        long bits = Double.doubleToRawLongBits(a);,1,0,0,1,2,1,3,0,0,5,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3553,        if (bits == 0x8000000000000000L) {,1,1,0,1,3,1,0,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3554,            return b;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3556,        return a;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3575,            return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3577,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3584,                return abs(x);,0,0,0,1,2,1,2,0,1,5,14,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3591,                final int middleExp = (expX + expY) / 2;,3,2,0,1,2,2,0,0,1,6,40,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3594,"                final double scaledX = scalb(x, -middleExp);",2,0,0,0,2,2,2,0,3,5,44,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3595,"                final double scaledY = scalb(y, -middleExp);",2,0,0,0,2,2,2,0,3,5,44,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3598,                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);,5,3,0,1,2,2,1,0,2,7,67,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3601,"                return scalb(scaledH, middleExp);",0,0,0,0,2,1,3,0,1,4,33,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3629,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation",0,0,0,0,2,1,4,0,0,3,90,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3645,        final long m = Double.doubleToRawLongBits(magnitude); // don't care about NaN,1,0,0,1,2,2,3,0,1,6,77,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3646,        final long s = Double.doubleToRawLongBits(sign);,1,0,0,1,2,2,3,0,1,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3647,        if ((m^s) >= 0) {,2,2,0,2,5,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3648,            return magnitude;,1,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3650,        return -magnitude; // flip sign,1,0,0,0,0,1,0,0,1,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3666,        final int m = Float.floatToRawIntBits(magnitude);,1,0,0,1,2,2,3,0,1,6,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3667,        final int s = Float.floatToRawIntBits(sign);,1,0,0,1,2,2,3,0,1,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3668,        if ((m^s) >= 0) {,2,2,0,2,5,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3669,            return magnitude;,1,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3671,        return -magnitude; // flip sign,1,0,0,0,0,1,0,0,1,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3699,        return ((Float.floatToRawIntBits(f) >>> 23) & 0xff) - 127;,0,3,0,3,6,1,3,0,0,5,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3708,        PrintStream out = System.out;,3,0,0,0,0,0,0,1,0,2,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3709,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_A"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);",2,0,0,0,2,0,4,0,1,4,96,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3710,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_B"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);",2,0,0,0,2,0,4,0,1,4,96,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3711,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_A"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);",2,0,0,0,2,0,4,0,1,4,100,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3712,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_B"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);",2,0,0,0,2,0,4,0,1,4,100,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3713,"        FastMathCalc.printarray(out, ""LN_MANT"",LN_MANT_LEN, lnMant.LN_MANT);",2,0,0,0,2,0,4,0,1,4,68,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3714,"        FastMathCalc.printarray(out, ""SINE_TABLE_A"", SINE_TABLE_LEN, SINE_TABLE_A);",0,0,0,0,2,0,5,0,1,3,75,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3715,"        FastMathCalc.printarray(out, ""SINE_TABLE_B"", SINE_TABLE_LEN, SINE_TABLE_B);",0,0,0,0,2,0,5,0,1,3,75,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3716,"        FastMathCalc.printarray(out, ""COSINE_TABLE_A"", SINE_TABLE_LEN, COSINE_TABLE_A);",0,0,0,0,2,0,5,0,1,3,79,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3717,"        FastMathCalc.printarray(out, ""COSINE_TABLE_B"", SINE_TABLE_LEN, COSINE_TABLE_B);",0,0,0,0,2,0,5,0,1,3,79,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3718,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_A"", SINE_TABLE_LEN, TANGENT_TABLE_A);",0,0,0,0,2,0,5,0,1,3,81,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3719,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_B"", SINE_TABLE_LEN, TANGENT_TABLE_B);",0,0,0,0,2,0,5,0,1,3,81,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3720,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,315,            switch (dir) {,1,0,0,1,3,1,0,0,0,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,704,"            = new Comparator<Pair<Double, double[]>>() {",0,0,0,1,5,2,0,3,1,5,44,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,708,                switch (dir) {,1,0,0,1,3,1,0,0,0,4,14,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,710,                    val = o1.getKey().compareTo(o2.getKey());,1,0,0,2,6,0,5,0,1,5,41,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,711,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,713,                    val = o2.getKey().compareTo(o1.getKey());,1,0,0,2,6,0,5,0,1,5,41,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,714,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,717,                    throw new MathInternalError();,0,0,0,1,2,2,0,1,1,5,30,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,4,719,                return val;,1,0,0,0,0,1,0,0,0,2,11,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,83,    private Precision() {},1,0,0,1,4,1,0,0,1,5,22,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,96,"        if (equals(x, y, eps)) {",0,0,0,0,5,1,4,0,1,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,97,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,98,        } else if (x < y) {,2,1,0,1,4,2,0,0,0,5,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,99,            return -1;,0,0,0,0,0,1,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,101,        return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,122,"        if (equals(x, y, maxUlps)) {",0,0,0,0,5,1,4,0,1,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,123,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,124,        } else if (x < y) {,2,1,0,1,4,2,0,0,0,5,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,125,            return -1;,0,0,0,0,0,1,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,127,        return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,139,"        return equals(x, y, 1);",0,0,0,0,2,1,3,0,1,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,152,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, 1);",0,2,0,2,8,1,9,0,1,6,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,166,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",3,3,0,1,4,1,5,0,1,7,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,181,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",3,3,0,2,6,1,5,0,1,7,64,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,203,        int xInt = Float.floatToIntBits(x);,1,0,0,1,2,1,3,0,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,204,        int yInt = Float.floatToIntBits(y);,1,0,0,1,2,1,3,0,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,207,        if (xInt < 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,208,            xInt = SGN_MASK_FLOAT - xInt;,3,1,0,0,0,0,0,0,1,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,210,        if (yInt < 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,211,            yInt = SGN_MASK_FLOAT - yInt;,3,1,0,0,0,0,0,0,1,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,214,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,4,2,0,1,2,2,2,0,1,7,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,216,        return isEqual && !Float.isNaN(x) && !Float.isNaN(y);,1,1,0,1,4,1,6,0,2,7,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,232,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, maxUlps);",0,2,0,2,8,1,10,0,1,6,67,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,244,"        return equals(x, y, 1);",0,0,0,0,2,1,3,0,1,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,257,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, 1);",0,2,0,2,8,1,9,0,1,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,272,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",3,3,0,1,4,1,5,0,1,7,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,288,"        if (equals(x, y, 1)) {",0,0,0,0,5,1,3,0,1,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,289,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,292,"        final double absoluteMax = FastMath.max(FastMath.abs(x), FastMath.abs(y));",1,0,0,1,6,2,8,0,1,6,74,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,293,        final double relativeDifference = FastMath.abs((x - y) / absoluteMax);,4,2,0,2,4,2,2,0,1,7,70,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,295,        return relativeDifference <= eps;,2,1,0,0,0,1,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,310,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",3,3,0,2,6,1,5,0,1,7,64,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,331,        long xInt = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,332,        long yInt = Double.doubleToLongBits(y);,1,0,0,1,2,1,3,0,0,5,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,335,        if (xInt < 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,336,            xInt = SGN_MASK - xInt;,3,1,0,0,0,0,0,0,1,3,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,338,        if (yInt < 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,339,            yInt = SGN_MASK - yInt;,3,1,0,0,0,0,0,0,1,3,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,342,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,4,2,0,1,2,2,2,0,1,7,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,344,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,1,1,0,1,4,1,6,0,2,7,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,360,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, maxUlps);",0,2,0,2,8,1,10,0,1,6,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,373,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",2,0,0,0,2,1,3,0,1,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,395,            return (new BigDecimal,0,0,0,0,1,2,0,1,1,4,22,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,399,        } catch (NumberFormatException ex) {,1,0,0,1,4,1,0,1,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,400,            if (Double.isInfinite(x)) {,0,0,0,2,5,1,3,0,0,4,27,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,401,                return x;,1,0,0,0,0,1,0,0,0,2,9,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,403,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,418,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",2,0,0,0,2,1,3,0,1,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,436,"        final float sign = FastMath.copySign(1f, x);",1,0,0,0,2,2,3,0,1,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,437,"        final float factor = (float) FastMath.pow(10.0f, scale) * sign;",2,1,0,1,4,3,3,0,1,7,63,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,438,"        return (float) roundUnscaled(x * factor, sign, roundingMethod) / factor;",3,2,0,1,4,2,3,0,1,7,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,458,        switch (roundingMethod) {,1,0,0,1,3,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,460,            if (sign == -1) {,1,1,0,1,3,1,0,0,1,6,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,461,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",3,0,0,0,4,0,5,0,1,4,82,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,463,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",3,0,0,0,4,0,5,0,1,4,81,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,465,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,467,"            unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",3,0,0,0,4,0,5,0,1,4,82,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,468,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,470,            if (sign == -1) {,1,1,0,1,3,1,0,0,1,6,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,471,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",3,0,0,0,4,0,5,0,1,4,81,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,473,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",3,0,0,0,4,0,5,0,1,4,82,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,475,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,477,"            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);",3,0,0,0,2,0,3,0,1,4,66,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,478,            double fraction = unscaled - FastMath.floor(unscaled);,2,1,0,1,2,1,3,0,0,6,54,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,479,            if (fraction > 0.5) {,1,1,0,1,3,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,480,                unscaled = FastMath.ceil(unscaled);,1,0,0,1,2,0,3,0,1,5,35,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,482,                unscaled = FastMath.floor(unscaled);,1,0,0,1,2,0,3,0,1,5,36,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,484,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,487,            double fraction = unscaled - FastMath.floor(unscaled);,2,1,0,1,2,1,3,0,0,6,54,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,488,            if (fraction > 0.5) {,1,1,0,1,3,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,489,                unscaled = FastMath.ceil(unscaled);,1,0,0,1,2,0,3,0,1,5,35,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,490,            } else if (fraction < 0.5) {,1,1,0,1,4,2,0,0,0,5,28,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,491,                unscaled = FastMath.floor(unscaled);,1,0,0,1,2,0,3,0,1,5,36,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,494,                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math,0,3,0,1,4,1,6,0,0,5,57,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,496,                    unscaled = FastMath.floor(unscaled);,1,0,0,1,2,0,3,0,1,5,36,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,498,                    unscaled = FastMath.ceil(unscaled);,1,0,0,1,2,0,3,0,1,5,35,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,501,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,504,"            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);",3,0,0,0,2,0,3,0,1,4,66,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,505,            double fraction = unscaled - FastMath.floor(unscaled);,2,1,0,1,2,1,3,0,0,6,54,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,506,            if (fraction >= 0.5) {,1,1,0,1,3,1,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,507,                unscaled = FastMath.ceil(unscaled);,1,0,0,1,2,0,3,0,1,5,35,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,509,                unscaled = FastMath.floor(unscaled);,1,0,0,1,2,0,3,0,1,5,36,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,511,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,514,            if (unscaled != FastMath.floor(unscaled)) {,1,1,0,2,5,1,3,0,0,6,43,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,515,                throw new MathArithmeticException();,0,0,0,1,2,2,0,1,1,5,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,519,"            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));",3,0,0,0,4,0,5,0,1,4,82,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,520,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,522,"            throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,",2,0,0,0,1,2,0,1,1,5,80,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,533,        return unscaled;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Precision,4,553,        return x + originalDelta - x;,3,2,0,0,0,1,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3795,    private static class lnMant {,1,0,0,0,1,3,0,0,2,4,29,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3809,                LN_MANT = FastMathLiteralArrays.loadLnMant();,1,0,0,1,2,0,2,0,1,5,45,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3811,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3762,    private static class ExpFracTable {,1,0,0,0,1,3,0,0,2,4,35,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3788,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,1,0,0,1,2,0,2,0,1,5,56,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3789,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,1,0,0,1,2,0,2,0,1,5,56,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3791,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3723,    private static class ExpIntTable {,1,0,0,0,1,3,0,0,2,4,34,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3755,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,1,0,0,1,2,0,2,0,1,5,54,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3756,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,1,0,0,1,2,0,2,0,1,5,54,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,4,3758,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,48,"        super(hyperplane, remainingRegion);",2,0,0,0,2,1,0,0,1,4,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,49,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,63,"        super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));",0,0,0,1,10,1,7,0,2,5,81,3,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,64,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,82,        final Line line = (Line) getHyperplane();,1,0,0,1,4,1,1,2,2,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,83,        final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();,1,0,0,2,8,1,2,3,2,7,75,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,84,        final List<Segment> segments = new ArrayList<Segment>();,1,0,0,1,2,2,0,4,2,6,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,86,        for (final Interval interval : list) {,2,0,0,1,3,2,0,1,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,87,            final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));,1,0,0,3,6,2,4,2,2,7,69,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,88,            final Vector2D end   = line.toSpace(new Vector1D(interval.getSup()));,1,0,0,3,6,2,4,2,2,7,69,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,89,"            segments.add(new Segment(start, end, line));",3,0,0,0,4,1,2,1,1,6,44,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,90,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,92,        return segments;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,123,        Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));,1,0,0,2,6,0,6,1,0,5,79,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,125,        if (includeEndPoints) {,1,0,0,1,3,1,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,126,            return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;,7,3,0,2,6,1,0,0,0,5,79,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,128,            return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;,7,3,0,2,6,1,0,0,0,5,77,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,148,"        return new SubLine(hyperplane, remainingRegion);",2,0,0,0,2,2,0,1,1,5,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,155,        final Line    thisLine  = (Line) getHyperplane();,1,0,0,1,4,1,1,2,2,7,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,156,        final Line    otherLine = (Line) hyperplane;,2,0,0,1,2,1,0,2,1,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,157,        final Vector2D crossing  = thisLine.intersection(otherLine);,1,0,0,1,2,1,3,1,1,7,60,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,159,        if (crossing == null) {,1,1,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,161,            final double global = otherLine.getOffset(thisLine);,1,0,0,1,2,2,3,0,1,6,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,162,            return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);,8,2,0,2,6,1,0,0,1,6,88,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,166,        final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;,1,2,0,2,6,2,6,0,1,7,84,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,167,        final Vector1D x = thisLine.toSubSpace(crossing);,1,0,0,1,2,1,3,1,1,7,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,168,"        return getRemainingRegion().side(new OrientedPoint(x, direct));",2,0,0,1,6,2,2,1,2,7,63,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,176,        final Line    thisLine  = (Line) getHyperplane();,1,0,0,1,4,1,1,2,2,7,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,177,        final Line    otherLine = (Line) hyperplane;,2,0,0,1,2,1,0,2,1,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,178,        final Vector2D crossing  = thisLine.intersection(otherLine);,1,0,0,1,2,1,3,1,1,7,60,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,180,        if (crossing == null) {,1,1,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,182,            final double global = otherLine.getOffset(thisLine);,1,0,0,1,2,2,3,0,1,6,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,183,            return (global < -1.0e-10) ?,1,1,0,1,2,1,0,0,1,6,28,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,189,        final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;,1,2,0,2,6,2,6,0,1,7,84,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,190,        final Vector1D x      = thisLine.toSubSpace(crossing);,1,0,0,1,2,1,3,1,1,7,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,191,"        final SubHyperplane<Euclidean1D> subPlus  = new OrientedPoint(x, !direct).wholeHyperplane();",3,0,0,1,4,2,1,3,3,7,92,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,192,"        final SubHyperplane<Euclidean1D> subMinus = new OrientedPoint(x,  direct).wholeHyperplane();",3,0,0,1,4,2,1,3,2,7,92,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,194,        final BSPTree<Euclidean1D> splitTree = getRemainingRegion().getTree(false).split(subMinus);,1,0,0,1,6,1,4,2,3,7,91,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,195,        final BSPTree<Euclidean1D> plusTree  = getRemainingRegion().isEmpty(splitTree.getPlus()) ?,1,0,0,2,6,1,4,2,2,7,90,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,199,        final BSPTree<Euclidean1D> minusTree = getRemainingRegion().isEmpty(splitTree.getMinus()) ?,1,0,0,2,6,1,4,2,2,7,91,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,204,"        return new SplitSubHyperplane<Euclidean2D>(new SubLine(thisLine.copySelf(), new IntervalsSet(plusTree)),",1,0,0,1,7,4,2,4,3,7,104,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,4,65,"        return buildNew(hyperplane, remainingRegion);",0,0,0,0,2,1,3,0,1,4,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,4,88,        return remainingRegion.getSize();,0,0,0,1,2,1,2,0,0,4,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,4,94,"        AbstractSubHyperplane<S, T> o = (AbstractSubHyperplane<S, T>) other;",2,0,0,0,2,0,0,6,0,3,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,4,95,"        return buildNew(hyperplane,",0,0,0,0,1,1,2,0,1,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,4,110,        final Hyperplane<S> tHyperplane = transform.apply(hyperplane);,1,0,0,1,2,1,3,2,1,7,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,4,111,        final BSPTree<T> tTree =,1,0,0,0,0,1,0,2,1,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,4,113,"        return buildNew(tHyperplane, remainingRegion.buildNew(tTree));",0,0,0,1,4,1,5,0,1,5,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,4,125,        if (node.getCut() == null) {,0,1,0,2,5,1,2,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,4,126,            return new BSPTree<T>(node.getAttribute());,0,0,0,2,4,2,2,2,1,6,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,4,130,        BoundaryAttribute<T> attribute =,1,0,0,0,0,0,0,2,0,2,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,4,132,        if (attribute != null) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,4,133,            final SubHyperplane<T> tPO = (attribute.getPlusOutside() == null) ?,1,1,0,2,4,1,2,2,1,8,67,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,4,135,            final SubHyperplane<T> tPI = (attribute.getPlusInside() == null) ?,1,1,0,2,4,1,2,2,1,8,66,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,4,137,"            attribute = new BoundaryAttribute<T>(tPO, tPI);",3,0,0,0,2,1,0,2,2,5,47,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,4,140,"        return new BSPTree<T>(transform.apply(node.getCut(), hyperplane, transformed),",0,0,0,1,5,2,6,2,1,6,78,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,4,155,        return remainingRegion.isEmpty();,0,0,0,1,2,1,2,0,0,4,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,4,36,"public abstract class AbstractSubHyperplane<S extends Space, T extends Space>",3,0,0,0,0,5,0,2,2,4,77,1,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,79,    public Vector2D(double[] v) throws DimensionMismatchException {,3,0,0,1,5,3,0,0,1,5,63,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,80,        if (v.length != 2) {,2,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,81,"            throw new DimensionMismatchException(v.length, 2);",2,0,0,0,2,2,0,1,1,5,50,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,83,        this.x = v[0];,1,0,1,0,2,1,0,0,1,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,84,        this.y = v[1];,1,0,1,0,2,1,0,0,1,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,85,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,93,"    public Vector2D(double a, Vector2D u) {",3,0,0,0,3,2,0,1,1,5,39,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,94,        this.x = a * u.x;,4,1,0,0,0,1,0,0,1,4,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,95,        this.y = a * u.y;,4,1,0,0,0,1,0,0,1,4,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,96,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,106,"    public Vector2D(double a1, Vector2D u1, double a2, Vector2D u2) {",5,0,0,0,3,3,0,2,1,5,65,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,107,        this.x = a1 * u1.x + a2 * u2.x;,7,3,0,0,0,1,0,0,1,4,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,108,        this.y = a1 * u1.y + a2 * u2.y;,7,3,0,0,0,1,0,0,1,4,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,109,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,122,"                   double a3, Vector2D u3) {",2,0,0,0,2,1,0,1,0,4,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,123,        this.x = a1 * u1.x + a2 * u2.x + a3 * u3.x;,10,5,0,0,0,1,0,0,1,4,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,124,        this.y = a1 * u1.y + a2 * u2.y + a3 * u3.y;,10,5,0,0,0,1,0,0,1,4,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,125,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,140,"                   double a3, Vector2D u3, double a4, Vector2D u4) {",4,0,0,0,2,2,0,2,0,4,49,3,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,141,        this.x = a1 * u1.x + a2 * u2.x + a3 * u3.x + a4 * u4.x;,13,7,0,0,0,1,0,0,1,4,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,142,        this.y = a1 * u1.y + a2 * u2.y + a3 * u3.y + a4 * u4.y;,13,7,0,0,0,1,0,0,1,4,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,143,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,166,"        return new double[] { x, y };",2,0,0,0,4,3,0,0,0,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,171,        return Euclidean2D.getInstance();,0,0,0,1,2,1,2,0,0,4,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,176,        return ZERO;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,181,        return FastMath.abs(x) + FastMath.abs(y);,0,1,0,1,4,1,6,0,0,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,186,        return FastMath.sqrt (x * x + y * y);,4,3,0,1,2,1,2,0,0,6,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,191,        return x * x + y * y;,4,3,0,0,0,1,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,196,"        return FastMath.max(FastMath.abs(x), FastMath.abs(y));",0,0,0,1,6,1,8,0,0,4,54,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,201,        Vector2D v2 = (Vector2D) v;,2,0,0,1,2,0,0,2,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,202,"        return new Vector2D(x + v2.getX(), y + v2.getY());",2,2,0,1,6,2,4,1,1,8,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,207,        Vector2D v2 = (Vector2D) v;,2,0,0,1,2,0,0,2,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,208,"        return new Vector2D(x + factor * v2.getX(), y + factor * v2.getY());",4,4,0,1,6,2,4,1,1,8,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,213,        Vector2D p3 = (Vector2D) p;,2,0,0,1,2,0,0,2,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,214,"        return new Vector2D(x - p3.x, y - p3.y);",6,2,0,0,2,2,0,1,1,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,219,        Vector2D v2 = (Vector2D) v;,2,0,0,1,2,0,0,2,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,220,"        return new Vector2D(x - factor * v2.getX(), y - factor * v2.getY());",4,4,0,1,6,2,4,1,1,8,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,225,        double s = getNorm();,1,0,0,1,2,1,1,0,1,6,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,226,        if (s == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,227,            throw new MathArithmeticException(LocalizedFormats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR);,2,0,0,1,2,2,0,1,1,6,88,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,229,        return scalarMultiply(1 / s);,1,1,0,1,2,1,1,0,1,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,233,"        return new Vector2D(-x, -y);",2,0,0,0,2,2,0,1,3,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,238,"        return new Vector2D(a * x, a * y);",4,2,0,0,2,2,0,1,1,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,243,        return Double.isNaN(x) || Double.isNaN(y);,0,1,0,1,4,1,6,0,0,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,248,        return !isNaN() && (Double.isInfinite(x) || Double.isInfinite(y));,0,2,0,2,8,1,7,0,2,6,66,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,253,        Vector2D p3 = (Vector2D) p;,2,0,0,1,2,0,0,2,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,254,        final double dx = FastMath.abs(p3.x - x);,4,1,0,1,2,2,2,0,1,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,255,        final double dy = FastMath.abs(p3.y - y);,4,1,0,1,2,2,2,0,1,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,256,        return dx + dy;,2,1,0,0,0,1,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,261,        Vector2D p3 = (Vector2D) p;,2,0,0,1,2,0,0,2,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,262,        final double dx = p3.x - x;,4,1,0,0,0,2,0,0,1,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,263,        final double dy = p3.y - y;,4,1,0,0,0,2,0,0,1,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,264,        return FastMath.sqrt(dx * dx + dy * dy);,4,3,0,1,2,1,2,0,0,6,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,269,        Vector2D p3 = (Vector2D) p;,2,0,0,1,2,0,0,2,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,270,        final double dx = FastMath.abs(p3.x - x);,4,1,0,1,2,2,2,0,1,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,271,        final double dy = FastMath.abs(p3.y - y);,4,1,0,1,2,2,2,0,1,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,272,"        return FastMath.max(dx, dy);",0,0,0,0,2,1,4,0,0,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,277,        Vector2D p3 = (Vector2D) p;,2,0,0,1,2,0,0,2,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,278,        final double dx = p3.x - x;,4,1,0,0,0,2,0,0,1,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,279,        final double dy = p3.y - y;,4,1,0,0,0,2,0,0,1,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,280,        return dx * dx + dy * dy;,4,3,0,0,0,1,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,285,        final Vector2D v2 = (Vector2D) v;,2,0,0,1,2,1,0,2,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,286,        return x * v2.x + y * v2.y;,6,3,0,0,0,1,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,298,        return p1.distance(p2);,0,0,0,1,2,1,3,0,0,4,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,310,        return p1.distanceInf(p2);,0,0,0,1,2,1,3,0,0,4,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,322,        return p1.distanceSq(p2);,0,0,0,1,2,1,3,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,347,        if (this == other) {,1,1,0,1,3,2,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,348,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,351,        if (other instanceof Vector2D) {,1,0,0,1,3,2,0,1,0,5,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,352,            final Vector2D rhs = (Vector2D)other;,2,0,0,1,2,1,0,2,1,6,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,353,            if (rhs.isNaN()) {,0,0,0,2,5,1,2,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,354,                return this.isNaN();,0,0,0,1,2,2,1,0,0,4,20,9,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,357,            return (x == rhs.x) && (y == rhs.y);,6,3,0,1,4,1,0,0,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,359,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,371,        if (isNaN()) {,0,0,0,2,5,1,1,0,1,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,372,            return 542;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,374,        return 122 * (76 * MathUtils.hash(x) +  MathUtils.hash(y));,0,3,0,2,6,1,6,0,0,5,59,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,382,        return Vector2DFormat.getInstance().format(this);,0,0,0,1,4,2,3,0,0,4,49,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,387,        return new Vector2DFormat(format).format(this);,1,0,0,1,4,3,1,1,1,7,47,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,34,public class Vector2D implements Vector<Euclidean2D> {,1,0,0,0,1,3,0,2,1,5,54,1,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/SubHyperplane,4,104,                                  final SubHyperplane<U> minus) {,1,0,0,0,2,1,0,2,1,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/SubHyperplane,4,105,            this.plus  = plus;,2,0,0,0,0,1,0,0,1,3,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/SubHyperplane,4,106,            this.minus = minus;,2,0,0,0,0,1,0,0,1,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/SubHyperplane,4,107,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/SubHyperplane,4,113,            return plus;,1,0,0,0,0,1,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/SubHyperplane,4,120,            return minus;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,89,"    public Line(final Vector2D p, final double angle) {",3,0,0,0,3,4,0,1,3,5,51,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,90,"        reset(p, angle);",0,0,0,0,2,0,3,0,1,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,91,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,99,"    private Line(final double angle, final double cos, final double sin, final double originOffset) {",5,0,0,0,3,9,0,0,5,4,97,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,100,        this.angle        = angle;,2,0,0,0,0,1,0,0,1,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,101,        this.cos          = cos;,2,0,0,0,0,1,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,102,        this.sin          = sin;,2,0,0,0,0,1,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,103,        this.originOffset = originOffset;,2,0,0,0,0,1,0,0,1,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,104,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,111,    public Line(final Line line) {,2,0,0,1,3,2,0,1,2,6,30,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,112,"        angle        = MathUtils.normalizeAngle(line.angle, FastMath.PI);",5,0,0,0,2,0,2,0,1,4,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,113,        cos          = FastMath.cos(angle);,1,0,0,1,2,0,3,0,1,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,114,        sin          = FastMath.sin(angle);,1,0,0,1,2,0,3,0,1,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,115,        originOffset = line.originOffset;,3,0,0,0,0,0,0,0,1,2,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,116,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,62,"public class Line implements Hyperplane<Euclidean2D>, Embedding<Euclidean2D, Euclidean1D> {",1,0,0,0,1,3,0,5,1,5,91,1,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,120,        return new Line(this);,0,0,0,1,2,3,0,1,1,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,133,            angle        = 0.0;,1,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,134,            cos          = 1.0;,1,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,135,            sin          = 0.0;,1,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,136,            originOffset = p1.getY();,1,0,0,1,2,0,2,0,1,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,150,"        this.angle   = MathUtils.normalizeAngle(alpha, FastMath.PI);",3,0,0,0,2,1,3,0,1,5,60,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,151,        cos          = FastMath.cos(this.angle);,2,0,0,1,2,1,2,0,1,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,152,        sin          = FastMath.sin(this.angle);,2,0,0,1,2,1,2,0,1,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,153,        originOffset = cos * p.getY() - sin * p.getX();,3,3,0,1,4,0,4,0,1,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,154,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,159,        if (angle < FastMath.PI) {,3,1,0,1,3,1,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,160,            angle += FastMath.PI;,3,0,0,0,0,0,0,0,1,2,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,162,            angle -= FastMath.PI;,3,0,0,0,0,0,0,0,1,2,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,164,        cos          = -cos;,2,0,0,0,0,0,0,0,2,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,165,        sin          = -sin;,2,0,0,0,0,0,0,0,2,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,166,        originOffset = -originOffset;,2,0,0,0,0,0,0,0,2,2,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,167,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,175,"        return new Line((angle < FastMath.PI) ? (angle + FastMath.PI) : (angle - FastMath.PI),",9,3,0,1,7,2,0,1,1,7,86,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,187,        final double abscissa = ((Vector1D) point).getX();,2,0,0,2,6,2,1,1,1,7,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,188,"        return new Vector2D(abscissa * cos - originOffset * sin,",4,3,0,0,1,2,0,1,1,6,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,202,"        return new Vector2D((cos * other.originOffset - other.cos * originOffset) / d,",7,4,0,1,3,2,0,1,1,7,78,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,208,"        return new SubLine(this, new IntervalsSet());",0,0,0,1,4,4,0,2,2,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,216,        return new PolygonsSet();,0,0,0,1,2,2,0,1,1,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,230,        return originOffset +,1,1,0,0,0,1,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,236,        Vector2D p2 = (Vector2D) point;,2,0,0,1,2,0,0,2,0,4,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,237,        return sin * p2.getX() - cos * p2.getY() + originOffset;,3,4,0,1,4,1,4,0,0,6,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,242,        final Line otherL = (Line) other;,2,0,0,1,2,1,0,2,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,243,        return (sin * otherL.sin + cos * otherL.cos) >= 0.0;,6,4,0,1,2,1,0,0,0,5,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,253,        final double x       = abscissa.getX();,1,0,0,1,2,2,2,0,1,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,254,        final double dOffset = offset - originOffset;,3,1,0,0,0,2,0,0,1,4,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,255,"        return new Vector2D(x * cos + dOffset * sin, x * sin - dOffset * cos);",8,6,0,0,2,2,0,1,1,6,70,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,263,        return FastMath.abs(getOffset(p)) < 1.0e-10;,0,1,0,2,4,1,4,0,1,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,276,        return FastMath.abs(getOffset(p));,0,0,0,2,4,1,4,0,1,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,285,        return FastMath.abs(sin * line.cos - cos * line.sin) < 1.0e-10;,6,4,0,1,2,1,2,0,0,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,292,        originOffset = cos * p.getY() - sin * p.getX();,3,3,0,1,4,0,4,0,1,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,293,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,299,"        return MathUtils.normalizeAngle(angle, FastMath.PI);",2,0,0,0,2,1,3,0,0,4,52,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,306,"        this.angle = MathUtils.normalizeAngle(angle, FastMath.PI);",3,0,0,0,2,1,3,0,1,5,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,307,        cos        = FastMath.cos(this.angle);,2,0,0,1,2,1,2,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,308,        sin        = FastMath.sin(this.angle);,2,0,0,1,2,1,2,0,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,309,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,315,        return originOffset;,1,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,322,        originOffset = offset;,2,0,0,0,0,0,0,0,1,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,323,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,340,        return new LineTransform(transform);,1,0,0,1,2,2,0,1,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,75,"    public Vector1D(double a, Vector1D u) {",3,0,0,0,3,2,0,1,1,5,39,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,76,        this.x = a * u.x;,4,1,0,0,0,1,0,0,1,4,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,77,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,87,"    public Vector1D(double a1, Vector1D u1, double a2, Vector1D u2) {",5,0,0,0,3,3,0,2,1,5,65,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,88,        this.x = a1 * u1.x + a2 * u2.x;,7,3,0,0,0,1,0,0,1,4,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,89,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,102,"                   double a3, Vector1D u3) {",2,0,0,0,2,1,0,1,0,4,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,103,        this.x = a1 * u1.x + a2 * u2.x + a3 * u3.x;,10,5,0,0,0,1,0,0,1,4,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,104,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,119,"                   double a3, Vector1D u3, double a4, Vector1D u4) {",4,0,0,0,2,2,0,2,0,4,49,3,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,120,        this.x = a1 * u1.x + a2 * u2.x + a3 * u3.x + a4 * u4.x;,13,7,0,0,0,1,0,0,1,4,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,121,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,133,        return Euclidean1D.getInstance();,0,0,0,1,2,1,2,0,0,4,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,138,        return ZERO;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,143,        return FastMath.abs(x);,0,0,0,1,2,1,3,0,0,4,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,148,        return FastMath.abs(x);,0,0,0,1,2,1,3,0,0,4,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,153,        return x * x;,2,1,0,0,0,1,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,158,        return FastMath.abs(x);,0,0,0,1,2,1,3,0,0,4,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,163,        Vector1D v1 = (Vector1D) v;,2,0,0,1,2,0,0,2,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,164,        return new Vector1D(x + v1.getX());,1,1,0,2,4,2,2,1,1,8,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,169,        Vector1D v1 = (Vector1D) v;,2,0,0,1,2,0,0,2,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,170,        return new Vector1D(x + factor * v1.getX());,2,2,0,2,4,2,2,1,1,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,175,        Vector1D p3 = (Vector1D) p;,2,0,0,1,2,0,0,2,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,176,        return new Vector1D(x - p3.x);,3,1,0,1,2,2,0,1,1,7,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,181,        Vector1D v1 = (Vector1D) v;,2,0,0,1,2,0,0,2,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,182,        return new Vector1D(x - factor * v1.getX());,2,2,0,2,4,2,2,1,1,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,187,        double s = getNorm();,1,0,0,1,2,1,1,0,1,6,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,188,        if (s == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,189,            throw new MathArithmeticException(LocalizedFormats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR);,2,0,0,1,2,2,0,1,1,6,88,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,191,        return scalarMultiply(1 / s);,1,1,0,1,2,1,1,0,1,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,195,        return new Vector1D(-x);,1,0,0,1,2,2,0,1,2,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,200,        return new Vector1D(a * x);,2,1,0,1,2,2,0,1,1,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,205,        return Double.isNaN(x);,0,0,0,1,2,1,3,0,0,4,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,210,        return !isNaN() && Double.isInfinite(x);,0,1,0,1,4,1,4,0,2,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,215,        Vector1D p3 = (Vector1D) p;,2,0,0,1,2,0,0,2,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,216,        final double dx = FastMath.abs(p3.x - x);,4,1,0,1,2,2,2,0,1,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,217,        return dx;,1,0,0,0,0,1,0,0,0,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,222,        Vector1D p3 = (Vector1D) p;,2,0,0,1,2,0,0,2,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,223,        final double dx = p3.x - x;,4,1,0,0,0,2,0,0,1,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,224,        return FastMath.abs(dx);,0,0,0,1,2,1,3,0,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,229,        Vector1D p3 = (Vector1D) p;,2,0,0,1,2,0,0,2,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,230,        final double dx = FastMath.abs(p3.x - x);,4,1,0,1,2,2,2,0,1,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,231,        return dx;,1,0,0,0,0,1,0,0,0,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,236,        Vector1D p3 = (Vector1D) p;,2,0,0,1,2,0,0,2,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,237,        final double dx = p3.x - x;,4,1,0,0,0,2,0,0,1,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,238,        return dx * dx;,2,1,0,0,0,1,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,243,        final Vector1D v1 = (Vector1D) v;,2,0,0,1,2,1,0,2,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,244,        return x * v1.x;,3,1,0,0,0,1,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,256,        return p1.distance(p2);,0,0,0,1,2,1,3,0,0,4,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,268,        return p1.distanceInf(p2);,0,0,0,1,2,1,3,0,0,4,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,280,        return p1.distanceSq(p2);,0,0,0,1,2,1,3,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,305,        if (this == other) {,1,1,0,1,3,2,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,306,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,309,        if (other instanceof Vector1D) {,1,0,0,1,3,2,0,1,0,5,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,310,            final Vector1D rhs = (Vector1D)other;,2,0,0,1,2,1,0,2,1,6,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,311,            if (rhs.isNaN()) {,0,0,0,2,5,1,2,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,312,                return this.isNaN();,0,0,0,1,2,2,1,0,0,4,20,9,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,315,            return x == rhs.x;,3,1,0,0,0,1,0,0,0,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,317,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,329,        if (isNaN()) {,0,0,0,2,5,1,1,0,1,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,330,            return 7785;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,332,        return 997 * MathUtils.hash(x);,0,1,0,1,2,1,3,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,340,        return Vector1DFormat.getInstance().format(this);,0,0,0,1,4,2,3,0,0,4,49,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,345,        return new Vector1DFormat(format).format(this);,1,0,0,1,4,3,1,1,1,7,47,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,33,public class Vector1D implements Vector<Euclidean1D> {,1,0,0,0,1,3,0,2,1,5,54,1,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,51,    protected AbstractRegion() {,1,0,0,1,3,1,0,0,1,5,28,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,52,        tree = new BSPTree<S>(Boolean.TRUE);,3,0,0,1,2,1,0,2,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,53,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,90,    protected AbstractRegion(final Collection<SubHyperplane<S>> boundary) {,2,0,0,1,3,2,0,3,2,6,71,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,92,        if (boundary.size() == 0) {,0,1,0,2,5,1,2,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,95,            tree = new BSPTree<S>(Boolean.TRUE);,3,0,0,1,2,1,0,2,2,6,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,102,            final TreeSet<SubHyperplane<S>> ordered = new TreeSet<SubHyperplane<S>>(new Comparator<SubHyperplane<S>>() {,1,0,0,1,4,3,0,9,3,6,108,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,109,            ordered.addAll(boundary);,0,0,0,1,2,0,3,0,0,3,25,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,112,            tree = new BSPTree<S>();,1,0,0,1,2,1,0,2,2,6,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,113,"            insertCuts(tree, ordered);",0,0,0,0,2,0,3,0,1,3,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,116,            tree.visit(new BSPTreeVisitor<S>() {,0,0,0,1,4,1,2,2,1,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,136,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,142,    public AbstractRegion(final Hyperplane<S>[] hyperplanes) {,2,0,0,1,5,2,0,2,2,6,58,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,143,        if ((hyperplanes == null) || (hyperplanes.length == 0)) {,3,3,0,2,7,1,0,0,0,5,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,144,            tree = new BSPTree<S>(Boolean.FALSE);,3,0,0,1,2,1,0,2,2,6,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,148,            tree = hyperplanes[0].wholeSpace().getTree(false);,1,0,1,1,6,0,2,0,2,6,50,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,151,            BSPTree<S> node = tree;,2,0,0,0,0,0,0,2,0,2,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,152,            node.setAttribute(Boolean.TRUE);,2,0,0,1,2,0,2,0,0,4,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,153,            for (final Hyperplane<S> hyperplane : hyperplanes) {,2,0,0,1,3,2,0,2,1,6,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,154,                if (node.insertCut(hyperplane)) {,0,0,0,2,5,1,3,0,0,4,33,9,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,155,                    node.setAttribute(null);,0,0,0,1,2,0,2,0,0,3,24,11,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,156,                    node.getPlus().setAttribute(Boolean.FALSE);,2,0,0,1,4,0,3,0,0,4,43,11,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,157,                    node = node.getMinus();,1,0,0,1,2,0,2,0,1,5,23,10,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,158,                    node.setAttribute(Boolean.TRUE);,2,0,0,1,2,0,2,0,0,4,32,11,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,164,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,177,        final Iterator<SubHyperplane<S>> iterator = boundary.iterator();,1,0,0,1,2,1,2,3,1,7,64,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,180,        Hyperplane<S> inserted = null;,1,0,0,0,0,0,0,2,0,2,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,181,        while ((inserted == null) && iterator.hasNext()) {,1,2,0,2,7,1,2,0,0,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,182,            inserted = iterator.next().getHyperplane();,1,0,0,1,4,0,3,0,1,5,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,183,            if (!node.insertCut(inserted.copySelf())) {,0,0,0,3,7,1,4,0,1,5,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,184,                inserted = null;,1,0,0,0,0,0,0,0,1,2,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,188,        if (!iterator.hasNext()) {,0,0,0,2,5,1,2,0,1,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,189,            return;,0,0,0,0,0,1,0,0,1,2,7,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,193,        final ArrayList<SubHyperplane<S>> plusList  = new ArrayList<SubHyperplane<S>>();,1,0,0,1,2,2,0,6,2,6,80,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,194,        final ArrayList<SubHyperplane<S>> minusList = new ArrayList<SubHyperplane<S>>();,1,0,0,1,2,2,0,6,2,6,80,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,195,        while (iterator.hasNext()) {,0,0,0,2,5,1,2,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,196,            final SubHyperplane<S> other = iterator.next();,1,0,0,1,2,1,2,2,1,7,47,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,197,            switch (other.side(inserted)) {,0,0,0,2,5,1,3,0,0,4,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,199,                plusList.add(other);,0,0,0,1,2,0,3,0,0,3,20,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,200,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,202,                minusList.add(other);,0,0,0,1,2,0,3,0,0,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,203,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,205,                final SubHyperplane.SplitSubHyperplane<S> split = other.split(inserted);,3,0,0,1,2,1,3,1,1,7,72,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,206,                plusList.add(split.getPlus());,0,0,0,2,4,0,4,0,0,3,30,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,207,                minusList.add(split.getMinus());,0,0,0,2,4,0,4,0,0,3,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,208,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,212,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,215,"        insertCuts(node.getPlus(),  plusList);",0,0,0,1,4,0,4,0,1,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,216,"        insertCuts(node.getMinus(), minusList);",0,0,0,1,4,0,4,0,1,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,218,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,222,        return buildNew(tree.copySelf());,0,0,0,2,4,1,3,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,227,        return isEmpty(tree);,0,0,0,1,2,1,2,0,1,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,237,        if (node.getCut() == null) {,0,1,0,2,5,1,2,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,239,            return !((Boolean) node.getAttribute());,0,0,0,2,6,1,2,1,1,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,243,        return isEmpty(node.getMinus()) && isEmpty(node.getPlus());,0,1,0,2,8,1,6,0,2,6,59,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,249,"        return new RegionFactory<S>().difference(region, this).isEmpty();",0,0,0,1,6,3,3,2,1,6,65,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,254,"        return checkPoint(tree, point);",0,0,0,0,2,1,3,0,1,4,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,265,        final BSPTree<S> cell = node.getCell(point);,1,0,0,1,2,1,3,2,1,7,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,266,        if (cell.getCut() == null) {,0,1,0,2,5,1,2,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,268,            return ((Boolean) cell.getAttribute()) ? Location.INSIDE : Location.OUTSIDE;,4,0,0,2,6,1,2,1,0,6,76,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,272,"        final Location minusCode = checkPoint(cell.getMinus(), point);",1,0,0,1,4,1,4,1,2,7,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,273,"        final Location plusCode  = checkPoint(cell.getPlus(),  point);",1,0,0,1,4,1,4,1,2,7,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,274,        return (minusCode == plusCode) ? minusCode : Location.BOUNDARY;,5,1,0,1,2,1,0,0,0,5,63,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,280,        if (includeBoundaryAttributes && (tree.getCut() != null) && (tree.getAttribute() == null)) {,1,3,0,3,11,1,4,0,0,6,92,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,282,            tree.visit(new BoundaryBuilder<S>());,0,0,0,2,4,1,2,2,1,6,37,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,284,        return tree;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,405,        final BoundarySizeVisitor<S> visitor = new BoundarySizeVisitor<S>();,1,0,0,1,2,2,0,4,2,6,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,406,        getTree(true).visit(visitor);,0,0,0,1,4,0,3,0,2,4,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,407,        return visitor.getSize();,0,0,0,1,2,1,2,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,412,        if (barycenter == null) {,1,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,413,            computeGeometricalProperties();,0,0,0,1,2,0,1,0,1,4,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,415,        return size;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,422,        this.size = size;,2,0,0,0,0,1,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,423,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,427,        if (barycenter == null) {,1,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,428,            computeGeometricalProperties();,0,0,0,1,2,0,1,0,1,4,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,430,        return barycenter;,1,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,437,        this.barycenter = barycenter;,2,0,0,0,0,1,0,0,1,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,438,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,447,        final Sides sides = new Sides();,1,0,0,1,2,2,0,2,2,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,448,"        recurseSides(tree, hyperplane.wholeHyperplane(), sides);",0,0,0,1,4,0,5,0,1,4,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,449,        return sides.plusFound() ?,0,0,0,1,2,1,2,0,0,4,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,471,        if (node.getCut() == null) {,0,1,0,2,5,1,2,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,472,            if ((Boolean) node.getAttribute()) {,0,0,0,2,7,1,2,1,0,5,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,474,                sides.rememberPlusFound();,0,0,0,1,2,0,2,0,0,3,26,9,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,475,                sides.rememberMinusFound();,0,0,0,1,2,0,2,0,0,3,27,9,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,477,            return;,0,0,0,0,0,1,0,0,1,2,7,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,480,        final Hyperplane<S> hyperplane = node.getCut().getHyperplane();,1,0,0,1,4,1,3,2,1,7,63,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,481,        switch (sub.side(hyperplane)) {,0,0,0,2,5,1,3,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,484,            if (node.getCut().side(sub.getHyperplane()) == Side.PLUS) {,2,1,0,3,9,1,5,0,0,6,59,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,485,                if (!isEmpty(node.getMinus())) {,0,0,0,3,7,1,3,0,2,5,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,486,                    sides.rememberPlusFound();,0,0,0,1,2,0,2,0,0,3,26,10,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,489,                if (!isEmpty(node.getMinus())) {,0,0,0,3,7,1,3,0,2,5,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,490,                    sides.rememberMinusFound();,0,0,0,1,2,0,2,0,0,3,27,10,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,493,            if (!(sides.plusFound() && sides.minusFound())) {,0,1,0,3,9,1,4,0,1,6,49,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,494,"                recurseSides(node.getPlus(), sub, sides);",0,0,0,1,4,0,5,0,1,4,41,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,499,            if (node.getCut().side(sub.getHyperplane()) == Side.PLUS) {,2,1,0,3,9,1,5,0,0,6,59,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,500,                if (!isEmpty(node.getPlus())) {,0,0,0,3,7,1,3,0,2,5,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,501,                    sides.rememberPlusFound();,0,0,0,1,2,0,2,0,0,3,26,10,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,504,                if (!isEmpty(node.getPlus())) {,0,0,0,3,7,1,3,0,2,5,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,505,                    sides.rememberMinusFound();,0,0,0,1,2,0,2,0,0,3,27,10,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,508,            if (!(sides.plusFound() && sides.minusFound())) {,0,1,0,3,9,1,4,0,1,6,49,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,509,"                recurseSides(node.getMinus(), sub, sides);",0,0,0,1,4,0,5,0,1,4,42,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,514,            final SubHyperplane.SplitSubHyperplane<S> split = sub.split(hyperplane);,3,0,0,1,2,1,3,1,1,7,72,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,517,"            recurseSides(node.getPlus(), split.getPlus(), sides);",0,0,0,1,6,0,6,0,1,4,53,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,520,            if (!(sides.plusFound() && sides.minusFound())) {,0,1,0,3,9,1,4,0,1,6,49,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,521,"                recurseSides(node.getMinus(), split.getMinus(), sides);",0,0,0,1,6,0,6,0,1,4,55,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,526,            if (node.getCut().getHyperplane().sameOrientationAs(sub.getHyperplane())) {,0,0,0,3,11,1,6,0,0,4,75,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,527,                if ((node.getPlus().getCut() != null) || ((Boolean) node.getPlus().getAttribute())) {,0,2,0,3,17,1,6,1,0,6,85,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,528,                    sides.rememberPlusFound();,0,0,0,1,2,0,2,0,0,3,26,10,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,530,                if ((node.getMinus().getCut() != null) || ((Boolean) node.getMinus().getAttribute())) {,0,2,0,3,17,1,6,1,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,531,                    sides.rememberMinusFound();,0,0,0,1,2,0,2,0,0,3,27,10,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,534,                if ((node.getPlus().getCut() != null) || ((Boolean) node.getPlus().getAttribute())) {,0,2,0,3,17,1,6,1,0,6,85,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,535,                    sides.rememberMinusFound();,0,0,0,1,2,0,2,0,0,3,27,10,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,537,                if ((node.getMinus().getCut() != null) || ((Boolean) node.getMinus().getAttribute())) {,0,2,0,3,17,1,6,1,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,538,                    sides.rememberPlusFound();,0,0,0,1,2,0,2,0,0,3,26,10,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,543,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,591,"        return recurseIntersection(tree, sub);",0,0,0,0,2,1,3,0,1,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,602,        if (node.getCut() == null) {,0,1,0,2,5,1,2,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,603,            return (Boolean) node.getAttribute() ? sub.copySelf() : null;,0,0,0,1,6,1,4,1,0,5,61,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,606,        final Hyperplane<S> hyperplane = node.getCut().getHyperplane();,1,0,0,1,4,1,3,2,1,7,63,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,607,        switch (sub.side(hyperplane)) {,0,0,0,2,5,1,3,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,609,"            return recurseIntersection(node.getPlus(), sub);",0,0,0,1,4,1,4,0,1,5,48,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,611,"            return recurseIntersection(node.getMinus(), sub);",0,0,0,1,4,1,4,0,1,5,49,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,613,            final SubHyperplane.SplitSubHyperplane<S> split = sub.split(hyperplane);,3,0,0,1,2,1,3,1,1,7,72,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,614,"            final SubHyperplane<S> plus  = recurseIntersection(node.getPlus(),  split.getPlus());",1,0,0,1,6,1,5,2,2,7,85,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,615,"            final SubHyperplane<S> minus = recurseIntersection(node.getMinus(), split.getMinus());",1,0,0,1,6,1,5,2,2,7,86,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,616,            if (plus == null) {,1,1,0,1,3,1,0,0,0,5,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,617,                return minus;,1,0,0,0,0,1,0,0,0,2,13,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,618,            } else if (minus == null) {,1,1,0,1,4,2,0,0,0,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,619,                return plus;,1,0,0,0,0,1,0,0,0,2,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,621,                return plus.reunite(minus);,0,0,0,1,2,1,3,0,0,4,27,9,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,624,"            return recurseIntersection(node.getPlus(),",0,0,0,1,3,1,3,0,1,5,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,641,"        return buildNew(recurseTransform(getTree(false), transform));",0,0,0,1,6,1,4,0,4,5,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,652,        if (node.getCut() == null) {,0,1,0,2,5,1,2,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,653,            return new BSPTree<S>(node.getAttribute());,0,0,0,2,4,2,2,2,1,6,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,656,        final SubHyperplane<S>  sub = node.getCut();,1,0,0,1,2,1,2,2,1,7,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,657,"        final SubHyperplane<S> tSub = ((AbstractSubHyperplane<S, T>) sub).applyTransform(transform);",2,0,0,1,6,1,2,5,1,7,92,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,658,        BoundaryAttribute<S> attribute = (BoundaryAttribute<S>) node.getAttribute();,1,0,0,1,4,0,2,4,0,5,76,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,659,        if (attribute != null) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,660,            final SubHyperplane<S> tPO = (attribute.getPlusOutside() == null) ?,1,1,0,2,4,1,2,2,1,8,67,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,662,            final SubHyperplane<S> tPI = (attribute.getPlusInside()  == null) ?,1,1,0,2,4,1,2,2,1,8,67,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,664,"            attribute = new BoundaryAttribute<S>(tPO, tPI);",3,0,0,0,2,1,0,2,2,5,47,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,667,"        return new BSPTree<S>(tSub,",1,0,0,0,1,2,0,2,1,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,38,"public abstract class AbstractRegion<S extends Space, T extends Space> implements Region<S> {",3,0,0,0,1,6,0,4,2,5,93,1,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,371,        public LineTransform(final AffineTransform transform) throws MathIllegalArgumentException {,3,0,0,1,3,3,0,1,2,6,91,3,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,373,            final double[] m = new double[6];,1,0,0,0,4,4,0,0,1,4,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,374,            transform.getMatrix(m);,0,0,0,1,2,0,3,0,0,3,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,375,            cXX = m[0];,1,0,1,0,2,0,0,0,1,4,11,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,376,            cXY = m[2];,1,0,1,0,2,0,0,0,1,4,11,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,377,            cX1 = m[4];,1,0,1,0,2,0,0,0,1,4,11,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,378,            cYX = m[1];,1,0,1,0,2,0,0,0,1,4,11,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,379,            cYY = m[3];,1,0,1,0,2,0,0,0,1,4,11,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,380,            cY1 = m[5];,1,0,1,0,2,0,0,0,1,4,11,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,382,            c1Y = cXY * cY1 - cYY * cX1;,5,3,0,0,0,0,0,0,1,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,383,            c1X = cXX * cY1 - cYX * cX1;,5,3,0,0,0,0,0,0,1,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,384,            c11 = cXX * cYY - cYX * cXY;,5,3,0,0,0,0,0,0,1,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,386,            if (FastMath.abs(c11) < 1.0e-20) {,0,1,0,2,5,1,3,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,387,                throw new MathIllegalArgumentException(LocalizedFormats.NON_INVERTIBLE_TRANSFORM);,2,0,0,1,2,2,0,1,1,6,82,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,390,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,394,            final Vector2D p2D = (Vector2D) point;,2,0,0,1,2,1,0,2,1,6,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,395,            final double  x   = p2D.getX();,1,0,0,1,2,2,2,0,1,6,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,396,            final double  y   = p2D.getY();,1,0,0,1,2,2,2,0,1,6,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,397,"            return new Vector2D(cXX * x + cXY * y + cX1,",5,4,0,0,1,2,0,1,1,6,44,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,403,            final Line   line    = (Line) hyperplane;,2,0,0,1,2,1,0,2,1,6,41,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,404,            final double rOffset = c1X * line.cos + c1Y * line.sin + c11 * line.originOffset;,10,5,0,0,0,2,0,0,1,4,81,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,405,            final double rCos    = cXX * line.cos + cXY * line.sin;,7,3,0,0,0,2,0,0,1,4,55,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,406,            final double rSin    = cYX * line.cos + cYY * line.sin;,7,3,0,0,0,2,0,0,1,4,55,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,407,            final double inv     = 1.0 / FastMath.sqrt(rSin * rSin + rCos * rCos);,5,4,0,1,2,2,2,0,1,7,70,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,408,"            return new Line(FastMath.PI + FastMath.atan2(-rSin, -rCos),",4,1,0,0,3,2,2,1,3,7,59,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,417,            final OrientedPoint op     = (OrientedPoint) sub.getHyperplane();,1,0,0,1,4,1,2,2,1,7,65,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,418,            final Line originalLine    = (Line) original;,2,0,0,1,2,1,0,2,1,6,45,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,419,            final Line transformedLine = (Line) transformed;,2,0,0,1,2,1,0,2,1,6,48,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,420,            final Vector1D newLoc =,1,0,0,0,0,1,0,1,1,4,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,422,"            return new OrientedPoint(newLoc, op.isDirect()).wholeHyperplane();",1,0,0,1,6,2,3,1,1,7,66,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,350,"    private static class LineTransform implements Transform<Euclidean2D, Euclidean1D> {",1,0,0,0,1,4,0,3,2,5,83,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,37,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,38,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,60,        super(tree);,1,0,0,1,2,1,0,0,1,5,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,61,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,83,        super(boundary);,1,0,0,1,2,1,0,0,1,5,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,84,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,95,            if (Double.isInfinite(upper) && (upper > 0)) {,1,2,0,2,7,1,3,0,0,6,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,97,                return new BSPTree<Euclidean1D>(Boolean.TRUE);,2,0,0,1,2,2,0,2,1,6,46,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,100,            final SubHyperplane<Euclidean1D> upperCut =,1,0,0,0,0,1,0,2,1,4,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,102,"            return new BSPTree<Euclidean1D>(upperCut,",1,0,0,0,1,2,0,2,1,5,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,111,"            return new BSPTree<Euclidean1D>(lowerCut,",1,0,0,0,1,2,0,2,1,5,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,133,        return new IntervalsSet(tree);,1,0,0,1,2,2,0,1,1,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,139,        if (getTree(false).getCut() == null) {,0,1,0,2,7,1,2,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,140,            setBarycenter(Vector1D.NaN);,2,0,0,1,2,0,1,0,1,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,141,            setSize(((Boolean) getTree(false).getAttribute()) ? Double.POSITIVE_INFINITY : 0);,2,0,0,3,10,0,3,1,3,6,82,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,143,            double size = 0.0;,1,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,144,            double sum = 0.0;,1,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,145,            for (final Interval interval : asList()) {,1,0,0,2,5,2,1,1,2,7,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,146,                size += interval.getSize();,1,0,0,1,2,0,2,0,1,5,27,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,147,                sum  += interval.getSize() * interval.getBarycenter();,1,1,0,1,4,0,4,0,1,6,54,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,148,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,149,            setSize(size);,0,0,0,1,2,0,2,0,1,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,150,            if (Double.isInfinite(size)) {,0,0,0,2,5,1,3,0,0,4,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,151,                setBarycenter(Vector1D.NaN);,2,0,0,1,2,0,1,0,1,5,28,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,152,            } else if (size >= Precision.SAFE_MIN) {,3,1,0,1,4,2,0,0,0,5,40,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,153,                setBarycenter(new Vector1D(sum / size));,2,1,0,2,4,1,1,1,2,8,40,9,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,155,                setBarycenter(((OrientedPoint) getTree(false).getCut().getHyperplane()).getLocation());,0,0,0,3,14,0,5,1,3,5,87,9,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,158,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,167,        BSPTree<Euclidean1D> node = getTree(false);,1,0,0,1,2,0,1,2,2,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,168,        double  inf  = Double.POSITIVE_INFINITY;,3,0,0,0,0,1,0,0,0,2,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,169,        while (node.getCut() != null) {,0,1,0,2,5,1,2,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,170,            final OrientedPoint op = (OrientedPoint) node.getCut().getHyperplane();,1,0,0,1,6,1,3,2,1,7,71,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,171,            inf  = op.getLocation().getX();,1,0,0,1,4,0,3,0,1,5,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,172,            node = op.isDirect() ? node.getMinus() : node.getPlus();,1,0,0,1,6,0,6,0,1,5,56,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,173,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,174,        return ((Boolean) node.getAttribute()) ? Double.NEGATIVE_INFINITY : inf;,3,0,0,2,6,1,2,1,0,6,72,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,184,        BSPTree<Euclidean1D> node = getTree(false);,1,0,0,1,2,0,1,2,2,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,185,        double  sup  = Double.NEGATIVE_INFINITY;,3,0,0,0,0,1,0,0,0,2,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,186,        while (node.getCut() != null) {,0,1,0,2,5,1,2,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,187,            final OrientedPoint op = (OrientedPoint) node.getCut().getHyperplane();,1,0,0,1,6,1,3,2,1,7,71,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,188,            sup  = op.getLocation().getX();,1,0,0,1,4,0,3,0,1,5,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,189,            node = op.isDirect() ? node.getPlus() : node.getMinus();,1,0,0,1,6,0,6,0,1,5,56,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,190,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,191,        return ((Boolean) node.getAttribute()) ? Double.POSITIVE_INFINITY : sup;,3,0,0,2,6,1,2,1,0,6,72,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,208,        final List<Interval> list = new ArrayList<Interval>();,1,0,0,1,2,2,0,4,2,6,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,209,"        recurseList(getTree(false), list,",0,0,0,1,3,0,3,0,3,4,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,211,        return list;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,224,        if (node.getCut() == null) {,0,1,0,2,5,1,2,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,225,            if ((Boolean) node.getAttribute()) {,0,0,0,2,7,1,2,1,0,5,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,227,"                list.add(new Interval(lower, upper));",2,0,0,0,4,1,2,1,1,6,37,9,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,230,            final OrientedPoint op  = (OrientedPoint) node.getCut().getHyperplane();,1,0,0,1,6,1,3,2,1,7,72,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,231,            final Vector1D       loc = op.getLocation();,1,0,0,1,2,1,2,1,1,7,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,232,            double              x   = loc.getX();,1,0,0,1,2,1,2,0,0,5,37,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,235,            final BSPTree<Euclidean1D> low  =,1,0,0,0,0,1,0,2,1,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,237,            final BSPTree<Euclidean1D> high =,1,0,0,0,0,1,0,2,1,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,240,"            recurseList(low, list, lower, x);",0,0,0,0,2,0,5,0,1,3,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,241,"            if ((checkPoint(low,  loc) == Location.INSIDE) &&",2,2,0,0,5,1,3,0,1,6,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,244,                x = list.remove(list.size() - 1).getInf();,1,1,0,2,6,0,5,0,1,6,42,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,246,"            recurseList(high, list, x, upper);",0,0,0,0,2,0,5,0,1,3,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,250,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,32,"public class IntervalsSet extends AbstractRegion<Euclidean1D, Euclidean1D> {",1,0,0,0,1,3,0,3,1,5,76,1,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,82,    public BSPTree() {,1,0,0,1,3,1,0,0,1,5,18,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,83,        cut       = null;,1,0,0,0,0,0,0,0,1,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,84,        plus      = null;,1,0,0,0,0,0,0,0,1,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,85,        minus     = null;,1,0,0,0,0,0,0,0,1,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,86,        parent    = null;,1,0,0,0,0,0,0,0,1,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,87,        attribute = null;,1,0,0,0,0,0,0,0,1,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,88,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,150,        if (cut != null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,151,            plus.parent  = null;,2,0,0,0,0,0,0,0,1,2,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,152,            minus.parent = null;,2,0,0,0,0,0,0,0,1,2,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,155,        final SubHyperplane<S> chopped = fitToCell(hyperplane.wholeHyperplane());,1,0,0,2,4,1,3,2,2,7,73,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,156,        if (chopped == null || chopped.isEmpty()) {,1,2,0,2,5,1,2,0,0,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,157,            cut          = null;,1,0,0,0,0,0,0,0,1,2,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,158,            plus         = null;,1,0,0,0,0,0,0,0,1,2,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,159,            minus        = null;,1,0,0,0,0,0,0,0,1,2,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,160,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,163,        cut          = chopped;,2,0,0,0,0,0,0,0,1,2,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,164,        plus         = new BSPTree<S>();,1,0,0,1,2,1,0,2,2,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,165,        plus.parent  = this;,2,0,0,0,0,1,0,0,1,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,166,        minus        = new BSPTree<S>();,1,0,0,1,2,1,0,2,2,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,167,        minus.parent = this;,2,0,0,0,0,1,0,0,1,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,168,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,181,        if (cut == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,182,            return new BSPTree<S>(attribute);,1,0,0,1,2,2,0,2,1,6,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,185,"        return new BSPTree<S>(cut.copySelf(), plus.copySelf(), minus.copySelf(),",0,0,0,1,7,2,6,2,1,6,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,194,        return cut;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,202,        return plus;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,210,        return minus;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,217,        return parent;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,225,        this.attribute = attribute;,2,0,0,0,0,1,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,226,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,235,        return attribute;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,242,        if (cut == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,243,            visitor.visitLeafNode(this);,0,0,0,1,2,1,2,0,0,4,28,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,245,            switch (visitor.visitOrder(this)) {,0,0,0,2,5,2,2,0,0,4,35,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,247,                plus.visit(visitor);,0,0,0,1,2,0,3,0,0,3,20,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,248,                minus.visit(visitor);,0,0,0,1,2,0,3,0,0,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,249,                visitor.visitInternalNode(this);,0,0,0,1,2,1,2,0,0,4,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,250,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,252,                plus.visit(visitor);,0,0,0,1,2,0,3,0,0,3,20,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,253,                visitor.visitInternalNode(this);,0,0,0,1,2,1,2,0,0,4,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,254,                minus.visit(visitor);,0,0,0,1,2,0,3,0,0,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,255,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,257,                minus.visit(visitor);,0,0,0,1,2,0,3,0,0,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,258,                plus.visit(visitor);,0,0,0,1,2,0,3,0,0,3,20,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,259,                visitor.visitInternalNode(this);,0,0,0,1,2,1,2,0,0,4,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,260,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,262,                minus.visit(visitor);,0,0,0,1,2,0,3,0,0,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,263,                visitor.visitInternalNode(this);,0,0,0,1,2,1,2,0,0,4,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,264,                plus.visit(visitor);,0,0,0,1,2,0,3,0,0,3,20,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,265,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,267,                visitor.visitInternalNode(this);,0,0,0,1,2,1,2,0,0,4,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,268,                plus.visit(visitor);,0,0,0,1,2,0,3,0,0,3,20,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,269,                minus.visit(visitor);,0,0,0,1,2,0,3,0,0,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,270,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,272,                visitor.visitInternalNode(this);,0,0,0,1,2,1,2,0,0,4,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,273,                minus.visit(visitor);,0,0,0,1,2,0,3,0,0,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,274,                plus.visit(visitor);,0,0,0,1,2,0,3,0,0,3,20,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,275,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,277,                throw new MathInternalError();,0,0,0,1,2,2,0,1,1,5,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,281,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,292,        SubHyperplane<S> s = sub;,2,0,0,0,0,0,0,2,0,2,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,293,        for (BSPTree<S> tree = this; tree.parent != null; tree = tree.parent) {,6,1,0,1,3,2,0,2,1,7,71,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,294,            if (tree == tree.parent.plus) {,4,1,0,1,3,1,0,0,0,5,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,295,                s = s.split(tree.parent.cut.getHyperplane()).getPlus();,4,0,0,2,6,0,4,0,1,5,55,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,297,                s = s.split(tree.parent.cut.getHyperplane()).getMinus();,4,0,0,2,6,0,4,0,1,5,56,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,300,        return s;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,312,        if (cut == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,313,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,317,        final double offset = cut.getHyperplane().getOffset(point);,1,0,0,1,4,2,4,0,1,6,59,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,319,        if (FastMath.abs(offset) < 1.0e-10) {,0,1,0,2,5,1,3,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,320,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,321,        } else if (offset <= 0) {,1,1,0,1,4,2,0,0,0,5,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,323,            return minus.getCell(point);,0,0,0,1,2,1,3,0,0,4,28,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,326,            return plus.getCell(point);,0,0,0,1,2,1,3,0,0,4,27,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,336,        if ((cut != null) && (plus.cut == null) && (minus.cut == null) &&,5,4,0,1,7,1,0,0,0,5,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,339,            attribute = (plus.attribute == null) ? minus.attribute : plus.attribute;,7,1,0,1,2,0,0,0,1,5,72,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,340,            cut       = null;,1,0,0,0,0,0,0,0,1,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,341,            plus      = null;,1,0,0,0,0,0,0,0,1,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,342,            minus     = null;,1,0,0,0,0,0,0,0,1,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,344,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,365,"        return merge(tree, leafMerger, null, false);",0,0,0,0,2,1,3,0,2,4,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,385,        if (cut == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,387,"            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);",0,0,0,0,2,2,5,0,1,4,67,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,388,        } else if (tree.cut == null) {,2,1,0,1,4,2,0,0,0,5,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,390,"            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);",0,0,0,0,2,2,5,0,1,4,68,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,393,            final BSPTree<S> merged = tree.split(cut);,1,0,0,1,2,1,3,2,1,7,42,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,394,            if (parentTree != null) {,1,1,0,1,3,1,0,0,0,5,25,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,395,                merged.parent = parentTree;,3,0,0,0,0,0,0,0,1,2,27,9,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,396,                if (isPlusChild) {,1,0,0,1,3,1,0,0,0,4,18,9,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,397,                    parentTree.plus = merged;,3,0,0,0,0,0,0,0,1,2,25,11,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,399,                    parentTree.minus = merged;,3,0,0,0,0,0,0,0,1,2,26,11,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,404,"            plus.merge(merged.plus, leafMerger, merged, true);",2,0,0,0,2,0,4,0,1,4,50,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,405,"            minus.merge(merged.minus, leafMerger, merged, false);",2,0,0,0,2,0,4,0,1,4,53,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,406,            merged.condense();,0,0,0,1,2,0,2,0,0,3,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,407,            if (merged.cut != null) {,2,1,0,1,3,1,0,0,0,5,25,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,408,                merged.cut =,2,0,0,0,0,0,0,0,1,2,12,9,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,412,            return merged;,1,0,0,0,0,1,0,0,0,2,14,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,489,        if (cut == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,490,"            return new BSPTree<S>(sub, copySelf(),",1,0,0,1,3,2,1,2,2,7,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,494,        final Hyperplane<S> cHyperplane = cut.getHyperplane();,1,0,0,1,2,1,2,2,1,7,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,495,        final Hyperplane<S> sHyperplane = sub.getHyperplane();,1,0,0,1,2,1,2,2,1,7,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,496,        switch (sub.side(cHyperplane)) {,0,0,0,2,5,1,3,0,0,4,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,499,            final BSPTree<S> split = plus.split(sub);,1,0,0,1,2,1,3,2,1,7,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,500,            if (cut.side(sHyperplane) == Side.PLUS) {,2,1,0,2,5,1,3,0,0,6,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,501,                split.plus =,2,0,0,0,0,0,0,0,1,2,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,503,                split.plus.condense();,2,0,0,1,2,0,1,0,0,4,22,9,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,504,                split.plus.parent = split;,4,0,0,0,0,0,0,0,1,2,26,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,506,                split.minus =,2,0,0,0,0,0,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,508,                split.minus.condense();,2,0,0,1,2,0,1,0,0,4,23,9,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,509,                split.minus.parent = split;,4,0,0,0,0,0,0,0,1,2,27,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,511,            return split;,1,0,0,0,0,1,0,0,0,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,515,            final BSPTree<S> split = minus.split(sub);,1,0,0,1,2,1,3,2,1,7,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,516,            if (cut.side(sHyperplane) == Side.PLUS) {,2,1,0,2,5,1,3,0,0,6,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,517,                split.plus =,2,0,0,0,0,0,0,0,1,2,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,519,                split.plus.condense();,2,0,0,1,2,0,1,0,0,4,22,9,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,520,                split.plus.parent = split;,4,0,0,0,0,0,0,0,1,2,26,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,522,                split.minus =,2,0,0,0,0,0,0,0,1,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,524,                split.minus.condense();,2,0,0,1,2,0,1,0,0,4,23,9,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,525,                split.minus.parent = split;,4,0,0,0,0,0,0,0,1,2,27,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,527,            return split;,1,0,0,0,0,1,0,0,0,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,531,            final SubHyperplane.SplitSubHyperplane<S> cutParts = cut.split(sHyperplane);,3,0,0,1,2,1,3,1,1,7,76,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,532,            final SubHyperplane.SplitSubHyperplane<S> subParts = sub.split(cHyperplane);,3,0,0,1,2,1,3,1,1,7,76,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,533,            final BSPTree<S> split =,1,0,0,0,0,1,0,2,1,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,536,            split.plus.cut          = cutParts.getPlus();,3,0,0,1,2,0,2,0,1,5,45,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,537,            split.minus.cut         = cutParts.getMinus();,3,0,0,1,2,0,2,0,1,5,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,538,            final BSPTree<S> tmp    = split.plus.minus;,4,0,0,0,0,1,0,2,1,4,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,539,            split.plus.minus        = split.minus.plus;,6,0,0,0,0,0,0,0,1,2,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,540,            split.plus.minus.parent = split.plus;,6,0,0,0,0,0,0,0,1,2,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,541,            split.minus.plus        = tmp;,4,0,0,0,0,0,0,0,1,2,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,542,            split.minus.plus.parent = split.minus;,6,0,0,0,0,0,0,0,1,2,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,543,            split.plus.condense();,2,0,0,1,2,0,1,0,0,4,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,544,            split.minus.condense();,2,0,0,1,2,0,1,0,0,4,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,545,            return split;,1,0,0,0,0,1,0,0,0,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,548,            return cHyperplane.sameOrientationAs(sHyperplane) ?,0,0,0,1,2,1,3,0,0,4,51,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,567,        parent = parentTree;,2,0,0,0,0,0,0,0,1,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,568,        if (parentTree != null) {,1,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,569,            if (isPlusChild) {,1,0,0,1,3,1,0,0,0,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,570,                parentTree.plus = this;,2,0,0,0,0,1,0,0,1,3,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,572,                parentTree.minus = this;,2,0,0,0,0,1,0,0,1,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,577,        if (cut != null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,580,            for (BSPTree<S> tree = this; tree.parent != null; tree = tree.parent) {,6,1,0,1,3,2,0,2,1,7,71,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,583,                final Hyperplane<S> hyperplane = tree.parent.cut.getHyperplane();,4,0,0,1,2,1,1,2,1,7,65,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,587,                if (tree == tree.parent.plus) {,4,1,0,1,3,1,0,0,0,5,31,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,588,                    cut = cut.split(hyperplane).getPlus();,1,0,0,1,4,0,4,0,1,5,38,10,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,589,                    plus.chopOffMinus(hyperplane);,0,0,0,1,2,0,3,0,0,3,30,11,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,590,                    minus.chopOffMinus(hyperplane);,0,0,0,1,2,0,3,0,0,3,31,11,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,592,                    cut = cut.split(hyperplane).getMinus();,1,0,0,1,4,0,4,0,1,5,39,10,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,593,                    plus.chopOffPlus(hyperplane);,0,0,0,1,2,0,3,0,0,3,29,11,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,594,                    minus.chopOffPlus(hyperplane);,0,0,0,1,2,0,3,0,0,3,30,11,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,601,            condense();,0,0,0,1,2,0,1,0,1,4,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,605,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,614,        if (cut != null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,615,            cut = cut.split(hyperplane).getPlus();,1,0,0,1,4,0,4,0,1,5,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,616,            plus.chopOffMinus(hyperplane);,0,0,0,1,2,0,3,0,0,3,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,617,            minus.chopOffMinus(hyperplane);,0,0,0,1,2,0,3,0,0,3,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,619,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,628,        if (cut != null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,629,            cut = cut.split(hyperplane).getMinus();,1,0,0,1,4,0,4,0,1,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,630,            plus.chopOffPlus(hyperplane);,0,0,0,1,2,0,3,0,0,3,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,631,            minus.chopOffPlus(hyperplane);,0,0,0,1,2,0,3,0,0,3,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,633,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/Region,4,50,    public static enum Location {,1,0,0,0,1,3,0,0,2,4,29,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/Region,4,52,"        INSIDE,",1,0,0,0,0,0,0,0,0,1,7,3,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/Region,4,55,"        OUTSIDE,",1,0,0,0,0,0,0,0,0,1,8,3,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/Region,4,58,        BOUNDARY;,1,0,0,0,0,0,0,0,0,1,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/SubOrientedPoint,4,45,        return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/SubOrientedPoint,4,52,"        return new SubOrientedPoint(hyperplane, remainingRegion);",2,0,0,0,2,2,0,1,1,5,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/SubOrientedPoint,4,58,        final double global = hyperplane.getOffset(((OrientedPoint) getHyperplane()).getLocation());,1,0,0,3,10,2,4,1,2,7,92,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/SubOrientedPoint,4,59,        return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);,8,2,0,2,6,1,0,0,1,6,88,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/SubOrientedPoint,4,65,        final double global = hyperplane.getOffset(((OrientedPoint) getHyperplane()).getLocation());,1,0,0,3,10,2,4,1,2,7,92,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/SubOrientedPoint,4,66,        return (global < -1.0e-10) ?,1,1,0,1,2,1,0,0,1,6,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint,4,53,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint,4,58,        final double delta = ((Vector1D) point).getX() - location.getX();,2,1,0,2,8,2,3,1,1,8,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint,4,59,        return direct ? delta : -delta;,3,0,0,0,0,1,0,0,1,3,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint,4,82,        return new IntervalsSet();,0,0,0,1,2,2,0,1,1,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint,4,87,        return !(direct ^ ((OrientedPoint) other).direct);,3,1,0,3,6,1,0,1,1,7,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint,4,94,        return location;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint,4,102,        return direct;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint,4,108,        direct = !direct;,2,0,0,0,0,0,0,0,2,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint,4,109,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint,4,29,public class OrientedPoint implements Hyperplane<Euclidean1D> {,1,0,0,0,1,3,0,2,1,5,63,1,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,64,"        this(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));",0,0,0,1,10,1,7,0,1,5,80,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,65,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,83,        final List<Interval> list = remainingRegion.asList();,1,0,0,1,2,1,2,2,1,7,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,84,        final List<Segment> segments = new ArrayList<Segment>();,1,0,0,1,2,2,0,4,2,6,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,86,        for (final Interval interval : list) {,2,0,0,1,3,2,0,1,1,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,87,            final Vector3D start = line.toSpace(new Vector1D(interval.getInf()));,1,0,0,3,6,2,4,2,2,7,69,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,88,            final Vector3D end   = line.toSpace(new Vector1D(interval.getSup()));,1,0,0,3,6,2,4,2,2,7,69,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,89,"            segments.add(new Segment(start, end, line));",3,0,0,0,4,1,2,1,1,6,44,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,90,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,92,        return segments;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,119,        Location loc2 = subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));,5,0,0,2,4,0,3,1,0,5,81,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,121,        if (includeEndPoints) {,1,0,0,1,3,1,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,122,            return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v1D : null;,7,3,0,2,6,1,0,0,0,5,79,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,124,            return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v1D : null;,7,3,0,2,6,1,0,0,0,5,77,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,107,    public Vector3D(double[] v) throws DimensionMismatchException {,3,0,0,1,5,3,0,0,1,5,63,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,108,        if (v.length != 3) {,2,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,109,"            throw new DimensionMismatchException(v.length, 3);",2,0,0,0,2,2,0,1,1,5,50,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,111,        this.x = v[0];,1,0,1,0,2,1,0,0,1,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,112,        this.y = v[1];,1,0,1,0,2,1,0,0,1,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,113,        this.z = v[2];,1,0,1,0,2,1,0,0,1,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,114,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,124,"    public Vector3D(double alpha, double delta) {",3,0,0,0,3,3,0,0,1,4,45,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,125,        double cosDelta = FastMath.cos(delta);,1,0,0,1,2,1,3,0,0,5,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,126,        this.x = FastMath.cos(alpha) * cosDelta;,2,1,0,1,2,1,3,0,1,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,127,        this.y = FastMath.sin(alpha) * cosDelta;,2,1,0,1,2,1,3,0,1,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,128,        this.z = FastMath.sin(delta);,1,0,0,1,2,1,3,0,1,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,129,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,168,"                    double a3, Vector3D u3) {",2,0,0,0,2,1,0,1,0,4,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,169,"        this.x = MathArrays.linearCombination(a1, u1.x, a2, u2.x, a3, u3.x);",7,0,0,0,2,1,5,0,1,5,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,170,"        this.y = MathArrays.linearCombination(a1, u1.y, a2, u2.y, a3, u3.y);",7,0,0,0,2,1,5,0,1,5,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,171,"        this.z = MathArrays.linearCombination(a1, u1.z, a2, u2.z, a3, u3.z);",7,0,0,0,2,1,5,0,1,5,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,172,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,187,"                    double a3, Vector3D u3, double a4, Vector3D u4) {",4,0,0,0,2,2,0,2,0,4,49,3,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,188,"        this.x = MathArrays.linearCombination(a1, u1.x, a2, u2.x, a3, u3.x, a4, u4.x);",9,0,0,0,2,1,6,0,1,5,78,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,189,"        this.y = MathArrays.linearCombination(a1, u1.y, a2, u2.y, a3, u3.y, a4, u4.y);",9,0,0,0,2,1,6,0,1,5,78,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,190,"        this.z = MathArrays.linearCombination(a1, u1.z, a2, u2.z, a3, u3.z, a4, u4.z);",9,0,0,0,2,1,6,0,1,5,78,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,191,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,198,        return x;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,206,        return y;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,214,        return z;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,222,"        return new double[] { x, y, z };",3,0,0,0,4,3,0,0,0,3,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,227,        return Euclidean3D.getInstance();,0,0,0,1,2,1,2,0,0,4,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,232,        return ZERO;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,237,        return FastMath.abs(x) + FastMath.abs(y) + FastMath.abs(z);,0,1,0,1,6,1,9,0,0,5,59,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,254,"        return FastMath.max(FastMath.max(FastMath.abs(x), FastMath.abs(y)), FastMath.abs(z));",0,0,0,1,10,1,13,0,0,4,85,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,262,"        return FastMath.atan2(y, x);",0,0,0,0,2,1,4,0,0,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,270,        return FastMath.asin(z / getNorm());,1,1,0,2,4,1,3,0,1,7,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,275,        final Vector3D v3 = (Vector3D) v;,2,0,0,1,2,1,0,2,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,276,"        return new Vector3D(x + v3.x, y + v3.y, z + v3.z);",9,3,0,0,2,2,0,1,1,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,281,"        return new Vector3D(1, this, factor, (Vector3D) v);",2,0,0,1,4,3,0,2,1,6,51,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,292,"        return new Vector3D(1, this, -factor, (Vector3D) v);",2,0,0,1,4,3,0,2,2,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,297,        double s = getNorm();,1,0,0,1,2,1,1,0,1,6,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,298,        if (s == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,299,            throw new MathArithmeticException(LocalizedFormats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR);,2,0,0,1,2,2,0,1,1,6,88,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,301,        return scalarMultiply(1 / s);,1,1,0,1,2,1,1,0,1,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,321,        double threshold = 0.6 * getNorm();,1,1,0,1,2,1,1,0,1,7,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,322,        if (threshold == 0) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,323,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,2,0,0,1,2,2,0,1,1,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,326,        if (FastMath.abs(x) <= threshold) {,1,1,0,2,5,1,3,0,0,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,327,            double inverse  = 1 / FastMath.sqrt(y * y + z * z);,5,4,0,1,2,1,2,0,0,6,51,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,328,"            return new Vector3D(0, inverse * z, -inverse * y);",4,2,0,0,2,2,0,1,2,6,50,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,329,        } else if (FastMath.abs(y) <= threshold) {,1,1,0,2,6,2,3,0,0,6,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,330,            double inverse  = 1 / FastMath.sqrt(x * x + z * z);,5,4,0,1,2,1,2,0,0,6,51,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,331,"            return new Vector3D(-inverse * z, 0, inverse * x);",4,2,0,0,2,2,0,1,2,6,50,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,333,        double inverse  = 1 / FastMath.sqrt(x * x + y * y);,5,4,0,1,2,1,2,0,0,6,51,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,334,"        return new Vector3D(inverse * y, -inverse * x, 0);",4,2,0,0,2,2,0,1,2,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,351,        double normProduct = v1.getNorm() * v2.getNorm();,1,1,0,1,4,1,4,0,0,6,49,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,352,        if (normProduct == 0) {,1,1,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,353,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,2,0,0,1,2,2,0,1,1,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,356,        double dot = v1.dotProduct(v2);,1,0,0,1,2,1,3,0,0,5,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,357,        double threshold = normProduct * 0.9999;,2,1,0,0,0,1,0,0,0,3,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,358,        if ((dot < -threshold) || (dot > threshold)) {,4,3,0,2,7,1,0,0,1,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,360,"            Vector3D v3 = crossProduct(v1, v2);",1,0,0,0,2,0,3,1,1,5,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,361,            if (dot >= 0) {,1,1,0,1,3,1,0,0,0,5,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,362,                return FastMath.asin(v3.getNorm() / normProduct);,1,1,0,2,4,1,4,0,0,6,49,9,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,364,            return FastMath.PI - FastMath.asin(v3.getNorm() / normProduct);,3,2,0,2,4,1,4,0,0,6,63,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,368,        return FastMath.acos(dot / normProduct);,2,1,0,1,2,1,2,0,0,6,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,374,"        return new Vector3D(-x, -y, -z);",3,0,0,0,2,2,0,1,4,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,379,"        return new Vector3D(a * x, a * y, a * z);",6,3,0,0,2,2,0,1,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,384,        return Double.isNaN(x) || Double.isNaN(y) || Double.isNaN(z);,0,1,0,1,6,1,9,0,0,5,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,389,        return !isNaN() && (Double.isInfinite(x) || Double.isInfinite(y) || Double.isInfinite(z));,0,2,0,2,10,1,10,0,2,6,90,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,414,        if (this == other) {,1,1,0,1,3,2,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,415,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,418,        if (other instanceof Vector3D) {,1,0,0,1,3,2,0,1,0,5,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,419,            final Vector3D rhs = (Vector3D)other;,2,0,0,1,2,1,0,2,1,6,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,420,            if (rhs.isNaN()) {,0,0,0,2,5,1,2,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,421,                return this.isNaN();,0,0,0,1,2,2,1,0,0,4,20,9,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,424,            return (x == rhs.x) && (y == rhs.y) && (z == rhs.z);,9,4,0,1,6,1,0,0,0,5,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,426,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,438,        if (isNaN()) {,0,0,0,2,5,1,1,0,1,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,439,            return 642;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,441,        return 643 * (164 * MathUtils.hash(x) +  3 * MathUtils.hash(y) +  MathUtils.hash(z));,0,5,0,2,8,1,9,0,0,5,85,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,462,        final Vector3D v3 = (Vector3D) v;,2,0,0,1,2,1,0,2,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,463,"        return new Vector3D(MathArrays.linearCombination(y, v3.z, -z, v3.y),",5,0,0,0,3,2,3,1,2,6,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,470,        final Vector3D v3 = (Vector3D) v;,2,0,0,1,2,1,0,2,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,471,        final double dx = FastMath.abs(v3.x - x);,4,1,0,1,2,2,2,0,1,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,472,        final double dy = FastMath.abs(v3.y - y);,4,1,0,1,2,2,2,0,1,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,473,        final double dz = FastMath.abs(v3.z - z);,4,1,0,1,2,2,2,0,1,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,474,        return dx + dy + dz;,3,1,0,0,0,1,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,479,        final Vector3D v3 = (Vector3D) v;,2,0,0,1,2,1,0,2,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,480,        final double dx = v3.x - x;,4,1,0,0,0,2,0,0,1,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,481,        final double dy = v3.y - y;,4,1,0,0,0,2,0,0,1,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,482,        final double dz = v3.z - z;,4,1,0,0,0,2,0,0,1,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,483,        return FastMath.sqrt(dx * dx + dy * dy + dz * dz);,6,5,0,1,2,1,2,0,0,6,50,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,488,        final Vector3D v3 = (Vector3D) v;,2,0,0,1,2,1,0,2,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,489,        final double dx = FastMath.abs(v3.x - x);,4,1,0,1,2,2,2,0,1,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,490,        final double dy = FastMath.abs(v3.y - y);,4,1,0,1,2,2,2,0,1,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,491,        final double dz = FastMath.abs(v3.z - z);,4,1,0,1,2,2,2,0,1,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,492,"        return FastMath.max(FastMath.max(dx, dy), dz);",0,0,0,0,4,1,7,0,0,3,46,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,497,        final Vector3D v3 = (Vector3D) v;,2,0,0,1,2,1,0,2,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,498,        final double dx = v3.x - x;,4,1,0,0,0,2,0,0,1,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,499,        final double dy = v3.y - y;,4,1,0,0,0,2,0,0,1,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,500,        final double dz = v3.z - z;,4,1,0,0,0,2,0,0,1,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,501,        return dx * dx + dy * dy + dz * dz;,6,5,0,0,0,1,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,510,        return v1.dotProduct(v2);,0,0,0,1,2,1,3,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,519,        return v1.crossProduct(v2);,0,0,0,1,2,1,3,0,0,4,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,531,        return v1.distance1(v2);,0,0,0,1,2,1,3,0,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,543,        return v1.distance(v2);,0,0,0,1,2,1,3,0,0,4,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,555,        return v1.distanceInf(v2);,0,0,0,1,2,1,3,0,0,4,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,567,        return v1.distanceSq(v2);,0,0,0,1,2,1,3,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,575,        return Vector3DFormat.getInstance().format(this);,0,0,0,1,4,2,3,0,0,4,49,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,580,        return new Vector3DFormat(format).format(this);,1,0,0,1,4,3,1,1,1,7,47,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,38,"public class Vector3D implements Serializable, Vector<Euclidean3D> {",1,0,0,0,1,3,0,3,1,5,68,1,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,63,    public Line(final Line line) {,2,0,0,1,3,2,0,1,2,6,30,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,64,        this.direction = line.direction;,3,0,0,0,0,1,0,0,1,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,65,        this.zero      = line.zero;,3,0,0,0,0,1,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,66,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,77,            throw new MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);,2,0,0,1,2,2,0,1,1,6,67,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,87,        final Line reverted = new Line(this);,1,0,0,1,2,3,0,2,2,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,88,        reverted.direction = reverted.direction.negate();,4,0,0,1,2,0,1,0,1,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,89,        return reverted;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,96,        return direction;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,103,        return zero;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,122,"        return new Vector3D(1.0, zero, abscissa, direction);",3,0,0,0,2,2,0,1,1,5,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,136,        return pointAt(((Vector1D) point).getX());,1,0,0,3,8,1,2,1,1,7,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,147,"        final double angle = Vector3D.angle(direction, line.direction);",3,0,0,0,2,2,3,0,1,5,63,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,148,        return ((angle < 1.0e-10) || (angle > (FastMath.PI - 1.0e-10))) && contains(line.zero);,6,5,0,3,10,1,1,0,1,7,87,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,175,"        final Vector3D normal = Vector3D.crossProduct(direction, line.direction);",3,0,0,0,2,1,3,1,1,6,73,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,176,        final double n = normal.getNorm();,1,0,0,1,2,2,2,0,1,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,177,        if (n < Precision.SAFE_MIN) {,3,1,0,1,3,1,0,0,0,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,179,            return distance(line.zero);,2,0,0,1,2,1,1,0,1,6,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,183,        final double offset = line.zero.subtract(zero).dotProduct(normal) / n;,4,1,0,1,4,2,4,0,1,7,70,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,185,        return FastMath.abs(offset);,0,0,0,1,2,1,3,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,199,            return zero;,1,0,0,0,0,1,0,0,0,2,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,224,"        return new SubLine(this, new IntervalsSet());",0,0,0,1,4,4,0,2,2,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,41,"public class Line implements Embedding<Euclidean3D, Euclidean1D> {",1,0,0,0,1,3,0,3,1,5,66,1,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,496,        switch (sub.side(cHyperplane)) {,0,0,0,2,5,1,3,0,0,4,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,245,            switch (visitor.visitOrder(this)) {,0,0,0,2,5,2,2,0,0,4,35,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,102,            final TreeSet<SubHyperplane<S>> ordered = new TreeSet<SubHyperplane<S>>(new Comparator<SubHyperplane<S>>() {,1,0,0,1,4,3,0,9,3,6,108,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,104,                    final double size1 = o1.getSize();,1,0,0,1,2,2,2,0,1,6,34,13,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,105,                    final double size2 = o2.getSize();,1,0,0,1,2,2,2,0,1,6,34,13,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,106,                    return (size2 < size1) ? -1 : ((o1 == o2) ? 0 : +1);,4,2,0,2,6,1,0,0,2,6,52,14,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTreeVisitor,4,54,    enum Order {,1,0,0,0,1,1,0,0,0,3,12,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTreeVisitor,4,58,"        PLUS_MINUS_SUB,",1,0,0,0,0,0,0,0,0,1,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTreeVisitor,4,63,"        PLUS_SUB_MINUS,",1,0,0,0,0,0,0,0,0,1,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTreeVisitor,4,68,"        MINUS_PLUS_SUB,",1,0,0,0,0,0,0,0,0,1,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTreeVisitor,4,73,"        MINUS_SUB_PLUS,",1,0,0,0,0,0,0,0,0,1,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTreeVisitor,4,78,"        SUB_PLUS_MINUS,",1,0,0,0,0,0,0,0,0,1,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTreeVisitor,4,83,        SUB_MINUS_PLUS;,1,0,0,0,0,0,0,0,0,1,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,556,        public Sides() {,1,0,0,1,3,1,0,0,1,5,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,557,            plusFound  = false;,1,0,0,0,0,0,0,0,2,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,558,            minusFound = false;,1,0,0,0,0,0,0,0,2,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,559,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,564,            plusFound = true;,1,0,0,0,0,0,0,0,2,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,565,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,571,            return plusFound;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,577,            minusFound = true;,1,0,0,0,0,0,0,0,2,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,578,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,584,            return minusFound;,1,0,0,0,0,1,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,293,    private static class BoundaryBuilder<S extends Space> implements BSPTreeVisitor<S> {,2,0,0,0,1,5,0,3,2,5,84,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,297,            return Order.PLUS_MINUS_SUB;,2,0,0,0,0,1,0,0,0,2,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,303,            SubHyperplane<S> plusOutside = null;,1,0,0,0,0,0,0,2,0,2,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,304,            SubHyperplane<S> plusInside  = null;,1,0,0,0,0,0,0,2,0,2,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,309,"            final SubHyperplane<S>[] plusChar = (SubHyperplane<S>[]) Array.newInstance(SubHyperplane.class, 2);",1,0,0,1,8,2,2,5,1,7,99,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,310,"            characterize(node.getPlus(), node.getCut().copySelf(), plusChar);",0,0,0,1,8,0,7,0,1,4,65,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,312,            if (plusChar[0] != null && !plusChar[0].isEmpty()) {,0,2,1,2,9,1,1,0,1,7,52,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,317,"                final SubHyperplane<S>[] minusChar = (SubHyperplane<S>[]) Array.newInstance(SubHyperplane.class, 2);",1,0,0,1,8,2,2,5,1,7,100,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,318,"                characterize(node.getMinus(), plusChar[0], minusChar);",0,0,1,1,6,0,4,0,1,5,54,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,319,                if (minusChar[1] != null && !minusChar[1].isEmpty()) {,0,2,1,2,9,1,1,0,1,7,54,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,322,                    plusOutside = minusChar[1];,1,0,1,0,2,0,0,0,1,4,27,9,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,326,            if (plusChar[1] != null && !plusChar[1].isEmpty()) {,0,2,1,2,9,1,1,0,1,7,52,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,331,"                final SubHyperplane<S>[] minusChar = (SubHyperplane<S>[]) Array.newInstance(SubHyperplane.class, 2);",1,0,0,1,8,2,2,5,1,7,100,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,332,"                characterize(node.getMinus(), plusChar[1], minusChar);",0,0,1,1,6,0,4,0,1,5,54,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,333,                if (minusChar[0] != null && !minusChar[0].isEmpty()) {,0,2,1,2,9,1,1,0,1,7,54,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,336,                    plusInside = minusChar[0];,1,0,1,0,2,0,0,0,1,4,26,9,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,341,"            node.setAttribute(new BoundaryAttribute<S>(plusOutside, plusInside));",2,0,0,0,4,1,2,2,1,6,69,6,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,343,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,347,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,364,            if (node.getCut() == null) {,0,1,0,2,5,1,2,0,0,5,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,366,                final boolean inside = (Boolean) node.getAttribute();,1,0,0,1,4,2,2,1,1,7,53,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,367,                if (inside) {,1,0,0,1,3,1,0,0,0,4,13,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,368,                    if (characterization[1] == null) {,0,1,1,1,5,1,0,0,0,5,34,9,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,369,                        characterization[1] = sub;,1,0,1,0,2,0,0,0,1,4,26,11,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,371,                        characterization[1] = characterization[1].reunite(sub);,0,0,1,1,6,0,2,0,1,5,55,11,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,374,                    if (characterization[0] == null) {,0,1,1,1,5,1,0,0,0,5,34,9,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,375,                        characterization[0] = sub;,1,0,1,0,2,0,0,0,1,4,26,11,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,377,                        characterization[0] = characterization[0].reunite(sub);,0,0,1,1,6,0,2,0,1,5,55,11,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,380,            } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,381,                final Hyperplane<S> hyperplane = node.getCut().getHyperplane();,1,0,0,1,4,1,3,2,1,7,63,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,382,                switch (sub.side(hyperplane)) {,0,0,0,2,5,1,3,0,0,4,31,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,384,"                    characterize(node.getPlus(), sub, characterization);",0,0,0,1,4,0,5,0,1,4,52,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,385,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,387,"                    characterize(node.getMinus(), sub, characterization);",0,0,0,1,4,0,5,0,1,4,53,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,388,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,390,                    final SubHyperplane.SplitSubHyperplane<S> split = sub.split(hyperplane);,3,0,0,1,2,1,3,1,1,7,72,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,391,"                    characterize(node.getPlus(),  split.getPlus(),  characterization);",0,0,0,1,6,0,6,0,1,4,66,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,392,"                    characterize(node.getMinus(), split.getMinus(), characterization);",0,0,0,1,6,0,6,0,1,4,66,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,393,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,396,                    throw new MathInternalError();,0,0,0,1,2,2,0,1,1,5,30,8,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,399,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,116,            tree.visit(new BSPTreeVisitor<S>() {,0,0,0,1,4,1,2,2,1,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,120,                    return Order.PLUS_SUB_MINUS;,2,0,0,0,0,1,0,0,0,2,28,13,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,125,                },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,129,                    node.setAttribute((node == node.getParent().getPlus()) ?,1,1,0,2,7,0,5,0,0,5,56,13,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,131,                },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,197,            switch (other.side(inserted)) {,0,0,0,2,5,1,3,0,0,4,31,7,0.0,0,0
