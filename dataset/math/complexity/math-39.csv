dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,other,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,244,    super(interpolator);,1,0,0,1,2,1,0,0,1,5,20,3,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,246,    if (interpolator.currentState == null) {,2,1,0,1,3,1,0,0,0,5,40,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,248,      yDotKLast = null;,1,0,0,0,0,0,0,0,1,2,17,6,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,249,      v         = null;,1,0,0,0,0,0,0,0,1,2,17,6,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,250,      vectorsInitialized = false;,1,0,0,0,0,0,0,0,2,2,27,6,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,273,  },0,0,0,0,1,0,0,0,0,1,1,2,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,278,    return new DormandPrince853StepInterpolator(this);,0,0,0,1,2,3,0,1,1,5,50,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,288,"    super.reinitialize(integrator, y, yDotK, forward, primaryMapper, secondaryMappers);",7,0,0,0,2,1,0,0,0,3,83,5,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,290,    final int dimension = currentState.length;,3,0,0,0,0,2,0,0,1,3,42,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,292,    yDotKLast = new double[3][];,1,0,0,0,4,2,0,0,1,4,28,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,293,    for (int k = 0; k < yDotKLast.length; ++k) {,5,1,0,1,3,2,0,0,1,6,44,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,294,      yDotKLast[k] = new double[dimension];,0,0,1,0,4,2,0,0,1,4,37,6,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,297,    v = new double[7][];,1,0,0,0,4,2,0,0,1,4,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,298,    for (int k = 0; k < v.length; ++k) {,5,1,0,1,3,2,0,0,1,6,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,299,      v[k]  = new double[dimension];,0,0,1,0,4,2,0,0,1,4,30,6,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,302,    vectorsInitialized = false;,1,0,0,0,0,0,0,0,2,2,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,304,  },0,0,0,0,1,0,0,0,0,1,1,2,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,309,    super.storeTime(t);,2,0,0,1,2,1,0,0,0,4,19,5,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,310,    vectorsInitialized = false;,1,0,0,0,0,0,0,0,2,2,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,311,  },0,0,0,0,1,0,0,0,0,1,1,2,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,407,    if (currentState == null) {,1,1,0,1,3,1,0,0,0,5,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,409,      return;,0,0,0,0,0,1,0,0,1,2,7,5,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,220,"    super(METHOD_NAME, true, STATIC_C, STATIC_A, STATIC_B,",4,0,0,0,1,1,0,0,2,4,54,3,0.03448,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,223,  },0,0,0,0,1,0,0,0,0,1,1,2,0.03448,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,231,    super();,0,0,0,1,2,1,0,0,1,4,8,3,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,232,    yDotKLast = null;,1,0,0,0,0,0,0,0,1,2,17,4,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,233,    v         = null;,1,0,0,0,0,0,0,0,1,2,17,4,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,234,    vectorsInitialized = false;,1,0,0,0,0,0,0,0,2,2,27,4,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,235,  },0,0,0,0,1,0,0,0,0,1,1,2,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,180,    private static final double[][] D = {,1,0,0,0,5,4,0,0,3,4,37,2,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,63,  private static final double[] STATIC_C = {,1,0,0,0,3,4,0,0,3,4,42,2,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,70,  private static final double[][] STATIC_A = {,1,0,0,0,5,4,0,0,3,4,44,2,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,137,  private static final double[] STATIC_B = {,1,0,0,0,3,4,0,0,3,4,42,2,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,247,    return 8;,0,0,0,0,0,1,0,0,0,1,9,2,0.03125,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3473,        if (a < b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.02703,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3474,            return a;,1,0,0,0,0,1,0,0,0,2,9,6,0.02703,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,236,              for (int i = 0; i < scale.length; ++i) {,5,1,0,1,3,2,0,0,1,6,40,12,0.02174,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,237,                scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]);,2,2,1,1,6,0,2,0,1,7,78,14,0.02174,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,115,"    super(name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);",5,0,0,0,2,1,0,0,1,4,76,3,0.01887,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,117,    this.fsal      = fsal;,2,0,0,0,0,1,0,0,1,3,22,4,0.01887,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,118,    this.c         = c;,2,0,0,0,0,1,0,0,1,3,19,4,0.01887,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,119,    this.a         = a;,2,0,0,0,0,1,0,0,1,3,19,4,0.01887,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,120,    this.b         = b;,2,0,0,0,0,1,0,0,1,3,19,4,0.01887,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,121,    this.prototype = prototype;,2,0,0,0,0,1,0,0,1,3,27,4,0.01887,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,123,    exp = -1.0 / getOrder();,1,1,0,1,2,0,1,0,3,6,24,4,0.01887,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,126,    setSafety(0.9);,0,0,0,1,2,0,1,0,1,4,15,4,0.01887,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,127,    setMinReduction(0.2);,0,0,0,1,2,0,1,0,1,4,21,4,0.01887,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,128,    setMaxGrowth(10.0);,0,0,0,1,2,0,1,0,1,4,19,4,0.01887,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,130,  },0,0,0,0,1,0,0,0,0,1,1,2,0.01887,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,110,    super(name);,1,0,0,1,2,1,0,0,1,5,12,3,0.01852,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,111,"    setStepSizeControl(minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);",0,0,0,0,2,0,5,0,1,3,83,4,0.01852,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,112,    resetInternalState();,0,0,0,1,2,0,1,0,1,4,21,4,0.01852,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,114,  },0,0,0,0,1,0,0,0,0,1,1,2,0.01852,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,157,      minStep     = FastMath.abs(minimalStep);,1,0,0,1,2,0,3,0,1,5,40,4,0.01852,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,158,      maxStep     = FastMath.abs(maximalStep);,1,0,0,1,2,0,3,0,1,5,40,4,0.01852,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,159,      initialStep = -1;,1,0,0,0,0,0,0,0,2,2,17,4,0.01852,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,161,      scalAbsoluteTolerance = absoluteTolerance;,2,0,0,0,0,0,0,0,1,2,42,4,0.01852,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,162,      scalRelativeTolerance = relativeTolerance;,2,0,0,0,0,0,0,0,1,2,42,4,0.01852,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,163,      vecAbsoluteTolerance  = null;,1,0,0,0,0,0,0,0,1,2,29,4,0.01852,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,164,      vecRelativeTolerance  = null;,1,0,0,0,0,0,0,0,1,2,29,4,0.01852,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,166,  },0,0,0,0,1,0,0,0,0,1,1,2,0.01852,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,827,            intVal = (int) -x;,2,0,0,1,2,1,0,0,2,5,18,6,0.01786,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,829,            if (intVal > 746) {,1,1,0,1,3,1,0,0,0,5,19,6,0.01786,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,837,            if (intVal > 709) {,1,1,0,1,3,1,0,0,0,5,19,6,0.01786,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,847,            if (intVal == 709) {,1,1,0,1,3,1,0,0,0,5,20,6,0.01786,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,857,            intVal++;,1,0,0,0,0,0,0,0,1,2,9,6,0.01786,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,859,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,5,1,0,0,2,0,0,0,1,4,71,6,0.01786,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,860,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,5,1,0,0,2,0,0,0,1,4,71,6,0.01786,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,862,            intVal = -intVal;,2,0,0,0,0,0,0,0,2,2,17,6,0.01786,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,98,            return primaryMapper.getDimension();,0,0,0,1,2,1,2,0,0,4,36,7,0.01786,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,258,    double yOnScale2 = 0;,1,0,0,0,0,1,0,0,0,2,21,5,0.01786,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,259,    double yDotOnScale2 = 0;,1,0,0,0,0,1,0,0,0,2,24,5,0.01786,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,260,    for (int j = 0; j < scale.length; ++j) {,5,1,0,1,3,2,0,0,1,6,40,4,0.01786,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,261,      ratio         = y0[j] / scale[j];,1,1,1,0,4,0,0,0,1,5,33,6,0.01786,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,262,      yOnScale2    += ratio * ratio;,3,1,0,0,0,0,0,0,1,3,30,6,0.01786,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,263,      ratio         = yDot0[j] / scale[j];,1,1,1,0,4,0,0,0,1,5,36,6,0.01786,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,264,      yDotOnScale2 += ratio * ratio;,3,1,0,0,0,0,0,0,1,3,30,6,0.01786,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,267,    double h = ((yOnScale2 < 1.0e-10) || (yDotOnScale2 < 1.0e-10)) ?,3,3,0,2,6,1,0,0,0,5,64,5,0.01786,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,269,    if (! forward) {,1,0,0,1,3,1,0,0,1,5,16,4,0.01786,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,274,    for (int j = 0; j < y0.length; ++j) {,5,1,0,1,3,2,0,0,1,6,37,4,0.01786,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,275,      y1[j] = y0[j] + h * yDot0[j];,1,2,1,0,6,0,0,0,1,5,29,6,0.01786,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,277,"    computeDerivatives(t0 + h, y1, yDot1);",2,1,0,0,2,0,3,0,1,5,38,4,0.01786,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,280,    double yDDotOnScale = 0;,1,0,0,0,0,1,0,0,0,2,24,5,0.01786,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,281,    for (int j = 0; j < scale.length; ++j) {,5,1,0,1,3,2,0,0,1,6,40,4,0.01786,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,282,      ratio         = (yDot1[j] - yDot0[j]) / scale[j];,1,2,1,1,8,0,0,0,1,6,49,6,0.01786,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,283,      yDDotOnScale += ratio * ratio;,3,1,0,0,0,0,0,0,1,3,30,6,0.01786,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,285,    yDDotOnScale = FastMath.sqrt(yDDotOnScale) / h;,2,1,0,1,2,0,3,0,1,6,47,4,0.01786,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,289,"    final double maxInv2 = FastMath.max(FastMath.sqrt(yDotOnScale2), yDDotOnScale);",1,0,0,1,4,2,6,0,1,6,79,4,0.01786,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,290,    final double h1 = (maxInv2 < 1.0e-15) ?,2,1,0,1,2,2,0,0,1,6,39,4,0.01786,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,293,"    h = FastMath.min(100.0 * FastMath.abs(h), h1);",1,1,0,1,4,0,6,0,1,6,46,4,0.01786,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,294,"    h = FastMath.max(h, 1.0e-12 * FastMath.abs(t0));  // avoids cancellation when computing t1 - t0",1,1,0,1,4,0,6,0,1,6,95,4,0.01786,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,295,    if (h < getMinStep()) {,1,1,0,2,5,1,1,0,1,7,23,4,0.01786,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,298,    if (h > getMaxStep()) {,1,1,0,2,5,1,1,0,1,7,23,4,0.01786,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,301,    if (! forward) {,1,0,0,1,3,1,0,0,1,5,16,4,0.01786,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,305,    return h;,1,0,0,0,0,1,0,0,0,2,9,4,0.01786,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,362,    return minStep;,1,0,0,0,0,1,0,0,0,2,15,4,0.01786,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,369,    return maxStep;,1,0,0,0,0,1,0,0,0,2,15,4,0.01786,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,218,        if (y.length != equations.getDimension()) {,2,1,0,2,5,1,2,0,0,6,43,4,0.01724,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,223,        final ExpandableStatefulODE expandableODE = new ExpandableStatefulODE(equations);,2,0,0,1,2,2,0,2,2,6,81,4,0.01724,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,224,        expandableODE.setTime(t0);,0,0,0,1,2,0,3,0,0,3,26,5,0.01724,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,225,        expandableODE.setPrimaryState(y0);,0,0,0,1,2,0,3,0,0,3,34,5,0.01724,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,228,"        integrate(expandableODE, t);",0,0,0,0,2,0,3,0,1,3,28,4,0.01724,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,233,        if (firstTime) {,1,0,0,1,3,1,0,0,0,4,16,8,0.01724,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,234,          final double[] scale = new double[mainSetDimension];,1,0,1,0,4,4,0,0,1,5,52,10,0.01724,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,235,          if (vecAbsoluteTolerance == null) {,1,1,0,1,3,1,0,0,0,5,35,10,0.01724,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,244,"          hNew = initializeStep(forward, getOrder(), scale,",1,0,0,1,3,0,4,0,3,5,49,10,0.01724,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,246,          firstTime = false;,1,0,0,0,0,0,0,0,2,2,18,10,0.01724,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,249,        stepSize = hNew;,2,0,0,0,0,0,0,0,1,2,16,8,0.01724,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,252,        for (int k = 1; k < stages; ++k) {,4,1,0,1,3,2,0,0,1,6,34,8,0.01724,1,1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,254,          for (int j = 0; j < y0.length; ++j) {,5,1,0,1,3,2,0,0,1,6,37,10,0.01724,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,255,            double sum = a[k-1][0] * yDotK[0][j];,2,2,1,0,8,1,0,0,0,5,37,13,0.01724,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,256,            for (int l = 1; l < k; ++l) {,4,1,0,1,3,2,0,0,1,6,29,12,0.01724,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,257,              sum += a[k-1][l] * yDotK[l][j];,2,2,1,0,8,0,0,0,1,5,31,14,0.01724,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,259,            yTmp[j] = y[j] + stepSize * sum;,2,2,1,0,4,0,0,0,1,5,32,12,0.01724,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,262,"          computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);",3,3,1,0,6,0,2,0,1,6,66,10,0.01724,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,266,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,116,"        primaryMapper.insertEquationData(primaryStateDot, yDot);",0,0,0,0,2,0,4,0,0,2,56,5,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,119,        for (final SecondaryComponent component : components) {,2,0,0,1,3,2,0,1,1,6,55,4,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,126,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,181,        currentState     = null;,1,0,0,0,0,0,0,0,1,2,24,6,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,182,        primaryMapper    = null;,1,0,0,0,0,0,0,0,1,2,24,6,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,183,        secondaryMappers = null;,1,0,0,0,0,0,0,0,1,2,24,6,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,184,        allocateInterpolatedArrays(-1);,0,0,0,1,2,0,1,0,2,4,31,6,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,248,    globalPreviousTime    = Double.NaN;,3,0,0,0,0,0,0,0,1,2,35,4,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,249,    globalCurrentTime     = Double.NaN;,3,0,0,0,0,0,0,0,1,2,35,4,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,250,    softPreviousTime      = Double.NaN;,3,0,0,0,0,0,0,0,1,2,35,4,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,251,    softCurrentTime       = Double.NaN;,3,0,0,0,0,0,0,0,1,2,35,4,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,252,    h                     = Double.NaN;,3,0,0,0,0,0,0,0,1,2,35,4,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,253,    interpolatedTime      = Double.NaN;,3,0,0,0,0,0,0,0,1,2,35,4,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,254,    currentState          = y;,2,0,0,0,0,0,0,0,1,2,26,4,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,255,    finalized             = false;,1,0,0,0,0,0,0,0,2,2,30,4,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,256,    this.forward          = isForward;,2,0,0,0,0,1,0,0,1,3,34,4,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,257,    this.dirtyState       = true;,1,0,0,0,0,1,0,0,2,3,29,4,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,258,    this.primaryMapper    = primary;,2,0,0,0,0,1,0,0,1,3,32,4,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,259,    this.secondaryMappers = secondary.clone();,1,0,0,1,2,1,2,0,1,6,42,4,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,260,    allocateInterpolatedArrays(y.length);,2,0,0,1,2,0,1,0,1,5,37,4,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,262,  },0,0,0,0,1,0,0,0,0,1,1,2,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,85,    super(interpolator);,1,0,0,1,2,1,0,0,1,5,20,3,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,87,    if (interpolator.currentState != null) {,2,1,0,1,3,1,0,0,0,5,40,4,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,97,      previousState = null;,1,0,0,0,0,0,0,0,1,2,21,6,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,98,      yDotK = null;,1,0,0,0,0,0,0,0,1,2,13,6,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,103,    integrator = null;,1,0,0,0,0,0,0,0,1,2,18,4,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,105,  },0,0,0,0,1,0,0,0,0,1,1,2,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,134,"    reinitialize(y, forward, primaryMapper, secondaryMappers);",0,0,0,0,2,0,5,0,1,3,58,4,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,135,    this.previousState = null;,1,0,0,0,0,1,0,0,1,3,26,4,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,136,    this.yDotK = yDotArray;,2,0,0,0,0,1,0,0,1,3,23,4,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,137,    this.integrator = rkIntegrator;,2,0,0,0,0,1,0,0,1,3,31,4,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,138,  },0,0,0,0,1,0,0,0,0,1,1,2,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,143,    previousState = currentState.clone();,1,0,0,1,2,0,2,0,1,5,37,4,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,144,    super.shift();,1,0,0,1,2,1,0,0,0,4,14,5,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,145,  },0,0,0,0,1,0,0,0,0,1,1,2,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,195,    setEquations(equations);,0,0,0,1,2,0,2,0,1,4,24,4,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,196,    final boolean forward = t > equations.getTime();,2,1,0,1,2,2,2,0,1,7,48,4,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,199,    final double[] y0  = equations.getCompleteState();,1,0,0,1,4,2,2,0,1,6,50,4,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,200,    final double[] y = y0.clone();,1,0,0,1,4,2,2,0,1,6,30,4,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,201,    final int stages = c.length + 1;,3,1,0,0,0,2,0,0,1,4,32,4,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,202,    final double[][] yDotK = new double[stages][y.length];,3,0,1,0,8,4,0,0,1,5,54,4,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,203,    final double[] yTmp    = y0.clone();,1,0,0,1,4,2,2,0,1,6,36,4,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,204,    final double[] yDotTmp = new double[y.length];,3,0,0,0,4,4,0,0,1,4,46,4,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,207,    final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy();,1,0,0,1,4,1,2,2,1,7,94,4,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,208,"    interpolator.reinitialize(this, yTmp, yDotK, forward,",0,0,0,0,1,1,5,0,0,3,53,5,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,210,    interpolator.storeTime(equations.getTime());,0,0,0,2,4,0,4,0,0,3,44,5,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,213,    stepStart         = equations.getTime();,1,0,0,1,2,0,2,0,1,5,40,4,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,214,    double  hNew      = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,215,    boolean firstTime = true;,1,0,0,0,0,1,0,0,1,3,25,5,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,216,"    initIntegration(equations.getTime(), y0, t);",0,0,0,1,4,0,5,0,1,4,44,4,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,219,    isLastStep = false;,1,0,0,0,0,0,0,0,2,2,19,4,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,222,      interpolator.shift();,0,0,0,1,2,0,2,0,0,3,21,7,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,225,      double error = 10;,1,0,0,0,0,1,0,0,0,2,18,7,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,226,      while (error >= 1.0) {,1,1,0,1,3,1,0,0,0,5,22,6,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,228,        if (firstTime || !fsal) {,2,1,0,1,3,1,0,0,1,6,25,8,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,230,"          computeDerivatives(stepStart, y, yDotK[0]);",0,0,1,0,4,0,3,0,1,4,43,10,0.01695,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,250,    if (initialStep > 0) {,1,1,0,1,3,1,0,0,0,5,22,4,0.01695,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3754,    private static class ExpFracTable {,1,0,0,0,1,3,0,0,2,4,35,2,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3766,            if (RECOMPUTE_TABLES_AT_RUNTIME) {,1,0,0,1,3,1,0,0,0,4,34,5,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3784,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,1,0,0,1,2,0,2,0,1,5,56,8,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3785,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,1,0,0,1,2,0,2,0,1,5,56,8,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3787,        },0,0,0,0,1,0,0,0,0,1,1,2,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3711,    private static class ExpIntTable {,1,0,0,0,1,3,0,0,2,4,34,2,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3722,            if (RECOMPUTE_TABLES_AT_RUNTIME) {,1,0,0,1,3,1,0,0,0,4,34,5,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3747,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,1,0,0,1,2,0,2,0,1,5,54,8,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3748,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,1,0,0,1,2,0,2,0,1,5,54,8,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3750,        },0,0,0,0,1,0,0,0,0,1,1,2,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,39,29,    private static final double[] EXP_INT_A = new double[] {,1,0,0,0,5,6,0,0,3,4,56,2,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,39,1535,    private static final double[] EXP_INT_B = new double[] {,1,0,0,0,5,6,0,0,3,4,56,2,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,39,3043,    private static final double[] EXP_FRAC_A = new double[] {,1,0,0,0,5,6,0,0,3,4,57,2,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,39,4074,    private static final double[] EXP_FRAC_B = new double[] {,1,0,0,0,5,6,0,0,3,4,57,2,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,39,5103,    private static final double[][] LN_MANT = new double[][] {,1,0,0,0,9,6,0,0,3,4,58,2,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,39,6142,        return EXP_INT_A;,1,0,0,0,0,1,0,0,0,2,17,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,39,6150,        return EXP_INT_B;,1,0,0,0,0,1,0,0,0,2,17,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,39,6158,        return EXP_FRAC_A;,1,0,0,0,0,1,0,0,0,2,18,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,39,6166,        return EXP_FRAC_B;,1,0,0,0,0,1,0,0,0,2,18,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,39,6174,        return LN_MANT;,1,0,0,0,0,1,0,0,0,2,15,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,826,        if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,882,        final int intFrac = (int) ((x - intVal) * 1024.0);,3,2,0,2,6,3,0,0,1,6,50,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,883,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,3,0,1,0,2,2,0,0,1,5,64,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,884,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,3,0,1,0,2,2,0,0,1,5,64,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,890,        final double epsilon = x - (intVal + intFrac / 1024.0);,4,3,0,1,2,2,0,0,1,6,55,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,899,        double z = 0.04168701738764507;,1,0,0,0,0,1,0,0,0,2,31,5,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,900,        z = z * epsilon + 0.1666666505023083;,3,2,0,0,0,0,0,0,1,3,37,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,901,        z = z * epsilon + 0.5000000000042687;,3,2,0,0,0,0,0,0,1,3,37,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,902,        z = z * epsilon + 1.0;,3,2,0,0,0,0,0,0,1,3,22,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,903,        z = z * epsilon + -3.940510424527919E-20;,3,2,0,0,0,0,0,0,2,3,41,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,910,        double tempA = intPartA * fracPartA;,3,1,0,0,0,1,0,0,0,3,36,5,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,911,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,7,5,0,0,0,1,0,0,0,3,82,5,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,917,        final double tempC = tempB + tempA;,3,1,0,0,0,2,0,0,1,4,35,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,919,        if (extra != 0.0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,920,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,10,7,0,0,0,0,0,0,1,3,63,6,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,925,        if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,931,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1106,        if (x==0) { // Handle special case of +0/-0,1,1,0,1,3,2,0,0,0,5,43,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1109,        long bits = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,39,5,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1112,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,3,4,0,2,5,1,0,0,0,5,50,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1123,        if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1132,        int exp = (int)(bits >> 52)-1023;,2,2,0,1,4,2,0,0,0,5,33,5,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1134,        if ((bits & 0x7ff0000000000000L) == 0) {,1,2,0,2,5,1,0,0,0,5,40,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1154,        if (exp == -1 || exp == 0) {,2,3,0,1,3,1,0,0,1,6,28,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1202,        double lnm[] = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,4,2,0,2,10,2,0,0,0,5,73,5,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1213,        double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,4,4,0,2,6,1,0,0,0,5,89,5,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1215,        double lnza = 0.0;,1,0,0,0,0,1,0,0,0,2,18,5,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1216,        double lnzb = 0.0;,1,0,0,0,0,1,0,0,0,2,18,5,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1218,        if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1220,            double tmp = epsilon * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,36,7,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1221,            double aa = epsilon + tmp - tmp;,4,2,0,0,0,1,0,0,0,3,32,7,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1222,            double ab = epsilon - aa;,3,1,0,0,0,1,0,0,0,3,25,7,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1223,            double xa = aa;,2,0,0,0,0,1,0,0,0,2,15,7,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1224,            double xb = ab;,2,0,0,0,0,1,0,0,0,2,15,7,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1227,            double numer = bits & 0x3ffffffffffL;,2,1,0,0,0,1,0,0,0,3,37,7,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1228,            double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,3,2,0,1,2,1,0,0,0,5,59,7,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1229,            aa = numer - xa*denom - xb * denom;,6,4,0,0,0,0,0,0,1,3,35,6,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1230,            xb += aa / denom;,3,1,0,0,0,0,0,0,1,3,17,6,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1233,            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];,3,1,1,0,4,1,0,0,0,5,57,7,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1234,            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];,3,1,1,0,4,1,0,0,0,5,57,7,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1236,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,5,2,0,1,3,2,0,0,1,6,55,6,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1238,                aa = ya * xa;,3,1,0,0,0,0,0,0,1,3,13,8,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1239,                ab = ya * xb + yb * xa + yb * xb;,7,5,0,0,0,0,0,0,1,3,33,8,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1241,                tmp = aa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,8,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1242,                ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,8,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1243,                yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,8,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1246,                aa = ya + LN_HI_PREC_COEF[i][0];,2,1,1,0,4,0,0,0,1,5,32,8,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1247,                ab = yb + LN_HI_PREC_COEF[i][1];,2,1,1,0,4,0,0,0,1,5,32,8,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1249,                tmp = aa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,8,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1250,                ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,8,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1251,                yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,8,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1255,            aa = ya * xa;,3,1,0,0,0,0,0,0,1,3,13,6,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1256,            ab = ya * xb + yb * xa + yb * xb;,7,5,0,0,0,0,0,0,1,3,33,6,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1264,            lnza = aa + ab;,3,1,0,0,0,0,0,0,1,3,15,6,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1265,            lnzb = -(lnza - aa - ab);,4,1,0,1,2,0,0,0,2,5,25,6,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1266,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1292,        double a = LN_2_A*exp;,3,1,0,0,0,1,0,0,0,3,22,5,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1293,        double b = 0.0;,1,0,0,0,0,1,0,0,0,2,15,5,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1294,        double c = a+lnm[0];,2,1,1,0,2,1,0,0,0,5,20,5,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1295,        double d = -(c-a-lnm[0]);,3,1,1,1,4,1,0,0,1,7,25,5,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1296,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1297,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1299,        c = a + lnza;,3,1,0,0,0,0,0,0,1,3,13,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1300,        d = -(c - a - lnza);,4,1,0,1,2,0,0,0,2,5,20,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1301,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1302,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1304,        c = a + LN_2_B*exp;,4,2,0,0,0,0,0,0,1,3,19,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1305,        d = -(c - a - LN_2_B*exp);,5,2,0,1,2,0,0,0,2,5,26,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1306,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1307,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1309,        c = a + lnm[1];,2,1,1,0,2,0,0,0,1,5,15,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1310,        d = -(c - a - lnm[1]);,3,1,1,1,4,0,0,0,2,6,22,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1311,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1312,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1314,        c = a + lnzb;,3,1,0,0,0,0,0,0,1,3,13,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1315,        d = -(c - a - lnzb);,4,1,0,1,2,0,0,0,2,5,20,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1316,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1317,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1319,        if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1320,            hiPrec[0] = a;,1,0,1,0,2,0,0,0,1,4,14,6,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1321,            hiPrec[1] = b;,1,0,1,0,2,0,0,0,1,4,14,6,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1324,        return a + b;,2,1,0,0,0,1,0,0,0,3,13,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1456,        if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1467,        if (y == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1479,        if (x == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1503,        if (y == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1517,        if (x < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1534,        if (y < 8e298 && y > -8e298) {,2,3,0,1,3,1,0,0,1,6,30,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1535,            double tmp1 = y * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,31,7,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1536,            ya = y + tmp1 - tmp1;,4,2,0,0,0,0,0,0,1,3,21,6,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1537,            yb = y - ya;,3,1,0,0,0,0,0,0,1,3,12,6,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1538,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1546,"        final double lores = log(x, lns);",1,0,0,0,2,2,3,0,2,5,33,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1547,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0,0,0,2,5,2,3,0,0,4,73,5,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1551,        double lna = lns[0];,1,0,1,0,2,1,0,0,0,4,20,5,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1552,        double lnb = lns[1];,1,0,1,0,2,1,0,0,0,4,20,5,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1555,        double tmp1 = lna * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,33,5,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1556,        double tmp2 = lna + tmp1 - tmp1;,4,2,0,0,0,1,0,0,0,3,32,5,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1557,        lnb += lna - tmp2;,3,1,0,0,0,0,0,0,1,3,18,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1558,        lna = tmp2;,2,0,0,0,0,0,0,0,1,2,11,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1561,        final double aa = lna * ya;,3,1,0,0,0,2,0,0,1,4,27,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1562,        final double ab = lna * yb + lnb * ya + lnb * yb;,7,5,0,0,0,2,0,0,1,4,49,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1564,        lna = aa+ab;,3,1,0,0,0,0,0,0,1,3,12,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1565,        lnb = -(lna - aa - ab);,4,1,0,1,2,0,0,0,2,5,23,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1567,        double z = 1.0 / 120.0;,1,1,0,0,0,1,0,0,0,3,23,5,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1568,        z = z * lnb + (1.0 / 24.0);,3,3,0,1,2,0,0,0,1,5,27,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1569,        z = z * lnb + (1.0 / 6.0);,3,3,0,1,2,0,0,0,1,5,26,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1570,        z = z * lnb + 0.5;,3,2,0,0,0,0,0,0,1,3,18,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1571,        z = z * lnb + 1.0;,3,2,0,0,0,0,0,0,1,3,18,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1572,        z = z * lnb;,3,1,0,0,0,0,0,0,1,3,12,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1574,"        final double result = exp(lna, z, null);",1,0,0,0,2,2,3,0,2,5,40,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1576,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3470,        if (a > b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3539,            return a;,1,0,0,0,0,1,0,0,0,2,9,6,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,80,public class FastMath {,1,0,0,0,1,2,0,0,1,4,23,1,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3791,    private static class lnMant {,1,0,0,0,1,3,0,0,2,4,29,2,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3796,            if (RECOMPUTE_TABLES_AT_RUNTIME) {,1,0,0,1,3,1,0,0,0,4,34,5,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3804,            } else if (LOAD_RESOURCES) {,1,0,0,1,4,2,0,0,0,4,28,6,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3807,                LN_MANT = FastMathLiteralArrays.loadLnMant();,1,0,0,1,2,0,2,0,1,5,45,8,0.01667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3809,        },0,0,0,0,1,0,0,0,0,1,1,2,0.01667,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,189,        evaluations.resetCount();,0,0,0,1,2,0,2,0,0,3,25,5,0.01667,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,191,        for (final EventState state : eventsStates) {,2,0,0,1,3,2,0,1,1,6,45,4,0.01667,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,195,        for (StepHandler handler : stepHandlers) {,2,0,0,1,3,1,0,1,0,5,42,4,0.01667,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,199,        setStateInitialized(false);,0,0,0,1,2,0,1,0,2,4,27,4,0.01667,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,201,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01667,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,207,        this.expandable = equations;,2,0,0,0,0,1,0,0,1,3,28,4,0.01667,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,208,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01667,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,264,        evaluations.incrementCount();,0,0,0,1,2,0,2,0,0,3,29,5,0.01667,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,265,"        expandable.computeDerivatives(t, y, yDot);",0,0,0,0,2,0,5,0,0,2,42,5,0.01667,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,276,        this.statesInitialized = stateInitialized;,2,0,0,0,0,1,0,0,1,3,42,4,0.01667,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,277,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01667,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,96,        if (components.isEmpty()) {,0,0,0,2,5,1,2,0,0,4,27,5,0.01667,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,114,"        primaryMapper.extractEquationData(y, primaryState);",0,0,0,0,2,0,4,0,0,2,51,5,0.01667,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,115,"        primary.computeDerivatives(t, primaryState, primaryStateDot);",0,0,0,0,2,0,5,0,0,2,61,5,0.01667,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,163,        final EquationsMapper[] mappers = new EquationsMapper[components.size()];,1,0,0,1,6,2,2,2,1,7,73,4,0.01667,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,164,        for (int i = 0; i < mappers.length; ++i) {,5,1,0,1,3,2,0,0,1,6,42,4,0.01667,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,167,        return mappers;,1,0,0,0,0,1,0,0,0,2,15,4,0.01667,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,285,        double[] completeState = new double[getTotalDimension()];,1,0,0,1,6,3,1,0,1,6,57,5,0.01667,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,288,"        primaryMapper.insertEquationData(primaryState, completeState);",0,0,0,0,2,0,4,0,0,2,62,5,0.01667,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,289,        for (final SecondaryComponent component : components) {,2,0,0,1,3,2,0,1,1,6,55,4,0.01667,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,293,        return completeState;,1,0,0,0,0,1,0,0,0,2,21,4,0.01667,0,0
defect4j,math,org/apache/commons/math/ode/EquationsMapper,39,92,        if (equationData.length != dimension) {,3,1,0,1,3,1,0,0,0,5,39,4,0.01667,0,0
defect4j,math,org/apache/commons/math/ode/EquationsMapper,39,95,"        System.arraycopy(equationData, 0, complete, firstIndex, dimension);",0,0,0,0,2,0,6,0,0,2,67,5,0.01667,0,0
defect4j,math,org/apache/commons/math/ode/EquationsMapper,39,96,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01667,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,171,  protected AbstractStepInterpolator(final AbstractStepInterpolator interpolator) {,2,0,0,1,3,2,0,1,2,6,81,2,0.01667,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,173,    globalPreviousTime = interpolator.globalPreviousTime;,3,0,0,0,0,0,0,0,1,2,53,4,0.01667,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,174,    globalCurrentTime  = interpolator.globalCurrentTime;,3,0,0,0,0,0,0,0,1,2,52,4,0.01667,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,175,    softPreviousTime   = interpolator.softPreviousTime;,3,0,0,0,0,0,0,0,1,2,51,4,0.01667,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,176,    softCurrentTime    = interpolator.softCurrentTime;,3,0,0,0,0,0,0,0,1,2,50,4,0.01667,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,177,    h                  = interpolator.h;,3,0,0,0,0,0,0,0,1,2,36,4,0.01667,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,178,    interpolatedTime   = interpolator.interpolatedTime;,3,0,0,0,0,0,0,0,1,2,51,4,0.01667,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,180,    if (interpolator.currentState == null) {,2,1,0,1,3,1,0,0,0,5,40,4,0.01667,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,199,    finalized        = interpolator.finalized;,3,0,0,0,0,0,0,0,1,2,42,4,0.01667,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,200,    forward          = interpolator.forward;,3,0,0,0,0,0,0,0,1,2,40,4,0.01667,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,201,    dirtyState       = interpolator.dirtyState;,3,0,0,0,0,0,0,0,1,2,43,4,0.01667,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,202,    primaryMapper    = interpolator.primaryMapper;,3,0,0,0,0,0,0,0,1,2,46,4,0.01667,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,203,    secondaryMappers = (interpolator.secondaryMappers == null) ?,3,1,0,1,2,0,0,0,1,5,60,4,0.01667,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,206,  },0,0,0,0,1,0,0,0,0,1,1,2,0.01667,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,268,     finalizeStep();,0,0,0,1,2,0,1,0,1,4,15,4,0.01667,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,271,     return doCopy();,0,0,0,1,2,1,1,0,1,5,16,4,0.01667,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,482,    if (! finalized) {,1,0,0,1,3,1,0,0,1,5,18,4,0.01667,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,483,      doFinalize();,0,0,0,1,2,0,1,0,1,4,13,6,0.01667,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,484,      finalized = true;,1,0,0,0,0,0,0,0,2,2,17,6,0.01667,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,486,  },0,0,0,0,1,0,0,0,0,1,1,2,0.01667,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,233,  },0,0,0,0,1,0,0,0,0,1,1,2,0.01667,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,39,150,        if (++count > maximalCount) {,2,1,0,1,3,1,0,0,1,6,29,4,0.01639,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,39,153,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01639,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1420,        final double lns[] = new double[2];,1,0,0,0,4,4,0,0,1,4,35,4,0.01639,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1422,        if (y == 0.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.01639,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1426,        if (x != x) { // X is NaN,2,1,0,1,3,1,0,0,0,5,25,4,0.01639,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1431,        if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.01639,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,412,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01639,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,155,        return primaryMapper;,1,0,0,0,0,1,0,0,0,2,21,4,0.01639,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,194,"    sanityChecks(equations, t);",0,0,0,0,2,0,3,0,1,3,27,4,0.01639,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,223,      mainSetDimension = equations.getPrimaryMapper().getDimension();,1,0,0,1,4,0,3,0,1,5,63,4,0.01639,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,225,      if ((vecAbsoluteTolerance != null) && (vecAbsoluteTolerance.length != mainSetDimension)) {,4,3,0,2,7,1,0,0,0,5,90,4,0.01639,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,229,      if ((vecRelativeTolerance != null) && (vecRelativeTolerance.length != mainSetDimension)) {,4,3,0,2,7,1,0,0,0,5,90,4,0.01639,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3032,        if (Double.isInfinite(x)) {,0,0,0,2,5,1,3,0,0,4,27,5,0.01613,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3035,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,1,2,0,3,6,1,6,0,1,7,72,4,0.01613,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3542,            return b;,1,0,0,0,0,1,0,0,0,2,9,6,0.01613,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,215,        if (y0.length != equations.getDimension()) {,2,1,0,2,5,1,2,0,0,6,44,4,0.01613,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,404,"        final double threshold = 1000 * FastMath.ulp(FastMath.max(FastMath.abs(equations.getTime()),",1,1,0,2,6,2,8,0,1,7,92,4,0.01613,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,406,        final double dt = FastMath.abs(equations.getTime() - t);,2,1,0,2,4,2,4,0,1,7,56,4,0.01613,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,407,        if (dt <= threshold) {,2,1,0,1,3,1,0,0,0,5,22,4,0.01613,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,72,    public ExpandableStatefulODE(final FirstOrderDifferentialEquations primary) {,2,0,0,1,3,2,0,1,2,6,77,2,0.01613,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,73,        final int n          = primary.getDimension();,1,0,0,1,2,2,2,0,1,6,46,4,0.01613,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,74,        this.primary         = primary;,2,0,0,0,0,1,0,0,1,3,31,4,0.01613,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,75,"        this.primaryMapper   = new EquationsMapper(0, n);",2,0,0,0,2,2,0,1,2,5,49,4,0.01613,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,76,        this.time            = Double.NaN;,3,0,0,0,0,1,0,0,1,3,34,4,0.01613,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,77,        this.primaryState    = new double[n];,1,0,1,0,2,3,0,0,1,5,37,4,0.01613,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,78,        this.primaryStateDot = new double[n];,1,0,1,0,2,3,0,0,1,5,37,4,0.01613,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,79,        this.components      = new ArrayList<ExpandableStatefulODE.SecondaryComponent>();,3,0,0,1,2,2,0,1,2,6,81,4,0.01613,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,80,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01613,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,174,        this.time = time;,2,0,0,0,0,1,0,0,1,3,17,4,0.01613,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,175,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01613,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,181,        return time;,1,0,0,0,0,1,0,0,0,2,12,4,0.01613,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,192,        if (primaryState.length != this.primaryState.length) {,4,1,0,1,3,2,0,0,0,5,54,4,0.01613,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,197,"        System.arraycopy(primaryState, 0, this.primaryState, 0, primaryState.length);",3,0,0,0,2,1,3,0,0,4,77,5,0.01613,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,199,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01613,0,0
defect4j,math,org/apache/commons/math/ode/EquationsMapper,39,77,        if (equationData.length != dimension) {,3,1,0,1,3,1,0,0,0,5,39,4,0.01613,0,0
defect4j,math,org/apache/commons/math/ode/EquationsMapper,39,80,"        System.arraycopy(complete, firstIndex, equationData, 0, dimension);",0,0,0,0,2,0,6,0,0,2,67,5,0.01613,0,0
defect4j,math,org/apache/commons/math/ode/EquationsMapper,39,81,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01613,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,220,          interpolatedState                = new double[dimension];,1,0,1,0,2,2,0,0,1,5,57,6,0.01613,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,221,          interpolatedDerivatives          = new double[dimension];,1,0,1,0,2,2,0,0,1,5,57,6,0.01613,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,222,          interpolatedPrimaryState         = new double[primaryMapper.getDimension()];,1,0,0,1,4,2,2,0,1,6,76,6,0.01613,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,223,          interpolatedPrimaryDerivatives   = new double[primaryMapper.getDimension()];,1,0,0,1,4,2,2,0,1,6,76,6,0.01613,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,224,          if (secondaryMappers == null) {,1,1,0,1,3,1,0,0,0,5,31,6,0.01613,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,228,              interpolatedSecondaryState       = new double[secondaryMappers.length][];,3,0,0,0,4,2,0,0,1,4,73,8,0.01613,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,229,              interpolatedSecondaryDerivatives = new double[secondaryMappers.length][];,3,0,0,0,4,2,0,0,1,4,73,8,0.01613,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,230,              for (int i = 0; i < secondaryMappers.length; ++i) {,5,1,0,1,3,2,0,0,1,6,51,8,0.01613,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,289,    globalPreviousTime = globalCurrentTime;,2,0,0,0,0,0,0,0,1,2,39,4,0.01613,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,290,    softPreviousTime   = globalPreviousTime;,2,0,0,0,0,0,0,0,1,2,40,4,0.01613,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,291,    softCurrentTime    = globalCurrentTime;,2,0,0,0,0,0,0,0,1,2,39,4,0.01613,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,292,  },0,0,0,0,1,0,0,0,0,1,1,2,0.01613,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,299,    globalCurrentTime = t;,2,0,0,0,0,0,0,0,1,2,22,4,0.01613,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,300,    softCurrentTime   = globalCurrentTime;,2,0,0,0,0,0,0,0,1,2,38,4,0.01613,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,301,    h                 = globalCurrentTime - globalPreviousTime;,3,1,0,0,0,0,0,0,1,3,59,4,0.01613,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,302,    setInterpolatedTime(t);,0,0,0,1,2,0,2,0,1,4,23,4,0.01613,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,305,    finalized  = false;,1,0,0,0,0,0,0,0,2,2,19,4,0.01613,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,307,  },0,0,0,0,1,0,0,0,0,1,1,2,0.01613,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,378,      interpolatedTime = time;,2,0,0,0,0,0,0,0,1,2,24,4,0.01613,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,379,      dirtyState       = true;,1,0,0,0,0,0,0,0,2,2,24,4,0.01613,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,380,  },0,0,0,0,1,0,0,0,0,1,1,2,0.01613,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,221,"      super.sanityChecks(equations, t);",3,0,0,0,2,1,0,0,0,3,33,5,0.01613,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3538,        if (a > b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.01587,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3541,        if (a < b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.01587,0,0
defect4j,math,org/apache/commons/math/ode/EquationsMapper,39,65,        return dimension;,1,0,0,0,0,1,0,0,0,2,17,4,0.01587,0,0
defect4j,math,org/apache/commons/math/ode/EquationsMapper,39,49,"    public EquationsMapper(final int firstIndex, final int dimension) {",3,0,0,0,3,5,0,0,3,4,67,2,0.01563,0,0
defect4j,math,org/apache/commons/math/ode/EquationsMapper,39,50,        this.firstIndex = firstIndex;,2,0,0,0,0,1,0,0,1,3,29,4,0.01563,0,0
defect4j,math,org/apache/commons/math/ode/EquationsMapper,39,51,        this.dimension  = dimension;,2,0,0,0,0,1,0,0,1,3,28,4,0.01563,0,0
defect4j,math,org/apache/commons/math/ode/EquationsMapper,39,52,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01563,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,111,  protected AbstractStepInterpolator() {,1,0,0,1,3,1,0,0,1,5,38,2,0.01515,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,112,    globalPreviousTime = Double.NaN;,3,0,0,0,0,0,0,0,1,2,32,4,0.01515,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,113,    globalCurrentTime  = Double.NaN;,3,0,0,0,0,0,0,0,1,2,32,4,0.01515,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,114,    softPreviousTime   = Double.NaN;,3,0,0,0,0,0,0,0,1,2,32,4,0.01515,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,115,    softCurrentTime    = Double.NaN;,3,0,0,0,0,0,0,0,1,2,32,4,0.01515,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,116,    h                  = Double.NaN;,3,0,0,0,0,0,0,0,1,2,32,4,0.01515,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,117,    interpolatedTime   = Double.NaN;,3,0,0,0,0,0,0,0,1,2,32,4,0.01515,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,118,    currentState       = null;,1,0,0,0,0,0,0,0,1,2,26,4,0.01515,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,119,    finalized          = false;,1,0,0,0,0,0,0,0,2,2,27,4,0.01515,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,120,    this.forward       = true;,1,0,0,0,0,1,0,0,2,3,26,4,0.01515,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,121,    this.dirtyState    = true;,1,0,0,0,0,1,0,0,2,3,26,4,0.01515,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,122,    primaryMapper      = null;,1,0,0,0,0,0,0,0,1,2,26,4,0.01515,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,123,    secondaryMappers   = null;,1,0,0,0,0,0,0,0,1,2,26,4,0.01515,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,124,    allocateInterpolatedArrays(-1);,0,0,0,1,2,0,1,0,2,4,31,4,0.01515,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,125,  },0,0,0,0,1,0,0,0,0,1,1,2,0.01515,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,213,          interpolatedState                = null;,1,0,0,0,0,0,0,0,1,2,40,6,0.01515,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,214,          interpolatedDerivatives          = null;,1,0,0,0,0,0,0,0,1,2,40,6,0.01515,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,215,          interpolatedPrimaryState         = null;,1,0,0,0,0,0,0,0,1,2,40,6,0.01515,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,216,          interpolatedPrimaryDerivatives   = null;,1,0,0,0,0,0,0,0,1,2,40,6,0.01515,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,217,          interpolatedSecondaryState       = null;,1,0,0,0,0,0,0,0,1,2,40,6,0.01515,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,218,          interpolatedSecondaryDerivatives = null;,1,0,0,0,0,0,0,0,1,2,40,6,0.01515,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,60,  protected RungeKuttaStepInterpolator() {,1,0,0,1,3,1,0,0,1,5,40,2,0.01515,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,61,    previousState = null;,1,0,0,0,0,0,0,0,1,2,21,4,0.01515,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,62,    yDotK         = null;,1,0,0,0,0,0,0,0,1,2,21,4,0.01515,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,63,    integrator    = null;,1,0,0,0,0,0,0,0,1,2,21,4,0.01515,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,64,  },0,0,0,0,1,0,0,0,0,1,1,2,0.01515,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,186,    this.safety = safety;,2,0,0,0,0,1,0,0,1,3,21,4,0.01515,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,187,  },0,0,0,0,1,0,0,0,0,1,1,2,0.01515,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,341,    this.minReduction = minReduction;,2,0,0,0,0,1,0,0,1,3,33,4,0.01515,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,342,  },0,0,0,0,1,0,0,0,0,1,1,2,0.01515,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,355,    this.maxGrowth = maxGrowth;,2,0,0,0,0,1,0,0,1,3,27,4,0.01515,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,356,  },0,0,0,0,1,0,0,0,0,1,1,2,0.01515,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,375,        return Math.sqrt(a);,0,0,0,1,2,1,3,0,0,4,20,5,0.01493,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,85,    public AbstractIntegrator(final String name) {,2,0,0,1,3,2,0,1,2,6,46,2,0.01493,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,86,        this.name = name;,2,0,0,0,0,1,0,0,1,3,17,4,0.01493,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,87,        stepHandlers = new ArrayList<StepHandler>();,1,0,0,1,2,1,0,2,2,6,44,4,0.01493,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,88,        stepStart = Double.NaN;,3,0,0,0,0,0,0,0,1,2,23,4,0.01493,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,89,        stepSize  = Double.NaN;,3,0,0,0,0,0,0,0,1,2,23,4,0.01493,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,90,        eventsStates = new ArrayList<EventState>();,1,0,0,1,2,1,0,2,2,6,43,4,0.01493,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,91,        statesInitialized = false;,1,0,0,0,0,0,0,0,2,2,26,4,0.01493,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,92,        evaluations = new Incrementor();,1,0,0,1,2,1,0,1,2,6,32,4,0.01493,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,93,        setMaxEvaluations(-1);,0,0,0,1,2,0,1,0,2,4,22,4,0.01493,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,94,        evaluations.resetCount();,0,0,0,1,2,0,2,0,0,3,25,5,0.01493,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,95,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01493,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,169,        evaluations.setMaximalCount((maxEvaluations < 0) ? Integer.MAX_VALUE : maxEvaluations);,4,1,0,2,4,0,2,0,0,5,87,5,0.01493,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,170,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01493,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,354,    stepStart = Double.NaN;,3,0,0,0,0,0,0,0,1,2,23,4,0.01493,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,355,    stepSize  = FastMath.sqrt(minStep * maxStep);,3,1,0,1,2,0,2,0,1,6,45,4,0.01493,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,356,  },0,0,0,0,1,0,0,0,0,1,1,2,0.01493,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,39,62,             new MaxCountExceededCallback() {,0,0,0,1,3,1,0,1,1,5,32,4,0.01471,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,39,52,        this(0);,0,0,0,1,2,1,0,0,0,3,8,2,0.01471,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,39,53,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01471,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,39,61,"        this(max,",1,0,0,0,1,1,0,0,0,3,9,4,0.01471,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,39,68,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01471,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,39,78,                       MaxCountExceededCallback cb) {,1,0,0,0,2,0,0,1,0,3,30,3,0.01471,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,39,40,    private int count = 0;,1,0,0,0,0,2,0,0,1,3,22,2,0.01471,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,39,79,        maximalCount = max;,2,0,0,0,0,0,0,0,1,2,19,4,0.01471,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,39,80,        maxCountCallback = cb;,2,0,0,0,0,0,0,0,1,2,22,4,0.01471,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,39,81,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01471,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,39,91,        maximalCount = max;,2,0,0,0,0,0,0,0,1,2,19,4,0.01471,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,39,92,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01471,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,39,159,        count = 0;,1,0,0,0,0,0,0,0,1,2,10,4,0.01471,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,39,160,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01471,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,104,    private static /* final */ boolean RECOMPUTE_TABLES_AT_RUNTIME = false;,1,0,0,0,0,4,0,0,3,3,71,2,0.01471,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,106,    private static /* final */ boolean LOAD_RESOURCES = false;,1,0,0,0,0,4,0,0,3,3,58,2,0.01471,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,115,    private static final double LN_QUICK_COEF[][] = {,1,0,0,0,5,4,0,0,3,4,49,2,0.01471,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,128,    private static final double LN_HI_PREC_COEF[][] = {,1,0,0,0,5,4,0,0,3,4,51,2,0.01471,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,141,    private static final double SINE_TABLE_A[] =,1,0,0,0,2,4,0,0,3,4,44,2,0.01471,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,160,    private static final double SINE_TABLE_B[] =,1,0,0,0,2,4,0,0,3,4,44,2,0.01471,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,179,    private static final double COSINE_TABLE_A[] =,1,0,0,0,2,4,0,0,3,4,46,2,0.01471,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,198,    private static final double COSINE_TABLE_B[] =,1,0,0,0,2,4,0,0,3,4,46,2,0.01471,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,218,    private static final double TANGENT_TABLE_A[] =,1,0,0,0,2,4,0,0,3,4,47,2,0.01471,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,237,    private static final double TANGENT_TABLE_B[] =,1,0,0,0,2,4,0,0,3,4,47,2,0.01471,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,256,    private static final long RECIP_2PI[] = new long[] {,1,0,0,0,5,6,0,0,3,4,52,2,0.01471,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,277,    private static final long PI_O_4_BITS[] = new long[] {,1,0,0,0,5,6,0,0,3,4,54,2,0.01471,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,285,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",1,0,0,0,4,4,0,0,3,4,126,2,0.01471,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,288,"    private static final double CBRTTWO[] = { 0.6299605249474366,",1,0,0,0,3,4,0,0,3,4,61,2,0.01471,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3023,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,4,2,0,1,4,1,0,0,1,6,61,5,0.01471,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,212,      if (dimension < 0) {,1,1,0,1,3,1,0,0,0,5,20,4,0.01471,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,236,  },0,0,0,0,1,0,0,0,0,1,1,2,0.01471,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3767,                EXP_FRAC_TABLE_A = new double[FastMath.EXP_FRAC_TABLE_LEN];,3,0,0,0,2,2,0,0,1,4,59,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3768,                EXP_FRAC_TABLE_B = new double[FastMath.EXP_FRAC_TABLE_LEN];,3,0,0,0,2,2,0,0,1,4,59,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3770,                final double tmp[] = new double[2];,1,0,0,0,4,4,0,0,1,4,35,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3773,                final double factor = 1d / (EXP_FRAC_TABLE_LEN - 1);,2,2,0,1,2,2,0,0,1,6,52,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3774,                for (int i = 0; i < EXP_FRAC_TABLE_A.length; i++) {,5,1,0,1,3,2,0,0,1,6,51,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3775,"                    FastMathCalc.slowexp(i * factor, tmp);",2,1,0,0,2,0,3,0,0,4,38,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3776,                    EXP_FRAC_TABLE_A[i] = tmp[0];,0,0,1,0,4,0,0,0,1,3,29,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3777,                    EXP_FRAC_TABLE_B[i] = tmp[1];,0,0,1,0,4,0,0,0,1,3,29,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3779,            } else if (LOAD_RESOURCES) {,1,0,0,1,4,2,0,0,0,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3780,                final double[][] expFrac = FastMathResources.loadExpFrac();,1,0,0,1,6,2,2,0,1,6,59,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3781,                EXP_FRAC_TABLE_A = expFrac[0];,1,0,1,0,2,0,0,0,1,4,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3782,                EXP_FRAC_TABLE_B = expFrac[1];,1,0,1,0,2,0,0,0,1,4,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3783,            } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,39,65,                     throw new MaxCountExceededException(max);,1,0,0,1,2,2,0,1,1,6,41,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,39,100,        return maximalCount;,1,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,39,109,        return count;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,39,120,        return count < maximalCount;,2,1,0,0,0,1,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,39,131,        for (int i = 0; i < value; i++) {,4,1,0,1,3,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,39,132,            incrementCount();,0,0,0,1,2,0,1,0,1,4,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,39,134,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,39,151,            maxCountCallback.trigger(maximalCount);,0,0,0,1,2,0,3,0,0,3,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,39,42,"        this(LocalizedFormats.MAX_COUNT_EXCEEDED, max);",3,0,0,0,2,1,0,0,0,3,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,39,43,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,39,53,                                     Object ... args) {,1,0,0,0,2,0,0,1,0,3,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,39,54,"        getContext().addMessage(specific, max, args);",0,0,0,1,4,0,5,0,1,4,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,39,55,        this.max = max;,2,0,0,0,0,1,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,39,56,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,39,62,        return max;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,39,45,                                     Object ... args) {,1,0,0,0,2,0,0,1,0,3,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,39,46,        context = new ExceptionContext(this);,1,0,0,1,2,2,0,1,2,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,39,47,"        context.addMessage(pattern, args);",0,0,0,0,2,0,4,0,0,2,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,39,48,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,39,60,        super(cause);,1,0,0,1,2,1,0,0,1,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,39,61,        context = new ExceptionContext(this);,1,0,0,1,2,2,0,1,2,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,39,62,"        context.addMessage(pattern, args);",0,0,0,0,2,0,4,0,0,2,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,39,63,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,39,69,        this(LocalizedFormats.ILLEGAL_STATE);,2,0,0,1,2,1,0,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,39,70,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,39,74,        return context;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,39,80,        return context.getMessage();,0,0,0,1,2,1,2,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,39,86,        return context.getLocalizedMessage();,0,0,0,1,2,1,2,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3723,                EXP_INT_TABLE_A = new double[FastMath.EXP_INT_TABLE_LEN];,3,0,0,0,2,2,0,0,1,4,57,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3724,                EXP_INT_TABLE_B = new double[FastMath.EXP_INT_TABLE_LEN];,3,0,0,0,2,2,0,0,1,4,57,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3726,                final double tmp[] = new double[2];,1,0,0,0,4,4,0,0,1,4,35,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3727,                final double recip[] = new double[2];,1,0,0,0,4,4,0,0,1,4,37,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3730,                for (int i = 0; i < FastMath.EXP_INT_TABLE_MAX_INDEX; i++) {,5,1,0,1,3,2,0,0,1,6,60,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3731,"                    FastMathCalc.expint(i, tmp);",0,0,0,0,2,0,4,0,0,2,28,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3732,                    EXP_INT_TABLE_A[i + FastMath.EXP_INT_TABLE_MAX_INDEX] = tmp[0];,3,1,1,0,4,0,0,0,1,5,63,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3733,                    EXP_INT_TABLE_B[i + FastMath.EXP_INT_TABLE_MAX_INDEX] = tmp[1];,3,1,1,0,4,0,0,0,1,5,63,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3735,                    if (i != 0) {,1,1,0,1,3,1,0,0,0,5,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3737,"                        FastMathCalc.splitReciprocal(tmp, recip);",0,0,0,0,2,0,4,0,0,2,41,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3738,                        EXP_INT_TABLE_A[FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[0];,3,1,1,0,4,0,0,0,1,5,65,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3739,                        EXP_INT_TABLE_B[FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[1];,3,1,1,0,4,0,0,0,1,5,65,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3742,            } else if (LOAD_RESOURCES) {,1,0,0,1,4,2,0,0,0,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3743,                final double[][] expInt = FastMathResources.loadExpInt();,1,0,0,1,6,2,2,0,1,6,57,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3744,                EXP_INT_TABLE_A = expInt[0];,1,0,1,0,2,0,0,0,1,4,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3745,                EXP_INT_TABLE_B = expInt[1];,1,0,1,0,2,0,0,0,1,4,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3746,            } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,39,6134,    private FastMathLiteralArrays() {},1,0,0,1,4,1,0,0,1,5,34,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,349,    private FastMath() {},1,0,0,1,4,1,0,0,1,5,21,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,361,        if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN){,6,3,0,1,3,1,0,0,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,362,            return d; // These are un-normalised - don't try to convert,1,0,0,0,0,2,0,0,0,2,59,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,364,        long xl = Double.doubleToLongBits(d);,1,0,0,1,2,1,3,0,0,5,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,365,        xl = xl & MASK_30BITS; // Drop low order bits,3,1,0,0,0,0,0,0,1,3,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,366,        return Double.longBitsToDouble(xl);,0,0,0,1,2,1,3,0,0,4,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,383,      if (x != x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,384,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,392,      if (x > 20.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,393,          return exp(x)/2.0;,0,1,0,1,2,1,2,0,1,6,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,396,      if (x < -20) {,1,1,0,1,3,1,0,0,1,6,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,397,          return exp(-x)/2.0;,1,1,0,1,2,1,1,0,2,7,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,400,      double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,401,      if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,402,          x = -x;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,404,"      exp(x, 0.0, hiPrec);",0,0,0,0,2,0,3,0,1,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,406,      double ya = hiPrec[0] + hiPrec[1];,1,1,1,0,4,1,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,407,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,2,1,1,1,6,1,0,0,1,7,42,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,409,      double temp = ya * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,410,      double yaa = ya + temp - temp;,4,2,0,0,0,1,0,0,0,3,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,411,      double yab = ya - yaa;,3,1,0,0,0,1,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,414,      double recip = 1.0/ya;,2,1,0,0,0,1,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,415,      temp = recip * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,416,      double recipa = recip + temp - temp;,4,2,0,0,0,1,0,0,0,3,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,417,      double recipb = recip - recipa;,3,1,0,0,0,1,0,0,0,3,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,420,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,10,9,0,1,2,0,0,0,1,5,76,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,422,      recipb += -yb * recip * recip;,4,1,0,0,0,0,0,0,2,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,425,      temp = ya + recipa;,3,1,0,0,0,0,0,0,1,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,426,      yb += -(temp - ya - recipa);,4,1,0,1,2,0,0,0,2,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,427,      ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,428,      temp = ya + recipb;,3,1,0,0,0,0,0,0,1,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,429,      yb += -(temp - ya - recipb);,4,1,0,1,2,0,0,0,2,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,430,      ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,432,      double result = ya + yb;,3,1,0,0,0,1,0,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,433,      result *= 0.5;,1,0,0,0,0,0,0,0,1,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,434,      return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,442,      boolean negate = false;,1,0,0,0,0,1,0,0,1,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,443,      if (x != x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,444,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,452,      if (x > 20.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,453,          return exp(x)/2.0;,0,1,0,1,2,1,2,0,1,6,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,456,      if (x < -20) {,1,1,0,1,3,1,0,0,1,6,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,457,          return -exp(-x)/2.0;,1,1,0,1,2,1,1,0,3,7,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,460,      if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,461,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,464,      if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,465,          x = -x;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,466,          negate = true;,1,0,0,0,0,0,0,0,2,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,471,      if (x > 0.25) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,472,          double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,473,"          exp(x, 0.0, hiPrec);",0,0,0,0,2,0,3,0,1,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,475,          double ya = hiPrec[0] + hiPrec[1];,1,1,1,0,4,1,0,0,0,5,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,476,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,2,1,1,1,6,1,0,0,1,7,42,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,478,          double temp = ya * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,479,          double yaa = ya + temp - temp;,4,2,0,0,0,1,0,0,0,3,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,480,          double yab = ya - yaa;,3,1,0,0,0,1,0,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,483,          double recip = 1.0/ya;,2,1,0,0,0,1,0,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,484,          temp = recip * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,485,          double recipa = recip + temp - temp;,4,2,0,0,0,1,0,0,0,3,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,486,          double recipb = recip - recipa;,3,1,0,0,0,1,0,0,0,3,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,489,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,10,9,0,1,2,0,0,0,1,5,76,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,491,          recipb += -yb * recip * recip;,4,1,0,0,0,0,0,0,2,3,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,493,          recipa = -recipa;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,494,          recipb = -recipb;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,497,          temp = ya + recipa;,3,1,0,0,0,0,0,0,1,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,498,          yb += -(temp - ya - recipa);,4,1,0,1,2,0,0,0,2,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,499,          ya = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,500,          temp = ya + recipb;,3,1,0,0,0,0,0,0,1,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,501,          yb += -(temp - ya - recipb);,4,1,0,1,2,0,0,0,2,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,502,          ya = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,504,          result = ya + yb;,3,1,0,0,0,0,0,0,1,3,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,505,          result *= 0.5;,1,0,0,0,0,0,0,0,1,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,506,      },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,508,          double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,509,"          expm1(x, hiPrec);",0,0,0,0,2,0,3,0,1,3,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,511,          double ya = hiPrec[0] + hiPrec[1];,1,1,1,0,4,1,0,0,0,5,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,512,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,2,1,1,1,6,1,0,0,1,7,42,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,515,          double denom = 1.0 + ya;,2,1,0,0,0,1,0,0,0,3,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,516,          double denomr = 1.0 / denom;,2,1,0,0,0,1,0,0,0,3,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,517,          double denomb = -(denom - 1.0 - ya) + yb;,4,2,0,1,2,1,0,0,1,6,41,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,518,          double ratio = ya * denomr;,3,1,0,0,0,1,0,0,0,3,27,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,519,          double temp = ratio * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,35,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,520,          double ra = ratio + temp - temp;,4,2,0,0,0,1,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,521,          double rb = ratio - ra;,3,1,0,0,0,1,0,0,0,3,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,523,          temp = denom * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,524,          double za = denom + temp - temp;,4,2,0,0,0,1,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,525,          double zb = denom - za;,3,1,0,0,0,1,0,0,0,3,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,527,          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;,11,9,0,1,2,0,0,0,1,5,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,530,          rb += yb*denomr;                        // numerator,3,1,0,0,0,0,0,0,1,3,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,531,          rb += -ya * denomb * denomr * denomr;   // denominator,5,1,0,0,0,0,0,0,2,3,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,534,          temp = ya + ra;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,535,          yb += -(temp - ya - ra);,4,1,0,1,2,0,0,0,2,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,536,          ya = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,537,          temp = ya + rb;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,538,          yb += -(temp - ya - rb);,4,1,0,1,2,0,0,0,2,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,539,          ya = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,541,          result = ya + yb;,3,1,0,0,0,0,0,0,1,3,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,542,          result *= 0.5;,1,0,0,0,0,0,0,0,1,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,545,      if (negate) {,1,0,0,1,3,1,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,546,          result = -result;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,549,      return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,557,      boolean negate = false;,1,0,0,0,0,1,0,0,1,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,559,      if (x != x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,560,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,569,      if (x > 20.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,570,          return 1.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,573,      if (x < -20) {,1,1,0,1,3,1,0,0,1,6,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,574,          return -1.0;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,577,      if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,578,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,581,      if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,582,          x = -x;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,583,          negate = true;,1,0,0,0,0,0,0,0,2,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,587,      if (x >= 0.5) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,588,          double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,590,"          exp(x*2.0, 0.0, hiPrec);",1,1,0,0,2,0,2,0,1,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,592,          double ya = hiPrec[0] + hiPrec[1];,1,1,1,0,4,1,0,0,0,5,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,593,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,2,1,1,1,6,1,0,0,1,7,42,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,596,          double na = -1.0 + ya;,2,1,0,0,0,1,0,0,1,4,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,597,          double nb = -(na + 1.0 - ya);,3,2,0,1,2,1,0,0,1,6,29,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,598,          double temp = na + yb;,3,1,0,0,0,1,0,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,599,          nb += -(temp - na - yb);,4,1,0,1,2,0,0,0,2,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,600,          na = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,603,          double da = 1.0 + ya;,2,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,604,          double db = -(da - 1.0 - ya);,3,1,0,1,2,1,0,0,1,6,29,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,605,          temp = da + yb;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,606,          db += -(temp - da - yb);,4,1,0,1,2,0,0,0,2,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,607,          da = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,609,          temp = da * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,610,          double daa = da + temp - temp;,4,2,0,0,0,1,0,0,0,3,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,611,          double dab = da - daa;,3,1,0,0,0,1,0,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,614,          double ratio = na/da;,3,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,615,          temp = ratio * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,616,          double ratioa = ratio + temp - temp;,4,2,0,0,0,1,0,0,0,3,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,617,          double ratiob = ratio - ratioa;,3,1,0,0,0,1,0,0,0,3,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,620,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,11,9,0,1,2,0,0,0,1,5,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,623,          ratiob += nb / da;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,625,          ratiob += -db * na / da / da;,5,3,0,0,0,0,0,0,2,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,627,          result = ratioa + ratiob;,3,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,628,      },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,630,          double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,632,"          expm1(x*2.0, hiPrec);",1,1,0,0,2,0,2,0,1,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,634,          double ya = hiPrec[0] + hiPrec[1];,1,1,1,0,4,1,0,0,0,5,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,635,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,2,1,1,1,6,1,0,0,1,7,42,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,638,          double na = ya;,2,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,639,          double nb = yb;,2,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,642,          double da = 2.0 + ya;,2,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,643,          double db = -(da - 2.0 - ya);,3,1,0,1,2,1,0,0,1,6,29,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,644,          double temp = da + yb;,3,1,0,0,0,1,0,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,645,          db += -(temp - da - yb);,4,1,0,1,2,0,0,0,2,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,646,          da = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,648,          temp = da * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,649,          double daa = da + temp - temp;,4,2,0,0,0,1,0,0,0,3,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,650,          double dab = da - daa;,3,1,0,0,0,1,0,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,653,          double ratio = na/da;,3,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,654,          temp = ratio * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,655,          double ratioa = ratio + temp - temp;,4,2,0,0,0,1,0,0,0,3,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,656,          double ratiob = ratio - ratioa;,3,1,0,0,0,1,0,0,0,3,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,659,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,11,9,0,1,2,0,0,0,1,5,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,662,          ratiob += nb / da;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,664,          ratiob += -db * na / da / da;,5,3,0,0,0,0,0,0,2,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,666,          result = ratioa + ratiob;,3,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,669,      if (negate) {,1,0,0,1,3,1,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,670,          result = -result;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,673,      return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,681,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,3,3,0,2,4,1,4,0,0,6,50,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,689,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,690,        if (a < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,691,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,692,            a = -a;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,696,        if (a > 0.167) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,697,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,4,3,0,2,4,0,4,0,1,6,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,699,            final double a2 = a * a;,3,1,0,0,0,2,0,0,1,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,700,            if (a > 0.097) {,1,1,0,1,3,1,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,701,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,26,17,0,8,16,0,0,0,1,5,212,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,702,            } else if (a > 0.036) {,1,1,0,1,4,2,0,0,0,5,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,703,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,20,13,0,6,12,0,0,0,1,5,160,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,704,            } else if (a > 0.0036) {,1,1,0,1,4,2,0,0,0,5,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,705,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);,14,9,0,4,8,0,0,0,1,5,109,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,707,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);,8,5,0,2,4,0,0,0,1,5,63,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,711,        return negative ? -absAsinh : absAsinh;,3,0,0,0,0,1,0,0,1,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,719,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,720,        if (a < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,721,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,722,            a = -a;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,726,        if (a > 0.15) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,727,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,3,4,0,2,6,0,2,0,1,6,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,729,            final double a2 = a * a;,3,1,0,0,0,2,0,0,1,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,730,            if (a > 0.087) {,1,1,0,1,3,1,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,731,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));,18,17,0,8,16,0,0,0,1,5,141,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,732,            } else if (a > 0.031) {,1,1,0,1,4,2,0,0,0,5,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,733,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));,14,13,0,6,12,0,0,0,1,5,109,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,734,            } else if (a > 0.003) {,1,1,0,1,4,2,0,0,0,5,23,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,735,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));,10,9,0,4,8,0,0,0,1,5,77,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,737,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));,6,5,0,2,4,0,0,0,1,5,47,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,741,        return negative ? -absAtanh : absAtanh;,3,0,0,0,0,1,0,0,1,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,750,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,3,2,0,2,6,2,0,0,1,6,87,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,759,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,3,2,0,2,6,2,0,0,1,6,91,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,767,"        return nextAfter(a, Double.POSITIVE_INFINITY);",2,0,0,0,2,1,2,0,1,5,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,775,"        return nextAfter(a, Float.POSITIVE_INFINITY);",2,0,0,0,2,1,2,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,783,        return Math.random();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,807,"        return exp(x, 0.0, null);",0,0,0,0,2,1,2,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,830,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,831,                    hiPrec[0] = 0.0;,0,0,1,0,2,0,0,0,1,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,832,                    hiPrec[1] = 0.0;,0,0,1,0,2,0,0,0,1,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,834,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,839,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",2,2,0,0,2,2,3,0,2,6,79,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,840,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,841,                    hiPrec[0] /= 285040095144011776.0;,0,0,1,0,2,0,0,0,1,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,842,                    hiPrec[1] /= 285040095144011776.0;,0,0,1,0,2,0,0,0,1,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,844,                return result;,1,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,849,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",2,2,0,0,2,2,3,0,2,6,79,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,850,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,851,                    hiPrec[0] /= 4.455505956692756620;,0,0,1,0,2,0,0,0,1,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,852,                    hiPrec[1] /= 4.455505956692756620;,0,0,1,0,2,0,0,0,1,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,854,                return result;,1,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,864,            intVal = (int) x;,2,0,0,1,2,1,0,0,1,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,866,            if (intVal > 709) {,1,1,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,867,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,868,                    hiPrec[0] = Double.POSITIVE_INFINITY;,2,0,1,0,2,0,0,0,1,4,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,869,                    hiPrec[1] = 0.0;,0,0,1,0,2,0,0,0,1,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,871,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,874,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,5,1,0,0,2,0,0,0,1,4,71,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,875,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,5,1,0,0,2,0,0,0,1,4,71,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,922,            result = tempC*z + tempB + tempA;,5,3,0,0,0,0,0,0,1,3,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,927,            hiPrec[0] = tempA;,1,0,1,0,2,0,0,0,1,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,928,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,8,6,1,0,2,0,0,0,1,5,58,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,939,"      return expm1(x, null);",0,0,0,0,2,1,2,0,1,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,948,        if (x != x || x == 0.0) { // NaN or zero,3,3,0,1,3,1,0,0,0,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,949,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,952,        if (x <= -1.0 || x >= 1.0) {,2,3,0,1,3,1,0,0,1,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,955,            double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,956,"            exp(x, 0.0, hiPrec);",0,0,0,0,2,0,3,0,1,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,957,            if (x > 0.0) {,1,1,0,1,3,1,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,958,                return -1.0 + hiPrec[0] + hiPrec[1];,0,1,1,0,4,1,0,0,1,5,36,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,960,                final double ra = -1.0 + hiPrec[0];,1,1,1,0,2,2,0,0,2,6,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,961,                double rb = -(ra + 1.0 - hiPrec[0]);,2,2,1,1,4,1,0,0,1,7,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,962,                rb += hiPrec[1];,1,0,1,0,2,0,0,0,1,4,16,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,963,                return ra + rb;,2,1,0,0,0,1,0,0,0,3,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,970,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,972,        if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,973,            x = -x;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,974,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,978,            int intFrac = (int) (x * 1024.0);,2,1,0,1,4,2,0,0,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,979,            double tempA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0;,3,1,1,0,2,1,0,0,0,5,60,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,980,            double tempB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,3,0,1,0,2,1,0,0,0,4,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,982,            double temp = tempA + tempB;,3,1,0,0,0,1,0,0,0,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,983,            tempB = -(temp - tempA - tempB);,4,1,0,1,2,0,0,0,2,5,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,984,            tempA = temp;,2,0,0,0,0,0,0,0,1,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,986,            temp = tempA * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,987,            baseA = tempA + temp - temp;,4,2,0,0,0,0,0,0,1,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,988,            baseB = tempB + (tempA - baseA);,4,2,0,1,2,0,0,0,1,5,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,990,            epsilon = x - intFrac/1024.0;,3,2,0,0,0,0,0,0,1,3,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,995,        double zb = 0.008336750013465571;,1,0,0,0,0,1,0,0,0,2,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,996,        zb = zb * epsilon + 0.041666663879186654;,3,2,0,0,0,0,0,0,1,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,997,        zb = zb * epsilon + 0.16666666666745392;,3,2,0,0,0,0,0,0,1,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,998,        zb = zb * epsilon + 0.49999999999999994;,3,2,0,0,0,0,0,0,1,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,999,        zb = zb * epsilon;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1000,        zb = zb * epsilon;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1002,        double za = epsilon;,2,0,0,0,0,1,0,0,0,2,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1003,        double temp = za + zb;,3,1,0,0,0,1,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1004,        zb = -(temp - za - zb);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1005,        za = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1007,        temp = za * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1008,        temp = za + temp - temp;,4,2,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1009,        zb += za - temp;,3,1,0,0,0,0,0,0,1,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1010,        za = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1013,        double ya = za * baseA;,3,1,0,0,0,1,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1015,        temp = ya + za * baseB;,4,2,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1016,        double yb = -(temp - ya - za * baseB);,5,2,0,1,2,1,0,0,1,6,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1017,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1019,        temp = ya + zb * baseA;,4,2,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1020,        yb += -(temp - ya - zb * baseA);,5,2,0,1,2,0,0,0,2,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1021,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1023,        temp = ya + zb * baseB;,4,2,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1024,        yb += -(temp - ya - zb*baseB);,5,2,0,1,2,0,0,0,2,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1025,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1029,        temp = ya + baseA;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1030,        yb += -(temp - baseA - ya);,4,1,0,1,2,0,0,0,2,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1031,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1033,        temp = ya + za;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1035,        yb += -(temp - ya - za);,4,1,0,1,2,0,0,0,2,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1036,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1038,        temp = ya + baseB;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1040,        yb += -(temp - ya - baseB);,4,1,0,1,2,0,0,0,2,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1041,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1043,        temp = ya + zb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1045,        yb += -(temp - ya - zb);,4,1,0,1,2,0,0,0,2,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1046,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1048,        if (negative) {,1,0,0,1,3,1,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1050,            double denom = 1.0 + ya;,2,1,0,0,0,1,0,0,0,3,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1051,            double denomr = 1.0 / denom;,2,1,0,0,0,1,0,0,0,3,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1052,            double denomb = -(denom - 1.0 - ya) + yb;,4,2,0,1,2,1,0,0,1,6,41,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1053,            double ratio = ya * denomr;,3,1,0,0,0,1,0,0,0,3,27,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1054,            temp = ratio * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1055,            final double ra = ratio + temp - temp;,4,2,0,0,0,2,0,0,1,4,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1056,            double rb = ratio - ra;,3,1,0,0,0,1,0,0,0,3,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1058,            temp = denom * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1059,            za = denom + temp - temp;,4,2,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1060,            zb = denom - za;,3,1,0,0,0,0,0,0,1,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1062,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,11,9,0,1,2,0,0,0,1,5,60,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1073,            rb += yb * denomr;                      // numerator,3,1,0,0,0,0,0,0,1,3,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1074,            rb += -ya * denomb * denomr * denomr;   // denominator,5,1,0,0,0,0,0,0,2,3,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1077,            ya = -ra;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1078,            yb = -rb;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1081,        if (hiPrecOut != null) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1082,            hiPrecOut[0] = ya;,1,0,1,0,2,0,0,0,1,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1083,            hiPrecOut[1] = yb;,1,0,1,0,2,0,0,0,1,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1086,        return ya + yb;,2,1,0,0,0,1,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1096,"        return log(x, null);",0,0,0,0,2,1,2,0,1,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1107,            return Double.NEGATIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1113,            if (x != 0.0) {,1,1,0,1,3,1,0,0,0,5,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1114,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1115,                    hiPrec[0] = Double.NaN;,2,0,1,0,2,0,0,0,1,4,23,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1118,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1124,            if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1125,                hiPrec[0] = Double.POSITIVE_INFINITY;,2,0,1,0,2,0,0,0,1,4,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1128,            return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1136,            if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1138,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1139,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,2,0,1,0,2,0,0,0,1,4,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1142,                return Double.NEGATIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1146,            bits <<= 1;,1,0,0,0,0,0,0,0,1,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1147,            while ( (bits & 0x0010000000000000L) == 0) {,1,2,0,2,5,1,0,0,0,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1148,                exp--;,1,0,0,0,0,0,0,0,1,2,6,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1149,                bits <<= 1;,1,0,0,0,0,0,0,0,1,2,11,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1155,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,3,5,0,1,3,1,0,0,0,5,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1160,                double xa = x - 1.0;,2,1,0,0,0,1,0,0,0,3,20,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1161,                double xb = xa - x + 1.0;,3,2,0,0,0,1,0,0,0,3,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1162,                double tmp = xa * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,31,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1163,                double aa = xa + tmp - tmp;,4,2,0,0,0,1,0,0,0,3,27,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1164,                double ab = xa - aa;,3,1,0,0,0,1,0,0,0,3,20,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1165,                xa = aa;,2,0,0,0,0,0,0,0,1,2,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1166,                xb = ab;,2,0,0,0,0,0,0,0,1,2,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1168,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,3,1,1,0,4,1,0,0,0,5,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1169,                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];,3,1,1,0,4,1,0,0,0,5,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1171,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,5,2,0,1,3,2,0,0,1,6,53,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1173,                    aa = ya * xa;,3,1,0,0,0,0,0,0,1,3,13,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1174,                    ab = ya * xb + yb * xa + yb * xb;,7,5,0,0,0,0,0,0,1,3,33,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1176,                    tmp = aa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1177,                    ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1178,                    yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1181,                    aa = ya + LN_QUICK_COEF[i][0];,2,1,1,0,4,0,0,0,1,5,30,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1182,                    ab = yb + LN_QUICK_COEF[i][1];,2,1,1,0,4,0,0,0,1,5,30,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1184,                    tmp = aa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1185,                    ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1186,                    yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1190,                aa = ya * xa;,3,1,0,0,0,0,0,0,1,3,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1191,                ab = ya * xb + yb * xa + yb * xb;,7,5,0,0,0,0,0,0,1,3,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1193,                tmp = aa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1194,                ya = aa + tmp - tmp;,4,2,0,0,0,0,0,0,1,3,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1195,                yb = aa - ya + ab;,4,2,0,0,0,0,0,0,1,3,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1197,                return ya + yb;,2,1,0,0,0,1,0,0,0,3,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1269,            lnza = -0.16624882440418567;,1,0,0,0,0,0,0,0,2,2,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1270,            lnza = lnza * epsilon + 0.19999954120254515;,3,2,0,0,0,0,0,0,1,3,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1271,            lnza = lnza * epsilon + -0.2499999997677497;,3,2,0,0,0,0,0,0,2,3,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1272,            lnza = lnza * epsilon + 0.3333333333332802;,3,2,0,0,0,0,0,0,1,3,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1273,            lnza = lnza * epsilon + -0.5;,3,2,0,0,0,0,0,0,2,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1274,            lnza = lnza * epsilon + 1.0;,3,2,0,0,0,0,0,0,1,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1275,            lnza = lnza * epsilon;,3,1,0,0,0,0,0,0,1,3,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1333,        if (x == -1) {,1,1,0,1,3,1,0,0,1,6,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1334,            return x/0.0;   // -Infinity,1,1,0,0,0,1,0,0,0,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1337,        if (x > 0 && 1/x == 0) { // x = Infinity,2,4,0,1,3,1,0,0,0,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1338,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1341,        if (x>1e-6 || x<-1e-6) {,2,3,0,1,3,1,0,0,1,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1342,            double xpa = 1.0 + x;,2,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1343,            double xpb = -(xpa - 1.0 - x);,3,1,0,1,2,1,0,0,1,6,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1345,            double hiPrec[] = new double[2];,1,0,0,0,4,3,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1347,"            final double lores = log(xpa, hiPrec);",1,0,0,0,2,2,3,0,2,5,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1348,            if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0,0,0,2,5,2,3,0,0,4,73,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1349,                return lores;,1,0,0,0,0,1,0,0,0,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1354,            double fx1 = xpb/xpa;,3,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1356,            double epsilon = 0.5 * fx1 + 1.0;,2,2,0,0,0,1,0,0,0,3,33,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1357,            epsilon = epsilon * fx1;,3,1,0,0,0,0,0,0,1,3,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1359,            return epsilon + hiPrec[1] + hiPrec[0];,1,1,1,0,4,1,0,0,0,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1363,        double y = x * F_1_3 - F_1_2;,4,2,0,0,0,1,0,0,0,3,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1364,        y = y * x + 1.0;,3,2,0,0,0,0,0,0,1,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1365,        y = y * x;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1367,        return y;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1375,        final double hiPrec[] = new double[2];,1,0,0,0,4,4,0,0,1,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1377,"        final double lores = log(x, hiPrec);",1,0,0,0,2,2,3,0,2,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1378,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0,0,0,2,5,2,3,0,0,4,73,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1379,            return lores;,1,0,0,0,0,1,0,0,0,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1382,        final double tmp = hiPrec[0] * HEX_40000000;,2,1,1,0,2,2,0,0,1,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1383,        final double lna = hiPrec[0] + tmp - tmp;,3,2,1,0,2,2,0,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1384,        final double lnb = hiPrec[0] - lna + hiPrec[1];,2,2,1,0,4,2,0,0,1,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1386,        final double rln10a = 0.4342944622039795;,1,0,0,0,0,2,0,0,1,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1387,        final double rln10b = 1.9699272335463627E-8;,1,0,0,0,0,2,0,0,1,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1389,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,8,7,0,0,0,1,0,0,0,3,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1409,        return log(x) / log(base);,0,1,0,1,4,1,4,0,2,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1423,            return 1.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1427,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1432,            long bits = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1433,            if ((bits & 0x8000000000000000L) != 0) {,1,2,0,2,5,1,0,0,0,5,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1435,                long yi = (long) y;,2,0,0,1,2,2,0,0,0,4,19,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1437,                if (y < 0 && y == yi && (yi & 1) == 1) {,4,6,0,2,5,1,0,0,0,5,40,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1438,                    return Double.NEGATIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1441,                if (y > 0 && y == yi && (yi & 1) == 1) {,4,6,0,2,5,1,0,0,0,5,40,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1442,                    return -0.0;,0,0,0,0,0,1,0,0,1,2,12,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1446,            if (y < 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1447,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1449,            if (y > 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1450,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1453,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1457,            if (y != y) { // y is NaN,2,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1458,                return y;,1,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1460,            if (y < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1461,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1463,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1468,            if (x * x == 1.0) {,2,2,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1469,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1472,            if (x * x > 1.0) {,2,2,0,1,3,1,0,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1473,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1475,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1480,            if (y != y) { // y is NaN,2,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1481,                return y;,1,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1484,            if (y < 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1485,                long yi = (long) y;,2,0,0,1,2,2,0,0,0,4,19,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1486,                if (y == yi && (yi & 1) == 1) {,3,4,0,2,5,1,0,0,0,5,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1487,                    return -0.0;,0,0,0,0,0,1,0,0,1,2,12,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1490,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1493,            if (y > 0)  {,1,1,0,1,3,1,0,0,0,5,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1494,                long yi = (long) y;,2,0,0,1,2,2,0,0,0,4,19,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1495,                if (y == yi && (yi & 1) == 1) {,3,4,0,2,5,1,0,0,0,5,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1496,                    return Double.NEGATIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1499,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1505,            if (x * x == 1.0) {,2,2,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1506,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1509,            if (x * x < 1.0) {,2,2,0,1,3,1,0,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1510,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1512,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1519,            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {,4,3,0,1,3,1,0,0,1,6,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1520,"                return pow(-x, y);",1,0,0,0,2,1,2,0,2,5,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1523,            if (y == (long) y) {,2,1,0,2,5,2,0,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1525,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",3,2,0,2,8,2,4,0,5,7,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1527,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1539,            double tmp1 = y * 9.31322574615478515625E-10;,2,1,0,0,0,1,0,0,0,3,45,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1540,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,2,1,0,0,0,1,0,0,0,3,48,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1541,            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;,6,3,0,1,2,0,0,0,1,5,56,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1542,            yb = y - ya;,3,1,0,0,0,0,0,0,1,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1548,            return lores;,1,0,0,0,0,1,0,0,0,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1588,        double x2 = x*x;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1590,        double p = 2.7553817452272217E-6;,1,0,0,0,0,1,0,0,0,2,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1591,        p = p * x2 + -1.9841269659586505E-4;,3,2,0,0,0,0,0,0,2,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1592,        p = p * x2 + 0.008333333333329196;,3,2,0,0,0,0,0,0,1,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1593,        p = p * x2 + -0.16666666666666666;,3,2,0,0,0,0,0,0,2,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1596,        p = p * x2 * x;,4,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1598,        return p;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1608,        double x2 = x*x;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1610,        double p = 2.479773539153719E-5;,1,0,0,0,0,1,0,0,0,2,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1611,        p = p * x2 + -0.0013888888689039883;,3,2,0,0,0,0,0,0,2,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1612,        p = p * x2 + 0.041666666666621166;,3,2,0,0,0,0,0,0,1,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1613,        p = p * x2 + -0.49999999999999994;,3,2,0,0,0,0,0,0,2,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1614,        p *= x2;,2,0,0,0,0,0,0,0,1,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1616,        return p;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1627,        int idx = (int) ((xa * 8.0) + 0.5);,2,2,0,2,6,2,0,0,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1628,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,2,1,1,0,2,2,0,0,1,6,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1631,        final double sintA = SINE_TABLE_A[idx];,1,0,1,0,2,2,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1632,        final double sintB = SINE_TABLE_B[idx];,1,0,1,0,2,2,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1633,        final double costA = COSINE_TABLE_A[idx];,1,0,1,0,2,2,0,0,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1634,        final double costB = COSINE_TABLE_B[idx];,1,0,1,0,2,2,0,0,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1637,        double sinEpsA = epsilon;,2,0,0,0,0,1,0,0,0,2,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1638,        double sinEpsB = polySine(epsilon);,1,0,0,1,2,1,2,0,1,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1639,        final double cosEpsA = 1.0;,1,0,0,0,0,2,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1640,        final double cosEpsB = polyCosine(epsilon);,1,0,0,1,2,2,2,0,2,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1643,        final double temp = sinEpsA * HEX_40000000;,3,1,0,0,0,2,0,0,1,4,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1644,        double temp2 = (sinEpsA + temp) - temp;,4,2,0,1,2,1,0,0,0,5,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1645,        sinEpsB +=  sinEpsA - temp2;,3,1,0,0,0,0,0,0,1,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1646,        sinEpsA = temp2;,2,0,0,0,0,0,0,0,1,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1672,        double a = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1673,        double b = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1675,        double t = sintA;,2,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1676,        double c = a + t;,3,1,0,0,0,1,0,0,0,3,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1677,        double d = -(c - a - t);,4,1,0,1,2,1,0,0,1,6,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1678,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1679,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1681,        t = costA * sinEpsA;,3,1,0,0,0,0,0,0,1,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1682,        c = a + t;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1683,        d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1684,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1685,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1687,        b = b + sintA * cosEpsB + costA * sinEpsB;,6,4,0,0,0,0,0,0,1,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1702,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,9,6,0,0,0,0,0,0,1,3,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1729,        if (xb != 0.0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1730,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,5,5,0,1,5,0,0,0,1,5,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1732,            c = a + t;,3,1,0,0,0,0,0,0,1,3,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1733,            d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1734,            a = c;,2,0,0,0,0,0,0,0,1,2,6,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1735,            b = b + d;,3,1,0,0,0,0,0,0,1,3,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1738,        result = a + b;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1740,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1751,        final double pi2a = 1.5707963267948966;,1,0,0,0,0,2,0,0,1,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1752,        final double pi2b = 6.123233995736766E-17;,1,0,0,0,0,2,0,0,1,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1754,        final double a = pi2a - xa;,3,1,0,0,0,2,0,0,1,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1755,        double b = -(a - pi2a + xa);,4,2,0,1,2,1,0,0,1,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1756,        b += pi2b - xb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1758,"        return sinQ(a, b);",0,0,0,0,2,1,3,0,1,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1771,        int idx = (int) ((xa * 8.0) + 0.5);,2,2,0,2,6,2,0,0,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1772,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,2,1,1,0,2,2,0,0,1,6,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1775,        final double sintA = SINE_TABLE_A[idx];,1,0,1,0,2,2,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1776,        final double sintB = SINE_TABLE_B[idx];,1,0,1,0,2,2,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1777,        final double costA = COSINE_TABLE_A[idx];,1,0,1,0,2,2,0,0,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1778,        final double costB = COSINE_TABLE_B[idx];,1,0,1,0,2,2,0,0,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1781,        double sinEpsA = epsilon;,2,0,0,0,0,1,0,0,0,2,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1782,        double sinEpsB = polySine(epsilon);,1,0,0,1,2,1,2,0,1,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1783,        final double cosEpsA = 1.0;,1,0,0,0,0,2,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1784,        final double cosEpsB = polyCosine(epsilon);,1,0,0,1,2,2,2,0,2,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1787,        double temp = sinEpsA * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1788,        double temp2 = (sinEpsA + temp) - temp;,4,2,0,1,2,1,0,0,0,5,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1789,        sinEpsB +=  sinEpsA - temp2;,3,1,0,0,0,0,0,0,1,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1790,        sinEpsA = temp2;,2,0,0,0,0,0,0,0,1,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1815,        double a = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1816,        double b = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1819,        double t = sintA;,2,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1820,        double c = a + t;,3,1,0,0,0,1,0,0,0,3,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1821,        double d = -(c - a - t);,4,1,0,1,2,1,0,0,1,6,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1822,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1823,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1825,        t = costA*sinEpsA;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1826,        c = a + t;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1827,        d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1828,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1829,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1831,        b = b + sintA*cosEpsB + costA*sinEpsB;,6,4,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1832,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,9,6,0,0,0,0,0,0,1,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1834,        double sina = a + b;,3,1,0,0,0,1,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1835,        double sinb = -(sina - a - b);,4,1,0,1,2,1,0,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1839,        a = b = c = d = 0.0;,4,0,0,0,0,0,0,0,4,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1841,        t = costA*cosEpsA;,3,1,0,0,0,0,0,0,1,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1842,        c = a + t;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1843,        d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1844,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1845,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1847,        t = -sintA*sinEpsA;,3,1,0,0,0,0,0,0,2,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1848,        c = a + t;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1849,        d = -(c - a - t);,4,1,0,1,2,0,0,0,2,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1850,        a = c;,2,0,0,0,0,0,0,0,1,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1851,        b = b + d;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1853,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,8,6,0,0,0,0,0,0,1,3,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1854,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,8,6,0,1,2,0,0,0,1,5,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1856,        double cosa = a + b;,3,1,0,0,0,1,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1857,        double cosb = -(cosa - a - b);,4,1,0,1,2,1,0,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1859,        if (cotanFlag) {,1,0,0,1,3,1,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1861,            tmp = cosa; cosa = sina; sina = tmp;,6,0,0,0,0,0,0,0,3,2,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1862,            tmp = cosb; cosb = sinb; sinb = tmp;,6,0,0,0,0,0,0,0,3,2,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1876,        double est = sina/cosa;,3,1,0,0,0,1,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1879,        temp = est * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1880,        double esta = (est + temp) - temp;,4,2,0,1,2,1,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1881,        double estb =  est - esta;,3,1,0,0,0,1,0,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1883,        temp = cosa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1884,        double cosaa = (cosa + temp) - temp;,4,2,0,1,2,1,0,0,0,5,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1885,        double cosab =  cosa - cosaa;,3,1,0,0,0,1,0,0,0,3,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1888,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,11,9,0,1,2,2,0,0,0,5,114,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1889,        err += sinb/cosa;                     // Change in est due to sinb,3,1,0,0,0,0,0,0,1,3,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1890,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,5,3,0,0,0,0,0,0,2,3,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1892,        if (xb != 0.0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1895,            double xbadj = xb + est*est*xb;,5,2,0,0,0,1,0,0,0,3,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1896,            if (cotanFlag) {,1,0,0,1,3,1,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1897,                xbadj = -xbadj;,2,0,0,0,0,0,0,0,2,2,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1900,            err += xbadj;,2,0,0,0,0,0,0,0,1,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1903,        return est+err;,2,1,0,0,0,1,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1920,        long inbits = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,41,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1921,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,2,3,0,2,6,2,0,0,0,5,53,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1924,        inbits &= 0x000fffffffffffffL;,1,0,0,0,0,0,0,0,1,2,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1925,        inbits |= 0x0010000000000000L;,1,0,0,0,0,0,0,0,1,2,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1928,        exponent++;,1,0,0,0,0,0,0,0,1,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1929,        inbits <<= 11;,1,0,0,0,0,0,0,0,1,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1935,        int idx = exponent >> 6;,2,1,0,0,0,1,0,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1936,        int shift = exponent - (idx << 6);,3,2,0,1,2,1,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1938,        if (shift != 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1939,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,4,3,1,1,6,0,0,0,1,6,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1940,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,2,2,1,1,4,0,0,0,1,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1941,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,4,5,1,2,10,0,0,0,1,6,70,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1942,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,5,6,1,2,10,0,0,0,1,6,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1944,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,3,2,1,1,4,0,0,0,1,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1945,            shpiA = RECIP_2PI[idx];,1,0,1,0,2,0,0,0,1,4,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1946,            shpiB = RECIP_2PI[idx+1];,2,1,1,0,2,0,0,0,1,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1950,        long a = inbits >>> 32;,2,1,0,0,0,1,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1951,        long b = inbits & 0xffffffffL;,2,1,0,0,0,1,0,0,0,3,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1953,        long c = shpiA >>> 32;,2,1,0,0,0,1,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1954,        long d = shpiA & 0xffffffffL;,2,1,0,0,0,1,0,0,0,3,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1956,        long ac = a * c;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1957,        long bd = b * d;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1958,        long bc = b * c;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1959,        long ad = a * d;,3,1,0,0,0,1,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1961,        long prodB = bd + (ad << 32);,3,2,0,1,2,1,0,0,0,5,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1962,        long prodA = ac + (ad >>> 32);,3,2,0,1,2,1,0,0,0,5,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1964,        boolean bita = (bd & 0x8000000000000000L) != 0;,2,2,0,1,2,1,0,0,0,5,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1965,        boolean bitb = (ad & 0x80000000L ) != 0;,2,2,0,1,2,1,0,0,0,5,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1966,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,2,2,0,1,2,1,0,0,0,5,52,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1969,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1971,            prodA++;,1,0,0,0,0,0,0,0,1,2,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1974,        bita = (prodB & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1975,        bitb = (bc & 0x80000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1977,        prodB = prodB + (bc << 32);,3,2,0,1,2,0,0,0,1,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1978,        prodA = prodA + (bc >>> 32);,3,2,0,1,2,0,0,0,1,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1980,        bitsum = (prodB & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1983,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1985,            prodA++;,1,0,0,0,0,0,0,0,1,2,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1989,        c = shpiB >>> 32;,2,1,0,0,0,0,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1990,        d = shpiB & 0xffffffffL;,2,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1991,        ac = a * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1992,        bc = b * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1993,        ad = a * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1996,        ac = ac + ((bc + ad) >>> 32);,4,3,0,2,4,0,0,0,1,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1998,        bita = (prodB & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,1999,        bitb = (ac & 0x8000000000000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2000,        prodB += ac;,2,0,0,0,0,0,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2001,        bitsum = (prodB & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2003,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2005,            prodA++;,1,0,0,0,0,0,0,0,1,2,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2009,        c = shpi0 >>> 32;,2,1,0,0,0,0,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2010,        d = shpi0 & 0xffffffffL;,2,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2012,        bd = b * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2013,        bc = b * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2014,        ad = a * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2016,        prodA += bd + ((bc + ad) << 32);,4,3,0,2,4,0,0,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2028,        int intPart = (int)(prodA >>> 62);,2,1,0,1,4,2,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2031,        prodA <<= 2;,1,0,0,0,0,0,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2032,        prodA |= prodB >>> 62;,2,1,0,0,0,0,0,0,1,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2033,        prodB <<= 2;,1,0,0,0,0,0,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2036,        a = prodA >>> 32;,2,1,0,0,0,0,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2037,        b = prodA & 0xffffffffL;,2,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2039,        c = PI_O_4_BITS[0] >>> 32;,1,1,1,0,2,0,0,0,1,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2040,        d = PI_O_4_BITS[0] & 0xffffffffL;,1,1,1,0,2,0,0,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2042,        ac = a * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2043,        bd = b * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2044,        bc = b * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2045,        ad = a * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2047,        long prod2B = bd + (ad << 32);,3,2,0,1,2,1,0,0,0,5,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2048,        long prod2A = ac + (ad >>> 32);,3,2,0,1,2,1,0,0,0,5,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2050,        bita = (bd & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2051,        bitb = (ad & 0x80000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2052,        bitsum = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2055,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2057,            prod2A++;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2060,        bita = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2061,        bitb = (bc & 0x80000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2063,        prod2B = prod2B + (bc << 32);,3,2,0,1,2,0,0,0,1,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2064,        prod2A = prod2A + (bc >>> 32);,3,2,0,1,2,0,0,0,1,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2066,        bitsum = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2069,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2071,            prod2A++;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2075,        c = PI_O_4_BITS[1] >>> 32;,1,1,1,0,2,0,0,0,1,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2076,        d = PI_O_4_BITS[1] & 0xffffffffL;,1,1,1,0,2,0,0,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2077,        ac = a * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2078,        bc = b * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2079,        ad = a * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2082,        ac = ac + ((bc + ad) >>> 32);,4,3,0,2,4,0,0,0,1,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2084,        bita = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2085,        bitb = (ac & 0x8000000000000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2086,        prod2B += ac;,2,0,0,0,0,0,0,0,1,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2087,        bitsum = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2089,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2091,            prod2A++;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2095,        a = prodB >>> 32;,2,1,0,0,0,0,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2096,        b = prodB & 0xffffffffL;,2,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2097,        c = PI_O_4_BITS[0] >>> 32;,1,1,1,0,2,0,0,0,1,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2098,        d = PI_O_4_BITS[0] & 0xffffffffL;,1,1,1,0,2,0,0,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2099,        ac = a * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2100,        bc = b * c;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2101,        ad = a * d;,3,1,0,0,0,0,0,0,1,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2104,        ac = ac + ((bc + ad) >>> 32);,4,3,0,2,4,0,0,0,1,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2106,        bita = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2107,        bitb = (ac & 0x8000000000000000L ) != 0;,2,2,0,1,2,0,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2108,        prod2B += ac;,2,0,0,0,0,0,0,0,1,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2109,        bitsum = (prod2B & 0x8000000000000000L) != 0;,2,2,0,1,2,0,0,0,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2111,        if ( (bita && bitb) ||,2,2,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2113,            prod2A++;,1,0,0,0,0,0,0,0,1,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2117,        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits,3,2,0,1,2,1,0,0,0,5,68,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2118,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits,5,5,0,3,8,1,0,0,0,5,102,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2120,        double sumA = tmpA + tmpB;,3,1,0,0,0,1,0,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2121,        double sumB = -(sumA - tmpA - tmpB);,4,1,0,1,2,1,0,0,1,6,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2124,        result[0] = intPart;,1,0,1,0,2,0,0,0,1,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2125,        result[1] = sumA * 2.0;,1,1,1,0,2,0,0,0,1,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2126,        result[2] = sumB * 2.0;,1,1,1,0,2,0,0,0,1,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2127,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2135,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2136,        int quadrant = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2138,        double xb = 0.0;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2141,        xa = x;,2,0,0,0,0,0,0,0,1,2,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2142,        if (x < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2143,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2144,            xa = -xa;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2148,        if (xa == 0.0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2149,            long bits = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2150,            if (bits < 0) {,1,1,0,1,3,1,0,0,0,5,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2151,                return -0.0;,0,0,0,0,0,1,0,0,1,2,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2153,            return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2156,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,5,3,0,1,3,1,0,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2157,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2161,        if (xa > 3294198.0) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2165,            double reduceResults[] = new double[3];,1,0,0,0,4,3,0,0,0,3,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2166,"            reducePayneHanek(xa, reduceResults);",0,0,0,0,2,0,3,0,1,3,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2167,            quadrant = ((int) reduceResults[0]) & 3;,1,1,1,2,6,1,0,0,1,7,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2168,            xa = reduceResults[1];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2169,            xb = reduceResults[2];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2170,        } else if (xa > 1.5707963267948966) {,1,1,0,1,4,2,0,0,0,5,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2175,            int k = (int)(xa * 0.6366197723675814);,2,1,0,1,4,2,0,0,0,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2181,                double a = -k * 1.570796251296997;,2,1,0,0,0,1,0,0,1,4,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2182,                remA = xa + a;,3,1,0,0,0,0,0,0,1,3,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2183,                remB = -(remA - xa - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2185,                a = -k * 7.549789948768648E-8;,2,1,0,0,0,0,0,0,2,3,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2186,                double b = remA;,2,0,0,0,0,1,0,0,0,2,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2187,                remA = a + b;,3,1,0,0,0,0,0,0,1,3,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2188,                remB += -(remA - b - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2190,                a = -k * 6.123233995736766E-17;,2,1,0,0,0,0,0,0,2,3,31,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2191,                b = remA;,2,0,0,0,0,0,0,0,1,2,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2192,                remA = a + b;,3,1,0,0,0,0,0,0,1,3,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2193,                remB += -(remA - b - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2195,                if (remA > 0.0) {,1,1,0,1,3,1,0,0,0,5,17,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2196,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2202,                k--;,1,0,0,0,0,0,0,0,1,2,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2203,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2204,            quadrant = k & 3;,2,1,0,0,0,0,0,0,1,3,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2205,            xa = remA;,2,0,0,0,0,0,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2206,            xb = remB;,2,0,0,0,0,0,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2209,        if (negative) {,1,0,0,1,3,1,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2210,            quadrant ^= 2;  // Flip bit 1,1,0,0,0,0,0,0,0,1,2,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2213,        switch (quadrant) {,1,0,0,1,3,1,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2215,"                return sinQ(xa, xb);",0,0,0,0,2,1,3,0,1,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2217,"                return cosQ(xa, xb);",0,0,0,0,2,1,3,0,1,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2219,"                return -sinQ(xa, xb);",0,0,0,0,2,1,3,0,2,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2221,"                return -cosQ(xa, xb);",0,0,0,0,2,1,3,0,2,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2223,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2233,        int quadrant = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2236,        double xa = x;,2,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2237,        if (x < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2238,            xa = -xa;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2241,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,5,3,0,1,3,1,0,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2242,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2246,        double xb = 0;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2247,        if (xa > 3294198.0) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2251,            double reduceResults[] = new double[3];,1,0,0,0,4,3,0,0,0,3,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2252,"            reducePayneHanek(xa, reduceResults);",0,0,0,0,2,0,3,0,1,3,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2253,            quadrant = ((int) reduceResults[0]) & 3;,1,1,1,2,6,1,0,0,1,7,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2254,            xa = reduceResults[1];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2255,            xb = reduceResults[2];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2256,        } else if (xa > 1.5707963267948966) {,1,1,0,1,4,2,0,0,0,5,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2261,            int k = (int)(xa * 0.6366197723675814);,2,1,0,1,4,2,0,0,0,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2267,                double a = -k * 1.570796251296997;,2,1,0,0,0,1,0,0,1,4,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2268,                remA = xa + a;,3,1,0,0,0,0,0,0,1,3,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2269,                remB = -(remA - xa - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2271,                a = -k * 7.549789948768648E-8;,2,1,0,0,0,0,0,0,2,3,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2272,                double b = remA;,2,0,0,0,0,1,0,0,0,2,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2273,                remA = a + b;,3,1,0,0,0,0,0,0,1,3,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2274,                remB += -(remA - b - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2276,                a = -k * 6.123233995736766E-17;,2,1,0,0,0,0,0,0,2,3,31,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2277,                b = remA;,2,0,0,0,0,0,0,0,1,2,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2278,                remA = a + b;,3,1,0,0,0,0,0,0,1,3,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2279,                remB += -(remA - b - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2281,                if (remA > 0.0) {,1,1,0,1,3,1,0,0,0,5,17,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2282,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2288,                k--;,1,0,0,0,0,0,0,0,1,2,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2289,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2290,            quadrant = k & 3;,2,1,0,0,0,0,0,0,1,3,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2291,            xa = remA;,2,0,0,0,0,0,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2292,            xb = remB;,2,0,0,0,0,0,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2298,        switch (quadrant) {,1,0,0,1,3,1,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2300,"                return cosQ(xa, xb);",0,0,0,0,2,1,3,0,1,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2302,"                return -sinQ(xa, xb);",0,0,0,0,2,1,3,0,2,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2304,"                return -cosQ(xa, xb);",0,0,0,0,2,1,3,0,2,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2306,"                return sinQ(xa, xb);",0,0,0,0,2,1,3,0,1,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2308,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2318,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2319,        int quadrant = 0;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2322,        double xa = x;,2,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2323,        if (x < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2324,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2325,            xa = -xa;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2329,        if (xa == 0.0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2330,            long bits = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2331,            if (bits < 0) {,1,1,0,1,3,1,0,0,0,5,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2332,                return -0.0;,0,0,0,0,0,1,0,0,1,2,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2334,            return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2337,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,5,3,0,1,3,1,0,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2338,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2342,        double xb = 0;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2343,        if (xa > 3294198.0) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2347,            double reduceResults[] = new double[3];,1,0,0,0,4,3,0,0,0,3,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2348,"            reducePayneHanek(xa, reduceResults);",0,0,0,0,2,0,3,0,1,3,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2349,            quadrant = ((int) reduceResults[0]) & 3;,1,1,1,2,6,1,0,0,1,7,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2350,            xa = reduceResults[1];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2351,            xb = reduceResults[2];,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2352,        } else if (xa > 1.5707963267948966) {,1,1,0,1,4,2,0,0,0,5,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2357,            int k = (int)(xa * 0.6366197723675814);,2,1,0,1,4,2,0,0,0,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2363,                double a = -k * 1.570796251296997;,2,1,0,0,0,1,0,0,1,4,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2364,                remA = xa + a;,3,1,0,0,0,0,0,0,1,3,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2365,                remB = -(remA - xa - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2367,                a = -k * 7.549789948768648E-8;,2,1,0,0,0,0,0,0,2,3,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2368,                double b = remA;,2,0,0,0,0,1,0,0,0,2,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2369,                remA = a + b;,3,1,0,0,0,0,0,0,1,3,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2370,                remB += -(remA - b - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2372,                a = -k * 6.123233995736766E-17;,2,1,0,0,0,0,0,0,2,3,31,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2373,                b = remA;,2,0,0,0,0,0,0,0,1,2,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2374,                remA = a + b;,3,1,0,0,0,0,0,0,1,3,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2375,                remB += -(remA - b - a);,4,1,0,1,2,0,0,0,2,5,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2377,                if (remA > 0.0) {,1,1,0,1,3,1,0,0,0,5,17,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2378,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2384,                k--;,1,0,0,0,0,0,0,0,1,2,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2385,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2386,            quadrant = k & 3;,2,1,0,0,0,0,0,0,1,3,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2387,            xa = remA;,2,0,0,0,0,0,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2388,            xb = remB;,2,0,0,0,0,0,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2391,        if (xa > 1.5) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2393,            final double pi2a = 1.5707963267948966;,1,0,0,0,0,2,0,0,1,3,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2394,            final double pi2b = 6.123233995736766E-17;,1,0,0,0,0,2,0,0,1,3,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2396,            final double a = pi2a - xa;,3,1,0,0,0,2,0,0,1,4,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2397,            double b = -(a - pi2a + xa);,4,2,0,1,2,1,0,0,1,6,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2398,            b += pi2b - xb;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2400,            xa = a + b;,3,1,0,0,0,0,0,0,1,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2401,            xb = -(xa - a - b);,4,1,0,1,2,0,0,0,2,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2402,            quadrant ^= 1;,1,0,0,0,0,0,0,0,1,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2403,            negative ^= true;,1,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2407,        if ((quadrant & 1) == 0) {,1,2,0,2,5,1,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2408,"            result = tanQ(xa, xb, false);",1,0,0,0,2,0,3,0,3,4,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2410,"            result = -tanQ(xa, xb, true);",1,0,0,0,2,0,3,0,4,4,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2413,        if (negative) {,1,0,0,1,3,1,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2414,            result = -result;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2417,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2426,"        return atan(x, 0.0, false);",0,0,0,0,2,1,2,0,2,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2436,        boolean negate = false;,1,0,0,0,0,1,0,0,1,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2439,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,1,1,0,1,3,2,0,0,0,5,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2440,"            return leftPlane ? copySign(Math.PI, xa) : xa;",4,0,0,0,2,1,2,0,1,5,46,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2443,        if (xa < 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2445,            xa = -xa;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2446,            xb = -xb;,2,0,0,0,0,0,0,0,2,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2447,            negate = true;,1,0,0,0,0,0,0,0,2,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2450,        if (xa > 1.633123935319537E16) { // Very large input,1,1,0,1,3,1,0,0,0,5,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2451,            return (negate ^ leftPlane) ? (-Math.PI/2.0) : (Math.PI/2.0);,6,3,0,1,6,1,0,0,1,6,61,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2455,        if (xa < 1.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2456,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,4,4,0,3,8,1,0,0,2,6,65,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2458,            double temp = 1.0/xa;,2,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2459,            idx = (int) (-((-1.7168146928204136 * temp * temp + 8.0) * temp) + 13.07);,4,4,0,3,8,1,0,0,3,6,74,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2461,        double epsA = xa - TANGENT_TABLE_A[idx];,2,1,1,0,2,1,0,0,0,5,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2462,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,3,2,1,1,4,1,0,0,1,7,50,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2463,        epsB += xb - TANGENT_TABLE_B[idx];,2,1,1,0,2,0,0,0,1,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2465,        double temp = epsA + epsB;,3,1,0,0,0,1,0,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2466,        epsB = -(temp - epsA - epsB);,4,1,0,1,2,0,0,0,2,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2467,        epsA = temp;,2,0,0,0,0,0,0,0,1,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2470,        temp = xa * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2471,        double ya = xa + temp - temp;,4,2,0,0,0,1,0,0,0,3,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2472,        double yb = xb + xa - ya;,4,2,0,0,0,1,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2473,        xa = ya;,2,0,0,0,0,0,0,0,1,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2474,        xb += yb;,2,0,0,0,0,0,0,0,1,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2477,        if (idx == 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2480,            double denom = 1.0 / (1.0 + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,3,5,1,2,10,1,0,0,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2482,            ya = epsA * denom;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2483,            yb = epsB * denom;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2484,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2485,            double temp2 = xa * TANGENT_TABLE_A[idx];,2,1,1,0,2,1,0,0,0,5,41,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2486,            double za = 1.0 + temp2;,2,1,0,0,0,1,0,0,0,3,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2487,            double zb = -(za - 1.0 - temp2);,3,1,0,1,2,1,0,0,1,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2488,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,3,3,1,0,4,0,0,0,1,5,62,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2489,            temp = za + temp2;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2490,            zb += -(temp - za - temp2);,4,1,0,1,2,0,0,0,2,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2491,            za = temp;,2,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2493,            zb += xb * TANGENT_TABLE_B[idx];,2,1,1,0,2,0,0,0,1,5,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2494,            ya = epsA / za;,3,1,0,0,0,0,0,0,1,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2496,            temp = ya * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2497,            final double yaa = (ya + temp) - temp;,4,2,0,1,2,2,0,0,1,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2498,            final double yab = ya - yaa;,3,1,0,0,0,2,0,0,1,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2500,            temp = za * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2501,            final double zaa = (za + temp) - temp;,4,2,0,1,2,2,0,0,1,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2502,            final double zab = za - zaa;,3,1,0,0,0,2,0,0,1,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2505,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,11,9,0,1,2,0,0,0,1,5,65,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2507,            yb += -epsA * zb / za / za;,5,3,0,0,0,0,0,0,2,3,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2508,            yb += epsB / za;,3,1,0,0,0,0,0,0,1,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2512,        epsA = ya;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2513,        epsB = yb;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2516,        double epsA2 = epsA*epsA;,3,1,0,0,0,1,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2527,        yb = 0.07490822288864472;,1,0,0,0,0,0,0,0,1,2,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2528,        yb = yb * epsA2 + -0.09088450866185192;,3,2,0,0,0,0,0,0,2,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2529,        yb = yb * epsA2 + 0.11111095942313305;,3,2,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2530,        yb = yb * epsA2 + -0.1428571423679182;,3,2,0,0,0,0,0,0,2,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2531,        yb = yb * epsA2 + 0.19999999999923582;,3,2,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2532,        yb = yb * epsA2 + -0.33333333333333287;,3,2,0,0,0,0,0,0,2,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2533,        yb = yb * epsA2 * epsA;,4,1,0,0,0,0,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2536,        ya = epsA;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2538,        temp = ya + yb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2539,        yb = -(temp - ya - yb);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2540,        ya = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2543,        yb += epsB / (1.0 + epsA * epsA);,4,3,0,1,2,0,0,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2549,        double za = EIGHTHS[idx] + ya;,2,1,1,0,2,1,0,0,0,5,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2550,        double zb = -(za - EIGHTHS[idx] - ya);,3,1,1,1,4,1,0,0,1,7,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2551,        temp = za + yb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2552,        zb += -(temp - za - yb);,4,1,0,1,2,0,0,0,2,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2553,        za = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2555,        result = za + zb;,3,1,0,0,0,0,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2556,        resultb = -(result - za - zb);,4,1,0,1,2,0,0,0,2,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2558,        if (leftPlane) {,1,0,0,1,3,1,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2560,            final double pia = 1.5707963267948966*2.0;,1,1,0,0,0,2,0,0,1,4,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2561,            final double pib = 6.123233995736766E-17*2.0;,1,1,0,0,0,2,0,0,1,4,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2563,            za = pia - result;,3,1,0,0,0,0,0,0,1,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2564,            zb = -(za - pia + result);,4,2,0,1,2,0,0,0,2,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2565,            zb += pib - resultb;,3,1,0,0,0,0,0,0,1,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2567,            result = za + zb;,3,1,0,0,0,0,0,0,1,3,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2568,            resultb = -(result - za - zb);,4,1,0,1,2,0,0,0,2,5,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2572,        if (negate ^ leftPlane) {,2,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2573,            result = -result;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2576,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2586,        if (x !=x || y != y) {,4,3,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2587,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2590,        if (y == 0.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2591,            double result = x*y;,3,1,0,0,0,1,0,0,0,3,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2592,            double invx = 1.0/x;,2,1,0,0,0,1,0,0,0,3,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2593,            double invy = 1.0/y;,2,1,0,0,0,1,0,0,0,3,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2595,            if (invx == 0.0) { // X is infinite,1,1,0,1,3,1,0,0,0,5,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2596,                if (x > 0) {,1,1,0,1,3,1,0,0,0,5,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2597,                    return y; // return +/- 0.0,1,0,0,0,0,2,0,0,0,2,27,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2599,"                    return copySign(Math.PI, y);",2,0,0,0,2,1,2,0,1,5,28,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2603,            if (x < 0.0 || invx < 0.0) {,2,3,0,1,3,1,0,0,0,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2604,                if (y < 0.0 || invy < 0.0) {,2,3,0,1,3,1,0,0,0,5,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2605,                    return -Math.PI;,2,0,0,0,0,1,0,0,1,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2607,                    return Math.PI;,2,0,0,0,0,1,0,0,0,2,15,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2610,                return result;,1,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2616,        if (y == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2617,            if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2618,                return Math.PI/4.0;,2,1,0,0,0,1,0,0,0,3,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2621,            if (x == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2622,                return Math.PI * F_3_4;,3,1,0,0,0,1,0,0,0,3,23,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2625,            return Math.PI/2.0;,2,1,0,0,0,1,0,0,0,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2628,        if (y == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2629,            if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2630,                return -Math.PI/4.0;,2,1,0,0,0,1,0,0,1,4,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2633,            if (x == Double.NEGATIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2634,                return -Math.PI * F_3_4;,3,1,0,0,0,1,0,0,1,4,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2637,            return -Math.PI/2.0;,2,1,0,0,0,1,0,0,1,4,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2640,        if (x == Double.POSITIVE_INFINITY) {,3,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2641,            if (y > 0.0 || 1/y > 0.0) {,2,4,0,1,3,1,0,0,0,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2642,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2645,            if (y < 0.0 || 1/y < 0.0) {,2,4,0,1,3,1,0,0,0,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2646,                return -0.0;,0,0,0,0,0,1,0,0,1,2,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2650,        if (x == Double.NEGATIVE_INFINITY),3,1,0,1,2,1,0,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2652,            if (y > 0.0 || 1/y > 0.0) {,2,4,0,1,3,1,0,0,0,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2653,                return Math.PI;,2,0,0,0,0,1,0,0,0,2,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2656,            if (y < 0.0 || 1/y < 0.0) {,2,4,0,1,3,1,0,0,0,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2657,                return -Math.PI;,2,0,0,0,0,1,0,0,1,3,16,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2663,        if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2664,            if (y > 0.0 || 1/y > 0.0) {,2,4,0,1,3,1,0,0,0,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2665,                return Math.PI/2.0;,2,1,0,0,0,1,0,0,0,3,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2668,            if (y < 0.0 || 1/y < 0.0) {,2,4,0,1,3,1,0,0,0,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2669,                return -Math.PI/2.0;,2,1,0,0,0,1,0,0,1,4,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2674,        final double r = y/x;,3,1,0,0,0,2,0,0,1,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2675,        if (Double.isInfinite(r)) { // bypass calculations that can create NaN,0,0,0,2,5,1,3,0,0,4,70,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2676,"            return atan(r, 0, x < 0);",1,1,0,0,2,1,2,0,1,6,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2679,        double ra = doubleHighPart(r);,1,0,0,1,2,1,2,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2680,        double rb = r - ra;,3,1,0,0,0,1,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2683,        final double xa = doubleHighPart(x);,1,0,0,1,2,2,2,0,2,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2684,        final double xb = x - xa;,3,1,0,0,0,2,0,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2686,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,11,9,0,1,2,0,0,0,1,5,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2688,        double temp = ra + rb;,3,1,0,0,0,1,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2689,        rb = -(temp - ra - rb);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2690,        ra = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2692,        if (ra == 0) { // Fix up the sign so atan works correctly,1,1,0,1,3,1,0,0,0,5,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2693,"            ra = copySign(0.0, y);",1,0,0,0,2,0,2,0,2,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2697,"        double result = atan(ra, rb, x < 0);",2,1,0,0,2,1,3,0,1,6,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2699,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2707,      if (x != x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2708,          return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2711,      if (x > 1.0 || x < -1.0) {,2,3,0,1,3,1,0,0,1,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2712,          return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2715,      if (x == 1.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2716,          return Math.PI/2.0;,2,1,0,0,0,1,0,0,0,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2719,      if (x == -1.0) {,1,1,0,1,3,1,0,0,1,6,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2720,          return -Math.PI/2.0;,2,1,0,0,0,1,0,0,1,4,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2723,      if (x == 0.0) { // Matches +/- 0.0; return correct sign,1,1,0,1,3,2,0,0,0,5,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2724,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2730,      double temp = x * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2731,      final double xa = x + temp - temp;,4,2,0,0,0,2,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2732,      final double xb = x - xa;,3,1,0,0,0,2,0,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2735,      double ya = xa*xa;,3,1,0,0,0,1,0,0,0,3,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2736,      double yb = xa*xb*2.0 + xb*xb;,5,3,0,0,0,1,0,0,0,3,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2739,      ya = -ya;,2,0,0,0,0,0,0,0,2,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2740,      yb = -yb;,2,0,0,0,0,0,0,0,2,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2742,      double za = 1.0 + ya;,2,1,0,0,0,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2743,      double zb = -(za - 1.0 - ya);,3,1,0,1,2,1,0,0,1,6,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2745,      temp = za + yb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2746,      zb += -(temp - za - yb);,4,1,0,1,2,0,0,0,2,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2747,      za = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2751,      y = sqrt(za);,1,0,0,1,2,0,2,0,2,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2752,      temp = y * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2753,      ya = y + temp - temp;,4,2,0,0,0,0,0,0,1,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2754,      yb = y - ya;,3,1,0,0,0,0,0,0,1,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2757,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,9,8,0,1,4,0,0,0,1,5,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2760,      double dx = zb / (2.0*y);,3,2,0,1,2,1,0,0,0,5,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2763,      double r = x/y;,3,1,0,0,0,1,0,0,0,3,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2764,      temp = r * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2765,      double ra = r + temp - temp;,4,2,0,0,0,1,0,0,0,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2766,      double rb = r - ra;,3,1,0,0,0,1,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2768,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,11,9,0,1,2,1,0,0,1,6,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2769,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,5,3,0,0,0,0,0,0,2,3,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2771,      temp = ra + rb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2772,      rb = -(temp - ra - rb);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2773,      ra = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2775,"      return atan(ra, rb, false);",0,0,0,0,2,1,3,0,2,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2783,      if (x != x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2784,          return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2787,      if (x > 1.0 || x < -1.0) {,2,3,0,1,3,1,0,0,1,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2788,          return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2791,      if (x == -1.0) {,1,1,0,1,3,1,0,0,1,6,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2792,          return Math.PI;,2,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2795,      if (x == 1.0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2796,          return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2799,      if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2800,          return Math.PI/2.0;,2,1,0,0,0,1,0,0,0,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2806,      double temp = x * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2807,      final double xa = x + temp - temp;,4,2,0,0,0,2,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2808,      final double xb = x - xa;,3,1,0,0,0,2,0,0,1,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2811,      double ya = xa*xa;,3,1,0,0,0,1,0,0,0,3,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2812,      double yb = xa*xb*2.0 + xb*xb;,5,3,0,0,0,1,0,0,0,3,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2815,      ya = -ya;,2,0,0,0,0,0,0,0,2,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2816,      yb = -yb;,2,0,0,0,0,0,0,0,2,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2818,      double za = 1.0 + ya;,2,1,0,0,0,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2819,      double zb = -(za - 1.0 - ya);,3,1,0,1,2,1,0,0,1,6,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2821,      temp = za + yb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2822,      zb += -(temp - za - yb);,4,1,0,1,2,0,0,0,2,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2823,      za = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2826,      double y = sqrt(za);,1,0,0,1,2,1,2,0,1,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2827,      temp = y * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2828,      ya = y + temp - temp;,4,2,0,0,0,0,0,0,1,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2829,      yb = y - ya;,3,1,0,0,0,0,0,0,1,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2832,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,9,8,0,1,4,0,0,0,1,5,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2835,      yb += zb / (2.0*y);,3,2,0,1,2,0,0,0,1,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2836,      y = ya+yb;,3,1,0,0,0,0,0,0,1,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2837,      yb = -(y - ya - yb);,4,1,0,1,2,0,0,0,2,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2840,      double r = y/x;,3,1,0,0,0,1,0,0,0,3,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2843,      if (Double.isInfinite(r)) { // x is effectively zero,0,0,0,2,5,1,3,0,0,4,52,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2844,          return Math.PI/2; // so return the appropriate value,2,1,0,0,0,2,0,0,0,3,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2847,      double ra = doubleHighPart(r);,1,0,0,1,2,1,2,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2848,      double rb = r - ra;,3,1,0,0,0,1,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2850,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,11,9,0,1,2,1,0,0,1,6,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2851,      rb += yb / x;  // Add in effect additional bits of sqrt.,3,1,0,0,0,0,0,0,1,3,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2853,      temp = ra + rb;,3,1,0,0,0,0,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2854,      rb = -(temp - ra - rb);,4,1,0,1,2,0,0,0,2,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2855,      ra = temp;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2857,"      return atan(ra, rb, x<0);",1,1,0,0,2,1,3,0,1,6,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2866,      long inbits = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,41,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2867,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,2,3,0,2,6,2,0,0,0,5,53,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2868,      boolean subnormal = false;,1,0,0,0,0,1,0,0,1,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2870,      if (exponent == -1023) {,1,1,0,1,3,1,0,0,1,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2871,          if (x == 0) {,1,1,0,1,3,1,0,0,0,5,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2872,              return x;,1,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2876,          subnormal = true;,1,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2877,          x *= 1.8014398509481984E16;  // 2^54,1,0,0,0,0,0,0,0,1,2,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2878,          inbits = Double.doubleToLongBits(x);,1,0,0,1,2,0,3,0,1,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2879,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,2,3,0,2,6,1,0,0,1,6,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2882,      if (exponent == 1024) {,1,1,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2884,          return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2888,      int exp3 = exponent / 3;,2,1,0,0,0,1,0,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2891,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,2,2,0,1,3,1,2,0,0,6,68,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2895,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,2,2,0,2,4,2,2,0,1,7,98,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2898,      double est = -0.010714690733195933;,1,0,0,0,0,1,0,0,1,3,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2899,      est = est * mant + 0.0875862700108075;,3,2,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2900,      est = est * mant + -0.3058015757857271;,3,2,0,0,0,0,0,0,2,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2901,      est = est * mant + 0.7249995199969751;,3,2,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2902,      est = est * mant + 0.5039018405998233;,3,2,0,0,0,0,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2904,      est *= CBRTTWO[exponent % 3 + 2];,2,2,1,0,2,0,0,0,1,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2909,      final double xs = x / (p2*p2*p2);,5,2,0,1,2,2,0,0,1,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2910,      est += (xs - est*est*est) / (3*est*est);,7,4,0,1,4,0,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2911,      est += (xs - est*est*est) / (3*est*est);,7,4,0,1,4,0,0,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2914,      double temp = est * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2915,      double ya = est + temp - temp;,4,2,0,0,0,1,0,0,0,3,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2916,      double yb = est - ya;,3,1,0,0,0,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2918,      double za = ya * ya;,3,1,0,0,0,1,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2919,      double zb = ya * yb * 2.0 + yb * yb;,5,3,0,0,0,1,0,0,0,3,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2920,      temp = za * HEX_40000000;,3,1,0,0,0,0,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2921,      double temp2 = za + temp - temp;,4,2,0,0,0,1,0,0,0,3,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2922,      zb += za - temp2;,3,1,0,0,0,0,0,0,1,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2923,      za = temp2;,2,0,0,0,0,0,0,0,1,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2925,      zb = za * yb + ya * zb + zb * yb;,7,5,0,0,0,0,0,0,1,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2926,      za = za * ya;,3,1,0,0,0,0,0,0,1,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2928,      double na = xs - za;,3,1,0,0,0,1,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2929,      double nb = -(na - xs + za);,4,2,0,1,2,1,0,0,1,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2930,      nb -= zb;,2,0,0,0,0,0,0,0,1,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2932,      est += (na+nb)/(3*est*est);,5,3,0,1,4,0,0,0,1,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2935,      est *= p2;,2,0,0,0,0,0,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2937,      if (subnormal) {,1,0,0,1,3,1,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2938,          est *= 3.814697265625E-6;  // 2^-18,1,0,0,0,0,0,0,0,1,2,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2941,      return est;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2951,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,1,2,0,2,5,2,3,0,0,6,79,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2952,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2956,        final double facta = 0.01745329052209854;,1,0,0,0,0,2,0,0,1,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2957,        final double factb = 1.997844754509471E-9;,1,0,0,0,0,2,0,0,1,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2959,        double xa = doubleHighPart(x);,1,0,0,1,2,1,2,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2960,        double xb = x - xa;,3,1,0,0,0,1,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2962,        double result = xb * factb + xb * facta + xa * factb + xa * facta;,9,7,0,0,0,1,0,0,0,3,66,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2963,        if (result == 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2964,            result = result * x; // ensure correct sign if calculation underflows,3,1,0,0,0,1,0,0,1,4,69,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2966,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2976,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,1,2,0,2,5,2,3,0,0,6,79,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2977,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2981,        final double facta = 57.2957763671875;,1,0,0,0,0,2,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2982,        final double factb = 3.145894820876798E-6;,1,0,0,0,0,2,0,0,1,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2984,        double xa = doubleHighPart(x);,1,0,0,1,2,1,2,0,1,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2985,        double xb = x - xa;,3,1,0,0,0,1,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2987,        return xb * factb + xb * facta + xa * factb + xa * facta;,8,7,0,0,0,1,0,0,0,3,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,2996,        return (x < 0) ? -x : x;,3,1,0,1,2,1,0,0,1,6,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3005,        return (x < 0l) ? -x : x;,3,1,0,1,2,1,0,0,1,6,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3014,        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0,4,2,0,1,4,1,0,0,1,6,64,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3033,            return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3044,        if (Float.isInfinite(x)) {,0,0,0,2,5,1,3,0,0,4,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3045,            return Float.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3047,        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));,1,2,0,3,6,1,6,0,1,7,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3059,        if ((n > -1023) && (n < 1024)) {,2,3,0,2,7,1,0,0,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3060,            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);,2,3,0,3,8,2,2,0,0,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3064,        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {,1,2,0,2,9,1,6,0,0,6,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3065,            return d;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3067,        if (n < -2098) {,1,1,0,1,3,1,0,0,1,6,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3068,            return (d > 0) ? 0.0 : -0.0;,1,1,0,1,2,1,0,0,1,6,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3070,        if (n > 2097) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3071,            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,5,1,0,1,2,1,0,0,0,5,69,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3075,        final long bits = Double.doubleToLongBits(d);,1,0,0,1,2,2,3,0,1,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3076,        final long sign = bits & 0x8000000000000000L;,2,1,0,0,0,2,0,0,1,4,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3077,        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;,2,2,0,2,6,2,0,0,0,5,48,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3078,        long mantissa   = bits & 0x000fffffffffffffL;,2,1,0,0,0,1,0,0,0,3,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3081,        int scaledExponent = exponent + n;,3,1,0,0,0,1,0,0,0,3,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3083,        if (n < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3085,            if (scaledExponent > 0) {,1,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3087,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,3,2,0,4,8,2,2,0,0,6,82,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3088,            } else if (scaledExponent > -53) {,1,1,0,1,4,2,0,0,1,6,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3092,                mantissa = mantissa | (1L << 52);,2,2,0,1,2,0,0,0,1,5,33,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3095,                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));,3,2,0,2,4,2,0,0,2,6,73,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3096,                mantissa = mantissa >>> (1 - scaledExponent);,3,2,0,1,2,0,0,0,1,5,45,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3097,                if (mostSignificantLostBit != 0) {,1,1,0,1,3,1,0,0,0,5,34,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3099,                    mantissa++;,1,0,0,0,0,0,0,0,1,2,11,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3101,                return Double.longBitsToDouble(sign | mantissa);,2,1,0,1,2,1,2,0,0,6,48,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3105,                return (sign == 0L) ? 0.0 : -0.0;,1,1,0,1,2,1,0,0,1,6,33,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3109,            if (exponent == 0) {,1,1,0,1,3,1,0,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3112,                while ((mantissa >>> 52) != 1) {,1,2,0,2,5,1,0,0,0,5,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3113,                    mantissa = mantissa << 1;,2,1,0,0,0,0,0,0,1,3,25,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3114,                    --scaledExponent;,1,0,0,0,0,0,0,0,1,2,17,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3116,                ++scaledExponent;,1,0,0,0,0,0,0,0,1,2,17,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3117,                mantissa = mantissa & 0x000fffffffffffffL;,2,1,0,0,0,0,0,0,1,3,42,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3119,                if (scaledExponent < 2047) {,1,1,0,1,3,1,0,0,0,5,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3120,                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,3,2,0,4,8,2,2,0,0,6,82,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3122,                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,5,1,0,1,2,1,0,0,0,5,74,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3125,            } else if (scaledExponent < 2047) {,1,1,0,1,4,2,0,0,0,5,35,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3126,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,3,2,0,4,8,2,2,0,0,6,82,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3128,                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,5,1,0,1,2,1,0,0,0,5,74,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3143,        if ((n > -127) && (n < 128)) {,2,3,0,2,7,1,0,0,1,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3144,            return f * Float.intBitsToFloat((n + 127) << 23);,2,3,0,2,4,1,2,0,0,6,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3148,        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {,1,2,0,2,9,1,6,0,0,6,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3149,            return f;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3151,        if (n < -277) {,1,1,0,1,3,1,0,0,1,6,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3152,            return (f > 0) ? 0.0f : -0.0f;,1,1,0,1,2,1,0,0,1,6,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3154,        if (n > 276) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3155,            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,5,1,0,1,2,1,0,0,0,5,67,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3159,        final int bits = Float.floatToIntBits(f);,1,0,0,1,2,2,3,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3160,        final int sign = bits & 0x80000000;,2,1,0,0,0,2,0,0,1,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3161,        int  exponent  = (bits >>> 23) & 0xff;,2,2,0,1,2,1,0,0,0,5,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3162,        int mantissa   = bits & 0x007fffff;,2,1,0,0,0,1,0,0,0,3,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3165,        int scaledExponent = exponent + n;,3,1,0,0,0,1,0,0,0,3,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3167,        if (n < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3169,            if (scaledExponent > 0) {,1,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3171,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,3,2,0,2,4,1,2,0,0,6,70,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3172,            } else if (scaledExponent > -24) {,1,1,0,1,4,2,0,0,1,6,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3176,                mantissa = mantissa | (1 << 23);,2,2,0,1,2,0,0,0,1,5,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3179,                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));,3,2,0,2,4,2,0,0,2,6,71,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3180,                mantissa = mantissa >>> (1 - scaledExponent);,3,2,0,1,2,0,0,0,1,5,45,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3181,                if (mostSignificantLostBit != 0) {,1,1,0,1,3,1,0,0,0,5,34,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3183,                    mantissa++;,1,0,0,0,0,0,0,0,1,2,11,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3185,                return Float.intBitsToFloat(sign | mantissa);,2,1,0,1,2,1,2,0,0,6,45,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3189,                return (sign == 0) ? 0.0f : -0.0f;,1,1,0,1,2,1,0,0,1,6,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3193,            if (exponent == 0) {,1,1,0,1,3,1,0,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3196,                while ((mantissa >>> 23) != 1) {,1,2,0,2,5,1,0,0,0,5,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3197,                    mantissa = mantissa << 1;,2,1,0,0,0,0,0,0,1,3,25,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3198,                    --scaledExponent;,1,0,0,0,0,0,0,0,1,2,17,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3200,                ++scaledExponent;,1,0,0,0,0,0,0,0,1,2,17,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3201,                mantissa = mantissa & 0x007fffff;,2,1,0,0,0,0,0,0,1,3,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3203,                if (scaledExponent < 255) {,1,1,0,1,3,1,0,0,0,5,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3204,                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,3,2,0,2,4,1,2,0,0,6,70,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3206,                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,5,1,0,1,2,1,0,0,0,5,71,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3209,            } else if (scaledExponent < 255) {,1,1,0,1,4,2,0,0,0,5,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3210,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,3,2,0,2,4,1,2,0,0,6,70,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3212,                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,5,1,0,1,2,1,0,0,0,5,71,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3252,        if (Double.isNaN(d) || Double.isNaN(direction)) {,0,1,0,2,7,1,6,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3253,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3254,        } else if (d == direction) {,2,1,0,1,4,2,0,0,0,5,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3255,            return direction;,1,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3256,        } else if (Double.isInfinite(d)) {,0,0,0,2,6,2,3,0,0,4,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3257,            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;,5,1,0,1,2,1,0,0,1,6,54,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3258,        } else if (d == 0) {,1,1,0,1,4,2,0,0,0,5,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3259,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,5,1,0,1,2,1,0,0,1,6,62,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3264,        final long bits = Double.doubleToLongBits(d);,1,0,0,1,2,2,3,0,1,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3265,        final long sign = bits & 0x8000000000000000L;,2,1,0,0,0,2,0,0,1,4,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3266,        if ((direction < d) ^ (sign == 0L)) {,3,3,0,2,7,1,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3267,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));,2,3,0,3,6,1,2,0,0,6,74,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3269,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));,2,3,0,3,6,1,2,0,0,6,74,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3308,        if (Double.isNaN(f) || Double.isNaN(direction)) {,0,1,0,2,7,1,6,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3309,            return Float.NaN;,2,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3310,        } else if (f == direction) {,2,1,0,1,4,2,0,0,0,5,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3311,            return (float) direction;,1,0,0,1,2,2,0,0,0,4,25,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3312,        } else if (Float.isInfinite(f)) {,0,0,0,2,6,2,3,0,0,4,33,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3313,            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;,5,1,0,1,2,1,0,0,1,6,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3314,        } else if (f == 0f) {,1,1,0,1,4,2,0,0,0,5,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3315,            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;,5,1,0,1,2,1,0,0,1,6,60,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3320,        final int bits = Float.floatToIntBits(f);,1,0,0,1,2,2,3,0,1,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3321,        final int sign = bits & 0x80000000;,2,1,0,0,0,2,0,0,1,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3322,        if ((direction < f) ^ (sign == 0)) {,3,3,0,2,7,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3323,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));,2,3,0,3,6,1,2,0,0,6,62,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3325,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));,2,3,0,3,6,1,2,0,0,6,62,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3337,        if (x != x) { // NaN,2,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3338,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3341,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,4,3,0,1,3,1,0,0,1,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3342,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3345,        y = (long) x;,2,0,0,1,2,1,0,0,1,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3346,        if (x < 0 && y != x) {,3,3,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3347,            y--;,1,0,0,0,0,0,0,0,1,2,4,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3350,        if (y == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3351,            return x*y;,2,1,0,0,0,1,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3354,        return y;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3364,        if (x != x) { // NaN,2,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3365,            return x;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3368,        y = floor(x);,1,0,0,1,2,0,2,0,2,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3369,        if (y == x) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3370,            return y;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3373,        y += 1.0;,1,0,0,0,0,0,0,0,1,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3375,        if (y == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3376,            return x*y;,2,1,0,0,0,1,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3379,        return y;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3387,        double y = floor(x);,1,0,0,1,2,1,2,0,1,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3388,        double d = x - y;,3,1,0,0,0,1,0,0,0,3,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3390,        if (d > 0.5) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3391,            if (y == -1.0) {,1,1,0,1,3,1,0,0,1,6,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3392,                return -0.0; // Preserve sign of operand,0,0,0,0,0,1,0,0,1,2,40,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3394,            return y+1.0;,1,1,0,0,0,1,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3396,        if (d < 0.5) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3397,            return y;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3401,        long z = (long) y;,2,0,0,1,2,2,0,0,0,4,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3402,        return (z & 1) == 0 ? y : y + 1.0;,3,3,0,1,2,1,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3410,        return (long) floor(x + 0.5);,1,1,0,1,4,2,1,0,1,7,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3418,        return (int) floor(x + 0.5f);,1,1,0,1,4,2,1,0,1,7,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3427,        return (a <= b) ? a : b;,4,1,0,1,2,1,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3436,        return (a <= b) ? a : b;,4,1,0,1,2,1,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3445,        if (a > b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3446,            return b;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3448,        if (a < b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3449,            return a;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3452,        if (a != b) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3453,            return Float.NaN;,2,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3457,        int bits = Float.floatToRawIntBits(a);,1,0,0,1,2,1,3,0,0,5,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3458,        if (bits == 0x80000000) {,1,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3459,            return a;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3461,        return b;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3471,            return b;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3477,        if (a != b) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3478,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3482,        long bits = Double.doubleToRawLongBits(a);,1,0,0,1,2,1,3,0,0,5,42,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3483,        if (bits == 0x8000000000000000L) {,1,1,0,1,3,1,0,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3484,            return a;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3486,        return b;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3495,        return (a <= b) ? b : a;,4,1,0,1,2,1,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3504,        return (a <= b) ? b : a;,4,1,0,1,2,1,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3513,        if (a > b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3514,            return a;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3516,        if (a < b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3517,            return b;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3520,        if (a != b) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3521,            return Float.NaN;,2,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3525,        int bits = Float.floatToRawIntBits(a);,1,0,0,1,2,1,3,0,0,5,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3526,        if (bits == 0x80000000) {,1,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3527,            return b;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3529,        return a;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3545,        if (a != b) {,2,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3546,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3550,        long bits = Double.doubleToRawLongBits(a);,1,0,0,1,2,1,3,0,0,5,42,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3551,        if (bits == 0x8000000000000000L) {,1,1,0,1,3,1,0,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3552,            return b;,1,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3554,        return a;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3572,        if (Double.isInfinite(x) || Double.isInfinite(y)) {,0,1,0,2,7,1,6,0,0,5,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3573,            return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3574,        } else if (Double.isNaN(x) || Double.isNaN(y)) {,0,1,0,2,8,2,6,0,0,5,48,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3575,            return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3578,            final int expX = getExponent(x);,1,0,0,1,2,2,2,0,2,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3579,            final int expY = getExponent(y);,1,0,0,1,2,2,2,0,2,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3580,            if (expX > expY + 27) {,2,2,0,1,3,1,0,0,0,5,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3582,                return abs(x);,0,0,0,1,2,1,2,0,1,5,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3583,            } else if (expY > expX + 27) {,2,2,0,1,4,2,0,0,0,5,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3585,                return abs(y);,0,0,0,1,2,1,2,0,1,5,14,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3589,                final int middleExp = (expX + expY) / 2;,3,2,0,1,2,2,0,0,1,6,40,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3592,"                final double scaledX = scalb(x, -middleExp);",2,0,0,0,2,2,2,0,3,5,44,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3593,"                final double scaledY = scalb(y, -middleExp);",2,0,0,0,2,2,2,0,3,5,44,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3596,                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);,5,3,0,1,2,2,1,0,2,7,67,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3599,"                return scalb(scaledH, middleExp);",0,0,0,0,2,1,3,0,1,4,33,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3627,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation",0,0,0,0,2,1,4,0,0,3,90,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3639,        long m = Double.doubleToLongBits(magnitude);,1,0,0,1,2,1,3,0,0,5,44,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3640,        long s = Double.doubleToLongBits(sign);,1,0,0,1,2,1,3,0,0,5,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3641,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,4,7,0,2,7,1,0,0,0,5,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3642,            return magnitude;,1,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3644,        return -magnitude; // flip sign,1,0,0,0,0,1,0,0,1,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3656,        int m = Float.floatToIntBits(magnitude);,1,0,0,1,2,1,3,0,0,5,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3657,        int s = Float.floatToIntBits(sign);,1,0,0,1,2,1,3,0,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3658,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,4,7,0,2,7,1,0,0,0,5,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3659,            return magnitude;,1,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3661,        return -magnitude; // flip sign,1,0,0,0,0,1,0,0,1,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3674,        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;,0,3,0,3,8,2,3,0,0,5,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3687,        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;,0,3,0,3,6,1,3,0,0,5,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3696,        PrintStream out = System.out;,3,0,0,0,0,0,0,1,0,2,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3697,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_A"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);",2,0,0,0,2,0,4,0,1,4,96,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3698,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_B"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);",2,0,0,0,2,0,4,0,1,4,96,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3699,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_A"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);",2,0,0,0,2,0,4,0,1,4,100,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3700,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_B"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);",2,0,0,0,2,0,4,0,1,4,100,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3701,"        FastMathCalc.printarray(out, ""LN_MANT"",LN_MANT_LEN, lnMant.LN_MANT);",2,0,0,0,2,0,4,0,1,4,68,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3702,"        FastMathCalc.printarray(out, ""SINE_TABLE_A"", SINE_TABLE_LEN, SINE_TABLE_A);",0,0,0,0,2,0,5,0,1,3,75,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3703,"        FastMathCalc.printarray(out, ""SINE_TABLE_B"", SINE_TABLE_LEN, SINE_TABLE_B);",0,0,0,0,2,0,5,0,1,3,75,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3704,"        FastMathCalc.printarray(out, ""COSINE_TABLE_A"", SINE_TABLE_LEN, COSINE_TABLE_A);",0,0,0,0,2,0,5,0,1,3,79,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3705,"        FastMathCalc.printarray(out, ""COSINE_TABLE_B"", SINE_TABLE_LEN, COSINE_TABLE_B);",0,0,0,0,2,0,5,0,1,3,79,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3706,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_A"", SINE_TABLE_LEN, TANGENT_TABLE_A);",0,0,0,0,2,0,5,0,1,3,81,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3707,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_B"", SINE_TABLE_LEN, TANGENT_TABLE_B);",0,0,0,0,2,0,5,0,1,3,81,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3708,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,52,    private Precision() {},1,0,0,1,4,1,0,0,1,5,22,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,65,"        if (equals(x, y, eps)) {",0,0,0,0,5,1,4,0,1,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,66,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,67,        } else if (x < y) {,2,1,0,1,4,2,0,0,0,5,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,68,            return -1;,0,0,0,0,0,1,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,70,        return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,91,"        if (equals(x, y, maxUlps)) {",0,0,0,0,5,1,4,0,1,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,92,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,93,        } else if (x < y) {,2,1,0,1,4,2,0,0,0,5,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,94,            return -1;,0,0,0,0,0,1,0,0,1,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,96,        return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,108,"        return equals(x, y, 1);",0,0,0,0,2,1,3,0,1,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,121,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, 1);",0,2,0,2,8,1,9,0,1,6,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,135,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",3,3,0,1,4,1,5,0,1,7,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,150,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",3,3,0,2,6,1,5,0,1,7,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,172,        int xInt = Float.floatToIntBits(x);,1,0,0,1,2,1,3,0,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,173,        int yInt = Float.floatToIntBits(y);,1,0,0,1,2,1,3,0,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,176,        if (xInt < 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,177,            xInt = SGN_MASK_FLOAT - xInt;,3,1,0,0,0,0,0,0,1,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,179,        if (yInt < 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,180,            yInt = SGN_MASK_FLOAT - yInt;,3,1,0,0,0,0,0,0,1,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,183,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,4,2,0,1,2,2,2,0,1,7,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,185,        return isEqual && !Float.isNaN(x) && !Float.isNaN(y);,1,1,0,1,4,1,6,0,2,7,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,201,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, maxUlps);",0,2,0,2,8,1,10,0,1,6,67,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,213,"        return equals(x, y, 1);",0,0,0,0,2,1,3,0,1,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,226,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, 1);",0,2,0,2,8,1,9,0,1,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,241,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",3,3,0,1,4,1,5,0,1,7,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,256,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",3,3,0,2,6,1,5,0,1,7,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,277,        long xInt = Double.doubleToLongBits(x);,1,0,0,1,2,1,3,0,0,5,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,278,        long yInt = Double.doubleToLongBits(y);,1,0,0,1,2,1,3,0,0,5,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,281,        if (xInt < 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,282,            xInt = SGN_MASK - xInt;,3,1,0,0,0,0,0,0,1,3,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,284,        if (yInt < 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,285,            yInt = SGN_MASK - yInt;,3,1,0,0,0,0,0,0,1,3,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,288,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,4,2,0,1,2,2,2,0,1,7,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,290,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,1,1,0,1,4,1,6,0,2,7,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,306,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, maxUlps);",0,2,0,2,8,1,10,0,1,6,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,319,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",2,0,0,0,2,1,3,0,1,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,341,            return (new BigDecimal,0,0,0,0,1,2,0,1,1,4,22,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,345,        } catch (NumberFormatException ex) {,1,0,0,1,4,1,0,1,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,346,            if (Double.isInfinite(x)) {,0,0,0,2,5,1,3,0,0,4,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,347,                return x;,1,0,0,0,0,1,0,0,0,2,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,349,                return Double.NaN;,2,0,0,0,0,1,0,0,0,2,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,364,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",2,0,0,0,2,1,3,0,1,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,379,"        final float sign = FastMath.copySign(1f, x);",1,0,0,0,2,2,3,0,1,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,380,"        final float factor = (float) FastMath.pow(10.0f, scale) * sign;",2,1,0,1,4,3,3,0,1,7,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,381,"        return (float) roundUnscaled(x * factor, sign, roundingMethod) / factor;",3,2,0,1,4,2,3,0,1,7,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,399,        switch (roundingMethod) {,1,0,0,1,3,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,401,            if (sign == -1) {,1,1,0,1,3,1,0,0,1,6,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,402,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",3,0,0,0,4,0,5,0,1,4,82,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,404,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",3,0,0,0,4,0,5,0,1,4,81,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,406,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,408,"            unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",3,0,0,0,4,0,5,0,1,4,82,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,409,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,411,            if (sign == -1) {,1,1,0,1,3,1,0,0,1,6,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,412,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",3,0,0,0,4,0,5,0,1,4,81,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,414,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",3,0,0,0,4,0,5,0,1,4,82,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,416,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,418,"            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);",3,0,0,0,2,0,3,0,1,4,66,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,419,            double fraction = unscaled - FastMath.floor(unscaled);,2,1,0,1,2,1,3,0,0,6,54,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,420,            if (fraction > 0.5) {,1,1,0,1,3,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,421,                unscaled = FastMath.ceil(unscaled);,1,0,0,1,2,0,3,0,1,5,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,423,                unscaled = FastMath.floor(unscaled);,1,0,0,1,2,0,3,0,1,5,36,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,425,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,428,            double fraction = unscaled - FastMath.floor(unscaled);,2,1,0,1,2,1,3,0,0,6,54,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,429,            if (fraction > 0.5) {,1,1,0,1,3,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,430,                unscaled = FastMath.ceil(unscaled);,1,0,0,1,2,0,3,0,1,5,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,431,            } else if (fraction < 0.5) {,1,1,0,1,4,2,0,0,0,5,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,432,                unscaled = FastMath.floor(unscaled);,1,0,0,1,2,0,3,0,1,5,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,435,                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math,0,3,0,1,4,1,6,0,0,5,57,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,437,                    unscaled = FastMath.floor(unscaled);,1,0,0,1,2,0,3,0,1,5,36,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,439,                    unscaled = FastMath.ceil(unscaled);,1,0,0,1,2,0,3,0,1,5,35,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,442,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,445,"            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);",3,0,0,0,2,0,3,0,1,4,66,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,446,            double fraction = unscaled - FastMath.floor(unscaled);,2,1,0,1,2,1,3,0,0,6,54,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,447,            if (fraction >= 0.5) {,1,1,0,1,3,1,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,448,                unscaled = FastMath.ceil(unscaled);,1,0,0,1,2,0,3,0,1,5,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,450,                unscaled = FastMath.floor(unscaled);,1,0,0,1,2,0,3,0,1,5,36,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,452,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,455,            if (unscaled != FastMath.floor(unscaled)) {,1,1,0,2,5,1,3,0,0,6,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,456,                throw new MathArithmeticException();,0,0,0,1,2,2,0,1,1,5,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,460,"            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));",3,0,0,0,4,0,5,0,1,4,82,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,461,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,463,"            throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,",2,0,0,0,1,2,0,1,1,5,80,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,474,        return unscaled;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/Precision,39,494,        return x + originalDelta - x;,3,2,0,0,0,1,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,39,43,    public MathArithmeticException() {,1,0,0,1,3,1,0,0,1,5,34,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,39,44,        context = new ExceptionContext(this);,1,0,0,1,2,2,0,1,2,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,39,45,        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,2,0,0,1,2,0,2,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,39,46,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,39,56,                                   Object ... args) {,1,0,0,0,2,0,0,1,0,3,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,39,57,        context = new ExceptionContext(this);,1,0,0,1,2,2,0,1,2,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,39,58,"        context.addMessage(pattern, args);",0,0,0,0,2,0,4,0,0,2,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,39,59,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,39,63,        return context;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,39,69,        return context.getMessage();,0,0,0,1,2,1,2,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,39,75,        return context.getLocalizedMessage();,0,0,0,1,2,1,2,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,39,44,                                        Object ... args) {,1,0,0,0,2,0,0,1,0,3,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,39,45,        context = new ExceptionContext(this);,1,0,0,1,2,2,0,1,2,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,39,46,"        context.addMessage(pattern, args);",0,0,0,0,2,0,4,0,0,2,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,39,47,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,39,51,        return context;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,39,57,        return context.getMessage();,0,0,0,1,2,1,2,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,39,63,        return context.getLocalizedMessage();,0,0,0,1,2,1,2,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3797,                LN_MANT = new double[FastMath.LN_MANT_LEN][];,3,0,0,0,4,2,0,0,1,4,45,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3800,                for (int i = 0; i < LN_MANT.length; i++) {,5,1,0,1,3,2,0,0,1,6,42,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3801,                    final double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,2,2,0,4,8,3,2,0,1,7,85,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3802,                    LN_MANT[i] = FastMathCalc.slowLog(d);,0,0,1,1,4,0,3,0,1,5,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3805,                LN_MANT = FastMathResources.loadLnMant();,1,0,0,1,2,0,2,0,1,5,41,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,316,"        public SecondaryComponent(final SecondaryEquations equation, final int firstIndex) {",3,0,0,0,3,4,0,1,3,5,84,3,0.0,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,317,            final int n   = equation.getDimension();,1,0,0,1,2,2,2,0,1,6,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,318,            this.equation = equation;,2,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,319,"            mapper        = new EquationsMapper(firstIndex, n);",3,0,0,0,2,1,0,1,2,5,51,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,320,            state         = new double[n];,1,0,1,0,2,2,0,0,1,5,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,321,            stateDot      = new double[n];,1,0,1,0,2,2,0,0,1,5,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,322,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,298,    private static class SecondaryComponent {,1,0,0,0,1,3,0,0,2,4,41,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,306,            SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {,1,0,0,1,4,2,0,6,2,6,93,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,310,"                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());",1,1,0,1,6,1,6,0,0,6,77,11,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,100,        this(null);,0,0,0,1,2,1,0,0,0,3,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,101,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,105,        return name;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,110,        stepHandlers.add(handler);,0,0,0,1,2,0,3,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,111,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,115,        return Collections.unmodifiableCollection(stepHandlers);,0,0,0,1,2,1,3,0,0,4,56,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,120,        stepHandlers.clear();,0,0,0,1,2,0,2,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,121,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,128,"        addEventHandler(handler, maxCheckInterval, convergence,",0,0,0,0,1,0,4,0,1,3,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,131,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,139,"        eventsStates.add(new EventState(handler, maxCheckInterval, convergence,",3,0,0,0,2,1,2,1,1,6,71,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,141,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,145,        final List<EventHandler> list = new ArrayList<EventHandler>();,1,0,0,1,2,2,0,4,2,6,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,146,        for (EventState state : eventsStates) {,2,0,0,1,3,1,0,1,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,147,            list.add(state.getEventHandler());,0,0,0,2,4,0,4,0,0,3,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,148,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,149,        return Collections.unmodifiableCollection(list);,0,0,0,1,2,1,3,0,0,4,48,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,154,        eventsStates.clear();,0,0,0,1,2,0,2,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,155,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,159,        return stepStart;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,164,        return stepSize;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,174,        return evaluations.getMaximalCount();,0,0,0,1,2,1,2,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,179,        return evaluations.getCount();,0,0,0,1,2,1,2,0,0,4,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,192,"            state.getEventHandler().init(t0, y0, t);",0,0,0,1,4,0,6,0,0,3,40,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,193,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,196,"            handler.init(t0, y0, t);",0,0,0,0,2,0,5,0,0,2,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,197,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,216,"            throw new DimensionMismatchException(y0.length, equations.getDimension());",2,0,0,1,4,2,2,1,1,7,74,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,219,"            throw new DimensionMismatchException(y.length, equations.getDimension());",2,0,0,1,4,2,2,1,1,7,73,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,231,"        System.arraycopy(expandableODE.getPrimaryState(), 0, y, 0, y.length);",2,0,0,1,4,0,5,0,0,4,69,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,232,        return expandableODE.getTime();,0,0,0,1,2,1,2,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,293,            double previousT = interpolator.getGlobalPreviousTime();,1,0,0,1,2,1,2,0,0,5,56,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,294,            final double currentT = interpolator.getGlobalCurrentTime();,1,0,0,1,2,2,2,0,1,6,60,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,297,            if (! statesInitialized) {,1,0,0,1,3,1,0,0,1,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,298,                for (EventState state : eventsStates) {,2,0,0,1,3,1,0,1,0,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,299,                    state.reinitializeBegin(interpolator);,0,0,0,1,2,0,3,0,0,3,38,9,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,300,                },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,301,                statesInitialized = true;,1,0,0,0,0,0,0,0,2,2,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,305,            final int orderingSign = interpolator.isForward() ? +1 : -1;,1,0,0,1,2,2,2,0,3,6,60,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,306,            SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {,1,0,0,1,4,2,0,6,2,6,93,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,315,            for (final EventState state : eventsStates) {,2,0,0,1,3,2,0,1,1,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,316,                if (state.evaluateStep(interpolator)) {,0,0,0,2,5,1,3,0,0,4,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,318,                    occuringEvents.add(state);,0,0,0,1,2,0,3,0,0,3,26,9,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,320,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,322,            while (!occuringEvents.isEmpty()) {,0,0,0,2,5,1,2,0,1,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,325,                final Iterator<EventState> iterator = occuringEvents.iterator();,1,0,0,1,2,1,2,2,1,7,64,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,326,                final EventState currentEvent = iterator.next();,1,0,0,1,2,1,2,1,1,7,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,327,                iterator.remove();,0,0,0,1,2,0,2,0,0,3,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,330,                final double eventT = currentEvent.getEventTime();,1,0,0,1,2,2,2,0,1,6,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,331,                interpolator.setSoftPreviousTime(previousT);,0,0,0,1,2,0,3,0,0,3,44,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,332,                interpolator.setSoftCurrentTime(eventT);,0,0,0,1,2,0,3,0,0,3,40,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,335,                interpolator.setInterpolatedTime(eventT);,0,0,0,1,2,0,3,0,0,3,41,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,336,                final double[] eventY = interpolator.getInterpolatedState().clone();,1,0,0,1,6,2,3,0,1,6,68,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,337,"                currentEvent.stepAccepted(eventT, eventY);",0,0,0,0,2,0,4,0,0,2,42,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,338,                isLastStep = currentEvent.stop();,1,0,0,1,2,0,2,0,1,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,341,                for (final StepHandler handler : stepHandlers) {,2,0,0,1,3,2,0,1,1,6,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,342,"                    handler.handleStep(interpolator, isLastStep);",0,0,0,0,2,0,4,0,0,2,45,9,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,343,                },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,345,                if (isLastStep) {,1,0,0,1,3,1,0,0,0,4,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,347,"                    System.arraycopy(eventY, 0, y, 0, y.length);",2,0,0,0,2,0,4,0,0,3,44,9,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,348,                    for (final EventState remaining : occuringEvents) {,2,0,0,1,3,2,0,1,1,6,51,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,349,"                        remaining.stepAccepted(eventT, eventY);",0,0,0,0,2,0,4,0,0,2,39,11,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,350,                    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,351,                    return eventT;,1,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,354,"                if (currentEvent.reset(eventT, eventY)) {",0,0,0,0,5,1,4,0,0,3,41,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,357,"                    System.arraycopy(eventY, 0, y, 0, y.length);",2,0,0,0,2,0,4,0,0,3,44,9,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,358,"                    computeDerivatives(eventT, y, yDot);",0,0,0,0,2,0,4,0,1,3,36,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,359,                    resetOccurred = true;,1,0,0,0,0,0,0,0,2,2,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,360,                    for (final EventState remaining : occuringEvents) {,2,0,0,1,3,2,0,1,1,6,51,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,361,"                        remaining.stepAccepted(eventT, eventY);",0,0,0,0,2,0,4,0,0,2,39,11,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,362,                    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,363,                    return eventT;,1,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,367,                previousT = eventT;,2,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,368,                interpolator.setSoftPreviousTime(eventT);,0,0,0,1,2,0,3,0,0,3,41,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,369,                interpolator.setSoftCurrentTime(currentT);,0,0,0,1,2,0,3,0,0,3,42,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,372,                if (currentEvent.evaluateStep(interpolator)) {,0,0,0,2,5,1,3,0,0,4,46,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,374,                    occuringEvents.add(currentEvent);,0,0,0,1,2,0,3,0,0,3,33,9,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,377,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,379,            interpolator.setInterpolatedTime(currentT);,0,0,0,1,2,0,3,0,0,3,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,380,            final double[] currentY = interpolator.getInterpolatedState();,1,0,0,1,4,2,2,0,1,6,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,381,            for (final EventState state : eventsStates) {,2,0,0,1,3,2,0,1,1,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,382,"                state.stepAccepted(currentT, currentY);",0,0,0,0,2,0,4,0,0,2,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,383,                isLastStep = isLastStep || state.stop();,2,1,0,1,2,0,2,0,1,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,384,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,385,"            isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);",2,1,0,0,2,0,4,0,1,5,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,388,            for (StepHandler handler : stepHandlers) {,2,0,0,1,3,1,0,1,0,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,389,"                handler.handleStep(interpolator, isLastStep);",0,0,0,0,2,0,4,0,0,2,45,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,390,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,392,            return currentT;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,408,"            throw new NumberIsTooSmallException(LocalizedFormats.TOO_SMALL_INTEGRATION_INTERVAL,",2,0,0,0,1,2,0,1,1,5,84,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,86,        return primary;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,101,            final EquationsMapper lastMapper = components.get(components.size() - 1).mapper;,2,1,0,2,4,1,4,1,1,8,80,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,102,            return lastMapper.getFirstIndex() + lastMapper.getDimension();,0,1,0,1,4,1,4,0,0,5,62,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,120,"            component.mapper.extractEquationData(y, component.state);",4,0,0,0,2,0,2,0,0,3,57,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,121,"            component.equation.computeDerivatives(t, primaryState, primaryStateDot,",2,0,0,0,1,0,4,0,0,3,71,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,123,"            component.mapper.insertEquationData(component.stateDot, yDot);",4,0,0,0,2,0,2,0,0,3,62,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,124,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,135,        if (components.isEmpty()) {,0,0,0,2,5,1,2,0,0,4,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,137,            components = new ArrayList<ExpandableStatefulODE.SecondaryComponent>();,3,0,0,1,2,1,0,1,2,6,71,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,138,            firstIndex = primary.getDimension();,1,0,0,1,2,0,2,0,1,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,140,            final SecondaryComponent last = components.get(components.size() - 1);,1,1,0,2,4,1,4,1,1,8,70,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,141,            firstIndex = last.mapper.getFirstIndex() + last.mapper.getDimension();,5,1,0,1,4,0,2,0,1,6,70,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,144,"        components.add(new SecondaryComponent(secondary, firstIndex));",2,0,0,0,4,1,2,1,1,6,62,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,146,        return components.size() - 1;,0,1,0,1,2,1,2,0,0,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,165,            mappers[i] = components.get(i).mapper;,1,0,1,1,4,0,3,0,1,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,193,"            throw new DimensionMismatchException(primaryState.length, this.primaryState.length);",4,0,0,0,2,3,0,1,1,5,84,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,205,        return primaryState.clone();,0,0,0,1,2,1,2,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,212,        return primaryStateDot.clone();,0,0,0,1,2,1,2,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,226,        double[] localArray = components.get(index).state;,2,0,0,1,4,1,3,0,0,5,50,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,229,        if (secondaryState.length != localArray.length) {,4,1,0,1,3,1,0,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,230,"            throw new DimensionMismatchException(secondaryState.length, localArray.length);",4,0,0,0,2,2,0,1,1,5,79,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,234,"        System.arraycopy(secondaryState, 0, localArray, 0, secondaryState.length);",2,0,0,0,2,0,4,0,0,3,74,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,236,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,244,        return components.get(index).state.clone();,1,0,0,1,4,1,4,0,0,5,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,253,        return components.get(index).stateDot.clone();,1,0,0,1,4,1,4,0,0,5,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,265,        if (completeState.length != getTotalDimension()) {,2,1,0,2,5,1,1,0,1,7,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,266,"            throw new DimensionMismatchException(completeState.length, getTotalDimension());",2,0,0,1,4,2,1,1,2,7,80,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,270,"        primaryMapper.extractEquationData(completeState, primaryState);",0,0,0,0,2,0,4,0,0,2,63,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,271,        for (final SecondaryComponent component : components) {,2,0,0,1,3,2,0,1,1,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,272,"            component.mapper.extractEquationData(completeState, component.state);",4,0,0,0,2,0,2,0,0,3,69,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,273,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,275,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,290,"            component.mapper.insertEquationData(component.state, completeState);",4,0,0,0,2,0,2,0,0,3,68,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,291,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,39,44,"        super(specific, wrong, expected);",3,0,0,0,2,1,0,0,1,4,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,39,45,        dimension = expected;,2,0,0,0,0,0,0,0,1,2,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,39,46,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,39,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);",4,0,0,0,2,1,0,0,0,3,67,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,39,57,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,39,63,        return dimension;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,39,46,"        super(pattern, wrong, arguments);",3,0,0,0,2,1,0,0,1,4,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,39,47,        argument = wrong;,2,0,0,0,0,0,0,0,1,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,39,48,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,39,54,        return argument;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/EquationsMapper,39,58,        return firstIndex;,1,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/EquationsMapper,39,78,"            throw new DimensionMismatchException(equationData.length, dimension);",3,0,0,0,2,2,0,1,1,5,69,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/EquationsMapper,39,93,"            throw new DimensionMismatchException(equationData.length, dimension);",3,0,0,0,2,2,0,1,1,5,69,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,136,                                     final EquationsMapper[] secondaryMappers) {,1,0,0,0,4,1,0,1,1,5,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,138,    globalPreviousTime    = Double.NaN;,3,0,0,0,0,0,0,0,1,2,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,139,    globalCurrentTime     = Double.NaN;,3,0,0,0,0,0,0,0,1,2,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,140,    softPreviousTime      = Double.NaN;,3,0,0,0,0,0,0,0,1,2,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,141,    softCurrentTime       = Double.NaN;,3,0,0,0,0,0,0,0,1,2,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,142,    h                     = Double.NaN;,3,0,0,0,0,0,0,0,1,2,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,143,    interpolatedTime      = Double.NaN;,3,0,0,0,0,0,0,0,1,2,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,144,    currentState          = y;,2,0,0,0,0,0,0,0,1,2,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,145,    finalized             = false;,1,0,0,0,0,0,0,0,2,2,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,146,    this.forward          = forward;,2,0,0,0,0,1,0,0,1,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,147,    this.dirtyState       = true;,1,0,0,0,0,1,0,0,2,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,148,    this.primaryMapper    = primaryMapper;,2,0,0,0,0,1,0,0,1,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,149,    this.secondaryMappers = (secondaryMappers == null) ? null : secondaryMappers.clone();,2,1,0,1,4,1,2,0,1,7,85,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,150,    allocateInterpolatedArrays(y.length);,2,0,0,1,2,0,1,0,1,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,152,  },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,186,      currentState                     = interpolator.currentState.clone();,3,0,0,1,2,0,1,0,1,5,69,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,187,      interpolatedState                = interpolator.interpolatedState.clone();,3,0,0,1,2,0,1,0,1,5,74,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,188,      interpolatedDerivatives          = interpolator.interpolatedDerivatives.clone();,3,0,0,1,2,0,1,0,1,5,80,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,189,      interpolatedPrimaryState         = interpolator.interpolatedPrimaryState.clone();,3,0,0,1,2,0,1,0,1,5,81,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,190,      interpolatedPrimaryDerivatives   = interpolator.interpolatedPrimaryDerivatives.clone();,3,0,0,1,2,0,1,0,1,5,87,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,191,      interpolatedSecondaryState       = new double[interpolator.interpolatedSecondaryState.length][];,4,0,0,0,4,2,0,0,1,4,96,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,192,      interpolatedSecondaryDerivatives = new double[interpolator.interpolatedSecondaryDerivatives.length][];,4,0,0,0,4,2,0,0,1,4,102,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,193,      for (int i = 0; i < interpolatedSecondaryState.length; ++i) {,5,1,0,1,3,2,0,0,1,6,61,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,194,          interpolatedSecondaryState[i]       = interpolator.interpolatedSecondaryState[i].clone();,2,0,1,1,6,0,1,0,1,6,89,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,195,          interpolatedSecondaryDerivatives[i] = interpolator.interpolatedSecondaryDerivatives[i].clone();,2,0,1,1,6,0,1,0,1,6,95,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,225,              interpolatedSecondaryState       = null;,1,0,0,0,0,0,0,0,1,2,40,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,226,              interpolatedSecondaryDerivatives = null;,1,0,0,0,0,0,0,0,1,2,40,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,231,                  interpolatedSecondaryState[i]       = new double[secondaryMappers[i].getDimension()];,0,0,1,1,8,2,1,0,1,6,85,10,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,232,                  interpolatedSecondaryDerivatives[i] = new double[secondaryMappers[i].getDimension()];,0,0,1,1,8,2,1,0,1,6,85,10,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,320,      this.softPreviousTime = softPreviousTime;,2,0,0,0,0,1,0,0,1,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,321,  },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,334,      this.softCurrentTime  = softCurrentTime;,2,0,0,0,0,1,0,0,1,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,335,  },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,342,    return globalPreviousTime;,1,0,0,0,0,1,0,0,0,2,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,350,    return globalCurrentTime;,1,0,0,0,0,1,0,0,0,2,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,359,    return softPreviousTime;,1,0,0,0,0,1,0,0,0,2,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,368,    return softCurrentTime;,1,0,0,0,0,1,0,0,0,2,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,373,    return interpolatedTime;,1,0,0,0,0,1,0,0,0,2,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,384,    return forward;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,402,      if (dirtyState) {,1,0,0,1,3,1,0,0,0,4,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,403,          final double oneMinusThetaH = globalCurrentTime - interpolatedTime;,3,1,0,0,0,2,0,0,1,4,67,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,404,          final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;,5,3,0,1,4,2,0,0,1,6,61,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,405,"          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);",0,0,0,0,2,0,3,0,1,3,62,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,406,          dirtyState = false;,1,0,0,0,0,0,0,0,2,2,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,408,  },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,412,      evaluateCompleteInterpolatedState();,0,0,0,1,2,0,1,0,1,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,413,"      primaryMapper.extractEquationData(interpolatedState,",0,0,0,0,1,0,3,0,0,2,52,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,415,      return interpolatedPrimaryState;,1,0,0,0,0,1,0,0,0,2,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,420,      evaluateCompleteInterpolatedState();,0,0,0,1,2,0,1,0,1,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,421,"      primaryMapper.extractEquationData(interpolatedDerivatives,",0,0,0,0,1,0,3,0,0,2,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,423,      return interpolatedPrimaryDerivatives;,1,0,0,0,0,1,0,0,0,2,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,428,      evaluateCompleteInterpolatedState();,0,0,0,1,2,0,1,0,1,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,429,"      secondaryMappers[index].extractEquationData(interpolatedState,",0,0,1,0,3,0,2,0,0,3,62,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,431,      return interpolatedSecondaryState[index];,0,0,1,0,2,1,0,0,0,3,41,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,436,      evaluateCompleteInterpolatedState();,0,0,0,1,2,0,1,0,1,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,437,"      secondaryMappers[index].extractEquationData(interpolatedDerivatives,",0,0,1,0,3,0,2,0,0,3,68,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,439,      return interpolatedSecondaryDerivatives[index];,0,0,1,0,2,1,0,0,0,3,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,493,  },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,512,    if (currentState == null) {,1,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,513,        out.writeInt(-1);,0,0,0,1,2,0,2,0,1,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,515,        out.writeInt(currentState.length);,2,0,0,1,2,0,2,0,0,4,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,517,    out.writeDouble(globalPreviousTime);,0,0,0,1,2,0,3,0,0,3,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,518,    out.writeDouble(globalCurrentTime);,0,0,0,1,2,0,3,0,0,3,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,519,    out.writeDouble(softPreviousTime);,0,0,0,1,2,0,3,0,0,3,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,520,    out.writeDouble(softCurrentTime);,0,0,0,1,2,0,3,0,0,3,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,521,    out.writeDouble(h);,0,0,0,1,2,0,3,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,522,    out.writeBoolean(forward);,0,0,0,1,2,0,3,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,523,    out.writeObject(primaryMapper);,0,0,0,1,2,0,3,0,0,3,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,524,    out.write(secondaryMappers.length);,2,0,0,1,2,0,2,0,0,4,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,525,    for (final EquationsMapper  mapper : secondaryMappers) {,2,0,0,1,3,2,0,1,1,6,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,526,        out.writeObject(mapper);,0,0,0,1,2,0,3,0,0,3,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,529,    if (currentState != null) {,1,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,530,        for (int i = 0; i < currentState.length; ++i) {,5,1,0,1,3,2,0,0,1,6,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,531,            out.writeDouble(currentState[i]);,0,0,1,1,4,0,2,0,0,4,33,9,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,535,    out.writeDouble(interpolatedTime);,0,0,0,1,2,0,3,0,0,3,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,541,    finalizeStep();,0,0,0,1,2,0,1,0,1,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,543,  },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,559,    final int dimension = in.readInt();,1,0,0,1,2,2,2,0,1,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,560,    globalPreviousTime  = in.readDouble();,1,0,0,1,2,0,2,0,1,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,561,    globalCurrentTime   = in.readDouble();,1,0,0,1,2,0,2,0,1,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,562,    softPreviousTime    = in.readDouble();,1,0,0,1,2,0,2,0,1,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,563,    softCurrentTime     = in.readDouble();,1,0,0,1,2,0,2,0,1,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,564,    h                   = in.readDouble();,1,0,0,1,2,0,2,0,1,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,565,    forward             = in.readBoolean();,1,0,0,1,2,0,2,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,566,    primaryMapper       = (EquationsMapper) in.readObject();,1,0,0,1,4,0,2,1,1,6,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,567,    secondaryMappers    = new EquationsMapper[in.read()];,1,0,0,1,4,1,2,1,1,7,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,568,    for (int i = 0; i < secondaryMappers.length; ++i) {,5,1,0,1,3,2,0,0,1,6,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,569,        secondaryMappers[i] = (EquationsMapper) in.readObject();,0,0,1,1,6,0,2,1,1,6,56,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,571,    dirtyState          = true;,1,0,0,0,0,0,0,0,2,2,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,573,    if (dimension < 0) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,574,        currentState = null;,1,0,0,0,0,0,0,0,1,2,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,576,        currentState  = new double[dimension];,1,0,1,0,2,2,0,0,1,5,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,577,        for (int i = 0; i < currentState.length; ++i) {,5,1,0,1,3,2,0,0,1,6,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,578,            currentState[i] = in.readDouble();,0,0,1,1,4,0,2,0,1,5,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,583,    interpolatedTime = Double.NaN;,3,0,0,0,0,0,0,0,1,2,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,584,    allocateInterpolatedArrays(dimension);,0,0,0,1,2,0,2,0,1,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,586,    finalized = true;,1,0,0,0,0,0,0,0,2,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,588,    return in.readDouble();,0,0,0,1,2,1,2,0,0,4,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,254,      final int dimension = interpolator.currentState.length;,4,0,0,0,0,2,0,0,1,3,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,256,      yDotKLast    = new double[3][];,1,0,0,0,4,2,0,0,1,4,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,257,      for (int k = 0; k < yDotKLast.length; ++k) {,5,1,0,1,3,2,0,0,1,6,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,258,        yDotKLast[k] = new double[dimension];,0,0,1,0,4,2,0,0,1,4,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,259,"        System.arraycopy(interpolator.yDotKLast[k], 0, yDotKLast[k], 0,",2,0,1,0,5,0,2,0,0,4,63,9,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,263,      v = new double[7][];,1,0,0,0,4,2,0,0,1,4,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,264,      for (int k = 0; k < v.length; ++k) {,5,1,0,1,3,2,0,0,1,6,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,265,        v[k] = new double[dimension];,0,0,1,0,4,2,0,0,1,4,29,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,266,"        System.arraycopy(interpolator.v[k], 0, v[k], 0, dimension);",2,0,1,0,6,0,3,0,0,4,59,9,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,269,      vectorsInitialized = interpolator.vectorsInitialized;,3,0,0,0,0,0,0,0,1,2,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,318,    if (! vectorsInitialized) {,1,0,0,1,3,1,0,0,1,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,320,      if (v == null) {,1,1,0,1,3,1,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,321,        v = new double[7][];,1,0,0,0,4,2,0,0,1,4,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,322,        for (int k = 0; k < 7; ++k) {,3,1,0,1,3,2,0,0,1,6,29,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,323,          v[k] = new double[interpolatedState.length];,2,0,1,0,4,2,0,0,1,5,44,10,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,328,      finalizeStep();,0,0,0,1,2,0,1,0,1,4,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,331,      for (int i = 0; i < interpolatedState.length; ++i) {,5,1,0,1,3,2,0,0,1,6,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,332,          final double yDot1  = yDotK[0][i];,1,0,1,0,4,2,0,0,1,5,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,333,          final double yDot6  = yDotK[5][i];,1,0,1,0,4,2,0,0,1,5,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,334,          final double yDot7  = yDotK[6][i];,1,0,1,0,4,2,0,0,1,5,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,335,          final double yDot8  = yDotK[7][i];,1,0,1,0,4,2,0,0,1,5,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,336,          final double yDot9  = yDotK[8][i];,1,0,1,0,4,2,0,0,1,5,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,337,          final double yDot10 = yDotK[9][i];,1,0,1,0,4,2,0,0,1,5,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,338,          final double yDot11 = yDotK[10][i];,1,0,1,0,4,2,0,0,1,5,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,339,          final double yDot12 = yDotK[11][i];,1,0,1,0,4,2,0,0,1,5,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,340,          final double yDot13 = yDotK[12][i];,1,0,1,0,4,2,0,0,1,5,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,341,          final double yDot14 = yDotKLast[0][i];,1,0,1,0,4,2,0,0,1,5,38,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,342,          final double yDot15 = yDotKLast[1][i];,1,0,1,0,4,2,0,0,1,5,38,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,343,          final double yDot16 = yDotKLast[2][i];,1,0,1,0,4,2,0,0,1,5,38,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,344,          v[0][i] = B_01 * yDot1  + B_06 * yDot6 + B_07 * yDot7 +,6,10,1,0,4,0,0,0,1,5,55,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,347,          v[1][i] = yDot1 - v[0][i];,1,1,1,0,8,0,0,0,1,5,26,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,348,          v[2][i] = v[0][i] - v[1][i] - yDotK[12][i];,0,1,1,0,16,0,0,0,1,4,43,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,349,          for (int k = 0; k < D.length; ++k) {,5,1,0,1,3,2,0,0,1,6,36,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,350,              v[k+3][i] = D[k][0] * yDot1  + D[k][1]  * yDot6  + D[k][2]  * yDot7  +,4,15,1,0,16,0,0,0,1,5,70,10,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,357,      vectorsInitialized = true;,1,0,0,0,0,0,0,0,2,2,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,361,    final double eta      = 1 - theta;,2,1,0,0,0,2,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,362,    final double twoTheta = 2 * theta;,2,1,0,0,0,2,0,0,1,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,363,    final double theta2   = theta * theta;,3,1,0,0,0,2,0,0,1,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,364,    final double dot1 = 1 - twoTheta;,2,1,0,0,0,2,0,0,1,4,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,365,    final double dot2 = theta * (2 - 3 * theta);,3,3,0,1,2,2,0,0,1,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,366,    final double dot3 = twoTheta * (1 + theta * (twoTheta -3));,4,4,0,2,4,2,0,0,1,6,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,367,    final double dot4 = theta2 * (3 + theta * (5 * theta - 8));,4,5,0,2,4,2,0,0,1,6,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,368,    final double dot5 = theta2 * (3 + theta * (-12 + theta * (15 - 6 * theta)));,5,7,0,3,6,2,0,0,2,6,76,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,369,    final double dot6 = theta2 * theta * (4 + theta * (-15 + theta * (18 - 7 * theta)));,6,7,0,3,6,2,0,0,2,6,84,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,371,    if ((previousState != null) && (theta <= 0.5)) {,2,3,0,2,7,1,0,0,0,5,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,372,        for (int i = 0; i < interpolatedState.length; ++i) {,5,1,0,1,3,2,0,0,1,6,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,373,            interpolatedState[i] = previousState[i] +,0,1,1,0,4,0,0,0,1,4,41,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,381,            interpolatedDerivatives[i] =  v[0][i] + dot1 * v[1][i] + dot2 * v[2][i] +,2,8,1,0,14,0,0,0,1,5,73,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,386,        for (int i = 0; i < interpolatedState.length; ++i) {,5,1,0,1,3,2,0,0,1,6,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,387,            interpolatedState[i] = currentState[i] -,0,1,1,0,4,0,0,0,1,4,40,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,395,            interpolatedDerivatives[i] =  v[0][i] + dot1 * v[1][i] + dot2 * v[2][i] +,2,8,1,0,14,0,0,0,1,5,73,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,401,  },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,413,    final double[] yTmp = new double[currentState.length];,3,0,0,0,4,4,0,0,1,4,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,414,    final double pT = getGlobalPreviousTime();,1,0,0,1,2,2,1,0,2,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,417,    for (int j = 0; j < currentState.length; ++j) {,5,1,0,1,3,2,0,0,1,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,418,      s = K14_01 * yDotK[0][j]  + K14_06 * yDotK[5][j]  + K14_07 * yDotK[6][j] +,4,11,1,0,12,0,0,0,1,5,74,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,421,      yTmp[j] = currentState[j] + h * s;,2,2,1,0,4,0,0,0,1,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,423,"    integrator.computeDerivatives(pT + C14 * h, yTmp, yDotKLast[0]);",3,2,1,0,4,0,3,0,0,5,64,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,426,    for (int j = 0; j < currentState.length; ++j) {,5,1,0,1,3,2,0,0,1,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,427,     s = K15_01 * yDotK[0][j]  + K15_06 * yDotK[5][j]  + K15_07 * yDotK[6][j] +,4,12,1,0,12,0,0,0,1,5,74,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,431,     yTmp[j] = currentState[j] + h * s;,2,2,1,0,4,0,0,0,1,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,433,"    integrator.computeDerivatives(pT + C15 * h, yTmp, yDotKLast[1]);",3,2,1,0,4,0,3,0,0,5,64,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,436,    for (int j = 0; j < currentState.length; ++j) {,5,1,0,1,3,2,0,0,1,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,437,      s = K16_01 * yDotK[0][j]  + K16_06 * yDotK[5][j]  + K16_07 * yDotK[6][j] +,4,13,1,0,12,0,0,0,1,5,74,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,441,      yTmp[j] = currentState[j] + h * s;,2,2,1,0,4,0,0,0,1,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,443,"    integrator.computeDerivatives(pT + C16 * h, yTmp, yDotKLast[2]);",3,2,1,0,4,0,3,0,0,5,64,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,445,  },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,453,    finalizeStep();,0,0,0,1,2,0,1,0,1,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,455,    final int dimension = (currentState == null) ? -1 : currentState.length;,4,1,0,1,2,2,0,0,2,6,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,456,    out.writeInt(dimension);,0,0,0,1,2,0,3,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,457,    for (int i = 0; i < dimension; ++i) {,4,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,458,      out.writeDouble(yDotKLast[0][i]);,0,0,1,1,6,0,2,0,0,4,33,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,459,      out.writeDouble(yDotKLast[1][i]);,0,0,1,1,6,0,2,0,0,4,33,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,460,      out.writeDouble(yDotKLast[2][i]);,0,0,1,1,6,0,2,0,0,4,33,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,464,    super.writeExternal(out);,2,0,0,1,2,1,0,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,466,  },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,474,    yDotKLast = new double[3][];,1,0,0,0,4,2,0,0,1,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,475,    final int dimension = in.readInt();,1,0,0,1,2,2,2,0,1,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,476,    yDotKLast[0] = (dimension < 0) ? null : new double[dimension];,1,1,1,1,6,2,0,0,1,7,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,477,    yDotKLast[1] = (dimension < 0) ? null : new double[dimension];,1,1,1,1,6,2,0,0,1,7,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,478,    yDotKLast[2] = (dimension < 0) ? null : new double[dimension];,1,1,1,1,6,2,0,0,1,7,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,480,    for (int i = 0; i < dimension; ++i) {,4,1,0,1,3,2,0,0,1,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,481,      yDotKLast[0][i] = in.readDouble();,0,0,1,1,6,0,2,0,1,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,482,      yDotKLast[1][i] = in.readDouble();,0,0,1,1,6,0,2,0,1,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,483,      yDotKLast[2][i] = in.readDouble();,0,0,1,1,6,0,2,0,1,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,487,    super.readExternal(in);,2,0,0,1,2,1,0,0,0,4,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,489,  },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,89,      previousState = interpolator.previousState.clone();,3,0,0,1,2,0,1,0,1,5,51,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,91,      yDotK = new double[interpolator.yDotK.length][];,4,0,0,0,4,2,0,0,1,4,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,92,      for (int k = 0; k < interpolator.yDotK.length; ++k) {,6,1,0,1,3,2,0,0,1,6,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,93,        yDotK[k] = interpolator.yDotK[k].clone();,2,0,1,1,6,0,1,0,1,6,41,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,153,    writeBaseExternal(out);,0,0,0,1,2,0,2,0,1,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,156,    final int n = (currentState == null) ? -1 : currentState.length;,4,1,0,1,2,2,0,0,2,6,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,157,    for (int i = 0; i < n; ++i) {,4,1,0,1,3,2,0,0,1,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,158,      out.writeDouble(previousState[i]);,0,0,1,1,4,0,2,0,0,4,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,161,    final int kMax = (yDotK == null) ? -1 : yDotK.length;,4,1,0,1,2,2,0,0,2,6,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,162,    out.writeInt(kMax);,0,0,0,1,2,0,3,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,163,    for (int k = 0; k < kMax; ++k) {,4,1,0,1,3,2,0,0,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,164,      for (int i = 0; i < n; ++i) {,4,1,0,1,3,2,0,0,1,6,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,165,        out.writeDouble(yDotK[k][i]);,0,0,1,1,6,0,2,0,0,4,29,9,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,171,  },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,179,    final double t = readBaseExternal(in);,1,0,0,1,2,2,2,0,2,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,182,    final int n = (currentState == null) ? -1 : currentState.length;,4,1,0,1,2,2,0,0,2,6,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,183,    if (n < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,184,      previousState = null;,1,0,0,0,0,0,0,0,1,2,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,186,      previousState = new double[n];,1,0,1,0,2,2,0,0,1,5,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,187,      for (int i = 0; i < n; ++i) {,4,1,0,1,3,2,0,0,1,6,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,188,        previousState[i] = in.readDouble();,0,0,1,1,4,0,2,0,1,5,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,192,    final int kMax = in.readInt();,1,0,0,1,2,2,2,0,1,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,193,    yDotK = (kMax < 0) ? null : new double[kMax][];,2,1,1,1,6,2,0,0,1,7,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,194,    for (int k = 0; k < kMax; ++k) {,4,1,0,1,3,2,0,0,1,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,195,      yDotK[k] = (n < 0) ? null : new double[n];,1,1,1,1,6,2,0,0,1,7,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,196,      for (int i = 0; i < n; ++i) {,4,1,0,1,3,2,0,0,1,6,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,197,        yDotK[k][i] = in.readDouble();,0,0,1,1,6,0,2,0,1,5,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,201,    integrator = null;,1,0,0,0,0,0,0,0,1,2,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,203,    if (currentState != null) {,1,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,205,        setInterpolatedTime(t);,0,0,0,1,2,0,2,0,1,4,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,207,        interpolatedTime = t;,2,0,0,0,0,0,0,0,1,2,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,210,  },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,153,"    super(name, minStep, maxStep, vecAbsoluteTolerance, vecRelativeTolerance);",5,0,0,0,2,1,0,0,1,4,74,3,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,155,    this.fsal      = fsal;,2,0,0,0,0,1,0,0,1,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,156,    this.c         = c;,2,0,0,0,0,1,0,0,1,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,157,    this.a         = a;,2,0,0,0,0,1,0,0,1,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,158,    this.b         = b;,2,0,0,0,0,1,0,0,1,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,159,    this.prototype = prototype;,2,0,0,0,0,1,0,0,1,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,161,    exp = -1.0 / getOrder();,1,1,0,1,2,0,1,0,3,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,164,    setSafety(0.9);,0,0,0,1,2,0,1,0,1,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,165,    setMinReduction(0.2);,0,0,0,1,2,0,1,0,1,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,166,    setMaxGrowth(10.0);,0,0,0,1,2,0,1,0,1,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,168,  },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,179,    return safety;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,240,              for (int i = 0; i < scale.length; ++i) {,5,1,0,1,3,2,0,0,1,6,40,12,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,241,                scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * FastMath.abs(y[i]);,0,2,1,1,10,0,2,0,1,6,82,14,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,267,        for (int j = 0; j < y0.length; ++j) {,5,1,0,1,3,2,0,0,1,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,268,          double sum    = b[0] * yDotK[0][j];,1,1,1,0,6,1,0,0,0,5,35,11,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,269,          for (int l = 1; l < stages; ++l) {,4,1,0,1,3,2,0,0,1,6,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,270,            sum    += b[l] * yDotK[l][j];,1,1,1,0,6,0,0,0,1,5,29,12,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,272,          yTmp[j] = y[j] + stepSize * sum;,2,2,1,0,4,0,0,0,1,5,32,10,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,276,"        error = estimateError(yDotK, y, yTmp, stepSize);",1,0,0,0,2,0,5,0,2,4,48,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,277,        if (error >= 1.0) {,1,1,0,1,3,1,0,0,0,5,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,279,          final double factor =,1,0,0,0,0,2,0,0,1,3,21,10,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,282,"          hNew = filterStep(stepSize * factor, forward, false);",3,1,0,0,2,0,2,0,3,5,53,10,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,283,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,288,      interpolator.storeTime(stepStart + stepSize);,2,1,0,1,2,0,2,0,0,5,45,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,289,"      System.arraycopy(yTmp, 0, y, 0, y0.length);",2,0,0,0,2,0,4,0,0,3,43,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,290,"      System.arraycopy(yDotK[stages - 1], 0, yDotTmp, 0, y0.length);",3,1,1,0,4,0,3,0,0,5,62,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,291,"      stepStart = acceptStep(interpolator, y, yDotTmp, t);",1,0,0,0,2,0,5,0,2,4,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,292,"      System.arraycopy(y, 0, yTmp, 0, y.length);",2,0,0,0,2,0,4,0,0,3,42,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,294,      if (!isLastStep) {,1,0,0,1,3,1,0,0,1,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,297,          interpolator.storeTime(stepStart);,0,0,0,1,2,0,3,0,0,3,34,9,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,299,          if (fsal) {,1,0,0,1,3,1,0,0,0,4,11,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,301,"              System.arraycopy(yDotTmp, 0, yDotK[0], 0, y0.length);",2,0,1,0,4,0,3,0,0,4,53,11,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,305,          final double factor =,1,0,0,0,0,2,0,0,1,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,307,          final double  scaledH    = stepSize * factor;,3,1,0,0,0,2,0,0,1,4,45,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,308,          final double  nextT      = stepStart + scaledH;,3,1,0,0,0,2,0,0,1,4,47,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,309,          final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);,6,2,0,1,4,2,0,0,1,6,65,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,310,"          hNew = filterStep(scaledH, forward, nextIsLast);",1,0,0,0,2,0,4,0,2,4,48,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,312,          final double  filteredNextT      = stepStart + hNew;,3,1,0,0,0,2,0,0,1,4,52,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,313,          final boolean filteredNextIsLast = forward ? (filteredNextT >= t) : (filteredNextT <= t);,6,2,0,1,4,2,0,0,1,6,89,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,314,          if (filteredNextIsLast) {,1,0,0,1,3,1,0,0,0,4,25,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,315,              hNew = t - stepStart;,3,1,0,0,0,0,0,0,1,3,21,10,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,320,    } while (!isLastStep);,1,0,0,1,3,1,0,0,1,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,323,    equations.setTime(stepStart);,0,0,0,1,2,0,3,0,0,3,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,324,    equations.setCompleteState(y);,0,0,0,1,2,0,3,0,0,3,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,326,    resetInternalState();,0,0,0,1,2,0,1,0,1,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,328,  },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,334,    return minReduction;,1,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,348,    return maxGrowth;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,133,    super(name);,1,0,0,1,2,1,0,0,1,5,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,134,"    setStepSizeControl(minStep, maxStep, vecAbsoluteTolerance, vecRelativeTolerance);",0,0,0,0,2,0,5,0,1,3,81,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,135,    resetInternalState();,0,0,0,1,2,0,1,0,1,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,137,  },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,186,      minStep     = FastMath.abs(minimalStep);,1,0,0,1,2,0,3,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,187,      maxStep     = FastMath.abs(maximalStep);,1,0,0,1,2,0,3,0,1,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,188,      initialStep = -1;,1,0,0,0,0,0,0,0,2,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,190,      scalAbsoluteTolerance = 0;,1,0,0,0,0,0,0,0,1,2,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,191,      scalRelativeTolerance = 0;,1,0,0,0,0,0,0,0,1,2,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,192,      vecAbsoluteTolerance  = absoluteTolerance.clone();,1,0,0,1,2,0,2,0,1,5,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,193,      vecRelativeTolerance  = relativeTolerance.clone();,1,0,0,1,2,0,2,0,1,5,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,195,  },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,209,    if ((initialStepSize < minStep) || (initialStepSize > maxStep)) {,4,3,0,2,7,1,0,0,0,5,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,210,      initialStep = -1.0;,1,0,0,0,0,0,0,0,2,2,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,212,      initialStep = initialStepSize;,2,0,0,0,0,0,0,0,1,2,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,214,  },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,226,"          throw new DimensionMismatchException(mainSetDimension, vecAbsoluteTolerance.length);",3,0,0,0,2,2,0,1,1,5,84,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,230,"          throw new DimensionMismatchException(mainSetDimension, vecRelativeTolerance.length);",3,0,0,0,2,2,0,1,1,5,84,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,252,      return forward ? initialStep : -initialStep;,3,0,0,0,0,1,0,0,1,3,44,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,270,      h = -h;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,296,      h = getMinStep();,1,0,0,1,2,0,1,0,2,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,299,      h = getMaxStep();,1,0,0,1,2,0,1,0,2,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,302,      h = -h;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,321,      double filteredH = h;,2,0,0,0,0,1,0,0,0,2,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,322,      if (FastMath.abs(h) < minStep) {,1,1,0,2,5,1,3,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,323,          if (acceptSmall) {,1,0,0,1,3,1,0,0,0,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,324,              filteredH = forward ? minStep : -minStep;,4,0,0,0,0,0,0,0,2,2,41,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,326,"              throw new NumberIsTooSmallException(LocalizedFormats.MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION,",2,0,0,0,1,2,0,1,1,5,97,8,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,331,      if (filteredH > maxStep) {,2,1,0,1,3,1,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,332,          filteredH = maxStep;,2,0,0,0,0,0,0,0,1,2,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,333,      } else if (filteredH < -maxStep) {,2,1,0,1,4,2,0,0,1,6,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,334,          filteredH = -maxStep;,2,0,0,0,0,0,0,0,2,2,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,337,      return filteredH;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,349,    return stepStart;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,239,"    super(METHOD_NAME, true, STATIC_C, STATIC_A, STATIC_B,",4,0,0,0,1,1,0,0,2,4,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,242,  },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,255,    double error1 = 0;,1,0,0,0,0,1,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,256,    double error2 = 0;,1,0,0,0,0,1,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,258,    for (int j = 0; j < mainSetDimension; ++j) {,4,1,0,1,3,2,0,0,1,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,259,      final double errSum1 = E1_01 * yDotK[0][j]  + E1_06 * yDotK[5][j] +,3,9,1,0,8,2,0,0,1,6,67,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,263,      final double errSum2 = E2_01 * yDotK[0][j]  + E2_06 * yDotK[5][j] +,3,9,1,0,8,2,0,0,1,6,67,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,268,"      final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));",1,0,1,1,10,2,6,0,1,7,77,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,269,      final double tol = (vecAbsoluteTolerance == null) ?,2,1,0,1,2,2,0,0,1,6,51,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,272,      final double ratio1  = errSum1 / tol;,3,1,0,0,0,2,0,0,1,4,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,273,      error1        += ratio1 * ratio1;,3,1,0,0,0,0,0,0,1,3,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,274,      final double ratio2  = errSum2 / tol;,3,1,0,0,0,2,0,0,1,4,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,275,      error2        += ratio2 * ratio2;,3,1,0,0,0,0,0,0,1,3,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,278,    double den = error1 + 0.01 * error2;,3,2,0,0,0,1,0,0,0,3,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,279,    if (den <= 0.0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,280,      den = 1.0;,1,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,283,    return FastMath.abs(h) * error1 / FastMath.sqrt(mainSetDimension * den);,3,3,0,1,4,1,5,0,0,6,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,39,50,        this(boundIsAllowed ?,1,0,0,0,1,1,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,39,54,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,39,68,"        super(specific, wrong, min);",3,0,0,0,2,1,0,0,1,4,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,39,70,        this.min = min;,2,0,0,0,0,1,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,39,71,        this.boundIsAllowed = boundIsAllowed;,2,0,0,0,0,1,0,0,1,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,39,72,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,39,78,        return boundIsAllowed;,1,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,39,85,        return min;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/EventHandler,39,53,    public enum Action {,1,0,0,0,1,2,0,0,1,4,20,2,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/EventHandler,39,60,"        STOP,",1,0,0,0,0,0,0,0,0,1,5,3,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/EventHandler,39,69,"        RESET_STATE,",1,0,0,0,0,0,0,0,0,1,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/EventHandler,39,79,"        RESET_DERIVATIVES,",1,0,0,0,0,0,0,0,0,1,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/ode/events/EventHandler,39,86,        CONTINUE;,1,0,0,0,0,0,0,0,0,1,9,3,0.0,0,0
