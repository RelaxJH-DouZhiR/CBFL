project_path,version,lines,statement,suspicious,faulty,predict,miss_line
org/apache/commons/math/stat/descriptive/moment/Variance,41,370,"        return evaluate(values, weights, 0, values.length);",1.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,222,"        return test(values, weights, begin, length, false);",0.5,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,258,        if (weights == null) {,0.5,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,262,        if (weights.length != values.length) {,0.5,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,266,        boolean containsPositiveWeight = false;,0.5,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,267,        for (int i = begin; i < begin + length; i++) {,0.5,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,268,            if (Double.isNaN(weights[i])) {,0.5,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,271,            if (Double.isInfinite(weights[i])) {,0.5,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,274,            if (weights[i] < 0) {,0.5,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,277,            if (!containsPositiveWeight && weights[i] > 0.0) {,0.5,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,278,                containsPositiveWeight = true;,0.5,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,282,        if (!containsPositiveWeight) {,0.5,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,286,"        return test(values, begin, length, allowEmpty);",0.5,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,316,        double var = Double.NaN;,0.5,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,318,"        if (test(values, weights,begin, length)) {",0.5,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,319,            clear();,0.5,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,320,            if (length == 1) {,0.5,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,322,            } else if (length > 1) {,0.5,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,323,                Mean mean = new Mean();,0.5,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,324,"                double m = mean.evaluate(values, weights, begin, length);",0.5,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,325,"                var = evaluate(values, weights, m, begin, length);",0.5,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,328,        return var;,0.5,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,504,        double var = Double.NaN;,0.5,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,506,"        if (test(values, weights, begin, length)) {",0.5,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,507,            if (length == 1) {,0.5,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,509,            } else if (length > 1) {,0.5,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,510,                double accum = 0.0;,0.5,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,511,                double dev = 0.0;,0.5,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,512,                double accum2 = 0.0;,0.5,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,513,                for (int i = begin; i < begin + length; i++) {,0.5,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,514,                    dev = values[i] - mean;,0.5,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,515,                    accum += weights[i] * (dev * dev);,0.5,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,516,                    accum2 += weights[i] * dev;,0.5,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,519,                double sumWts = 0;,0.5,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,520,                for (int i = 0; i < weights.length; i++) {,0.5,1,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,521,                    sumWts += weights[i];,0.5,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,524,                if (isBiasCorrected) {,0.5,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,525,                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);,0.5,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,531,        return var;,0.5,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,41,205,"        if (test(values, weights, begin, length)) {",0.5,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,41,206,            Sum sum = new Sum();,0.5,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,41,209,"            double sumw = sum.evaluate(weights,begin,length);",0.5,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,41,210,"            double xbarw = sum.evaluate(values, weights, begin, length) / sumw;",0.5,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,41,213,            double correction = 0;,0.5,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,41,214,            for (int i = begin; i < begin + length; i++) {,0.5,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,41,215,                correction += weights[i] * (values[i] - xbarw);,0.5,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,41,217,            return xbarw + (correction/sumw);,0.5,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,41,159,        double sum = Double.NaN;,0.5,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,41,160,"        if (test(values, weights, begin, length, true)) {",0.5,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,41,161,            sum = 0.0;,0.5,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,41,162,            for (int i = begin; i < begin + length; i++) {,0.5,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,41,163,                sum += values[i] * weights[i];,0.5,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,41,166,        return sum;,0.5,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,204,        if (incMoment) {,0.01563,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,205,            moment.clear();,0.01563,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,207,    },0.01563,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,41,120,        double sum = Double.NaN;,0.01282,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,41,121,"        if (test(values, begin, length, true)) {",0.01282,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,41,122,            sum = 0.0;,0.01282,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,41,123,            for (int i = begin; i < begin + length; i++) {,0.01282,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,41,124,                sum += values[i];,0.01282,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,41,127,        return sum;,0.01282,0,,0
org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,92,        super.clear();,0.0122,0,,0
org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,93,        m2 = Double.NaN;,0.0122,0,,0
org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,94,    },0.0122,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,117,        m1 = Double.NaN;,0.0122,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,118,        n = 0;,0.0122,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,119,        dev = Double.NaN;,0.0122,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,120,        nDev = Double.NaN;,0.0122,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,121,    },0.0122,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,41,79,    public Mean() {,0.0101,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,41,80,        incMoment = true;,0.0101,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,41,81,        moment = new FirstMoment();,0.0101,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,41,82,    },0.0101,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,97,    public Variance() {,0.00952,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,98,        moment = new SecondMoment();,0.00952,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,99,    },0.00952,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,184,        return true;,0.00909,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,163,        if (values == null) {,0.00901,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,167,        if (begin < 0) {,0.00901,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,171,        if (length < 0) {,0.00901,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,175,        if (begin + length > values.length) {,0.00901,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,180,        if (length == 0 && !allowEmpty) {,0.00901,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,41,56,    public Sum() {,0.00758,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,41,57,        n = 0;,0.00758,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,41,58,        value = 0;,0.00758,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,41,59,    },0.00758,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,75,    protected SecondMoment moment = null;,0.00667,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,84,    protected boolean incMoment = true;,0.00667,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,91,    private boolean isBiasCorrected = true;,0.00667,0,,0
org/apache/commons/math/util/FastMath,41,375,        return Math.sqrt(a);,0.00662,0,,0
org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,60,        super();,0.0061,0,,0
org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,61,        m2 = Double.NaN;,0.0061,0,,0
org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,62,    },0.0061,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,79,    public FirstMoment() {,0.00585,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,80,        n = 0;,0.00585,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,81,        m1 = Double.NaN;,0.00585,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,82,        dev = Double.NaN;,0.00585,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,83,        nDev = Double.NaN;,0.00585,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,84,    },0.00585,0,,0
org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,41,35,public abstract class AbstractStorelessUnivariateStatistic,0.00585,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,39,public abstract class AbstractUnivariateStatistic,0.00578,0,,0
org/apache/commons/math/util/FastMath,41,104,    private static /* final */ boolean RECOMPUTE_TABLES_AT_RUNTIME = false;,0.00526,0,,0
org/apache/commons/math/util/FastMath,41,106,    private static /* final */ boolean LOAD_RESOURCES = false;,0.00526,0,,0
org/apache/commons/math/util/FastMath,41,115,    private static final double LN_QUICK_COEF[][] = {,0.00526,0,,0
org/apache/commons/math/util/FastMath,41,128,    private static final double LN_HI_PREC_COEF[][] = {,0.00526,0,,0
org/apache/commons/math/util/FastMath,41,141,    private static final double SINE_TABLE_A[] =,0.00526,0,,0
org/apache/commons/math/util/FastMath,41,160,    private static final double SINE_TABLE_B[] =,0.00526,0,,0
org/apache/commons/math/util/FastMath,41,179,    private static final double COSINE_TABLE_A[] =,0.00526,0,,0
org/apache/commons/math/util/FastMath,41,198,    private static final double COSINE_TABLE_B[] =,0.00526,0,,0
org/apache/commons/math/util/FastMath,41,218,    private static final double TANGENT_TABLE_A[] =,0.00526,0,,0
org/apache/commons/math/util/FastMath,41,237,    private static final double TANGENT_TABLE_B[] =,0.00526,0,,0
org/apache/commons/math/util/FastMath,41,256,    private static final long RECIP_2PI[] = new long[] {,0.00526,0,,0
org/apache/commons/math/util/FastMath,41,277,    private static final long PI_O_4_BITS[] = new long[] {,0.00526,0,,0
org/apache/commons/math/util/FastMath,41,285,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0.00526,0,,0
org/apache/commons/math/util/FastMath,41,288,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0.00526,0,,0
org/apache/commons/math/util/FastMath,41,3754,    private static class ExpFracTable {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3766,            if (RECOMPUTE_TABLES_AT_RUNTIME) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3767,                EXP_FRAC_TABLE_A = new double[FastMath.EXP_FRAC_TABLE_LEN];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3768,                EXP_FRAC_TABLE_B = new double[FastMath.EXP_FRAC_TABLE_LEN];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3770,                final double tmp[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3773,                final double factor = 1d / (EXP_FRAC_TABLE_LEN - 1);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3774,                for (int i = 0; i < EXP_FRAC_TABLE_A.length; i++) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3775,"                    FastMathCalc.slowexp(i * factor, tmp);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,3776,                    EXP_FRAC_TABLE_A[i] = tmp[0];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3777,                    EXP_FRAC_TABLE_B[i] = tmp[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3779,            } else if (LOAD_RESOURCES) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3780,                final double[][] expFrac = FastMathResources.loadExpFrac();,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3781,                EXP_FRAC_TABLE_A = expFrac[0];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3782,                EXP_FRAC_TABLE_B = expFrac[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3783,            } else {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3784,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3785,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3787,        },0.0,0,,0
org/apache/commons/math/util/FastMath,41,349,    private FastMath() {},0.0,0,,0
org/apache/commons/math/util/FastMath,41,361,        if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN){,0.0,0,,0
org/apache/commons/math/util/FastMath,41,362,            return d; // These are un-normalised - don't try to convert,0.0,0,,0
org/apache/commons/math/util/FastMath,41,364,        long xl = Double.doubleToLongBits(d);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,365,        xl = xl & MASK_30BITS; // Drop low order bits,0.0,0,,0
org/apache/commons/math/util/FastMath,41,366,        return Double.longBitsToDouble(xl);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,383,      if (x != x) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,384,          return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,392,      if (x > 20.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,393,          return exp(x)/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,396,      if (x < -20) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,397,          return exp(-x)/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,400,      double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,401,      if (x < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,402,          x = -x;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,404,"      exp(x, 0.0, hiPrec);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,406,      double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,407,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,409,      double temp = ya * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,410,      double yaa = ya + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,411,      double yab = ya - yaa;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,414,      double recip = 1.0/ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,415,      temp = recip * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,416,      double recipa = recip + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,417,      double recipb = recip - recipa;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,420,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,422,      recipb += -yb * recip * recip;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,425,      temp = ya + recipa;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,426,      yb += -(temp - ya - recipa);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,427,      ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,428,      temp = ya + recipb;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,429,      yb += -(temp - ya - recipb);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,430,      ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,432,      double result = ya + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,433,      result *= 0.5;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,434,      return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,442,      boolean negate = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,443,      if (x != x) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,444,          return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,452,      if (x > 20.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,453,          return exp(x)/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,456,      if (x < -20) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,457,          return -exp(-x)/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,460,      if (x == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,461,          return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,464,      if (x < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,465,          x = -x;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,466,          negate = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,471,      if (x > 0.25) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,472,          double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,473,"          exp(x, 0.0, hiPrec);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,475,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,476,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,478,          double temp = ya * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,479,          double yaa = ya + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,480,          double yab = ya - yaa;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,483,          double recip = 1.0/ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,484,          temp = recip * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,485,          double recipa = recip + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,486,          double recipb = recip - recipa;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,489,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,491,          recipb += -yb * recip * recip;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,493,          recipa = -recipa;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,494,          recipb = -recipb;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,497,          temp = ya + recipa;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,498,          yb += -(temp - ya - recipa);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,499,          ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,500,          temp = ya + recipb;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,501,          yb += -(temp - ya - recipb);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,502,          ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,504,          result = ya + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,505,          result *= 0.5;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,506,      },0.0,0,,0
org/apache/commons/math/util/FastMath,41,508,          double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,509,"          expm1(x, hiPrec);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,511,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,512,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,515,          double denom = 1.0 + ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,516,          double denomr = 1.0 / denom;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,517,          double denomb = -(denom - 1.0 - ya) + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,518,          double ratio = ya * denomr;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,519,          double temp = ratio * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,520,          double ra = ratio + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,521,          double rb = ratio - ra;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,523,          temp = denom * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,524,          double za = denom + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,525,          double zb = denom - za;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,527,          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,530,          rb += yb*denomr;                        // numerator,0.0,0,,0
org/apache/commons/math/util/FastMath,41,531,          rb += -ya * denomb * denomr * denomr;   // denominator,0.0,0,,0
org/apache/commons/math/util/FastMath,41,534,          temp = ya + ra;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,535,          yb += -(temp - ya - ra);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,536,          ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,537,          temp = ya + rb;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,538,          yb += -(temp - ya - rb);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,539,          ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,541,          result = ya + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,542,          result *= 0.5;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,545,      if (negate) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,546,          result = -result;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,549,      return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,557,      boolean negate = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,559,      if (x != x) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,560,          return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,569,      if (x > 20.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,570,          return 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,573,      if (x < -20) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,574,          return -1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,577,      if (x == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,578,          return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,581,      if (x < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,582,          x = -x;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,583,          negate = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,587,      if (x >= 0.5) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,588,          double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,590,"          exp(x*2.0, 0.0, hiPrec);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,592,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,593,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,596,          double na = -1.0 + ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,597,          double nb = -(na + 1.0 - ya);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,598,          double temp = na + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,599,          nb += -(temp - na - yb);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,600,          na = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,603,          double da = 1.0 + ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,604,          double db = -(da - 1.0 - ya);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,605,          temp = da + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,606,          db += -(temp - da - yb);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,607,          da = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,609,          temp = da * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,610,          double daa = da + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,611,          double dab = da - daa;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,614,          double ratio = na/da;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,615,          temp = ratio * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,616,          double ratioa = ratio + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,617,          double ratiob = ratio - ratioa;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,620,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,623,          ratiob += nb / da;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,625,          ratiob += -db * na / da / da;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,627,          result = ratioa + ratiob;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,628,      },0.0,0,,0
org/apache/commons/math/util/FastMath,41,630,          double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,632,"          expm1(x*2.0, hiPrec);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,634,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,635,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,638,          double na = ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,639,          double nb = yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,642,          double da = 2.0 + ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,643,          double db = -(da - 2.0 - ya);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,644,          double temp = da + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,645,          db += -(temp - da - yb);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,646,          da = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,648,          temp = da * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,649,          double daa = da + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,650,          double dab = da - daa;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,653,          double ratio = na/da;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,654,          temp = ratio * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,655,          double ratioa = ratio + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,656,          double ratiob = ratio - ratioa;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,659,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,662,          ratiob += nb / da;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,664,          ratiob += -db * na / da / da;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,666,          result = ratioa + ratiob;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,669,      if (negate) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,670,          result = -result;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,673,      return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,681,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,0.0,0,,0
org/apache/commons/math/util/FastMath,41,689,        boolean negative = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,690,        if (a < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,691,            negative = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,692,            a = -a;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,696,        if (a > 0.167) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,697,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,699,            final double a2 = a * a;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,700,            if (a > 0.097) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,701,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,702,            } else if (a > 0.036) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,703,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,704,            } else if (a > 0.0036) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,705,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,707,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,711,        return negative ? -absAsinh : absAsinh;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,719,        boolean negative = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,720,        if (a < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,721,            negative = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,722,            a = -a;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,726,        if (a > 0.15) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,727,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,0.0,0,,0
org/apache/commons/math/util/FastMath,41,729,            final double a2 = a * a;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,730,            if (a > 0.087) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,731,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));,0.0,0,,0
org/apache/commons/math/util/FastMath,41,732,            } else if (a > 0.031) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,733,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));,0.0,0,,0
org/apache/commons/math/util/FastMath,41,734,            } else if (a > 0.003) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,735,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));,0.0,0,,0
org/apache/commons/math/util/FastMath,41,737,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));,0.0,0,,0
org/apache/commons/math/util/FastMath,41,741,        return negative ? -absAtanh : absAtanh;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,750,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,0.0,0,,0
org/apache/commons/math/util/FastMath,41,759,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,0.0,0,,0
org/apache/commons/math/util/FastMath,41,767,"        return nextAfter(a, Double.POSITIVE_INFINITY);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,775,"        return nextAfter(a, Float.POSITIVE_INFINITY);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,783,        return Math.random();,0.0,0,,0
org/apache/commons/math/util/FastMath,41,807,"        return exp(x, 0.0, null);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,826,        if (x < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,827,            intVal = (int) -x;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,829,            if (intVal > 746) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,830,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,831,                    hiPrec[0] = 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,832,                    hiPrec[1] = 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,834,                return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,837,            if (intVal > 709) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,839,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",0.0,0,,0
org/apache/commons/math/util/FastMath,41,840,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,841,                    hiPrec[0] /= 285040095144011776.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,842,                    hiPrec[1] /= 285040095144011776.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,844,                return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,847,            if (intVal == 709) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,849,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",0.0,0,,0
org/apache/commons/math/util/FastMath,41,850,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,851,                    hiPrec[0] /= 4.455505956692756620;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,852,                    hiPrec[1] /= 4.455505956692756620;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,854,                return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,857,            intVal++;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,859,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,860,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,862,            intVal = -intVal;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,864,            intVal = (int) x;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,866,            if (intVal > 709) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,867,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,868,                    hiPrec[0] = Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,869,                    hiPrec[1] = 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,871,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,874,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,875,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,882,        final int intFrac = (int) ((x - intVal) * 1024.0);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,883,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,884,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,890,        final double epsilon = x - (intVal + intFrac / 1024.0);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,899,        double z = 0.04168701738764507;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,900,        z = z * epsilon + 0.1666666505023083;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,901,        z = z * epsilon + 0.5000000000042687;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,902,        z = z * epsilon + 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,903,        z = z * epsilon + -3.940510424527919E-20;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,910,        double tempA = intPartA * fracPartA;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,911,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,917,        final double tempC = tempB + tempA;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,919,        if (extra != 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,920,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,922,            result = tempC*z + tempB + tempA;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,925,        if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,927,            hiPrec[0] = tempA;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,928,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,931,        return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,939,"      return expm1(x, null);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,948,        if (x != x || x == 0.0) { // NaN or zero,0.0,0,,0
org/apache/commons/math/util/FastMath,41,949,            return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,952,        if (x <= -1.0 || x >= 1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,955,            double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,956,"            exp(x, 0.0, hiPrec);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,957,            if (x > 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,958,                return -1.0 + hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,960,                final double ra = -1.0 + hiPrec[0];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,961,                double rb = -(ra + 1.0 - hiPrec[0]);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,962,                rb += hiPrec[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,963,                return ra + rb;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,970,        boolean negative = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,972,        if (x < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,973,            x = -x;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,974,            negative = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,978,            int intFrac = (int) (x * 1024.0);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,979,            double tempA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,980,            double tempB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,982,            double temp = tempA + tempB;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,983,            tempB = -(temp - tempA - tempB);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,984,            tempA = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,986,            temp = tempA * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,987,            baseA = tempA + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,988,            baseB = tempB + (tempA - baseA);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,990,            epsilon = x - intFrac/1024.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,995,        double zb = 0.008336750013465571;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,996,        zb = zb * epsilon + 0.041666663879186654;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,997,        zb = zb * epsilon + 0.16666666666745392;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,998,        zb = zb * epsilon + 0.49999999999999994;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,999,        zb = zb * epsilon;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1000,        zb = zb * epsilon;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1002,        double za = epsilon;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1003,        double temp = za + zb;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1004,        zb = -(temp - za - zb);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1005,        za = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1007,        temp = za * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1008,        temp = za + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1009,        zb += za - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1010,        za = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1013,        double ya = za * baseA;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1015,        temp = ya + za * baseB;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1016,        double yb = -(temp - ya - za * baseB);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1017,        ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1019,        temp = ya + zb * baseA;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1020,        yb += -(temp - ya - zb * baseA);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1021,        ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1023,        temp = ya + zb * baseB;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1024,        yb += -(temp - ya - zb*baseB);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1025,        ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1029,        temp = ya + baseA;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1030,        yb += -(temp - baseA - ya);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1031,        ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1033,        temp = ya + za;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1035,        yb += -(temp - ya - za);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1036,        ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1038,        temp = ya + baseB;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1040,        yb += -(temp - ya - baseB);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1041,        ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1043,        temp = ya + zb;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1045,        yb += -(temp - ya - zb);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1046,        ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1048,        if (negative) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1050,            double denom = 1.0 + ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1051,            double denomr = 1.0 / denom;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1052,            double denomb = -(denom - 1.0 - ya) + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1053,            double ratio = ya * denomr;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1054,            temp = ratio * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1055,            final double ra = ratio + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1056,            double rb = ratio - ra;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1058,            temp = denom * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1059,            za = denom + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1060,            zb = denom - za;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1062,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1073,            rb += yb * denomr;                      // numerator,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1074,            rb += -ya * denomb * denomr * denomr;   // denominator,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1077,            ya = -ra;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1078,            yb = -rb;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1081,        if (hiPrecOut != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1082,            hiPrecOut[0] = ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1083,            hiPrecOut[1] = yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1086,        return ya + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1096,"        return log(x, null);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,1106,        if (x==0) { // Handle special case of +0/-0,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1107,            return Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1109,        long bits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1112,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1113,            if (x != 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1114,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1115,                    hiPrec[0] = Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1118,                return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1123,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1124,            if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1125,                hiPrec[0] = Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1128,            return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1132,        int exp = (int)(bits >> 52)-1023;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1134,        if ((bits & 0x7ff0000000000000L) == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1136,            if (x == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1138,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1139,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1142,                return Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1146,            bits <<= 1;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1147,            while ( (bits & 0x0010000000000000L) == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1148,                exp--;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1149,                bits <<= 1;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1154,        if (exp == -1 || exp == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1155,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1160,                double xa = x - 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1161,                double xb = xa - x + 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1162,                double tmp = xa * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1163,                double aa = xa + tmp - tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1164,                double ab = xa - aa;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1165,                xa = aa;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1166,                xb = ab;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1168,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1169,                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1171,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1173,                    aa = ya * xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1174,                    ab = ya * xb + yb * xa + yb * xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1176,                    tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1177,                    ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1178,                    yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1181,                    aa = ya + LN_QUICK_COEF[i][0];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1182,                    ab = yb + LN_QUICK_COEF[i][1];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1184,                    tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1185,                    ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1186,                    yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1190,                aa = ya * xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1191,                ab = ya * xb + yb * xa + yb * xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1193,                tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1194,                ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1195,                yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1197,                return ya + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1202,        double lnm[] = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1213,        double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1215,        double lnza = 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1216,        double lnzb = 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1218,        if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1220,            double tmp = epsilon * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1221,            double aa = epsilon + tmp - tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1222,            double ab = epsilon - aa;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1223,            double xa = aa;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1224,            double xb = ab;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1227,            double numer = bits & 0x3ffffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1228,            double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1229,            aa = numer - xa*denom - xb * denom;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1230,            xb += aa / denom;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1233,            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1234,            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1236,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1238,                aa = ya * xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1239,                ab = ya * xb + yb * xa + yb * xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1241,                tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1242,                ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1243,                yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1246,                aa = ya + LN_HI_PREC_COEF[i][0];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1247,                ab = yb + LN_HI_PREC_COEF[i][1];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1249,                tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1250,                ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1251,                yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1255,            aa = ya * xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1256,            ab = ya * xb + yb * xa + yb * xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1264,            lnza = aa + ab;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1265,            lnzb = -(lnza - aa - ab);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1266,        } else {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1269,            lnza = -0.16624882440418567;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1270,            lnza = lnza * epsilon + 0.19999954120254515;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1271,            lnza = lnza * epsilon + -0.2499999997677497;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1272,            lnza = lnza * epsilon + 0.3333333333332802;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1273,            lnza = lnza * epsilon + -0.5;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1274,            lnza = lnza * epsilon + 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1275,            lnza = lnza * epsilon;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1292,        double a = LN_2_A*exp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1293,        double b = 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1294,        double c = a+lnm[0];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1295,        double d = -(c-a-lnm[0]);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1296,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1297,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1299,        c = a + lnza;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1300,        d = -(c - a - lnza);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1301,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1302,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1304,        c = a + LN_2_B*exp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1305,        d = -(c - a - LN_2_B*exp);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1306,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1307,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1309,        c = a + lnm[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1310,        d = -(c - a - lnm[1]);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1311,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1312,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1314,        c = a + lnzb;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1315,        d = -(c - a - lnzb);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1316,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1317,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1319,        if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1320,            hiPrec[0] = a;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1321,            hiPrec[1] = b;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1324,        return a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1333,        if (x == -1) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1334,            return x/0.0;   // -Infinity,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1337,        if (x > 0 && 1/x == 0) { // x = Infinity,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1338,            return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1341,        if (x>1e-6 || x<-1e-6) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1342,            double xpa = 1.0 + x;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1343,            double xpb = -(xpa - 1.0 - x);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1345,            double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1347,"            final double lores = log(xpa, hiPrec);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,1348,            if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1349,                return lores;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1354,            double fx1 = xpb/xpa;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1356,            double epsilon = 0.5 * fx1 + 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1357,            epsilon = epsilon * fx1;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1359,            return epsilon + hiPrec[1] + hiPrec[0];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1363,        double y = x * F_1_3 - F_1_2;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1364,        y = y * x + 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1365,        y = y * x;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1367,        return y;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1375,        final double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1377,"        final double lores = log(x, hiPrec);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,1378,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1379,            return lores;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1382,        final double tmp = hiPrec[0] * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1383,        final double lna = hiPrec[0] + tmp - tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1384,        final double lnb = hiPrec[0] - lna + hiPrec[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1386,        final double rln10a = 0.4342944622039795;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1387,        final double rln10b = 1.9699272335463627E-8;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1389,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1409,        return log(x) / log(base);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1420,        final double lns[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1422,        if (y == 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1423,            return 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1426,        if (x != x) { // X is NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1427,            return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1431,        if (x == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1432,            long bits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1433,            if ((bits & 0x8000000000000000L) != 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1435,                long yi = (long) y;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1437,                if (y < 0 && y == yi && (yi & 1) == 1) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1438,                    return Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1441,                if (y > 0 && y == yi && (yi & 1) == 1) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1442,                    return -0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1446,            if (y < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1447,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1449,            if (y > 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1450,                return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1453,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1456,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1457,            if (y != y) { // y is NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1458,                return y;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1460,            if (y < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1461,                return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1463,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1467,        if (y == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1468,            if (x * x == 1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1469,                return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1472,            if (x * x > 1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1473,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1475,                return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1479,        if (x == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1480,            if (y != y) { // y is NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1481,                return y;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1484,            if (y < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1485,                long yi = (long) y;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1486,                if (y == yi && (yi & 1) == 1) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1487,                    return -0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1490,                return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1493,            if (y > 0)  {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1494,                long yi = (long) y;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1495,                if (y == yi && (yi & 1) == 1) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1496,                    return Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1499,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1503,        if (y == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1505,            if (x * x == 1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1506,                return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1509,            if (x * x < 1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1510,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1512,                return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1517,        if (x < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1519,            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1520,"                return pow(-x, y);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,1523,            if (y == (long) y) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1525,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,1527,                return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1534,        if (y < 8e298 && y > -8e298) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1535,            double tmp1 = y * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1536,            ya = y + tmp1 - tmp1;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1537,            yb = y - ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1538,        } else {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1539,            double tmp1 = y * 9.31322574615478515625E-10;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1540,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1541,            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1542,            yb = y - ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1546,"        final double lores = log(x, lns);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,1547,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1548,            return lores;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1551,        double lna = lns[0];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1552,        double lnb = lns[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1555,        double tmp1 = lna * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1556,        double tmp2 = lna + tmp1 - tmp1;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1557,        lnb += lna - tmp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1558,        lna = tmp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1561,        final double aa = lna * ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1562,        final double ab = lna * yb + lnb * ya + lnb * yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1564,        lna = aa+ab;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1565,        lnb = -(lna - aa - ab);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1567,        double z = 1.0 / 120.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1568,        z = z * lnb + (1.0 / 24.0);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1569,        z = z * lnb + (1.0 / 6.0);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1570,        z = z * lnb + 0.5;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1571,        z = z * lnb + 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1572,        z = z * lnb;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1574,"        final double result = exp(lna, z, null);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,1576,        return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1588,        double x2 = x*x;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1590,        double p = 2.7553817452272217E-6;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1591,        p = p * x2 + -1.9841269659586505E-4;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1592,        p = p * x2 + 0.008333333333329196;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1593,        p = p * x2 + -0.16666666666666666;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1596,        p = p * x2 * x;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1598,        return p;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1608,        double x2 = x*x;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1610,        double p = 2.479773539153719E-5;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1611,        p = p * x2 + -0.0013888888689039883;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1612,        p = p * x2 + 0.041666666666621166;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1613,        p = p * x2 + -0.49999999999999994;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1614,        p *= x2;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1616,        return p;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1627,        int idx = (int) ((xa * 8.0) + 0.5);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1628,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1631,        final double sintA = SINE_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1632,        final double sintB = SINE_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1633,        final double costA = COSINE_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1634,        final double costB = COSINE_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1637,        double sinEpsA = epsilon;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1638,        double sinEpsB = polySine(epsilon);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1639,        final double cosEpsA = 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1640,        final double cosEpsB = polyCosine(epsilon);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1643,        final double temp = sinEpsA * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1644,        double temp2 = (sinEpsA + temp) - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1645,        sinEpsB +=  sinEpsA - temp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1646,        sinEpsA = temp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1672,        double a = 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1673,        double b = 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1675,        double t = sintA;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1676,        double c = a + t;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1677,        double d = -(c - a - t);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1678,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1679,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1681,        t = costA * sinEpsA;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1682,        c = a + t;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1683,        d = -(c - a - t);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1684,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1685,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1687,        b = b + sintA * cosEpsB + costA * sinEpsB;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1702,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1729,        if (xb != 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1730,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1732,            c = a + t;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1733,            d = -(c - a - t);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1734,            a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1735,            b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1738,        result = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1740,        return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1751,        final double pi2a = 1.5707963267948966;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1752,        final double pi2b = 6.123233995736766E-17;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1754,        final double a = pi2a - xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1755,        double b = -(a - pi2a + xa);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1756,        b += pi2b - xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1758,"        return sinQ(a, b);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,1771,        int idx = (int) ((xa * 8.0) + 0.5);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1772,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1775,        final double sintA = SINE_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1776,        final double sintB = SINE_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1777,        final double costA = COSINE_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1778,        final double costB = COSINE_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1781,        double sinEpsA = epsilon;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1782,        double sinEpsB = polySine(epsilon);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1783,        final double cosEpsA = 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1784,        final double cosEpsB = polyCosine(epsilon);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1787,        double temp = sinEpsA * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1788,        double temp2 = (sinEpsA + temp) - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1789,        sinEpsB +=  sinEpsA - temp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1790,        sinEpsA = temp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1815,        double a = 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1816,        double b = 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1819,        double t = sintA;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1820,        double c = a + t;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1821,        double d = -(c - a - t);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1822,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1823,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1825,        t = costA*sinEpsA;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1826,        c = a + t;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1827,        d = -(c - a - t);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1828,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1829,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1831,        b = b + sintA*cosEpsB + costA*sinEpsB;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1832,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1834,        double sina = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1835,        double sinb = -(sina - a - b);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1839,        a = b = c = d = 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1841,        t = costA*cosEpsA;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1842,        c = a + t;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1843,        d = -(c - a - t);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1844,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1845,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1847,        t = -sintA*sinEpsA;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1848,        c = a + t;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1849,        d = -(c - a - t);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1850,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1851,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1853,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1854,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1856,        double cosa = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1857,        double cosb = -(cosa - a - b);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1859,        if (cotanFlag) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1861,            tmp = cosa; cosa = sina; sina = tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1862,            tmp = cosb; cosb = sinb; sinb = tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1876,        double est = sina/cosa;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1879,        temp = est * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1880,        double esta = (est + temp) - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1881,        double estb =  est - esta;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1883,        temp = cosa * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1884,        double cosaa = (cosa + temp) - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1885,        double cosab =  cosa - cosaa;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1888,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1889,        err += sinb/cosa;                     // Change in est due to sinb,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1890,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1892,        if (xb != 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1895,            double xbadj = xb + est*est*xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1896,            if (cotanFlag) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1897,                xbadj = -xbadj;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1900,            err += xbadj;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1903,        return est+err;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1920,        long inbits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1921,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1924,        inbits &= 0x000fffffffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1925,        inbits |= 0x0010000000000000L;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1928,        exponent++;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1929,        inbits <<= 11;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1935,        int idx = exponent >> 6;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1936,        int shift = exponent - (idx << 6);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1938,        if (shift != 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1939,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1940,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1941,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1942,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1944,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1945,            shpiA = RECIP_2PI[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1946,            shpiB = RECIP_2PI[idx+1];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1950,        long a = inbits >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1951,        long b = inbits & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1953,        long c = shpiA >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1954,        long d = shpiA & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1956,        long ac = a * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1957,        long bd = b * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1958,        long bc = b * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1959,        long ad = a * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1961,        long prodB = bd + (ad << 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1962,        long prodA = ac + (ad >>> 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1964,        boolean bita = (bd & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1965,        boolean bitb = (ad & 0x80000000L ) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1966,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1969,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1971,            prodA++;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1974,        bita = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1975,        bitb = (bc & 0x80000000L ) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1977,        prodB = prodB + (bc << 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1978,        prodA = prodA + (bc >>> 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1980,        bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1983,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1985,            prodA++;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1989,        c = shpiB >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1990,        d = shpiB & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1991,        ac = a * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1992,        bc = b * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1993,        ad = a * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1996,        ac = ac + ((bc + ad) >>> 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1998,        bita = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,1999,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2000,        prodB += ac;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2001,        bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2003,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2005,            prodA++;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2009,        c = shpi0 >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2010,        d = shpi0 & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2012,        bd = b * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2013,        bc = b * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2014,        ad = a * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2016,        prodA += bd + ((bc + ad) << 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2028,        int intPart = (int)(prodA >>> 62);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2031,        prodA <<= 2;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2032,        prodA |= prodB >>> 62;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2033,        prodB <<= 2;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2036,        a = prodA >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2037,        b = prodA & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2039,        c = PI_O_4_BITS[0] >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2040,        d = PI_O_4_BITS[0] & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2042,        ac = a * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2043,        bd = b * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2044,        bc = b * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2045,        ad = a * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2047,        long prod2B = bd + (ad << 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2048,        long prod2A = ac + (ad >>> 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2050,        bita = (bd & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2051,        bitb = (ad & 0x80000000L ) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2052,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2055,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2057,            prod2A++;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2060,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2061,        bitb = (bc & 0x80000000L ) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2063,        prod2B = prod2B + (bc << 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2064,        prod2A = prod2A + (bc >>> 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2066,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2069,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2071,            prod2A++;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2075,        c = PI_O_4_BITS[1] >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2076,        d = PI_O_4_BITS[1] & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2077,        ac = a * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2078,        bc = b * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2079,        ad = a * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2082,        ac = ac + ((bc + ad) >>> 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2084,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2085,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2086,        prod2B += ac;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2087,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2089,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2091,            prod2A++;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2095,        a = prodB >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2096,        b = prodB & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2097,        c = PI_O_4_BITS[0] >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2098,        d = PI_O_4_BITS[0] & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2099,        ac = a * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2100,        bc = b * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2101,        ad = a * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2104,        ac = ac + ((bc + ad) >>> 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2106,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2107,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2108,        prod2B += ac;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2109,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2111,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2113,            prod2A++;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2117,        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2118,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2120,        double sumA = tmpA + tmpB;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2121,        double sumB = -(sumA - tmpA - tmpB);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2124,        result[0] = intPart;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2125,        result[1] = sumA * 2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2126,        result[2] = sumB * 2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2127,    },0.0,0,,0
org/apache/commons/math/util/FastMath,41,2135,        boolean negative = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2136,        int quadrant = 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2138,        double xb = 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2141,        xa = x;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2142,        if (x < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2143,            negative = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2144,            xa = -xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2148,        if (xa == 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2149,            long bits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2150,            if (bits < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2151,                return -0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2153,            return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2156,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2157,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2161,        if (xa > 3294198.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2165,            double reduceResults[] = new double[3];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2166,"            reducePayneHanek(xa, reduceResults);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,2167,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2168,            xa = reduceResults[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2169,            xb = reduceResults[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2170,        } else if (xa > 1.5707963267948966) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2175,            int k = (int)(xa * 0.6366197723675814);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2181,                double a = -k * 1.570796251296997;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2182,                remA = xa + a;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2183,                remB = -(remA - xa - a);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2185,                a = -k * 7.549789948768648E-8;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2186,                double b = remA;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2187,                remA = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2188,                remB += -(remA - b - a);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2190,                a = -k * 6.123233995736766E-17;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2191,                b = remA;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2192,                remA = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2193,                remB += -(remA - b - a);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2195,                if (remA > 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2196,                    break;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2202,                k--;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2203,            },0.0,0,,0
org/apache/commons/math/util/FastMath,41,2204,            quadrant = k & 3;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2205,            xa = remA;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2206,            xb = remB;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2209,        if (negative) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2210,            quadrant ^= 2;  // Flip bit 1,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2213,        switch (quadrant) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2215,"                return sinQ(xa, xb);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,2217,"                return cosQ(xa, xb);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,2219,"                return -sinQ(xa, xb);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,2221,"                return -cosQ(xa, xb);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,2223,                return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2233,        int quadrant = 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2236,        double xa = x;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2237,        if (x < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2238,            xa = -xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2241,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2242,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2246,        double xb = 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2247,        if (xa > 3294198.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2251,            double reduceResults[] = new double[3];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2252,"            reducePayneHanek(xa, reduceResults);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,2253,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2254,            xa = reduceResults[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2255,            xb = reduceResults[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2256,        } else if (xa > 1.5707963267948966) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2261,            int k = (int)(xa * 0.6366197723675814);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2267,                double a = -k * 1.570796251296997;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2268,                remA = xa + a;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2269,                remB = -(remA - xa - a);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2271,                a = -k * 7.549789948768648E-8;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2272,                double b = remA;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2273,                remA = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2274,                remB += -(remA - b - a);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2276,                a = -k * 6.123233995736766E-17;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2277,                b = remA;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2278,                remA = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2279,                remB += -(remA - b - a);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2281,                if (remA > 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2282,                    break;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2288,                k--;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2289,            },0.0,0,,0
org/apache/commons/math/util/FastMath,41,2290,            quadrant = k & 3;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2291,            xa = remA;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2292,            xb = remB;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2298,        switch (quadrant) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2300,"                return cosQ(xa, xb);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,2302,"                return -sinQ(xa, xb);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,2304,"                return -cosQ(xa, xb);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,2306,"                return sinQ(xa, xb);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,2308,                return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2318,        boolean negative = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2319,        int quadrant = 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2322,        double xa = x;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2323,        if (x < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2324,            negative = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2325,            xa = -xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2329,        if (xa == 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2330,            long bits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2331,            if (bits < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2332,                return -0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2334,            return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2337,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2338,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2342,        double xb = 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2343,        if (xa > 3294198.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2347,            double reduceResults[] = new double[3];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2348,"            reducePayneHanek(xa, reduceResults);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,2349,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2350,            xa = reduceResults[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2351,            xb = reduceResults[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2352,        } else if (xa > 1.5707963267948966) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2357,            int k = (int)(xa * 0.6366197723675814);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2363,                double a = -k * 1.570796251296997;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2364,                remA = xa + a;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2365,                remB = -(remA - xa - a);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2367,                a = -k * 7.549789948768648E-8;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2368,                double b = remA;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2369,                remA = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2370,                remB += -(remA - b - a);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2372,                a = -k * 6.123233995736766E-17;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2373,                b = remA;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2374,                remA = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2375,                remB += -(remA - b - a);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2377,                if (remA > 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2378,                    break;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2384,                k--;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2385,            },0.0,0,,0
org/apache/commons/math/util/FastMath,41,2386,            quadrant = k & 3;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2387,            xa = remA;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2388,            xb = remB;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2391,        if (xa > 1.5) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2393,            final double pi2a = 1.5707963267948966;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2394,            final double pi2b = 6.123233995736766E-17;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2396,            final double a = pi2a - xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2397,            double b = -(a - pi2a + xa);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2398,            b += pi2b - xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2400,            xa = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2401,            xb = -(xa - a - b);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2402,            quadrant ^= 1;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2403,            negative ^= true;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2407,        if ((quadrant & 1) == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2408,"            result = tanQ(xa, xb, false);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,2410,"            result = -tanQ(xa, xb, true);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,2413,        if (negative) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2414,            result = -result;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2417,        return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2426,"        return atan(x, 0.0, false);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,2436,        boolean negate = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2439,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2440,"            return leftPlane ? copySign(Math.PI, xa) : xa;",0.0,0,,0
org/apache/commons/math/util/FastMath,41,2443,        if (xa < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2445,            xa = -xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2446,            xb = -xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2447,            negate = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2450,        if (xa > 1.633123935319537E16) { // Very large input,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2451,            return (negate ^ leftPlane) ? (-Math.PI/2.0) : (Math.PI/2.0);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2455,        if (xa < 1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2456,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2458,            double temp = 1.0/xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2459,            idx = (int) (-((-1.7168146928204136 * temp * temp + 8.0) * temp) + 13.07);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2461,        double epsA = xa - TANGENT_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2462,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2463,        epsB += xb - TANGENT_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2465,        double temp = epsA + epsB;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2466,        epsB = -(temp - epsA - epsB);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2467,        epsA = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2470,        temp = xa * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2471,        double ya = xa + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2472,        double yb = xb + xa - ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2473,        xa = ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2474,        xb += yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2477,        if (idx == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2480,            double denom = 1.0 / (1.0 + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2482,            ya = epsA * denom;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2483,            yb = epsB * denom;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2484,        } else {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2485,            double temp2 = xa * TANGENT_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2486,            double za = 1.0 + temp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2487,            double zb = -(za - 1.0 - temp2);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2488,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2489,            temp = za + temp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2490,            zb += -(temp - za - temp2);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2491,            za = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2493,            zb += xb * TANGENT_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2494,            ya = epsA / za;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2496,            temp = ya * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2497,            final double yaa = (ya + temp) - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2498,            final double yab = ya - yaa;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2500,            temp = za * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2501,            final double zaa = (za + temp) - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2502,            final double zab = za - zaa;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2505,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2507,            yb += -epsA * zb / za / za;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2508,            yb += epsB / za;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2512,        epsA = ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2513,        epsB = yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2516,        double epsA2 = epsA*epsA;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2527,        yb = 0.07490822288864472;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2528,        yb = yb * epsA2 + -0.09088450866185192;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2529,        yb = yb * epsA2 + 0.11111095942313305;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2530,        yb = yb * epsA2 + -0.1428571423679182;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2531,        yb = yb * epsA2 + 0.19999999999923582;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2532,        yb = yb * epsA2 + -0.33333333333333287;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2533,        yb = yb * epsA2 * epsA;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2536,        ya = epsA;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2538,        temp = ya + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2539,        yb = -(temp - ya - yb);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2540,        ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2543,        yb += epsB / (1.0 + epsA * epsA);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2549,        double za = EIGHTHS[idx] + ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2550,        double zb = -(za - EIGHTHS[idx] - ya);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2551,        temp = za + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2552,        zb += -(temp - za - yb);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2553,        za = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2555,        result = za + zb;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2556,        resultb = -(result - za - zb);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2558,        if (leftPlane) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2560,            final double pia = 1.5707963267948966*2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2561,            final double pib = 6.123233995736766E-17*2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2563,            za = pia - result;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2564,            zb = -(za - pia + result);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2565,            zb += pib - resultb;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2567,            result = za + zb;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2568,            resultb = -(result - za - zb);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2572,        if (negate ^ leftPlane) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2573,            result = -result;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2576,        return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2586,        if (x !=x || y != y) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2587,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2590,        if (y == 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2591,            double result = x*y;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2592,            double invx = 1.0/x;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2593,            double invy = 1.0/y;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2595,            if (invx == 0.0) { // X is infinite,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2596,                if (x > 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2597,                    return y; // return +/- 0.0,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2599,"                    return copySign(Math.PI, y);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,2603,            if (x < 0.0 || invx < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2604,                if (y < 0.0 || invy < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2605,                    return -Math.PI;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2607,                    return Math.PI;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2610,                return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2616,        if (y == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2617,            if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2618,                return Math.PI/4.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2621,            if (x == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2622,                return Math.PI * F_3_4;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2625,            return Math.PI/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2628,        if (y == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2629,            if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2630,                return -Math.PI/4.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2633,            if (x == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2634,                return -Math.PI * F_3_4;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2637,            return -Math.PI/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2640,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2641,            if (y > 0.0 || 1/y > 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2642,                return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2645,            if (y < 0.0 || 1/y < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2646,                return -0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2650,        if (x == Double.NEGATIVE_INFINITY),0.0,0,,0
org/apache/commons/math/util/FastMath,41,2652,            if (y > 0.0 || 1/y > 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2653,                return Math.PI;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2656,            if (y < 0.0 || 1/y < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2657,                return -Math.PI;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2663,        if (x == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2664,            if (y > 0.0 || 1/y > 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2665,                return Math.PI/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2668,            if (y < 0.0 || 1/y < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2669,                return -Math.PI/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2674,        final double r = y/x;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2675,        if (Double.isInfinite(r)) { // bypass calculations that can create NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2676,"            return atan(r, 0, x < 0);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,2679,        double ra = doubleHighPart(r);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2680,        double rb = r - ra;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2683,        final double xa = doubleHighPart(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2684,        final double xb = x - xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2686,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2688,        double temp = ra + rb;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2689,        rb = -(temp - ra - rb);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2690,        ra = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2692,        if (ra == 0) { // Fix up the sign so atan works correctly,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2693,"            ra = copySign(0.0, y);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,2697,"        double result = atan(ra, rb, x < 0);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,2699,        return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2707,      if (x != x) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2708,          return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2711,      if (x > 1.0 || x < -1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2712,          return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2715,      if (x == 1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2716,          return Math.PI/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2719,      if (x == -1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2720,          return -Math.PI/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2723,      if (x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2724,          return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2730,      double temp = x * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2731,      final double xa = x + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2732,      final double xb = x - xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2735,      double ya = xa*xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2736,      double yb = xa*xb*2.0 + xb*xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2739,      ya = -ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2740,      yb = -yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2742,      double za = 1.0 + ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2743,      double zb = -(za - 1.0 - ya);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2745,      temp = za + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2746,      zb += -(temp - za - yb);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2747,      za = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2751,      y = sqrt(za);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2752,      temp = y * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2753,      ya = y + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2754,      yb = y - ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2757,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2760,      double dx = zb / (2.0*y);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2763,      double r = x/y;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2764,      temp = r * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2765,      double ra = r + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2766,      double rb = r - ra;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2768,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2769,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2771,      temp = ra + rb;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2772,      rb = -(temp - ra - rb);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2773,      ra = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2775,"      return atan(ra, rb, false);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,2783,      if (x != x) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2784,          return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2787,      if (x > 1.0 || x < -1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2788,          return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2791,      if (x == -1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2792,          return Math.PI;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2795,      if (x == 1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2796,          return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2799,      if (x == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2800,          return Math.PI/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2806,      double temp = x * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2807,      final double xa = x + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2808,      final double xb = x - xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2811,      double ya = xa*xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2812,      double yb = xa*xb*2.0 + xb*xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2815,      ya = -ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2816,      yb = -yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2818,      double za = 1.0 + ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2819,      double zb = -(za - 1.0 - ya);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2821,      temp = za + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2822,      zb += -(temp - za - yb);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2823,      za = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2826,      double y = sqrt(za);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2827,      temp = y * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2828,      ya = y + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2829,      yb = y - ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2832,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2835,      yb += zb / (2.0*y);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2836,      y = ya+yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2837,      yb = -(y - ya - yb);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2840,      double r = y/x;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2843,      if (Double.isInfinite(r)) { // x is effectively zero,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2844,          return Math.PI/2; // so return the appropriate value,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2847,      double ra = doubleHighPart(r);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2848,      double rb = r - ra;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2850,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2851,      rb += yb / x;  // Add in effect additional bits of sqrt.,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2853,      temp = ra + rb;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2854,      rb = -(temp - ra - rb);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2855,      ra = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2857,"      return atan(ra, rb, x<0);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,2866,      long inbits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2867,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2868,      boolean subnormal = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2870,      if (exponent == -1023) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2871,          if (x == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2872,              return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2876,          subnormal = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2877,          x *= 1.8014398509481984E16;  // 2^54,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2878,          inbits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2879,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2882,      if (exponent == 1024) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2884,          return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2888,      int exp3 = exponent / 3;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2891,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2895,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2898,      double est = -0.010714690733195933;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2899,      est = est * mant + 0.0875862700108075;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2900,      est = est * mant + -0.3058015757857271;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2901,      est = est * mant + 0.7249995199969751;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2902,      est = est * mant + 0.5039018405998233;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2904,      est *= CBRTTWO[exponent % 3 + 2];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2909,      final double xs = x / (p2*p2*p2);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2910,      est += (xs - est*est*est) / (3*est*est);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2911,      est += (xs - est*est*est) / (3*est*est);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2914,      double temp = est * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2915,      double ya = est + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2916,      double yb = est - ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2918,      double za = ya * ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2919,      double zb = ya * yb * 2.0 + yb * yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2920,      temp = za * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2921,      double temp2 = za + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2922,      zb += za - temp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2923,      za = temp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2925,      zb = za * yb + ya * zb + zb * yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2926,      za = za * ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2928,      double na = xs - za;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2929,      double nb = -(na - xs + za);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2930,      nb -= zb;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2932,      est += (na+nb)/(3*est*est);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2935,      est *= p2;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2937,      if (subnormal) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2938,          est *= 3.814697265625E-6;  // 2^-18,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2941,      return est;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2951,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2952,            return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2956,        final double facta = 0.01745329052209854;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2957,        final double factb = 1.997844754509471E-9;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2959,        double xa = doubleHighPart(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2960,        double xb = x - xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2962,        double result = xb * factb + xb * facta + xa * factb + xa * facta;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2963,        if (result == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2964,            result = result * x; // ensure correct sign if calculation underflows,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2966,        return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2976,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2977,            return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2981,        final double facta = 57.2957763671875;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2982,        final double factb = 3.145894820876798E-6;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2984,        double xa = doubleHighPart(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2985,        double xb = x - xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2987,        return xb * factb + xb * facta + xa * factb + xa * facta;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,2996,        return (x < 0) ? -x : x;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3005,        return (x < 0l) ? -x : x;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3014,        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3023,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3032,        if (Double.isInfinite(x)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3033,            return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3035,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3044,        if (Float.isInfinite(x)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3045,            return Float.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3047,        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3059,        if ((n > -1023) && (n < 1024)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3060,            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3064,        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3065,            return d;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3067,        if (n < -2098) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3068,            return (d > 0) ? 0.0 : -0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3070,        if (n > 2097) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3071,            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3075,        final long bits = Double.doubleToLongBits(d);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3076,        final long sign = bits & 0x8000000000000000L;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3077,        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3078,        long mantissa   = bits & 0x000fffffffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3081,        int scaledExponent = exponent + n;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3083,        if (n < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3085,            if (scaledExponent > 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3087,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3088,            } else if (scaledExponent > -53) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3092,                mantissa = mantissa | (1L << 52);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3095,                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3096,                mantissa = mantissa >>> (1 - scaledExponent);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3097,                if (mostSignificantLostBit != 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3099,                    mantissa++;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3101,                return Double.longBitsToDouble(sign | mantissa);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3105,                return (sign == 0L) ? 0.0 : -0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3109,            if (exponent == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3112,                while ((mantissa >>> 52) != 1) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3113,                    mantissa = mantissa << 1;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3114,                    --scaledExponent;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3116,                ++scaledExponent;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3117,                mantissa = mantissa & 0x000fffffffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3119,                if (scaledExponent < 2047) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3120,                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3122,                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3125,            } else if (scaledExponent < 2047) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3126,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3128,                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3143,        if ((n > -127) && (n < 128)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3144,            return f * Float.intBitsToFloat((n + 127) << 23);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3148,        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3149,            return f;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3151,        if (n < -277) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3152,            return (f > 0) ? 0.0f : -0.0f;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3154,        if (n > 276) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3155,            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3159,        final int bits = Float.floatToIntBits(f);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3160,        final int sign = bits & 0x80000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3161,        int  exponent  = (bits >>> 23) & 0xff;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3162,        int mantissa   = bits & 0x007fffff;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3165,        int scaledExponent = exponent + n;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3167,        if (n < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3169,            if (scaledExponent > 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3171,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3172,            } else if (scaledExponent > -24) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3176,                mantissa = mantissa | (1 << 23);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3179,                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3180,                mantissa = mantissa >>> (1 - scaledExponent);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3181,                if (mostSignificantLostBit != 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3183,                    mantissa++;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3185,                return Float.intBitsToFloat(sign | mantissa);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3189,                return (sign == 0) ? 0.0f : -0.0f;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3193,            if (exponent == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3196,                while ((mantissa >>> 23) != 1) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3197,                    mantissa = mantissa << 1;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3198,                    --scaledExponent;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3200,                ++scaledExponent;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3201,                mantissa = mantissa & 0x007fffff;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3203,                if (scaledExponent < 255) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3204,                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3206,                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3209,            } else if (scaledExponent < 255) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3210,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3212,                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3252,        if (Double.isNaN(d) || Double.isNaN(direction)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3253,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3254,        } else if (d == direction) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3255,            return direction;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3256,        } else if (Double.isInfinite(d)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3257,            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3258,        } else if (d == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3259,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3264,        final long bits = Double.doubleToLongBits(d);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3265,        final long sign = bits & 0x8000000000000000L;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3266,        if ((direction < d) ^ (sign == 0L)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3267,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3269,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3308,        if (Double.isNaN(f) || Double.isNaN(direction)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3309,            return Float.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3310,        } else if (f == direction) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3311,            return (float) direction;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3312,        } else if (Float.isInfinite(f)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3313,            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3314,        } else if (f == 0f) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3315,            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3320,        final int bits = Float.floatToIntBits(f);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3321,        final int sign = bits & 0x80000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3322,        if ((direction < f) ^ (sign == 0)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3323,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3325,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3337,        if (x != x) { // NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3338,            return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3341,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3342,            return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3345,        y = (long) x;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3346,        if (x < 0 && y != x) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3347,            y--;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3350,        if (y == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3351,            return x*y;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3354,        return y;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3364,        if (x != x) { // NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3365,            return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3368,        y = floor(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3369,        if (y == x) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3370,            return y;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3373,        y += 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3375,        if (y == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3376,            return x*y;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3379,        return y;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3387,        double y = floor(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3388,        double d = x - y;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3390,        if (d > 0.5) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3391,            if (y == -1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3392,                return -0.0; // Preserve sign of operand,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3394,            return y+1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3396,        if (d < 0.5) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3397,            return y;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3401,        long z = (long) y;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3402,        return (z & 1) == 0 ? y : y + 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3410,        return (long) floor(x + 0.5);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3418,        return (int) floor(x + 0.5f);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3427,        return (a <= b) ? a : b;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3436,        return (a <= b) ? a : b;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3445,        if (a > b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3446,            return b;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3448,        if (a < b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3449,            return a;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3452,        if (a != b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3453,            return Float.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3457,        int bits = Float.floatToRawIntBits(a);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3458,        if (bits == 0x80000000) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3459,            return a;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3461,        return b;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3470,        if (a > b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3471,            return b;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3473,        if (a < b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3474,            return a;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3477,        if (a != b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3478,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3482,        long bits = Double.doubleToRawLongBits(a);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3483,        if (bits == 0x8000000000000000L) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3484,            return a;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3486,        return b;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3495,        return (a <= b) ? b : a;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3504,        return (a <= b) ? b : a;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3513,        if (a > b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3514,            return a;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3516,        if (a < b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3517,            return b;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3520,        if (a != b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3521,            return Float.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3525,        int bits = Float.floatToRawIntBits(a);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3526,        if (bits == 0x80000000) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3527,            return b;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3529,        return a;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3538,        if (a > b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3539,            return a;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3541,        if (a < b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3542,            return b;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3545,        if (a != b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3546,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3550,        long bits = Double.doubleToRawLongBits(a);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3551,        if (bits == 0x8000000000000000L) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3552,            return b;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3554,        return a;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3572,        if (Double.isInfinite(x) || Double.isInfinite(y)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3573,            return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3574,        } else if (Double.isNaN(x) || Double.isNaN(y)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3575,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3578,            final int expX = getExponent(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3579,            final int expY = getExponent(y);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3580,            if (expX > expY + 27) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3582,                return abs(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3583,            } else if (expY > expX + 27) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3585,                return abs(y);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3589,                final int middleExp = (expX + expY) / 2;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3592,"                final double scaledX = scalb(x, -middleExp);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,3593,"                final double scaledY = scalb(y, -middleExp);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,3596,                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3599,"                return scalb(scaledH, middleExp);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,3627,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation",0.0,0,,0
org/apache/commons/math/util/FastMath,41,3639,        long m = Double.doubleToLongBits(magnitude);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3640,        long s = Double.doubleToLongBits(sign);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3641,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3642,            return magnitude;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3644,        return -magnitude; // flip sign,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3656,        int m = Float.floatToIntBits(magnitude);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3657,        int s = Float.floatToIntBits(sign);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3658,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3659,            return magnitude;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3661,        return -magnitude; // flip sign,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3674,        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3687,        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3696,        PrintStream out = System.out;,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3697,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_A"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,3698,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_B"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,3699,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_A"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,3700,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_B"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,3701,"        FastMathCalc.printarray(out, ""LN_MANT"",LN_MANT_LEN, lnMant.LN_MANT);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,3702,"        FastMathCalc.printarray(out, ""SINE_TABLE_A"", SINE_TABLE_LEN, SINE_TABLE_A);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,3703,"        FastMathCalc.printarray(out, ""SINE_TABLE_B"", SINE_TABLE_LEN, SINE_TABLE_B);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,3704,"        FastMathCalc.printarray(out, ""COSINE_TABLE_A"", SINE_TABLE_LEN, COSINE_TABLE_A);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,3705,"        FastMathCalc.printarray(out, ""COSINE_TABLE_B"", SINE_TABLE_LEN, COSINE_TABLE_B);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,3706,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_A"", SINE_TABLE_LEN, TANGENT_TABLE_A);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,3707,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_B"", SINE_TABLE_LEN, TANGENT_TABLE_B);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,3708,    },0.0,0,,0
org/apache/commons/math/util/FastMath,41,80,public class FastMath {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3791,    private static class lnMant {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3796,            if (RECOMPUTE_TABLES_AT_RUNTIME) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3797,                LN_MANT = new double[FastMath.LN_MANT_LEN][];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3800,                for (int i = 0; i < LN_MANT.length; i++) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3801,                    final double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3802,                    LN_MANT[i] = FastMathCalc.slowLog(d);,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3804,            } else if (LOAD_RESOURCES) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3805,                LN_MANT = FastMathResources.loadLnMant();,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3807,                LN_MANT = FastMathLiteralArrays.loadLnMant();,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3809,        },0.0,0,,0
org/apache/commons/math/util/FastMath,41,3711,    private static class ExpIntTable {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3722,            if (RECOMPUTE_TABLES_AT_RUNTIME) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3723,                EXP_INT_TABLE_A = new double[FastMath.EXP_INT_TABLE_LEN];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3724,                EXP_INT_TABLE_B = new double[FastMath.EXP_INT_TABLE_LEN];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3726,                final double tmp[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3727,                final double recip[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3730,                for (int i = 0; i < FastMath.EXP_INT_TABLE_MAX_INDEX; i++) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3731,"                    FastMathCalc.expint(i, tmp);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,3732,                    EXP_INT_TABLE_A[i + FastMath.EXP_INT_TABLE_MAX_INDEX] = tmp[0];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3733,                    EXP_INT_TABLE_B[i + FastMath.EXP_INT_TABLE_MAX_INDEX] = tmp[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3735,                    if (i != 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3737,"                        FastMathCalc.splitReciprocal(tmp, recip);",0.0,0,,0
org/apache/commons/math/util/FastMath,41,3738,                        EXP_INT_TABLE_A[FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[0];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3739,                        EXP_INT_TABLE_B[FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3742,            } else if (LOAD_RESOURCES) {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3743,                final double[][] expInt = FastMathResources.loadExpInt();,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3744,                EXP_INT_TABLE_A = expInt[0];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3745,                EXP_INT_TABLE_B = expInt[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3746,            } else {,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3747,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3748,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,0.0,0,,0
org/apache/commons/math/util/FastMath,41,3750,        },0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,71,        super(original);,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,72,        this.m2 = original.m2;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,73,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,80,        if (n < 1) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,81,            m1 = m2 = 0.0;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,83,        super.increment(d);,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,84,        m2 += ((double) n - 1) * dev * nDev;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,85,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,101,        return m2;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,109,        SecondMoment result = new SecondMoment();,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,110,"        copy(this, result);",0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,111,        return result;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,124,        MathUtils.checkNotNull(source);,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,125,        MathUtils.checkNotNull(dest);,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,126,"        FirstMoment.copy(source, dest);",0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,127,        dest.m2 = source.m2;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,128,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,48,public class SecondMoment extends FirstMoment implements Serializable {,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,93,         super();,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,94,"         copy(original, this);",0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,95,     },0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,102,        if (n == 0) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,103,            m1 = 0.0;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,105,        n++;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,106,        double n0 = n;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,107,        dev = d - m1;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,108,        nDev = dev / n0;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,109,        m1 += nDev;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,110,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,128,        return m1;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,135,        return n;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,143,        FirstMoment result = new FirstMoment();,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,144,"        copy(this, result);",0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,145,        return result;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,158,        MathUtils.checkNotNull(source);,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,159,        MathUtils.checkNotNull(dest);,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,160,        dest.setData(source.getDataRef());,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,161,        dest.n = source.n;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,162,        dest.m1 = source.m1;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,163,        dest.dev = source.dev;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,164,        dest.nDev = source.nDev;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,165,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,50,class FirstMoment extends AbstractStorelessUnivariateStatistic,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,41,59,        if (values == null) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,41,60,            throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,41,62,"        return evaluate(values, 0, values.length);",0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,41,88,"        if (test(values, begin, length)) {",0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,41,89,            clear();,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,41,90,"            incrementAll(values, begin, length);",0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,41,92,        return getResult();,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,41,127,        if (values == null) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,41,128,            throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,41,130,"        incrementAll(values, 0, values.length);",0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,41,131,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,41,146,"        if (test(values, begin, length)) {",0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,41,147,            int k = begin + length;,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,41,148,            for (int i = begin; i < k; i++) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,41,149,                increment(values[i]);,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,41,152,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,41,163,        if (object == this ) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,41,164,            return true;,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,41,166,       if (object instanceof AbstractStorelessUnivariateStatistic == false) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,41,167,            return false;,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,41,169,        AbstractStorelessUnivariateStatistic stat = (AbstractStorelessUnivariateStatistic) object;,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,41,170,"        return Precision.equalsIncludingNaN(stat.getResult(), this.getResult()) &&",0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,41,181,        return 31* (31 + MathUtils.hash(getResult())) + MathUtils.hash(getN());,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,54,        storedData = (values == null) ? null : values.clone();,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,55,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,62,        return (storedData == null) ? null : storedData.clone();,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,70,        return storedData;,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,81,        storedData = new double[length];,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,82,"        System.arraycopy(values, begin, storedData, 0, length);",0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,83,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,93,        return evaluate(storedData);,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,100,"        test(values, 0, 0);",0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,101,"        return evaluate(values, 0, values.length);",0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,137,"        return test(values, begin, length, false);",0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,164,            throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,168,"            throw new NotPositiveException(LocalizedFormats.START_POSITION, begin);",0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,172,"            throw new NotPositiveException(LocalizedFormats.LENGTH, length);",0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,176,"            throw new NumberIsTooLargeException(LocalizedFormats.SUBARRAY_ENDS_AFTER_ARRAY_END,",0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,181,            return false;,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,259,            throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);,0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,263,"            throw new DimensionMismatchException(weights.length, values.length);",0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,269,"                throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX, i);",0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,272,"                throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, weights[i], i);",0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,275,"                throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX, i, weights[i]);",0.0,0,,0
org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,283,            throw new MathIllegalArgumentException(LocalizedFormats.WEIGHT_AT_LEAST_ONE_NON_ZERO);,0.0,0,,0
org/apache/commons/math/exception/NullArgumentException,41,41,        this(LocalizedFormats.NULL_NOT_ALLOWED);,0.0,0,,0
org/apache/commons/math/exception/NullArgumentException,41,42,    },0.0,0,,0
org/apache/commons/math/exception/NullArgumentException,41,50,"        super(pattern, arguments);",0.0,0,,0
org/apache/commons/math/exception/NullArgumentException,41,51,    },0.0,0,,0
org/apache/commons/math/exception/MathIllegalArgumentException,41,44,                                        Object ... args) {,0.0,0,,0
org/apache/commons/math/exception/MathIllegalArgumentException,41,45,        context = new ExceptionContext(this);,0.0,0,,0
org/apache/commons/math/exception/MathIllegalArgumentException,41,46,"        context.addMessage(pattern, args);",0.0,0,,0
org/apache/commons/math/exception/MathIllegalArgumentException,41,47,    },0.0,0,,0
org/apache/commons/math/exception/MathIllegalArgumentException,41,51,        return context;,0.0,0,,0
org/apache/commons/math/exception/MathIllegalArgumentException,41,57,        return context.getMessage();,0.0,0,,0
org/apache/commons/math/exception/MathIllegalArgumentException,41,63,        return context.getLocalizedMessage();,0.0,0,,0
org/apache/commons/math/exception/DimensionMismatchException,41,44,"        super(specific, wrong, expected);",0.0,0,,0
org/apache/commons/math/exception/DimensionMismatchException,41,45,        dimension = expected;,0.0,0,,0
org/apache/commons/math/exception/DimensionMismatchException,41,46,    },0.0,0,,0
org/apache/commons/math/exception/DimensionMismatchException,41,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);",0.0,0,,0
org/apache/commons/math/exception/DimensionMismatchException,41,57,    },0.0,0,,0
org/apache/commons/math/exception/DimensionMismatchException,41,63,        return dimension;,0.0,0,,0
org/apache/commons/math/exception/MathIllegalNumberException,41,46,"        super(pattern, wrong, arguments);",0.0,0,,0
org/apache/commons/math/exception/MathIllegalNumberException,41,47,        argument = wrong;,0.0,0,,0
org/apache/commons/math/exception/MathIllegalNumberException,41,48,    },0.0,0,,0
org/apache/commons/math/exception/MathIllegalNumberException,41,54,        return argument;,0.0,0,,0
org/apache/commons/math/exception/NotPositiveException,41,37,"        super(value, 0, true);",0.0,0,,0
org/apache/commons/math/exception/NotPositiveException,41,38,    },0.0,0,,0
org/apache/commons/math/exception/NotPositiveException,41,47,"        super(specific, value, 0, true);",0.0,0,,0
org/apache/commons/math/exception/NotPositiveException,41,48,    },0.0,0,,0
org/apache/commons/math/exception/NumberIsTooSmallException,41,50,        this(boundIsAllowed ?,0.0,0,,0
org/apache/commons/math/exception/NumberIsTooSmallException,41,54,    },0.0,0,,0
org/apache/commons/math/exception/NumberIsTooSmallException,41,68,"        super(specific, wrong, min);",0.0,0,,0
org/apache/commons/math/exception/NumberIsTooSmallException,41,70,        this.min = min;,0.0,0,,0
org/apache/commons/math/exception/NumberIsTooSmallException,41,71,        this.boundIsAllowed = boundIsAllowed;,0.0,0,,0
org/apache/commons/math/exception/NumberIsTooSmallException,41,72,    },0.0,0,,0
org/apache/commons/math/exception/NumberIsTooSmallException,41,78,        return boundIsAllowed;,0.0,0,,0
org/apache/commons/math/exception/NumberIsTooSmallException,41,85,        return min;,0.0,0,,0
org/apache/commons/math/exception/NumberIsTooLargeException,41,50,        this(boundIsAllowed ?,0.0,0,,0
org/apache/commons/math/exception/NumberIsTooLargeException,41,54,    },0.0,0,,0
org/apache/commons/math/exception/NumberIsTooLargeException,41,67,"        super(specific, wrong, max);",0.0,0,,0
org/apache/commons/math/exception/NumberIsTooLargeException,41,69,        this.max = max;,0.0,0,,0
org/apache/commons/math/exception/NumberIsTooLargeException,41,70,        this.boundIsAllowed = boundIsAllowed;,0.0,0,,0
org/apache/commons/math/exception/NumberIsTooLargeException,41,71,    },0.0,0,,0
org/apache/commons/math/exception/NumberIsTooLargeException,41,77,        return boundIsAllowed;,0.0,0,,0
org/apache/commons/math/exception/NumberIsTooLargeException,41,84,        return max;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,111,    public Variance(final SecondMoment m2) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,112,        incMoment = false;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,113,        this.moment = m2;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,114,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,124,    public Variance(boolean isBiasCorrected) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,125,        moment = new SecondMoment();,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,126,        this.isBiasCorrected = isBiasCorrected;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,127,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,138,"    public Variance(boolean isBiasCorrected, SecondMoment m2) {",0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,139,        incMoment = false;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,140,        this.moment = m2;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,141,        this.isBiasCorrected = isBiasCorrected;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,142,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,150,    public Variance(Variance original) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,151,"        copy(original, this);",0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,152,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,169,        if (incMoment) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,170,            moment.increment(d);,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,172,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,179,            if (moment.n == 0) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,180,                return Double.NaN;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,181,            } else if (moment.n == 1) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,182,                return 0d;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,184,                if (isBiasCorrected) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,185,                    return moment.m2 / (moment.n - 1d);,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,187,                    return moment.m2 / (moment.n);,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,196,        return moment.getN();,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,227,        if (values == null) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,228,            throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,230,"        return evaluate(values, 0, values.length);",0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,256,        double var = Double.NaN;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,258,"        if (test(values, begin, length)) {",0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,259,            clear();,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,260,            if (length == 1) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,261,                var = 0.0;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,262,            } else if (length > 1) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,263,                Mean mean = new Mean();,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,264,"                double m = mean.evaluate(values, begin, length);",0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,265,"                var = evaluate(values, m, begin, length);",0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,268,        return var;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,321,                var = 0.0;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,402,        double var = Double.NaN;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,404,"        if (test(values, begin, length)) {",0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,405,            if (length == 1) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,406,                var = 0.0;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,407,            } else if (length > 1) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,408,                double accum = 0.0;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,409,                double dev = 0.0;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,410,                double accum2 = 0.0;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,411,                for (int i = begin; i < begin + length; i++) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,412,                    dev = values[i] - mean;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,413,                    accum += dev * dev;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,414,                    accum2 += dev;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,416,                double len = length;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,417,                if (isBiasCorrected) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,418,                    var = (accum - (accum2 * accum2 / len)) / (len - 1.0);,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,420,                    var = (accum - (accum2 * accum2 / len)) / len;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,424,        return var;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,453,"        return evaluate(values, mean, 0, values.length);",0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,508,                var = 0.0;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,527,                    var = (accum - (accum2 * accum2 / sumWts)) / sumWts;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,576,"        return evaluate(values, weights, mean, 0, values.length);",0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,583,        return isBiasCorrected;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,590,        this.isBiasCorrected = biasCorrected;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,591,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,598,        Variance result = new Variance();,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,599,"        copy(this, result);",0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,600,        return result;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,613,        MathUtils.checkNotNull(source);,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,614,        MathUtils.checkNotNull(dest);,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,615,        dest.setData(source.getDataRef());,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,616,        dest.moment = source.moment.copy();,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,617,        dest.isBiasCorrected = source.isBiasCorrected;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,618,        dest.incMoment = source.incMoment;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,619,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Variance,41,69,"public class Variance extends AbstractStorelessUnivariateStatistic implements Serializable, WeightedEvaluation {",0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,41,89,    public Mean(final FirstMoment m1) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,41,90,        this.moment = m1;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,41,91,        incMoment = false;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,41,92,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,41,100,    public Mean(Mean original) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,41,101,"        copy(original, this);",0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,41,102,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,41,109,        if (incMoment) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,41,110,            moment.increment(d);,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,41,112,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,41,119,        if (incMoment) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,41,120,            moment.clear();,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,41,122,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,41,129,        return moment.m1;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,41,136,        return moment.getN();,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,41,157,"        if (test(values, begin, length)) {",0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,41,158,            Sum sum = new Sum();,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,41,159,            double sampleSize = length;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,41,162,"            double xbar = sum.evaluate(values, begin, length) / sampleSize;",0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,41,165,            double correction = 0;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,41,166,            for (int i = begin; i < begin + length; i++) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,41,167,                correction += values[i] - xbar;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,41,169,            return xbar + (correction/sampleSize);,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,41,171,        return Double.NaN;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,41,219,        return Double.NaN;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,41,247,"        return evaluate(values, weights, 0, values.length);",0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,41,255,        Mean result = new Mean();,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,41,256,"        copy(this, result);",0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,41,257,        return result;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,41,271,        MathUtils.checkNotNull(source);,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,41,272,        MathUtils.checkNotNull(dest);,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,41,273,        dest.setData(source.getDataRef());,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,41,274,        dest.incMoment = source.incMoment;,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,41,275,        dest.moment = source.moment.copy();,0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,41,276,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/moment/Mean,41,61,public class Mean extends AbstractStorelessUnivariateStatistic,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,41,67,    public Sum(Sum original) {,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,41,68,"        copy(original, this);",0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,41,69,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,41,76,        value += d;,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,41,77,        n++;,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,41,78,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,41,85,        return value;,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,41,92,        return n;,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,41,100,        value = 0;,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,41,101,        n = 0;,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,41,102,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,41,192,"        return evaluate(values, weights, 0, values.length);",0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,41,200,        Sum result = new Sum();,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,41,201,"        copy(this, result);",0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,41,202,        return result;,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,41,215,        MathUtils.checkNotNull(source);,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,41,216,        MathUtils.checkNotNull(dest);,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,41,217,        dest.setData(source.getDataRef());,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,41,218,        dest.n = source.n;,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,41,219,        dest.value = source.value;,0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,41,220,    },0.0,0,,0
org/apache/commons/math/stat/descriptive/summary/Sum,41,40,public class Sum extends AbstractStorelessUnivariateStatistic implements Serializable {,0.0,0,,0
